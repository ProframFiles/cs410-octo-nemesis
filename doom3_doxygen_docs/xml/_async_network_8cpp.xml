<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_async_network_8cpp" kind="file">
    <compoundname>AsyncNetwork.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../../idlib/precompiled.h</includes>
    <includes refid="_async_network_8h" local="yes">AsyncNetwork.h</includes>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AsyncNetwork.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><ref refid="classid_async_server" kindref="compound">idAsyncServer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::server;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="classid_async_client" kindref="compound">idAsyncClient</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::client;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::verbose(<sp/></highlight><highlight class="stringliteral">&quot;net_verbose&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_INTEGER<sp/>|<sp/>CVAR_NOCHEAT,<sp/></highlight><highlight class="stringliteral">&quot;1<sp/>=<sp/>verbose<sp/>output,<sp/>2<sp/>=<sp/>even<sp/>more<sp/>verbose<sp/>output&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>2,<sp/>idCmdSystem::ArgCompletion_Integer&lt;0,2&gt;<sp/>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::allowCheats(<sp/></highlight><highlight class="stringliteral">&quot;net_allowCheats&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_BOOL<sp/>|<sp/>CVAR_NETWORKSYNC,<sp/></highlight><highlight class="stringliteral">&quot;Allow<sp/>cheats<sp/>in<sp/>network<sp/>game&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ID_DEDICATED</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"></highlight><highlight class="comment">//<sp/>dedicated<sp/>executable<sp/>can<sp/>only<sp/>have<sp/>a<sp/>value<sp/>of<sp/>1<sp/>for<sp/>net_serverDedicated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::serverDedicated(<sp/></highlight><highlight class="stringliteral">&quot;net_serverDedicated&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>CVAR_SERVERINFO<sp/>|<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_INTEGER<sp/>|<sp/>CVAR_NOCHEAT<sp/>|<sp/>CVAR_ROM,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::serverDedicated(<sp/></highlight><highlight class="stringliteral">&quot;net_serverDedicated&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SERVERINFO<sp/>|<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_INTEGER<sp/>|<sp/>CVAR_NOCHEAT,<sp/></highlight><highlight class="stringliteral">&quot;1<sp/>=<sp/>text<sp/>console<sp/>dedicated<sp/>server,<sp/>2<sp/>=<sp/>graphical<sp/>dedicated<sp/>server&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>2,<sp/>idCmdSystem::ArgCompletion_Integer&lt;0,2&gt;<sp/>);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::serverSnapshotDelay(<sp/></highlight><highlight class="stringliteral">&quot;net_serverSnapshotDelay&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;50&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_INTEGER<sp/>|<sp/>CVAR_NOCHEAT,<sp/></highlight><highlight class="stringliteral">&quot;delay<sp/>between<sp/>snapshots<sp/>in<sp/>milliseconds&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::serverMaxClientRate(<sp/></highlight><highlight class="stringliteral">&quot;net_serverMaxClientRate&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;16000&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_INTEGER<sp/>|<sp/>CVAR_ARCHIVE<sp/>|<sp/>CVAR_NOCHEAT,<sp/></highlight><highlight class="stringliteral">&quot;maximum<sp/>rate<sp/>to<sp/>a<sp/>client<sp/>in<sp/>bytes/sec&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::clientMaxRate(<sp/></highlight><highlight class="stringliteral">&quot;net_clientMaxRate&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;16000&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_INTEGER<sp/>|<sp/>CVAR_ARCHIVE<sp/>|<sp/>CVAR_NOCHEAT,<sp/></highlight><highlight class="stringliteral">&quot;maximum<sp/>rate<sp/>requested<sp/>by<sp/>client<sp/>from<sp/>server<sp/>in<sp/>bytes/sec&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::serverMaxUsercmdRelay(<sp/></highlight><highlight class="stringliteral">&quot;net_serverMaxUsercmdRelay&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_INTEGER<sp/>|<sp/>CVAR_NOCHEAT,<sp/></highlight><highlight class="stringliteral">&quot;maximum<sp/>number<sp/>of<sp/>usercmds<sp/>from<sp/>other<sp/>clients<sp/>the<sp/>server<sp/>relays<sp/>to<sp/>a<sp/>client&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>MAX_USERCMD_RELAY,<sp/>idCmdSystem::ArgCompletion_Integer&lt;1,MAX_USERCMD_RELAY&gt;<sp/>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::serverZombieTimeout(<sp/></highlight><highlight class="stringliteral">&quot;net_serverZombieTimeout&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_INTEGER<sp/>|<sp/>CVAR_NOCHEAT,<sp/></highlight><highlight class="stringliteral">&quot;disconnected<sp/>client<sp/>timeout<sp/>in<sp/>seconds&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::serverClientTimeout(<sp/></highlight><highlight class="stringliteral">&quot;net_serverClientTimeout&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;40&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_INTEGER<sp/>|<sp/>CVAR_NOCHEAT,<sp/></highlight><highlight class="stringliteral">&quot;client<sp/>time<sp/>out<sp/>in<sp/>seconds&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::clientServerTimeout(<sp/></highlight><highlight class="stringliteral">&quot;net_clientServerTimeout&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;40&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_INTEGER<sp/>|<sp/>CVAR_NOCHEAT,<sp/></highlight><highlight class="stringliteral">&quot;server<sp/>time<sp/>out<sp/>in<sp/>seconds&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::serverDrawClient(<sp/></highlight><highlight class="stringliteral">&quot;net_serverDrawClient&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-1&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_INTEGER,<sp/></highlight><highlight class="stringliteral">&quot;number<sp/>of<sp/>client<sp/>for<sp/>which<sp/>to<sp/>draw<sp/>view<sp/>on<sp/>server&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::serverRemoteConsolePassword(<sp/></highlight><highlight class="stringliteral">&quot;net_serverRemoteConsolePassword&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_NOCHEAT,<sp/></highlight><highlight class="stringliteral">&quot;remote<sp/>console<sp/>password&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::clientPrediction(<sp/></highlight><highlight class="stringliteral">&quot;net_clientPrediction&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;16&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_INTEGER<sp/>|<sp/>CVAR_NOCHEAT,<sp/></highlight><highlight class="stringliteral">&quot;additional<sp/>client<sp/>side<sp/>prediction<sp/>in<sp/>milliseconds&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::clientMaxPrediction(<sp/></highlight><highlight class="stringliteral">&quot;net_clientMaxPrediction&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1000&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_INTEGER<sp/>|<sp/>CVAR_NOCHEAT,<sp/></highlight><highlight class="stringliteral">&quot;maximum<sp/>number<sp/>of<sp/>milliseconds<sp/>a<sp/>client<sp/>can<sp/>predict<sp/>ahead<sp/>of<sp/>server.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::clientUsercmdBackup(<sp/></highlight><highlight class="stringliteral">&quot;net_clientUsercmdBackup&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_INTEGER<sp/>|<sp/>CVAR_NOCHEAT,<sp/></highlight><highlight class="stringliteral">&quot;number<sp/>of<sp/>usercmds<sp/>to<sp/>resend&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::clientRemoteConsoleAddress(<sp/></highlight><highlight class="stringliteral">&quot;net_clientRemoteConsoleAddress&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;localhost&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_NOCHEAT,<sp/></highlight><highlight class="stringliteral">&quot;remote<sp/>console<sp/>address&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::clientRemoteConsolePassword(<sp/></highlight><highlight class="stringliteral">&quot;net_clientRemoteConsolePassword&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_NOCHEAT,<sp/></highlight><highlight class="stringliteral">&quot;remote<sp/>console<sp/>password&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::master0(<sp/></highlight><highlight class="stringliteral">&quot;net_master0&quot;</highlight><highlight class="normal">,<sp/>IDNET_HOST<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>IDNET_MASTER_PORT,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_ROM,<sp/></highlight><highlight class="stringliteral">&quot;idnet<sp/>master<sp/>server<sp/>address&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::master1(<sp/></highlight><highlight class="stringliteral">&quot;net_master1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_ARCHIVE,<sp/></highlight><highlight class="stringliteral">&quot;1st<sp/>master<sp/>server<sp/>address&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::master2(<sp/></highlight><highlight class="stringliteral">&quot;net_master2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_ARCHIVE,<sp/></highlight><highlight class="stringliteral">&quot;2nd<sp/>master<sp/>server<sp/>address&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::master3(<sp/></highlight><highlight class="stringliteral">&quot;net_master3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_ARCHIVE,<sp/></highlight><highlight class="stringliteral">&quot;3rd<sp/>master<sp/>server<sp/>address&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::master4(<sp/></highlight><highlight class="stringliteral">&quot;net_master4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_ARCHIVE,<sp/></highlight><highlight class="stringliteral">&quot;4th<sp/>master<sp/>server<sp/>address&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::LANServer(<sp/></highlight><highlight class="stringliteral">&quot;net_LANServer&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_BOOL<sp/>|<sp/>CVAR_NOCHEAT,<sp/></highlight><highlight class="stringliteral">&quot;config<sp/>LAN<sp/>games<sp/>only<sp/>-<sp/>affects<sp/>clients<sp/>and<sp/>servers&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::serverReloadEngine(<sp/></highlight><highlight class="stringliteral">&quot;net_serverReloadEngine&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_INTEGER<sp/>|<sp/>CVAR_NOCHEAT,<sp/></highlight><highlight class="stringliteral">&quot;perform<sp/>a<sp/>full<sp/>reload<sp/>on<sp/>next<sp/>map<sp/>restart<sp/>(including<sp/>flushing<sp/>referenced<sp/>pak<sp/>files)<sp/>-<sp/>decreased<sp/>if<sp/>&gt;<sp/>0&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::serverAllowServerMod(<sp/></highlight><highlight class="stringliteral">&quot;net_serverAllowServerMod&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_BOOL<sp/>|<sp/>CVAR_NOCHEAT,<sp/></highlight><highlight class="stringliteral">&quot;allow<sp/>server-side<sp/>mods&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::idleServer(<sp/></highlight><highlight class="stringliteral">&quot;si_idleServer&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_BOOL<sp/>|<sp/>CVAR_INIT<sp/>|<sp/>CVAR_SERVERINFO,<sp/></highlight><highlight class="stringliteral">&quot;game<sp/>clients<sp/>are<sp/>idle&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::clientDownload(<sp/></highlight><highlight class="stringliteral">&quot;net_clientDownload&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>CVAR_SYSTEM<sp/>|<sp/>CVAR_INTEGER<sp/>|<sp/>CVAR_ARCHIVE,<sp/></highlight><highlight class="stringliteral">&quot;client<sp/>pk4<sp/>downloads<sp/>policy:<sp/>0<sp/>-<sp/>never,<sp/>1<sp/>-<sp/>ask,<sp/>2<sp/>-<sp/>always<sp/>(will<sp/>still<sp/>prompt<sp/>for<sp/>binary<sp/>code)&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::realTime;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="structmaster__s" kindref="compound">master_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::masters[<sp/>MAX_MASTER_SERVERS<sp/>];</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="74"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="75"><highlight class="comment">idAsyncNetwork::idAsyncNetwork</highlight></codeline>
<codeline lineno="76"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="77"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">idAsyncNetwork::idAsyncNetwork(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="82"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="83"><highlight class="comment">idAsyncNetwork::Init</highlight></codeline>
<codeline lineno="84"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="85"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncNetwork::Init(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>realTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>masters,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>masters<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>masters[0].var<sp/>=<sp/>&amp;master0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>masters[1].var<sp/>=<sp/>&amp;master1;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>masters[2].var<sp/>=<sp/>&amp;master2;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>masters[3].var<sp/>=<sp/>&amp;master3;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>masters[4].var<sp/>=<sp/>&amp;master4;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ID_DEMO_BUILD</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;AddCommand(<sp/></highlight><highlight class="stringliteral">&quot;spawnServer&quot;</highlight><highlight class="normal">,<sp/>SpawnServer_f,<sp/>CMD_FL_SYSTEM,<sp/></highlight><highlight class="stringliteral">&quot;spawns<sp/>a<sp/>server&quot;</highlight><highlight class="normal">,<sp/>idCmdSystem::ArgCompletion_MapName<sp/>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;AddCommand(<sp/></highlight><highlight class="stringliteral">&quot;nextMap&quot;</highlight><highlight class="normal">,<sp/>NextMap_f,<sp/>CMD_FL_SYSTEM,<sp/></highlight><highlight class="stringliteral">&quot;loads<sp/>the<sp/>next<sp/>map<sp/>on<sp/>the<sp/>server&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;AddCommand(<sp/></highlight><highlight class="stringliteral">&quot;connect&quot;</highlight><highlight class="normal">,<sp/>Connect_f,<sp/>CMD_FL_SYSTEM,<sp/></highlight><highlight class="stringliteral">&quot;connects<sp/>to<sp/>a<sp/>server&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;AddCommand(<sp/></highlight><highlight class="stringliteral">&quot;reconnect&quot;</highlight><highlight class="normal">,<sp/>Reconnect_f,<sp/>CMD_FL_SYSTEM,<sp/></highlight><highlight class="stringliteral">&quot;reconnect<sp/>to<sp/>the<sp/>last<sp/>server<sp/>we<sp/>tried<sp/>to<sp/>connect<sp/>to&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;AddCommand(<sp/></highlight><highlight class="stringliteral">&quot;serverInfo&quot;</highlight><highlight class="normal">,<sp/>GetServerInfo_f,<sp/>CMD_FL_SYSTEM,<sp/></highlight><highlight class="stringliteral">&quot;shows<sp/>server<sp/>info&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;AddCommand(<sp/></highlight><highlight class="stringliteral">&quot;LANScan&quot;</highlight><highlight class="normal">,<sp/>GetLANServers_f,<sp/>CMD_FL_SYSTEM,<sp/></highlight><highlight class="stringliteral">&quot;scans<sp/>LAN<sp/>for<sp/>servers&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;AddCommand(<sp/></highlight><highlight class="stringliteral">&quot;listServers&quot;</highlight><highlight class="normal">,<sp/>ListServers_f,<sp/>CMD_FL_SYSTEM,<sp/></highlight><highlight class="stringliteral">&quot;lists<sp/>scanned<sp/>servers&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;AddCommand(<sp/></highlight><highlight class="stringliteral">&quot;rcon&quot;</highlight><highlight class="normal">,<sp/>RemoteConsole_f,<sp/>CMD_FL_SYSTEM,<sp/></highlight><highlight class="stringliteral">&quot;sends<sp/>remote<sp/>console<sp/>command<sp/>to<sp/>server&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;AddCommand(<sp/></highlight><highlight class="stringliteral">&quot;heartbeat&quot;</highlight><highlight class="normal">,<sp/>Heartbeat_f,<sp/>CMD_FL_SYSTEM,<sp/></highlight><highlight class="stringliteral">&quot;send<sp/>a<sp/>heartbeat<sp/>to<sp/>the<sp/>the<sp/>master<sp/>servers&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;AddCommand(<sp/></highlight><highlight class="stringliteral">&quot;kick&quot;</highlight><highlight class="normal">,<sp/>Kick_f,<sp/>CMD_FL_SYSTEM,<sp/></highlight><highlight class="stringliteral">&quot;kick<sp/>a<sp/>client<sp/>by<sp/>connection<sp/>number&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;AddCommand(<sp/></highlight><highlight class="stringliteral">&quot;checkNewVersion&quot;</highlight><highlight class="normal">,<sp/>CheckNewVersion_f,<sp/>CMD_FL_SYSTEM,<sp/></highlight><highlight class="stringliteral">&quot;check<sp/>if<sp/>a<sp/>new<sp/>version<sp/>of<sp/>the<sp/>game<sp/>is<sp/>available&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;AddCommand(<sp/></highlight><highlight class="stringliteral">&quot;updateUI&quot;</highlight><highlight class="normal">,<sp/>UpdateUI_f,<sp/>CMD_FL_SYSTEM,<sp/></highlight><highlight class="stringliteral">&quot;internal<sp/>-<sp/>cause<sp/>a<sp/>sync<sp/>down<sp/>of<sp/>game-modified<sp/>userinfo&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="114"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="115"><highlight class="comment">idAsyncNetwork::GetMasterAddress</highlight></codeline>
<codeline lineno="116"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="117"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>idAsyncNetwork::GetMasterAddress(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>ret;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>GetMasterAddress(<sp/>0,<sp/>ret<sp/>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>masters[<sp/>0<sp/>].address;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="125"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="126"><highlight class="comment">idAsyncNetwork::GetMasterAddress</highlight></codeline>
<codeline lineno="127"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="128"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAsyncNetwork::GetMasterAddress(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>&amp;adr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!masters[<sp/>index<sp/>].var<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>masters[<sp/>index<sp/>].var-&gt;GetString()[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!masters[<sp/>index<sp/>].resolved<sp/>||<sp/>masters[<sp/>index<sp/>].var-&gt;IsModified()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masters[<sp/>index<sp/>].var-&gt;ClearModified();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!Sys_StringToNetAdr(<sp/>masters[<sp/>index<sp/>].var-&gt;GetString(),<sp/>&amp;masters[<sp/>index<sp/>].address,<sp/>true<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>resolve<sp/>master%d:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>index,<sp/>masters[<sp/>index<sp/>].var-&gt;GetString()<sp/>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(<sp/>&amp;masters[<sp/>index<sp/>].address,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masters[<sp/>index<sp/>].resolved<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>masters[<sp/>index<sp/>].address.port<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masters[<sp/>index<sp/>].address.port<sp/>=<sp/>atoi(<sp/>IDNET_MASTER_PORT<sp/>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masters[<sp/>index<sp/>].resolved<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>adr<sp/>=<sp/>masters[<sp/>index<sp/>].address;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="154"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="155"><highlight class="comment">idAsyncNetwork::Shutdown</highlight></codeline>
<codeline lineno="156"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="157"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncNetwork::Shutdown(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>client.serverList.Shutdown();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>client.DisconnectFromServer();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>client.ClearServers();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>client.ClosePort();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>server.Kill();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>server.ClosePort();</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="168"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="169"><highlight class="comment">idAsyncNetwork::RunFrame</highlight></codeline>
<codeline lineno="170"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="171"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncNetwork::RunFrame(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>console-&gt;Active()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_GrabMouseCursor(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usercmdGen-&gt;InhibitUsercmd(<sp/>INHIBIT_ASYNC,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_GrabMouseCursor(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usercmdGen-&gt;InhibitUsercmd(<sp/>INHIBIT_ASYNC,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>client.RunFrame();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>server.RunFrame();</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="185"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="186"><highlight class="comment">idAsyncNetwork::WriteUserCmdDelta</highlight></codeline>
<codeline lineno="187"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="188"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncNetwork::WriteUserCmdDelta(<sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>&amp;msg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classusercmd__t" kindref="compound">usercmd_t</ref><sp/>&amp;cmd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classusercmd__t" kindref="compound">usercmd_t</ref><sp/>*base<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>base<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaLongCounter(<sp/>base-&gt;gameTime,<sp/>cmd.gameTime<sp/>);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaByte(<sp/>base-&gt;buttons,<sp/>cmd.buttons<sp/>);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaShort(<sp/>base-&gt;mx,<sp/>cmd.mx<sp/>);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaShort(<sp/>base-&gt;my,<sp/>cmd.my<sp/>);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaChar(<sp/>base-&gt;forwardmove,<sp/>cmd.forwardmove<sp/>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaChar(<sp/>base-&gt;rightmove,<sp/>cmd.rightmove<sp/>);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaChar(<sp/>base-&gt;upmove,<sp/>cmd.upmove<sp/>);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaShort(<sp/>base-&gt;angles[0],<sp/>cmd.angles[0]<sp/>);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaShort(<sp/>base-&gt;angles[1],<sp/>cmd.angles[1]<sp/>);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaShort(<sp/>base-&gt;angles[2],<sp/>cmd.angles[2]<sp/>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>cmd.gameTime<sp/>);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>cmd.buttons<sp/>);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteShort(<sp/>cmd.mx<sp/>);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteShort(<sp/>cmd.my<sp/>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteChar(<sp/>cmd.forwardmove<sp/>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteChar(<sp/>cmd.rightmove<sp/>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteChar(<sp/>cmd.upmove<sp/>);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteShort(<sp/>cmd.angles[0]<sp/>);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteShort(<sp/>cmd.angles[1]<sp/>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteShort(<sp/>cmd.angles[2]<sp/>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="217"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="218"><highlight class="comment">idAsyncNetwork::ReadUserCmdDelta</highlight></codeline>
<codeline lineno="219"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="220"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncNetwork::ReadUserCmdDelta(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>&amp;msg,<sp/><ref refid="classusercmd__t" kindref="compound">usercmd_t</ref><sp/>&amp;cmd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classusercmd__t" kindref="compound">usercmd_t</ref><sp/>*base<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>&amp;cmd,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>cmd<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>base<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd.gameTime<sp/>=<sp/>msg.ReadDeltaLongCounter(<sp/>base-&gt;gameTime<sp/>);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd.buttons<sp/>=<sp/>msg.ReadDeltaByte(<sp/>base-&gt;buttons<sp/>);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd.mx<sp/>=<sp/>msg.ReadDeltaShort(<sp/>base-&gt;mx<sp/>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd.my<sp/>=<sp/>msg.ReadDeltaShort(<sp/>base-&gt;my<sp/>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd.forwardmove<sp/>=<sp/>msg.ReadDeltaChar(<sp/>base-&gt;forwardmove<sp/>);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd.rightmove<sp/>=<sp/>msg.ReadDeltaChar(<sp/>base-&gt;rightmove<sp/>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd.upmove<sp/>=<sp/>msg.ReadDeltaChar(<sp/>base-&gt;upmove<sp/>);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd.angles[0]<sp/>=<sp/>msg.ReadDeltaShort(<sp/>base-&gt;angles[0]<sp/>);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd.angles[1]<sp/>=<sp/>msg.ReadDeltaShort(<sp/>base-&gt;angles[1]<sp/>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd.angles[2]<sp/>=<sp/>msg.ReadDeltaShort(<sp/>base-&gt;angles[2]<sp/>);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>cmd.gameTime<sp/>=<sp/>msg.ReadLong();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>cmd.buttons<sp/>=<sp/>msg.ReadByte();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>cmd.mx<sp/>=<sp/>msg.ReadShort();</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>cmd.my<sp/>=<sp/>msg.ReadShort();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>cmd.forwardmove<sp/>=<sp/>msg.ReadChar();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>cmd.rightmove<sp/>=<sp/>msg.ReadChar();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>cmd.upmove<sp/>=<sp/>msg.ReadChar();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>cmd.angles[0]<sp/>=<sp/>msg.ReadShort();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>cmd.angles[1]<sp/>=<sp/>msg.ReadShort();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>cmd.angles[2]<sp/>=<sp/>msg.ReadShort();</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="251"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="252"><highlight class="comment">idAsyncNetwork::DuplicateUsercmd</highlight></codeline>
<codeline lineno="253"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="254"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAsyncNetwork::DuplicateUsercmd(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classusercmd__t" kindref="compound">usercmd_t</ref><sp/>&amp;previousUserCmd,<sp/><ref refid="classusercmd__t" kindref="compound">usercmd_t</ref><sp/>&amp;currentUserCmd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frame,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>currentUserCmd.gameTime<sp/>&lt;=<sp/>previousUserCmd.gameTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentUserCmd<sp/>=<sp/>previousUserCmd;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentUserCmd.gameFrame<sp/>=<sp/>frame;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentUserCmd.gameTime<sp/>=<sp/>time;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentUserCmd.duplicateCount++;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>currentUserCmd.duplicateCount<sp/>&gt;<sp/>MAX_USERCMD_DUPLICATION<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentUserCmd.buttons<sp/>&amp;=<sp/>~BUTTON_ATTACK;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>abs(<sp/>currentUserCmd.forwardmove<sp/>)<sp/>&gt;<sp/>2<sp/>)<sp/>currentUserCmd.forwardmove<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>abs(<sp/>currentUserCmd.rightmove<sp/>)<sp/>&gt;<sp/>2<sp/>)<sp/>currentUserCmd.rightmove<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>abs(<sp/>currentUserCmd.upmove<sp/>)<sp/>&gt;<sp/>2<sp/>)<sp/>currentUserCmd.upmove<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="277"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="278"><highlight class="comment">idAsyncNetwork::UsercmdInputChanged</highlight></codeline>
<codeline lineno="279"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="280"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAsyncNetwork::UsercmdInputChanged(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classusercmd__t" kindref="compound">usercmd_t</ref><sp/>&amp;previousUserCmd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classusercmd__t" kindref="compound">usercmd_t</ref><sp/>&amp;currentUserCmd<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>previousUserCmd.buttons<sp/>!=<sp/>currentUserCmd.buttons<sp/>||</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previousUserCmd.forwardmove<sp/>!=<sp/>currentUserCmd.forwardmove<sp/>||</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previousUserCmd.rightmove<sp/>!=<sp/>currentUserCmd.rightmove<sp/>||</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previousUserCmd.upmove<sp/>!=<sp/>currentUserCmd.upmove<sp/>||</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previousUserCmd.angles[0]<sp/>!=<sp/>currentUserCmd.angles[0]<sp/>||</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previousUserCmd.angles[1]<sp/>!=<sp/>currentUserCmd.angles[1]<sp/>||</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previousUserCmd.angles[2]<sp/>!=<sp/>currentUserCmd.angles[2];</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="292"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="293"><highlight class="comment">idAsyncNetwork::SpawnServer_f</highlight></codeline>
<codeline lineno="294"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="295"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncNetwork::SpawnServer_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(args.Argc()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvarSystem-&gt;SetCVarString(</highlight><highlight class="stringliteral">&quot;si_map&quot;</highlight><highlight class="normal">,<sp/>args.Argv(1));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>let<sp/>a<sp/>server<sp/>spawn<sp/>with<sp/>singleplayer<sp/>game<sp/>type<sp/>-<sp/>it<sp/>will<sp/>crash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idStr::Icmp(<sp/>cvarSystem-&gt;GetCVarString(<sp/></highlight><highlight class="stringliteral">&quot;si_gameType&quot;</highlight><highlight class="normal"><sp/>),<sp/></highlight><highlight class="stringliteral">&quot;singleplayer&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvarSystem-&gt;SetCVarString(<sp/></highlight><highlight class="stringliteral">&quot;si_gameType&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;deathmatch&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>com_asyncInput.SetBool(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>the<sp/>current<sp/>system<sp/>state<sp/>is<sp/>compatible<sp/>with<sp/>net_serverDedicated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>cvarSystem-&gt;GetCVarInteger(<sp/></highlight><highlight class="stringliteral">&quot;net_serverDedicated&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!renderSystem-&gt;IsOpenGLRunning()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;OpenGL<sp/>is<sp/>not<sp/>running,<sp/>net_serverDedicated<sp/>==<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>cvarSystem-&gt;GetCVarInteger(<sp/></highlight><highlight class="stringliteral">&quot;net_serverDedicated&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>renderSystem-&gt;IsOpenGLRunning()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_ShowConsole(<sp/>1,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderSystem-&gt;ShutdownOpenGL();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soundSystem-&gt;SetMute(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soundSystem-&gt;ShutdownHW();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>serverMapRestart<sp/>if<sp/>we<sp/>already<sp/>have<sp/>a<sp/>running<sp/>server</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>server.IsActive()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmdSystem-&gt;BufferCommandText(<sp/>CMD_EXEC_NOW,<sp/></highlight><highlight class="stringliteral">&quot;serverMapRestart&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>server.Spawn();</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="333"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="334"><highlight class="comment">idAsyncNetwork::NextMap_f</highlight></codeline>
<codeline lineno="335"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="336"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncNetwork::NextMap_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>server.ExecuteMapChange();</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="342"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="343"><highlight class="comment">idAsyncNetwork::Connect_f</highlight></codeline>
<codeline lineno="344"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="345"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncNetwork::Connect_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>server.IsActive()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;already<sp/>running<sp/>a<sp/>server\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>args.Argc()<sp/>!=<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;USAGE:<sp/>connect<sp/>&lt;serverName&gt;\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>com_asyncInput.SetBool(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>client.ConnectToServer(<sp/>args.Argv(<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="360"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="361"><highlight class="comment">idAsyncNetwork::Reconnect_f</highlight></codeline>
<codeline lineno="362"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="363"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncNetwork::Reconnect_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>client.Reconnect();</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="369"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="370"><highlight class="comment">idAsyncNetwork::GetServerInfo_f</highlight></codeline>
<codeline lineno="371"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="372"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncNetwork::GetServerInfo_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>client.GetServerInfo(<sp/>args.Argv(<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="378"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="379"><highlight class="comment">idAsyncNetwork::GetLANServers_f</highlight></codeline>
<codeline lineno="380"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="381"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncNetwork::GetLANServers_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>client.GetLANServers();</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="387"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="388"><highlight class="comment">idAsyncNetwork::ListServers_f</highlight></codeline>
<codeline lineno="389"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="390"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncNetwork::ListServers_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>client.ListServers();</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="396"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="397"><highlight class="comment">idAsyncNetwork::RemoteConsole_f</highlight></codeline>
<codeline lineno="398"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="399"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncNetwork::RemoteConsole_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>client.RemoteConsole(<sp/>args.Args()<sp/>);</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="405"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="406"><highlight class="comment">idAsyncNetwork::Heartbeat_f</highlight></codeline>
<codeline lineno="407"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="408"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncNetwork::Heartbeat_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!server.IsActive()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;server<sp/>is<sp/>not<sp/>running\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>server.MasterHeartbeat(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="418"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="419"><highlight class="comment">idAsyncNetwork::Kick_f</highlight></codeline>
<codeline lineno="420"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="421"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncNetwork::Kick_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>clientId;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iclient;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!server.IsActive()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;server<sp/>is<sp/>not<sp/>running\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>clientId<sp/>=<sp/>args.Argv(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!clientId.IsNumeric()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;usage:<sp/>kick<sp/>&lt;client<sp/>number&gt;\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>iclient<sp/>=<sp/>atoi(<sp/>clientId<sp/>);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>server.GetLocalClientNum()<sp/>==<sp/>iclient<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>kick<sp/>the<sp/>host\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>server.DropClient(<sp/>iclient,<sp/></highlight><highlight class="stringliteral">&quot;#str_07134&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="447"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="448"><highlight class="comment">idAsyncNetwork::GetNETServers</highlight></codeline>
<codeline lineno="449"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="450"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncNetwork::GetNETServers(<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>client.GetNETServers();</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="456"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="457"><highlight class="comment">idAsyncNetwork::CheckNewVersion_f</highlight></codeline>
<codeline lineno="458"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="459"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncNetwork::CheckNewVersion_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>client.SendVersionCheck();<sp/></highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="465"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="466"><highlight class="comment">idAsyncNetwork::ExecuteSessionCommand</highlight></codeline>
<codeline lineno="467"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="468"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncNetwork::ExecuteSessionCommand(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sessCmd<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sessCmd[<sp/>0<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idStr::Icmp(<sp/>sessCmd,<sp/></highlight><highlight class="stringliteral">&quot;game_startmenu&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>session-&gt;SetGUI(<sp/>game-&gt;StartMenu(),<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="478"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="479"><highlight class="comment">idAsyncNetwork::UpdateUI_f</highlight></codeline>
<codeline lineno="480"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="481"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncNetwork::UpdateUI_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>args.Argc()<sp/>!=<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idAsyncNetwork::UpdateUI_f:<sp/>wrong<sp/>arguments\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!server.IsActive()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idAsyncNetwork::UpdateUI_f:<sp/>server<sp/>is<sp/>not<sp/>active\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>=<sp/>atoi(<sp/>args.Args(<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>server.UpdateUI(<sp/>clientNum<sp/>);</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="496"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="497"><highlight class="comment">idAsyncNetwork::BuildInvalidKeyMsg</highlight></codeline>
<codeline lineno="498"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="499"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncNetwork::BuildInvalidKeyMsg(<sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>&amp;msg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid[<sp/>2<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!valid[<sp/>0<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>+=<sp/>common-&gt;GetLanguageDict()-&gt;GetString(<sp/></highlight><highlight class="stringliteral">&quot;#str_07194&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fileSystem-&gt;HasD3XP()<sp/>&amp;&amp;<sp/>!valid[<sp/>1<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>msg.Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>+=<sp/>common-&gt;GetLanguageDict()-&gt;GetString(<sp/></highlight><highlight class="stringliteral">&quot;#str_07195&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>+=<sp/>common-&gt;GetLanguageDict()-&gt;GetString(<sp/></highlight><highlight class="stringliteral">&quot;#str_04304&quot;</highlight><highlight class="normal"><sp/>);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/framework/async/AsyncNetwork.cpp"/>
  </compounddef>
</doxygen>
