<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_async_server_8cpp" kind="file">
    <compoundname>AsyncServer.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../../idlib/precompiled.h</includes>
    <includes refid="_async_network_8h" local="yes">AsyncNetwork.h</includes>
    <includes refid="_session__local_8h" local="yes">../Session_local.h</includes>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_async_server_8cpp_1a845334ed04e3d3ea47ef4ab555a26faf" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int MIN_RECONNECT_TIME</definition>
        <argsstring></argsstring>
        <name>MIN_RECONNECT_TIME</name>
        <initializer>= 2000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/async/AsyncServer.cpp" line="36" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/async/AsyncServer.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_async_server_8cpp_1a59b857179838fe88a61db08a27cdbe9d" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int EMPTY_RESEND_TIME</definition>
        <argsstring></argsstring>
        <name>EMPTY_RESEND_TIME</name>
        <initializer>= 500</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/async/AsyncServer.cpp" line="37" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/async/AsyncServer.cpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_async_server_8cpp_1ad330128eb3de6b4fae6bc020841c23a4" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int PING_RESEND_TIME</definition>
        <argsstring></argsstring>
        <name>PING_RESEND_TIME</name>
        <initializer>= 500</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/async/AsyncServer.cpp" line="38" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/async/AsyncServer.cpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_async_server_8cpp_1ac5e1e2d36ae3cc1b43807b3701d647ae" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int NOINPUT_IDLE_TIME</definition>
        <argsstring></argsstring>
        <name>NOINPUT_IDLE_TIME</name>
        <initializer>= 30000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/async/AsyncServer.cpp" line="39" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/async/AsyncServer.cpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_async_server_8cpp_1aeaeb329d93e6622ed47df73a9df90ec9" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int HEARTBEAT_MSEC</definition>
        <argsstring></argsstring>
        <name>HEARTBEAT_MSEC</name>
        <initializer>= 5*60*1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/async/AsyncServer.cpp" line="41" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/async/AsyncServer.cpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_async_server_8cpp_1a6f6bd123643ddfbdbbd775cd1eb627ff" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* authReplyMsg[]</definition>
        <argsstring>[]</argsstring>
        <name>authReplyMsg</name>
        <initializer>= {
	
	&quot;#str_07204&quot;,
	
	&quot;#str_07205&quot;,
	
	&quot;#str_07206&quot;,
	
	&quot;#str_07207&quot;,
	
	&quot;#str_07208&quot;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/async/AsyncServer.cpp" line="44" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/async/AsyncServer.cpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_async_server_8cpp_1a332c3564fcbe4c7d1f9ae7f480d57da3" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* authReplyStr[]</definition>
        <argsstring>[]</argsstring>
        <name>authReplyStr</name>
        <initializer>= {
	&quot;AUTH_NONE&quot;,
	&quot;AUTH_OK&quot;,
	&quot;AUTH_WAIT&quot;,
	&quot;AUTH_DENY&quot;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/async/AsyncServer.cpp" line="57" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/async/AsyncServer.cpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_async_server_8cpp_1a2eed20e8c94a970a556e842569d5d1e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RConRedirect</definition>
        <argsstring>(const char *string)</argsstring>
        <name>RConRedirect</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/async/AsyncServer.cpp" line="2014" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/async/AsyncServer.cpp" bodystart="2014" bodyend="2016"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AsyncNetwork.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../Session_local.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MIN_RECONNECT_TIME<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2000;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EMPTY_RESEND_TIME<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>500;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PING_RESEND_TIME<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>500;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NOINPUT_IDLE_TIME<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>30000;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HEARTBEAT_MSEC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>5*60*1000;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>must<sp/>be<sp/>kept<sp/>in<sp/>sync<sp/>with<sp/>authReplyMsg_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>authReplyMsg[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>&quot;Waiting<sp/>for<sp/>authorization&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;#str_07204&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>&quot;Client<sp/>unknown<sp/>to<sp/>auth&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;#str_07205&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>&quot;Access<sp/>denied<sp/>-<sp/>CD<sp/>Key<sp/>in<sp/>use&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;#str_07206&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>&quot;Auth<sp/>custom<sp/>message&quot;,<sp/>//<sp/>placeholder<sp/>-<sp/>we<sp/>propagate<sp/>a<sp/>message<sp/>from<sp/>the<sp/>master</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;#str_07207&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>&quot;Authorize<sp/>Server<sp/>-<sp/>Waiting<sp/>for<sp/>client&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;#str_07208&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">};</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>authReplyStr[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;AUTH_NONE&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;AUTH_OK&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;AUTH_WAIT&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;AUTH_DENY&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="65"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="66"><highlight class="comment">idAsyncServer::idAsyncServer</highlight></codeline>
<codeline lineno="67"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="68"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">idAsyncServer::idAsyncServer(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>active<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>realTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>serverTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>serverId<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>serverDataChecksum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>localClientNum<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>gameInitId<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>gameFrame<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>gameTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>gameTimeResidual<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>challenges,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>challenges<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>userCmds,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>userCmds<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ClearClient(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>serverReloadingEngine<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>nextHeartbeatTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>nextAsyncStatsTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>noRconOutput<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>lastAuthTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>stats_outrate,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>stats_outrate<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>stats_current<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>stats_average_sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>stats_max<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>stats_max_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="101"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="102"><highlight class="comment">idAsyncServer::InitPort</highlight></codeline>
<codeline lineno="103"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="104"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAsyncServer::InitPort(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastPort;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>is<sp/>the<sp/>first<sp/>time<sp/>we<sp/>have<sp/>spawned<sp/>a<sp/>server,<sp/>open<sp/>the<sp/>UDP<sp/>port</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!serverPort.GetPort()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cvarSystem-&gt;GetCVarInteger(<sp/></highlight><highlight class="stringliteral">&quot;net_port&quot;</highlight><highlight class="normal"><sp/>)<sp/>!=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!serverPort.InitForPort(<sp/>cvarSystem-&gt;GetCVarInteger(<sp/></highlight><highlight class="stringliteral">&quot;net_port&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>open<sp/>server<sp/>on<sp/>port<sp/>%d<sp/>(net_port)\n&quot;</highlight><highlight class="normal">,<sp/>cvarSystem-&gt;GetCVarInteger(<sp/></highlight><highlight class="stringliteral">&quot;net_port&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scan<sp/>for<sp/>multiple<sp/>ports,<sp/>in<sp/>case<sp/>other<sp/>servers<sp/>are<sp/>running<sp/>on<sp/>this<sp/>IP<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>lastPort<sp/>=<sp/>0;<sp/>lastPort<sp/>&lt;<sp/>NUM_SERVER_PORTS;<sp/>lastPort++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>serverPort.InitForPort(<sp/>PORT_SERVER<sp/>+<sp/>lastPort<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lastPort<sp/>&gt;=<sp/>NUM_SERVER_PORTS<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>open<sp/>server<sp/>network<sp/>port.\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="133"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="134"><highlight class="comment">idAsyncServer::ClosePort</highlight></codeline>
<codeline lineno="135"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="136"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::ClosePort(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>serverPort.Close();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_CHALLENGES;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>challenges[<sp/>i<sp/>].authReplyPrint.Clear();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="147"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="148"><highlight class="comment">idAsyncServer::Spawn</highlight></codeline>
<codeline lineno="149"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="150"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::Spawn(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>size;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/><sp/><sp/><sp/>from;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shutdown<sp/>any<sp/>current<sp/>game</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>session-&gt;Stop();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>active<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!InitPort()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>trash<sp/>any<sp/>currently<sp/>pending<sp/>packets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>serverPort.GetPacket(<sp/>from,<sp/>msgBuf,<sp/>size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>cheats<sp/>cvars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idAsyncNetwork::allowCheats.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvarSystem-&gt;ResetFlaggedVariables(<sp/>CVAR_CHEAT<sp/>);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>challenges,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>challenges<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>userCmds,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>userCmds<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ClearClient(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;Server<sp/>spawned<sp/>on<sp/>port<sp/>%i.\n&quot;</highlight><highlight class="normal">,<sp/>serverPort.GetPort()<sp/>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>a<sp/>checksum<sp/>on<sp/>some<sp/>of<sp/>the<sp/>essential<sp/>data<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>serverDataChecksum<sp/>=<sp/>declManager-&gt;GetChecksum();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>a<sp/>pseudo<sp/>random<sp/>server<sp/>id,<sp/>but<sp/>don&apos;t<sp/>use<sp/>the<sp/>id<sp/>which<sp/>is<sp/>reserved<sp/>for<sp/>connectionless<sp/>packets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>serverId<sp/>=<sp/>Sys_Milliseconds()<sp/>&amp;<sp/>CONNECTIONLESS_MESSAGE_ID_MASK;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>active<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>nextHeartbeatTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>nextAsyncStatsTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>ExecuteMapChange();</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="199"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="200"><highlight class="comment">idAsyncServer::Kill</highlight></codeline>
<codeline lineno="201"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="202"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::Kill(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!active<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>drop<sp/>all<sp/>clients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DropClient(<sp/>i,<sp/></highlight><highlight class="stringliteral">&quot;#str_07135&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>send<sp/>some<sp/>empty<sp/>messages<sp/>to<sp/>the<sp/>zombie<sp/>clients<sp/>to<sp/>make<sp/>sure<sp/>they<sp/>disconnect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clients[i].clientState<sp/>==<sp/>SCS_ZOMBIE<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clients[i].channel.UnsentFragmentsLeft()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clients[i].channel.SendNextFragment(<sp/>serverPort,<sp/>serverTime<sp/>);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendEmptyToClient(<sp/>i,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_Sleep(<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>any<sp/>pureness</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>fileSystem-&gt;ClearPureChecksums();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>active<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shutdown<sp/>any<sp/>current<sp/>game</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>session-&gt;Stop();</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="239"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="240"><highlight class="comment">idAsyncServer::ExecuteMapChange</highlight></codeline>
<codeline lineno="241"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="242"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::ExecuteMapChange(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>msg;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapName;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>findFile_t<sp/><sp/>ff;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addonReload<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestGameType[<sp/>MAX_STRING_CHARS<sp/>];</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>active<sp/>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>any<sp/>pureness</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>fileSystem-&gt;ClearPureChecksums();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>the<sp/>map/gametype<sp/>combo<sp/>is<sp/>good</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>game-&gt;GetBestGameType(<sp/>cvarSystem-&gt;GetCVarString(</highlight><highlight class="stringliteral">&quot;si_map&quot;</highlight><highlight class="normal">),<sp/>cvarSystem-&gt;GetCVarString(</highlight><highlight class="stringliteral">&quot;si_gametype&quot;</highlight><highlight class="normal">),<sp/>bestGameType<sp/>);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>cvarSystem-&gt;SetCVarString(</highlight><highlight class="stringliteral">&quot;si_gametype&quot;</highlight><highlight class="normal">,<sp/>bestGameType<sp/>);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>map<sp/>settings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;BufferCommandText(<sp/>CMD_EXEC_NOW,<sp/></highlight><highlight class="stringliteral">&quot;rescanSI&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(<sp/>mapName,<sp/></highlight><highlight class="stringliteral">&quot;maps/%s&quot;</highlight><highlight class="normal">,<sp/>sessLocal.mapSpawnData.serverInfo.GetString(<sp/></highlight><highlight class="stringliteral">&quot;si_map&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>mapName.SetFileExtension(<sp/></highlight><highlight class="stringliteral">&quot;.map&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>ff<sp/>=<sp/>fileSystem-&gt;FindFile(<sp/>mapName,<sp/>!serverReloadingEngine<sp/>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>ff<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FIND_NO:</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>find<sp/>map<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>mapName.c_str()<sp/>);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmdSystem-&gt;BufferCommandText(<sp/>CMD_EXEC_APPEND,<sp/></highlight><highlight class="stringliteral">&quot;disconnect\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FIND_ADDON:</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>we<sp/>have<sp/>no<sp/>problem<sp/>with<sp/>addon<sp/>dependencies<sp/>here<sp/>because<sp/>if<sp/>the<sp/>map<sp/>is<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>addon<sp/>pack<sp/>that&apos;s<sp/>already<sp/>on<sp/>search<sp/>list,<sp/>then<sp/>all<sp/>it&apos;s<sp/>deps<sp/>are<sp/>assumed<sp/>to<sp/>be<sp/>on<sp/>search<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;map<sp/>%s<sp/>is<sp/>in<sp/>an<sp/>addon<sp/>pak<sp/>-<sp/>reloading\n&quot;</highlight><highlight class="normal">,<sp/>mapName.c_str()<sp/>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addonReload<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>are<sp/>asked<sp/>to<sp/>do<sp/>a<sp/>full<sp/>reload,<sp/>the<sp/>strategy<sp/>is<sp/>completely<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!serverReloadingEngine<sp/>&amp;&amp;<sp/>(<sp/>addonReload<sp/>||<sp/>idAsyncNetwork::serverReloadEngine.GetInteger()<sp/>!=<sp/>0<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idAsyncNetwork::serverReloadEngine.GetInteger()<sp/>!=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;net_serverReloadEngine<sp/>enabled<sp/>-<sp/>doing<sp/>a<sp/>full<sp/>reload\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tell<sp/>the<sp/>clients<sp/>to<sp/>reconnect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>shouldn&apos;t<sp/>they<sp/>wait<sp/>for<sp/>the<sp/>new<sp/>pure<sp/>list,<sp/>then<sp/>reload?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>a<sp/>lot<sp/>of<sp/>cases<sp/>this<sp/>is<sp/>going<sp/>to<sp/>trigger<sp/>two<sp/>reloadEngines<sp/>for<sp/>the<sp/>clients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>to<sp/>restart,<sp/>the<sp/>other<sp/>one<sp/>to<sp/>set<sp/>paks<sp/>right<sp/>(<sp/>with<sp/>addon<sp/>for<sp/>instance<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>fix<sp/>by<sp/>reconnecting<sp/>without<sp/>reloading<sp/>and<sp/>waiting<sp/>for<sp/>the<sp/>server<sp/>to<sp/>tell..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clients[<sp/>i<sp/>].clientState<sp/>&gt;=<sp/>SCS_PUREWAIT<sp/>&amp;&amp;<sp/>i<sp/>!=<sp/>localClientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>SERVER_RELIABLE_MESSAGE_RELOAD<sp/>);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendReliableMessage(<sp/>i,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clients[<sp/>i<sp/>].clientState<sp/>=<sp/>SCS_ZOMBIE;<sp/></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>don&apos;t<sp/>bother<sp/>sending<sp/>a<sp/>disconnect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmdSystem-&gt;BufferCommandText(<sp/>CMD_EXEC_NOW,<sp/></highlight><highlight class="stringliteral">&quot;reloadEngine&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>serverReloadingEngine<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>get<sp/>caught<sp/>in<sp/>endless<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmdSystem-&gt;BufferCommandText(<sp/>CMD_EXEC_APPEND,<sp/></highlight><highlight class="stringliteral">&quot;spawnServer\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decrease<sp/>feature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idAsyncNetwork::serverReloadEngine.GetInteger()<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::serverReloadEngine.SetInteger(<sp/>idAsyncNetwork::serverReloadEngine.GetInteger()<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>serverReloadingEngine<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>serverTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>game<sp/>id<sp/>and<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>gameInitId<sp/>^=<sp/>Sys_Milliseconds();<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>make<sp/>sure<sp/>the<sp/>gameInitId<sp/>is<sp/>always<sp/>a<sp/>positive<sp/>number<sp/>because<sp/>negative<sp/>numbers<sp/>have<sp/>special<sp/>meaning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>gameFrame<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>gameTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>gameTimeResidual<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>userCmds,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>userCmds<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idAsyncNetwork::serverDedicated.GetInteger()<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InitLocalClient(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localClientNum<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>re-initialize<sp/>all<sp/>connected<sp/>clients<sp/>for<sp/>the<sp/>new<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clients[i].clientState<sp/>&gt;=<sp/>SCS_PUREWAIT<sp/>&amp;&amp;<sp/>i<sp/>!=<sp/>localClientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InitClient(<sp/>i,<sp/>clients[i].clientId,<sp/>clients[i].clientRate<sp/>);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendGameInitToClient(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sessLocal.mapSpawnData.serverInfo.GetBool(<sp/></highlight><highlight class="stringliteral">&quot;si_pure&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clients[<sp/>i<sp/>].clientState<sp/>=<sp/>SCS_PUREWAIT;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>the<sp/>game<sp/>pak<sp/>checksums</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>this<sp/>is<sp/>not<sp/>dependant<sp/>on<sp/>si_pure<sp/>we<sp/>catch<sp/>anything<sp/>bad<sp/>before<sp/>loading<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sessLocal.mapSpawnData.serverInfo.GetInt(<sp/></highlight><highlight class="stringliteral">&quot;si_pure&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!fileSystem-&gt;UpdateGamePakChecksums(<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>session-&gt;MessageBox(<sp/>MSG_OK,<sp/>common-&gt;GetLanguageDict()-&gt;GetString<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;#str_04337&quot;</highlight><highlight class="normal"><sp/>),<sp/>common-&gt;GetLanguageDict()-&gt;GetString<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;#str_04338&quot;</highlight><highlight class="normal"><sp/>),<sp/>true<sp/>);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmdSystem-&gt;BufferCommandText(<sp/>CMD_EXEC_APPEND,<sp/></highlight><highlight class="stringliteral">&quot;disconnect\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>sessLocal.ExecuteMapChange();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>localClientNum<sp/>&gt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BeginLocalClient();</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>game-&gt;SetLocalClient(<sp/>-1<sp/>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sessLocal.mapSpawnData.serverInfo.GetInt(<sp/></highlight><highlight class="stringliteral">&quot;si_pure&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lock<sp/>down<sp/>the<sp/>pak<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileSystem-&gt;UpdatePureServerChecksums(<sp/>);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tell<sp/>the<sp/>clients<sp/>so<sp/>they<sp/>can<sp/>work<sp/>out<sp/>their<sp/>pure<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clients[<sp/>i<sp/>].clientState<sp/>==<sp/>SCS_PUREWAIT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!SendReliablePureToClient(<sp/>i<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clients[<sp/>i<sp/>].clientState<sp/>=<sp/>SCS_CONNECTED;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serverTime<sp/>gets<sp/>reset,<sp/>force<sp/>a<sp/>heartbeat<sp/>so<sp/>timings<sp/>restart</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>MasterHeartbeat(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="377"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="378"><highlight class="comment">idAsyncServer::GetPort</highlight></codeline>
<codeline lineno="379"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="380"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idAsyncServer::GetPort(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>serverPort.GetPort();</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="386"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="387"><highlight class="comment">idAsyncServer::GetBoundAdr</highlight></codeline>
<codeline lineno="388"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="389"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>idAsyncServer::GetBoundAdr(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>serverPort.GetAdr();</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="395"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="396"><highlight class="comment">idAsyncServer::GetOutgoingRate</highlight></codeline>
<codeline lineno="397"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="398"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idAsyncServer::GetOutgoingRate(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>rate;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>rate<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[i];</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>&gt;=<sp/>SCS_CONNECTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rate<sp/>+=<sp/>client.channel.GetOutgoingRate();</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rate;</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="414"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="415"><highlight class="comment">idAsyncServer::GetIncomingRate</highlight></codeline>
<codeline lineno="416"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="417"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idAsyncServer::GetIncomingRate(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>rate;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>rate<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[i];</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>&gt;=<sp/>SCS_CONNECTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rate<sp/>+=<sp/>client.channel.GetIncomingRate();</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rate;</highlight></codeline>
<codeline lineno="430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="433"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="434"><highlight class="comment">idAsyncServer::IsClientInGame</highlight></codeline>
<codeline lineno="435"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="436"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAsyncServer::IsClientInGame(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>clients[clientNum].clientState<sp/>&gt;=<sp/>SCS_INGAME<sp/>);</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="442"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="443"><highlight class="comment">idAsyncServer::GetClientPing</highlight></codeline>
<codeline lineno="444"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="445"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idAsyncServer::GetClientPing(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[clientNum];</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>&lt;<sp/>SCS_CONNECTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>99999;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>client.clientPing;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="457"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="458"><highlight class="comment">idAsyncServer::GetClientPrediction</highlight></codeline>
<codeline lineno="459"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="460"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idAsyncServer::GetClientPrediction(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[clientNum];</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>&lt;<sp/>SCS_CONNECTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>99999;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>client.clientPrediction;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="472"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="473"><highlight class="comment">idAsyncServer::GetClientTimeSinceLastPacket</highlight></codeline>
<codeline lineno="474"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="475"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idAsyncServer::GetClientTimeSinceLastPacket(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[clientNum];</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>&lt;<sp/>SCS_CONNECTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>99999;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>serverTime<sp/>-<sp/>client.lastPacketTime;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="487"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="488"><highlight class="comment">idAsyncServer::GetClientTimeSinceLastInput</highlight></codeline>
<codeline lineno="489"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="490"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idAsyncServer::GetClientTimeSinceLastInput(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[clientNum];</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>&lt;<sp/>SCS_CONNECTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>99999;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>serverTime<sp/>-<sp/>client.lastInputTime;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="502"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="503"><highlight class="comment">idAsyncServer::GetClientOutgoingRate</highlight></codeline>
<codeline lineno="504"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="505"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idAsyncServer::GetClientOutgoingRate(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[clientNum];</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>&lt;<sp/>SCS_CONNECTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>client.channel.GetOutgoingRate();</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="517"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="518"><highlight class="comment">idAsyncServer::GetClientIncomingRate</highlight></codeline>
<codeline lineno="519"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="520"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idAsyncServer::GetClientIncomingRate(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[clientNum];</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>&lt;<sp/>SCS_CONNECTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>client.channel.GetIncomingRate();</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="532"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="533"><highlight class="comment">idAsyncServer::GetClientOutgoingCompression</highlight></codeline>
<codeline lineno="534"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="535"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>idAsyncServer::GetClientOutgoingCompression(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[clientNum];</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>&lt;<sp/>SCS_CONNECTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0f;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>client.channel.GetOutgoingCompression();</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="547"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="548"><highlight class="comment">idAsyncServer::GetClientIncomingCompression</highlight></codeline>
<codeline lineno="549"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="550"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>idAsyncServer::GetClientIncomingCompression(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[clientNum];</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>&lt;<sp/>SCS_CONNECTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0f;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>client.channel.GetIncomingCompression();</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="562"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="563"><highlight class="comment">idAsyncServer::GetClientIncomingPacketLoss</highlight></codeline>
<codeline lineno="564"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="565"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>idAsyncServer::GetClientIncomingPacketLoss(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[clientNum];</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>&lt;<sp/>SCS_CONNECTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0f;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>client.channel.GetIncomingPacketLoss();</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="577"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="578"><highlight class="comment">idAsyncServer::GetNumClients</highlight></codeline>
<codeline lineno="579"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="580"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idAsyncServer::GetNumClients(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clients[<sp/>i<sp/>].clientState<sp/>&gt;=<sp/>SCS_CONNECTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret++;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="592"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="593"><highlight class="comment">idAsyncServer::GetNumIdleClients</highlight></codeline>
<codeline lineno="594"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="595"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idAsyncServer::GetNumIdleClients(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clients[<sp/>i<sp/>].clientState<sp/>&gt;=<sp/>SCS_CONNECTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>serverTime<sp/>-<sp/>clients[<sp/>i<sp/>].lastInputTime<sp/>&gt;<sp/>NOINPUT_IDLE_TIME<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret++;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="609"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="610"><highlight class="comment">idAsyncServer::DuplicateUsercmds</highlight></codeline>
<codeline lineno="611"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="612"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::DuplicateUsercmds(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frame,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>previousIndex,<sp/>currentIndex;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>previousIndex<sp/>=<sp/>(<sp/>frame<sp/>-<sp/>1<sp/>)<sp/>&amp;<sp/>(<sp/>MAX_USERCMD_BACKUP<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>currentIndex<sp/>=<sp/>frame<sp/>&amp;<sp/>(<sp/>MAX_USERCMD_BACKUP<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>duplicate<sp/>previous<sp/>user<sp/>commands<sp/>if<sp/>no<sp/>new<sp/>commands<sp/>are<sp/>available<sp/>for<sp/>a<sp/>client</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clients[i].clientState<sp/>==<sp/>SCS_FREE<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idAsyncNetwork::DuplicateUsercmd(<sp/>userCmds[previousIndex][i],<sp/>userCmds[currentIndex][i],<sp/>frame,<sp/>time<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clients[i].numDuplicatedUsercmds++;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="632"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="633"><highlight class="comment">idAsyncServer::ClearClient</highlight></codeline>
<codeline lineno="634"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="635"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::ClearClient(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[clientNum];</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>client.clientId<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>client.clientState<sp/>=<sp/>SCS_FREE;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>client.clientPrediction<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>client.clientAheadTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>client.clientRate<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>client.clientPing<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>client.gameInitSequence<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>client.gameFrame<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>client.gameTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>client.channel.Shutdown();</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>client.lastConnectTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>client.lastEmptyTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>client.lastPingTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>client.lastSnapshotTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>client.lastPacketTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>client.lastInputTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>client.snapshotSequence<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>client.acknowledgeSnapshotSequence<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>client.numDuplicatedUsercmds<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="660"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="661"><highlight class="comment">idAsyncServer::InitClient</highlight></codeline>
<codeline lineno="662"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="663"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::InitClient(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientId,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientRate<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>user<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>sessLocal.mapSpawnData.userInfo[<sp/>clientNum<sp/>].Clear();<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>start<sp/>with<sp/>a<sp/>clean<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>server<sp/>client</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[clientNum];</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>client.clientId<sp/>=<sp/>clientId;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>client.clientState<sp/>=<sp/>SCS_CONNECTED;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>client.clientPrediction<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>client.clientAheadTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>client.gameInitSequence<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>client.gameFrame<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>client.gameTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>client.channel.ResetRate();</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>client.clientRate<sp/>=<sp/>clientRate<sp/>?<sp/>clientRate<sp/>:<sp/>idAsyncNetwork::serverMaxClientRate.GetInteger();</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>client.channel.SetMaxOutgoingRate(<sp/>Min(<sp/>idAsyncNetwork::serverMaxClientRate.GetInteger(),<sp/>client.clientRate<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>client.clientPing<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>client.lastConnectTime<sp/>=<sp/>serverTime;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>client.lastEmptyTime<sp/>=<sp/>serverTime;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>client.lastPingTime<sp/>=<sp/>serverTime;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>client.lastSnapshotTime<sp/>=<sp/>serverTime;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>client.lastPacketTime<sp/>=<sp/>serverTime;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>client.lastInputTime<sp/>=<sp/>serverTime;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>client.acknowledgeSnapshotSequence<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>client.numDuplicatedUsercmds<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>user<sp/>commands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_USERCMD_BACKUP;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(<sp/>&amp;userCmds[i][clientNum],<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>userCmds[i][clientNum]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let<sp/>the<sp/>game<sp/>know<sp/>a<sp/>player<sp/>connected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>game-&gt;ServerClientConnect(<sp/>clientNum,<sp/>client.guid<sp/>);</highlight></codeline>
<codeline lineno="699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="702"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="703"><highlight class="comment">idAsyncServer::InitLocalClient</highlight></codeline>
<codeline lineno="704"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="705"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::InitLocalClient(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>badAddress;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>localClientNum<sp/>=<sp/>clientNum;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>InitClient(<sp/>clientNum,<sp/>0,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>&amp;badAddress,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>badAddress<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>badAddress.type<sp/>=<sp/>NA_BAD;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>clients[clientNum].channel.Init(<sp/>badAddress,<sp/>serverId<sp/>);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>clients[clientNum].clientState<sp/>=<sp/>SCS_INGAME;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>sessLocal.mapSpawnData.userInfo[clientNum]<sp/>=<sp/>*cvarSystem-&gt;MoveCVarsToDict(<sp/>CVAR_USERINFO<sp/>);</highlight></codeline>
<codeline lineno="716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="719"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="720"><highlight class="comment">idAsyncServer::BeginLocalClient</highlight></codeline>
<codeline lineno="721"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="722"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::BeginLocalClient(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>game-&gt;SetLocalClient(<sp/>localClientNum<sp/>);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>game-&gt;SetUserInfo(<sp/>localClientNum,<sp/>sessLocal.mapSpawnData.userInfo[localClientNum],<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>game-&gt;ServerClientBegin(<sp/>localClientNum<sp/>);</highlight></codeline>
<codeline lineno="727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="730"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="731"><highlight class="comment">idAsyncServer::LocalClientInput</highlight></codeline>
<codeline lineno="732"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="733"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::LocalClientInput(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>localClientNum<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>gameFrame<sp/>&amp;<sp/>(<sp/>MAX_USERCMD_BACKUP<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>userCmds[index][localClientNum]<sp/>=<sp/>usercmdGen-&gt;GetDirectUsercmd();</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>userCmds[index][localClientNum].gameFrame<sp/>=<sp/>gameFrame;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>userCmds[index][localClientNum].gameTime<sp/>=<sp/>gameTime;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idAsyncNetwork::UsercmdInputChanged(<sp/>userCmds[(<sp/>gameFrame<sp/>-<sp/>1<sp/>)<sp/>&amp;<sp/>(<sp/>MAX_USERCMD_BACKUP<sp/>-<sp/>1<sp/>)][localClientNum],<sp/>userCmds[index][localClientNum]<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clients[localClientNum].lastInputTime<sp/>=<sp/>serverTime;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>clients[localClientNum].gameFrame<sp/>=<sp/>gameFrame;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>clients[localClientNum].gameTime<sp/>=<sp/>gameTime;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>clients[localClientNum].lastPacketTime<sp/>=<sp/>serverTime;</highlight></codeline>
<codeline lineno="751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="754"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="755"><highlight class="comment">idAsyncServer::DropClient</highlight></codeline>
<codeline lineno="756"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="757"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::DropClient(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*reason<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>msg;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[clientNum];</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>&lt;=<sp/>SCS_ZOMBIE<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>&gt;=<sp/>SCS_PUREWAIT<sp/>&amp;&amp;<sp/>clientNum<sp/>!=<sp/>localClientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>SERVER_RELIABLE_MESSAGE_DISCONNECT<sp/>);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>clientNum<sp/>);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteString(<sp/>reason<sp/>);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clientNum<sp/>so<sp/>SCS_PUREWAIT<sp/>client<sp/>gets<sp/>it&apos;s<sp/>own<sp/>disconnect<sp/>msg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>==<sp/>clientNum<sp/>||<sp/>clients[i].clientState<sp/>&gt;=<sp/>SCS_CONNECTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendReliableMessage(<sp/>i,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>reason<sp/>=<sp/>common-&gt;GetLanguageDict()-&gt;GetString(<sp/>reason<sp/>);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;client<sp/>%d<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>clientNum,<sp/>reason<sp/>);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;BufferCommandText(<sp/>CMD_EXEC_NOW,<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;addChatLine<sp/>\&quot;%s^0<sp/>%s\&quot;&quot;</highlight><highlight class="normal">,<sp/>sessLocal.mapSpawnData.userInfo[<sp/>clientNum<sp/>].GetString(<sp/></highlight><highlight class="stringliteral">&quot;ui_name&quot;</highlight><highlight class="normal"><sp/>),<sp/>reason<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>the<sp/>player<sp/>from<sp/>the<sp/>game</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>game-&gt;ServerClientDisconnect(<sp/>clientNum<sp/>);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>client.clientState<sp/>=<sp/>SCS_ZOMBIE;</highlight></codeline>
<codeline lineno="790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="793"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="794"><highlight class="comment">idAsyncServer::SendReliableMessage</highlight></codeline>
<codeline lineno="795"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="796"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::SendReliableMessage(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clientNum<sp/>==<sp/>localClientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!clients[<sp/>clientNum<sp/>].channel.SendReliableMessage(<sp/>msg<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clients[<sp/>clientNum<sp/>].channel.ClearReliableMessages();</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DropClient(<sp/>clientNum,<sp/></highlight><highlight class="stringliteral">&quot;#str_07136&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="808"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="809"><highlight class="comment">idAsyncServer::CheckClientTimeouts</highlight></codeline>
<codeline lineno="810"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="811"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::CheckClientTimeouts(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>zombieTimeout,<sp/>clientTimeout;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>zombieTimeout<sp/>=<sp/>serverTime<sp/>-<sp/>idAsyncNetwork::serverZombieTimeout.GetInteger()<sp/>*<sp/>1000;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>clientTimeout<sp/>=<sp/>serverTime<sp/>-<sp/>idAsyncNetwork::serverClientTimeout.GetInteger()<sp/>*<sp/>1000;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[i];</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>==<sp/>localClientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.lastPacketTime<sp/>&gt;<sp/>serverTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client.lastPacketTime<sp/>=<sp/>serverTime;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>==<sp/>SCS_ZOMBIE<sp/>&amp;&amp;<sp/>client.lastPacketTime<sp/>&lt;<sp/>zombieTimeout<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client.channel.Shutdown();</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client.clientState<sp/>=<sp/>SCS_FREE;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>&gt;=<sp/>SCS_PUREWAIT<sp/>&amp;&amp;<sp/>client.lastPacketTime<sp/>&lt;<sp/>clientTimeout<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DropClient(<sp/>i,<sp/></highlight><highlight class="stringliteral">&quot;#str_07137&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="844"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="845"><highlight class="comment">idAsyncServer::SendPrintBroadcast</highlight></codeline>
<codeline lineno="846"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="847"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::SendPrintBroadcast(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>msg;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>SERVER_RELIABLE_MESSAGE_PRINT<sp/>);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteString(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clients[i].clientState<sp/>&gt;=<sp/>SCS_CONNECTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendReliableMessage(<sp/>i,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="865"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="866"><highlight class="comment">idAsyncServer::SendPrintToClient</highlight></codeline>
<codeline lineno="867"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="868"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::SendPrintToClient(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>msg;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[clientNum];</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>&lt;<sp/>SCS_CONNECTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>SERVER_RELIABLE_MESSAGE_PRINT<sp/>);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteString(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>SendReliableMessage(<sp/>clientNum,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="887"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="888"><highlight class="comment">idAsyncServer::SendUserInfoBroadcast</highlight></codeline>
<codeline lineno="889"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="890"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::SendUserInfoBroadcast(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>userInfoNum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>&amp;info,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sendToAll<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/><sp/><sp/><sp/>*gameInfo;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameModifiedInfo;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>gameInfo<sp/>=<sp/>game-&gt;SetUserInfo(<sp/>userInfoNum,<sp/>info,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameInfo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameModifiedInfo<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameModifiedInfo<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameInfo<sp/>=<sp/>&amp;info;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>userInfoNum<sp/>==<sp/>localClientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;local<sp/>user<sp/>info<sp/>modified<sp/>by<sp/>server\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvarSystem-&gt;SetCVarsFromDict(<sp/>*gameInfo<sp/>);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvarSystem-&gt;ClearModifiedFlags(<sp/>CVAR_USERINFO<sp/>);<sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>emit<sp/>back</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>SERVER_RELIABLE_MESSAGE_CLIENTINFO<sp/>);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>userInfoNum<sp/>);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameModifiedInfo<sp/>||<sp/>sendToAll<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteBits(<sp/>0,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteBits(<sp/>1,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ID_CLIENTINFO_TAGS</highlight></codeline>
<codeline lineno="921"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>sessLocal.mapSpawnData.userInfo[userInfoNum].Checksum()<sp/>);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;broadcast<sp/>for<sp/>client<sp/>%d:<sp/>0x%x\n&quot;</highlight><highlight class="normal">,<sp/>userInfoNum,<sp/>sessLocal.mapSpawnData.userInfo[userInfoNum].Checksum()<sp/>);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>sessLocal.mapSpawnData.userInfo[userInfoNum].Print();</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="925"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameModifiedInfo<sp/>||<sp/>sendToAll<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaDict(<sp/>*gameInfo,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDeltaDict(<sp/>*gameInfo,<sp/>&amp;sessLocal.mapSpawnData.userInfo[userInfoNum]<sp/>);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clients[i].clientState<sp/>&gt;=<sp/>SCS_CONNECTED<sp/>&amp;&amp;<sp/>(<sp/>sendToAll<sp/>||<sp/>i<sp/>!=<sp/>userInfoNum<sp/>||<sp/>gameModifiedInfo<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendReliableMessage(<sp/>i,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>sessLocal.mapSpawnData.userInfo[userInfoNum]<sp/>=<sp/>*gameInfo;</highlight></codeline>
<codeline lineno="939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="942"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="943"><highlight class="comment">idAsyncServer::UpdateUI</highlight></codeline>
<codeline lineno="944"><highlight class="comment">if<sp/>the<sp/>game<sp/>modifies<sp/>userInfo,<sp/>it<sp/>will<sp/>call<sp/>this<sp/>through<sp/>command<sp/>system</highlight></codeline>
<codeline lineno="945"><highlight class="comment">we<sp/>then<sp/>need<sp/>to<sp/>get<sp/>the<sp/>info<sp/>from<sp/>the<sp/>game,<sp/>and<sp/>broadcast<sp/>to<sp/>clients</highlight></codeline>
<codeline lineno="946"><highlight class="comment">(<sp/>using<sp/>DeltaDict<sp/>and<sp/>our<sp/>current<sp/>mapSpawnData<sp/>as<sp/>a<sp/>base<sp/>)</highlight></codeline>
<codeline lineno="947"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="948"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::UpdateUI(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/><sp/><sp/><sp/>*info<sp/>=<sp/>game-&gt;GetUserInfo(<sp/>clientNum<sp/>);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!info<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idAsyncServer::UpdateUI:<sp/>no<sp/>info<sp/>from<sp/>game\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>SendUserInfoBroadcast(<sp/>clientNum,<sp/>*info,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="961"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="962"><highlight class="comment">idAsyncServer::SendUserInfoToClient</highlight></codeline>
<codeline lineno="963"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="964"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::SendUserInfoToClient(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>userInfoNum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>&amp;info<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>msg;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clients[clientNum].clientState<sp/>&lt;<sp/>SCS_CONNECTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>SERVER_RELIABLE_MESSAGE_CLIENTINFO<sp/>);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>userInfoNum<sp/>);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteBits(<sp/>0,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ID_CLIENTINFO_TAGS</highlight></codeline>
<codeline lineno="979"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;user<sp/>info<sp/>%d<sp/>to<sp/>client<sp/>%d:<sp/>NULL<sp/>base\n&quot;</highlight><highlight class="normal">,<sp/>userInfoNum,<sp/>clientNum<sp/>);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="982"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaDict(<sp/>info,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>SendReliableMessage(<sp/>clientNum,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="989"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="990"><highlight class="comment">idAsyncServer::SendSyncedCvarsBroadcast</highlight></codeline>
<codeline lineno="991"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="992"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::SendSyncedCvarsBroadcast(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>&amp;cvars<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>msg;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>SERVER_RELIABLE_MESSAGE_SYNCEDCVARS<sp/>);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaDict(<sp/>cvars,<sp/>&amp;sessLocal.mapSpawnData.syncedCVars<sp/>);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clients[i].clientState<sp/>&gt;=<sp/>SCS_CONNECTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendReliableMessage(<sp/>i,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>sessLocal.mapSpawnData.syncedCVars<sp/>=<sp/>cvars;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1012"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1013"><highlight class="comment">idAsyncServer::SendSyncedCvarsToClient</highlight></codeline>
<codeline lineno="1014"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1015"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::SendSyncedCvarsToClient(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>&amp;cvars<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>msg;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clients[clientNum].clientState<sp/>&lt;<sp/>SCS_CONNECTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>SERVER_RELIABLE_MESSAGE_SYNCEDCVARS<sp/>);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaDict(<sp/>cvars,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>SendReliableMessage(<sp/>clientNum,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1032"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1033"><highlight class="comment">idAsyncServer::SendApplySnapshotToClient</highlight></codeline>
<codeline lineno="1034"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1035"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::SendApplySnapshotToClient(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sequence<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>msg;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>SERVER_RELIABLE_MESSAGE_APPLYSNAPSHOT<sp/>);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>sequence<sp/>);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>SendReliableMessage(<sp/>clientNum,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1048"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1049"><highlight class="comment">idAsyncServer::SendEmptyToClient</highlight></codeline>
<codeline lineno="1050"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1051"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAsyncServer::SendEmptyToClient(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>force<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>msg;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[clientNum];</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.lastEmptyTime<sp/>&gt;<sp/>realTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client.lastEmptyTime<sp/>=<sp/>realTime;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!force<sp/>&amp;&amp;<sp/>(<sp/>realTime<sp/>-<sp/>client.lastEmptyTime<sp/>&lt;<sp/>EMPTY_RESEND_TIME<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idAsyncNetwork::verbose.GetInteger()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;sending<sp/>empty<sp/>to<sp/>client<sp/>%d:<sp/>gameInitId<sp/>=<sp/>%d,<sp/>gameFrame<sp/>=<sp/>%d,<sp/>gameTime<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>clientNum,<sp/>gameInitId,<sp/>gameFrame,<sp/>gameTime<sp/>);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>gameInitId<sp/>);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>SERVER_UNRELIABLE_MESSAGE_EMPTY<sp/>);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>client.channel.SendMessage(<sp/>serverPort,<sp/>serverTime,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>client.lastEmptyTime<sp/>=<sp/>realTime;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1082"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1083"><highlight class="comment">idAsyncServer::SendPingToClient</highlight></codeline>
<codeline lineno="1084"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1085"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAsyncServer::SendPingToClient(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>msg;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[clientNum];</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.lastPingTime<sp/>&gt;<sp/>realTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client.lastPingTime<sp/>=<sp/>realTime;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>realTime<sp/>-<sp/>client.lastPingTime<sp/>&lt;<sp/>PING_RESEND_TIME<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idAsyncNetwork::verbose.GetInteger()<sp/>==<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;pinging<sp/>client<sp/>%d:<sp/>gameInitId<sp/>=<sp/>%d,<sp/>gameFrame<sp/>=<sp/>%d,<sp/>gameTime<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>clientNum,<sp/>gameInitId,<sp/>gameFrame,<sp/>gameTime<sp/>);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>gameInitId<sp/>);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>SERVER_UNRELIABLE_MESSAGE_PING<sp/>);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>realTime<sp/>);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>client.channel.SendMessage(<sp/>serverPort,<sp/>serverTime,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>client.lastPingTime<sp/>=<sp/>realTime;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1117"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1118"><highlight class="comment">idAsyncServer::SendGameInitToClient</highlight></codeline>
<codeline lineno="1119"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1120"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::SendGameInitToClient(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>msg;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idAsyncNetwork::verbose.GetInteger()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;sending<sp/>gameinit<sp/>to<sp/>client<sp/>%d:<sp/>gameInitId<sp/>=<sp/>%d,<sp/>gameFrame<sp/>=<sp/>%d,<sp/>gameTime<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>clientNum,<sp/>gameInitId,<sp/>gameFrame,<sp/>gameTime<sp/>);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[clientNum];</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>unsent<sp/>fragments.<sp/>might<sp/>flood<sp/>winsock<sp/>but<sp/>that&apos;s<sp/>ok</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>client.channel.UnsentFragmentsLeft()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client.channel.SendNextFragment(<sp/>serverPort,<sp/>serverTime<sp/>);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>gameInitId<sp/>);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>SERVER_UNRELIABLE_MESSAGE_GAMEINIT<sp/>);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>gameFrame<sp/>);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>gameTime<sp/>);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaDict(<sp/>sessLocal.mapSpawnData.serverInfo,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>client.gameInitSequence<sp/>=<sp/>client.channel.SendMessage(<sp/>serverPort,<sp/>serverTime,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1146"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1147"><highlight class="comment">idAsyncServer::SendSnapshotToClient</highlight></codeline>
<codeline lineno="1148"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1149"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAsyncServer::SendSnapshotToClient(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>j,<sp/>index,<sp/>numUsercmds;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>msg;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classusercmd__t" kindref="compound">usercmd_t</ref><sp/>*<sp/>last;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clientInPVS[MAX_ASYNC_CLIENTS<sp/>&gt;&gt;<sp/>3];</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[clientNum];</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>serverTime<sp/>-<sp/>client.lastSnapshotTime<sp/>&lt;<sp/>idAsyncNetwork::serverSnapshotDelay.GetInteger()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idAsyncNetwork::verbose.GetInteger()<sp/>==<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;sending<sp/>snapshot<sp/>to<sp/>client<sp/>%d:<sp/>gameInitId<sp/>=<sp/>%d,<sp/>gameFrame<sp/>=<sp/>%d,<sp/>gameTime<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>clientNum,<sp/>gameInitId,<sp/>gameFrame,<sp/>gameTime<sp/>);</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>how<sp/>far<sp/>is<sp/>the<sp/>client<sp/>ahead<sp/>of<sp/>the<sp/>server<sp/>minus<sp/>the<sp/>packet<sp/>delay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>client.clientAheadTime<sp/>=<sp/>client.gameTime<sp/>-<sp/>(<sp/>gameTime<sp/>+<sp/>gameTimeResidual<sp/>);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>the<sp/>snapshot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>gameInitId<sp/>);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>SERVER_UNRELIABLE_MESSAGE_SNAPSHOT<sp/>);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>client.snapshotSequence<sp/>);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>gameFrame<sp/>);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>gameTime<sp/>);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>idMath::ClampChar(<sp/>client.numDuplicatedUsercmds<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteShort(<sp/>idMath::ClampShort(<sp/>client.clientAheadTime<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>the<sp/>game<sp/>snapshot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>game-&gt;ServerWriteSnapshot(<sp/>clientNum,<sp/>client.snapshotSequence,<sp/>msg,<sp/>clientInPVS,<sp/>MAX_ASYNC_CLIENTS<sp/>);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>the<sp/>latest<sp/>user<sp/>commands<sp/>from<sp/>the<sp/>other<sp/>clients<sp/>in<sp/>the<sp/>PVS<sp/>to<sp/>the<sp/>snapshot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>last<sp/>=<sp/>NULL,<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[i];</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>==<sp/>SCS_FREE<sp/>||<sp/>i<sp/>==<sp/>clientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>client<sp/>is<sp/>not<sp/>in<sp/>the<sp/>PVS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!(<sp/>clientInPVS[i<sp/>&gt;&gt;<sp/>3]<sp/>&amp;<sp/>(<sp/>1<sp/>&lt;&lt;<sp/>(<sp/>i<sp/>&amp;<sp/>7<sp/>)<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxRelay<sp/>=<sp/>idMath::ClampInt(<sp/>1,<sp/>MAX_USERCMD_RELAY,<sp/>idAsyncNetwork::serverMaxUsercmdRelay.GetInteger()<sp/>);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Max(<sp/>1,<sp/>to<sp/>always<sp/>send<sp/>at<sp/>least<sp/>one<sp/>cmd,<sp/>which<sp/>we<sp/>know<sp/>we<sp/>have<sp/>because<sp/>we<sp/>call<sp/>DuplicateUsercmds<sp/>in<sp/>RunFrame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numUsercmds<sp/>=<sp/>Max(<sp/>1,<sp/>Min(<sp/>client.gameFrame,<sp/>gameFrame<sp/>+<sp/>maxRelay<sp/>)<sp/>-<sp/>gameFrame<sp/>);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>numUsercmds<sp/>);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numUsercmds;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>(<sp/>gameFrame<sp/>+<sp/>j<sp/>)<sp/>&amp;<sp/>(<sp/>MAX_USERCMD_BACKUP<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::WriteUserCmdDelta(<sp/>msg,<sp/>userCmds[index][i],<sp/>last<sp/>);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>&amp;userCmds[index][i];</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>MAX_ASYNC_CLIENTS<sp/>);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>client.channel.SendMessage(<sp/>serverPort,<sp/>serverTime,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/>client.lastSnapshotTime<sp/>=<sp/>serverTime;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>client.snapshotSequence++;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/>client.numDuplicatedUsercmds<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1220"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1221"><highlight class="comment">idAsyncServer::ProcessUnreliableClientMessage</highlight></codeline>
<codeline lineno="1222"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1223"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::ProcessUnreliableClientMessage(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>id,<sp/>acknowledgeSequence,<sp/>clientGameInitId,<sp/>clientGameFrame,<sp/>numUsercmds,<sp/>index;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classusercmd__t" kindref="compound">usercmd_t</ref><sp/>*last;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[clientNum];</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>==<sp/>SCS_ZOMBIE<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>acknowledgeSequence<sp/>=<sp/>msg.ReadLong();</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>clientGameInitId<sp/>=<sp/>msg.ReadLong();</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>while<sp/>loading<sp/>a<sp/>map<sp/>the<sp/>client<sp/>may<sp/>send<sp/>empty<sp/>messages<sp/>to<sp/>keep<sp/>the<sp/>connection<sp/>alive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clientGameInitId<sp/>==<sp/>GAME_INIT_ID_MAP_LOAD<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idAsyncNetwork::verbose.GetInteger()<sp/>)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;ignore<sp/>unreliable<sp/>msg<sp/>from<sp/>client<sp/>%d,<sp/>gameInitId<sp/>==<sp/>ID_MAP_LOAD\n&quot;</highlight><highlight class="normal">,<sp/>clientNum<sp/>);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>the<sp/>client<sp/>is<sp/>in<sp/>the<sp/>right<sp/>game</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clientGameInitId<sp/>!=<sp/>gameInitId<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>acknowledgeSequence<sp/>&gt;<sp/>client.gameInitSequence<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>client<sp/>is<sp/>connected<sp/>but<sp/>not<sp/>in<sp/>the<sp/>right<sp/>game</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client.clientState<sp/>=<sp/>SCS_CONNECTED;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>send<sp/>game<sp/>init<sp/>to<sp/>client</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendGameInitToClient(<sp/>clientNum<sp/>);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sessLocal.mapSpawnData.serverInfo.GetBool(<sp/></highlight><highlight class="stringliteral">&quot;si_pure&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client.clientState<sp/>=<sp/>SCS_PUREWAIT;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!SendReliablePureToClient(<sp/>clientNum<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client.clientState<sp/>=<sp/>SCS_CONNECTED;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idAsyncNetwork::verbose.GetInteger()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;ignore<sp/>unreliable<sp/>msg<sp/>from<sp/>client<sp/>%d,<sp/>wrong<sp/>gameInit,<sp/>old<sp/>sequence\n&quot;</highlight><highlight class="normal">,<sp/>clientNum<sp/>);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>client.acknowledgeSnapshotSequence<sp/>=<sp/>msg.ReadLong();</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>==<sp/>SCS_CONNECTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>client<sp/>is<sp/>in<sp/>the<sp/>right<sp/>game</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client.clientState<sp/>=<sp/>SCS_INGAME;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>send<sp/>the<sp/>user<sp/>info<sp/>of<sp/>other<sp/>clients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clients[i].clientState<sp/>&gt;=<sp/>SCS_CONNECTED<sp/>&amp;&amp;<sp/>i<sp/>!=<sp/>clientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendUserInfoToClient(<sp/>clientNum,<sp/>i,<sp/>sessLocal.mapSpawnData.userInfo[i]<sp/>);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>send<sp/>synchronized<sp/>cvars<sp/>to<sp/>client</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendSyncedCvarsToClient(<sp/>clientNum,<sp/>sessLocal.mapSpawnData.syncedCVars<sp/>);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendEnterGameToClient(<sp/>clientNum<sp/>);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>client<sp/>running<sp/>in<sp/>the<sp/>game</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>game-&gt;ServerClientBegin(<sp/>clientNum<sp/>);</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>any<sp/>reliable<sp/>messages<sp/>to<sp/>initialize<sp/>the<sp/>client<sp/>game<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>game-&gt;ServerWriteInitialReliableMessages(<sp/>clientNum<sp/>);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>==<sp/>SCS_INGAME<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>the<sp/>last<sp/>snapshot<sp/>the<sp/>client<sp/>received</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>game-&gt;ServerApplySnapshot(<sp/>clientNum,<sp/>client.acknowledgeSnapshotSequence<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendApplySnapshotToClient(<sp/>clientNum,<sp/>client.acknowledgeSnapshotSequence<sp/>);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>the<sp/>unreliable<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>msg.ReadByte();</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CLIENT_UNRELIABLE_MESSAGE_EMPTY:<sp/>{</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idAsyncNetwork::verbose.GetInteger()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;received<sp/>empty<sp/>message<sp/>for<sp/>client<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>clientNum<sp/>);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CLIENT_UNRELIABLE_MESSAGE_PINGRESPONSE:<sp/>{</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client.clientPing<sp/>=<sp/>realTime<sp/>-<sp/>msg.ReadLong();</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CLIENT_UNRELIABLE_MESSAGE_USERCMD:<sp/>{</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client.clientPrediction<sp/>=<sp/>msg.ReadShort();</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>user<sp/>commands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clientGameFrame<sp/>=<sp/>msg.ReadLong();</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numUsercmds<sp/>=<sp/>msg.ReadByte();</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>last<sp/>=<sp/>NULL,<sp/>i<sp/>=<sp/>clientGameFrame<sp/>-<sp/>numUsercmds<sp/>+<sp/>1;<sp/>i<sp/>&lt;=<sp/>clientGameFrame;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>i<sp/>&amp;<sp/>(<sp/>MAX_USERCMD_BACKUP<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::ReadUserCmdDelta(<sp/>msg,<sp/>userCmds[index][clientNum],<sp/>last<sp/>);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>userCmds[index][clientNum].gameFrame<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>userCmds[index][clientNum].duplicateCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idAsyncNetwork::UsercmdInputChanged(<sp/>userCmds[(<sp/>i<sp/>-<sp/>1<sp/>)<sp/>&amp;<sp/>(<sp/>MAX_USERCMD_BACKUP<sp/>-<sp/>1<sp/>)][clientNum],<sp/>userCmds[index][clientNum]<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client.lastInputTime<sp/>=<sp/>serverTime;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>&amp;userCmds[index][clientNum];</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>last<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client.gameFrame<sp/>=<sp/>last-&gt;gameFrame;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client.gameTime<sp/>=<sp/>last-&gt;gameTime;</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idAsyncNetwork::verbose.GetInteger()<sp/>==<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;received<sp/>user<sp/>command<sp/>for<sp/>client<sp/>%d,<sp/>gameInitId<sp/>=<sp/>%d,<sp/>gameFrame,<sp/>%d<sp/>gameTime<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>clientNum,<sp/>clientGameInitId,<sp/>client.gameFrame,<sp/>client.gameTime<sp/>);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>unreliable<sp/>message<sp/>%d<sp/>from<sp/>client<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>clientNum<sp/>);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1347"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1348"><highlight class="comment">idAsyncServer::ProcessReliableClientMessages</highlight></codeline>
<codeline lineno="1349"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1350"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::ProcessReliableClientMessages(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>msg;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[clientNum];</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>client.channel.GetReliableMessage(<sp/>msg<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>msg.ReadByte();</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CLIENT_RELIABLE_MESSAGE_CLIENTINFO:<sp/>{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>info;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.ReadDeltaDict(<sp/>info,<sp/>&amp;sessLocal.mapSpawnData.userInfo[clientNum]<sp/>);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendUserInfoBroadcast(<sp/>clientNum,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CLIENT_RELIABLE_MESSAGE_PRINT:<sp/>{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[MAX_STRING_CHARS];</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.ReadString(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CLIENT_RELIABLE_MESSAGE_DISCONNECT:<sp/>{</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DropClient(<sp/>clientNum,<sp/></highlight><highlight class="stringliteral">&quot;#str_07138&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CLIENT_RELIABLE_MESSAGE_PURE:<sp/>{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>get<sp/>this<sp/>message<sp/>once<sp/>the<sp/>client<sp/>has<sp/>successfully<sp/>updated<sp/>it&apos;s<sp/>pure<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProcessReliablePure(<sp/>clientNum,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pass<sp/>reliable<sp/>message<sp/>on<sp/>to<sp/>game<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>game-&gt;ServerProcessReliableMessage(<sp/>clientNum,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1394"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1395"><highlight class="comment">idAsyncServer::ProcessAuthMessage</highlight></codeline>
<codeline lineno="1396"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1397"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::ProcessAuthMessage(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client_from;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client_guid[<sp/>12<sp/>],<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[<sp/>MAX_STRING_CHARS<sp/>];</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>clientId;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>authReply_t<sp/><sp/><sp/><sp/><sp/>reply;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/>authReplyMsg_t<sp/><sp/>replyMsg<sp/>=<sp/>AUTH_REPLY_WAITING;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replyPrintMsg;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>reply<sp/>=<sp/>(authReply_t)msg.ReadByte();</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>reply<sp/>&lt;=<sp/>0<sp/>||<sp/>reply<sp/>&gt;=<sp/>AUTH_MAXSTATES<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;auth:<sp/>invalid<sp/>reply<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>reply<sp/>);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/>clientId<sp/>=<sp/>msg.ReadShort(<sp/>);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.ReadNetadr(<sp/>&amp;client_from<sp/>);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.ReadString(<sp/>client_guid,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>client_guid<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>reply<sp/>!=<sp/>AUTH_OK<sp/>)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replyMsg<sp/>=<sp/>(authReplyMsg_t)msg.ReadByte();</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>replyMsg<sp/>&lt;=<sp/>0<sp/>||<sp/>replyMsg<sp/>&gt;=<sp/>AUTH_REPLY_MAXSTATES<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;auth:<sp/>invalid<sp/>reply<sp/>msg<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>replyMsg<sp/>);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>replyMsg<sp/>==<sp/>AUTH_REPLY_PRINT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.ReadString(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>MAX_STRING_CHARS<sp/>);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replyPrintMsg<sp/>=<sp/>string;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/>lastAuthTime<sp/>=<sp/>serverTime;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>message<sp/>parsing<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_CHALLENGES;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!challenges[i].connected<sp/>&amp;&amp;<sp/>challenges[<sp/>i<sp/>].clientId<sp/>==<sp/>clientId<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>if<sp/>something<sp/>is<sp/>wrong</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>break<sp/>if<sp/>we<sp/>have<sp/>found<sp/>a<sp/>valid<sp/>auth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!strlen(<sp/>challenges[<sp/>i<sp/>].guid<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;auth:<sp/>client<sp/>%s<sp/>has<sp/>no<sp/>guid<sp/>yet\n&quot;</highlight><highlight class="normal">,<sp/>Sys_NetAdrToString(<sp/>challenges[<sp/>i<sp/>].address<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idStr::Cmp(<sp/>challenges[<sp/>i<sp/>].guid,<sp/>client_guid<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;auth:<sp/>client<sp/>%s<sp/>%s<sp/>not<sp/>matched,<sp/>auth<sp/>server<sp/>says<sp/>guid<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>Sys_NetAdrToString(<sp/>challenges[<sp/>i<sp/>].address<sp/>),<sp/>challenges[i].guid,<sp/>client_guid<sp/>);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!Sys_CompareNetAdrBase(<sp/>client_from,<sp/>challenges[i].address<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let<sp/>auth<sp/>work<sp/>when<sp/>server<sp/>and<sp/>master<sp/>don&apos;t<sp/>see<sp/>the<sp/>same<sp/>IP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;auth:<sp/>matched<sp/>guid<sp/>&apos;%s&apos;<sp/>for<sp/>!=<sp/>IPs<sp/>%s<sp/>and<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>client_guid,<sp/>Sys_NetAdrToString(<sp/>client_from<sp/>),<sp/>Sys_NetAdrToString(<sp/>challenges[i].address<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&gt;=<sp/>MAX_CHALLENGES<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;auth:<sp/>failed<sp/>client<sp/>lookup<sp/>%s<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>Sys_NetAdrToString(<sp/>client_from<sp/>),<sp/>client_guid<sp/>);</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>challenges[<sp/>i<sp/>].authState<sp/>!=<sp/>CDK_WAIT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DWarning(<sp/></highlight><highlight class="stringliteral">&quot;auth:<sp/>challenge<sp/>0x%x<sp/>%s<sp/>authState<sp/>%d<sp/>!=<sp/>CDK_WAIT&quot;</highlight><highlight class="normal">,<sp/>challenges[<sp/>i<sp/>].challenge,<sp/>Sys_NetAdrToString(<sp/>challenges[<sp/>i<sp/>].address<sp/>),<sp/>challenges[<sp/>i<sp/>].authState<sp/>);</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/>idStr::snPrintf(<sp/>challenges[<sp/>i<sp/>].guid,<sp/>12,<sp/>client_guid<sp/>);</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>reply<sp/>==<sp/>AUTH_OK<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>challenges[<sp/>i<sp/>].authState<sp/>=<sp/>CDK_OK;</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;client<sp/>%s<sp/>%s<sp/>is<sp/>authed\n&quot;</highlight><highlight class="normal">,<sp/>Sys_NetAdrToString(<sp/>client_from<sp/>),<sp/>client_guid<sp/>);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>replyMsg<sp/>!=<sp/>AUTH_REPLY_PRINT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>=<sp/>authReplyMsg[<sp/>replyMsg<sp/>];</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>=<sp/>replyPrintMsg.c_str();</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>maybe<sp/>localize<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*l_msg<sp/>=<sp/>common-&gt;GetLanguageDict()-&gt;GetString(<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;auth:<sp/>client<sp/>%s<sp/>%s<sp/>-<sp/>%s<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>Sys_NetAdrToString(<sp/>client_from<sp/>),<sp/>client_guid,<sp/>authReplyStr[<sp/>reply<sp/>],<sp/>l_msg<sp/>);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>challenges[<sp/>i<sp/>].authReply<sp/>=<sp/>reply;</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>challenges[<sp/>i<sp/>].authReplyMsg<sp/>=<sp/>replyMsg;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>challenges[<sp/>i<sp/>].authReplyPrint<sp/>=<sp/>replyPrintMsg;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1480"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1481"><highlight class="comment">idAsyncServer::ProcessChallengeMessage</highlight></codeline>
<codeline lineno="1482"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1483"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::ProcessChallengeMessage(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>clientId,<sp/>oldest,<sp/>oldestTime;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>outMsg;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>clientId<sp/>=<sp/>msg.ReadLong();</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>oldest<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/>oldestTime<sp/>=<sp/>0x7fffffff;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>we<sp/>already<sp/>have<sp/>a<sp/>challenge<sp/>for<sp/>this<sp/>ip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_CHALLENGES;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!challenges[i].connected<sp/>&amp;&amp;<sp/>Sys_CompareNetAdrBase(<sp/>from,<sp/>challenges[i].address<sp/>)<sp/>&amp;&amp;<sp/>clientId<sp/>==<sp/>challenges[i].clientId<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>challenges[i].time<sp/>&lt;<sp/>oldestTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldestTime<sp/>=<sp/>challenges[i].time;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldest<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&gt;=<sp/>MAX_CHALLENGES<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>the<sp/>first<sp/>time<sp/>this<sp/>client<sp/>has<sp/>asked<sp/>for<sp/>a<sp/>challenge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>oldest;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>challenges[i].address<sp/>=<sp/>from;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>challenges[i].clientId<sp/>=<sp/>clientId;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>challenges[i].challenge<sp/>=<sp/>(<sp/>(rand()<sp/>&lt;&lt;<sp/>16)<sp/>^<sp/>rand()<sp/>)<sp/>^<sp/>serverTime;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>challenges[i].time<sp/>=<sp/>serverTime;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>challenges[i].connected<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>challenges[i].authState<sp/>=<sp/>CDK_WAIT;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>challenges[i].authReply<sp/>=<sp/>AUTH_NONE;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>challenges[i].authReplyMsg<sp/>=<sp/>AUTH_REPLY_WAITING;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>challenges[i].authReplyPrint<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>challenges[i].guid[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>challenges[i].pingTime<sp/>=<sp/>serverTime;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;sending<sp/>challenge<sp/>0x%x<sp/>to<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>challenges[i].challenge,<sp/>Sys_NetAdrToString(<sp/>from<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteShort(<sp/>CONNECTIONLESS_MESSAGE_ID<sp/>);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteString(<sp/></highlight><highlight class="stringliteral">&quot;challengeResponse&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteLong(<sp/>challenges[i].challenge<sp/>);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteShort(<sp/>serverId<sp/>);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteString(<sp/>cvarSystem-&gt;GetCVarString(<sp/></highlight><highlight class="stringliteral">&quot;fs_game_base&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteString(<sp/>cvarSystem-&gt;GetCVarString(<sp/></highlight><highlight class="stringliteral">&quot;fs_game&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/>serverPort.SendPacket(<sp/>from,<sp/>outMsg.GetData(),<sp/>outMsg.GetSize()<sp/>);</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>Sys_IsLANAddress(<sp/>from<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>CD<sp/>Key<sp/>check<sp/>for<sp/>LAN<sp/>clients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>challenges[i].authState<sp/>=<sp/>CDK_OK;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idAsyncNetwork::LANServer.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;net_LANServer<sp/>is<sp/>enabled.<sp/>Client<sp/>%s<sp/>is<sp/>not<sp/>a<sp/>LAN<sp/>address,<sp/>will<sp/>be<sp/>rejected\n&quot;</highlight><highlight class="normal">,<sp/>Sys_NetAdrToString(<sp/>from<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>challenges[<sp/>i<sp/>].authState<sp/>=<sp/>CDK_ONLYLAN;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>emit<sp/>a<sp/>cd<sp/>key<sp/>confirmation<sp/>request</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.BeginWriting();</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteShort(<sp/>CONNECTIONLESS_MESSAGE_ID<sp/>);</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteString(<sp/></highlight><highlight class="stringliteral">&quot;srvAuth&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteLong(<sp/>ASYNC_PROTOCOL_VERSION<sp/>);</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteNetadr(<sp/>from<sp/>);</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteLong(<sp/>-1<sp/>);<sp/></highlight><highlight class="comment">//<sp/>this<sp/>identifies<sp/>&quot;challenge&quot;<sp/>auth<sp/>vs<sp/>&quot;connect&quot;<sp/>auth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>protocol<sp/>1.37<sp/>addition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteByte(<sp/>fileSystem-&gt;RunningD3XP()<sp/>);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>serverPort.SendPacket(<sp/>idAsyncNetwork::GetMasterAddress(),<sp/>outMsg.GetData(),<sp/>outMsg.GetSize()<sp/>);</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1556"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1557"><highlight class="comment">idAsyncServer::SendPureServerMessage</highlight></codeline>
<codeline lineno="1558"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1559"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAsyncServer::SendPureServerMessage(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>to,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>OS<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>outMsg;</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[<sp/>MAX_MESSAGE_SIZE<sp/>];</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>serverChecksums[<sp/>MAX_PURE_PAKS<sp/>];</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamePakChecksum;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/>fileSystem-&gt;GetPureServerChecksums(<sp/>serverChecksums,<sp/>OS,<sp/>&amp;gamePakChecksum<sp/>);</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!serverChecksums[<sp/>0<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>happens<sp/>if<sp/>you<sp/>run<sp/>fully<sp/>expanded<sp/>assets<sp/>with<sp/>si_pure<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;pure<sp/>server<sp/>has<sp/>no<sp/>pak<sp/>files<sp/>referenced&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;client<sp/>%s:<sp/>sending<sp/>pure<sp/>pak<sp/>list\n&quot;</highlight><highlight class="normal">,<sp/>Sys_NetAdrToString(<sp/>to<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>send<sp/>our<sp/>list<sp/>of<sp/>required<sp/>paks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteShort(<sp/>CONNECTIONLESS_MESSAGE_ID<sp/>);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteString(<sp/></highlight><highlight class="stringliteral">&quot;pureServer&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>serverChecksums[<sp/>i<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteLong(<sp/>serverChecksums[<sp/>i++<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteLong(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>the<sp/>pak<sp/>checksum<sp/>for<sp/>game<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteLong(<sp/>gamePakChecksum<sp/>);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/>serverPort.SendPacket(<sp/>to,<sp/>outMsg.GetData(),<sp/>outMsg.GetSize()<sp/>);</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1594"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1595"><highlight class="comment">idAsyncServer::SendReliablePureToClient</highlight></codeline>
<codeline lineno="1596"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1597"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAsyncServer::SendReliablePureToClient(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>msg;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[<sp/>MAX_MESSAGE_SIZE<sp/>];</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>serverChecksums[<sp/>MAX_PURE_PAKS<sp/>];</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamePakChecksum;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>fileSystem-&gt;GetPureServerChecksums(<sp/>serverChecksums,<sp/>clients[<sp/>clientNum<sp/>].OS,<sp/>&amp;gamePakChecksum<sp/>);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!serverChecksums[<sp/>0<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>happens<sp/>if<sp/>you<sp/>run<sp/>fully<sp/>expanded<sp/>assets<sp/>with<sp/>si_pure<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;pure<sp/>server<sp/>has<sp/>no<sp/>pak<sp/>files<sp/>referenced&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;client<sp/>%d:<sp/>sending<sp/>pure<sp/>pak<sp/>list<sp/>(reliable<sp/>channel)<sp/>@<sp/>gameInitId<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>clientNum,<sp/>gameInitId<sp/>);</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>SERVER_RELIABLE_MESSAGE_PURE<sp/>);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>gameInitId<sp/>);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>serverChecksums[<sp/>i<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>serverChecksums[<sp/>i++<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>gamePakChecksum<sp/>);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/>SendReliableMessage(<sp/>clientNum,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1632"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1633"><highlight class="comment">idAsyncServer::ValidateChallenge</highlight></codeline>
<codeline lineno="1634"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1635"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idAsyncServer::ValidateChallenge(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>from,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>challenge,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientId<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[i];</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>==<sp/>SCS_FREE<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>Sys_CompareNetAdrBase(<sp/>from,<sp/>client.channel.GetRemoteAddress()<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>clientId<sp/>==<sp/>client.clientId<sp/>||<sp/>from.port<sp/>==<sp/>client.channel.GetRemoteAddress().port<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>serverTime<sp/>-<sp/>client.lastConnectTime<sp/>&lt;<sp/>MIN_RECONNECT_TIME<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>reconnect<sp/>rejected<sp/>:<sp/>too<sp/>soon\n&quot;</highlight><highlight class="normal">,<sp/>Sys_NetAdrToString(<sp/>from<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_CHALLENGES;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>Sys_CompareNetAdrBase(<sp/>from,<sp/>challenges[i].address<sp/>)<sp/>&amp;&amp;<sp/>from.port<sp/>==<sp/>challenges[i].address.port<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>challenge<sp/>==<sp/>challenges[i].challenge<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>==<sp/>MAX_CHALLENGES<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintOOB(<sp/>from,<sp/>SERVER_PRINT_BADCHALLENGE,<sp/></highlight><highlight class="stringliteral">&quot;#str_04840&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1669"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1670"><highlight class="comment">idAsyncServer::ProcessConnectMessage</highlight></codeline>
<codeline lineno="1671"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1672"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::ProcessConnectMessage(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clientNum,<sp/>protocol,<sp/>clientDataChecksum,<sp/>challenge,<sp/>clientId,<sp/>ping,<sp/>clientRate;</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>outMsg;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[<sp/>MAX_MESSAGE_SIZE<sp/>];</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guid[<sp/>12<sp/>];</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>password[<sp/>17<sp/>];</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>ichallenge,<sp/>islot,<sp/>OS,<sp/>numClients;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>protocol<sp/>=<sp/>msg.ReadLong();</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/>OS<sp/>=<sp/>msg.ReadShort();</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>the<sp/>protocol<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>protocol<sp/>!=<sp/>ASYNC_PROTOCOL_VERSION<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that&apos;s<sp/>a<sp/>msg<sp/>back<sp/>to<sp/>a<sp/>client,<sp/>we<sp/>don&apos;t<sp/>know<sp/>about<sp/>it&apos;s<sp/>localization,<sp/>so<sp/>send<sp/>english</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintOOB(<sp/>from,<sp/>SERVER_PRINT_BADPROTOCOL,<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;server<sp/>uses<sp/>protocol<sp/>%d.%d\n&quot;</highlight><highlight class="normal">,<sp/>ASYNC_PROTOCOL_MAJOR,<sp/>ASYNC_PROTOCOL_MINOR<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>clientDataChecksum<sp/>=<sp/>msg.ReadLong();</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/>challenge<sp/>=<sp/>msg.ReadLong();</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/>clientId<sp/>=<sp/>msg.ReadShort();</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/>clientRate<sp/>=<sp/>msg.ReadLong();</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>the<sp/>client<sp/>data<sp/>-<sp/>only<sp/>for<sp/>non<sp/>pure<sp/>servers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!sessLocal.mapSpawnData.serverInfo.GetInt(<sp/></highlight><highlight class="stringliteral">&quot;si_pure&quot;</highlight><highlight class="normal"><sp/>)<sp/>&amp;&amp;<sp/>clientDataChecksum<sp/>!=<sp/>serverDataChecksum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintOOB(<sp/>from,<sp/>SERVER_PRINT_MISC,<sp/></highlight><highlight class="stringliteral">&quot;#str_04842&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>ichallenge<sp/>=<sp/>ValidateChallenge(<sp/>from,<sp/>challenge,<sp/>clientId<sp/>)<sp/>)<sp/>==<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/>challenges[<sp/>ichallenge<sp/>].OS<sp/>=<sp/>OS;</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.ReadString(<sp/>guid,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>guid<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>challenges[<sp/>ichallenge<sp/>].authState<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CDK_PUREWAIT:</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendPureServerMessage(<sp/>from,<sp/>OS<sp/>);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CDK_ONLYLAN:</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>not<sp/>a<sp/>lan<sp/>client\n&quot;</highlight><highlight class="normal">,<sp/>Sys_NetAdrToString(<sp/>from<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintOOB(<sp/>from,<sp/>SERVER_PRINT_MISC,<sp/></highlight><highlight class="stringliteral">&quot;#str_04843&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CDK_WAIT:</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>challenges[<sp/>ichallenge<sp/>].authReply<sp/>==<sp/>AUTH_NONE<sp/>&amp;&amp;<sp/>Min(<sp/>serverTime<sp/>-<sp/>lastAuthTime,<sp/>serverTime<sp/>-<sp/>challenges[<sp/>ichallenge<sp/>].time<sp/>)<sp/>&gt;<sp/>AUTHORIZE_TIMEOUT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>Authorize<sp/>server<sp/>timed<sp/>out\n&quot;</highlight><highlight class="normal">,<sp/>Sys_NetAdrToString(<sp/>from<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>will<sp/>continue<sp/>with<sp/>the<sp/>connecting<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg,<sp/>*l_msg;</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>challenges[<sp/>ichallenge<sp/>].authReplyMsg<sp/>!=<sp/>AUTH_REPLY_PRINT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>=<sp/>authReplyMsg[<sp/>challenges[<sp/>ichallenge<sp/>].authReplyMsg<sp/>];</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>=<sp/>challenges[<sp/>ichallenge<sp/>].authReplyPrint.c_str();</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_msg<sp/>=<sp/>common-&gt;GetLanguageDict()-&gt;GetString(<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>Sys_NetAdrToString(<sp/>from<sp/>),<sp/>l_msg<sp/>);</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>challenges[<sp/>ichallenge<sp/>].authReplyMsg<sp/>==<sp/>AUTH_REPLY_UNKNOWN<sp/>||<sp/>challenges[<sp/>ichallenge<sp/>].authReplyMsg<sp/>==<sp/>AUTH_REPLY_WAITING<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>client<sp/>may<sp/>be<sp/>trying<sp/>to<sp/>connect<sp/>to<sp/>us<sp/>in<sp/>LAN<sp/>mode,<sp/>and<sp/>the<sp/>server<sp/>disagrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let<sp/>the<sp/>client<sp/>know<sp/>so<sp/>it<sp/>would<sp/>switch<sp/>to<sp/>authed<sp/>connection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>outMsg;</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte<sp/>msgBuf[<sp/>MAX_MESSAGE_SIZE<sp/>];</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteShort(<sp/>CONNECTIONLESS_MESSAGE_ID<sp/>);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteString(<sp/></highlight><highlight class="stringliteral">&quot;authrequired&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>serverPort.SendPacket(<sp/>from,<sp/>outMsg.GetData(),<sp/>outMsg.GetSize()<sp/>);</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintOOB(<sp/>from,<sp/>SERVER_PRINT_MISC,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>guid<sp/>in<sp/>the<sp/>challenges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idStr::snPrintf(<sp/>challenges[<sp/>ichallenge<sp/>].guid,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>challenges[<sp/>ichallenge<sp/>].guid<sp/>),<sp/>guid<sp/>);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>once<sp/>auth<sp/>replied<sp/>denied,<sp/>stop<sp/>sending<sp/>further<sp/>requests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>challenges[<sp/>ichallenge<sp/>].authReply<sp/>!=<sp/>AUTH_DENY<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>emit<sp/>a<sp/>cd<sp/>key<sp/>confirmation<sp/>request</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteShort(<sp/>CONNECTIONLESS_MESSAGE_ID<sp/>);</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteString(<sp/></highlight><highlight class="stringliteral">&quot;srvAuth&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteLong(<sp/>ASYNC_PROTOCOL_VERSION<sp/>);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteNetadr(<sp/>from<sp/>);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteLong(<sp/>clientId<sp/>);</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteString(<sp/>guid<sp/>);<sp/></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>protocol<sp/>1.37<sp/>addition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteByte(<sp/>fileSystem-&gt;RunningD3XP()<sp/>);</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>serverPort.SendPacket(<sp/>idAsyncNetwork::GetMasterAddress(),<sp/>outMsg.GetData(),<sp/>outMsg.GetSize()<sp/>);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>challenges[<sp/>ichallenge<sp/>].authState<sp/>==<sp/>CDK_OK<sp/>||<sp/>challenges[<sp/>ichallenge<sp/>].authState<sp/>==<sp/>CDK_PUREOK<sp/>);</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/>numClients<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>&gt;=<sp/>SCS_PUREWAIT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numClients++;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>game<sp/>may<sp/>be<sp/>passworded,<sp/>client<sp/>banned<sp/>by<sp/>IP<sp/>or<sp/>GUID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>authState<sp/>==<sp/>CDK_PUREOK,<sp/>the<sp/>check<sp/>was<sp/>already<sp/>performed<sp/>once<sp/>before<sp/>entering<sp/>pure<sp/>checks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>meanwhile,<sp/>the<sp/>max<sp/>players<sp/>may<sp/>have<sp/>been<sp/>reached</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.ReadString(<sp/>password,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>password<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>reason[MAX_STRING_CHARS];</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/>allowReply_t<sp/>reply<sp/>=<sp/>game-&gt;ServerAllowClient(<sp/>numClients,<sp/>Sys_NetAdrToString(<sp/>from<sp/>),<sp/>guid,<sp/>password,<sp/>reason<sp/>);</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>reply<sp/>!=<sp/>ALLOW_YES<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;game<sp/>denied<sp/>connection<sp/>for<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>Sys_NetAdrToString(<sp/>from<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SERVER_PRINT_GAMEDENY<sp/>passes<sp/>the<sp/>game<sp/>opcode<sp/>through.<sp/>Don&apos;t<sp/>use<sp/>PrintOOB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteShort(<sp/>CONNECTIONLESS_MESSAGE_ID<sp/>);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteString(<sp/></highlight><highlight class="stringliteral">&quot;print&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteLong(<sp/>SERVER_PRINT_GAMEDENY<sp/>);</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteLong(<sp/>reply<sp/>);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteString(<sp/>reason<sp/>);</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>serverPort.SendPacket(<sp/>from,<sp/>outMsg.GetData(),<sp/>outMsg.GetSize()<sp/>);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enter<sp/>pure<sp/>checks<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sessLocal.mapSpawnData.serverInfo.GetInt(<sp/></highlight><highlight class="stringliteral">&quot;si_pure&quot;</highlight><highlight class="normal"><sp/>)<sp/>&amp;&amp;<sp/>challenges[<sp/>ichallenge<sp/>].authState<sp/>!=<sp/>CDK_PUREOK<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>SendPureServerMessage(<sp/>from,<sp/>OS<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>challenges[<sp/>ichallenge<sp/>].authState<sp/>=<sp/>CDK_PUREWAIT;</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>push<sp/>back<sp/>decl<sp/>checksum<sp/>here<sp/>when<sp/>running<sp/>pure.<sp/>just<sp/>an<sp/>additional<sp/>safe<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sessLocal.mapSpawnData.serverInfo.GetInt(<sp/></highlight><highlight class="stringliteral">&quot;si_pure&quot;</highlight><highlight class="normal"><sp/>)<sp/>&amp;&amp;<sp/>clientDataChecksum<sp/>!=<sp/>serverDataChecksum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintOOB(<sp/>from,<sp/>SERVER_PRINT_MISC,<sp/></highlight><highlight class="stringliteral">&quot;#str_04844&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/>ping<sp/>=<sp/>serverTime<sp/>-<sp/>challenges[<sp/>ichallenge<sp/>].pingTime;</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;challenge<sp/>from<sp/>%s<sp/>connecting<sp/>with<sp/>%d<sp/>ping\n&quot;</highlight><highlight class="normal">,<sp/>Sys_NetAdrToString(<sp/>from<sp/>),<sp/>ping<sp/>);</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/>challenges[<sp/>ichallenge<sp/>].connected<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>a<sp/>slot<sp/>for<sp/>the<sp/>client</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>islot<sp/>=<sp/>0;<sp/>islot<sp/>&lt;<sp/>3;<sp/>islot++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>clientNum<sp/>=<sp/>0;<sp/>clientNum<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>clientNum++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[<sp/>clientNum<sp/>];</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>islot<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>slot<sp/>uses<sp/>the<sp/>same<sp/>IP<sp/>and<sp/>port</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>Sys_CompareNetAdrBase(<sp/>from,<sp/>client.channel.GetRemoteAddress()<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>clientId<sp/>==<sp/>client.clientId<sp/>||<sp/>from.port<sp/>==<sp/>client.channel.GetRemoteAddress().port<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>islot<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>client<sp/>is<sp/>not<sp/>connected<sp/>and<sp/>the<sp/>slot<sp/>uses<sp/>the<sp/>same<sp/>IP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>&gt;=<sp/>SCS_PUREWAIT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>Sys_CompareNetAdrBase(<sp/>from,<sp/>client.channel.GetRemoteAddress()<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>islot<sp/>==<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>slot<sp/>is<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>==<sp/>SCS_FREE<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clientNum<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clients[<sp/>clientNum<sp/>].channel.Init(<sp/>from,<sp/>serverId<sp/>);</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clients[<sp/>clientNum<sp/>].OS<sp/>=<sp/>OS;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strncpy(<sp/>clients[<sp/>clientNum<sp/>].guid,<sp/>guid,<sp/>12<sp/>);</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clients[<sp/>clientNum<sp/>].guid[11]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>no<sp/>free<sp/>spots<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clientNum<sp/>&gt;=<sp/>MAX_ASYNC_CLIENTS<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintOOB(<sp/>from,<sp/>SERVER_PRINT_MISC,<sp/></highlight><highlight class="stringliteral">&quot;#str_04845&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;sending<sp/>connect<sp/>response<sp/>to<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>Sys_NetAdrToString(<sp/>from<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>send<sp/>connect<sp/>response<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteShort(<sp/>CONNECTIONLESS_MESSAGE_ID<sp/>);</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteString(<sp/></highlight><highlight class="stringliteral">&quot;connectResponse&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteLong(<sp/>clientNum<sp/>);</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteLong(<sp/>gameInitId<sp/>);</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteLong(<sp/>gameFrame<sp/>);</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteLong(<sp/>gameTime<sp/>);</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteDeltaDict(<sp/>sessLocal.mapSpawnData.serverInfo,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/>serverPort.SendPacket(<sp/>from,<sp/>outMsg.GetData(),<sp/>outMsg.GetSize()<sp/>);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/>InitClient(<sp/>clientNum,<sp/>clientId,<sp/>clientRate<sp/>);</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/>clients[clientNum].gameInitSequence<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/>clients[clientNum].snapshotSequence<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>challenge<sp/>struct<sp/>so<sp/>a<sp/>reconnect<sp/>from<sp/>this<sp/>client<sp/>IP<sp/>starts<sp/>clean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>&amp;challenges[<sp/>ichallenge<sp/>],<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structchallenge__s" kindref="compound">challenge_t</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1881"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1882"><highlight class="comment">idAsyncServer::VerifyChecksumMessage</highlight></codeline>
<codeline lineno="1883"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1884"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAsyncServer::VerifyChecksumMessage(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>*from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>&amp;msg,<sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>&amp;reply,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>OS<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i,<sp/>numChecksums;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>checksums[<sp/>MAX_PURE_PAKS<sp/>];</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>gamePakChecksum;</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>serverChecksums[<sp/>MAX_PURE_PAKS<sp/>];</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>serverGamePakChecksum;</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pak<sp/>checksums,<sp/>in<sp/>a<sp/>0-terminated<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/>numChecksums<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>msg.ReadLong(<sp/>);</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checksums[<sp/>numChecksums++<sp/>]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>to<sp/>make<sp/>sure<sp/>a<sp/>broken<sp/>client<sp/>doesn&apos;t<sp/>crash<sp/>us</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numChecksums<sp/>&gt;=<sp/>MAX_PURE_PAKS<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;MAX_PURE_PAKS<sp/>(<sp/>%d<sp/>)<sp/>exceeded<sp/>in<sp/>idAsyncServer::ProcessPureMessage\n&quot;</highlight><highlight class="normal">,<sp/>MAX_PURE_PAKS<sp/>);</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>reply,<sp/></highlight><highlight class="stringliteral">&quot;#str_07144&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/>numChecksums--;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>code<sp/>pak<sp/>checksum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/>gamePakChecksum<sp/>=<sp/>msg.ReadLong(<sp/>);</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/>fileSystem-&gt;GetPureServerChecksums(<sp/>serverChecksums,<sp/>OS,<sp/>&amp;serverGamePakChecksum<sp/>);</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>serverChecksums[<sp/>0<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compare<sp/>the<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>serverGamePakChecksum<sp/>!=<sp/>gamePakChecksum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;client<sp/>%s:<sp/>invalid<sp/>game<sp/>code<sp/>pak<sp/>(<sp/>0x%x<sp/>)\n&quot;</highlight><highlight class="normal">,<sp/>from<sp/>?<sp/>Sys_NetAdrToString(<sp/>*from<sp/>)<sp/>:<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>clientNum<sp/>),<sp/>gamePakChecksum<sp/>);</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>reply,<sp/></highlight><highlight class="stringliteral">&quot;#str_07145&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>serverChecksums[<sp/>i<sp/>]<sp/>!=<sp/>0;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>checksums[<sp/>i<sp/>]<sp/>!=<sp/>serverChecksums[<sp/>i<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;client<sp/>%s:<sp/>pak<sp/>missing<sp/>(<sp/>0x%x<sp/>)\n&quot;</highlight><highlight class="normal">,<sp/>from<sp/>?<sp/>Sys_NetAdrToString(<sp/>*from<sp/>)<sp/>:<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>clientNum<sp/>),<sp/>serverChecksums[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>reply,<sp/></highlight><highlight class="stringliteral">&quot;pak<sp/>missing<sp/>(<sp/>0x%x<sp/>)\n&quot;</highlight><highlight class="normal">,<sp/>serverChecksums[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>checksums[<sp/>i<sp/>]<sp/>!=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;client<sp/>%s:<sp/>extra<sp/>pak<sp/>file<sp/>referenced<sp/>(<sp/>0x%x<sp/>)\n&quot;</highlight><highlight class="normal">,<sp/>from<sp/>?<sp/>Sys_NetAdrToString(<sp/>*from<sp/>)<sp/>:<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>clientNum<sp/>),<sp/>checksums[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>reply,<sp/></highlight><highlight class="stringliteral">&quot;extra<sp/>pak<sp/>file<sp/>referenced<sp/>(<sp/>0x%x<sp/>)\n&quot;</highlight><highlight class="normal">,<sp/>checksums[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1934"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1935"><highlight class="comment">idAsyncServer::ProcessPureMessage</highlight></codeline>
<codeline lineno="1936"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1937"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::ProcessPureMessage(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>iclient,<sp/>challenge,<sp/>clientId;</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/><sp/><sp/>reply;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/>challenge<sp/>=<sp/>msg.ReadLong();</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/>clientId<sp/>=<sp/>msg.ReadShort();</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>iclient<sp/>=<sp/>ValidateChallenge(<sp/>from,<sp/>challenge,<sp/>clientId<sp/>)<sp/>)<sp/>==<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>challenges[<sp/>iclient<sp/>].authState<sp/>!=<sp/>CDK_PUREWAIT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;client<sp/>%s:<sp/>got<sp/>pure<sp/>message,<sp/>not<sp/>in<sp/>CDK_PUREWAIT\n&quot;</highlight><highlight class="normal">,<sp/>Sys_NetAdrToString(<sp/>from<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"></highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!VerifyChecksumMessage(<sp/>iclient,<sp/>&amp;from,<sp/>msg,<sp/>reply,<sp/>challenges[<sp/>iclient<sp/>].OS<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintOOB(<sp/>from,<sp/>SERVER_PRINT_MISC,<sp/>reply<sp/>);</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;client<sp/>%s:<sp/>passed<sp/>pure<sp/>checks\n&quot;</highlight><highlight class="normal">,<sp/>Sys_NetAdrToString(<sp/>from<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/>challenges[<sp/>iclient<sp/>].authState<sp/>=<sp/>CDK_PUREOK;<sp/></highlight><highlight class="comment">//<sp/>next<sp/>connect<sp/>message<sp/>will<sp/>get<sp/>the<sp/>client<sp/>through<sp/>completely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1964"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1965"><highlight class="comment">idAsyncServer::ProcessReliablePure</highlight></codeline>
<codeline lineno="1966"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="1967"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::ProcessReliablePure(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reply;</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>outMsg;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clientGameInitId;</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/>clientGameInitId<sp/>=<sp/>msg.ReadLong();</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clientGameInitId<sp/>!=<sp/>gameInitId<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;client<sp/>%d:<sp/>ignoring<sp/>reliable<sp/>pure<sp/>from<sp/>an<sp/>old<sp/>gameInit<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>clientNum,<sp/>clientGameInitId<sp/>);</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clients[<sp/>clientNum<sp/>].clientState<sp/>!=<sp/>SCS_PUREWAIT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>not<sp/>happen<sp/>unless<sp/>something<sp/>is<sp/>very<sp/>wrong.<sp/>still,<sp/>don&apos;t<sp/>let<sp/>this<sp/>crash<sp/>us,<sp/>just<sp/>get<sp/>rid<sp/>of<sp/>the<sp/>client</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;client<sp/>%d:<sp/>got<sp/>reliable<sp/>pure<sp/>while<sp/>!=<sp/>SCS_PUREWAIT,<sp/>sending<sp/>a<sp/>reload\n&quot;</highlight><highlight class="normal">,<sp/>clientNum<sp/>);</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteByte(<sp/>SERVER_RELIABLE_MESSAGE_RELOAD<sp/>);</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendReliableMessage(<sp/>clientNum,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>back<sp/>to<sp/>SCS_CONNECTED<sp/>to<sp/>sleep<sp/>on<sp/>the<sp/>client<sp/>until<sp/>it<sp/>goes<sp/>away<sp/>for<sp/>a<sp/>reconnect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clients[<sp/>clientNum<sp/>].clientState<sp/>=<sp/>SCS_CONNECTED;</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!VerifyChecksumMessage(<sp/>clientNum,<sp/>NULL,<sp/>msg,<sp/>reply,<sp/>clients[<sp/>clientNum<sp/>].OS<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DropClient(<sp/>clientNum,<sp/>reply<sp/>);</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;client<sp/>%d:<sp/>passed<sp/>pure<sp/>checks<sp/>(reliable<sp/>channel)\n&quot;</highlight><highlight class="normal">,<sp/>clientNum<sp/>);</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/>clients[<sp/>clientNum<sp/>].clientState<sp/>=<sp/>SCS_CONNECTED;</highlight></codeline>
<codeline lineno="1997"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2000"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2001"><highlight class="comment">idAsyncServer::RemoteConsoleOutput</highlight></codeline>
<codeline lineno="2002"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2003"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::RemoteConsoleOutput(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/>noRconOutput<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintOOB(<sp/>rconAddress,<sp/>SERVER_PRINT_RCON,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2010"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2011"><highlight class="comment">RConRedirect</highlight></codeline>
<codeline lineno="2012"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2013"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RConRedirect(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/>idAsyncNetwork::server.RemoteConsoleOutput(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2016"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2019"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2020"><highlight class="comment">idAsyncServer::ProcessRemoteConsoleMessage</highlight></codeline>
<codeline lineno="2021"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2022"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::ProcessRemoteConsoleMessage(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>outMsg;</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[952];</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[MAX_STRING_CHARS];</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idAsyncNetwork::serverRemoteConsolePassword.GetString()[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintOOB(<sp/>from,<sp/>SERVER_PRINT_MISC,<sp/></highlight><highlight class="stringliteral">&quot;#str_04846&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.ReadString(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idStr::Icmp(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>idAsyncNetwork::serverRemoteConsolePassword.GetString()<sp/>)<sp/>!=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintOOB(<sp/>from,<sp/>SERVER_PRINT_MISC,<sp/></highlight><highlight class="stringliteral">&quot;#str_04847&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.ReadString(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;rcon<sp/>from<sp/>%s:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>Sys_NetAdrToString(<sp/>from<sp/>),<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/>rconAddress<sp/>=<sp/>from;</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/>noRconOutput<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;BeginRedirect(<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>),<sp/>RConRedirect<sp/>);</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;BufferCommandText(<sp/>CMD_EXEC_NOW,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;EndRedirect();</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>noRconOutput<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintOOB(<sp/>rconAddress,<sp/>SERVER_PRINT_RCON,<sp/></highlight><highlight class="stringliteral">&quot;#str_04848&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2055"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2058"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2059"><highlight class="comment">idAsyncServer::ProcessGetInfoMessage</highlight></codeline>
<codeline lineno="2060"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2061"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::ProcessGetInfoMessage(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>challenge;</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>outMsg;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!IsActive()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;Sending<sp/>info<sp/>response<sp/>to<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>Sys_NetAdrToString(<sp/>from<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/>challenge<sp/>=<sp/>msg.ReadLong();</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteShort(<sp/>CONNECTIONLESS_MESSAGE_ID<sp/>);</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteString(<sp/></highlight><highlight class="stringliteral">&quot;infoResponse&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteLong(<sp/>challenge<sp/>);</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteLong(<sp/>ASYNC_PROTOCOL_VERSION<sp/>);</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteDeltaDict(<sp/>sessLocal.mapSpawnData.serverInfo,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[i];</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>&lt;<sp/>SCS_CONNECTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteByte(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteShort(<sp/>client.clientPing<sp/>);</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteLong(<sp/>client.channel.GetMaxOutgoingRate()<sp/>);</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteString(<sp/>sessLocal.mapSpawnData.userInfo[i].GetString(<sp/></highlight><highlight class="stringliteral">&quot;ui_name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Player&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteByte(<sp/>MAX_ASYNC_CLIENTS<sp/>);</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteLong(<sp/>fileSystem-&gt;GetOSMask()<sp/>);</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/>serverPort.SendPacket(<sp/>from,<sp/>outMsg.GetData(),<sp/>outMsg.GetSize()<sp/>);</highlight></codeline>
<codeline lineno="2098"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2101"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="2102"><highlight class="comment">idAsyncServer::PrintLocalServerInfo</highlight></codeline>
<codeline lineno="2103"><highlight class="comment">see<sp/>(client)<sp/>&quot;getInfo&quot;<sp/>-&gt;<sp/>(server)<sp/>&quot;infoResponse&quot;<sp/>-&gt;<sp/>(client)ProcessGetInfoMessage</highlight></codeline>
<codeline lineno="2104"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="2105"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::PrintLocalServerInfo(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;server<sp/>&apos;%s&apos;<sp/>IP<sp/>=<sp/>%s\nprotocol<sp/>%d.%d<sp/>OS<sp/>mask<sp/>0x%x\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sessLocal.mapSpawnData.serverInfo.GetString(<sp/></highlight><highlight class="stringliteral">&quot;si_name&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_NetAdrToString(<sp/>serverPort.GetAdr()<sp/>),</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASYNC_PROTOCOL_MAJOR,</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASYNC_PROTOCOL_MINOR,</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileSystem-&gt;GetOSMask()<sp/>);</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/>sessLocal.mapSpawnData.serverInfo.Print();</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[i];</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>&lt;<sp/>SCS_CONNECTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;client<sp/>%2d:<sp/>%s,<sp/>ping<sp/>=<sp/>%d,<sp/>rate<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>i,</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sessLocal.mapSpawnData.userInfo[i].GetString(<sp/></highlight><highlight class="stringliteral">&quot;ui_name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Player&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client.clientPing,<sp/>client.channel.GetMaxOutgoingRate()<sp/>);</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2128"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2129"><highlight class="comment">idAsyncServer::ConnectionlessMessage</highlight></codeline>
<codeline lineno="2130"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2131"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAsyncServer::ConnectionlessMessage(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[MAX_STRING_CHARS*2];<sp/><sp/></highlight><highlight class="comment">//<sp/>M.<sp/>Quinn<sp/>-<sp/>Even<sp/>Balance<sp/>-<sp/>PB<sp/>Packets<sp/>need<sp/>more<sp/>than<sp/>1024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.ReadString(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"></highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>info<sp/>request</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idStr::Icmp(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;getInfo&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProcessGetInfoMessage(<sp/>from,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remote<sp/>console</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idStr::Icmp(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;rcon&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProcessRemoteConsoleMessage(<sp/>from,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!active<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintOOB(<sp/>from,<sp/>SERVER_PRINT_MISC,<sp/></highlight><highlight class="stringliteral">&quot;#str_04849&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>challenge<sp/>from<sp/>a<sp/>client</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idStr::Icmp(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;challenge&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProcessChallengeMessage(<sp/>from,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>connect<sp/>from<sp/>a<sp/>client</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idStr::Icmp(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;connect&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProcessConnectMessage(<sp/>from,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pure<sp/>mesasge<sp/>from<sp/>a<sp/>client</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idStr::Icmp(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pureClient&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProcessPureMessage(<sp/>from,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>download<sp/>request</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idStr::Icmp(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;downloadRequest&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProcessDownloadRequestMessage(<sp/>from,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auth<sp/>server</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idStr::Icmp(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;auth&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!Sys_CompareNetAdrBase(<sp/>from,<sp/>idAsyncNetwork::GetMasterAddress()<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;auth:<sp/>bad<sp/>source<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>Sys_NetAdrToString(<sp/>from<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idAsyncNetwork::LANServer.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;auth<sp/>message<sp/>from<sp/>master.<sp/>net_LANServer<sp/>is<sp/>enabled,<sp/>ignored.\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProcessAuthMessage(<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"></highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2194"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2195"><highlight class="comment">idAsyncServer::ProcessMessage</highlight></codeline>
<codeline lineno="2196"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2197"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAsyncServer::ProcessMessage(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>from,<sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>id,<sp/>sequence;</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>outMsg;</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>msg.ReadShort();</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"></highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>a<sp/>connectionless<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>CONNECTIONLESS_MESSAGE_ID<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ConnectionlessMessage(<sp/>from,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>msg.GetRemaingData()<sp/>&lt;<sp/>4<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>tiny<sp/>packet\n&quot;</highlight><highlight class="normal">,<sp/>Sys_NetAdrToString(<sp/>from<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"></highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>out<sp/>which<sp/>client<sp/>the<sp/>message<sp/>is<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[i];</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>==<sp/>SCS_FREE<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>does<sp/>not<sp/>compare<sp/>the<sp/>UDP<sp/>port,<sp/>because<sp/>some<sp/>address<sp/>translating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>routers<sp/>will<sp/>change<sp/>that<sp/>at<sp/>arbitrary<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!Sys_CompareNetAdrBase(<sp/>from,<sp/>client.channel.GetRemoteAddress()<sp/>)<sp/>||<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>!=<sp/>client.clientId<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>it<sp/>is<sp/>a<sp/>valid,<sp/>in<sp/>sequence<sp/>packet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!client.channel.Process(<sp/>from,<sp/>serverTime,<sp/>msg,<sp/>sequence<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>out<sp/>of<sp/>order,<sp/>duplicated,<sp/>fragment,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>zombie<sp/>clients<sp/>still<sp/>need<sp/>to<sp/>do<sp/>the<sp/>channel<sp/>processing<sp/>to<sp/>make<sp/>sure<sp/>they<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>retransmit<sp/>the<sp/>final<sp/>reliable<sp/>message,<sp/>but<sp/>they<sp/>don&apos;t<sp/>do<sp/>any<sp/>other<sp/>processing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>==<sp/>SCS_ZOMBIE<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client.lastPacketTime<sp/>=<sp/>serverTime;</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"></highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProcessReliableClientMessages(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProcessUnreliableClientMessage(<sp/>i,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>received<sp/>a<sp/>sequenced<sp/>packet<sp/>from<sp/>an<sp/>address<sp/>we<sp/>don&apos;t<sp/>recognize,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>send<sp/>an<sp/>out<sp/>of<sp/>band<sp/>disconnect<sp/>packet<sp/>to<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteShort(<sp/>CONNECTIONLESS_MESSAGE_ID<sp/>);</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteString(<sp/></highlight><highlight class="stringliteral">&quot;disconnect&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/>serverPort.SendPacket(<sp/>from,<sp/>outMsg.GetData(),<sp/>outMsg.GetSize()<sp/>);</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"></highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2259"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2260"><highlight class="comment">idAsyncServer::SendReliableGameMessage</highlight></codeline>
<codeline lineno="2261"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2262"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::SendReliableGameMessage(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>outMsg;</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteByte(<sp/>SERVER_RELIABLE_MESSAGE_GAME<sp/>);</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteData(<sp/>msg.GetData(),<sp/>msg.GetSize()<sp/>);</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clientNum<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>clientNum<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clients[clientNum].clientState<sp/>==<sp/>SCS_INGAME<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendReliableMessage(<sp/>clientNum,<sp/>outMsg<sp/>);</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"></highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clients[i].clientState<sp/>!=<sp/>SCS_INGAME<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendReliableMessage(<sp/>i,<sp/>outMsg<sp/>);</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2288"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2289"><highlight class="comment">idAsyncServer::LocalClientSendReliableMessageExcluding</highlight></codeline>
<codeline lineno="2290"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2291"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2292"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::SendReliableGameMessageExcluding(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>outMsg;</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"></highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>clientNum<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>clientNum<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS<sp/>);</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"></highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteByte(<sp/>SERVER_RELIABLE_MESSAGE_GAME<sp/>);</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteData(<sp/>msg.GetData(),<sp/>msg.GetSize()<sp/>);</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>==<sp/>clientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clients[i].clientState<sp/>!=<sp/>SCS_INGAME<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendReliableMessage(<sp/>i,<sp/>outMsg<sp/>);</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight></codeline>
<codeline lineno="2314"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2315"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2316"><highlight class="comment">idAsyncServer::LocalClientSendReliableMessage</highlight></codeline>
<codeline lineno="2317"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2318"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2319"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::LocalClientSendReliableMessage(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>localClientNum<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;LocalClientSendReliableMessage:<sp/>no<sp/>local<sp/>client\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/>game-&gt;ServerProcessReliableMessage(<sp/>localClientNum,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="2325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2328"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2329"><highlight class="comment">idAsyncServer::ProcessConnectionLessMessages</highlight></codeline>
<codeline lineno="2330"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2331"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2332"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::ProcessConnectionLessMessages(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size,<sp/>id;</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>msg;</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/><sp/><sp/><sp/>from;</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!serverPort.GetPort()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>serverPort.GetPacket(<sp/>from,<sp/>msgBuf,<sp/>size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.SetSize(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.BeginReading();</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>msg.ReadShort();</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>CONNECTIONLESS_MESSAGE_ID<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConnectionlessMessage(<sp/>from,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2354"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2355"><highlight class="comment">idAsyncServer::UpdateTime</highlight></codeline>
<codeline lineno="2356"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2357"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idAsyncServer::UpdateTime(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clamp<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time,<sp/>msec;</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"></highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/>time<sp/>=<sp/>Sys_Milliseconds();</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/>msec<sp/>=<sp/>idMath::ClampInt(<sp/>0,<sp/>clamp,<sp/>time<sp/>-<sp/>realTime<sp/>);</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/>realTime<sp/>=<sp/>time;</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/>serverTime<sp/>+=<sp/>msec;</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>msec;</highlight></codeline>
<codeline lineno="2366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2369"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2370"><highlight class="comment">idAsyncServer::RunFrame</highlight></codeline>
<codeline lineno="2371"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2372"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::RunFrame(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>msec,<sp/>size;</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPacket;</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>msg;</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/><sp/><sp/><sp/>from;</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outgoingRate,<sp/>incomingRate;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outgoingCompression,<sp/>incomingCompression;</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/>msec<sp/>=<sp/>UpdateTime(<sp/>100<sp/>);</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!serverPort.GetPort()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"></highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!active<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProcessConnectionLessMessages();</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/>gameTimeResidual<sp/>+=<sp/>msec;</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>spin<sp/>in<sp/>place<sp/>processing<sp/>incoming<sp/>packets<sp/>until<sp/>enough<sp/>time<sp/>lapsed<sp/>to<sp/>run<sp/>a<sp/>new<sp/>game<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"></highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"></highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>blocking<sp/>read<sp/>with<sp/>game<sp/>time<sp/>residual<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPacket<sp/>=<sp/>serverPort.GetPacketBlocking(<sp/>from,<sp/>msgBuf,<sp/>size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>),<sp/>USERCMD_MSEC<sp/>-<sp/>gameTimeResidual<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>newPacket<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.SetSize(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.BeginReading();</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ProcessMessage(<sp/>from,<sp/>msg<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>return<sp/>because<sp/>rcon<sp/>was<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msec<sp/>=<sp/>UpdateTime(<sp/>100<sp/>);</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameTimeResidual<sp/>+=<sp/>msec;</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>newPacket<sp/>);</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>gameTimeResidual<sp/>&lt;<sp/>USERCMD_MSEC<sp/>);</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>send<sp/>heart<sp/>beat<sp/>to<sp/>master<sp/>servers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/>MasterHeartbeat();</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"></highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>clients<sp/>that<sp/>timed<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckClientTimeouts();</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"></highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idAsyncNetwork::idleServer.GetBool()<sp/>==<sp/>(<sp/>!GetNumClients()<sp/>||<sp/>GetNumIdleClients()<sp/>!=<sp/>GetNumClients()<sp/><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::idleServer.SetBool(<sp/>!idAsyncNetwork::idleServer.GetBool()<sp/>);</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>need<sp/>to<sp/>propagate<sp/>right<sp/>away,<sp/>only<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sessLocal.mapSpawnData.serverInfo.Set(<sp/></highlight><highlight class="stringliteral">&quot;si_idleServer&quot;</highlight><highlight class="normal">,<sp/>idAsyncNetwork::idleServer.GetString()<sp/>);</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>game-&gt;SetServerInfo(<sp/>sessLocal.mapSpawnData.serverInfo<sp/>);</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>the<sp/>time<sp/>doesn&apos;t<sp/>wrap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>serverTime<sp/>&gt;<sp/>0x70000000<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExecuteMapChange();</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>synchronized<sp/>cvar<sp/>changes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cvarSystem-&gt;GetModifiedFlags()<sp/>&amp;<sp/>CVAR_NETWORKSYNC<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>newCvars;</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newCvars<sp/>=<sp/>*cvarSystem-&gt;MoveCVarsToDict(<sp/>CVAR_NETWORKSYNC<sp/>);</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendSyncedCvarsBroadcast(<sp/>newCvars<sp/>);</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvarSystem-&gt;ClearModifiedFlags(<sp/>CVAR_NETWORKSYNC<sp/>);</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>user<sp/>info<sp/>changes<sp/>of<sp/>the<sp/>local<sp/>client</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cvarSystem-&gt;GetModifiedFlags()<sp/>&amp;<sp/>CVAR_USERINFO<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>localClientNum<sp/>&gt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>newInfo;</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>game-&gt;ThrottleUserInfo(<sp/>);</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newInfo<sp/>=<sp/>*cvarSystem-&gt;MoveCVarsToDict(<sp/>CVAR_USERINFO<sp/>);</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendUserInfoBroadcast(<sp/>localClientNum,<sp/>newInfo<sp/>);</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvarSystem-&gt;ClearModifiedFlags(<sp/>CVAR_USERINFO<sp/>);</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"></highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>advance<sp/>the<sp/>server<sp/>game</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>gameTimeResidual<sp/>&gt;=<sp/>USERCMD_MSEC<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"></highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sample<sp/>input<sp/>for<sp/>the<sp/>local<sp/>client</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalClientInput();</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"></highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>duplicate<sp/>usercmds<sp/>for<sp/>clients<sp/>if<sp/>no<sp/>new<sp/>ones<sp/>are<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DuplicateUsercmds(<sp/>gameFrame,<sp/>gameTime<sp/>);</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>advance<sp/>game</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgame_return__t" kindref="compound">gameReturn_t</ref><sp/>ret<sp/>=<sp/>game-&gt;RunFrame(<sp/>userCmds[gameFrame<sp/>&amp;<sp/>(<sp/>MAX_USERCMD_BACKUP<sp/>-<sp/>1<sp/>)<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"></highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAsyncNetwork::ExecuteSessionCommand(<sp/>ret.sessionCommand<sp/>);</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameFrame++;</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameTime<sp/>+=<sp/>USERCMD_MSEC;</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameTimeResidual<sp/>-=<sp/>USERCMD_MSEC;</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>duplicate<sp/>usercmds<sp/>so<sp/>there<sp/>is<sp/>always<sp/>at<sp/>least<sp/>one<sp/>available<sp/>to<sp/>send<sp/>with<sp/>snapshots</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/>DuplicateUsercmds(<sp/>gameFrame,<sp/>gameTime<sp/>);</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>send<sp/>snapshots<sp/>to<sp/>connected<sp/>clients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structserver_client__s" kindref="compound">serverClient_t</ref><sp/>&amp;client<sp/>=<sp/>clients[i];</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>==<sp/>SCS_FREE<sp/>||<sp/>i<sp/>==<sp/>localClientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>maximum<sp/>rate<sp/>if<sp/>necesary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idAsyncNetwork::serverMaxClientRate.IsModified()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client.channel.SetMaxOutgoingRate(<sp/>Min(<sp/>client.clientRate,<sp/>idAsyncNetwork::serverMaxClientRate.GetInteger()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"></highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>channel<sp/>is<sp/>not<sp/>yet<sp/>ready<sp/>to<sp/>send<sp/>new<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!client.channel.ReadyToSend(<sp/>serverTime<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"></highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>send<sp/>additional<sp/>message<sp/>fragments<sp/>if<sp/>the<sp/>last<sp/>message<sp/>was<sp/>too<sp/>large<sp/>to<sp/>send<sp/>at<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.channel.UnsentFragmentsLeft()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client.channel.SendNextFragment(<sp/>serverPort,<sp/>serverTime<sp/>);</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"></highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.clientState<sp/>==<sp/>SCS_INGAME<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!SendSnapshotToClient(<sp/>i<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendPingToClient(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendEmptyToClient(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>com_showAsyncStats.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpdateAsyncStatsAvg();</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dedicated<sp/>will<sp/>verbose<sp/>to<sp/>console</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idAsyncNetwork::serverDedicated.GetBool()<sp/>&amp;&amp;<sp/>serverTime<sp/>&gt;=<sp/>nextAsyncStatsTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;delay<sp/>=<sp/>%d<sp/>msec,<sp/>total<sp/>outgoing<sp/>rate<sp/>=<sp/>%d<sp/>KB/s,<sp/>total<sp/>incoming<sp/>rate<sp/>=<sp/>%d<sp/>KB/s\n&quot;</highlight><highlight class="normal">,<sp/>GetDelay(),<sp/></highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetOutgoingRate()<sp/>&gt;&gt;<sp/>10,<sp/>GetIncomingRate()<sp/>&gt;&gt;<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outgoingRate<sp/>=<sp/>GetClientOutgoingRate(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>incomingRate<sp/>=<sp/>GetClientIncomingRate(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outgoingCompression<sp/>=<sp/>GetClientOutgoingCompression(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>incomingCompression<sp/>=<sp/>GetClientIncomingCompression(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>outgoingRate<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>incomingRate<sp/>!=<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;client<sp/>%d:<sp/>out<sp/>rate<sp/>=<sp/>%d<sp/>B/s<sp/>(%<sp/>-2.1f%%),<sp/>in<sp/>rate<sp/>=<sp/>%d<sp/>B/s<sp/>(%<sp/>-2.1f%%)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>outgoingRate,<sp/>outgoingCompression,<sp/>incomingRate,<sp/>incomingCompression<sp/>);</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>msg;</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetAsyncStatsAvgMsg(<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>msg.c_str()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextAsyncStatsTime<sp/>=<sp/>serverTime<sp/>+<sp/>1000;</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/>idAsyncNetwork::serverMaxClientRate.ClearModified();</highlight></codeline>
<codeline lineno="2543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"></highlight></codeline>
<codeline lineno="2545"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2546"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2547"><highlight class="comment">idAsyncServer::PacifierUpdate</highlight></codeline>
<codeline lineno="2548"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2549"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2550"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::PacifierUpdate(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"></highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!IsActive()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/>realTime<sp/>=<sp/>Sys_Milliseconds();</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessConnectionLessMessages();</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ASYNC_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clients[i].clientState<sp/>&gt;=<sp/>SCS_PUREWAIT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clients[i].channel.UnsentFragmentsLeft()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clients[i].channel.SendNextFragment(<sp/>serverPort,<sp/>serverTime<sp/>);</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendEmptyToClient(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2570"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2571"><highlight class="comment">idAsyncServer::PrintOOB</highlight></codeline>
<codeline lineno="2572"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2573"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2574"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::PrintOOB(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>to,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>opcode,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>outMsg;</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[<sp/>MAX_MESSAGE_SIZE<sp/>];</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteShort(<sp/>CONNECTIONLESS_MESSAGE_ID<sp/>);</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteString(<sp/></highlight><highlight class="stringliteral">&quot;print&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteLong(<sp/>opcode<sp/>);</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteString(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/>serverPort.SendPacket(<sp/>to,<sp/>outMsg.GetData(),<sp/>outMsg.GetSize()<sp/>);</highlight></codeline>
<codeline lineno="2584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"></highlight></codeline>
<codeline lineno="2586"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2587"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2588"><highlight class="comment">idAsyncServer::MasterHeartbeat</highlight></codeline>
<codeline lineno="2589"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2590"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2591"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::MasterHeartbeat(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>force<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idAsyncNetwork::LANServer.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>force<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;net_LANServer<sp/>is<sp/>enabled.<sp/>Not<sp/>sending<sp/>heartbeats\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>force<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextHeartbeatTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>serverTime<sp/>&lt;<sp/>nextHeartbeatTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/>nextHeartbeatTime<sp/>=<sp/>serverTime<sp/>+<sp/>HEARTBEAT_MSEC;</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>MAX_MASTER_SERVERS<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>adr;</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idAsyncNetwork::GetMasterAddress(<sp/>i,<sp/>adr<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;Sending<sp/>heartbeat<sp/>to<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>Sys_NetAdrToString(<sp/>adr<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>outMsg;</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte<sp/>msgBuf[<sp/>MAX_MESSAGE_SIZE<sp/>];</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteShort(<sp/>CONNECTIONLESS_MESSAGE_ID<sp/>);</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteString(<sp/></highlight><highlight class="stringliteral">&quot;heartbeat&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>serverPort.SendPacket(<sp/>adr,<sp/>outMsg.GetData(),<sp/>outMsg.GetSize()<sp/>);</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"></highlight></codeline>
<codeline lineno="2620"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2621"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="2622"><highlight class="comment">idAsyncServer::SendEnterGameToClient</highlight></codeline>
<codeline lineno="2623"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="2624"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::SendEnterGameToClient(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>msg;</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[<sp/>MAX_MESSAGE_SIZE<sp/>];</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"></highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>SERVER_RELIABLE_MESSAGE_ENTERGAME<sp/>);</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/>SendReliableMessage(<sp/>clientNum,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="2632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"></highlight></codeline>
<codeline lineno="2634"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2635"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="2636"><highlight class="comment">idAsyncServer::UpdateAsyncStatsAvg</highlight></codeline>
<codeline lineno="2637"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="2638"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::UpdateAsyncStatsAvg(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/>stats_average_sum<sp/>-=<sp/>stats_outrate[<sp/>stats_current<sp/>];</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/>stats_outrate[<sp/>stats_current<sp/>]<sp/>=<sp/>idAsyncNetwork::server.GetOutgoingRate();</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stats_outrate[<sp/>stats_current<sp/>]<sp/>&gt;<sp/>stats_max<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats_max<sp/>=<sp/>stats_outrate[<sp/>stats_current<sp/>];</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats_max_index<sp/>=<sp/>stats_current;</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stats_current<sp/>==<sp/>stats_max_index<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>new<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats_max<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>stats_numsamples<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stats_outrate[<sp/>i<sp/>]<sp/>&gt;<sp/>stats_max<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats_max<sp/>=<sp/>stats_outrate[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats_max_index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/>stats_average_sum<sp/>+=<sp/>stats_outrate[<sp/>stats_current<sp/>];</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/>stats_current++;<sp/>stats_current<sp/>%=<sp/>stats_numsamples;</highlight></codeline>
<codeline lineno="2658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2661"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="2662"><highlight class="comment">idAsyncServer::GetAsyncStatsAvgMsg</highlight></codeline>
<codeline lineno="2663"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="2664"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2665"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::GetAsyncStatsAvgMsg(<sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(<sp/>msg,<sp/></highlight><highlight class="stringliteral">&quot;avrg<sp/>out:<sp/>%d<sp/>B/s<sp/>-<sp/>max<sp/>%d<sp/>B/s<sp/>(<sp/>over<sp/>%d<sp/>ms<sp/>)&quot;</highlight><highlight class="normal">,<sp/>stats_average_sum<sp/>/<sp/>stats_numsamples,<sp/>stats_max,<sp/>idAsyncNetwork::serverSnapshotDelay.GetInteger()<sp/>*<sp/>stats_numsamples<sp/>);</highlight></codeline>
<codeline lineno="2667"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"></highlight></codeline>
<codeline lineno="2669"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2670"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="2671"><highlight class="comment">idAsyncServer::ProcessDownloadRequestMessage</highlight></codeline>
<codeline lineno="2672"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="2673"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2674"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAsyncServer::ProcessDownloadRequestMessage(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structnetadr__t" kindref="compound">netadr_t</ref><sp/>from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>challenge,<sp/>clientId,<sp/>iclient,<sp/>numPaks,<sp/>i;</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dlGamePak;</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dlPakChecksum;</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dlSize[<sp/>MAX_PURE_PAKS<sp/>];<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_list" kindref="compound">idStrList</ref><sp/><sp/><sp/>pakNames;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>relative<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_list" kindref="compound">idStrList</ref><sp/><sp/><sp/>pakURLs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>game<sp/>URLs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pakbuf[<sp/>MAX_STRING_CHARS<sp/>];</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paklist;</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[<sp/>MAX_MESSAGE_SIZE<sp/>];</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpBuf[<sp/>MAX_MESSAGE_SIZE<sp/>];</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>outMsg,<sp/>tmpMsg;</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dlRequest;</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>voidSlots<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>count<sp/>and<sp/>verbose<sp/>the<sp/>right<sp/>number<sp/>of<sp/>paks<sp/>requested<sp/>for<sp/>downloads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2688"><highlight class="normal"></highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/>challenge<sp/>=<sp/>msg.ReadLong();</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/>clientId<sp/>=<sp/>msg.ReadShort();</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/>dlRequest<sp/>=<sp/>msg.ReadLong();</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"></highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>iclient<sp/>=<sp/>ValidateChallenge(<sp/>from,<sp/>challenge,<sp/>clientId<sp/>)<sp/>)<sp/>==<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"></highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>challenges[<sp/>iclient<sp/>].authState<sp/>!=<sp/>CDK_PUREWAIT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;client<sp/>%s:<sp/>got<sp/>download<sp/>request<sp/>message,<sp/>not<sp/>in<sp/>CDK_PUREWAIT\n&quot;</highlight><highlight class="normal">,<sp/>Sys_NetAdrToString(<sp/>from<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>first<sp/>token<sp/>of<sp/>the<sp/>pak<sp/>names<sp/>list<sp/>passed<sp/>to<sp/>the<sp/>game<sp/>will<sp/>be<sp/>empty<sp/>if<sp/>no<sp/>game<sp/>pak<sp/>is<sp/>requested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/>dlGamePak<sp/>=<sp/>msg.ReadLong();</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dlGamePak<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!(<sp/>dlSize[<sp/>0<sp/>]<sp/>=<sp/>fileSystem-&gt;ValidateDownloadPakForChecksum(<sp/>dlGamePak,<sp/>pakbuf,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;client<sp/>requested<sp/>unknown<sp/>game<sp/>pak<sp/>0x%x&quot;</highlight><highlight class="normal">,<sp/>dlGamePak<sp/>);</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pakbuf[<sp/>0<sp/>]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>voidSlots++;</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pakbuf[<sp/>0<sp/>]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>voidSlots++;</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/>pakNames.Append(<sp/>pakbuf<sp/>);</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/>numPaks<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"></highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>checksums,<sp/>build<sp/>path<sp/>names<sp/>and<sp/>pass<sp/>that<sp/>to<sp/>the<sp/>game<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/>dlPakChecksum<sp/>=<sp/>msg.ReadLong();</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>dlPakChecksum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!(<sp/>dlSize[<sp/>numPaks<sp/>]<sp/>=<sp/>fileSystem-&gt;ValidateDownloadPakForChecksum(<sp/>dlPakChecksum,<sp/>pakbuf,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>pass<sp/>an<sp/>empty<sp/>token<sp/>to<sp/>the<sp/>game<sp/>so<sp/>our<sp/>list<sp/>doesn&apos;t<sp/>get<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;client<sp/>requested<sp/>an<sp/>unknown<sp/>pak<sp/>0x%x&quot;</highlight><highlight class="normal">,<sp/>dlPakChecksum<sp/>);</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pakbuf[<sp/>0<sp/>]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>voidSlots++;</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pakNames.Append(<sp/>pakbuf<sp/>);</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numPaks++;</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dlPakChecksum<sp/>=<sp/>msg.ReadLong();</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"></highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>pakNames.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paklist<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paklist<sp/>+=<sp/>pakNames[<sp/>i<sp/>].c_str();</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"></highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>message<sp/>and<sp/>pass<sp/>it<sp/>to<sp/>the<sp/>game<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;got<sp/>download<sp/>request<sp/>for<sp/>%d<sp/>paks<sp/>-<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>numPaks<sp/>-<sp/>voidSlots,<sp/>paklist.c_str()<sp/>);</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteShort(<sp/>CONNECTIONLESS_MESSAGE_ID<sp/>);</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteString(<sp/></highlight><highlight class="stringliteral">&quot;downloadInfo&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteLong(<sp/>dlRequest<sp/>);</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!game-&gt;DownloadRequest(<sp/>Sys_NetAdrToString(<sp/>from<sp/>),<sp/>challenges[<sp/>iclient<sp/>].guid,<sp/>paklist.c_str(),<sp/>pakbuf<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;game:<sp/>no<sp/>downloads\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteByte(<sp/>SERVER_DL_NONE<sp/>);</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>serverPort.SendPacket(<sp/>from,<sp/>outMsg.GetData(),<sp/>outMsg.GetSize()<sp/>);</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"></highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*token,<sp/>*next;</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"></highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/>token<sp/>=<sp/>pakbuf;</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/>next<sp/>=<sp/>strchr(<sp/>token,<sp/></highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>token<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*next<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>type<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/>atoi(<sp/>token<sp/>);</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>type<sp/>==<sp/>SERVER_DL_REDIRECT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;download<sp/>request:<sp/>redirect<sp/>to<sp/>URL<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>token<sp/>);</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteByte(<sp/>SERVER_DL_REDIRECT<sp/>);</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteString(<sp/>token<sp/>);</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>serverPort.SendPacket(<sp/>from,<sp/>outMsg.GetData(),<sp/>outMsg.GetSize()<sp/>);</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>type<sp/>==<sp/>SERVER_DL_LIST<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pakURLs.Append(<sp/>token<sp/>);</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;wrong<sp/>op<sp/>type<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>type<sp/>);</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>token<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token<sp/>=<sp/>next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>strchr(<sp/>token,<sp/></highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>type<sp/>==<sp/>SERVER_DL_LIST<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalDlSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numActualPaks<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>the<sp/>answer<sp/>packet<sp/>together</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteByte(<sp/>SERVER_DL_LIST<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpMsg.Init(<sp/>tmpBuf,<sp/>MAX_MESSAGE_SIZE<sp/>);</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"></highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>pakURLs.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpMsg.BeginWriting();</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!dlSize[<sp/>i<sp/>]<sp/>||<sp/>!pakURLs[<sp/>i<sp/>].Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>still<sp/>send<sp/>the<sp/>relative<sp/>path<sp/>so<sp/>the<sp/>client<sp/>knows<sp/>what<sp/>it<sp/>missed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpMsg.WriteByte(<sp/>SERVER_PAK_NO<sp/>);</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpMsg.WriteString(<sp/>pakNames[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalDlSize<sp/>+=<sp/>dlSize[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numActualPaks++;</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpMsg.WriteByte(<sp/>SERVER_PAK_YES<sp/>);</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpMsg.WriteString(<sp/>pakNames[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpMsg.WriteString(<sp/>pakURLs[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpMsg.WriteLong(<sp/>dlSize[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>last<sp/>5<sp/>bytes<sp/>for<sp/>an<sp/>&apos;end<sp/>of<sp/>message&apos;<sp/>-<sp/>SERVER_PAK_END<sp/>and<sp/>the<sp/>totalDlSize<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>outMsg.GetRemainingSpace()<sp/>-<sp/>tmpMsg.GetSize()<sp/>&gt;<sp/>5<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteData(<sp/>tmpMsg.GetData(),<sp/>tmpMsg.GetSize()<sp/>);</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteByte(<sp/>SERVER_PAK_END<sp/>);</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>==<sp/>pakURLs.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>a<sp/>closure<sp/>even<sp/>if<sp/>size<sp/>not<sp/>exceeded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteByte(<sp/>SERVER_PAK_END<sp/>);</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;download<sp/>request:<sp/>download<sp/>%d<sp/>paks,<sp/>%d<sp/>bytes\n&quot;</highlight><highlight class="normal">,<sp/>numActualPaks,<sp/>totalDlSize<sp/>);</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"></highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>serverPort.SendPacket(<sp/>from,<sp/>outMsg.GetData(),<sp/>outMsg.GetSize()<sp/>);</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2825"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/framework/async/AsyncServer.cpp"/>
  </compounddef>
</doxygen>
