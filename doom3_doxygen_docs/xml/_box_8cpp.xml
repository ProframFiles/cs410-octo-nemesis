<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_box_8cpp" kind="file">
    <compoundname>Box.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../precompiled.h</includes>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_box_8cpp_1a2fd6f6ee27abe8ecda9ffb9f3bc410c5" prot="public" static="no" mutable="no">
        <type><ref refid="classid_box" kindref="compound">idBox</ref></type>
        <definition>idBox box_zero(vec3_zero, vec3_zero, mat3_identity)</definition>
        <argsstring>(vec3_zero, vec3_zero, mat3_identity)</argsstring>
        <name>box_zero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Box.cpp" line="32" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_box_8cpp_1a3430a0204c9d293f162439bc4fb2652b" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int boxPlaneBitsSilVerts[64][7]</definition>
        <argsstring>[64][7]</argsstring>
        <name>boxPlaneBitsSilVerts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Box.cpp" line="121" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Box.cpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_box_8cpp_1a61a82657fcb4314a94d6f655a5246990" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool BoxPlaneClip</definition>
        <argsstring>(const float denom, const float numer, float &amp;scale0, float &amp;scale1)</argsstring>
        <name>BoxPlaneClip</name>
        <param>
          <type>const float</type>
          <declname>denom</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>numer</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>scale0</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>scale1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Box.cpp" line="581" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Box.cpp" bodystart="581" bodyend="603"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><ref refid="classid_box" kindref="compound">idBox</ref><sp/>box_zero(<sp/>vec3_zero,<sp/>vec3_zero,<sp/>mat3_identity<sp/>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4---{4}---5</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/|</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>Z<sp/><sp/><sp/><sp/><sp/><sp/>{7}<sp/>{8}<sp/><sp/><sp/>{5}<sp/>|</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>-<sp/><sp/><sp/><sp/><sp/>/<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>/<sp/><sp/><sp/><sp/>{9}</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>7--{6}----6<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/>{11}<sp/><sp/><sp/><sp/>0---|-{0}-1</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>/<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>/<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>{3}<sp/><sp/>{10}<sp/>{1}<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Y</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>|/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>3---{2}---2</highlight></codeline>
<codeline lineno="46"><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>X<sp/>+</highlight></codeline>
<codeline lineno="48"><highlight class="comment"></highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/>plane<sp/>bits:</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/>0<sp/>=<sp/>min<sp/>x</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/>1<sp/>=<sp/>max<sp/>x</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/>2<sp/>=<sp/>min<sp/>y</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/>3<sp/>=<sp/>max<sp/>y</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/>4<sp/>=<sp/>min<sp/>z</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/>5<sp/>=<sp/>max<sp/>z</highlight></codeline>
<codeline lineno="56"><highlight class="comment"></highlight></codeline>
<codeline lineno="57"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="60"><highlight class="comment">static<sp/>int<sp/>boxVertPlanes[8]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/>(<sp/>(1&lt;&lt;0)<sp/>|<sp/>(1&lt;&lt;2)<sp/>|<sp/>(1&lt;&lt;4)<sp/>),</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/>(<sp/>(1&lt;&lt;1)<sp/>|<sp/>(1&lt;&lt;2)<sp/>|<sp/>(1&lt;&lt;4)<sp/>),</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/>(<sp/>(1&lt;&lt;1)<sp/>|<sp/>(1&lt;&lt;3)<sp/>|<sp/>(1&lt;&lt;4)<sp/>),</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/>(<sp/>(1&lt;&lt;0)<sp/>|<sp/>(1&lt;&lt;3)<sp/>|<sp/>(1&lt;&lt;4)<sp/>),</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/>(<sp/>(1&lt;&lt;0)<sp/>|<sp/>(1&lt;&lt;2)<sp/>|<sp/>(1&lt;&lt;5)<sp/>),</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/>(<sp/>(1&lt;&lt;1)<sp/>|<sp/>(1&lt;&lt;2)<sp/>|<sp/>(1&lt;&lt;5)<sp/>),</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/>(<sp/>(1&lt;&lt;1)<sp/>|<sp/>(1&lt;&lt;3)<sp/>|<sp/>(1&lt;&lt;5)<sp/>),</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/>(<sp/>(1&lt;&lt;0)<sp/>|<sp/>(1&lt;&lt;3)<sp/>|<sp/>(1&lt;&lt;5)<sp/>)</highlight></codeline>
<codeline lineno="69"><highlight class="comment">};</highlight></codeline>
<codeline lineno="70"><highlight class="comment"></highlight></codeline>
<codeline lineno="71"><highlight class="comment">static<sp/>int<sp/>boxVertEdges[8][3]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>bottom</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>3,<sp/>0,<sp/>8<sp/>},</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>1,<sp/>9<sp/>},</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>1,<sp/>2,<sp/>10<sp/>},</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>2,<sp/>3,<sp/>11<sp/>},</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>top</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>7,<sp/>4,<sp/>8<sp/>},</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>4,<sp/>5,<sp/>9<sp/>},</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>5,<sp/>6,<sp/>10<sp/>},</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>6,<sp/>7,<sp/>11<sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="comment">};</highlight></codeline>
<codeline lineno="83"><highlight class="comment"></highlight></codeline>
<codeline lineno="84"><highlight class="comment">static<sp/>int<sp/>boxEdgePlanes[12][2]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>bottom</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>4,<sp/>2<sp/>},</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>4,<sp/>1<sp/>},</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>4,<sp/>3<sp/>},</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>4,<sp/>0<sp/>},</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>top</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>5,<sp/>2<sp/>},</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>5,<sp/>1<sp/>},</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>5,<sp/>3<sp/>},</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>5,<sp/>0<sp/>},</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>sides</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>2<sp/>},</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>2,<sp/>1<sp/>},</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>1,<sp/>3<sp/>},</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>3,<sp/>0<sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="comment">};</highlight></codeline>
<codeline lineno="101"><highlight class="comment"></highlight></codeline>
<codeline lineno="102"><highlight class="comment">static<sp/>int<sp/>boxEdgeVerts[12][2]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>bottom</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>1<sp/>},</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>1,<sp/>2<sp/>},</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>2,<sp/>3<sp/>},</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>3,<sp/>0<sp/>},</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>top</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>4,<sp/>5<sp/>},</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>5,<sp/>6<sp/>},</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>6,<sp/>7<sp/>},</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>7,<sp/>4<sp/>},</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>sides</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>4<sp/>},</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>1,<sp/>5<sp/>},</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>2,<sp/>6<sp/>},</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/>{<sp/>3,<sp/>7<sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="comment">};</highlight></codeline>
<codeline lineno="119"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>boxPlaneBitsSilVerts[64][7]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>000000<sp/>=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>4,<sp/>7,<sp/>4,<sp/>0,<sp/>3,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>000001<sp/>=<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>4,<sp/>5,<sp/>6,<sp/>2,<sp/>1,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>000010<sp/>=<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>000011<sp/>=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>4,<sp/>4,<sp/>5,<sp/>1,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>000100<sp/>=<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>6,<sp/>3,<sp/>7,<sp/>4,<sp/>5,<sp/>1,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>000101<sp/>=<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>6,<sp/>4,<sp/>5,<sp/>6,<sp/>2,<sp/>1,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>000110<sp/>=<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>000111<sp/>=<sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>4,<sp/>6,<sp/>7,<sp/>3,<sp/>2,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>001000<sp/>=<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>6,<sp/>6,<sp/>7,<sp/>4,<sp/>0,<sp/>3,<sp/>2<sp/>},<sp/></highlight><highlight class="comment">//<sp/>001001<sp/>=<sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>6,<sp/>5,<sp/>6,<sp/>7,<sp/>3,<sp/>2,<sp/>1<sp/>},<sp/></highlight><highlight class="comment">//<sp/>001010<sp/>=<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>001011<sp/>=<sp/>11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>001100<sp/>=<sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>001101<sp/>=<sp/>13</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>001110<sp/>=<sp/>14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>001111<sp/>=<sp/>15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>4,<sp/>0,<sp/>1,<sp/>2,<sp/>3,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>010000<sp/>=<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>6,<sp/>0,<sp/>1,<sp/>2,<sp/>3,<sp/>7,<sp/>4<sp/>},<sp/></highlight><highlight class="comment">//<sp/>010001<sp/>=<sp/>17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>6,<sp/>3,<sp/>2,<sp/>6,<sp/>5,<sp/>1,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>010010<sp/>=<sp/>18</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>010011<sp/>=<sp/>19</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>6,<sp/>1,<sp/>2,<sp/>3,<sp/>0,<sp/>4,<sp/>5<sp/>},<sp/></highlight><highlight class="comment">//<sp/>010100<sp/>=<sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>6,<sp/>1,<sp/>2,<sp/>3,<sp/>7,<sp/>4,<sp/>5<sp/>},<sp/></highlight><highlight class="comment">//<sp/>010101<sp/>=<sp/>21</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>6,<sp/>2,<sp/>3,<sp/>0,<sp/>4,<sp/>5,<sp/>6<sp/>},<sp/></highlight><highlight class="comment">//<sp/>010110<sp/>=<sp/>22</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>010111<sp/>=<sp/>23</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>6,<sp/>0,<sp/>1,<sp/>2,<sp/>6,<sp/>7,<sp/>3<sp/>},<sp/></highlight><highlight class="comment">//<sp/>011000<sp/>=<sp/>24</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>6,<sp/>0,<sp/>1,<sp/>2,<sp/>6,<sp/>7,<sp/>4<sp/>},<sp/></highlight><highlight class="comment">//<sp/>011001<sp/>=<sp/>25</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>6,<sp/>0,<sp/>1,<sp/>5,<sp/>6,<sp/>7,<sp/>3<sp/>},<sp/></highlight><highlight class="comment">//<sp/>011010<sp/>=<sp/>26</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>011011<sp/>=<sp/>27</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>011100<sp/>=<sp/>28</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>011101<sp/>=<sp/>29</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>011110<sp/>=<sp/>30</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>011111<sp/>=<sp/>31</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>4,<sp/>7,<sp/>6,<sp/>5,<sp/>4,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>100000<sp/>=<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>6,<sp/>7,<sp/>6,<sp/>5,<sp/>4,<sp/>0,<sp/>3<sp/>},<sp/></highlight><highlight class="comment">//<sp/>100001<sp/>=<sp/>33</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>6,<sp/>5,<sp/>4,<sp/>7,<sp/>6,<sp/>2,<sp/>1<sp/>},<sp/></highlight><highlight class="comment">//<sp/>100010<sp/>=<sp/>34</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>100011<sp/>=<sp/>35</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>6,<sp/>4,<sp/>7,<sp/>6,<sp/>5,<sp/>1,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>100100<sp/>=<sp/>36</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>6,<sp/>3,<sp/>7,<sp/>6,<sp/>5,<sp/>1,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>100101<sp/>=<sp/>37</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>6,<sp/>4,<sp/>7,<sp/>6,<sp/>2,<sp/>1,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>100110<sp/>=<sp/>38</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>100111<sp/>=<sp/>39</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>6,<sp/>6,<sp/>5,<sp/>4,<sp/>7,<sp/>3,<sp/>2<sp/>},<sp/></highlight><highlight class="comment">//<sp/>101000<sp/>=<sp/>40</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>6,<sp/>6,<sp/>5,<sp/>4,<sp/>0,<sp/>3,<sp/>2<sp/>},<sp/></highlight><highlight class="comment">//<sp/>101001<sp/>=<sp/>41</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>6,<sp/>5,<sp/>4,<sp/>7,<sp/>3,<sp/>2,<sp/>1<sp/>},<sp/></highlight><highlight class="comment">//<sp/>101010<sp/>=<sp/>42</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>101011<sp/>=<sp/>43</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>101100<sp/>=<sp/>44</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>101101<sp/>=<sp/>45</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>101110<sp/>=<sp/>46</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>101111<sp/>=<sp/>47</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>110000<sp/>=<sp/>48</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>110001<sp/>=<sp/>49</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>110010<sp/>=<sp/>50</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>110011<sp/>=<sp/>51</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>110100<sp/>=<sp/>52</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>110101<sp/>=<sp/>53</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>110110<sp/>=<sp/>54</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>110111<sp/>=<sp/>55</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>111000<sp/>=<sp/>56</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>111001<sp/>=<sp/>57</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>111010<sp/>=<sp/>58</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>111011<sp/>=<sp/>59</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>111100<sp/>=<sp/>60</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>111101<sp/>=<sp/>61</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>111110<sp/>=<sp/>62</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},<sp/></highlight><highlight class="comment">//<sp/>111111<sp/>=<sp/>63</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">};</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="190"><highlight class="comment">============</highlight></codeline>
<codeline lineno="191"><highlight class="comment">idBox::AddPoint</highlight></codeline>
<codeline lineno="192"><highlight class="comment">============</highlight></codeline>
<codeline lineno="193"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idBox::AddPoint(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;v<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>axis2;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>bounds1,<sp/>bounds2;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>extents[0]<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extents.Zero();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>center<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis.Identity();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds1[0][0]<sp/>=<sp/>bounds1[1][0]<sp/>=<sp/>center<sp/>*<sp/>axis[0];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds1[0][1]<sp/>=<sp/>bounds1[1][1]<sp/>=<sp/>center<sp/>*<sp/>axis[1];</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds1[0][2]<sp/>=<sp/>bounds1[1][2]<sp/>=<sp/>center<sp/>*<sp/>axis[2];</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds1[0]<sp/>-=<sp/>extents;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds1[1]<sp/>+=<sp/>extents;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!bounds1.AddPoint(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>v<sp/>*<sp/>axis[0],<sp/>v<sp/>*<sp/>axis[1],<sp/>v<sp/>*<sp/>axis[2]<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>point<sp/>is<sp/>contained<sp/>in<sp/>the<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>axis2[0]<sp/>=<sp/>v<sp/>-<sp/>center;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>axis2[0].Normalize();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>axis2[1]<sp/>=<sp/>axis[<sp/>Min3Index(<sp/>axis2[0]<sp/>*<sp/>axis[0],<sp/>axis2[0]<sp/>*<sp/>axis[1],<sp/>axis2[0]<sp/>*<sp/>axis[2]<sp/>)<sp/>];</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>axis2[1]<sp/>=<sp/>axis2[1]<sp/>-<sp/>(<sp/>axis2[1]<sp/>*<sp/>axis2[0]<sp/>)<sp/>*<sp/>axis2[0];</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>axis2[1].Normalize();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>axis2[2].Cross(<sp/>axis2[0],<sp/>axis2[1]<sp/>);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>AxisProjection(<sp/>axis2,<sp/>bounds2<sp/>);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds2.AddPoint(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>v<sp/>*<sp/>axis2[0],<sp/>v<sp/>*<sp/>axis2[1],<sp/>v<sp/>*<sp/>axis2[2]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>new<sp/>box<sp/>based<sp/>on<sp/>the<sp/>smallest<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bounds1.GetVolume()<sp/>&lt;<sp/>bounds2.GetVolume()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>center<sp/>=<sp/>(<sp/>bounds1[0]<sp/>+<sp/>bounds1[1]<sp/>)<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extents<sp/>=<sp/>bounds1[1]<sp/>-<sp/>center;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>center<sp/>*=<sp/>axis;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>center<sp/>=<sp/>(<sp/>bounds2[0]<sp/>+<sp/>bounds2[1]<sp/>)<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extents<sp/>=<sp/>bounds2[1]<sp/>-<sp/>center;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>center<sp/>*=<sp/>axis2;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis<sp/>=<sp/>axis2;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="241"><highlight class="comment">============</highlight></codeline>
<codeline lineno="242"><highlight class="comment">idBox::AddBox</highlight></codeline>
<codeline lineno="243"><highlight class="comment">============</highlight></codeline>
<codeline lineno="244"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idBox::AddBox(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_box" kindref="compound">idBox</ref><sp/>&amp;a<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>besti;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v,<sp/>bestv;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>dir;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>ax[4];</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>bounds[4],<sp/>b;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>a.extents[0]<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>extents[0]<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>center<sp/>=<sp/>a.center;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extents<sp/>=<sp/>a.extents;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis<sp/>=<sp/>a.axis;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>axis<sp/>of<sp/>this<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>ax[0]<sp/>=<sp/>axis;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds[0][0][0]<sp/>=<sp/>bounds[0][1][0]<sp/>=<sp/>center<sp/>*<sp/>ax[0][0];</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds[0][0][1]<sp/>=<sp/>bounds[0][1][1]<sp/>=<sp/>center<sp/>*<sp/>ax[0][1];</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds[0][0][2]<sp/>=<sp/>bounds[0][1][2]<sp/>=<sp/>center<sp/>*<sp/>ax[0][2];</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds[0][0]<sp/>-=<sp/>extents;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds[0][1]<sp/>+=<sp/>extents;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>a.AxisProjection(<sp/>ax[0],<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!bounds[0].AddBounds(<sp/>b<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>other<sp/>box<sp/>is<sp/>contained<sp/>in<sp/>this<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>axis<sp/>of<sp/>other<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>ax[1]<sp/>=<sp/>a.axis;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds[1][0][0]<sp/>=<sp/>bounds[1][1][0]<sp/>=<sp/>a.center<sp/>*<sp/>ax[1][0];</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds[1][0][1]<sp/>=<sp/>bounds[1][1][1]<sp/>=<sp/>a.center<sp/>*<sp/>ax[1][1];</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds[1][0][2]<sp/>=<sp/>bounds[1][1][2]<sp/>=<sp/>a.center<sp/>*<sp/>ax[1][2];</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds[1][0]<sp/>-=<sp/>a.extents;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds[1][1]<sp/>+=<sp/>a.extents;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>AxisProjection(<sp/>ax[1],<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!bounds[1].AddBounds(<sp/>b<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>box<sp/>is<sp/>contained<sp/>in<sp/>the<sp/>other<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>center<sp/>=<sp/>a.center;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extents<sp/>=<sp/>a.extents;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis<sp/>=<sp/>a.axis;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>axes<sp/>aligned<sp/>with<sp/>the<sp/>vector<sp/>between<sp/>the<sp/>box<sp/>centers<sp/>and<sp/>one<sp/>of<sp/>the<sp/>box<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>a.center<sp/>-<sp/>center;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>dir.Normalize();</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>2;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax[i][0]<sp/>=<sp/>dir;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax[i][1]<sp/>=<sp/>ax[i-2][<sp/>Min3Index(<sp/>dir<sp/>*<sp/>ax[i-2][0],<sp/>dir<sp/>*<sp/>ax[i-2][1],<sp/>dir<sp/>*<sp/>ax[i-2][2]<sp/>)<sp/>];</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax[i][1]<sp/>=<sp/>ax[i][1]<sp/>-<sp/>(<sp/>ax[i][1]<sp/>*<sp/>dir<sp/>)<sp/>*<sp/>dir;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax[i][1].Normalize();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax[i][2].Cross(<sp/>dir,<sp/>ax[i][1]<sp/>);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AxisProjection(<sp/>ax[i],<sp/>bounds[i]<sp/>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.AxisProjection(<sp/>ax[i],<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bounds[i].AddBounds(<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>bounds<sp/>with<sp/>the<sp/>smallest<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>bestv<sp/>=<sp/>idMath::INFINITY;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>besti<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>bounds[i].GetVolume();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>v<sp/>&lt;<sp/>bestv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestv<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>besti<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>box<sp/>from<sp/>the<sp/>smallest<sp/>bounds<sp/>axis<sp/>pair</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>center<sp/>=<sp/>(<sp/>bounds[besti][0]<sp/>+<sp/>bounds[besti][1]<sp/>)<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>extents<sp/>=<sp/>bounds[besti][1]<sp/>-<sp/>center;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>center<sp/>*=<sp/>ax[besti];</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>axis<sp/>=<sp/>ax[besti];</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="328"><highlight class="comment">================</highlight></codeline>
<codeline lineno="329"><highlight class="comment">idBox::PlaneDistance</highlight></codeline>
<codeline lineno="330"><highlight class="comment">================</highlight></codeline>
<codeline lineno="331"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>idBox::PlaneDistance(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>&amp;plane<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>d1,<sp/>d2;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>plane.Distance(<sp/>center<sp/>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>idMath::Fabs(<sp/>extents[0]<sp/>*<sp/>plane.Normal()[0]<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMath::Fabs(<sp/>extents[1]<sp/>*<sp/>plane.Normal()[1]<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMath::Fabs(<sp/>extents[2]<sp/>*<sp/>plane.Normal()[2]<sp/>);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d1<sp/>-<sp/>d2<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d1<sp/>-<sp/>d2;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d1<sp/>+<sp/>d2<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d1<sp/>+<sp/>d2;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0f;</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="350"><highlight class="comment">================</highlight></codeline>
<codeline lineno="351"><highlight class="comment">idBox::PlaneSide</highlight></codeline>
<codeline lineno="352"><highlight class="comment">================</highlight></codeline>
<codeline lineno="353"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idBox::PlaneSide(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>&amp;plane,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>epsilon<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>d1,<sp/>d2;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>plane.Distance(<sp/>center<sp/>);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>idMath::Fabs(<sp/>extents[0]<sp/>*<sp/>plane.Normal()[0]<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMath::Fabs(<sp/>extents[1]<sp/>*<sp/>plane.Normal()[1]<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMath::Fabs(<sp/>extents[2]<sp/>*<sp/>plane.Normal()[2]<sp/>);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d1<sp/>-<sp/>d2<sp/>&gt;<sp/>epsilon<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PLANESIDE_FRONT;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d1<sp/>+<sp/>d2<sp/>&lt;<sp/>-epsilon<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PLANESIDE_BACK;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PLANESIDE_CROSS;</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="372"><highlight class="comment">============</highlight></codeline>
<codeline lineno="373"><highlight class="comment">idBox::IntersectsBox</highlight></codeline>
<codeline lineno="374"><highlight class="comment">============</highlight></codeline>
<codeline lineno="375"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idBox::IntersectsBox(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_box" kindref="compound">idBox</ref><sp/>&amp;a<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>dir;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vector<sp/>between<sp/>centers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>c[3][3];<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matrix<sp/>c<sp/>=<sp/>axis.Transpose()<sp/>*<sp/>a.axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ac[3][3];<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>absolute<sp/>values<sp/>of<sp/>c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>axisdir[3];<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>axis[i]<sp/>*<sp/>dir</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>d,<sp/>e0,<sp/>e1;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>distance<sp/>between<sp/>centers<sp/>and<sp/>projected<sp/>extents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>a.center<sp/>-<sp/>center;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>axis<sp/>C0<sp/>+<sp/>t<sp/>*<sp/>A0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>c[0][0]<sp/>=<sp/>axis[0]<sp/>*<sp/>a.axis[0];</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>c[0][1]<sp/>=<sp/>axis[0]<sp/>*<sp/>a.axis[1];</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>c[0][2]<sp/>=<sp/>axis[0]<sp/>*<sp/>a.axis[2];</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>axisdir[0]<sp/>=<sp/>axis[0]<sp/>*<sp/>dir;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>ac[0][0]<sp/>=<sp/>idMath::Fabs(<sp/>c[0][0]<sp/>);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>ac[0][1]<sp/>=<sp/>idMath::Fabs(<sp/>c[0][1]<sp/>);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>ac[0][2]<sp/>=<sp/>idMath::Fabs(<sp/>c[0][2]<sp/>);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>idMath::Fabs(<sp/>axisdir[0]<sp/>);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>e0<sp/>=<sp/>extents[0];</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>a.extents[0]<sp/>*<sp/>ac[0][0]<sp/>+<sp/>a.extents[1]<sp/>*<sp/>ac[0][1]<sp/>+<sp/>a.extents[2]<sp/>*<sp/>ac[0][2];</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>&gt;<sp/>e0<sp/>+<sp/>e1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>axis<sp/>C0<sp/>+<sp/>t<sp/>*<sp/>A1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>c[1][0]<sp/>=<sp/>axis[1]<sp/>*<sp/>a.axis[0];</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>c[1][1]<sp/>=<sp/>axis[1]<sp/>*<sp/>a.axis[1];</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>c[1][2]<sp/>=<sp/>axis[1]<sp/>*<sp/>a.axis[2];</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>axisdir[1]<sp/>=<sp/>axis[1]<sp/>*<sp/>dir;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>ac[1][0]<sp/>=<sp/>idMath::Fabs(<sp/>c[1][0]<sp/>);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>ac[1][1]<sp/>=<sp/>idMath::Fabs(<sp/>c[1][1]<sp/>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>ac[1][2]<sp/>=<sp/>idMath::Fabs(<sp/>c[1][2]<sp/>);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>idMath::Fabs(<sp/>axisdir[1]<sp/>);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>e0<sp/>=<sp/>extents[1];</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>a.extents[0]<sp/>*<sp/>ac[1][0]<sp/>+<sp/>a.extents[1]<sp/>*<sp/>ac[1][1]<sp/>+<sp/>a.extents[2]<sp/>*<sp/>ac[1][2];</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>&gt;<sp/>e0<sp/>+<sp/>e1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>axis<sp/>C0<sp/>+<sp/>t<sp/>*<sp/>A2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>c[2][0]<sp/>=<sp/>axis[2]<sp/>*<sp/>a.axis[0];</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>c[2][1]<sp/>=<sp/>axis[2]<sp/>*<sp/>a.axis[1];</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>c[2][2]<sp/>=<sp/>axis[2]<sp/>*<sp/>a.axis[2];</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>axisdir[2]<sp/>=<sp/>axis[2]<sp/>*<sp/>dir;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>ac[2][0]<sp/>=<sp/>idMath::Fabs(<sp/>c[2][0]<sp/>);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>ac[2][1]<sp/>=<sp/>idMath::Fabs(<sp/>c[2][1]<sp/>);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>ac[2][2]<sp/>=<sp/>idMath::Fabs(<sp/>c[2][2]<sp/>);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>idMath::Fabs(<sp/>axisdir[2]<sp/>);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>e0<sp/>=<sp/>extents[2];</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>a.extents[0]<sp/>*<sp/>ac[2][0]<sp/>+<sp/>a.extents[1]<sp/>*<sp/>ac[2][1]<sp/>+<sp/>a.extents[2]<sp/>*<sp/>ac[2][2];</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>&gt;<sp/>e0<sp/>+<sp/>e1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>axis<sp/>C0<sp/>+<sp/>t<sp/>*<sp/>B0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>idMath::Fabs(<sp/>a.axis[0]<sp/>*<sp/>dir<sp/>);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>e0<sp/>=<sp/>extents[0]<sp/>*<sp/>ac[0][0]<sp/>+<sp/>extents[1]<sp/>*<sp/>ac[1][0]<sp/>+<sp/>extents[2]<sp/>*<sp/>ac[2][0];</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>a.extents[0];</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>&gt;<sp/>e0<sp/>+<sp/>e1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>axis<sp/>C0<sp/>+<sp/>t<sp/>*<sp/>B1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>idMath::Fabs(<sp/>a.axis[1]<sp/>*<sp/>dir<sp/>);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>e0<sp/>=<sp/>extents[0]<sp/>*<sp/>ac[0][1]<sp/>+<sp/>extents[1]<sp/>*<sp/>ac[1][1]<sp/>+<sp/>extents[2]<sp/>*<sp/>ac[2][1];</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>a.extents[1];</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>&gt;<sp/>e0<sp/>+<sp/>e1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>axis<sp/>C0<sp/>+<sp/>t<sp/>*<sp/>B2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>idMath::Fabs(<sp/>a.axis[2]<sp/>*<sp/>dir<sp/>);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>e0<sp/>=<sp/>extents[0]<sp/>*<sp/>ac[0][2]<sp/>+<sp/>extents[1]<sp/>*<sp/>ac[1][2]<sp/>+<sp/>extents[2]<sp/>*<sp/>ac[2][2];</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>a.extents[2];</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>&gt;<sp/>e0<sp/>+<sp/>e1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>axis<sp/>C0<sp/>+<sp/>t<sp/>*<sp/>A0xB0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>idMath::Fabs(<sp/>axisdir[2]<sp/>*<sp/>c[1][0]<sp/>-<sp/>axisdir[1]<sp/>*<sp/>c[2][0]<sp/>);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>e0<sp/>=<sp/>extents[1]<sp/>*<sp/>ac[2][0]<sp/>+<sp/>extents[2]<sp/>*<sp/>ac[1][0];</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>a.extents[1]<sp/>*<sp/>ac[0][2]<sp/>+<sp/>a.extents[2]<sp/>*<sp/>ac[0][1];</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>&gt;<sp/>e0<sp/>+<sp/>e1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>axis<sp/>C0<sp/>+<sp/>t<sp/>*<sp/>A0xB1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>idMath::Fabs(<sp/>axisdir[2]<sp/>*<sp/>c[1][1]<sp/>-<sp/>axisdir[1]<sp/>*<sp/>c[2][1]<sp/>);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>e0<sp/>=<sp/>extents[1]<sp/>*<sp/>ac[2][1]<sp/>+<sp/>extents[2]<sp/>*<sp/>ac[1][1];</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>a.extents[0]<sp/>*<sp/>ac[0][2]<sp/>+<sp/>a.extents[2]<sp/>*<sp/>ac[0][0];</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>&gt;<sp/>e0<sp/>+<sp/>e1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>axis<sp/>C0<sp/>+<sp/>t<sp/>*<sp/>A0xB2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>idMath::Fabs(<sp/>axisdir[2]<sp/>*<sp/>c[1][2]<sp/>-<sp/>axisdir[1]<sp/>*<sp/>c[2][2]<sp/>);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>e0<sp/>=<sp/>extents[1]<sp/>*<sp/>ac[2][2]<sp/>+<sp/>extents[2]<sp/>*<sp/>ac[1][2];</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>a.extents[0]<sp/>*<sp/>ac[0][1]<sp/>+<sp/>a.extents[1]<sp/>*<sp/>ac[0][0];</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>&gt;<sp/>e0<sp/>+<sp/>e1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>axis<sp/>C0<sp/>+<sp/>t<sp/>*<sp/>A1xB0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>idMath::Fabs(<sp/>axisdir[0]<sp/>*<sp/>c[2][0]<sp/>-<sp/>axisdir[2]<sp/>*<sp/>c[0][0]<sp/>);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>e0<sp/>=<sp/>extents[0]<sp/>*<sp/>ac[2][0]<sp/>+<sp/>extents[2]<sp/>*<sp/>ac[0][0];</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>a.extents[1]<sp/>*<sp/>ac[1][2]<sp/>+<sp/>a.extents[2]<sp/>*<sp/>ac[1][1];</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>&gt;<sp/>e0<sp/>+<sp/>e1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>axis<sp/>C0<sp/>+<sp/>t<sp/>*<sp/>A1xB1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>idMath::Fabs(<sp/>axisdir[0]<sp/>*<sp/>c[2][1]<sp/>-<sp/>axisdir[2]<sp/>*<sp/>c[0][1]<sp/>);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>e0<sp/>=<sp/>extents[0]<sp/>*<sp/>ac[2][1]<sp/>+<sp/>extents[2]<sp/>*<sp/>ac[0][1];</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>a.extents[0]<sp/>*<sp/>ac[1][2]<sp/>+<sp/>a.extents[2]<sp/>*<sp/>ac[1][0];</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>&gt;<sp/>e0<sp/>+<sp/>e1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>axis<sp/>C0<sp/>+<sp/>t<sp/>*<sp/>A1xB2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>idMath::Fabs(<sp/>axisdir[0]<sp/>*<sp/>c[2][2]<sp/>-<sp/>axisdir[2]<sp/>*<sp/>c[0][2]<sp/>);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>e0<sp/>=<sp/>extents[0]<sp/>*<sp/>ac[2][2]<sp/>+<sp/>extents[2]<sp/>*<sp/>ac[0][2];</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>a.extents[0]<sp/>*<sp/>ac[1][1]<sp/>+<sp/>a.extents[1]<sp/>*<sp/>ac[1][0];</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>&gt;<sp/>e0<sp/>+<sp/>e1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>axis<sp/>C0<sp/>+<sp/>t<sp/>*<sp/>A2xB0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>idMath::Fabs(<sp/>axisdir[1]<sp/>*<sp/>c[0][0]<sp/>-<sp/>axisdir[0]<sp/>*<sp/>c[1][0]<sp/>);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>e0<sp/>=<sp/>extents[0]<sp/>*<sp/>ac[1][0]<sp/>+<sp/>extents[1]<sp/>*<sp/>ac[0][0];</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>a.extents[1]<sp/>*<sp/>ac[2][2]<sp/>+<sp/>a.extents[2]<sp/>*<sp/>ac[2][1];</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>&gt;<sp/>e0<sp/>+<sp/>e1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>axis<sp/>C0<sp/>+<sp/>t<sp/>*<sp/>A2xB1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>idMath::Fabs(<sp/>axisdir[1]<sp/>*<sp/>c[0][1]<sp/>-<sp/>axisdir[0]<sp/>*<sp/>c[1][1]<sp/>);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>e0<sp/>=<sp/>extents[0]<sp/>*<sp/>ac[1][1]<sp/>+<sp/>extents[1]<sp/>*<sp/>ac[0][1];</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>a.extents[0]<sp/>*<sp/>ac[2][2]<sp/>+<sp/>a.extents[2]<sp/>*<sp/>ac[2][0];</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>&gt;<sp/>e0<sp/>+<sp/>e1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>axis<sp/>C0<sp/>+<sp/>t<sp/>*<sp/>A2xB2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>idMath::Fabs(<sp/>axisdir[1]<sp/>*<sp/>c[0][2]<sp/>-<sp/>axisdir[0]<sp/>*<sp/>c[1][2]<sp/>);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>e0<sp/>=<sp/>extents[0]<sp/>*<sp/>ac[1][2]<sp/>+<sp/>extents[1]<sp/>*<sp/>ac[0][2];</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>a.extents[0]<sp/>*<sp/>ac[2][1]<sp/>+<sp/>a.extents[1]<sp/>*<sp/>ac[2][0];</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>&gt;<sp/>e0<sp/>+<sp/>e1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="532"><highlight class="comment">============</highlight></codeline>
<codeline lineno="533"><highlight class="comment">idBox::LineIntersection</highlight></codeline>
<codeline lineno="534"><highlight class="comment"></highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/><sp/>Returns<sp/>true<sp/>if<sp/>the<sp/>line<sp/>intersects<sp/>the<sp/>box<sp/>between<sp/>the<sp/>start<sp/>and<sp/>end<sp/>point.</highlight></codeline>
<codeline lineno="536"><highlight class="comment">============</highlight></codeline>
<codeline lineno="537"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idBox::LineIntersection(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;end<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ld[3];</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>lineDir<sp/>=<sp/>0.5f<sp/>*<sp/>(<sp/>end<sp/>-<sp/>start<sp/>);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>lineCenter<sp/>=<sp/>start<sp/>+<sp/>lineDir;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>dir<sp/>=<sp/>lineCenter<sp/>-<sp/>center;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>ld[0]<sp/>=<sp/>idMath::Fabs(<sp/>lineDir<sp/>*<sp/>axis[0]<sp/>);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>dir<sp/>*<sp/>axis[0]<sp/>)<sp/>&gt;<sp/>extents[0]<sp/>+<sp/>ld[0]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>ld[1]<sp/>=<sp/>idMath::Fabs(<sp/>lineDir<sp/>*<sp/>axis[1]<sp/>);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>dir<sp/>*<sp/>axis[1]<sp/>)<sp/>&gt;<sp/>extents[1]<sp/>+<sp/>ld[1]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>ld[2]<sp/>=<sp/>idMath::Fabs(<sp/>lineDir<sp/>*<sp/>axis[2]<sp/>);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>dir<sp/>*<sp/>axis[2]<sp/>)<sp/>&gt;<sp/>extents[2]<sp/>+<sp/>ld[2]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>cross<sp/>=<sp/>lineDir.Cross(<sp/>dir<sp/>);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>cross<sp/>*<sp/>axis[0]<sp/>)<sp/>&gt;<sp/>extents[1]<sp/>*<sp/>ld[2]<sp/>+<sp/>extents[2]<sp/>*<sp/>ld[1]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>cross<sp/>*<sp/>axis[1]<sp/>)<sp/>&gt;<sp/>extents[0]<sp/>*<sp/>ld[2]<sp/>+<sp/>extents[2]<sp/>*<sp/>ld[0]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>cross<sp/>*<sp/>axis[2]<sp/>)<sp/>&gt;<sp/>extents[0]<sp/>*<sp/>ld[1]<sp/>+<sp/>extents[1]<sp/>*<sp/>ld[0]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="577"><highlight class="comment">============</highlight></codeline>
<codeline lineno="578"><highlight class="comment">BoxPlaneClip</highlight></codeline>
<codeline lineno="579"><highlight class="comment">============</highlight></codeline>
<codeline lineno="580"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BoxPlaneClip(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>denom,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>numer,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;scale0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;scale1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>denom<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numer<sp/>&gt;<sp/>denom<sp/>*<sp/>scale1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numer<sp/>&gt;<sp/>denom<sp/>*<sp/>scale0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale0<sp/>=<sp/>numer<sp/>/<sp/>denom;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>denom<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numer<sp/>&gt;<sp/>denom<sp/>*<sp/>scale0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numer<sp/>&gt;<sp/>denom<sp/>*<sp/>scale1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale1<sp/>=<sp/>numer<sp/>/<sp/>denom;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>numer<sp/>&lt;=<sp/>0.0f<sp/>);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="606"><highlight class="comment">============</highlight></codeline>
<codeline lineno="607"><highlight class="comment">idBox::RayIntersection</highlight></codeline>
<codeline lineno="608"><highlight class="comment"></highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/><sp/>Returns<sp/>true<sp/>if<sp/>the<sp/>ray<sp/>intersects<sp/>the<sp/>box.</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/><sp/>The<sp/>ray<sp/>can<sp/>intersect<sp/>the<sp/>box<sp/>in<sp/>both<sp/>directions<sp/>from<sp/>the<sp/>start<sp/>point.</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/><sp/>If<sp/>start<sp/>is<sp/>inside<sp/>the<sp/>box<sp/>then<sp/>scale1<sp/>&lt;<sp/>0<sp/>and<sp/>scale2<sp/>&gt;<sp/>0.</highlight></codeline>
<codeline lineno="612"><highlight class="comment">============</highlight></codeline>
<codeline lineno="613"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idBox::RayIntersection(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;dir,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;scale1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;scale2<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>localStart,<sp/>localDir;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>localStart<sp/>=<sp/>(<sp/>start<sp/>-<sp/>center<sp/>)<sp/>*<sp/>axis.Transpose();</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>localDir<sp/>=<sp/>dir<sp/>*<sp/>axis.Transpose();</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>scale1<sp/>=<sp/>-idMath::INFINITY;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>scale2<sp/>=<sp/>idMath::INFINITY;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>BoxPlaneClip(<sp/><sp/>localDir.x,<sp/>-localStart.x<sp/>-<sp/>extents[0],<sp/>scale1,<sp/>scale2<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BoxPlaneClip(<sp/>-localDir.x,<sp/><sp/>localStart.x<sp/>-<sp/>extents[0],<sp/>scale1,<sp/>scale2<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BoxPlaneClip(<sp/><sp/>localDir.y,<sp/>-localStart.y<sp/>-<sp/>extents[1],<sp/>scale1,<sp/>scale2<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BoxPlaneClip(<sp/>-localDir.y,<sp/><sp/>localStart.y<sp/>-<sp/>extents[1],<sp/>scale1,<sp/>scale2<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BoxPlaneClip(<sp/><sp/>localDir.z,<sp/>-localStart.z<sp/>-<sp/>extents[2],<sp/>scale1,<sp/>scale2<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BoxPlaneClip(<sp/>-localDir.z,<sp/><sp/>localStart.z<sp/>-<sp/>extents[2],<sp/>scale1,<sp/>scale2<sp/>);</highlight></codeline>
<codeline lineno="628"><highlight class="normal">}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="631"><highlight class="comment">============</highlight></codeline>
<codeline lineno="632"><highlight class="comment">idBox::FromPoints</highlight></codeline>
<codeline lineno="633"><highlight class="comment"></highlight></codeline>
<codeline lineno="634"><highlight class="comment"><sp/><sp/>Tight<sp/>box<sp/>for<sp/>a<sp/>collection<sp/>of<sp/>points.</highlight></codeline>
<codeline lineno="635"><highlight class="comment">============</highlight></codeline>
<codeline lineno="636"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idBox::FromPoints(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>*points,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numPoints<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invNumPoints,<sp/>sumXX,<sp/>sumXY,<sp/>sumXZ,<sp/>sumYY,<sp/>sumYZ,<sp/>sumZZ;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>dir;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>bounds;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>eigenVectors;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>eigenValues;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>mean<sp/>of<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>center<sp/>=<sp/>points[0];</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>numPoints;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>center<sp/>+=<sp/>points[i];</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>invNumPoints<sp/>=<sp/>1.0f<sp/>/<sp/>numPoints;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>center<sp/>*=<sp/>invNumPoints;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>covariances<sp/>of<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>sumXX<sp/>=<sp/>0.0f;<sp/>sumXY<sp/>=<sp/>0.0f;<sp/>sumXZ<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>sumYY<sp/>=<sp/>0.0f;<sp/>sumYZ<sp/>=<sp/>0.0f;<sp/>sumZZ<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numPoints;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>points[i]<sp/>-<sp/>center;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sumXX<sp/>+=<sp/>dir.x<sp/>*<sp/>dir.x;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sumXY<sp/>+=<sp/>dir.x<sp/>*<sp/>dir.y;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sumXZ<sp/>+=<sp/>dir.x<sp/>*<sp/>dir.z;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sumYY<sp/>+=<sp/>dir.y<sp/>*<sp/>dir.y;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sumYZ<sp/>+=<sp/>dir.y<sp/>*<sp/>dir.z;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sumZZ<sp/>+=<sp/>dir.z<sp/>*<sp/>dir.z;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>sumXX<sp/>*=<sp/>invNumPoints;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>sumXY<sp/>*=<sp/>invNumPoints;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>sumXZ<sp/>*=<sp/>invNumPoints;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>sumYY<sp/>*=<sp/>invNumPoints;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>sumYZ<sp/>*=<sp/>invNumPoints;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>sumZZ<sp/>*=<sp/>invNumPoints;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>eigenvectors<sp/>for<sp/>covariance<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenValues.SetData(<sp/>3,<sp/>VECX_ALLOCA(<sp/>3<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenVectors.SetData(<sp/>3,<sp/>3,<sp/>MATX_ALLOCA(<sp/>3<sp/>*<sp/>3<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenVectors[0][0]<sp/>=<sp/>sumXX;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenVectors[0][1]<sp/>=<sp/>sumXY;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenVectors[0][2]<sp/>=<sp/>sumXZ;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenVectors[1][0]<sp/>=<sp/>sumXY;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenVectors[1][1]<sp/>=<sp/>sumYY;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenVectors[1][2]<sp/>=<sp/>sumYZ;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenVectors[2][0]<sp/>=<sp/>sumXZ;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenVectors[2][1]<sp/>=<sp/>sumYZ;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenVectors[2][2]<sp/>=<sp/>sumZZ;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenVectors.Eigen_SolveSymmetric(<sp/>eigenValues<sp/>);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenVectors.Eigen_SortIncreasing(<sp/>eigenValues<sp/>);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[0][0]<sp/>=<sp/>eigenVectors[0][0];</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[0][1]<sp/>=<sp/>eigenVectors[0][1];</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[0][2]<sp/>=<sp/>eigenVectors[0][2];</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[1][0]<sp/>=<sp/>eigenVectors[1][0];</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[1][1]<sp/>=<sp/>eigenVectors[1][1];</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[1][2]<sp/>=<sp/>eigenVectors[1][2];</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[2][0]<sp/>=<sp/>eigenVectors[2][0];</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[2][1]<sp/>=<sp/>eigenVectors[2][1];</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[2][2]<sp/>=<sp/>eigenVectors[2][2];</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>extents[0]<sp/>=<sp/>eigenValues[0];</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>extents[1]<sp/>=<sp/>eigenValues[0];</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>extents[2]<sp/>=<sp/>eigenValues[0];</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>refine<sp/>by<sp/>calculating<sp/>the<sp/>bounds<sp/>of<sp/>the<sp/>points<sp/>projected<sp/>onto<sp/>the<sp/>axis<sp/>and<sp/>adjusting<sp/>the<sp/>center<sp/>and<sp/>extents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds.Clear();</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numPoints;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bounds.AddPoint(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>points[i]<sp/>*<sp/>axis[0],<sp/>points[i]<sp/>*<sp/>axis[1],<sp/>points[i]<sp/>*<sp/>axis[2]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>center<sp/>=<sp/>(<sp/>bounds[0]<sp/>+<sp/>bounds[1]<sp/>)<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>extents<sp/>=<sp/>bounds[1]<sp/>-<sp/>center;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>center<sp/>*=<sp/>axis;</highlight></codeline>
<codeline lineno="710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="713"><highlight class="comment">============</highlight></codeline>
<codeline lineno="714"><highlight class="comment">idBox::FromPointTranslation</highlight></codeline>
<codeline lineno="715"><highlight class="comment"></highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/><sp/>Most<sp/>tight<sp/>box<sp/>for<sp/>the<sp/>translational<sp/>movement<sp/>of<sp/>the<sp/>given<sp/>point.</highlight></codeline>
<codeline lineno="717"><highlight class="comment">============</highlight></codeline>
<codeline lineno="718"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idBox::FromPointTranslation(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;point,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="724"><highlight class="comment">============</highlight></codeline>
<codeline lineno="725"><highlight class="comment">idBox::FromBoxTranslation</highlight></codeline>
<codeline lineno="726"><highlight class="comment"></highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/><sp/>Most<sp/>tight<sp/>box<sp/>for<sp/>the<sp/>translational<sp/>movement<sp/>of<sp/>the<sp/>given<sp/>box.</highlight></codeline>
<codeline lineno="728"><highlight class="comment">============</highlight></codeline>
<codeline lineno="729"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idBox::FromBoxTranslation(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_box" kindref="compound">idBox</ref><sp/>&amp;box,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="735"><highlight class="comment">============</highlight></codeline>
<codeline lineno="736"><highlight class="comment">idBox::FromPointRotation</highlight></codeline>
<codeline lineno="737"><highlight class="comment"></highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/><sp/>Most<sp/>tight<sp/>bounds<sp/>for<sp/>the<sp/>rotational<sp/>movement<sp/>of<sp/>the<sp/>given<sp/>point.</highlight></codeline>
<codeline lineno="739"><highlight class="comment">============</highlight></codeline>
<codeline lineno="740"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idBox::FromPointRotation(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;point,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal">}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="746"><highlight class="comment">============</highlight></codeline>
<codeline lineno="747"><highlight class="comment">idBox::FromBoxRotation</highlight></codeline>
<codeline lineno="748"><highlight class="comment"></highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/><sp/>Most<sp/>tight<sp/>box<sp/>for<sp/>the<sp/>rotational<sp/>movement<sp/>of<sp/>the<sp/>given<sp/>box.</highlight></codeline>
<codeline lineno="750"><highlight class="comment">============</highlight></codeline>
<codeline lineno="751"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idBox::FromBoxRotation(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_box" kindref="compound">idBox</ref><sp/>&amp;box,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="757"><highlight class="comment">============</highlight></codeline>
<codeline lineno="758"><highlight class="comment">idBox::ToPoints</highlight></codeline>
<codeline lineno="759"><highlight class="comment">============</highlight></codeline>
<codeline lineno="760"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idBox::ToPoints(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>points[8]<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>ax;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>temp[4];</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>ax[0]<sp/>=<sp/>extents[0]<sp/>*<sp/>axis[0];</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>ax[1]<sp/>=<sp/>extents[1]<sp/>*<sp/>axis[1];</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>ax[2]<sp/>=<sp/>extents[2]<sp/>*<sp/>axis[2];</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>temp[0]<sp/>=<sp/>center<sp/>-<sp/>ax[0];</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>temp[1]<sp/>=<sp/>center<sp/>+<sp/>ax[0];</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>temp[2]<sp/>=<sp/>ax[1]<sp/>-<sp/>ax[2];</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>temp[3]<sp/>=<sp/>ax[1]<sp/>+<sp/>ax[2];</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>points[0]<sp/>=<sp/>temp[0]<sp/>-<sp/>temp[3];</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>points[1]<sp/>=<sp/>temp[1]<sp/>-<sp/>temp[3];</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>points[2]<sp/>=<sp/>temp[1]<sp/>+<sp/>temp[2];</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>points[3]<sp/>=<sp/>temp[0]<sp/>+<sp/>temp[2];</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>points[4]<sp/>=<sp/>temp[0]<sp/>-<sp/>temp[2];</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>points[5]<sp/>=<sp/>temp[1]<sp/>-<sp/>temp[2];</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>points[6]<sp/>=<sp/>temp[1]<sp/>+<sp/>temp[3];</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>points[7]<sp/>=<sp/>temp[0]<sp/>+<sp/>temp[3];</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="783"><highlight class="comment">============</highlight></codeline>
<codeline lineno="784"><highlight class="comment">idBox::GetProjectionSilhouetteVerts</highlight></codeline>
<codeline lineno="785"><highlight class="comment">============</highlight></codeline>
<codeline lineno="786"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idBox::GetProjectionSilhouetteVerts(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;projectionOrigin,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>silVerts[6]<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>planeBits,<sp/>*index;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>points[8],<sp/>dir1,<sp/>dir2;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>ToPoints(<sp/>points<sp/>);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>dir1<sp/>=<sp/>points[0]<sp/>-<sp/>projectionOrigin;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>dir2<sp/>=<sp/>points[6]<sp/>-<sp/>projectionOrigin;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>dir1<sp/>*<sp/>axis[0];</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>planeBits<sp/>=<sp/>FLOATSIGNBITNOTSET(<sp/>f<sp/>);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>dir2<sp/>*<sp/>axis[0];</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>planeBits<sp/>|=<sp/>FLOATSIGNBITSET(<sp/>f<sp/>)<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>dir1<sp/>*<sp/>axis[1];</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>planeBits<sp/>|=<sp/>FLOATSIGNBITNOTSET(<sp/>f<sp/>)<sp/>&lt;&lt;<sp/>2;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>dir2<sp/>*<sp/>axis[1];</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>planeBits<sp/>|=<sp/>FLOATSIGNBITSET(<sp/>f<sp/>)<sp/>&lt;&lt;<sp/>3;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>dir1<sp/>*<sp/>axis[2];</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>planeBits<sp/>|=<sp/>FLOATSIGNBITNOTSET(<sp/>f<sp/>)<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>dir2<sp/>*<sp/>axis[2];</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>planeBits<sp/>|=<sp/>FLOATSIGNBITSET(<sp/>f<sp/>)<sp/>&lt;&lt;<sp/>5;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>boxPlaneBitsSilVerts[planeBits];</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>index[0];<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>silVerts[i]<sp/>=<sp/>points[index[i+1]];</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index[0];</highlight></codeline>
<codeline lineno="815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="818"><highlight class="comment">============</highlight></codeline>
<codeline lineno="819"><highlight class="comment">idBox::GetParallelProjectionSilhouetteVerts</highlight></codeline>
<codeline lineno="820"><highlight class="comment">============</highlight></codeline>
<codeline lineno="821"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idBox::GetParallelProjectionSilhouetteVerts(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;projectionDir,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>silVerts[6]<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>planeBits,<sp/>*index;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>points[8];</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>ToPoints(<sp/>points<sp/>);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>planeBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>projectionDir<sp/>*<sp/>axis[0];</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>FLOATNOTZERO(<sp/>f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planeBits<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>FLOATSIGNBITSET(<sp/>f<sp/>);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>projectionDir<sp/>*<sp/>axis[1];</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>FLOATNOTZERO(<sp/>f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planeBits<sp/>|=<sp/>4<sp/>&lt;&lt;<sp/>FLOATSIGNBITSET(<sp/>f<sp/>);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>projectionDir<sp/>*<sp/>axis[2];</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>FLOATNOTZERO(<sp/>f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planeBits<sp/>|=<sp/>16<sp/>&lt;&lt;<sp/>FLOATSIGNBITSET(<sp/>f<sp/>);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>boxPlaneBitsSilVerts[planeBits];</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>index[0];<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>silVerts[i]<sp/>=<sp/>points[index[i+1]];</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index[0];</highlight></codeline>
<codeline lineno="849"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Box.cpp"/>
  </compounddef>
</doxygen>
