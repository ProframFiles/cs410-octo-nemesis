<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_c_r_c32_8cpp" kind="file">
    <compoundname>CRC32.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../precompiled.h</includes>
      <sectiondef kind="define">
      <memberdef kind="define" id="_c_r_c32_8cpp_1a5ff91b2ac1daaff702f87e2d302e7b42" prot="public" static="no">
        <name>CRC32_INIT_VALUE</name>
        <initializer>0xffffffffL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/hashing/CRC32.cpp" line="10" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/hashing/CRC32.cpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_r_c32_8cpp_1a3ef7fe6a40b55c875319163c876a4d3c" prot="public" static="no">
        <name>CRC32_XOR_VALUE</name>
        <initializer>0xffffffffL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/hashing/CRC32.cpp" line="11" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/hashing/CRC32.cpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_c_r_c32_8cpp_1a3de4fd721f80b62112b2d18db576291a" prot="public" static="yes" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long crctable[256]</definition>
        <argsstring>[256]</argsstring>
        <name>crctable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/hashing/CRC32.cpp" line="68" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/hashing/CRC32.cpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_c_r_c32_8cpp_1a1491db56fa728d54950ad9ddd56f598c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRC32_InitChecksum</definition>
        <argsstring>(unsigned long &amp;crcvalue)</argsstring>
        <name>CRC32_InitChecksum</name>
        <param>
          <type>unsigned long &amp;</type>
          <declname>crcvalue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/hashing/CRC32.cpp" line="137" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/hashing/CRC32.cpp" bodystart="137" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="_c_r_c32_8cpp_1a77d10bbf5c095256eaaf6019a60971d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRC32_Update</definition>
        <argsstring>(unsigned long &amp;crcvalue, const byte data)</argsstring>
        <name>CRC32_Update</name>
        <param>
          <type>unsigned long &amp;</type>
          <declname>crcvalue</declname>
        </param>
        <param>
          <type>const byte</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/hashing/CRC32.cpp" line="141" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/hashing/CRC32.cpp" bodystart="141" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="_c_r_c32_8cpp_1a1eb3ab865906e0147984603b26973c9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRC32_UpdateChecksum</definition>
        <argsstring>(unsigned long &amp;crcvalue, const void *data, int length)</argsstring>
        <name>CRC32_UpdateChecksum</name>
        <param>
          <type>unsigned long &amp;</type>
          <declname>crcvalue</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/hashing/CRC32.cpp" line="145" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/hashing/CRC32.cpp" bodystart="145" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="_c_r_c32_8cpp_1acec13c541b11e09dee6b1662aca2c8e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CRC32_FinishChecksum</definition>
        <argsstring>(unsigned long &amp;crcvalue)</argsstring>
        <name>CRC32_FinishChecksum</name>
        <param>
          <type>unsigned long &amp;</type>
          <declname>crcvalue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/hashing/CRC32.cpp" line="156" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/hashing/CRC32.cpp" bodystart="156" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="_c_r_c32_8cpp_1acd3eb37a84f40807ad728532d3e56c98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long CRC32_BlockChecksum</definition>
        <argsstring>(const void *data, int length)</argsstring>
        <name>CRC32_BlockChecksum</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/hashing/CRC32.cpp" line="160" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/hashing/CRC32.cpp" bodystart="160" bodyend="167"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="4"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/>CRC-32</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/>Copyright<sp/>(C)<sp/>1995-1998<sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CRC32_INIT_VALUE<sp/><sp/><sp/><sp/>0xffffffffL</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CRC32_XOR_VALUE<sp/><sp/><sp/><sp/><sp/>0xffffffffL</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CREATE_CRC_TABLE</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>crctable[256];</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/>Generate<sp/>a<sp/>table<sp/>for<sp/>a<sp/>byte-wise<sp/>32-bit<sp/>CRC<sp/>calculation<sp/>on<sp/>the<sp/>polynomial:</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/>x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x^1+x^0.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"></highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/>Polynomials<sp/>over<sp/>GF(2)<sp/>are<sp/>represented<sp/>in<sp/>binary,<sp/>one<sp/>bit<sp/>per<sp/>coefficient,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/>with<sp/>the<sp/>lowest<sp/>powers<sp/>in<sp/>the<sp/>most<sp/>significant<sp/>bit.<sp/><sp/>Then<sp/>adding<sp/>polynomials</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/>is<sp/>just<sp/>exclusive-or,<sp/>and<sp/>multiplying<sp/>a<sp/>polynomial<sp/>by<sp/>x<sp/>is<sp/>a<sp/>right<sp/>shift<sp/>by</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/>one.<sp/><sp/>If<sp/>we<sp/>call<sp/>the<sp/>above<sp/>polynomial<sp/>p,<sp/>and<sp/>represent<sp/>a<sp/>byte<sp/>as<sp/>the</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/>polynomial<sp/>q,<sp/>also<sp/>with<sp/>the<sp/>lowest<sp/>power<sp/>in<sp/>the<sp/>most<sp/>significant<sp/>bit<sp/>(so<sp/>the</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/>byte<sp/>0xb1<sp/>is<sp/>the<sp/>polynomial<sp/>x^7+x^3+x^1+x^0),<sp/>then<sp/>the<sp/>CRC<sp/>is<sp/>(q*x^32)<sp/>mod<sp/>p,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/>where<sp/>a<sp/>mod<sp/>b<sp/>means<sp/>the<sp/>remainder<sp/>after<sp/>dividing<sp/>a<sp/>by<sp/>b.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/>This<sp/>calculation<sp/>is<sp/>done<sp/>using<sp/>the<sp/>shift-register<sp/>method<sp/>of<sp/>multiplying<sp/>and</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/>taking<sp/>the<sp/>remainder.<sp/><sp/>The<sp/>register<sp/>is<sp/>initialized<sp/>to<sp/>zero,<sp/>and<sp/>for<sp/>each</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/>incoming<sp/>bit,<sp/>x^32<sp/>is<sp/>added<sp/>mod<sp/>p<sp/>to<sp/>the<sp/>register<sp/>if<sp/>the<sp/>bit<sp/>is<sp/>a<sp/>one<sp/>(where</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/>x^32<sp/>mod<sp/>p<sp/>is<sp/>p+x^32<sp/>=<sp/>x^26+...+x^0),<sp/>and<sp/>the<sp/>register<sp/>is<sp/>multiplied<sp/>mod<sp/>p<sp/>by</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/>x<sp/>(which<sp/>is<sp/>shifting<sp/>right<sp/>by<sp/>one<sp/>and<sp/>adding<sp/>x^32<sp/>mod<sp/>p<sp/>if<sp/>the<sp/>bit<sp/>shifted</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/>out<sp/>is<sp/>a<sp/>one).<sp/><sp/>We<sp/>start<sp/>with<sp/>the<sp/>highest<sp/>power<sp/>(least<sp/>significant<sp/>bit)<sp/>of</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/>q<sp/>and<sp/>repeat<sp/>for<sp/>all<sp/>eight<sp/>bits<sp/>of<sp/>q.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/>The<sp/>table<sp/>is<sp/>simply<sp/>the<sp/>CRC<sp/>of<sp/>all<sp/>possible<sp/>eight<sp/>bit<sp/>values.<sp/>This<sp/>is<sp/>all</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/>the<sp/>information<sp/>needed<sp/>to<sp/>generate<sp/>CRC&apos;s<sp/>on<sp/>data<sp/>a<sp/>byte<sp/>at<sp/>a<sp/>time<sp/>for<sp/>all</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/>combinations<sp/>of<sp/>CRC<sp/>register<sp/>values<sp/>and<sp/>incoming<sp/>bytes.</highlight></codeline>
<codeline lineno="40"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>make_crc_table(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>c,<sp/><ref refid="structpoly" kindref="compound">poly</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>terms<sp/>of<sp/>polynomial<sp/>defining<sp/>this<sp/>crc<sp/>(except<sp/>x^32):<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>p[]<sp/>=<sp/>{0,1,2,4,5,7,8,10,11,12,16,22,23,26};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>make<sp/>exclusive-or<sp/>pattern<sp/>from<sp/>polynomial<sp/>(0xedb88320L)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>poly<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>p<sp/>)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>byte<sp/>);<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poly<sp/>|=<sp/>1L<sp/>&lt;&lt;<sp/>(<sp/>31<sp/>-<sp/>p[i]<sp/>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>long)i;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>8;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(<sp/>c<sp/>&amp;<sp/>1<sp/>)<sp/>?<sp/>poly<sp/>^<sp/>(<sp/>c<sp/>&gt;&gt;<sp/>1<sp/>)<sp/>:<sp/>(<sp/>c<sp/>&gt;&gt;<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crctable[i]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/>Table<sp/>of<sp/>CRC-32&apos;s<sp/>of<sp/>all<sp/>single-byte<sp/>values<sp/>(made<sp/>by<sp/>make_crc_table)</highlight></codeline>
<codeline lineno="67"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>crctable[256]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000000L,<sp/>0x77073096L,<sp/>0xee0e612cL,<sp/>0x990951baL,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>0x076dc419L,<sp/>0x706af48fL,<sp/>0xe963a535L,<sp/>0x9e6495a3L,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0edb8832L,<sp/>0x79dcb8a4L,<sp/>0xe0d5e91eL,<sp/>0x97d2d988L,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>0x09b64c2bL,<sp/>0x7eb17cbdL,<sp/>0xe7b82d07L,<sp/>0x90bf1d91L,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>0x1db71064L,<sp/>0x6ab020f2L,<sp/>0xf3b97148L,<sp/>0x84be41deL,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>0x1adad47dL,<sp/>0x6ddde4ebL,<sp/>0xf4d4b551L,<sp/>0x83d385c7L,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>0x136c9856L,<sp/>0x646ba8c0L,<sp/>0xfd62f97aL,<sp/>0x8a65c9ecL,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>0x14015c4fL,<sp/>0x63066cd9L,<sp/>0xfa0f3d63L,<sp/>0x8d080df5L,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>0x3b6e20c8L,<sp/>0x4c69105eL,<sp/>0xd56041e4L,<sp/>0xa2677172L,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>0x3c03e4d1L,<sp/>0x4b04d447L,<sp/>0xd20d85fdL,<sp/>0xa50ab56bL,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>0x35b5a8faL,<sp/>0x42b2986cL,<sp/>0xdbbbc9d6L,<sp/>0xacbcf940L,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>0x32d86ce3L,<sp/>0x45df5c75L,<sp/>0xdcd60dcfL,<sp/>0xabd13d59L,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>0x26d930acL,<sp/>0x51de003aL,<sp/>0xc8d75180L,<sp/>0xbfd06116L,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>0x21b4f4b5L,<sp/>0x56b3c423L,<sp/>0xcfba9599L,<sp/>0xb8bda50fL,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>0x2802b89eL,<sp/>0x5f058808L,<sp/>0xc60cd9b2L,<sp/>0xb10be924L,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>0x2f6f7c87L,<sp/>0x58684c11L,<sp/>0xc1611dabL,<sp/>0xb6662d3dL,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>0x76dc4190L,<sp/>0x01db7106L,<sp/>0x98d220bcL,<sp/>0xefd5102aL,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>0x71b18589L,<sp/>0x06b6b51fL,<sp/>0x9fbfe4a5L,<sp/>0xe8b8d433L,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>0x7807c9a2L,<sp/>0x0f00f934L,<sp/>0x9609a88eL,<sp/>0xe10e9818L,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>0x7f6a0dbbL,<sp/>0x086d3d2dL,<sp/>0x91646c97L,<sp/>0xe6635c01L,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>0x6b6b51f4L,<sp/>0x1c6c6162L,<sp/>0x856530d8L,<sp/>0xf262004eL,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>0x6c0695edL,<sp/>0x1b01a57bL,<sp/>0x8208f4c1L,<sp/>0xf50fc457L,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>0x65b0d9c6L,<sp/>0x12b7e950L,<sp/>0x8bbeb8eaL,<sp/>0xfcb9887cL,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>0x62dd1ddfL,<sp/>0x15da2d49L,<sp/>0x8cd37cf3L,<sp/>0xfbd44c65L,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>0x4db26158L,<sp/>0x3ab551ceL,<sp/>0xa3bc0074L,<sp/>0xd4bb30e2L,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>0x4adfa541L,<sp/>0x3dd895d7L,<sp/>0xa4d1c46dL,<sp/>0xd3d6f4fbL,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>0x4369e96aL,<sp/>0x346ed9fcL,<sp/>0xad678846L,<sp/>0xda60b8d0L,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>0x44042d73L,<sp/>0x33031de5L,<sp/>0xaa0a4c5fL,<sp/>0xdd0d7cc9L,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>0x5005713cL,<sp/>0x270241aaL,<sp/>0xbe0b1010L,<sp/>0xc90c2086L,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>0x5768b525L,<sp/>0x206f85b3L,<sp/>0xb966d409L,<sp/>0xce61e49fL,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>0x5edef90eL,<sp/>0x29d9c998L,<sp/>0xb0d09822L,<sp/>0xc7d7a8b4L,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>0x59b33d17L,<sp/>0x2eb40d81L,<sp/>0xb7bd5c3bL,<sp/>0xc0ba6cadL,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>0xedb88320L,<sp/>0x9abfb3b6L,<sp/>0x03b6e20cL,<sp/>0x74b1d29aL,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>0xead54739L,<sp/>0x9dd277afL,<sp/>0x04db2615L,<sp/>0x73dc1683L,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>0xe3630b12L,<sp/>0x94643b84L,<sp/>0x0d6d6a3eL,<sp/>0x7a6a5aa8L,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>0xe40ecf0bL,<sp/>0x9309ff9dL,<sp/>0x0a00ae27L,<sp/>0x7d079eb1L,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>0xf00f9344L,<sp/>0x8708a3d2L,<sp/>0x1e01f268L,<sp/>0x6906c2feL,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>0xf762575dL,<sp/>0x806567cbL,<sp/>0x196c3671L,<sp/>0x6e6b06e7L,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>0xfed41b76L,<sp/>0x89d32be0L,<sp/>0x10da7a5aL,<sp/>0x67dd4accL,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>0xf9b9df6fL,<sp/>0x8ebeeff9L,<sp/>0x17b7be43L,<sp/>0x60b08ed5L,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>0xd6d6a3e8L,<sp/>0xa1d1937eL,<sp/>0x38d8c2c4L,<sp/>0x4fdff252L,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>0xd1bb67f1L,<sp/>0xa6bc5767L,<sp/>0x3fb506ddL,<sp/>0x48b2364bL,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>0xd80d2bdaL,<sp/>0xaf0a1b4cL,<sp/>0x36034af6L,<sp/>0x41047a60L,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>0xdf60efc3L,<sp/>0xa867df55L,<sp/>0x316e8eefL,<sp/>0x4669be79L,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>0xcb61b38cL,<sp/>0xbc66831aL,<sp/>0x256fd2a0L,<sp/>0x5268e236L,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>0xcc0c7795L,<sp/>0xbb0b4703L,<sp/>0x220216b9L,<sp/>0x5505262fL,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>0xc5ba3bbeL,<sp/>0xb2bd0b28L,<sp/>0x2bb45a92L,<sp/>0x5cb36a04L,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>0xc2d7ffa7L,<sp/>0xb5d0cf31L,<sp/>0x2cd99e8bL,<sp/>0x5bdeae1dL,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>0x9b64c2b0L,<sp/>0xec63f226L,<sp/>0x756aa39cL,<sp/>0x026d930aL,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>0x9c0906a9L,<sp/>0xeb0e363fL,<sp/>0x72076785L,<sp/>0x05005713L,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>0x95bf4a82L,<sp/>0xe2b87a14L,<sp/>0x7bb12baeL,<sp/>0x0cb61b38L,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>0x92d28e9bL,<sp/>0xe5d5be0dL,<sp/>0x7cdcefb7L,<sp/>0x0bdbdf21L,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>0x86d3d2d4L,<sp/>0xf1d4e242L,<sp/>0x68ddb3f8L,<sp/>0x1fda836eL,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>0x81be16cdL,<sp/>0xf6b9265bL,<sp/>0x6fb077e1L,<sp/>0x18b74777L,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>0x88085ae6L,<sp/>0xff0f6a70L,<sp/>0x66063bcaL,<sp/>0x11010b5cL,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>0x8f659effL,<sp/>0xf862ae69L,<sp/>0x616bffd3L,<sp/>0x166ccf45L,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>0xa00ae278L,<sp/>0xd70dd2eeL,<sp/>0x4e048354L,<sp/>0x3903b3c2L,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>0xa7672661L,<sp/>0xd06016f7L,<sp/>0x4969474dL,<sp/>0x3e6e77dbL,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>0xaed16a4aL,<sp/>0xd9d65adcL,<sp/>0x40df0b66L,<sp/>0x37d83bf0L,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>0xa9bcae53L,<sp/>0xdebb9ec5L,<sp/>0x47b2cf7fL,<sp/>0x30b5ffe9L,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>0xbdbdf21cL,<sp/>0xcabac28aL,<sp/>0x53b39330L,<sp/>0x24b4a3a6L,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>0xbad03605L,<sp/>0xcdd70693L,<sp/>0x54de5729L,<sp/>0x23d967bfL,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>0xb3667a2eL,<sp/>0xc4614ab8L,<sp/>0x5d681b02L,<sp/>0x2a6f2b94L,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>0xb40bbe37L,<sp/>0xc30c8ea1L,<sp/>0x5a05df1bL,<sp/>0x2d02ef8dL</highlight></codeline>
<codeline lineno="133"><highlight class="normal">};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRC32_InitChecksum(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>&amp;crcvalue<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>crcvalue<sp/>=<sp/>CRC32_INIT_VALUE;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRC32_Update(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>&amp;crcvalue,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>data<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>crcvalue<sp/>=<sp/>crctable[<sp/>(<sp/>crcvalue<sp/>^<sp/>data<sp/>)<sp/>&amp;<sp/>0xff<sp/>]<sp/>^<sp/>(<sp/>crcvalue<sp/>&gt;&gt;<sp/>8<sp/>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRC32_UpdateChecksum(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>&amp;crcvalue,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>crc;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>data;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>crcvalue;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>length--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>crctable[<sp/>(<sp/>crc<sp/>^<sp/>(<sp/>*buf++<sp/>)<sp/>)<sp/>&amp;<sp/>0xff<sp/>]<sp/>^<sp/>(<sp/>crc<sp/>&gt;&gt;<sp/>8<sp/>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>crcvalue<sp/>=<sp/>crc;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CRC32_FinishChecksum(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>&amp;crcvalue<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>crcvalue<sp/>^=<sp/>CRC32_XOR_VALUE;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>CRC32_BlockChecksum(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>crc;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>CRC32_InitChecksum(<sp/>crc<sp/>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>CRC32_UpdateChecksum(<sp/>crc,<sp/>data,<sp/>length<sp/>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>CRC32_FinishChecksum(<sp/>crc<sp/>);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>crc;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/idlib/hashing/CRC32.cpp"/>
  </compounddef>
</doxygen>
