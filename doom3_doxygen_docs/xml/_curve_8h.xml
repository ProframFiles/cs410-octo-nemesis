<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_curve_8h" kind="file">
    <compoundname>Curve.h</compoundname>
    <includedby refid="_lib_8h" local="yes">E:/sources/3rd_party/DOOM/neo/idlib/Lib.h</includedby>
    <innerclass refid="classid_curve" prot="public">idCurve</innerclass>
    <innerclass refid="classid_curve___bezier" prot="public">idCurve_Bezier</innerclass>
    <innerclass refid="classid_curve___quadratic_bezier" prot="public">idCurve_QuadraticBezier</innerclass>
    <innerclass refid="classid_curve___cubic_bezier" prot="public">idCurve_CubicBezier</innerclass>
    <innerclass refid="classid_curve___spline" prot="public">idCurve_Spline</innerclass>
    <innerclass refid="classid_curve___natural_cubic_spline" prot="public">idCurve_NaturalCubicSpline</innerclass>
    <innerclass refid="classid_curve___catmull_rom_spline" prot="public">idCurve_CatmullRomSpline</innerclass>
    <innerclass refid="classid_curve___kochanek_bartels_spline" prot="public">idCurve_KochanekBartelsSpline</innerclass>
    <innerclass refid="classid_curve___b_spline" prot="public">idCurve_BSpline</innerclass>
    <innerclass refid="classid_curve___uniform_cubic_b_spline" prot="public">idCurve_UniformCubicBSpline</innerclass>
    <innerclass refid="classid_curve___non_uniform_b_spline" prot="public">idCurve_NonUniformBSpline</innerclass>
    <innerclass refid="classid_curve___n_u_r_b_s" prot="public">idCurve_NURBS</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__MATH_CURVE_H__</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__MATH_CURVE_H__</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="33"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="34"><highlight class="comment"></highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/>Curve<sp/>base<sp/>template.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="38"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="41" refid="classid_curve" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classid_curve" kindref="compound">idCurve</ref><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_curve" kindref="compound">idCurve</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="classid_curve" kindref="compound">idCurve</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>&amp;value<sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RemoveIndex(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)<sp/>{<sp/>values.RemoveIndex(index);<sp/>times.RemoveIndex(index);<sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Clear(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{<sp/>values.Clear();<sp/>times.Clear();<sp/>currentIndex<sp/>=<sp/>-1;<sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentFirstDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentSecondDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsDone(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetNumValues(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values.Num();<sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>&amp;value<sp/>)<sp/>{<sp/>values[index]<sp/>=<sp/>value;<sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values[index];<sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetValueAddress(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;values[index];<sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetTime(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>times[index];<sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLengthForTime(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetTimeForLength(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>epsilon<sp/>=<sp/>0.1f<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLengthBetweenKnots(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MakeUniform(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>totalTime<sp/>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetConstantSpeed(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>totalTime<sp/>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShiftTime(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deltaTime<sp/>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Translate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>&amp;translation<sp/>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_list" kindref="compound">idList&lt;float&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>times;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>knots</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_list" kindref="compound">idList&lt;type&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>knot<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentIndex;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cached<sp/>index<sp/>for<sp/>fast<sp/>lookup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changed;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>whenever<sp/>the<sp/>curve<sp/>changes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexForTime(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeForIndex(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueForIndex(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetSpeed(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RombergIntegral(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">};</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="88"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="89"><highlight class="comment">idCurve::idCurve</highlight></codeline>
<codeline lineno="90"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="91"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">ID_INLINE<sp/><ref refid="classid_curve" kindref="compound">idCurve&lt;type&gt;::idCurve</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>currentIndex<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="99"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="100"><highlight class="comment">idCurve::~idCurve</highlight></codeline>
<codeline lineno="101"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="102"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">ID_INLINE<sp/><ref refid="classid_curve" kindref="compound">idCurve&lt;type&gt;::~idCurve</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="108"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="109"><highlight class="comment">idCurve::AddValue</highlight></codeline>
<codeline lineno="110"><highlight class="comment"></highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/>add<sp/>a<sp/>timed/value<sp/>pair<sp/>to<sp/>the<sp/>spline</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/>returns<sp/>the<sp/>index<sp/>to<sp/>the<sp/>inserted<sp/>pair</highlight></codeline>
<codeline lineno="113"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="114"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classid_curve" kindref="compound">idCurve&lt;type&gt;::AddValue</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>&amp;value<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>IndexForTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>times.Insert(<sp/>time,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>values.Insert(<sp/>value,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="127"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="128"><highlight class="comment">idCurve::GetCurrentValue</highlight></codeline>
<codeline lineno="129"><highlight class="comment"></highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>value<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="131"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="132"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve" kindref="compound">idCurve&lt;type&gt;::GetCurrentValue</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>IndexForTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&gt;=<sp/>values.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values[values.Num()<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values[i];</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="146"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="147"><highlight class="comment">idCurve::GetCurrentFirstDerivative</highlight></codeline>
<codeline lineno="148"><highlight class="comment"></highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>first<sp/>derivative<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="150"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="151"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="153"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve" kindref="compound">idCurve&lt;type&gt;::GetCurrentFirstDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>values[0]<sp/>-<sp/>values[0]<sp/>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="158"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="159"><highlight class="comment">idCurve::GetCurrentSecondDerivative</highlight></codeline>
<codeline lineno="160"><highlight class="comment"></highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>second<sp/>derivative<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="162"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="163"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve" kindref="compound">idCurve&lt;type&gt;::GetCurrentSecondDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>values[0]<sp/>-<sp/>values[0]<sp/>);</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="170"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="171"><highlight class="comment">idCurve::IsDone</highlight></codeline>
<codeline lineno="172"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="173"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classid_curve" kindref="compound">idCurve&lt;type&gt;::IsDone</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>time<sp/>&gt;=<sp/>times[<sp/>times.Num()<sp/>-<sp/>1<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="180"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="181"><highlight class="comment">idCurve::GetSpeed</highlight></codeline>
<codeline lineno="182"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="183"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classid_curve" kindref="compound">idCurve&lt;type&gt;::GetSpeed</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>speed;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>value;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>GetCurrentFirstDerivative(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>speed<sp/>=<sp/>0.0f,<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>value.GetDimension();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>speed<sp/>+=<sp/>value[i]<sp/>*<sp/>value[i];</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idMath::Sqrt(<sp/>speed<sp/>);</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="198"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="199"><highlight class="comment">idCurve::RombergIntegral</highlight></codeline>
<codeline lineno="200"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="201"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="203"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classid_curve" kindref="compound">idCurve&lt;type&gt;::RombergIntegral</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k,<sp/>m,<sp/>n;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sum,<sp/>delta;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*temp[2];</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>temp[0]<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>order<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>temp[1]<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>order<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>t1<sp/>-<sp/>t0;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>temp[0][0]<sp/>=<sp/>0.5f<sp/>*<sp/>delta<sp/>*<sp/>(<sp/>GetSpeed(<sp/>t0<sp/>)<sp/>+<sp/>GetSpeed(<sp/>t1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>2,<sp/>m<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>order;<sp/>i++,<sp/>m<sp/>*=<sp/>2,<sp/>delta<sp/>*=<sp/>0.5f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>approximate<sp/>using<sp/>the<sp/>trapezoid<sp/>rule</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>1;<sp/>j<sp/>&lt;=<sp/>m;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>GetSpeed(<sp/>t0<sp/>+<sp/>delta<sp/>*<sp/>(<sp/>j<sp/>-<sp/>0.5f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Richardson<sp/>extrapolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp[1][0]<sp/>=<sp/>0.5f<sp/>*<sp/>(<sp/>temp[0][0]<sp/>+<sp/>delta<sp/>*<sp/>sum<sp/>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>1,<sp/>n<sp/>=<sp/>4;<sp/>k<sp/>&lt;<sp/>i;<sp/>k++,<sp/>n<sp/>*=<sp/>4<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp[1][k]<sp/>=<sp/>(<sp/>n<sp/>*<sp/>temp[1][k-1]<sp/>-<sp/>temp[0][k-1]<sp/>)<sp/>/<sp/>(<sp/>n<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp[0][j]<sp/>=<sp/>temp[1][j];</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>temp[0][order-1];</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="236"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="237"><highlight class="comment">idCurve::GetLengthBetweenKnots</highlight></codeline>
<codeline lineno="238"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="239"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="241"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classid_curve" kindref="compound">idCurve&lt;type&gt;::GetLengthBetweenKnots</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>i0;<sp/>i<sp/>&lt;<sp/>i1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>+=<sp/>RombergIntegral(<sp/>times[i],<sp/>times[i+1],<sp/>5<sp/>);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="250"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="251"><highlight class="comment">idCurve::GetLengthForTime</highlight></codeline>
<codeline lineno="252"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="253"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="255"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classid_curve" kindref="compound">idCurve&lt;type&gt;::GetLengthForTime</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>IndexForTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>index;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>+=<sp/>RombergIntegral(<sp/>times[i],<sp/>times[i+1],<sp/>5<sp/>);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>+=<sp/>RombergIntegral(<sp/>times[index],<sp/>time,<sp/>5<sp/>);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="266"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="267"><highlight class="comment">idCurve::GetTimeForLength</highlight></codeline>
<codeline lineno="268"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="269"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="271"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classid_curve" kindref="compound">idCurve&lt;type&gt;::GetTimeForLength</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>epsilon<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>index;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*accumLength,<sp/>totalLength,<sp/>len0,<sp/>len1,<sp/>t,<sp/>diff;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>length<sp/>&lt;=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>times[0];</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>accumLength<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>values.Num()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>totalLength<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>values.Num()<sp/>-<sp/>1;<sp/>index++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalLength<sp/>+=<sp/>GetLengthBetweenKnots(<sp/>index,<sp/>index<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accumLength[index]<sp/>=<sp/>totalLength;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>length<sp/>&lt;<sp/>accumLength[index]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>&gt;=<sp/>values.Num()<sp/>-<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>times[times.Num()<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len0<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len1<sp/>=<sp/>accumLength[0];</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len0<sp/>=<sp/>length<sp/>-<sp/>accumLength[index-1];</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len1<sp/>=<sp/>accumLength[index]<sp/>-<sp/>accumLength[index-1];</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>invert<sp/>the<sp/>arc<sp/>length<sp/>integral<sp/>using<sp/>Newton&apos;s<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(<sp/>times[index+1]<sp/>-<sp/>times[index]<sp/>)<sp/>*<sp/>len0<sp/>/<sp/>len1;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>32;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>RombergIntegral(<sp/>times[index],<sp/>times[index]<sp/>+<sp/>t,<sp/>5<sp/>)<sp/>-<sp/>len0;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>diff<sp/>)<sp/>&lt;=<sp/>epsilon<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>times[index]<sp/>+<sp/>t;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>-=<sp/>diff<sp/>/<sp/>GetSpeed(<sp/>times[index]<sp/>+<sp/>t<sp/>);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>times[index]<sp/>+<sp/>t;</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="314"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="315"><highlight class="comment">idCurve::MakeUniform</highlight></codeline>
<codeline lineno="316"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="317"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="319"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve" kindref="compound">idCurve&lt;type&gt;::MakeUniform</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>totalTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>n;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>times.Num()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>n;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>times[i]<sp/>=<sp/>i<sp/>*<sp/>totalTime<sp/>/<sp/>n;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="330"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="331"><highlight class="comment">idCurve::SetConstantSpeed</highlight></codeline>
<codeline lineno="332"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="333"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="335"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve" kindref="compound">idCurve&lt;type&gt;::SetConstantSpeed</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>totalTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*length,<sp/>totalLength,<sp/>scale,<sp/>t;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>values.Num()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>totalLength<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>values.Num()<sp/>-<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length[i]<sp/>=<sp/>GetLengthBetweenKnots(<sp/>i,<sp/>i<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalLength<sp/>+=<sp/>length[i];</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>totalTime<sp/>/<sp/>totalLength;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>t<sp/>=<sp/>0.0f,<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>times.Num()<sp/>-<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>times[i]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>+=<sp/>scale<sp/>*<sp/>length[i];</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>times[times.Num()<sp/>-<sp/>1]<sp/>=<sp/>totalTime;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="355"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="356"><highlight class="comment">idCurve::ShiftTime</highlight></codeline>
<codeline lineno="357"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="358"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="360"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve" kindref="compound">idCurve&lt;type&gt;::ShiftTime</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deltaTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>times.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>times[i]<sp/>+=<sp/>deltaTime;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="368"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="369"><highlight class="comment">idCurve::Translate</highlight></codeline>
<codeline lineno="370"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="371"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="373"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve" kindref="compound">idCurve&lt;type&gt;::Translate</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>&amp;translation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>values.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values[i]<sp/>+=<sp/>translation;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>changed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="381"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="382"><highlight class="comment">idCurve::IndexForTime</highlight></codeline>
<codeline lineno="383"><highlight class="comment"></highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/>find<sp/>the<sp/>index<sp/>for<sp/>the<sp/>first<sp/>time<sp/>greater<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="385"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="386"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="388"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classid_curve" kindref="compound">idCurve&lt;type&gt;::IndexForTime</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>mid,<sp/>offset,<sp/>res;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>currentIndex<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>currentIndex<sp/>&lt;=<sp/>times.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>the<sp/>cached<sp/>index<sp/>if<sp/>it<sp/>is<sp/>still<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>currentIndex<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>time<sp/>&lt;=<sp/>times[currentIndex]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>currentIndex;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>currentIndex<sp/>==<sp/>times.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>time<sp/>&gt;<sp/>times[currentIndex-1]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>currentIndex;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>time<sp/>&gt;<sp/>times[currentIndex-1]<sp/>&amp;&amp;<sp/>time<sp/>&lt;=<sp/>times[currentIndex]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>currentIndex;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>time<sp/>&gt;<sp/>times[currentIndex]<sp/>&amp;&amp;<sp/>(<sp/>currentIndex+1<sp/>==<sp/>times.Num()<sp/>||<sp/>time<sp/>&lt;=<sp/>times[currentIndex+1]<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>the<sp/>next<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentIndex++;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>currentIndex;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>binary<sp/>search<sp/>to<sp/>find<sp/>the<sp/>index<sp/>for<sp/>the<sp/>given<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>times.Num();</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>mid<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>mid<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid<sp/>=<sp/>len<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>time<sp/>==<sp/>times[offset+mid]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offset+mid;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>time<sp/>&gt;<sp/>times[offset+mid]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>+=<sp/>mid;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>-=<sp/>mid;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>-=<sp/>mid;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>currentIndex<sp/>=<sp/>offset+res;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>currentIndex;</highlight></codeline>
<codeline lineno="430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="433"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="434"><highlight class="comment">idCurve::ValueForIndex</highlight></codeline>
<codeline lineno="435"><highlight class="comment"></highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>value<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="437"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="438"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="440"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve" kindref="compound">idCurve&lt;type&gt;::ValueForIndex</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>values.Num()-1;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values[0]<sp/>+<sp/>index<sp/>*<sp/>(<sp/>values[1]<sp/>-<sp/>values[0]<sp/>);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>&gt;<sp/>n<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values[n]<sp/>+<sp/>(<sp/>index<sp/>-<sp/>n<sp/>)<sp/>*<sp/>(<sp/>values[n]<sp/>-<sp/>values[n-1]<sp/>);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values[index];</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="452"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="453"><highlight class="comment">idCurve::TimeForIndex</highlight></codeline>
<codeline lineno="454"><highlight class="comment"></highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>value<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="456"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="457"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="459"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classid_curve" kindref="compound">idCurve&lt;type&gt;::TimeForIndex</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>times.Num()-1;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>times[0]<sp/>+<sp/>index<sp/>*<sp/>(<sp/>times[1]<sp/>-<sp/>times[0]<sp/>);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>&gt;<sp/>n<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>times[n]<sp/>+<sp/>(<sp/>index<sp/>-<sp/>n<sp/>)<sp/>*<sp/>(<sp/>times[n]<sp/>-<sp/>times[n-1]<sp/>);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>times[index];</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="472"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="473"><highlight class="comment"></highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/><sp/><sp/><sp/>Bezier<sp/>Curve<sp/>template.</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>degree<sp/>of<sp/>the<sp/>polynomial<sp/>equals<sp/>the<sp/>number<sp/>of<sp/>knots<sp/>minus<sp/>one.</highlight></codeline>
<codeline lineno="476"><highlight class="comment"></highlight></codeline>
<codeline lineno="477"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="478"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="481" refid="classid_curve___bezier" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classid_curve___bezier" kindref="compound">idCurve_Bezier</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classid_curve" kindref="compound">idCurve</ref>&lt;type&gt;<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_curve___bezier" kindref="compound">idCurve_Bezier</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentFirstDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentSecondDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Basis(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BasisFirstDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BasisSecondDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="493"><highlight class="normal">};</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="496"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="497"><highlight class="comment">idCurve_Bezier::idCurve_Bezier</highlight></codeline>
<codeline lineno="498"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="499"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="501"><highlight class="normal">ID_INLINE<sp/><ref refid="classid_curve___bezier" kindref="compound">idCurve_Bezier&lt;type&gt;::idCurve_Bezier</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="505"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="506"><highlight class="comment">idCurve_Bezier::GetCurrentValue</highlight></codeline>
<codeline lineno="507"><highlight class="comment"></highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>value<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="509"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="510"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="512"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___bezier" kindref="compound">idCurve_Bezier&lt;type&gt;::GetCurrentValue</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>v;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>this-&gt;values.Num()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>Basis(<sp/>this-&gt;values.Num(),<sp/>time,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>bvals[0]<sp/>*<sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>this-&gt;values.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>bvals[i]<sp/>*<sp/>this-&gt;values[i];</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="528"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="529"><highlight class="comment">idCurve_Bezier::GetCurrentFirstDerivative</highlight></codeline>
<codeline lineno="530"><highlight class="comment"></highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>first<sp/>derivative<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="532"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="533"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="535"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___bezier" kindref="compound">idCurve_Bezier&lt;type&gt;::GetCurrentFirstDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals,<sp/>d;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>v;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>this-&gt;values.Num()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>BasisFirstDerivative(<sp/>this-&gt;values.Num(),<sp/>time,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>bvals[0]<sp/>*<sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>this-&gt;values.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>bvals[i]<sp/>*<sp/>this-&gt;values[i];</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(<sp/>this-&gt;times[this-&gt;times.Num()-1]<sp/>-<sp/>this-&gt;times[0]<sp/>);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>(this-&gt;values.Num()-1)<sp/>/<sp/>d<sp/>)<sp/>*<sp/>v;</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="552"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="553"><highlight class="comment">idCurve_Bezier::GetCurrentSecondDerivative</highlight></codeline>
<codeline lineno="554"><highlight class="comment"></highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>second<sp/>derivative<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="556"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="557"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="559"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___bezier" kindref="compound">idCurve_Bezier&lt;type&gt;::GetCurrentSecondDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals,<sp/>d;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>v;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>this-&gt;values.Num()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>BasisSecondDerivative(<sp/>this-&gt;values.Num(),<sp/>time,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>bvals[0]<sp/>*<sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>this-&gt;values.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>bvals[i]<sp/>*<sp/>this-&gt;values[i];</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(<sp/>this-&gt;times[this-&gt;times.Num()-1]<sp/>-<sp/>this-&gt;times[0]<sp/>);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>(this-&gt;values.Num()-2)<sp/>*<sp/>(this-&gt;values.Num()-1)<sp/>/<sp/>(<sp/>d<sp/>*<sp/>d<sp/>)<sp/>)<sp/>*<sp/>v;</highlight></codeline>
<codeline lineno="573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="576"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="577"><highlight class="comment">idCurve_Bezier::Basis</highlight></codeline>
<codeline lineno="578"><highlight class="comment"></highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/><sp/>bezier<sp/>basis<sp/>functions</highlight></codeline>
<codeline lineno="580"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="581"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="583"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___bezier" kindref="compound">idCurve_Bezier&lt;type&gt;::Basis</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>d;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*c,<sp/>c1,<sp/>c2,<sp/>s,<sp/>o,<sp/>ps,<sp/>po;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[0]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>order<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>&lt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>(d+1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(float)<sp/>(<sp/>t<sp/>-<sp/>this-&gt;times[0]<sp/>)<sp/>/<sp/>(<sp/>this-&gt;times[this-&gt;times.Num()-1]<sp/>-<sp/>this-&gt;times[0]<sp/>);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>o<sp/>=<sp/>1.0f<sp/>-<sp/>s;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>ps<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>po<sp/>=<sp/>o;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>d;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c[i]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>d;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c[i-1]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>c[i];</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c[i]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i+1;<sp/>j<sp/>&lt;=<sp/>d;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2<sp/>=<sp/>c[j];</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c[j]<sp/>=<sp/>c1<sp/>+<sp/>c[j-1];</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>c2;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bvals[i]<sp/>=<sp/>c[d]<sp/>*<sp/>ps;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ps<sp/>*=<sp/>s;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>d-1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bvals[i]<sp/>*=<sp/>po;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>po<sp/>*=<sp/>o;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[d]<sp/>=<sp/>ps;</highlight></codeline>
<codeline lineno="619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="622"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="623"><highlight class="comment">idCurve_Bezier::BasisFirstDerivative</highlight></codeline>
<codeline lineno="624"><highlight class="comment"></highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/>first<sp/>derivative<sp/>of<sp/>bezier<sp/>basis<sp/>functions</highlight></codeline>
<codeline lineno="626"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="627"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="629"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___bezier" kindref="compound">idCurve_Bezier&lt;type&gt;::BasisFirstDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>Basis(<sp/>order-1,<sp/>t,<sp/>bvals+1<sp/>);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>order-1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bvals[i]<sp/>-=<sp/>bvals[i+1];</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="640"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="641"><highlight class="comment">idCurve_Bezier::BasisSecondDerivative</highlight></codeline>
<codeline lineno="642"><highlight class="comment"></highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/><sp/>second<sp/>derivative<sp/>of<sp/>bezier<sp/>basis<sp/>functions</highlight></codeline>
<codeline lineno="644"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="645"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="647"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___bezier" kindref="compound">idCurve_Bezier&lt;type&gt;::BasisSecondDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>BasisFirstDerivative(<sp/>order-1,<sp/>t,<sp/>bvals+1<sp/>);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>order-1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bvals[i]<sp/>-=<sp/>bvals[i+1];</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="659"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="660"><highlight class="comment"></highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/><sp/><sp/><sp/>Quadratic<sp/>Bezier<sp/>Curve<sp/>template.</highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/><sp/><sp/><sp/>Should<sp/>always<sp/>have<sp/>exactly<sp/>three<sp/>knots.</highlight></codeline>
<codeline lineno="663"><highlight class="comment"></highlight></codeline>
<codeline lineno="664"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="665"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="668" refid="classid_curve___quadratic_bezier" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classid_curve___quadratic_bezier" kindref="compound">idCurve_QuadraticBezier</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classid_curve" kindref="compound">idCurve</ref>&lt;type&gt;<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_curve___quadratic_bezier" kindref="compound">idCurve_QuadraticBezier</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentFirstDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentSecondDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Basis(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BasisFirstDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BasisSecondDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="681"><highlight class="normal">};</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="684"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="685"><highlight class="comment">idCurve_QuadraticBezier::idCurve_QuadraticBezier</highlight></codeline>
<codeline lineno="686"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="687"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="689"><highlight class="normal">ID_INLINE<sp/><ref refid="classid_curve___quadratic_bezier" kindref="compound">idCurve_QuadraticBezier&lt;type&gt;::idCurve_QuadraticBezier</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="694"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="695"><highlight class="comment">idCurve_QuadraticBezier::GetCurrentValue</highlight></codeline>
<codeline lineno="696"><highlight class="comment"></highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>value<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="698"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="699"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="701"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___quadratic_bezier" kindref="compound">idCurve_QuadraticBezier&lt;type&gt;::GetCurrentValue</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bvals[3];</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>this-&gt;values.Num()<sp/>==<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>Basis(<sp/>time,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>bvals[0]<sp/>*<sp/>this-&gt;values[0]<sp/>+<sp/>bvals[1]<sp/>*<sp/>this-&gt;values[1]<sp/>+<sp/>bvals[2]<sp/>*<sp/>this-&gt;values[2]<sp/>);</highlight></codeline>
<codeline lineno="706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="709"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="710"><highlight class="comment">idCurve_QuadraticBezier::GetCurrentFirstDerivative</highlight></codeline>
<codeline lineno="711"><highlight class="comment"></highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>first<sp/>derivative<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="713"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="714"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="716"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___quadratic_bezier" kindref="compound">idCurve_QuadraticBezier&lt;type&gt;::GetCurrentFirstDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bvals[3],<sp/>d;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>this-&gt;values.Num()<sp/>==<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>BasisFirstDerivative(<sp/>time,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(<sp/>this-&gt;times[2]<sp/>-<sp/>this-&gt;times[0]<sp/>);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>bvals[0]<sp/>*<sp/>this-&gt;values[0]<sp/>+<sp/>bvals[1]<sp/>*<sp/>this-&gt;values[1]<sp/>+<sp/>bvals[2]<sp/>*<sp/>this-&gt;values[2]<sp/>)<sp/>/<sp/>d;</highlight></codeline>
<codeline lineno="722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="725"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="726"><highlight class="comment">idCurve_QuadraticBezier::GetCurrentSecondDerivative</highlight></codeline>
<codeline lineno="727"><highlight class="comment"></highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>second<sp/>derivative<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="729"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="730"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="732"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___quadratic_bezier" kindref="compound">idCurve_QuadraticBezier&lt;type&gt;::GetCurrentSecondDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bvals[3],<sp/>d;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>this-&gt;values.Num()<sp/>==<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>BasisSecondDerivative(<sp/>time,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(<sp/>this-&gt;times[2]<sp/>-<sp/>this-&gt;times[0]<sp/>);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>bvals[0]<sp/>*<sp/>this-&gt;values[0]<sp/>+<sp/>bvals[1]<sp/>*<sp/>this-&gt;values[1]<sp/>+<sp/>bvals[2]<sp/>*<sp/>this-&gt;values[2]<sp/>)<sp/>/<sp/>(<sp/>d<sp/>*<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="741"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="742"><highlight class="comment">idCurve_QuadraticBezier::Basis</highlight></codeline>
<codeline lineno="743"><highlight class="comment"></highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/><sp/>quadratic<sp/>bezier<sp/>basis<sp/>functions</highlight></codeline>
<codeline lineno="745"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="746"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="748"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___quadratic_bezier" kindref="compound">idCurve_QuadraticBezier&lt;type&gt;::Basis</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s1<sp/>=<sp/>(float)<sp/>(<sp/>t<sp/>-<sp/>this-&gt;times[0]<sp/>)<sp/>/<sp/>(<sp/>this-&gt;times[2]<sp/>-<sp/>this-&gt;times[0]<sp/>);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s2<sp/>=<sp/>s1<sp/>*<sp/>s1;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[0]<sp/>=<sp/>s2<sp/>-<sp/>2.0f<sp/>*<sp/>s1<sp/>+<sp/>1.0f;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[1]<sp/>=<sp/>-2.0f<sp/>*<sp/>s2<sp/>+<sp/>2.0f<sp/>*<sp/>s1;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[2]<sp/>=<sp/>s2;</highlight></codeline>
<codeline lineno="754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="757"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="758"><highlight class="comment">idCurve_QuadraticBezier::BasisFirstDerivative</highlight></codeline>
<codeline lineno="759"><highlight class="comment"></highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/><sp/>first<sp/>derivative<sp/>of<sp/>quadratic<sp/>bezier<sp/>basis<sp/>functions</highlight></codeline>
<codeline lineno="761"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="762"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="764"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___quadratic_bezier" kindref="compound">idCurve_QuadraticBezier&lt;type&gt;::BasisFirstDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s1<sp/>=<sp/>(float)<sp/>(<sp/>t<sp/>-<sp/>this-&gt;times[0]<sp/>)<sp/>/<sp/>(<sp/>this-&gt;times[2]<sp/>-<sp/>this-&gt;times[0]<sp/>);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[0]<sp/>=<sp/>2.0f<sp/>*<sp/>s1<sp/>-<sp/>2.0f;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[1]<sp/>=<sp/>-4.0f<sp/>*<sp/>s1<sp/>+<sp/>2.0f;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[2]<sp/>=<sp/>2.0f<sp/>*<sp/>s1;</highlight></codeline>
<codeline lineno="769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="772"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="773"><highlight class="comment">idCurve_QuadraticBezier::BasisSecondDerivative</highlight></codeline>
<codeline lineno="774"><highlight class="comment"></highlight></codeline>
<codeline lineno="775"><highlight class="comment"><sp/><sp/>second<sp/>derivative<sp/>of<sp/>quadratic<sp/>bezier<sp/>basis<sp/>functions</highlight></codeline>
<codeline lineno="776"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="777"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="779"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___quadratic_bezier" kindref="compound">idCurve_QuadraticBezier&lt;type&gt;::BasisSecondDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s1<sp/>=<sp/>(float)<sp/>(<sp/>t<sp/>-<sp/>this-&gt;times[0]<sp/>)<sp/>/<sp/>(<sp/>this-&gt;times[2]<sp/>-<sp/>this-&gt;times[0]<sp/>);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[0]<sp/>=<sp/>2.0f;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[1]<sp/>=<sp/>-4.0f;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[2]<sp/>=<sp/>2.0f;</highlight></codeline>
<codeline lineno="784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="788"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="789"><highlight class="comment"></highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/><sp/><sp/><sp/>Cubic<sp/>Bezier<sp/>Curve<sp/>template.</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/><sp/><sp/><sp/>Should<sp/>always<sp/>have<sp/>exactly<sp/>four<sp/>knots.</highlight></codeline>
<codeline lineno="792"><highlight class="comment"></highlight></codeline>
<codeline lineno="793"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="794"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="797" refid="classid_curve___cubic_bezier" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classid_curve___cubic_bezier" kindref="compound">idCurve_CubicBezier</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classid_curve" kindref="compound">idCurve</ref>&lt;type&gt;<sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_curve___cubic_bezier" kindref="compound">idCurve_CubicBezier</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentFirstDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentSecondDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Basis(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BasisFirstDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BasisSecondDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="810"><highlight class="normal">};</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="813"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="814"><highlight class="comment">idCurve_CubicBezier::idCurve_CubicBezier</highlight></codeline>
<codeline lineno="815"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="816"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="818"><highlight class="normal">ID_INLINE<sp/><ref refid="classid_curve___cubic_bezier" kindref="compound">idCurve_CubicBezier&lt;type&gt;::idCurve_CubicBezier</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal">}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="823"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="824"><highlight class="comment">idCurve_CubicBezier::GetCurrentValue</highlight></codeline>
<codeline lineno="825"><highlight class="comment"></highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>value<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="827"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="828"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="830"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___cubic_bezier" kindref="compound">idCurve_CubicBezier&lt;type&gt;::GetCurrentValue</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bvals[4];</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>this-&gt;values.Num()<sp/>==<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>Basis(<sp/>time,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>bvals[0]<sp/>*<sp/>this-&gt;values[0]<sp/>+<sp/>bvals[1]<sp/>*<sp/>this-&gt;values[1]<sp/>+<sp/>bvals[2]<sp/>*<sp/>this-&gt;values[2]<sp/>+<sp/>bvals[3]<sp/>*<sp/>this-&gt;values[3]<sp/>);</highlight></codeline>
<codeline lineno="835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="838"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="839"><highlight class="comment">idCurve_CubicBezier::GetCurrentFirstDerivative</highlight></codeline>
<codeline lineno="840"><highlight class="comment"></highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>first<sp/>derivative<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="842"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="843"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="845"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___cubic_bezier" kindref="compound">idCurve_CubicBezier&lt;type&gt;::GetCurrentFirstDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bvals[4],<sp/>d;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>this-&gt;values.Num()<sp/>==<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>BasisFirstDerivative(<sp/>time,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(<sp/>this-&gt;times[3]<sp/>-<sp/>this-&gt;times[0]<sp/>);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>bvals[0]<sp/>*<sp/>this-&gt;values[0]<sp/>+<sp/>bvals[1]<sp/>*<sp/>this-&gt;values[1]<sp/>+<sp/>bvals[2]<sp/>*<sp/>this-&gt;values[2]<sp/>+<sp/>bvals[3]<sp/>*<sp/>this-&gt;values[3]<sp/>)<sp/>/<sp/>d;</highlight></codeline>
<codeline lineno="851"><highlight class="normal">}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="854"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="855"><highlight class="comment">idCurve_CubicBezier::GetCurrentSecondDerivative</highlight></codeline>
<codeline lineno="856"><highlight class="comment"></highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>second<sp/>derivative<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="858"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="859"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="861"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___cubic_bezier" kindref="compound">idCurve_CubicBezier&lt;type&gt;::GetCurrentSecondDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bvals[4],<sp/>d;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>this-&gt;values.Num()<sp/>==<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>BasisSecondDerivative(<sp/>time,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(<sp/>this-&gt;times[3]<sp/>-<sp/>this-&gt;times[0]<sp/>);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>bvals[0]<sp/>*<sp/>this-&gt;values[0]<sp/>+<sp/>bvals[1]<sp/>*<sp/>this-&gt;values[1]<sp/>+<sp/>bvals[2]<sp/>*<sp/>this-&gt;values[2]<sp/>+<sp/>bvals[3]<sp/>*<sp/>this-&gt;values[3]<sp/>)<sp/>/<sp/>(<sp/>d<sp/>*<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="867"><highlight class="normal">}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="870"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="871"><highlight class="comment">idCurve_CubicBezier::Basis</highlight></codeline>
<codeline lineno="872"><highlight class="comment"></highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/><sp/>cubic<sp/>bezier<sp/>basis<sp/>functions</highlight></codeline>
<codeline lineno="874"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="875"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="877"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___cubic_bezier" kindref="compound">idCurve_CubicBezier&lt;type&gt;::Basis</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s1<sp/>=<sp/>(float)<sp/>(<sp/>t<sp/>-<sp/>this-&gt;times[0]<sp/>)<sp/>/<sp/>(<sp/>this-&gt;times[3]<sp/>-<sp/>this-&gt;times[0]<sp/>);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s2<sp/>=<sp/>s1<sp/>*<sp/>s1;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s3<sp/>=<sp/>s2<sp/>*<sp/>s1;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[0]<sp/>=<sp/>-s3<sp/>+<sp/>3.0f<sp/>*<sp/>s2<sp/>-<sp/>3.0f<sp/>*<sp/>s1<sp/>+<sp/>1.0f;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[1]<sp/>=<sp/>3.0f<sp/>*<sp/>s3<sp/>-<sp/>6.0f<sp/>*<sp/>s2<sp/>+<sp/>3.0f<sp/>*<sp/>s1;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[2]<sp/>=<sp/>-3.0f<sp/>*<sp/>s3<sp/>+<sp/>3.0f<sp/>*<sp/>s2;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[3]<sp/>=<sp/>s3;</highlight></codeline>
<codeline lineno="885"><highlight class="normal">}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="888"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="889"><highlight class="comment">idCurve_CubicBezier::BasisFirstDerivative</highlight></codeline>
<codeline lineno="890"><highlight class="comment"></highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/><sp/>first<sp/>derivative<sp/>of<sp/>cubic<sp/>bezier<sp/>basis<sp/>functions</highlight></codeline>
<codeline lineno="892"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="893"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="895"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___cubic_bezier" kindref="compound">idCurve_CubicBezier&lt;type&gt;::BasisFirstDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s1<sp/>=<sp/>(float)<sp/>(<sp/>t<sp/>-<sp/>this-&gt;times[0]<sp/>)<sp/>/<sp/>(<sp/>this-&gt;times[3]<sp/>-<sp/>this-&gt;times[0]<sp/>);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s2<sp/>=<sp/>s1<sp/>*<sp/>s1;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[0]<sp/>=<sp/>-3.0f<sp/>*<sp/>s2<sp/>+<sp/>6.0f<sp/>*<sp/>s1<sp/>-<sp/>3.0f;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[1]<sp/>=<sp/>9.0f<sp/>*<sp/>s2<sp/>-<sp/>12.0f<sp/>*<sp/>s1<sp/>+<sp/>3.0f;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[2]<sp/>=<sp/>-9.0f<sp/>*<sp/>s2<sp/>+<sp/>6.0f<sp/>*<sp/>s1;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[3]<sp/>=<sp/>3.0f<sp/>*<sp/>s2;</highlight></codeline>
<codeline lineno="902"><highlight class="normal">}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="905"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="906"><highlight class="comment">idCurve_CubicBezier::BasisSecondDerivative</highlight></codeline>
<codeline lineno="907"><highlight class="comment"></highlight></codeline>
<codeline lineno="908"><highlight class="comment"><sp/><sp/>second<sp/>derivative<sp/>of<sp/>cubic<sp/>bezier<sp/>basis<sp/>functions</highlight></codeline>
<codeline lineno="909"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="910"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="912"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___cubic_bezier" kindref="compound">idCurve_CubicBezier&lt;type&gt;::BasisSecondDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s1<sp/>=<sp/>(float)<sp/>(<sp/>t<sp/>-<sp/>this-&gt;times[0]<sp/>)<sp/>/<sp/>(<sp/>this-&gt;times[3]<sp/>-<sp/>this-&gt;times[0]<sp/>);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[0]<sp/>=<sp/>-6.0f<sp/>*<sp/>s1<sp/>+<sp/>6.0f;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[1]<sp/>=<sp/>18.0f<sp/>*<sp/>s1<sp/>-<sp/>12.0f;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[2]<sp/>=<sp/>-18.0f<sp/>*<sp/>s1<sp/>+<sp/>6.0f;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[3]<sp/>=<sp/>6.0f<sp/>*<sp/>s1;</highlight></codeline>
<codeline lineno="918"><highlight class="normal">}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="922"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="923"><highlight class="comment"></highlight></codeline>
<codeline lineno="924"><highlight class="comment"><sp/><sp/><sp/><sp/>Spline<sp/>base<sp/>template.</highlight></codeline>
<codeline lineno="925"><highlight class="comment"></highlight></codeline>
<codeline lineno="926"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="927"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="930" refid="classid_curve___spline" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classid_curve___spline" kindref="compound">idCurve_Spline</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classid_curve" kindref="compound">idCurve</ref>&lt;type&gt;<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundary_t<sp/>{<sp/>BT_FREE,<sp/>BT_CLAMPED,<sp/>BT_CLOSED<sp/>};</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_curve___spline" kindref="compound">idCurve_Spline</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsDone(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetBoundaryType(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boundary_t<sp/>bt<sp/>)<sp/>{<sp/>boundaryType<sp/>=<sp/>bt;<sp/>this-&gt;changed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>boundary_t<sp/><sp/>GetBoundaryType(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boundaryType;<sp/>}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetCloseTime(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>)<sp/>{<sp/>closeTime<sp/>=<sp/>t;<sp/>this-&gt;changed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCloseTime(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boundaryType<sp/>==<sp/>BT_CLOSED<sp/>?<sp/>closeTime<sp/>:<sp/>0.0f;<sp/>}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>boundary_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundaryType;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>closeTime;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueForIndex(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeForIndex(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ClampedTime(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="952"><highlight class="normal">};</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="955"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="956"><highlight class="comment">idCurve_Spline::idCurve_Spline</highlight></codeline>
<codeline lineno="957"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="958"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="960"><highlight class="normal">ID_INLINE<sp/><ref refid="classid_curve___spline" kindref="compound">idCurve_Spline&lt;type&gt;::idCurve_Spline</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>boundaryType<sp/>=<sp/>BT_FREE;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>closeTime<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="966"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="967"><highlight class="comment">idCurve_Spline::ValueForIndex</highlight></codeline>
<codeline lineno="968"><highlight class="comment"></highlight></codeline>
<codeline lineno="969"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>value<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="970"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="971"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="973"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___spline" kindref="compound">idCurve_Spline&lt;type&gt;::ValueForIndex</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>this-&gt;values.Num()-1;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>boundaryType<sp/>==<sp/>BT_CLOSED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;values[<sp/>this-&gt;values.Num()<sp/>+<sp/>index<sp/>%<sp/>this-&gt;values.Num()<sp/>];</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;values[0]<sp/>+<sp/>index<sp/>*<sp/>(<sp/>this-&gt;values[1]<sp/>-<sp/>this-&gt;values[0]<sp/>);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>&gt;<sp/>n<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>boundaryType<sp/>==<sp/>BT_CLOSED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;values[<sp/>index<sp/>%<sp/>this-&gt;values.Num()<sp/>];</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;values[n]<sp/>+<sp/>(<sp/>index<sp/>-<sp/>n<sp/>)<sp/>*<sp/>(<sp/>this-&gt;values[n]<sp/>-<sp/>this-&gt;values[n-1]<sp/>);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;values[index];</highlight></codeline>
<codeline lineno="993"><highlight class="normal">}</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="996"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="997"><highlight class="comment">idCurve_Spline::TimeForIndex</highlight></codeline>
<codeline lineno="998"><highlight class="comment"></highlight></codeline>
<codeline lineno="999"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>value<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="1000"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1001"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classid_curve___spline" kindref="compound">idCurve_Spline&lt;type&gt;::TimeForIndex</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>this-&gt;times.Num()-1;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>boundaryType<sp/>==<sp/>BT_CLOSED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>/<sp/>this-&gt;times.Num()<sp/>)<sp/>*<sp/>(<sp/>this-&gt;times[n]<sp/>+<sp/>closeTime<sp/>)<sp/>-<sp/>(<sp/>this-&gt;times[n]<sp/>+<sp/>closeTime<sp/>-<sp/>this-&gt;times[this-&gt;times.Num()<sp/>+<sp/>index<sp/>%<sp/>this-&gt;times.Num()]<sp/>);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;times[0]<sp/>+<sp/>index<sp/>*<sp/>(<sp/>this-&gt;times[1]<sp/>-<sp/>this-&gt;times[0]<sp/>);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>&gt;<sp/>n<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>boundaryType<sp/>==<sp/>BT_CLOSED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>/<sp/>this-&gt;times.Num()<sp/>)<sp/>*<sp/>(<sp/>this-&gt;times[n]<sp/>+<sp/>closeTime<sp/>)<sp/>+<sp/>this-&gt;times[index<sp/>%<sp/>this-&gt;times.Num()];</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;times[n]<sp/>+<sp/>(<sp/>index<sp/>-<sp/>n<sp/>)<sp/>*<sp/>(<sp/>this-&gt;times[n]<sp/>-<sp/>this-&gt;times[n-1]<sp/>);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;times[index];</highlight></codeline>
<codeline lineno="1023"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1026"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1027"><highlight class="comment">idCurve_Spline::ClampedTime</highlight></codeline>
<codeline lineno="1028"><highlight class="comment"></highlight></codeline>
<codeline lineno="1029"><highlight class="comment"><sp/><sp/>return<sp/>the<sp/>clamped<sp/>time<sp/>based<sp/>on<sp/>the<sp/>boundary<sp/>type</highlight></codeline>
<codeline lineno="1030"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1031"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classid_curve___spline" kindref="compound">idCurve_Spline&lt;type&gt;::ClampedTime</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>boundaryType<sp/>==<sp/>BT_CLAMPED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>t<sp/>&lt;<sp/>this-&gt;times[0]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;times[0];</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>t<sp/>&gt;=<sp/>this-&gt;times[this-&gt;times.Num()-1]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;times[this-&gt;times.Num()-1];</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1046"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1047"><highlight class="comment">idCurve_Spline::IsDone</highlight></codeline>
<codeline lineno="1048"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1049"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classid_curve___spline" kindref="compound">idCurve_Spline&lt;type&gt;::IsDone</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>boundaryType<sp/>!=<sp/>BT_CLOSED<sp/>&amp;&amp;<sp/>time<sp/>&gt;=<sp/>this-&gt;times[<sp/>this-&gt;times.Num()<sp/>-<sp/>1<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1057"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="1058"><highlight class="comment"></highlight></codeline>
<codeline lineno="1059"><highlight class="comment"><sp/><sp/><sp/><sp/>Cubic<sp/>Interpolating<sp/>Spline<sp/>template.</highlight></codeline>
<codeline lineno="1060"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>curve<sp/>goes<sp/>through<sp/>all<sp/>the<sp/>knots.</highlight></codeline>
<codeline lineno="1061"><highlight class="comment"></highlight></codeline>
<codeline lineno="1062"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="1063"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1066" refid="classid_curve___natural_cubic_spline" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classid_curve___natural_cubic_spline" kindref="compound">idCurve_NaturalCubicSpline</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classid_curve___spline" kindref="compound">idCurve_Spline</ref>&lt;type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_curve___natural_cubic_spline" kindref="compound">idCurve_NaturalCubicSpline</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Clear(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{<sp/><ref refid="classid_curve___spline" kindref="compound">idCurve_Spline&lt;type&gt;::Clear</ref>();<sp/>this-&gt;values.Clear();<sp/>b.Clear();<sp/>c.Clear();<sp/>d.Clear();<sp/>}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentFirstDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentSecondDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/><ref refid="classid_list" kindref="compound">idList&lt;type&gt;</ref>b;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/><ref refid="classid_list" kindref="compound">idList&lt;type&gt;</ref>c;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/><ref refid="classid_list" kindref="compound">idList&lt;type&gt;</ref>d;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Setup(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetupFree(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetupClamped(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetupClosed(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1088"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1089"><highlight class="comment">idCurve_NaturalCubicSpline::idCurve_NaturalCubicSpline</highlight></codeline>
<codeline lineno="1090"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1091"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal">ID_INLINE<sp/><ref refid="classid_curve___natural_cubic_spline" kindref="compound">idCurve_NaturalCubicSpline&lt;type&gt;::idCurve_NaturalCubicSpline</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1097"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1098"><highlight class="comment">idCurve_NaturalCubicSpline::GetCurrentValue</highlight></codeline>
<codeline lineno="1099"><highlight class="comment"></highlight></codeline>
<codeline lineno="1100"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>value<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="1101"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1102"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___natural_cubic_spline" kindref="compound">idCurve_NaturalCubicSpline&lt;type&gt;::GetCurrentValue</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>clampedTime<sp/>=<sp/>this-&gt;ClampedTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>clampedTime<sp/>);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>time<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>Setup();</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;values[i]<sp/>+<sp/>s<sp/>*<sp/>(<sp/>b[i]<sp/>+<sp/>s<sp/>*<sp/>(<sp/>c[i]<sp/>+<sp/>s<sp/>*<sp/>d[i]<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1113"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1114"><highlight class="comment">idCurve_NaturalCubicSpline::GetCurrentFirstDerivative</highlight></codeline>
<codeline lineno="1115"><highlight class="comment"></highlight></codeline>
<codeline lineno="1116"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>first<sp/>derivative<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="1117"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1118"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___natural_cubic_spline" kindref="compound">idCurve_NaturalCubicSpline&lt;type&gt;::GetCurrentFirstDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>clampedTime<sp/>=<sp/>this-&gt;ClampedTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>clampedTime<sp/>);</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>time<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/>Setup();</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>b[i]<sp/>+<sp/>s<sp/>*<sp/>(<sp/>2.0f<sp/>*<sp/>c[i]<sp/>+<sp/>3.0f<sp/>*<sp/>s<sp/>*<sp/>d[i]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1129"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1130"><highlight class="comment">idCurve_NaturalCubicSpline::GetCurrentSecondDerivative</highlight></codeline>
<codeline lineno="1131"><highlight class="comment"></highlight></codeline>
<codeline lineno="1132"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>second<sp/>derivative<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="1133"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1134"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___natural_cubic_spline" kindref="compound">idCurve_NaturalCubicSpline&lt;type&gt;::GetCurrentSecondDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>clampedTime<sp/>=<sp/>this-&gt;ClampedTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>clampedTime<sp/>);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>time<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>Setup();</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>2.0f<sp/>*<sp/>c[i]<sp/>+<sp/>6.0f<sp/>*<sp/>s<sp/>*<sp/>d[i]<sp/>);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1145"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1146"><highlight class="comment">idCurve_NaturalCubicSpline::Setup</highlight></codeline>
<codeline lineno="1147"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1148"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___natural_cubic_spline" kindref="compound">idCurve_NaturalCubicSpline&lt;type&gt;::Setup</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;changed<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>this-&gt;boundaryType<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classid_curve___spline" kindref="compound">idCurve_Spline&lt;type&gt;::BT_FREE</ref>:<sp/><sp/><sp/><sp/><sp/>SetupFree();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classid_curve___spline" kindref="compound">idCurve_Spline&lt;type&gt;::BT_CLAMPED</ref>:<sp/><sp/>SetupClamped();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classid_curve___spline" kindref="compound">idCurve_Spline&lt;type&gt;::BT_CLOSED</ref>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetupClosed();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;changed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1162"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1163"><highlight class="comment">idCurve_NaturalCubicSpline::SetupFree</highlight></codeline>
<codeline lineno="1164"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1165"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___natural_cubic_spline" kindref="compound">idCurve_NaturalCubicSpline&lt;type&gt;::SetupFree</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>inv;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*d0,<sp/>*d1,<sp/>*beta,<sp/>*gamma;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>*alpha,<sp/>*delta;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>d0<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>(<sp/>this-&gt;values.Num()<sp/>-<sp/>1<sp/>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>(<sp/>this-&gt;values.Num()<sp/>-<sp/>1<sp/>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>(type<sp/>*)<sp/>_alloca16(<sp/>(<sp/>this-&gt;values.Num()<sp/>-<sp/>1<sp/>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>type<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>beta<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>this-&gt;values.Num()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>gamma<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>(<sp/>this-&gt;values.Num()<sp/>-<sp/>1<sp/>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>(type<sp/>*)<sp/>_alloca16(<sp/>this-&gt;values.Num()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>type<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>this-&gt;values.Num()<sp/>-<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d0[i]<sp/>=<sp/>this-&gt;times[i+1]<sp/>-<sp/>this-&gt;times[i];</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>this-&gt;values.Num()<sp/>-<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1[i]<sp/>=<sp/>this-&gt;times[i+1]<sp/>-<sp/>this-&gt;times[i-1];</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>this-&gt;values.Num()<sp/>-<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>sum<sp/>=<sp/>3.0f<sp/>*<sp/>(<sp/>d0[i-1]<sp/>*<sp/>this-&gt;values[i+1]<sp/>-<sp/>d1[i]<sp/>*<sp/>this-&gt;values[i]<sp/>+<sp/>d0[i]<sp/>*<sp/>this-&gt;values[i-1]<sp/>);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inv<sp/>=<sp/>1.0f<sp/>/<sp/>(<sp/>d0[i-1]<sp/>*<sp/>d0[i]<sp/>);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha[i]<sp/>=<sp/>inv<sp/>*<sp/>sum;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>beta[0]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>gamma[0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>delta[0]<sp/>=<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>this-&gt;values.Num()<sp/>-<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beta[i]<sp/>=<sp/>2.0f<sp/>*<sp/>d1[i]<sp/>-<sp/>d0[i-1]<sp/>*<sp/>gamma[i-1];</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inv<sp/>=<sp/>1.0f<sp/>/<sp/>beta[i];</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma[i]<sp/>=<sp/>inv<sp/>*<sp/>d0[i];</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta[i]<sp/>=<sp/>inv<sp/>*<sp/>(<sp/>alpha[i]<sp/>-<sp/>d0[i-1]<sp/>*<sp/>delta[i-1]<sp/>);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>beta[this-&gt;values.Num()<sp/>-<sp/>1]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>delta[this-&gt;values.Num()<sp/>-<sp/>1]<sp/>=<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>b.AssureSize(<sp/>this-&gt;values.Num()<sp/>);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>c.AssureSize(<sp/>this-&gt;values.Num()<sp/>);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>d.AssureSize(<sp/>this-&gt;values.Num()<sp/>);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>c[this-&gt;values.Num()<sp/>-<sp/>1]<sp/>=<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>this-&gt;values.Num()<sp/>-<sp/>2;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c[i]<sp/>=<sp/>delta[i]<sp/>-<sp/>gamma[i]<sp/>*<sp/>c[i+1];</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inv<sp/>=<sp/>1.0f<sp/>/<sp/>d0[i];</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[i]<sp/>=<sp/>inv<sp/>*<sp/>(<sp/>this-&gt;values[i+1]<sp/>-<sp/>this-&gt;values[i]<sp/>)<sp/>-<sp/>(<sp/>1.0f<sp/>/<sp/>3.0f<sp/>)<sp/>*<sp/>d0[i]<sp/>*<sp/>(<sp/>c[i+1]<sp/>+<sp/>2.0f<sp/>*<sp/>c[i]<sp/>);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[i]<sp/>=<sp/>(<sp/>1.0f<sp/>/<sp/>3.0f<sp/>)<sp/>*<sp/>inv<sp/>*<sp/>(<sp/>c[i+1]<sp/>-<sp/>c[i]<sp/>);</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1222"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1223"><highlight class="comment">idCurve_NaturalCubicSpline::SetupClamped</highlight></codeline>
<codeline lineno="1224"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1225"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___natural_cubic_spline" kindref="compound">idCurve_NaturalCubicSpline&lt;type&gt;::SetupClamped</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>inv;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*d0,<sp/>*d1,<sp/>*beta,<sp/>*gamma;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>*alpha,<sp/>*delta;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>d0<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>(<sp/>this-&gt;values.Num()<sp/>-<sp/>1<sp/>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>(<sp/>this-&gt;values.Num()<sp/>-<sp/>1<sp/>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>(type<sp/>*)<sp/>_alloca16(<sp/>(<sp/>this-&gt;values.Num()<sp/>-<sp/>1<sp/>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>type<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>beta<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>this-&gt;values.Num()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>gamma<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>(<sp/>this-&gt;values.Num()<sp/>-<sp/>1<sp/>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>(type<sp/>*)<sp/>_alloca16(<sp/>this-&gt;values.Num()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>type<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>this-&gt;values.Num()<sp/>-<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d0[i]<sp/>=<sp/>this-&gt;times[i+1]<sp/>-<sp/>this-&gt;times[i];</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>this-&gt;values.Num()<sp/>-<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1[i]<sp/>=<sp/>this-&gt;times[i+1]<sp/>-<sp/>this-&gt;times[i-1];</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/>inv<sp/>=<sp/>1.0f<sp/>/<sp/>d0[0];</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha[0]<sp/>=<sp/>3.0f<sp/>*<sp/>(<sp/>inv<sp/>-<sp/>1.0f<sp/>)<sp/>*<sp/>(<sp/>this-&gt;values[1]<sp/>-<sp/>this-&gt;values[0]<sp/>);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/>inv<sp/>=<sp/>1.0f<sp/>/<sp/>d0[this-&gt;values.Num()<sp/>-<sp/>2];</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha[this-&gt;values.Num()<sp/>-<sp/>1]<sp/>=<sp/>3.0f<sp/>*<sp/>(<sp/>1.0f<sp/>-<sp/>inv<sp/>)<sp/>*<sp/>(<sp/>this-&gt;values[this-&gt;values.Num()<sp/>-<sp/>1]<sp/>-<sp/>this-&gt;values[this-&gt;values.Num()<sp/>-<sp/>2]<sp/>);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>this-&gt;values.Num()<sp/>-<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>sum<sp/>=<sp/>3.0f<sp/>*<sp/>(<sp/>d0[i-1]<sp/>*<sp/>this-&gt;values[i+1]<sp/>-<sp/>d1[i]<sp/>*<sp/>this-&gt;values[i]<sp/>+<sp/>d0[i]<sp/>*<sp/>this-&gt;values[i-1]<sp/>);</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inv<sp/>=<sp/>1.0f<sp/>/<sp/>(<sp/>d0[i-1]<sp/>*<sp/>d0[i]<sp/>);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha[i]<sp/>=<sp/>inv<sp/>*<sp/>sum;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>beta[0]<sp/>=<sp/>2.0f<sp/>*<sp/>d0[0];</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>gamma[0]<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>inv<sp/>=<sp/>1.0f<sp/>/<sp/>beta[0];</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>delta[0]<sp/>=<sp/>inv<sp/>*<sp/>alpha[0];</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>this-&gt;values.Num()<sp/>-<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beta[i]<sp/>=<sp/>2.0f<sp/>*<sp/>d1[i]<sp/>-<sp/>d0[i-1]<sp/>*<sp/>gamma[i-1];</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inv<sp/>=<sp/>1.0f<sp/>/<sp/>beta[i];</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma[i]<sp/>=<sp/>inv<sp/>*<sp/>d0[i];</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta[i]<sp/>=<sp/>inv<sp/>*<sp/>(<sp/>alpha[i]<sp/>-<sp/>d0[i-1]<sp/>*<sp/>delta[i-1]<sp/>);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>beta[this-&gt;values.Num()<sp/>-<sp/>1]<sp/>=<sp/>d0[this-&gt;values.Num()<sp/>-<sp/>2]<sp/>*<sp/>(<sp/>2.0f<sp/>-<sp/>gamma[this-&gt;values.Num()<sp/>-<sp/>2]<sp/>);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/>inv<sp/>=<sp/>1.0f<sp/>/<sp/>beta[this-&gt;values.Num()<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/>delta[this-&gt;values.Num()<sp/>-<sp/>1]<sp/>=<sp/>inv<sp/>*<sp/>(<sp/>alpha[this-&gt;values.Num()<sp/>-<sp/>1]<sp/>-<sp/>d0[this-&gt;values.Num()<sp/>-<sp/>2]<sp/>*<sp/>delta[this-&gt;values.Num()<sp/>-<sp/>2]<sp/>);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>b.AssureSize(<sp/>this-&gt;values.Num()<sp/>);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>c.AssureSize(<sp/>this-&gt;values.Num()<sp/>);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>d.AssureSize(<sp/>this-&gt;values.Num()<sp/>);</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/>c[this-&gt;values.Num()<sp/>-<sp/>1]<sp/>=<sp/>delta[this-&gt;values.Num()<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>this-&gt;values.Num()<sp/>-<sp/>2;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c[i]<sp/>=<sp/>delta[i]<sp/>-<sp/>gamma[i]<sp/>*<sp/>c[i+1];</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inv<sp/>=<sp/>1.0f<sp/>/<sp/>d0[i];</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[i]<sp/>=<sp/>inv<sp/>*<sp/>(<sp/>this-&gt;values[i+1]<sp/>-<sp/>this-&gt;values[i]<sp/>)<sp/>-<sp/>(<sp/>1.0f<sp/>/<sp/>3.0f<sp/>)<sp/>*<sp/>d0[i]*<sp/>(<sp/>c[i+1]<sp/>+<sp/>2.0f<sp/>*<sp/>c[i]<sp/>);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[i]<sp/>=<sp/>(<sp/>1.0f<sp/>/<sp/>3.0f<sp/>)<sp/>*<sp/>inv<sp/>*<sp/>(<sp/>c[i+1]<sp/>-<sp/>c[i]<sp/>);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1290"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1291"><highlight class="comment">idCurve_NaturalCubicSpline::SetupClosed</highlight></codeline>
<codeline lineno="1292"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1293"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___natural_cubic_spline" kindref="compound">idCurve_NaturalCubicSpline&lt;type&gt;::SetupClosed</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>c0,<sp/>c1;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*d0;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>mat;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>x;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>d0<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>(<sp/>this-&gt;values.Num()<sp/>-<sp/>1<sp/>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>x.SetData(<sp/>this-&gt;values.Num(),<sp/>VECX_ALLOCA(<sp/>this-&gt;values.Num()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/>mat.SetData(<sp/>this-&gt;values.Num(),<sp/>this-&gt;values.Num(),<sp/>MATX_ALLOCA(<sp/>this-&gt;values.Num()<sp/>*<sp/>this-&gt;values.Num()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/>b.AssureSize(<sp/>this-&gt;values.Num()<sp/>);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>c.AssureSize(<sp/>this-&gt;values.Num()<sp/>);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>d.AssureSize(<sp/>this-&gt;values.Num()<sp/>);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>this-&gt;values.Num()<sp/>-<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d0[i]<sp/>=<sp/>this-&gt;times[i+1]<sp/>-<sp/>this-&gt;times[i];</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matrix<sp/>of<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][0]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][this-&gt;values.Num()<sp/>-<sp/>1]<sp/>=<sp/>-1.0f;</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>this-&gt;values.Num()<sp/>-<sp/>2;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[i][i-1]<sp/>=<sp/>d0[i-1];</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[i][i<sp/><sp/>]<sp/>=<sp/>2.0f<sp/>*<sp/>(<sp/>d0[i-1]<sp/>+<sp/>d0[i]<sp/>);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[i][i+1]<sp/>=<sp/>d0[i];</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[this-&gt;values.Num()<sp/>-<sp/>1][this-&gt;values.Num()<sp/>-<sp/>2]<sp/>=<sp/>d0[this-&gt;values.Num()<sp/>-<sp/>2];</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[this-&gt;values.Num()<sp/>-<sp/>1][0]<sp/>=<sp/>2.0f<sp/>*<sp/>(<sp/>d0[this-&gt;values.Num()<sp/>-<sp/>2]<sp/>+<sp/>d0[0]<sp/>);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[this-&gt;values.Num()<sp/>-<sp/>1][1]<sp/>=<sp/>d0[0];</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>right-hand<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/>c[0].Zero();</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>this-&gt;values.Num()<sp/>-<sp/>2;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c0<sp/>=<sp/>1.0f<sp/>/<sp/>d0[i];</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>1.0f<sp/>/<sp/>d0[i-1];</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c[i]<sp/>=<sp/>3.0f<sp/>*<sp/>(<sp/>c0<sp/>*<sp/>(<sp/>this-&gt;values[i<sp/>+<sp/>1]<sp/>-<sp/>this-&gt;values[i]<sp/>)<sp/>-<sp/>c1<sp/>*<sp/>(<sp/>this-&gt;values[i]<sp/>-<sp/>this-&gt;values[i<sp/>-<sp/>1]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>c0<sp/>=<sp/>1.0f<sp/>/<sp/>d0[0];</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>1.0f<sp/>/<sp/>d0[this-&gt;values.Num()<sp/>-<sp/>2];</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/>c[this-&gt;values.Num()<sp/>-<sp/>1]<sp/>=<sp/>3.0f<sp/>*<sp/>(<sp/>c0<sp/>*<sp/>(<sp/>this-&gt;values[1]<sp/>-<sp/>this-&gt;values[0]<sp/>)<sp/>-<sp/>c1<sp/>*<sp/>(<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[this-&gt;values.Num()<sp/>-<sp/>2]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>system<sp/>for<sp/>each<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>mat.LU_Factor(<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>this-&gt;values[0].GetDimension();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>this-&gt;values.Num();<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[j]<sp/>=<sp/>c[j][i];</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat.LU_Solve(<sp/>x,<sp/>x,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>this-&gt;values.Num();<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c[j][i]<sp/>=<sp/>x[j];</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>this-&gt;values.Num()<sp/>-<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c0<sp/>=<sp/>1.0f<sp/>/<sp/>d0[i];</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[i]<sp/>=<sp/>c0<sp/>*<sp/>(<sp/>this-&gt;values[i<sp/>+<sp/>1]<sp/>-<sp/>this-&gt;values[i]<sp/>)<sp/>-<sp/>(<sp/>1.0f<sp/>/<sp/>3.0f<sp/>)<sp/>*<sp/>(<sp/>c[i+1]<sp/>+<sp/>2.0f<sp/>*<sp/>c[i]<sp/>)<sp/>*<sp/>d0[i];</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[i]<sp/>=<sp/>(<sp/>1.0f<sp/>/<sp/>3.0f<sp/>)<sp/>*<sp/>c0<sp/>*<sp/>(<sp/>c[i<sp/>+<sp/>1]<sp/>-<sp/>c[i]<sp/>);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1358"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="1359"><highlight class="comment"></highlight></codeline>
<codeline lineno="1360"><highlight class="comment"><sp/><sp/><sp/><sp/>Uniform<sp/>Cubic<sp/>Interpolating<sp/>Spline<sp/>template.</highlight></codeline>
<codeline lineno="1361"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>curve<sp/>goes<sp/>through<sp/>all<sp/>the<sp/>knots.</highlight></codeline>
<codeline lineno="1362"><highlight class="comment"></highlight></codeline>
<codeline lineno="1363"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="1364"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1367" refid="classid_curve___catmull_rom_spline" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classid_curve___catmull_rom_spline" kindref="compound">idCurve_CatmullRomSpline</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classid_curve___spline" kindref="compound">idCurve_Spline</ref>&lt;type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_curve___catmull_rom_spline" kindref="compound">idCurve_CatmullRomSpline</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentFirstDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentSecondDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Basis(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BasisFirstDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BasisSecondDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1383"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1384"><highlight class="comment">idCurve_CatmullRomSpline::idCurve_CatmullRomSpline</highlight></codeline>
<codeline lineno="1385"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1386"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal">ID_INLINE<sp/><ref refid="classid_curve___catmull_rom_spline" kindref="compound">idCurve_CatmullRomSpline&lt;type&gt;::idCurve_CatmullRomSpline</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1392"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1393"><highlight class="comment">idCurve_CatmullRomSpline::GetCurrentValue</highlight></codeline>
<codeline lineno="1394"><highlight class="comment"></highlight></codeline>
<codeline lineno="1395"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>value<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="1396"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1397"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___catmull_rom_spline" kindref="compound">idCurve_CatmullRomSpline&lt;type&gt;::GetCurrentValue</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bvals[4],<sp/>clampedTime;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>v;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;times.Num()<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/>clampedTime<sp/>=<sp/>this-&gt;ClampedTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>clampedTime<sp/>);</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>Basis(<sp/>i-1,<sp/>clampedTime,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>i<sp/>+<sp/>j<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>bvals[j]<sp/>*<sp/>this-&gt;ValueForIndex(<sp/>k<sp/>);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1420"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1421"><highlight class="comment">idCurve_CatmullRomSpline::GetCurrentFirstDerivative</highlight></codeline>
<codeline lineno="1422"><highlight class="comment"></highlight></codeline>
<codeline lineno="1423"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>first<sp/>derivative<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="1424"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1425"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___catmull_rom_spline" kindref="compound">idCurve_CatmullRomSpline&lt;type&gt;::GetCurrentFirstDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bvals[4],<sp/>d,<sp/>clampedTime;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>v;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;times.Num()<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0]<sp/>);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/>clampedTime<sp/>=<sp/>this-&gt;ClampedTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>clampedTime<sp/>);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>BasisFirstDerivative(<sp/>i-1,<sp/>clampedTime,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>i<sp/>+<sp/>j<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>bvals[j]<sp/>*<sp/>this-&gt;ValueForIndex(<sp/>k<sp/>);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>i<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>i-1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v<sp/>/<sp/>d;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1449"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1450"><highlight class="comment">idCurve_CatmullRomSpline::GetCurrentSecondDerivative</highlight></codeline>
<codeline lineno="1451"><highlight class="comment"></highlight></codeline>
<codeline lineno="1452"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>second<sp/>derivative<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="1453"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1454"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1456"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___catmull_rom_spline" kindref="compound">idCurve_CatmullRomSpline&lt;type&gt;::GetCurrentSecondDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bvals[4],<sp/>d,<sp/>clampedTime;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>v;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;times.Num()<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0]<sp/>);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>clampedTime<sp/>=<sp/>this-&gt;ClampedTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>clampedTime<sp/>);</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>BasisSecondDerivative(<sp/>i-1,<sp/>clampedTime,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>i<sp/>+<sp/>j<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>bvals[j]<sp/>*<sp/>this-&gt;ValueForIndex(<sp/>k<sp/>);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>i<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>i-1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v<sp/>/<sp/>(<sp/>d<sp/>*<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1478"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1479"><highlight class="comment">idCurve_CatmullRomSpline::Basis</highlight></codeline>
<codeline lineno="1480"><highlight class="comment"></highlight></codeline>
<codeline lineno="1481"><highlight class="comment"><sp/><sp/>spline<sp/>basis<sp/>functions</highlight></codeline>
<codeline lineno="1482"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1483"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___catmull_rom_spline" kindref="compound">idCurve_CatmullRomSpline&lt;type&gt;::Basis</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>(float)<sp/>(<sp/>t<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>)<sp/>)<sp/>/<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>index+1<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[0]<sp/>=<sp/>(<sp/>(<sp/>-s<sp/>+<sp/>2.0f<sp/>)<sp/>*<sp/>s<sp/>-<sp/>1.0f<sp/>)<sp/>*<sp/>s<sp/>*<sp/>0.5f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-0.5f<sp/>s<sp/>*<sp/>s<sp/>*<sp/>s<sp/>+<sp/>s<sp/>*<sp/>s<sp/>-<sp/>0.5f<sp/>*<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[1]<sp/>=<sp/>(<sp/>(<sp/>(<sp/>3.0f<sp/>*<sp/>s<sp/>-<sp/>5.0f<sp/>)<sp/>*<sp/>s<sp/>)<sp/>*<sp/>s<sp/>+<sp/>2.0f<sp/>)<sp/>*<sp/>0.5f;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1.5f<sp/>*<sp/>s<sp/>*<sp/>s<sp/>*<sp/>s<sp/>-<sp/>2.5f<sp/>*<sp/>s<sp/>*<sp/>s<sp/>+<sp/>1.0f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[2]<sp/>=<sp/>(<sp/>(<sp/>-3.0f<sp/>*<sp/>s<sp/>+<sp/>4.0f<sp/>)<sp/>*<sp/>s<sp/>+<sp/>1.0f<sp/>)<sp/>*<sp/>s<sp/>*<sp/>0.5f;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-1.5f<sp/>*<sp/>s<sp/>*<sp/>s<sp/>*<sp/>s<sp/>-<sp/>2.0f<sp/>*<sp/>s<sp/>*<sp/>s<sp/>+<sp/>0.5f<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[3]<sp/>=<sp/>(<sp/>(<sp/>s<sp/>-<sp/>1.0f<sp/>)<sp/>*<sp/>s<sp/>*<sp/>s<sp/>)<sp/>*<sp/>0.5f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0.5f<sp/>*<sp/>s<sp/>*<sp/>s<sp/>*<sp/>s<sp/>-<sp/>0.5f<sp/>*<sp/>s<sp/>*<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1494"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1495"><highlight class="comment">idCurve_CatmullRomSpline::BasisFirstDerivative</highlight></codeline>
<codeline lineno="1496"><highlight class="comment"></highlight></codeline>
<codeline lineno="1497"><highlight class="comment"><sp/><sp/>first<sp/>derivative<sp/>of<sp/>spline<sp/>basis<sp/>functions</highlight></codeline>
<codeline lineno="1498"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1499"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___catmull_rom_spline" kindref="compound">idCurve_CatmullRomSpline&lt;type&gt;::BasisFirstDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>(float)<sp/>(<sp/>t<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>)<sp/>)<sp/>/<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>index+1<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[0]<sp/>=<sp/>(<sp/>-1.5f<sp/>*<sp/>s<sp/>+<sp/>2.0f<sp/>)<sp/>*<sp/>s<sp/>-<sp/>0.5f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-1.5f<sp/>*<sp/>s<sp/>*<sp/>s<sp/>+<sp/>2.0f<sp/>*<sp/>s<sp/>-<sp/>0.5f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[1]<sp/>=<sp/>(<sp/>4.5f<sp/>*<sp/>s<sp/>-<sp/>5.0f<sp/>)<sp/>*<sp/>s;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4.5f<sp/>*<sp/>s<sp/>*<sp/>s<sp/>-<sp/>5.0f<sp/>*<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[2]<sp/>=<sp/>(<sp/>-4.5<sp/>*<sp/>s<sp/>+<sp/>4.0f<sp/>)<sp/>*<sp/>s<sp/>+<sp/>0.5f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-4.5<sp/>*<sp/>s<sp/>*<sp/>s<sp/>+<sp/>4.0f<sp/>*<sp/>s<sp/>+<sp/>0.5f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[3]<sp/>=<sp/>1.5f<sp/>*<sp/>s<sp/>*<sp/>s<sp/>-<sp/>s;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1.5f<sp/>*<sp/>s<sp/>*<sp/>s<sp/>-<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1510"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1511"><highlight class="comment">idCurve_CatmullRomSpline::BasisSecondDerivative</highlight></codeline>
<codeline lineno="1512"><highlight class="comment"></highlight></codeline>
<codeline lineno="1513"><highlight class="comment"><sp/><sp/>second<sp/>derivative<sp/>of<sp/>spline<sp/>basis<sp/>functions</highlight></codeline>
<codeline lineno="1514"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1515"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___catmull_rom_spline" kindref="compound">idCurve_CatmullRomSpline&lt;type&gt;::BasisSecondDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>(float)<sp/>(<sp/>t<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>)<sp/>)<sp/>/<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>index+1<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[0]<sp/>=<sp/>-3.0f<sp/>*<sp/>s<sp/>+<sp/>2.0f;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[1]<sp/>=<sp/>9.0f<sp/>*<sp/>s<sp/>-<sp/>5.0f;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[2]<sp/>=<sp/>-9.0f<sp/>*<sp/>s<sp/>+<sp/>4.0f;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[3]<sp/>=<sp/>3.0f<sp/>*<sp/>s<sp/>-<sp/>1.0f;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1527"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="1528"><highlight class="comment"></highlight></codeline>
<codeline lineno="1529"><highlight class="comment"><sp/><sp/><sp/><sp/>Cubic<sp/>Interpolating<sp/>Spline<sp/>template.</highlight></codeline>
<codeline lineno="1530"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>curve<sp/>goes<sp/>through<sp/>all<sp/>the<sp/>knots.</highlight></codeline>
<codeline lineno="1531"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>curve<sp/>becomes<sp/>the<sp/>Catmull-Rom<sp/>spline<sp/>if<sp/>the<sp/>tension,</highlight></codeline>
<codeline lineno="1532"><highlight class="comment"><sp/><sp/><sp/><sp/>continuity<sp/>and<sp/>bias<sp/>are<sp/>all<sp/>set<sp/>to<sp/>zero.</highlight></codeline>
<codeline lineno="1533"><highlight class="comment"></highlight></codeline>
<codeline lineno="1534"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="1535"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1538" refid="classid_curve___kochanek_bartels_spline" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classid_curve___kochanek_bartels_spline" kindref="compound">idCurve_KochanekBartelsSpline</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classid_curve___spline" kindref="compound">idCurve_Spline</ref>&lt;type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_curve___kochanek_bartels_spline" kindref="compound">idCurve_KochanekBartelsSpline</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>&amp;value<sp/>);</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>&amp;value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tension,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>continuity,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bias<sp/>);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RemoveIndex(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)<sp/>{<sp/>this-&gt;values.RemoveIndex(index);<sp/>this-&gt;times.RemoveIndex(index);<sp/>tension.RemoveIndex(index);<sp/>continuity.RemoveIndex(index);<sp/>bias.RemoveIndex(index);<sp/>}</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Clear(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{<sp/>this-&gt;values.Clear();<sp/>this-&gt;times.Clear();<sp/>tension.Clear();<sp/>continuity.Clear();<sp/>bias.Clear();<sp/>this-&gt;currentIndex<sp/>=<sp/>-1;<sp/>}</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentFirstDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentSecondDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_list" kindref="compound">idList&lt;float&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tension;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_list" kindref="compound">idList&lt;float&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>continuity;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_list" kindref="compound">idList&lt;float&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bias;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TangentsForIndex(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/>type<sp/>&amp;t0,<sp/>type<sp/>&amp;t1<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Basis(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BasisFirstDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BasisSecondDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1562"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1565"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1566"><highlight class="comment">idCurve_KochanekBartelsSpline::idCurve_KochanekBartelsSpline</highlight></codeline>
<codeline lineno="1567"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1568"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal">ID_INLINE<sp/><ref refid="classid_curve___kochanek_bartels_spline" kindref="compound">idCurve_KochanekBartelsSpline&lt;type&gt;::idCurve_KochanekBartelsSpline</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1574"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1575"><highlight class="comment">idCurve_KochanekBartelsSpline::AddValue</highlight></codeline>
<codeline lineno="1576"><highlight class="comment"></highlight></codeline>
<codeline lineno="1577"><highlight class="comment"><sp/><sp/>add<sp/>a<sp/>timed/value<sp/>pair<sp/>to<sp/>the<sp/>spline</highlight></codeline>
<codeline lineno="1578"><highlight class="comment"><sp/><sp/>returns<sp/>the<sp/>index<sp/>to<sp/>the<sp/>inserted<sp/>pair</highlight></codeline>
<codeline lineno="1579"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1580"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1582"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classid_curve___kochanek_bartels_spline" kindref="compound">idCurve_KochanekBartelsSpline&lt;type&gt;::AddValue</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>&amp;value<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;times.Insert(<sp/>time,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;values.Insert(<sp/>value,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/>tension.Insert(<sp/>0.0f,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/>continuity.Insert(<sp/>0.0f,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/>bias.Insert(<sp/>0.0f,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1595"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1596"><highlight class="comment">idCurve_KochanekBartelsSpline::AddValue</highlight></codeline>
<codeline lineno="1597"><highlight class="comment"></highlight></codeline>
<codeline lineno="1598"><highlight class="comment"><sp/><sp/>add<sp/>a<sp/>timed/value<sp/>pair<sp/>to<sp/>the<sp/>spline</highlight></codeline>
<codeline lineno="1599"><highlight class="comment"><sp/><sp/>returns<sp/>the<sp/>index<sp/>to<sp/>the<sp/>inserted<sp/>pair</highlight></codeline>
<codeline lineno="1600"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1601"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classid_curve___kochanek_bartels_spline" kindref="compound">idCurve_KochanekBartelsSpline&lt;type&gt;::AddValue</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>&amp;value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tension,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>continuity,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bias<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;times.Insert(<sp/>time,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;values.Insert(<sp/>value,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;tension.Insert(<sp/>tension,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;continuity.Insert(<sp/>continuity,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;bias.Insert(<sp/>bias,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1616"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1617"><highlight class="comment">idCurve_KochanekBartelsSpline::GetCurrentValue</highlight></codeline>
<codeline lineno="1618"><highlight class="comment"></highlight></codeline>
<codeline lineno="1619"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>value<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="1620"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1621"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___kochanek_bartels_spline" kindref="compound">idCurve_KochanekBartelsSpline&lt;type&gt;::GetCurrentValue</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bvals[4],<sp/>clampedTime;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>v,<sp/>t0,<sp/>t1;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;times.Num()<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/>clampedTime<sp/>=<sp/>this-&gt;ClampedTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>clampedTime<sp/>);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/>TangentsForIndex(<sp/>i<sp/>-<sp/>1,<sp/>t0,<sp/>t1<sp/>);</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/>Basis(<sp/>i<sp/>-<sp/>1,<sp/>clampedTime,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>bvals[0]<sp/>*<sp/>this-&gt;ValueForIndex(<sp/>i<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>bvals[1]<sp/>*<sp/>this-&gt;ValueForIndex(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>bvals[2]<sp/>*<sp/>t0;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>bvals[3]<sp/>*<sp/>t1;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1644"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1645"><highlight class="comment">idCurve_KochanekBartelsSpline::GetCurrentFirstDerivative</highlight></codeline>
<codeline lineno="1646"><highlight class="comment"></highlight></codeline>
<codeline lineno="1647"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>first<sp/>derivative<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="1648"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1649"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___kochanek_bartels_spline" kindref="compound">idCurve_KochanekBartelsSpline&lt;type&gt;::GetCurrentFirstDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bvals[4],<sp/>d,<sp/>clampedTime;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>v,<sp/>t0,<sp/>t1;</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;times.Num()<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0]<sp/>);</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/>clampedTime<sp/>=<sp/>this-&gt;ClampedTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>clampedTime<sp/>);</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/>TangentsForIndex(<sp/>i<sp/>-<sp/>1,<sp/>t0,<sp/>t1<sp/>);</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>BasisFirstDerivative(<sp/>i<sp/>-<sp/>1,<sp/>clampedTime,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>bvals[0]<sp/>*<sp/>this-&gt;ValueForIndex(<sp/>i<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>bvals[1]<sp/>*<sp/>this-&gt;ValueForIndex(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>bvals[2]<sp/>*<sp/>t0;</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>bvals[3]<sp/>*<sp/>t1;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>i<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>i-1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v<sp/>/<sp/>d;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1673"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1674"><highlight class="comment">idCurve_KochanekBartelsSpline::GetCurrentSecondDerivative</highlight></codeline>
<codeline lineno="1675"><highlight class="comment"></highlight></codeline>
<codeline lineno="1676"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>second<sp/>derivative<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="1677"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1678"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___kochanek_bartels_spline" kindref="compound">idCurve_KochanekBartelsSpline&lt;type&gt;::GetCurrentSecondDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bvals[4],<sp/>d,<sp/>clampedTime;</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>v,<sp/>t0,<sp/>t1;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;times.Num()<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0]<sp/>);</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/>clampedTime<sp/>=<sp/>this-&gt;ClampedTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>clampedTime<sp/>);</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>TangentsForIndex(<sp/>i<sp/>-<sp/>1,<sp/>t0,<sp/>t1<sp/>);</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/>BasisSecondDerivative(<sp/>i<sp/>-<sp/>1,<sp/>clampedTime,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>bvals[0]<sp/>*<sp/>this-&gt;ValueForIndex(<sp/>i<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>bvals[1]<sp/>*<sp/>this-&gt;ValueForIndex(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>bvals[2]<sp/>*<sp/>t0;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>bvals[3]<sp/>*<sp/>t1;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>i<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>i-1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v<sp/>/<sp/>(<sp/>d<sp/>*<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1702"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1703"><highlight class="comment">idCurve_KochanekBartelsSpline::TangentsForIndex</highlight></codeline>
<codeline lineno="1704"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1705"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1707"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___kochanek_bartels_spline" kindref="compound">idCurve_KochanekBartelsSpline&lt;type&gt;::TangentsForIndex</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/>type<sp/>&amp;t0,<sp/>type<sp/>&amp;t1<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dt,<sp/>omt,<sp/>omc,<sp/>opc,<sp/>omb,<sp/>opb,<sp/>adj,<sp/>s0,<sp/>s1;</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>delta;</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>this-&gt;ValueForIndex(<sp/>index<sp/>+<sp/>1<sp/>)<sp/>-<sp/>this-&gt;ValueForIndex(<sp/>index<sp/>);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>+<sp/>1<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>);</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/>omt<sp/>=<sp/>1.0f<sp/>-<sp/>tension[index];</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/>omc<sp/>=<sp/>1.0f<sp/>-<sp/>continuity[index];</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>opc<sp/>=<sp/>1.0f<sp/>+<sp/>continuity[index];</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/>omb<sp/>=<sp/>1.0f<sp/>-<sp/>bias[index];</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/>opb<sp/>=<sp/>1.0f<sp/>+<sp/>bias[index];</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/>adj<sp/>=<sp/>2.0f<sp/>*<sp/>dt<sp/>/<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>+<sp/>1<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>-<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/>s0<sp/>=<sp/>0.5f<sp/>*<sp/>adj<sp/>*<sp/>omt<sp/>*<sp/>opc<sp/>*<sp/>opb;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>0.5f<sp/>*<sp/>adj<sp/>*<sp/>omt<sp/>*<sp/>omc<sp/>*<sp/>omb;</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>outgoing<sp/>tangent<sp/>at<sp/>first<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>s1<sp/>*<sp/>delta<sp/>+<sp/>s0<sp/>*<sp/>(<sp/>this-&gt;ValueForIndex(<sp/>index<sp/>)<sp/>-<sp/>this-&gt;ValueForIndex(<sp/>index<sp/>-<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/>omt<sp/>=<sp/>1.0f<sp/>-<sp/>tension[index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>omc<sp/>=<sp/>1.0f<sp/>-<sp/>continuity[index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/>opc<sp/>=<sp/>1.0f<sp/>+<sp/>continuity[index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/>omb<sp/>=<sp/>1.0f<sp/>-<sp/>bias[index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/>opb<sp/>=<sp/>1.0f<sp/>+<sp/>bias[index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/>adj<sp/>=<sp/>2.0f<sp/>*<sp/>dt<sp/>/<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>+<sp/>2<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/>s0<sp/>=<sp/>0.5f<sp/>*<sp/>adj<sp/>*<sp/>omt<sp/>*<sp/>omc<sp/>*<sp/>opb;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>0.5f<sp/>*<sp/>adj<sp/>*<sp/>omt<sp/>*<sp/>opc<sp/>*<sp/>omb;</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>incoming<sp/>tangent<sp/>at<sp/>second<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>s1<sp/>*<sp/>(<sp/>this-&gt;ValueForIndex(<sp/>index<sp/>+<sp/>2<sp/>)<sp/>-<sp/>this-&gt;ValueForIndex(<sp/>index<sp/>+<sp/>1<sp/>)<sp/>)<sp/>+<sp/>s0<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="1737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1740"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1741"><highlight class="comment">idCurve_KochanekBartelsSpline::Basis</highlight></codeline>
<codeline lineno="1742"><highlight class="comment"></highlight></codeline>
<codeline lineno="1743"><highlight class="comment"><sp/><sp/>spline<sp/>basis<sp/>functions</highlight></codeline>
<codeline lineno="1744"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1745"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1747"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___kochanek_bartels_spline" kindref="compound">idCurve_KochanekBartelsSpline&lt;type&gt;::Basis</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>(float)<sp/>(<sp/>t<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>)<sp/>)<sp/>/<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>index+1<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[0]<sp/>=<sp/>(<sp/>(<sp/>2.0f<sp/>*<sp/>s<sp/>-<sp/>3.0f<sp/>)<sp/>*<sp/>s<sp/>)<sp/>*<sp/>s<sp/>+<sp/>1.0f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2.0f<sp/>*<sp/>s<sp/>*<sp/>s<sp/>*<sp/>s<sp/>-<sp/>3.0f<sp/>*<sp/>s<sp/>*<sp/>s<sp/>+<sp/>1.0f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[1]<sp/>=<sp/>(<sp/>(<sp/>-2.0f<sp/>*<sp/>s<sp/>+<sp/>3.0f<sp/>)<sp/>*<sp/>s<sp/>)<sp/>*<sp/>s;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-2.0f<sp/>*<sp/>s<sp/>*<sp/>s<sp/>*<sp/>s<sp/>+<sp/>3.0f<sp/>*<sp/>s<sp/>*<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[2]<sp/>=<sp/>(<sp/>(<sp/>s<sp/>-<sp/>2.0f<sp/>)<sp/>*<sp/>s<sp/>)<sp/>*<sp/>s<sp/>+<sp/>s;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>s<sp/>*<sp/>s<sp/>*<sp/>s<sp/>-<sp/>2.0f<sp/>*<sp/>s<sp/>*<sp/>s<sp/>+<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[3]<sp/>=<sp/>(<sp/>(<sp/>s<sp/>-<sp/>1.0f<sp/>)<sp/>*<sp/>s<sp/>)<sp/>*<sp/>s;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>s<sp/>*<sp/>s<sp/>*<sp/>s<sp/>-<sp/>s<sp/>*<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1756"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1757"><highlight class="comment">idCurve_KochanekBartelsSpline::BasisFirstDerivative</highlight></codeline>
<codeline lineno="1758"><highlight class="comment"></highlight></codeline>
<codeline lineno="1759"><highlight class="comment"><sp/><sp/>first<sp/>derivative<sp/>of<sp/>spline<sp/>basis<sp/>functions</highlight></codeline>
<codeline lineno="1760"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1761"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1763"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___kochanek_bartels_spline" kindref="compound">idCurve_KochanekBartelsSpline&lt;type&gt;::BasisFirstDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>(float)<sp/>(<sp/>t<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>)<sp/>)<sp/>/<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>index+1<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[0]<sp/>=<sp/>(<sp/>6.0f<sp/>*<sp/>s<sp/>-<sp/>6.0f<sp/>)<sp/>*<sp/>s;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>6.0f<sp/>*<sp/>s<sp/>*<sp/>s<sp/>-<sp/>6.0f<sp/>*<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[1]<sp/>=<sp/>(<sp/>-6.0f<sp/>*<sp/>s<sp/>+<sp/>6.0f<sp/>)<sp/>*<sp/>s;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-6.0f<sp/>*<sp/>s<sp/>*<sp/>s<sp/>+<sp/>6.0f<sp/>*<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[2]<sp/>=<sp/>(<sp/>3.0f<sp/>*<sp/>s<sp/>-<sp/>4.0f<sp/>)<sp/>*<sp/>s<sp/>+<sp/>1.0f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3.0f<sp/>*<sp/>s<sp/>*<sp/>s<sp/>-<sp/>4.0f<sp/>*<sp/>s<sp/>+<sp/>1.0f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[3]<sp/>=<sp/>(<sp/>3.0f<sp/>*<sp/>s<sp/>-<sp/>2.0f<sp/>)<sp/>*<sp/>s;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3.0f<sp/>*<sp/>s<sp/>*<sp/>s<sp/>-<sp/>2.0f<sp/>*<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1772"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1773"><highlight class="comment">idCurve_KochanekBartelsSpline::BasisSecondDerivative</highlight></codeline>
<codeline lineno="1774"><highlight class="comment"></highlight></codeline>
<codeline lineno="1775"><highlight class="comment"><sp/><sp/>second<sp/>derivative<sp/>of<sp/>spline<sp/>basis<sp/>functions</highlight></codeline>
<codeline lineno="1776"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1777"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1779"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___kochanek_bartels_spline" kindref="compound">idCurve_KochanekBartelsSpline&lt;type&gt;::BasisSecondDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>(float)<sp/>(<sp/>t<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>)<sp/>)<sp/>/<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>index+1<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[0]<sp/>=<sp/>12.0f<sp/>*<sp/>s<sp/>-<sp/>6.0f;</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[1]<sp/>=<sp/>-12.0f<sp/>*<sp/>s<sp/>+<sp/>6.0f;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[2]<sp/>=<sp/>6.0f<sp/>*<sp/>s<sp/>-<sp/>4.0f;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[3]<sp/>=<sp/>6.0f<sp/>*<sp/>s<sp/>-<sp/>2.0f;</highlight></codeline>
<codeline lineno="1785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1789"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="1790"><highlight class="comment"></highlight></codeline>
<codeline lineno="1791"><highlight class="comment"><sp/><sp/><sp/><sp/>B-Spline<sp/>base<sp/>template.<sp/>Uses<sp/>recursive<sp/>definition<sp/>and<sp/>is<sp/>slow.</highlight></codeline>
<codeline lineno="1792"><highlight class="comment"><sp/><sp/><sp/><sp/>Use<sp/>idCurve_UniformCubicBSpline<sp/>or<sp/>idCurve_NonUniformBSpline<sp/>instead.</highlight></codeline>
<codeline lineno="1793"><highlight class="comment"></highlight></codeline>
<codeline lineno="1794"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="1795"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1798" refid="classid_curve___b_spline" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classid_curve___b_spline" kindref="compound">idCurve_BSpline</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classid_curve___spline" kindref="compound">idCurve_Spline</ref>&lt;type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_curve___b_spline" kindref="compound">idCurve_BSpline</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetOrder(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>order;<sp/>}</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetOrder(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>)<sp/>{<sp/>assert(<sp/>i<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>10<sp/>);<sp/>order<sp/>=<sp/>i;<sp/>}</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentFirstDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentSecondDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Basis(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BasisFirstDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BasisSecondDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1816"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1819"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1820"><highlight class="comment">idCurve_BSpline::idCurve_NaturalCubicSpline</highlight></codeline>
<codeline lineno="1821"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1822"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal">ID_INLINE<sp/><ref refid="classid_curve___b_spline" kindref="compound">idCurve_BSpline&lt;type&gt;::idCurve_BSpline</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/>order<sp/>=<sp/>4;<sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>to<sp/>cubic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1829"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1830"><highlight class="comment">idCurve_BSpline::GetCurrentValue</highlight></codeline>
<codeline lineno="1831"><highlight class="comment"></highlight></codeline>
<codeline lineno="1832"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>value<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="1833"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1834"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___b_spline" kindref="compound">idCurve_BSpline&lt;type&gt;::GetCurrentValue</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>clampedTime;</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>v;</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;times.Num()<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/>clampedTime<sp/>=<sp/>this-&gt;ClampedTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>clampedTime<sp/>);</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>order;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>i<sp/>+<sp/>j<sp/>-<sp/>(<sp/>order<sp/>&gt;&gt;<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>Basis(<sp/>k-2,<sp/>order,<sp/>clampedTime<sp/>)<sp/>*<sp/>this-&gt;ValueForIndex(<sp/>k<sp/>);</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="1853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1856"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1857"><highlight class="comment">idCurve_BSpline::GetCurrentFirstDerivative</highlight></codeline>
<codeline lineno="1858"><highlight class="comment"></highlight></codeline>
<codeline lineno="1859"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>first<sp/>derivative<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="1860"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1861"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___b_spline" kindref="compound">idCurve_BSpline&lt;type&gt;::GetCurrentFirstDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>clampedTime;</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>v;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;times.Num()<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/>clampedTime<sp/>=<sp/>this-&gt;ClampedTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>clampedTime<sp/>);</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>order;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>i<sp/>+<sp/>j<sp/>-<sp/>(<sp/>order<sp/>&gt;&gt;<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>BasisFirstDerivative(<sp/>k-2,<sp/>order,<sp/>clampedTime<sp/>)<sp/>*<sp/>this-&gt;ValueForIndex(<sp/>k<sp/>);</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="1880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1883"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1884"><highlight class="comment">idCurve_BSpline::GetCurrentSecondDerivative</highlight></codeline>
<codeline lineno="1885"><highlight class="comment"></highlight></codeline>
<codeline lineno="1886"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>second<sp/>derivative<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="1887"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1888"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1890"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___b_spline" kindref="compound">idCurve_BSpline&lt;type&gt;::GetCurrentSecondDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>clampedTime;</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>v;</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;times.Num()<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/>clampedTime<sp/>=<sp/>this-&gt;ClampedTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>clampedTime<sp/>);</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>order;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>i<sp/>+<sp/>j<sp/>-<sp/>(<sp/>order<sp/>&gt;&gt;<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>BasisSecondDerivative(<sp/>k-2,<sp/>order,<sp/>clampedTime<sp/>)<sp/>*<sp/>this-&gt;ValueForIndex(<sp/>k<sp/>);</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="1907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1910"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1911"><highlight class="comment">idCurve_BSpline::Basis</highlight></codeline>
<codeline lineno="1912"><highlight class="comment"></highlight></codeline>
<codeline lineno="1913"><highlight class="comment"><sp/><sp/>spline<sp/>basis<sp/>function</highlight></codeline>
<codeline lineno="1914"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1915"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classid_curve___b_spline" kindref="compound">idCurve_BSpline&lt;type&gt;::Basis</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>order<sp/>&lt;=<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>)<sp/>&lt;<sp/>t<sp/>&amp;&amp;<sp/>t<sp/>&lt;=<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>+<sp/>1<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1.0f;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0f;</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>d1<sp/>=<sp/>this-&gt;TimeForIndex(<sp/>index+order-1<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>);</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d1<sp/>!=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(float)<sp/>(<sp/>t<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>)<sp/>)<sp/>*<sp/>Basis(<sp/>index,<sp/>order-1,<sp/>t<sp/>)<sp/>/<sp/>d1;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>d2<sp/>=<sp/>this-&gt;TimeForIndex(<sp/>index+order<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index+1<sp/>);</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d2<sp/>!=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(float)<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>index+order<sp/>)<sp/>-<sp/>t<sp/>)<sp/>*<sp/>Basis(<sp/>index+1,<sp/>order-1,<sp/>t<sp/>)<sp/>/<sp/>d2;</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1937"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1940"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1941"><highlight class="comment">idCurve_BSpline::BasisFirstDerivative</highlight></codeline>
<codeline lineno="1942"><highlight class="comment"></highlight></codeline>
<codeline lineno="1943"><highlight class="comment"><sp/><sp/>first<sp/>derivative<sp/>of<sp/>spline<sp/>basis<sp/>function</highlight></codeline>
<codeline lineno="1944"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1945"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classid_curve___b_spline" kindref="compound">idCurve_BSpline&lt;type&gt;::BasisFirstDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>Basis(<sp/>index,<sp/>order-1,<sp/>t<sp/>)<sp/>-<sp/>Basis(<sp/>index+1,<sp/>order-1,<sp/>t<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(float)<sp/>(<sp/>order<sp/>-<sp/>1<sp/>)<sp/>/<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>+<sp/>(<sp/>order<sp/>-<sp/>1<sp/>)<sp/>-<sp/>2<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>-<sp/>2<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1953"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1954"><highlight class="comment">idCurve_BSpline::BasisSecondDerivative</highlight></codeline>
<codeline lineno="1955"><highlight class="comment"></highlight></codeline>
<codeline lineno="1956"><highlight class="comment"><sp/><sp/>second<sp/>derivative<sp/>of<sp/>spline<sp/>basis<sp/>function</highlight></codeline>
<codeline lineno="1957"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1958"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1960"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classid_curve___b_spline" kindref="compound">idCurve_BSpline&lt;type&gt;::BasisSecondDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>BasisFirstDerivative(<sp/>index,<sp/>order-1,<sp/>t<sp/>)<sp/>-<sp/>BasisFirstDerivative(<sp/>index+1,<sp/>order-1,<sp/>t<sp/>)<sp/>)<sp/>*</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(float)<sp/>(<sp/>order<sp/>-<sp/>1<sp/>)<sp/>/<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>+<sp/>(<sp/>order<sp/>-<sp/>1<sp/>)<sp/>-<sp/>2<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>-<sp/>2<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1967"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="1968"><highlight class="comment"></highlight></codeline>
<codeline lineno="1969"><highlight class="comment"><sp/><sp/><sp/><sp/>Uniform<sp/>Non-Rational<sp/>Cubic<sp/>B-Spline<sp/>template.</highlight></codeline>
<codeline lineno="1970"><highlight class="comment"></highlight></codeline>
<codeline lineno="1971"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="1972"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1975" refid="classid_curve___uniform_cubic_b_spline" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classid_curve___uniform_cubic_b_spline" kindref="compound">idCurve_UniformCubicBSpline</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classid_curve___b_spline" kindref="compound">idCurve_BSpline</ref>&lt;type&gt;<sp/>{</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_curve___uniform_cubic_b_spline" kindref="compound">idCurve_UniformCubicBSpline</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentFirstDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentSecondDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Basis(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BasisFirstDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BasisSecondDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1988"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1991"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1992"><highlight class="comment">idCurve_UniformCubicBSpline::idCurve_UniformCubicBSpline</highlight></codeline>
<codeline lineno="1993"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="1994"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="1996"><highlight class="normal">ID_INLINE<sp/><ref refid="classid_curve___uniform_cubic_b_spline" kindref="compound">idCurve_UniformCubicBSpline&lt;type&gt;::idCurve_UniformCubicBSpline</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;order<sp/>=<sp/>4;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>cubic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2001"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2002"><highlight class="comment">idCurve_UniformCubicBSpline::GetCurrentValue</highlight></codeline>
<codeline lineno="2003"><highlight class="comment"></highlight></codeline>
<codeline lineno="2004"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>value<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="2005"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2006"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="2008"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___uniform_cubic_b_spline" kindref="compound">idCurve_UniformCubicBSpline&lt;type&gt;::GetCurrentValue</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bvals[4],<sp/>clampedTime;</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>v;</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;times.Num()<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/>clampedTime<sp/>=<sp/>this-&gt;ClampedTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>clampedTime<sp/>);</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/>Basis(<sp/>i-1,<sp/>clampedTime,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>i<sp/>+<sp/>j<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>bvals[j]<sp/>*<sp/>this-&gt;ValueForIndex(<sp/>k<sp/>);</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="2026"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2029"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2030"><highlight class="comment">idCurve_UniformCubicBSpline::GetCurrentFirstDerivative</highlight></codeline>
<codeline lineno="2031"><highlight class="comment"></highlight></codeline>
<codeline lineno="2032"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>first<sp/>derivative<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="2033"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2034"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="2036"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___uniform_cubic_b_spline" kindref="compound">idCurve_UniformCubicBSpline&lt;type&gt;::GetCurrentFirstDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bvals[4],<sp/>d,<sp/>clampedTime;</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>v;</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;times.Num()<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0]<sp/>);</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/>clampedTime<sp/>=<sp/>this-&gt;ClampedTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>clampedTime<sp/>);</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/>BasisFirstDerivative(<sp/>i-1,<sp/>clampedTime,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>i<sp/>+<sp/>j<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>bvals[j]<sp/>*<sp/>this-&gt;ValueForIndex(<sp/>k<sp/>);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>i<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>i-1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v<sp/>/<sp/>d;</highlight></codeline>
<codeline lineno="2055"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2058"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2059"><highlight class="comment">idCurve_UniformCubicBSpline::GetCurrentSecondDerivative</highlight></codeline>
<codeline lineno="2060"><highlight class="comment"></highlight></codeline>
<codeline lineno="2061"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>second<sp/>derivative<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="2062"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2063"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___uniform_cubic_b_spline" kindref="compound">idCurve_UniformCubicBSpline&lt;type&gt;::GetCurrentSecondDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bvals[4],<sp/>d,<sp/>clampedTime;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>v;</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"></highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;times.Num()<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0]<sp/>);</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/>clampedTime<sp/>=<sp/>this-&gt;ClampedTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>clampedTime<sp/>);</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/>BasisSecondDerivative(<sp/>i-1,<sp/>clampedTime,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>i<sp/>+<sp/>j<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>bvals[j]<sp/>*<sp/>this-&gt;ValueForIndex(<sp/>k<sp/>);</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>i<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>i-1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v<sp/>/<sp/>(<sp/>d<sp/>*<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="2084"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2087"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2088"><highlight class="comment">idCurve_UniformCubicBSpline::Basis</highlight></codeline>
<codeline lineno="2089"><highlight class="comment"></highlight></codeline>
<codeline lineno="2090"><highlight class="comment"><sp/><sp/>spline<sp/>basis<sp/>functions</highlight></codeline>
<codeline lineno="2091"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2092"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="2094"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___uniform_cubic_b_spline" kindref="compound">idCurve_UniformCubicBSpline&lt;type&gt;::Basis</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>(float)<sp/>(<sp/>t<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>)<sp/>)<sp/>/<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>index+1<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[0]<sp/>=<sp/>(<sp/>(<sp/>(<sp/>-s<sp/>+<sp/>3.0f<sp/>)<sp/>*<sp/>s<sp/>-<sp/>3.0f<sp/>)<sp/>*<sp/>s<sp/>+<sp/>1.0f<sp/>)<sp/>*<sp/>(<sp/>1.0f<sp/>/<sp/>6.0f<sp/>);</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[1]<sp/>=<sp/>(<sp/>(<sp/>(<sp/>3.0f<sp/>*<sp/>s<sp/>-<sp/>6.0f<sp/>)<sp/>*<sp/>s<sp/>)<sp/>*<sp/>s<sp/>+<sp/>4.0f<sp/>)<sp/>*<sp/>(<sp/>1.0f<sp/>/<sp/>6.0f<sp/>);</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[2]<sp/>=<sp/>(<sp/>(<sp/>(<sp/>-3.0f<sp/>*<sp/>s<sp/>+<sp/>3.0f<sp/>)<sp/>*<sp/>s<sp/>+<sp/>3.0f<sp/>)<sp/>*<sp/>s<sp/>+<sp/>1.0f<sp/>)<sp/>*<sp/>(<sp/>1.0f<sp/>/<sp/>6.0f<sp/>);</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[3]<sp/>=<sp/>(<sp/>s<sp/>*<sp/>s<sp/>*<sp/>s<sp/>)<sp/>*<sp/>(<sp/>1.0f<sp/>/<sp/>6.0f<sp/>);</highlight></codeline>
<codeline lineno="2100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2103"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2104"><highlight class="comment">idCurve_UniformCubicBSpline::BasisFirstDerivative</highlight></codeline>
<codeline lineno="2105"><highlight class="comment"></highlight></codeline>
<codeline lineno="2106"><highlight class="comment"><sp/><sp/>first<sp/>derivative<sp/>of<sp/>spline<sp/>basis<sp/>functions</highlight></codeline>
<codeline lineno="2107"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2108"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="2110"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___uniform_cubic_b_spline" kindref="compound">idCurve_UniformCubicBSpline&lt;type&gt;::BasisFirstDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>(float)<sp/>(<sp/>t<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>)<sp/>)<sp/>/<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>index+1<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[0]<sp/>=<sp/>-0.5f<sp/>*<sp/>s<sp/>*<sp/>s<sp/>+<sp/>s<sp/>-<sp/>0.5f;</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[1]<sp/>=<sp/>1.5f<sp/>*<sp/>s<sp/>*<sp/>s<sp/>-<sp/>2.0f<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[2]<sp/>=<sp/>-1.5f<sp/>*<sp/>s<sp/>*<sp/>s<sp/>+<sp/>s<sp/>+<sp/>0.5f;</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[3]<sp/>=<sp/>0.5f<sp/>*<sp/>s<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="2116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2119"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2120"><highlight class="comment">idCurve_UniformCubicBSpline::BasisSecondDerivative</highlight></codeline>
<codeline lineno="2121"><highlight class="comment"></highlight></codeline>
<codeline lineno="2122"><highlight class="comment"><sp/><sp/>second<sp/>derivative<sp/>of<sp/>spline<sp/>basis<sp/>functions</highlight></codeline>
<codeline lineno="2123"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2124"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="2126"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___uniform_cubic_b_spline" kindref="compound">idCurve_UniformCubicBSpline&lt;type&gt;::BasisSecondDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>(float)<sp/>(<sp/>t<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>)<sp/>)<sp/>/<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>index+1<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[0]<sp/>=<sp/>-s<sp/>+<sp/>1.0f;</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[1]<sp/>=<sp/>3.0f<sp/>*<sp/>s<sp/>-<sp/>2.0f;</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[2]<sp/>=<sp/>-3.0f<sp/>*<sp/>s<sp/>+<sp/>1.0f;</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[3]<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="2132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2136"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="2137"><highlight class="comment"></highlight></codeline>
<codeline lineno="2138"><highlight class="comment"><sp/><sp/><sp/><sp/>Non-Uniform<sp/>Non-Rational<sp/>B-Spline<sp/>(NUBS)<sp/>template.</highlight></codeline>
<codeline lineno="2139"><highlight class="comment"></highlight></codeline>
<codeline lineno="2140"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="2141"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="2144" refid="classid_curve___non_uniform_b_spline" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classid_curve___non_uniform_b_spline" kindref="compound">idCurve_NonUniformBSpline</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classid_curve___b_spline" kindref="compound">idCurve_BSpline</ref>&lt;type&gt;<sp/>{</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2146"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_curve___non_uniform_b_spline" kindref="compound">idCurve_NonUniformBSpline</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentFirstDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentSecondDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Basis(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BasisFirstDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BasisSecondDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2157"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2160"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2161"><highlight class="comment">idCurve_NonUniformBSpline::idCurve_NonUniformBSpline</highlight></codeline>
<codeline lineno="2162"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2163"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2164"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal">ID_INLINE<sp/><ref refid="classid_curve___non_uniform_b_spline" kindref="compound">idCurve_NonUniformBSpline&lt;type&gt;::idCurve_NonUniformBSpline</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2169"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2170"><highlight class="comment">idCurve_NonUniformBSpline::GetCurrentValue</highlight></codeline>
<codeline lineno="2171"><highlight class="comment"></highlight></codeline>
<codeline lineno="2172"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>value<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="2173"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2174"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="2176"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___non_uniform_b_spline" kindref="compound">idCurve_NonUniformBSpline&lt;type&gt;::GetCurrentValue</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>clampedTime;</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>v;</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>this-&gt;order<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;times.Num()<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/>clampedTime<sp/>=<sp/>this-&gt;ClampedTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>clampedTime<sp/>);</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/>Basis(<sp/>i-1,<sp/>this-&gt;order,<sp/>clampedTime,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>this-&gt;order;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>i<sp/>+<sp/>j<sp/>-<sp/>(<sp/>this-&gt;order<sp/>&gt;&gt;<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>bvals[j]<sp/>*<sp/>this-&gt;ValueForIndex(<sp/>k<sp/>);</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="2195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2198"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2199"><highlight class="comment">idCurve_NonUniformBSpline::GetCurrentFirstDerivative</highlight></codeline>
<codeline lineno="2200"><highlight class="comment"></highlight></codeline>
<codeline lineno="2201"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>first<sp/>derivative<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="2202"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2203"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="2205"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___non_uniform_b_spline" kindref="compound">idCurve_NonUniformBSpline&lt;type&gt;::GetCurrentFirstDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>clampedTime;</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>v;</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>this-&gt;order<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;times.Num()<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0]<sp/>);</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"></highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/>clampedTime<sp/>=<sp/>this-&gt;ClampedTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>clampedTime<sp/>);</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/>BasisFirstDerivative(<sp/>i-1,<sp/>this-&gt;order,<sp/>clampedTime,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>this-&gt;order;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>i<sp/>+<sp/>j<sp/>-<sp/>(<sp/>this-&gt;order<sp/>&gt;&gt;<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>bvals[j]<sp/>*<sp/>this-&gt;ValueForIndex(<sp/>k<sp/>);</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="2224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2227"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2228"><highlight class="comment">idCurve_NonUniformBSpline::GetCurrentSecondDerivative</highlight></codeline>
<codeline lineno="2229"><highlight class="comment"></highlight></codeline>
<codeline lineno="2230"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>second<sp/>derivative<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="2231"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2232"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="2234"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___non_uniform_b_spline" kindref="compound">idCurve_NonUniformBSpline&lt;type&gt;::GetCurrentSecondDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>clampedTime;</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>v;</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>this-&gt;order<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;times.Num()<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0]<sp/>);</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/>clampedTime<sp/>=<sp/>this-&gt;ClampedTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>clampedTime<sp/>);</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/>BasisSecondDerivative(<sp/>i-1,<sp/>this-&gt;order,<sp/>clampedTime,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>this-&gt;order;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>i<sp/>+<sp/>j<sp/>-<sp/>(<sp/>this-&gt;order<sp/>&gt;&gt;<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>bvals[j]<sp/>*<sp/>this-&gt;ValueForIndex(<sp/>k<sp/>);</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="2253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"></highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2256"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2257"><highlight class="comment">idCurve_NonUniformBSpline::Basis</highlight></codeline>
<codeline lineno="2258"><highlight class="comment"></highlight></codeline>
<codeline lineno="2259"><highlight class="comment"><sp/><sp/>spline<sp/>basis<sp/>functions</highlight></codeline>
<codeline lineno="2260"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2261"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2262"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="2263"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___non_uniform_b_spline" kindref="compound">idCurve_NonUniformBSpline&lt;type&gt;::Basis</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/>s,<sp/>i;</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>omega;</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[order-1]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>r<sp/>=<sp/>2;<sp/>r<sp/>&lt;=<sp/>order;<sp/>r++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>index<sp/>-<sp/>r<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bvals[order<sp/>-<sp/>r]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>s<sp/>=<sp/>order<sp/>-<sp/>r<sp/>+<sp/>1;<sp/>s<sp/>&lt;<sp/>order;<sp/>s++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>omega<sp/>=<sp/>(float)<sp/>(<sp/>t<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>i<sp/>)<sp/>)<sp/>/<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>i<sp/>+<sp/>r<sp/>-<sp/>1<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>i<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bvals[s<sp/>-<sp/>1]<sp/>+=<sp/>(<sp/>1.0f<sp/>-<sp/>omega<sp/>)<sp/>*<sp/>bvals[s];</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bvals[s]<sp/>*=<sp/>omega;</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"></highlight></codeline>
<codeline lineno="2280"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2281"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2282"><highlight class="comment">idCurve_NonUniformBSpline::BasisFirstDerivative</highlight></codeline>
<codeline lineno="2283"><highlight class="comment"></highlight></codeline>
<codeline lineno="2284"><highlight class="comment"><sp/><sp/>first<sp/>derivative<sp/>of<sp/>spline<sp/>basis<sp/>functions</highlight></codeline>
<codeline lineno="2285"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2286"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="2288"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___non_uniform_b_spline" kindref="compound">idCurve_NonUniformBSpline&lt;type&gt;::BasisFirstDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/>Basis(<sp/>index,<sp/>order-1,<sp/>t,<sp/>bvals+1<sp/>);</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>order-1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bvals[i]<sp/>-=<sp/>bvals[i+1];</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bvals[i]<sp/>*=<sp/>(float)<sp/>(<sp/>order<sp/>-<sp/>1)<sp/>/<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>+<sp/>i<sp/>+<sp/>(order-1)<sp/>-<sp/>2<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>+<sp/>i<sp/>-<sp/>2<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[i]<sp/>*=<sp/>(float)<sp/>(<sp/>order<sp/>-<sp/>1)<sp/>/<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>+<sp/>i<sp/>+<sp/>(order-1)<sp/>-<sp/>2<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>+<sp/>i<sp/>-<sp/>2<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2301"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2302"><highlight class="comment">idCurve_NonUniformBSpline::BasisSecondDerivative</highlight></codeline>
<codeline lineno="2303"><highlight class="comment"></highlight></codeline>
<codeline lineno="2304"><highlight class="comment"><sp/><sp/>second<sp/>derivative<sp/>of<sp/>spline<sp/>basis<sp/>functions</highlight></codeline>
<codeline lineno="2305"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2306"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="2308"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_curve___non_uniform_b_spline" kindref="compound">idCurve_NonUniformBSpline&lt;type&gt;::BasisSecondDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bvals<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/>BasisFirstDerivative(<sp/>index,<sp/>order-1,<sp/>t,<sp/>bvals+1<sp/>);</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>order-1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bvals[i]<sp/>-=<sp/>bvals[i+1];</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bvals[i]<sp/>*=<sp/>(float)<sp/>(<sp/>order<sp/>-<sp/>1)<sp/>/<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>+<sp/>i<sp/>+<sp/>(order-1)<sp/>-<sp/>2<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>+<sp/>i<sp/>-<sp/>2<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals[i]<sp/>*=<sp/>(float)<sp/>(<sp/>order<sp/>-<sp/>1)<sp/>/<sp/>(<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>+<sp/>i<sp/>+<sp/>(order-1)<sp/>-<sp/>2<sp/>)<sp/>-<sp/>this-&gt;TimeForIndex(<sp/>index<sp/>+<sp/>i<sp/>-<sp/>2<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"></highlight></codeline>
<codeline lineno="2321"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2322"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="2323"><highlight class="comment"></highlight></codeline>
<codeline lineno="2324"><highlight class="comment"><sp/><sp/><sp/><sp/>Non-Uniform<sp/>Rational<sp/>B-Spline<sp/>(NURBS)<sp/>template.</highlight></codeline>
<codeline lineno="2325"><highlight class="comment"></highlight></codeline>
<codeline lineno="2326"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="2327"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2328"><highlight class="normal"></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="2330" refid="classid_curve___n_u_r_b_s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classid_curve___n_u_r_b_s" kindref="compound">idCurve_NURBS</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classid_curve___non_uniform_b_spline" kindref="compound">idCurve_NonUniformBSpline</ref>&lt;type&gt;<sp/>{</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2332"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_curve___n_u_r_b_s" kindref="compound">idCurve_NURBS</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>&amp;value<sp/>);</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>&amp;value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>weight<sp/>);</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RemoveIndex(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)<sp/>{<sp/>this-&gt;values.RemoveIndex(index);<sp/>this-&gt;times.RemoveIndex(index);<sp/>weights.RemoveIndex(index);<sp/>}</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Clear(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{<sp/>this-&gt;values.Clear();<sp/>this-&gt;times.Clear();<sp/>weights.Clear();<sp/>this-&gt;currentIndex<sp/>=<sp/>-1;<sp/>}</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentFirstDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentSecondDerivative(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"></highlight></codeline>
<codeline lineno="2344"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_list" kindref="compound">idList&lt;float&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weights;</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"></highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WeightForIndex(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2348"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"></highlight></codeline>
<codeline lineno="2350"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2351"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2352"><highlight class="comment">idCurve_NURBS::idCurve_NURBS</highlight></codeline>
<codeline lineno="2353"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2354"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2355"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="2356"><highlight class="normal">ID_INLINE<sp/><ref refid="classid_curve___n_u_r_b_s" kindref="compound">idCurve_NURBS&lt;type&gt;::idCurve_NURBS</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2360"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2361"><highlight class="comment">idCurve_NURBS::AddValue</highlight></codeline>
<codeline lineno="2362"><highlight class="comment"></highlight></codeline>
<codeline lineno="2363"><highlight class="comment"><sp/><sp/>add<sp/>a<sp/>timed/value<sp/>pair<sp/>to<sp/>the<sp/>spline</highlight></codeline>
<codeline lineno="2364"><highlight class="comment"><sp/><sp/>returns<sp/>the<sp/>index<sp/>to<sp/>the<sp/>inserted<sp/>pair</highlight></codeline>
<codeline lineno="2365"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2366"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="2368"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classid_curve___n_u_r_b_s" kindref="compound">idCurve_NURBS&lt;type&gt;::AddValue</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>&amp;value<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;times.Insert(<sp/>time,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;values.Insert(<sp/>value,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/>weights.Insert(<sp/>1.0f,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"></highlight></codeline>
<codeline lineno="2378"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2379"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2380"><highlight class="comment">idCurve_NURBS::AddValue</highlight></codeline>
<codeline lineno="2381"><highlight class="comment"></highlight></codeline>
<codeline lineno="2382"><highlight class="comment"><sp/><sp/>add<sp/>a<sp/>timed/value<sp/>pair<sp/>to<sp/>the<sp/>spline</highlight></codeline>
<codeline lineno="2383"><highlight class="comment"><sp/><sp/>returns<sp/>the<sp/>index<sp/>to<sp/>the<sp/>inserted<sp/>pair</highlight></codeline>
<codeline lineno="2384"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2385"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="2387"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classid_curve___n_u_r_b_s" kindref="compound">idCurve_NURBS&lt;type&gt;::AddValue</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>&amp;value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>weight<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;times.Insert(<sp/>time,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;values.Insert(<sp/>value,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/>weights.Insert(<sp/>weight,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"></highlight></codeline>
<codeline lineno="2397"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2398"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2399"><highlight class="comment">idCurve_NURBS::GetCurrentValue</highlight></codeline>
<codeline lineno="2400"><highlight class="comment"></highlight></codeline>
<codeline lineno="2401"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>value<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="2402"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2403"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="2405"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___n_u_r_b_s" kindref="compound">idCurve_NURBS&lt;type&gt;::GetCurrentValue</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w,<sp/>b,<sp/>*bvals,<sp/>clampedTime;</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>v;</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"></highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;times.Num()<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>this-&gt;order<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/>clampedTime<sp/>=<sp/>this-&gt;ClampedTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>clampedTime<sp/>);</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;Basis(<sp/>i-1,<sp/>this-&gt;order,<sp/>clampedTime,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>this-&gt;order;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>i<sp/>+<sp/>j<sp/>-<sp/>(<sp/>this-&gt;order<sp/>&gt;&gt;<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>bvals[j]<sp/>*<sp/>WeightForIndex(<sp/>k<sp/>);</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>+=<sp/>b;</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>b<sp/>*<sp/>this-&gt;ValueForIndex(<sp/>k<sp/>);</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v<sp/>/<sp/>w;</highlight></codeline>
<codeline lineno="2428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2431"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2432"><highlight class="comment">idCurve_NURBS::GetCurrentFirstDerivative</highlight></codeline>
<codeline lineno="2433"><highlight class="comment"></highlight></codeline>
<codeline lineno="2434"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>first<sp/>derivative<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="2435"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2436"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="2438"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___n_u_r_b_s" kindref="compound">idCurve_NURBS&lt;type&gt;::GetCurrentFirstDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w,<sp/>wb,<sp/>wd1,<sp/>b,<sp/>d1,<sp/>*bvals,<sp/>*d1vals,<sp/>clampedTime;</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>v,<sp/>vb,<sp/>vd1;</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;times.Num()<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>this-&gt;order<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/>d1vals<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>this-&gt;order<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/>clampedTime<sp/>=<sp/>this-&gt;ClampedTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>clampedTime<sp/>);</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;Basis(<sp/>i-1,<sp/>this-&gt;order,<sp/>clampedTime,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;BasisFirstDerivative(<sp/>i-1,<sp/>this-&gt;order,<sp/>clampedTime,<sp/>d1vals<sp/>);</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/>vb<sp/>=<sp/>vd1<sp/>=<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/>wb<sp/>=<sp/>wd1<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>this-&gt;order;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>i<sp/>+<sp/>j<sp/>-<sp/>(<sp/>this-&gt;order<sp/>&gt;&gt;<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>WeightForIndex(<sp/>k<sp/>);</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>bvals[j]<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>d1vals[j]<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wb<sp/>+=<sp/>b;</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wd1<sp/>+=<sp/>d1;</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>this-&gt;ValueForIndex(<sp/>k<sp/>);</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vb<sp/>+=<sp/>b<sp/>*<sp/>v;</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vd1<sp/>+=<sp/>d1<sp/>*<sp/>v;</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>wb<sp/>*<sp/>vd1<sp/>-<sp/>vb<sp/>*<sp/>wd1<sp/>)<sp/>/<sp/>(<sp/>wb<sp/>*<sp/>wb<sp/>);</highlight></codeline>
<codeline lineno="2468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2471"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2472"><highlight class="comment">idCurve_NURBS::GetCurrentSecondDerivative</highlight></codeline>
<codeline lineno="2473"><highlight class="comment"></highlight></codeline>
<codeline lineno="2474"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>second<sp/>derivative<sp/>for<sp/>the<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="2475"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2476"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="2478"><highlight class="normal">ID_INLINE<sp/>type<sp/><ref refid="classid_curve___n_u_r_b_s" kindref="compound">idCurve_NURBS&lt;type&gt;::GetCurrentSecondDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w,<sp/>wb,<sp/>wd1,<sp/>wd2,<sp/>b,<sp/>d1,<sp/>d2,<sp/>*bvals,<sp/>*d1vals,<sp/>*d2vals,<sp/>clampedTime;</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>v,<sp/>vb,<sp/>vd1,<sp/>vd2;</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;times.Num()<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/>bvals<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>this-&gt;order<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/>d1vals<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>this-&gt;order<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/>d2vals<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>this-&gt;order<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/>clampedTime<sp/>=<sp/>this-&gt;ClampedTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>this-&gt;IndexForTime(<sp/>clampedTime<sp/>);</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;Basis(<sp/>i-1,<sp/>this-&gt;order,<sp/>clampedTime,<sp/>bvals<sp/>);</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;BasisFirstDerivative(<sp/>i-1,<sp/>this-&gt;order,<sp/>clampedTime,<sp/>d1vals<sp/>);</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;BasisSecondDerivative(<sp/>i-1,<sp/>this-&gt;order,<sp/>clampedTime,<sp/>d2vals<sp/>);</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/>vb<sp/>=<sp/>vd1<sp/>=<sp/>vd2<sp/>=<sp/>this-&gt;values[0]<sp/>-<sp/>this-&gt;values[0];</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/>wb<sp/>=<sp/>wd1<sp/>=<sp/>wd2<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>this-&gt;order;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>i<sp/>+<sp/>j<sp/>-<sp/>(<sp/>this-&gt;order<sp/>&gt;&gt;<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>WeightForIndex(<sp/>k<sp/>);</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>bvals[j]<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>d1vals[j]<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>d2vals[j]<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wb<sp/>+=<sp/>b;</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wd1<sp/>+=<sp/>d1;</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wd2<sp/>+=<sp/>d2;</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>this-&gt;ValueForIndex(<sp/>k<sp/>);</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vb<sp/>+=<sp/>b<sp/>*<sp/>v;</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vd1<sp/>+=<sp/>d1<sp/>*<sp/>v;</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vd2<sp/>+=<sp/>d2<sp/>*<sp/>v;</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>wb<sp/>*<sp/>wb<sp/>)<sp/>*<sp/>(<sp/>wb<sp/>*<sp/>vd2<sp/>-<sp/>vb<sp/>*<sp/>wd2<sp/>)<sp/>-<sp/>(<sp/>wb<sp/>*<sp/>vd1<sp/>-<sp/>vb<sp/>*<sp/>wd1<sp/>)<sp/>*<sp/>2.0f<sp/>*<sp/>wb<sp/>*<sp/>wd1<sp/>)<sp/>/<sp/>(<sp/>wb<sp/>*<sp/>wb<sp/>*<sp/>wb<sp/>*<sp/>wb<sp/>);</highlight></codeline>
<codeline lineno="2513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2516"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2517"><highlight class="comment">idCurve_NURBS::WeightForIndex</highlight></codeline>
<codeline lineno="2518"><highlight class="comment"></highlight></codeline>
<codeline lineno="2519"><highlight class="comment"><sp/><sp/>get<sp/>the<sp/>weight<sp/>for<sp/>the<sp/>given<sp/>index</highlight></codeline>
<codeline lineno="2520"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2521"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type<sp/>&gt;</highlight></codeline>
<codeline lineno="2523"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classid_curve___n_u_r_b_s" kindref="compound">idCurve_NURBS&lt;type&gt;::WeightForIndex</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>weights.Num()-1;</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"></highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;boundaryType<sp/>==<sp/><ref refid="classid_curve___spline" kindref="compound">idCurve_Spline&lt;type&gt;::BT_CLOSED</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>weights[<sp/>weights.Num()<sp/>+<sp/>index<sp/>%<sp/>weights.Num()<sp/>];</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>weights[0]<sp/>+<sp/>index<sp/>*<sp/>(<sp/>weights[1]<sp/>-<sp/>weights[0]<sp/>);</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>&gt;<sp/>n<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;boundaryType<sp/>==<sp/><ref refid="classid_curve___spline" kindref="compound">idCurve_Spline&lt;type&gt;::BT_CLOSED</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>weights[<sp/>index<sp/>%<sp/>weights.Num()<sp/>];</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>weights[n]<sp/>+<sp/>(<sp/>index<sp/>-<sp/>n<sp/>)<sp/>*<sp/>(<sp/>weights[n]<sp/>-<sp/>weights[n-1]<sp/>);</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>weights[index];</highlight></codeline>
<codeline lineno="2540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!__MATH_CURVE_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Curve.h"/>
  </compounddef>
</doxygen>
