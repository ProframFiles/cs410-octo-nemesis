<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_editor_brush_8h" kind="file">
    <compoundname>EditorBrush.h</compoundname>
    <includedby refid="_q_e3_8_h" local="yes">E:/sources/3rd_party/DOOM/neo/tools/radiant/QE3.H</includedby>
      <sectiondef kind="func">
      <memberdef kind="function" id="_editor_brush_8h_1a85b84c9dcb15c5367e822136f30cfbf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
        <definition>brush_t* Brush_Alloc</definition>
        <argsstring>()</argsstring>
        <name>Brush_Alloc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="31" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="117" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1abf0a94c6af38b78cbd6c86f8ed2b4588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_Free</definition>
        <argsstring>(brush_t *b, bool bRemoveNode=true)</argsstring>
        <name>Brush_Free</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bRemoveNode</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="32" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="2278" bodyend="2305"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a017dbff38a326177872d41c536ad2be4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Brush_MemorySize</definition>
        <argsstring>(brush_t *b)</argsstring>
        <name>Brush_MemorySize</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="33" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="2331" bodyend="2344"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1ade213d48ff8155e8fae824df91ae4a6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_MakeSided</definition>
        <argsstring>(int sides)</argsstring>
        <name>Brush_MakeSided</name>
        <param>
          <type>int</type>
          <declname>sides</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="34" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="2137" bodyend="2263"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a9ba893c655b9d925e88e25335464b826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_MakeSidedCone</definition>
        <argsstring>(int sides)</argsstring>
        <name>Brush_MakeSidedCone</name>
        <param>
          <type>int</type>
          <declname>sides</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="35" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="4986" bodyend="5071"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1ac332beccc01aee227432af5575990df3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_Move</definition>
        <argsstring>(brush_t *b, const idVec3 move, bool bSnap=true, bool updateOrigin=true)</argsstring>
        <name>Brush_Move</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>move</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bSnap</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>updateOrigin</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="36" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="4846" bodyend="4931"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a94c348101d888a424bbac2b5f75eec85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Brush_MoveVertex</definition>
        <argsstring>(brush_t *b, const idVec3 &amp;vertex, const idVec3 &amp;delta, idVec3 &amp;end, bool bSnap)</argsstring>
        <name>Brush_MoveVertex</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>vertex</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>end</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bSnap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="37" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="979" bodyend="1308"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1ae9ad784fe2397f042fdf01a1371565b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_ResetFaceOriginals</definition>
        <argsstring>(brush_t *b)</argsstring>
        <name>Brush_ResetFaceOriginals</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="38" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="1373" bodyend="1379"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a0a9de8116892e8a14313f5c057dcaa35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
        <definition>brush_t* Brush_Parse</definition>
        <argsstring>(const idVec3 origin)</argsstring>
        <name>Brush_Parse</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>origin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="39" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="1390" bodyend="1552"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a1982a8940b7d1ba88cef42e01a2d7a65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
        <definition>face_t* Brush_Ray</definition>
        <argsstring>(idVec3 origin, idVec3 dir, brush_t *b, float *dist, bool testPrimitive=false)</argsstring>
        <name>Brush_Ray</name>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>origin</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>dist</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>testPrimitive</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="40" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="2589" bodyend="2648"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a2a860c3047d2df0f1872ec5d09a06ec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_RemoveFromList</definition>
        <argsstring>(brush_t *b)</argsstring>
        <name>Brush_RemoveFromList</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="41" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="2698" bodyend="2713"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a05f190d89729fc2d891d3517e135b487" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_AddToList</definition>
        <argsstring>(brush_t *b, brush_t *list)</argsstring>
        <name>Brush_AddToList</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="42" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="2674" bodyend="2691"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a169b16c838f3338882782bfaa7ddc972" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_Build</definition>
        <argsstring>(brush_t *b, bool bSnap=true, bool bMarkMap=true, bool bConvert=false, bool updateLights=true)</argsstring>
        <name>Brush_Build</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bSnap</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>bMarkMap</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>bConvert</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>updateLights</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="43" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="743" bodyend="776"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1aa7d491dc89958f97a2c50369b1af3c54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_BuildWindings</definition>
        <argsstring>(brush_t *b, bool bSnap=true, bool keepOnPlaneWinding=false, bool updateLights=true, bool makeFacePlanes=true)</argsstring>
        <name>Brush_BuildWindings</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bSnap</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>keepOnPlaneWinding</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>updateLights</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>makeFacePlanes</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="44" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="3179" bodyend="3266"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a8b1a0bac053060c3dcb6833af08bd0eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
        <definition>brush_t* Brush_Clone</definition>
        <argsstring>(brush_t *b)</argsstring>
        <name>Brush_Clone</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="45" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="2353" bodyend="2387"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a5180b83253e696883d2b3bc2d3fcbe3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
        <definition>brush_t* Brush_FullClone</definition>
        <argsstring>(brush_t *b)</argsstring>
        <name>Brush_FullClone</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="46" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="2398" bodyend="2467"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1ab1b0db1c5ca4d2385de80e48b7d5a79a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
        <definition>brush_t* Brush_Create</definition>
        <argsstring>(idVec3 mins, idVec3 maxs, texdef_t *texdef)</argsstring>
        <name>Brush_Create</name>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>mins</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>maxs</declname>
        </param>
        <param>
          <type><ref refid="classtexdef__t" kindref="compound">texdef_t</ref> *</type>
          <declname>texdef</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="47" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="1972" bodyend="2040"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a6066faead437b9b4545cc703f08ddf1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_Draw</definition>
        <argsstring>(brush_t *b, bool bSelected=false)</argsstring>
        <name>Brush_Draw</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bSelected</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="48" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="4393" bodyend="4520"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a38a4745a99ab2498949b097dc2998f2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_DrawXY</definition>
        <argsstring>(brush_t *b, int nViewType, bool bSelected=false, bool ignoreViewType=false)</argsstring>
        <name>Brush_DrawXY</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nViewType</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bSelected</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>ignoreViewType</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="49" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="4670" bodyend="4823"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a33ccc9d75f9eaf262e526c016565a178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_SplitBrushByFace</definition>
        <argsstring>(brush_t *in, face_t *f, brush_t **front, brush_t **back)</argsstring>
        <name>Brush_SplitBrushByFace</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> **</type>
          <declname>front</declname>
        </param>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> **</type>
          <declname>back</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="50" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="785" bodyend="832"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1ac9ea7131ffb1b64ada3b0d7012cb428a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_SelectFaceForDragging</definition>
        <argsstring>(brush_t *b, face_t *f, bool shear)</argsstring>
        <name>Brush_SelectFaceForDragging</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>shear</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>last point on the winding </para>        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="51" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="2888" bodyend="2993"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a686b83ee0c4d7514f7a36b0ad8fec713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_SetTexture</definition>
        <argsstring>(brush_t *b, texdef_t *texdef, brushprimit_texdef_t *brushprimit_texdef, bool bFitScale=false)</argsstring>
        <name>Brush_SetTexture</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classtexdef__t" kindref="compound">texdef_t</ref> *</type>
          <declname>texdef</declname>
        </param>
        <param>
          <type><ref refid="classbrushprimit__texdef__t" kindref="compound">brushprimit_texdef_t</ref> *</type>
          <declname>brushprimit_texdef</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bFitScale</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="52" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="2769" bodyend="2780"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1adcd5bdc3c136c6c871cbca15a71ad06d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_SideSelect</definition>
        <argsstring>(brush_t *b, idVec3 origin, idVec3 dir, bool shear)</argsstring>
        <name>Brush_SideSelect</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>origin</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>shear</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="53" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="3002" bodyend="3037"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a814ea8677fabd83fecf4c31442bb33b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_SnapToGrid</definition>
        <argsstring>(brush_t *pb)</argsstring>
        <name>Brush_SnapToGrid</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>pb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="54" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="3298" bodyend="3367"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a14fff766d3ed4d5ac39039f2eb35f70b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_Rotate</definition>
        <argsstring>(brush_t *b, idVec3 vAngle, idVec3 vOrigin, bool bBuild=true)</argsstring>
        <name>Brush_Rotate</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>vAngle</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>vOrigin</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bBuild</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="55" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="3395" bodyend="3405"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a554bb18a6ed6289b29435b14e0f03c90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_MakeSidedSphere</definition>
        <argsstring>(int sides)</argsstring>
        <name>Brush_MakeSidedSphere</name>
        <param>
          <type>int</type>
          <declname>sides</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="56" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="5080" bodyend="5139"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a12e784cc790a430927f6f034dc5dd568" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_Write</definition>
        <argsstring>(brush_t *b, FILE *f, const idVec3 &amp;origin, bool newFormat)</argsstring>
        <name>Brush_Write</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>origin</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>newFormat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="57" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="1624" bodyend="1777"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1aa39e696e1f0ebf0b350dcad13ebc5be6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_Write</definition>
        <argsstring>(brush_t *b, CMemFile *pMemFile, const idVec3 &amp;origin, bool NewFormat)</argsstring>
        <name>Brush_Write</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>CMemFile *</type>
          <declname>pMemFile</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>origin</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>NewFormat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="58" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="1807" bodyend="1963"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a30ae7845feec88ef6c60bfea4ca065af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_RemoveEmptyFaces</definition>
        <argsstring>(brush_t *b)</argsstring>
        <name>Brush_RemoveEmptyFaces</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="59" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="3275" bodyend="3291"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1aeea912ecb829235a461d030f262b0150" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_winding" kindref="compound">idWinding</ref> *</type>
        <definition>idWinding* Brush_MakeFaceWinding</definition>
        <argsstring>(brush_t *b, face_t *face, bool keepOnPlaneWinding=false)</argsstring>
        <name>Brush_MakeFaceWinding</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>face</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepOnPlaneWinding</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="60" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="686" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a1898045decc90d1c7c02c4ce33cd9835" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_SetTextureName</definition>
        <argsstring>(brush_t *b, const char *name)</argsstring>
        <name>Brush_SetTextureName</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="61" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="2787" bodyend="2797"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a48851717295a5e0a702a2353e4c71655" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_Print</definition>
        <argsstring>(brush_t *b)</argsstring>
        <name>Brush_Print</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="62" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="4969" bodyend="4977"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a83eba6c9f045af4384288734974e85cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_FitTexture</definition>
        <argsstring>(brush_t *b, float height, float width)</argsstring>
        <name>Brush_FitTexture</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>height</declname>
        </param>
        <param>
          <type>float</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="63" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="5197" bodyend="5202"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a4bd0fb23012b6ad42b27115e7f7deefa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_SetEpair</definition>
        <argsstring>(brush_t *b, const char *pKey, const char *pValue)</argsstring>
        <name>Brush_SetEpair</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pKey</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="64" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="1582" bodyend="1594"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1ae47e77f4ab3c9b062d256e817195ef96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Brush_GetKeyValue</definition>
        <argsstring>(brush_t *b, const char *pKey)</argsstring>
        <name>Brush_GetKeyValue</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pKey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="65" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="1601" bodyend="1615"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a03bd50cd7d4a00bd25e99afc2e33bb85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* Brush_Name</definition>
        <argsstring>(brush_t *b)</argsstring>
        <name>Brush_Name</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="66" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="100" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1aa09f670d8c4fe7ac1bed25ad985b509e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_RebuildBrush</definition>
        <argsstring>(brush_t *b, idVec3 vMins, idVec3 vMaxs, bool patch=true)</argsstring>
        <name>Brush_RebuildBrush</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>vMins</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>vMaxs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>patch</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="67" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/PMESH.CPP" bodystart="816" bodyend="902"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1aa58fe342018f6e4a777a6ab5c30f5258" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_GetBounds</definition>
        <argsstring>(brush_t *b, idBounds &amp;bo)</argsstring>
        <name>Brush_GetBounds</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classid_bounds" kindref="compound">idBounds</ref> &amp;</type>
          <declname>bo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="68" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="5204" bodyend="5220"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a08fb20ccc2c065327f398b13a40fc6cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
        <definition>face_t* Face_Alloc</definition>
        <argsstring>(void)</argsstring>
        <name>Face_Alloc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="70" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="251" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a41952f3f7150da2337209f08f37177ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Face_Free</definition>
        <argsstring>(face_t *f)</argsstring>
        <name>Face_Free</name>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="71" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="268" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a11b4599a6a2a00e2aef21929a684b9fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
        <definition>face_t* Face_Clone</definition>
        <argsstring>(face_t *f)</argsstring>
        <name>Face_Clone</name>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="72" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="285" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1afb991733a2e4b14ad94ea1b853540cf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Face_MakePlane</definition>
        <argsstring>(face_t *f)</argsstring>
        <name>Face_MakePlane</name>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="73" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="525" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a78fd86f6ca6978c6d2b28171d15ae573" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Face_Draw</definition>
        <argsstring>(face_t *face)</argsstring>
        <name>Face_Draw</name>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>face</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="74" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="4527" bodyend="4540"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a7e1a1a86b284f2045ac5dabfe3a67c5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Face_TextureVectors</definition>
        <argsstring>(face_t *f, float STfromXYZ[2][4])</argsstring>
        <name>Face_TextureVectors</name>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>float</type>
          <declname>STfromXYZ</declname>
          <array>[2][4]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="75" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="418" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a5c7078e5687ce662b08bd2dc40951b33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Face_FitTexture</definition>
        <argsstring>(face_t *face, float height, float width)</argsstring>
        <name>Face_FitTexture</name>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>face</declname>
        </param>
        <param>
          <type>float</type>
          <declname>height</declname>
        </param>
        <param>
          <type>float</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="76" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="5148" bodyend="5190"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a6ba217be73d491ba5905fef290494d1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SetFaceTexdef</definition>
        <argsstring>(brush_t *b, face_t *f, texdef_t *texdef, brushprimit_texdef_t *brushprimit_texdef, bool bFitScale=false)</argsstring>
        <name>SetFaceTexdef</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classtexdef__t" kindref="compound">texdef_t</ref> *</type>
          <declname>texdef</declname>
        </param>
        <param>
          <type><ref refid="classbrushprimit__texdef__t" kindref="compound">brushprimit_texdef_t</ref> *</type>
          <declname>brushprimit_texdef</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bFitScale</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="77" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="2727" bodyend="2762"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_8h_1a02e53e2956b838af00400c31d43bddd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int AddPlanept</definition>
        <argsstring>(idVec3 *f)</argsstring>
        <name>AddPlanept</name>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h" line="79" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.cpp" bodystart="2841" bodyend="2858"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>brush.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*<sp/><sp/><sp/>Brush_Alloc();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_Free<sp/>(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bRemoveNode<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_MemorySize(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_MakeSided<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sides);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_MakeSidedCone<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sides);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_Move<sp/>(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>move,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bSnap<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>updateOrigin<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_MoveVertex(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;vertex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;delta,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;end,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bSnap);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_ResetFaceOriginals(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*<sp/><sp/><sp/>Brush_Parse<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>origin);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><ref refid="structface__s" kindref="compound">face_t</ref><sp/>*<sp/><sp/><sp/><sp/>Brush_Ray<sp/>(<ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>origin,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>dir,<sp/><ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*dist,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>testPrimitive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_RemoveFromList<sp/>(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_AddToList<sp/>(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/><ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*list);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_Build(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bSnap<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bMarkMap<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bConvert<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>updateLights<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_BuildWindings(<sp/><ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bSnap<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keepOnPlaneWinding<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>updateLights<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>makeFacePlanes<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*<sp/><sp/><sp/>Brush_Clone<sp/>(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*<sp/><sp/><sp/>Brush_FullClone(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*<sp/><sp/><sp/>Brush_Create<sp/>(<ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>mins,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>maxs,<sp/><ref refid="classtexdef__t" kindref="compound">texdef_t</ref><sp/>*texdef);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_Draw(<sp/><ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bSelected<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_DrawXY(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nViewType,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bSelected<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignoreViewType<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_SplitBrushByFace<sp/>(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*in,<sp/><ref refid="structface__s" kindref="compound">face_t</ref><sp/>*f,<sp/><ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>**front,<sp/><ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>**back);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_SelectFaceForDragging<sp/>(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/><ref refid="structface__s" kindref="compound">face_t</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shear);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_SetTexture<sp/>(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/><ref refid="classtexdef__t" kindref="compound">texdef_t</ref><sp/>*texdef,<sp/><ref refid="classbrushprimit__texdef__t" kindref="compound">brushprimit_texdef_t</ref><sp/>*brushprimit_texdef,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bFitScale<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_SideSelect<sp/>(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>origin,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>dir,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shear);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_SnapToGrid(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*pb);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_Rotate(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>vAngle,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>vOrigin,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bBuild<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_MakeSidedSphere(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sides);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_Write<sp/>(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/>FILE<sp/>*f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;origin,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>newFormat);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_Write<sp/>(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/>CMemFile*<sp/>pMemFile,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;origin,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>NewFormat);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_RemoveEmptyFaces<sp/>(<sp/><ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b<sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><ref refid="classid_winding" kindref="compound">idWinding</ref><sp/>*<sp/>Brush_MakeFaceWinding<sp/>(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/><ref refid="structface__s" kindref="compound">face_t</ref><sp/>*face,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keepOnPlaneWinding<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_SetTextureName(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_Print(<ref refid="structbrush__s" kindref="compound">brush_t</ref>*<sp/>b);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_FitTexture(<sp/><ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width<sp/>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_SetEpair(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pKey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pValue);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Brush_GetKeyValue(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pKey);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Brush_Name(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_RebuildBrush(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>vMins,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>vMaxs,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>patch<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Brush_GetBounds(<sp/><ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>&amp;bo<sp/>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><ref refid="structface__s" kindref="compound">face_t</ref><sp/>*<sp/><sp/><sp/><sp/>Face_Alloc(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Face_Free(<sp/><ref refid="structface__s" kindref="compound">face_t</ref><sp/>*f<sp/>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><ref refid="structface__s" kindref="compound">face_t</ref><sp/>*<sp/><sp/><sp/><sp/>Face_Clone<sp/>(<ref refid="structface__s" kindref="compound">face_t</ref><sp/>*f);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Face_MakePlane<sp/>(<ref refid="structface__s" kindref="compound">face_t</ref><sp/>*f);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Face_Draw(<sp/><ref refid="structface__s" kindref="compound">face_t</ref><sp/>*face<sp/>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Face_TextureVectors<sp/>(<ref refid="structface__s" kindref="compound">face_t</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>STfromXYZ[2][4]);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Face_FitTexture(<sp/><ref refid="structface__s" kindref="compound">face_t</ref><sp/>*<sp/>face,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width<sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetFaceTexdef<sp/>(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/><ref refid="structface__s" kindref="compound">face_t</ref><sp/>*f,<sp/><ref refid="classtexdef__t" kindref="compound">texdef_t</ref><sp/>*texdef,<sp/><ref refid="classbrushprimit__texdef__t" kindref="compound">brushprimit_texdef_t</ref><sp/>*brushprimit_texdef,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bFitScale<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddPlanept<sp/>(<ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>*f);</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrush.h"/>
  </compounddef>
</doxygen>
