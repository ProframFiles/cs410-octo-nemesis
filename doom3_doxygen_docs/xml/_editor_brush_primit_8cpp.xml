<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_editor_brush_primit_8cpp" kind="file">
    <compoundname>EditorBrushPrimit.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../../idlib/precompiled.h</includes>
    <includes refid="_q_e3_8_h" local="yes">qe3.h</includes>
    <innerclass refid="classid_vec3_d" prot="public">idVec3D</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_editor_brush_primit_8cpp_1af0dae59815de217cff678ef4c8fec416" prot="public" static="no">
        <name>ZERO_EPSILON</name>
        <initializer>1.0E-6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="34" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_editor_brush_primit_8cpp_1ac3ce20a364afeae73b3fc41cd421a495" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool txlock_bRotation</definition>
        <argsstring></argsstring>
        <name>txlock_bRotation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="775" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="775" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_editor_brush_primit_8cpp_1abd87c4f3054296fa42b3ea22f2654c05" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int txl_nAxis</definition>
        <argsstring></argsstring>
        <name>txl_nAxis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="778" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="778" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_editor_brush_primit_8cpp_1ac6967bb8397697e5621f3a946b2a61d7" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double txl_fDeg</definition>
        <argsstring></argsstring>
        <name>txl_fDeg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="779" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="779" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_editor_brush_primit_8cpp_1a65232c22b2effe5630121737d1f433b3" prot="public" static="no" mutable="no">
        <type><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref></type>
        <definition>idVec3D txl_vOrigin</definition>
        <argsstring></argsstring>
        <name>txl_vOrigin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="780" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="780" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_editor_brush_primit_8cpp_1a3fcb2230d990a51ccaf264d6a1c73ec8" prot="public" static="no" mutable="no">
        <type><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref></type>
        <definition>idVec3D txl_matrix[3]</definition>
        <argsstring>[3]</argsstring>
        <name>txl_matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="783" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="783" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_editor_brush_primit_8cpp_1a747cc8550d5a58b51f5092ed79e87706" prot="public" static="no" mutable="no">
        <type><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref></type>
        <definition>idVec3D txl_origin</definition>
        <argsstring></argsstring>
        <name>txl_origin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="784" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="784" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1a3b07366840c3f4b004bddc54a8e05ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double SarrusDet</definition>
        <argsstring>(idVec3D a, idVec3D b, idVec3D c)</argsstring>
        <name>SarrusDet</name>
        <param>
          <type><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="53" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="53" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1a746f2a6f4139e3ac83eb3ab0abe69816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ComputeAxisBase</definition>
        <argsstring>(idVec3 &amp;normal, idVec3D &amp;texS, idVec3D &amp;texT)</argsstring>
        <name>ComputeAxisBase</name>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>normal</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref> &amp;</type>
          <declname>texS</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref> &amp;</type>
          <declname>texT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="64" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="64" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1a83515b7511629080fdb433b2ee7205b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FaceToBrushPrimitFace</definition>
        <argsstring>(face_t *f)</argsstring>
        <name>FaceToBrushPrimitFace</name>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="98" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="98" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1a6d9b506ea94a71491c91a5d8db9cbe25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EmitBrushPrimitTextureCoordinates</definition>
        <argsstring>(face_t *f, idWinding *w, patchMesh_t *patch)</argsstring>
        <name>EmitBrushPrimitTextureCoordinates</name>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classid_winding" kindref="compound">idWinding</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="structpatch_mesh__t" kindref="compound">patchMesh_t</ref> *</type>
          <declname>patch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="160" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="160" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1a30769e53fd3f454554ac07c2bbdd9ce4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BrushPrimit_Parse</definition>
        <argsstring>(brush_t *b, bool newFormat, const idVec3 origin)</argsstring>
        <name>BrushPrimit_Parse</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>newFormat</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>origin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="212" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="212" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1a243a1c5158e157d1fea1e09df08d8187" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TexMatToFakeTexCoords</definition>
        <argsstring>(float texMat[2][3], float shift[2], float *rot, float scale[2])</argsstring>
        <name>TexMatToFakeTexCoords</name>
        <param>
          <type>float</type>
          <declname>texMat</declname>
          <array>[2][3]</array>
        </param>
        <param>
          <type>float</type>
          <declname>shift</declname>
          <array>[2]</array>
        </param>
        <param>
          <type>float *</type>
          <declname>rot</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
          <array>[2]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="369" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="369" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1a1beadc2acc488f2e614238d2f8b74ee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FakeTexCoordsToTexMat</definition>
        <argsstring>(float shift[2], float rot, float scale[2], float texMat[2][3])</argsstring>
        <name>FakeTexCoordsToTexMat</name>
        <param>
          <type>float</type>
          <declname>shift</declname>
          <array>[2]</array>
        </param>
        <param>
          <type>float</type>
          <declname>rot</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
          <array>[2]</array>
        </param>
        <param>
          <type>float</type>
          <declname>texMat</declname>
          <array>[2][3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="416" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="416" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1a55d43e1439ccec90a6da33e56c036d7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConvertTexMatWithQTexture</definition>
        <argsstring>(float texMat1[2][3], const idMaterial *qtex1, float texMat2[2][3], const idMaterial *qtex2, float sScale=1.0, float tScale=1.0)</argsstring>
        <name>ConvertTexMatWithQTexture</name>
        <param>
          <type>float</type>
          <declname>texMat1</declname>
          <array>[2][3]</array>
        </param>
        <param>
          <type>const <ref refid="classid_material" kindref="compound">idMaterial</ref> *</type>
          <declname>qtex1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>texMat2</declname>
          <array>[2][3]</array>
        </param>
        <param>
          <type>const <ref refid="classid_material" kindref="compound">idMaterial</ref> *</type>
          <declname>qtex2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sScale</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>float</type>
          <declname>tScale</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="431" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="431" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1a71c65f0c0fe85fcbce512a663b3fe21a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConvertTexMatWithQTexture</definition>
        <argsstring>(brushprimit_texdef_t *texMat1, const idMaterial *qtex1, brushprimit_texdef_t *texMat2, const idMaterial *qtex2, float sScale, float tScale)</argsstring>
        <name>ConvertTexMatWithQTexture</name>
        <param>
          <type><ref refid="classbrushprimit__texdef__t" kindref="compound">brushprimit_texdef_t</ref> *</type>
          <declname>texMat1</declname>
        </param>
        <param>
          <type>const <ref refid="classid_material" kindref="compound">idMaterial</ref> *</type>
          <declname>qtex1</declname>
        </param>
        <param>
          <type><ref refid="classbrushprimit__texdef__t" kindref="compound">brushprimit_texdef_t</ref> *</type>
          <declname>texMat2</declname>
        </param>
        <param>
          <type>const <ref refid="classid_material" kindref="compound">idMaterial</ref> *</type>
          <declname>qtex2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sScale</declname>
        </param>
        <param>
          <type>float</type>
          <declname>tScale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="449" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="449" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1ac14ab112a3f964621333cebfbcbd3aca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Face_MoveTexture_BrushPrimit</definition>
        <argsstring>(face_t *f, idVec3 delta)</argsstring>
        <name>Face_MoveTexture_BrushPrimit</name>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="459" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="459" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1a39100a5346fdbd5c4704e26d935fbd02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Select_ShiftTexture_BrushPrimit</definition>
        <argsstring>(face_t *f, float x, float y, bool autoAdjust)</argsstring>
        <name>Select_ShiftTexture_BrushPrimit</name>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>autoAdjust</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="505" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="505" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1af99ae66995b09786f07707b44c2f727d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ComputeBest2DVector</definition>
        <argsstring>(idVec3 v, idVec3 X, idVec3 Y, int &amp;x, int &amp;y)</argsstring>
        <name>ComputeBest2DVector</name>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>X</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>Y</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="531" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="531" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1a4673e831f23e05bcfe68da97169ea279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MatrixForPoints</definition>
        <argsstring>(idVec3D M[3], idVec3D D[2], brushprimit_texdef_t *T)</argsstring>
        <name>MatrixForPoints</name>
        <param>
          <type><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref></type>
          <declname>M</declname>
          <array>[3]</array>
        </param>
        <param>
          <type><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref></type>
          <declname>D</declname>
          <array>[2]</array>
        </param>
        <param>
          <type><ref refid="classbrushprimit__texdef__t" kindref="compound">brushprimit_texdef_t</ref> *</type>
          <declname>T</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="563" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="563" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1aa8d8a4f6e18c9b4938d4c00d2d161c4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Face_FitTexture_BrushPrimit</definition>
        <argsstring>(face_t *f, idVec3 mins, idVec3 maxs, float height, float width)</argsstring>
        <name>Face_FitTexture_BrushPrimit</name>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>mins</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>maxs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>height</declname>
        </param>
        <param>
          <type>float</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="609" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="609" bodyend="726"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1ac86820b4fa4b041a4c8957364f1249c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Face_ScaleTexture_BrushPrimit</definition>
        <argsstring>(face_t *face, float sS, float sT)</argsstring>
        <name>Face_ScaleTexture_BrushPrimit</name>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>face</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sS</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="732" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="732" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1ac0e00d1375171cde7606422f83edafc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Face_RotateTexture_BrushPrimit</definition>
        <argsstring>(face_t *face, float amount, idVec3 origin)</argsstring>
        <name>Face_RotateTexture_BrushPrimit</name>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>face</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amount</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>origin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="749" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="749" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1aebb70f74da0875d4045942312a80d663" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TextureLockTransformation_BrushPrimit</definition>
        <argsstring>(face_t *f)</argsstring>
        <name>TextureLockTransformation_BrushPrimit</name>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="790" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="790" bodyend="902"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1ad0b752021c8d68c6221d1226c7bf9a23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RotateFaceTexture_BrushPrimit</definition>
        <argsstring>(face_t *f, int nAxis, float fDeg, idVec3 vOrigin)</argsstring>
        <name>RotateFaceTexture_BrushPrimit</name>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nAxis</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fDeg</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>vOrigin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="909" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="909" bodyend="916"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1a2a7ab21470e47a11824515c796191d2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ApplyMatrix_BrushPrimit</definition>
        <argsstring>(face_t *f, idMat3 matrix, idVec3 origin)</argsstring>
        <name>ApplyMatrix_BrushPrimit</name>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classid_mat3" kindref="compound">idMat3</ref></type>
          <declname>matrix</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>origin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="926" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="926" bodyend="934"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1a561b4af2034a54c241e2c3927e2cb052" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BPMatMul</definition>
        <argsstring>(float A[2][3], float B[2][3], float C[2][3])</argsstring>
        <name>BPMatMul</name>
        <param>
          <type>float</type>
          <declname>A</declname>
          <array>[2][3]</array>
        </param>
        <param>
          <type>float</type>
          <declname>B</declname>
          <array>[2][3]</array>
        </param>
        <param>
          <type>float</type>
          <declname>C</declname>
          <array>[2][3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="941" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="941" bodyend="948"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1ad038551d1d4e1fae53a6e8575ca18f91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BPMatDump</definition>
        <argsstring>(float A[2][3])</argsstring>
        <name>BPMatDump</name>
        <param>
          <type>float</type>
          <declname>A</declname>
          <array>[2][3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="954" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="954" bodyend="956"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1a075a4ca4dfa8b39700535cc40e0cbb84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BPMatRotate</definition>
        <argsstring>(float A[2][3], float theta)</argsstring>
        <name>BPMatRotate</name>
        <param>
          <type>float</type>
          <declname>A</declname>
          <array>[2][3]</array>
        </param>
        <param>
          <type>float</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="962" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="962" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1af85e7388ad765c1c87d82d2640b7bcad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Face_GetScale_BrushPrimit</definition>
        <argsstring>(face_t *face, float *s, float *t, float *rot)</argsstring>
        <name>Face_GetScale_BrushPrimit</name>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>face</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>rot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="974" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="974" bodyend="1029"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1a175d62f81941d435bf09659f63363a92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Face_SetExplicitScale_BrushPrimit</definition>
        <argsstring>(face_t *face, float s, float t)</argsstring>
        <name>Face_SetExplicitScale_BrushPrimit</name>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>face</declname>
        </param>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="1035" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="1035" bodyend="1098"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1a938a75563e71fe654900ffe450708e64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Face_FlipTexture_BrushPrimit</definition>
        <argsstring>(face_t *f, bool y)</argsstring>
        <name>Face_FlipTexture_BrushPrimit</name>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="1101" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="1101" bodyend="1136"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1a0965578f71fddcb3667d3259bc17594e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Brush_FlipTexture_BrushPrimit</definition>
        <argsstring>(brush_t *b, bool y)</argsstring>
        <name>Brush_FlipTexture_BrushPrimit</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="1138" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="1138" bodyend="1142"/>
      </memberdef>
      <memberdef kind="function" id="_editor_brush_primit_8cpp_1ae1de26303ecd57128cf98732848a27b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Face_SetAxialScale_BrushPrimit</definition>
        <argsstring>(face_t *face, bool y)</argsstring>
        <name>Face_SetAxialScale_BrushPrimit</name>
        <param>
          <type><ref refid="structface__s" kindref="compound">face_t</ref> *</type>
          <declname>face</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" line="1144" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp" bodystart="1144" bodyend="1238"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;qe3.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZERO_EPSILON<sp/><sp/><sp/><sp/>1.0E-6</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="classid_vec3_d" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/>y,<sp/>z;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator[](<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(&amp;x)[index];</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Zero()<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>y<sp/>=<sp/>z<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal">};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>compute<sp/>a<sp/>determinant<sp/>using<sp/>Sarrus<sp/>rule<sp/>++timo<sp/>&quot;inline&quot;<sp/>this<sp/>with<sp/>a<sp/>macro<sp/>NOTE::<sp/>the<sp/>three<sp/>idVec3D<sp/>are<sp/>understood<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>columns<sp/>of<sp/>the<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SarrusDet(<ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>a,<sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>b,<sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)a[0]<sp/>*<sp/>(double)b[1]<sp/>*<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)c[2]<sp/>+<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)b[0]<sp/>*<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)c[1]<sp/>*<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)a[2]<sp/>+<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)c[0]<sp/>*<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)a[1]<sp/>*<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)b[2]<sp/>-<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)c[0]<sp/>*<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)b[1]<sp/>*<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)a[2]<sp/>-<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)a[1]<sp/>*<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)b[0]<sp/>*<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)c[2]<sp/>-<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)a[0]<sp/>*<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)b[2]<sp/>*<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)c[1];</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>++timo<sp/>replace<sp/>everywhere<sp/>texX<sp/>by<sp/>texS<sp/>etc.<sp/>(<sp/>&gt;<sp/>and<sp/>in<sp/>q3map<sp/>!)<sp/>NOTE::<sp/>ComputeAxisBase<sp/>here<sp/>and<sp/>in<sp/>q3map<sp/>code<sp/>must</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>always<sp/>BE<sp/>THE<sp/>SAME<sp/>!<sp/>WARNING::<sp/>special<sp/>case<sp/>behaviour<sp/>of<sp/>atan2(y,x)<sp/>&lt;-&gt;<sp/>atan(y/x)<sp/>might<sp/>not<sp/>be<sp/>the<sp/>same<sp/>everywhere</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>when<sp/>x<sp/>==<sp/>0<sp/>rotation<sp/>by<sp/>(0,RotY,RotZ)<sp/>assigns<sp/>X<sp/>to<sp/>normal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ComputeAxisBase(<ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;normal,<sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>&amp;texS,<sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>&amp;texT)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>RotY,<sp/>RotZ;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>some<sp/>cleaning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idMath::Fabs(normal[0])<sp/>&lt;<sp/>1e-6)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normal[0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idMath::Fabs(normal[1])<sp/>&lt;<sp/>1e-6)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normal[1]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idMath::Fabs(normal[2])<sp/>&lt;<sp/>1e-6)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normal[2]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>RotY<sp/>=<sp/>-atan2(normal[2],<sp/>idMath::Sqrt(normal[1]<sp/>*<sp/>normal[1]<sp/>+<sp/>normal[0]<sp/>*<sp/>normal[0]));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>RotZ<sp/>=<sp/>atan2(normal[1],<sp/>normal[0]);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rotate<sp/>(0,1,0)<sp/>and<sp/>(0,0,1)<sp/>to<sp/>compute<sp/>texS<sp/>and<sp/>texT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>texS[0]<sp/>=<sp/>-sin(RotZ);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>texS[1]<sp/>=<sp/>cos(RotZ);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>texS[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>texT<sp/>vector<sp/>is<sp/>along<sp/>-Z<sp/>(<sp/>T<sp/>texture<sp/>coorinates<sp/>axis<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>texT[0]<sp/>=<sp/>-sin(RotY)<sp/>*<sp/>cos(RotZ);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>texT[1]<sp/>=<sp/>-sin(RotY)<sp/>*<sp/>sin(RotZ);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>texT[2]<sp/>=<sp/>-cos(RotY);</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>=======================================================================================================================</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>=======================================================================================================================</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FaceToBrushPrimitFace(<ref refid="structface__s" kindref="compound">face_t</ref><sp/>*f)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>texX,<sp/>texY;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>proj;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ST<sp/>of<sp/>(0,0)<sp/>(1,0)<sp/>(0,1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec5" kindref="compound">idVec5</ref><sp/><sp/>ST[3];<sp/><sp/></highlight><highlight class="comment">//<sp/>[<sp/>point<sp/>index<sp/>]<sp/>[<sp/>xyz<sp/>ST<sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>++timo<sp/>not<sp/>used<sp/>as<sp/>long<sp/>as<sp/>brushprimit_texdef<sp/>and<sp/>texdef<sp/>are<sp/>static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>f-&gt;brushprimit_texdef.contents=f-&gt;texdef.contents;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>f-&gt;brushprimit_texdef.flags=f-&gt;texdef.flags;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>f-&gt;brushprimit_texdef.value=f-&gt;texdef.value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strcpy(f-&gt;brushprimit_texdef.name,f-&gt;texdef.name);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;plane[0]<sp/>==<sp/>0.0f<sp/>&amp;&amp;<sp/>f-&gt;plane[1]<sp/>==<sp/>0.0f<sp/>&amp;&amp;<sp/>f-&gt;plane[2]<sp/>==<sp/>0.0f)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(</highlight><highlight class="stringliteral">&quot;Warning<sp/>:<sp/>f-&gt;plane.normal<sp/>is<sp/>(0,0,0)<sp/>in<sp/>FaceToBrushPrimitFace\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>d_texture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f-&gt;d_texture)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(</highlight><highlight class="stringliteral">&quot;Warning<sp/>:<sp/>f.d_texture<sp/>is<sp/>NULL<sp/>in<sp/>FaceToBrushPrimitFace\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>axis<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>ComputeAxisBase(f-&gt;plane.Normal(),<sp/>texX,<sp/>texY);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>projection<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorCopy(<sp/>f-&gt;plane,<sp/>proj<sp/>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorScale(proj,<sp/>-f-&gt;plane[3],<sp/>proj);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(0,0)<sp/>in<sp/>plane<sp/>axis<sp/>base<sp/>is<sp/>(0,0,0)<sp/>in<sp/>world<sp/>coordinates<sp/>+<sp/>projection<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>affine<sp/>plane<sp/>(1,0)<sp/>in<sp/>plane<sp/>axis<sp/>base<sp/>is<sp/>texX<sp/>in<sp/>world<sp/>coordinates<sp/>+<sp/>projection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>affine<sp/>plane<sp/>(0,1)<sp/>in<sp/>plane<sp/>axis<sp/>base<sp/>is<sp/>texY<sp/>in<sp/>world<sp/>coordinates<sp/>+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>projection<sp/>on<sp/>the<sp/>affine<sp/>plane<sp/>use<sp/>old<sp/>texture<sp/>code<sp/>to<sp/>compute<sp/>the<sp/>ST<sp/>coords<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>these<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorCopy(proj,<sp/>ST[0]);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>EmitTextureCoordinates(ST[0],<sp/>f-&gt;d_texture,<sp/>f);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorCopy(texX,<sp/>ST[1]);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorAdd(ST[1],<sp/>proj,<sp/>ST[1]);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>EmitTextureCoordinates(ST[1],<sp/>f-&gt;d_texture,<sp/>f);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorCopy(texY,<sp/>ST[2]);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorAdd(ST[2],<sp/>proj,<sp/>ST[2]);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>EmitTextureCoordinates(ST[2],<sp/>f-&gt;d_texture,<sp/>f);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>texture<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[0][2]<sp/>=<sp/>ST[0][3];</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[1][2]<sp/>=<sp/>ST[0][4];</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[0][0]<sp/>=<sp/>ST[1][3]<sp/>-<sp/>f-&gt;brushprimit_texdef.coords[0][2];</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[1][0]<sp/>=<sp/>ST[1][4]<sp/>-<sp/>f-&gt;brushprimit_texdef.coords[1][2];</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[0][1]<sp/>=<sp/>ST[2][3]<sp/>-<sp/>f-&gt;brushprimit_texdef.coords[0][2];</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[1][1]<sp/>=<sp/>ST[2][4]<sp/>-<sp/>f-&gt;brushprimit_texdef.coords[1][2];</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>compute<sp/>texture<sp/>coordinates<sp/>for<sp/>the<sp/>winding<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EmitBrushPrimitTextureCoordinates(<ref refid="structface__s" kindref="compound">face_t</ref><sp/>*f,<sp/><ref refid="classid_winding" kindref="compound">idWinding</ref><sp/>*w,<sp/><ref refid="structpatch_mesh__t" kindref="compound">patchMesh_t</ref><sp/>*patch)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>texX,<sp/>texY;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f==<sp/>NULL<sp/>||<sp/>(w<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>patch<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>axis<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>ComputeAxisBase(f-&gt;plane.Normal(),<sp/>texX,<sp/>texY);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>case<sp/>the<sp/>texcoords<sp/>matrix<sp/>is<sp/>empty,<sp/>build<sp/>a<sp/>default<sp/>one<sp/>same<sp/>behaviour<sp/>as<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scale[0]==0<sp/>&amp;&amp;<sp/>scale[1]==0<sp/>in<sp/>old<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[0][0]<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[1][0]<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[0][1]<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[1][1]<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[0][0]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[1][1]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConvertTexMatWithQTexture(&amp;f-&gt;brushprimit_texdef,<sp/>NULL,<sp/>&amp;f-&gt;brushprimit_texdef,<sp/>f-&gt;d_texture);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>w-&gt;GetNumPoints();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>DotProduct((*w)[i],<sp/>texX);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>DotProduct((*w)[i],<sp/>texY);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*w)[i][3]<sp/>=<sp/>f-&gt;brushprimit_texdef.coords[0][0]<sp/>*<sp/>x<sp/>+<sp/>f-&gt;brushprimit_texdef.coords[0][1]<sp/>*<sp/>y<sp/>+<sp/>f-&gt;brushprimit_texdef.coords[0][2];</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*w)[i][4]<sp/>=<sp/>f-&gt;brushprimit_texdef.coords[1][0]<sp/>*<sp/>x<sp/>+<sp/>f-&gt;brushprimit_texdef.coords[1][1]<sp/>*<sp/>y<sp/>+<sp/>f-&gt;brushprimit_texdef.coords[1][2];</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(patch)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>patch-&gt;width;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>patch-&gt;height;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>DotProduct(patch-&gt;ctrl(i,<sp/>j).xyz,<sp/>texX);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>DotProduct(patch-&gt;ctrl(i,<sp/>j).xyz,<sp/>texY);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;ctrl(i,<sp/>j).st.x<sp/>=<sp/>f-&gt;brushprimit_texdef.coords[0][0]<sp/>*<sp/>x<sp/>+<sp/>f-&gt;brushprimit_texdef.coords[0][1]<sp/>*<sp/>y<sp/>+<sp/>f-&gt;brushprimit_texdef.coords[0][2];</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch-&gt;ctrl(i,<sp/>j).st.y<sp/>=<sp/>f-&gt;brushprimit_texdef.coords[1][0]<sp/>*<sp/>x<sp/>+<sp/>f-&gt;brushprimit_texdef.coords[1][1]<sp/>*<sp/>y<sp/>+<sp/>f-&gt;brushprimit_texdef.coords[1][2];</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>parse<sp/>a<sp/>brush<sp/>in<sp/>brush<sp/>primitive<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BrushPrimit_Parse(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>newFormat,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>origin)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structface__s" kindref="compound">face_t</ref><sp/><sp/>*f;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>GetToken(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(token,<sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Warning(</highlight><highlight class="stringliteral">&quot;parsing<sp/>brush<sp/>primitive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!GetToken(</highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(token,<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reading<sp/>of<sp/>b-&gt;epairs<sp/>if<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(token,<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseEpair(&amp;b-&gt;epairs);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>a<sp/>face</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>Face_Alloc();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!b-&gt;brush_faces)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;brush_faces<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structface__s" kindref="compound">face_t</ref><sp/><sp/>*scan;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(scan<sp/>=<sp/>b-&gt;brush_faces;<sp/>scan-&gt;next;<sp/>scan<sp/>=<sp/>scan-&gt;next)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scan-&gt;next<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newFormat)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>three<sp/>point<sp/>plane<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>plane;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetToken(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plane[j]<sp/>=<sp/>atof(token);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;plane<sp/>=<sp/>plane;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;originalPlane<sp/>=<sp/>plane;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;dirty<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//idWinding<sp/>*w<sp/>=<sp/>Brush_MakeFaceWinding(b,<sp/>f,<sp/>true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_winding" kindref="compound">idWinding</ref><sp/>w;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w.BaseForPlane(<sp/>plane<sp/>);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>3;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;planepts[j].x<sp/>=<sp/>w[j].x<sp/>+<sp/>origin.x;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;planepts[j].y<sp/>=<sp/>w[j].y<sp/>+<sp/>origin.y;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;planepts[j].z<sp/>=<sp/>w[j].z<sp/>+<sp/>origin.z;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetToken(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetToken(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(token,<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Warning(</highlight><highlight class="stringliteral">&quot;parsing<sp/>brush&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>3;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetToken(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;planepts[i][j]<sp/>=<sp/>atof(token);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetToken(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(token,<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Warning(</highlight><highlight class="stringliteral">&quot;parsing<sp/>brush&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>texture<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetToken(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(token,<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Warning(</highlight><highlight class="stringliteral">&quot;parsing<sp/>brush<sp/>primitive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetToken(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(token,<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Warning(</highlight><highlight class="stringliteral">&quot;parsing<sp/>brush<sp/>primitive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>3;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetToken(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[0][j]<sp/>=<sp/>atof(token);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetToken(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(token,<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Warning(</highlight><highlight class="stringliteral">&quot;parsing<sp/>brush<sp/>primitive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetToken(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(token,<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Warning(</highlight><highlight class="stringliteral">&quot;parsing<sp/>brush<sp/>primitive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>3;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetToken(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[1][j]<sp/>=<sp/>atof(token);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetToken(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(token,<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Warning(</highlight><highlight class="stringliteral">&quot;parsing<sp/>brush<sp/>primitive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetToken(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(token,<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Warning(</highlight><highlight class="stringliteral">&quot;parsing<sp/>brush<sp/>primitive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>texturedef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetToken(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strcpy(f-&gt;texdef.name,<sp/>token);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_qeglobals.mapVersion<sp/>&lt;<sp/>2.0)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;texdef.SetName(va(</highlight><highlight class="stringliteral">&quot;textures/%s&quot;</highlight><highlight class="normal">,<sp/>token));</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;texdef.SetName(token);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TokenAvailable())<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetToken(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetToken(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetToken(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;texdef.value<sp/>=<sp/>atoi(token);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1);</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>compute<sp/>a<sp/>fake<sp/>shift<sp/>scale<sp/>rot<sp/>representation<sp/>from<sp/>the<sp/>texture<sp/>matrix<sp/>these<sp/>shift<sp/>scale<sp/>rot<sp/>values<sp/>are<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>understood<sp/>in<sp/>the<sp/>local<sp/>axis<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TexMatToFakeTexCoords(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>texMat[2][3],<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>shift[2],<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*rot,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale[2])</highlight></codeline>
<codeline lineno="370"><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG</highlight></codeline>
<codeline lineno="372"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>this<sp/>matrix<sp/>is<sp/>orthogonal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idMath::Fabs(texMat[0][0]<sp/>*<sp/>texMat[0][1]<sp/>+<sp/>texMat[1][0]<sp/>*<sp/>texMat[1][1])<sp/>&gt;<sp/>ZERO_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(</highlight><highlight class="stringliteral">&quot;Warning<sp/>:<sp/>non<sp/>orthogonal<sp/>texture<sp/>matrix<sp/>in<sp/>TexMatToFakeTexCoords\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="378"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>scale[0]<sp/>=<sp/>idMath::Sqrt(texMat[0][0]<sp/>*<sp/>texMat[0][0]<sp/>+<sp/>texMat[1][0]<sp/>*<sp/>texMat[1][0]);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>scale[1]<sp/>=<sp/>idMath::Sqrt(texMat[0][1]<sp/>*<sp/>texMat[0][1]<sp/>+<sp/>texMat[1][1]<sp/>*<sp/>texMat[1][1]);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG</highlight></codeline>
<codeline lineno="381"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scale[0]<sp/>&lt;<sp/>ZERO_EPSILON<sp/>||<sp/>scale[1]<sp/>&lt;<sp/>ZERO_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(</highlight><highlight class="stringliteral">&quot;Warning<sp/>:<sp/>unexpected<sp/>scale==0<sp/>in<sp/>TexMatToFakeTexCoords\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="385"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>rotate<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idMath::Fabs(texMat[0][0])<sp/>&lt;<sp/>ZERO_EPSILON)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG</highlight></codeline>
<codeline lineno="389"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>brushprimit_texdef[1][0]<sp/>is<sp/>not<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idMath::Fabs(texMat[1][0])<sp/>&lt;<sp/>ZERO_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(</highlight><highlight class="stringliteral">&quot;Warning<sp/>:<sp/>unexpected<sp/>texdef[1][0]==0<sp/>in<sp/>TexMatToFakeTexCoords\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="394"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rotate<sp/>is<sp/>+-90</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(texMat[1][0]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*rot<sp/>=<sp/>90.0f;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*rot<sp/>=<sp/>-90.0f;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*rot<sp/>=<sp/>RAD2DEG(atan2(texMat[1][0],<sp/>texMat[0][0]));</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>shift[0]<sp/>=<sp/>-texMat[0][2];</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>shift[1]<sp/>=<sp/>texMat[1][2];</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>compute<sp/>back<sp/>the<sp/>texture<sp/>matrix<sp/>from<sp/>fake<sp/>shift<sp/>scale<sp/>rot<sp/>the<sp/>matrix<sp/>returned<sp/>must<sp/>be<sp/>understood<sp/>as<sp/>a<sp/>qtexture_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>with<sp/>width=2<sp/>height=2<sp/>(<sp/>the<sp/>default<sp/>one<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FakeTexCoordsToTexMat(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>shift[2],<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rot,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale[2],<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>texMat[2][3])<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>texMat[0][0]<sp/>=<sp/>scale[0]<sp/>*<sp/>cos(DEG2RAD(rot));</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>texMat[1][0]<sp/>=<sp/>scale[0]<sp/>*<sp/>sin(DEG2RAD(rot));</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>texMat[0][1]<sp/>=<sp/>-1.0f<sp/>*<sp/>scale[1]<sp/>*<sp/>sin(DEG2RAD(rot));</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>texMat[1][1]<sp/>=<sp/>scale[1]<sp/>*<sp/>cos(DEG2RAD(rot));</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>texMat[0][2]<sp/>=<sp/>-shift[0];</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>texMat[1][2]<sp/>=<sp/>shift[1];</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>convert<sp/>a<sp/>texture<sp/>matrix<sp/>between<sp/>two<sp/>qtexture_t<sp/>if<sp/>NULL<sp/>for<sp/>qtexture_t,<sp/>basic<sp/>2x2<sp/>texture<sp/>is<sp/>assumed<sp/>(<sp/>straight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>mapping<sp/>between<sp/>s/t<sp/>coordinates<sp/>and<sp/>geometric<sp/>coordinates<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConvertTexMatWithQTexture(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>texMat1[2][3],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_material" kindref="compound">idMaterial</ref><sp/>*qtex1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>texMat2[2][3],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_material" kindref="compound">idMaterial</ref><sp/>*qtex2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sScale<sp/>=<sp/>1.0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tScale<sp/>=<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>s1,<sp/>s2;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>(qtex1<sp/>?<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(qtex1-&gt;GetEditorImage()-&gt;uploadWidth)<sp/>:<sp/>2.0f)<sp/>/<sp/>(qtex2<sp/>?<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(qtex2-&gt;GetEditorImage()-&gt;uploadWidth)<sp/>:<sp/>2.0f);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>s2<sp/>=<sp/>(qtex1<sp/>?<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(qtex1-&gt;GetEditorImage()-&gt;uploadHeight)<sp/>:<sp/>2.0f)<sp/>/<sp/>(qtex2<sp/>?<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(qtex2-&gt;GetEditorImage()-&gt;uploadHeight)<sp/>:<sp/>2.0f);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>s1<sp/>*=<sp/>sScale;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>s2<sp/>*=<sp/>tScale;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>texMat2[0][0]<sp/>=<sp/>s1<sp/>*<sp/>texMat1[0][0];</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>texMat2[0][1]<sp/>=<sp/>s1<sp/>*<sp/>texMat1[0][1];</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>texMat2[0][2]<sp/>=<sp/>s1<sp/>*<sp/>texMat1[0][2];</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>texMat2[1][0]<sp/>=<sp/>s2<sp/>*<sp/>texMat1[1][0];</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>texMat2[1][1]<sp/>=<sp/>s2<sp/>*<sp/>texMat1[1][1];</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>texMat2[1][2]<sp/>=<sp/>s2<sp/>*<sp/>texMat1[1][2];</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/>=======================================================================================================================</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/>=======================================================================================================================</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConvertTexMatWithQTexture(<ref refid="classbrushprimit__texdef__t" kindref="compound">brushprimit_texdef_t</ref><sp/>*texMat1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_material" kindref="compound">idMaterial</ref><sp/>*qtex1,<sp/><ref refid="classbrushprimit__texdef__t" kindref="compound">brushprimit_texdef_t</ref><sp/>*texMat2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_material" kindref="compound">idMaterial</ref><sp/>*qtex2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sScale,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tScale)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>ConvertTexMatWithQTexture(texMat1-&gt;coords,<sp/>qtex1,<sp/>texMat2-&gt;coords,<sp/>qtex2,<sp/>sScale,<sp/>tScale);</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>texture<sp/>locking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Face_MoveTexture_BrushPrimit(<ref refid="structface__s" kindref="compound">face_t</ref><sp/>*f,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>texS,<sp/>texT;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>tx,<sp/>ty;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>M[3];<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>columns<sp/>of<sp/>the<sp/>matrix<sp/>..<sp/>easier<sp/>that<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>det;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>D[2];</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>plane<sp/>axis<sp/>base<sp/>(<sp/>doesn&apos;t<sp/>change<sp/>with<sp/>translation<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>ComputeAxisBase(f-&gt;plane.Normal(),<sp/>texS,<sp/>texT);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>translation<sp/>vector<sp/>in<sp/>plane<sp/>axis<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>tx<sp/>=<sp/>DotProduct(delta,<sp/>texS);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>ty<sp/>=<sp/>DotProduct(delta,<sp/>texT);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>the<sp/>data<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>M[0][0]<sp/>=<sp/>tx;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>M[0][1]<sp/>=<sp/>1.0f<sp/>+<sp/>tx;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>M[0][2]<sp/>=<sp/>tx;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>M[1][0]<sp/>=<sp/>ty;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>M[1][1]<sp/>=<sp/>ty;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>M[1][2]<sp/>=<sp/>1.0f<sp/>+<sp/>ty;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>M[2][0]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>M[2][1]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>M[2][2]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>D[0][0]<sp/>=<sp/>f-&gt;brushprimit_texdef.coords[0][2];</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>D[0][1]<sp/>=<sp/>f-&gt;brushprimit_texdef.coords[0][0]<sp/>+<sp/>f-&gt;brushprimit_texdef.coords[0][2];</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>D[0][2]<sp/>=<sp/>f-&gt;brushprimit_texdef.coords[0][1]<sp/>+<sp/>f-&gt;brushprimit_texdef.coords[0][2];</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>D[1][0]<sp/>=<sp/>f-&gt;brushprimit_texdef.coords[1][2];</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>D[1][1]<sp/>=<sp/>f-&gt;brushprimit_texdef.coords[1][0]<sp/>+<sp/>f-&gt;brushprimit_texdef.coords[1][2];</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>D[1][2]<sp/>=<sp/>f-&gt;brushprimit_texdef.coords[1][1]<sp/>+<sp/>f-&gt;brushprimit_texdef.coords[1][2];</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>SarrusDet(M[0],<sp/>M[1],<sp/>M[2]);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[0][0]<sp/>=<sp/>SarrusDet(D[0],<sp/>M[1],<sp/>M[2])<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[0][1]<sp/>=<sp/>SarrusDet(M[0],<sp/>D[0],<sp/>M[2])<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[0][2]<sp/>=<sp/>SarrusDet(M[0],<sp/>M[1],<sp/>D[0])<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[1][0]<sp/>=<sp/>SarrusDet(D[1],<sp/>M[1],<sp/>M[2])<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[1][1]<sp/>=<sp/>SarrusDet(M[0],<sp/>D[1],<sp/>M[2])<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[1][2]<sp/>=<sp/>SarrusDet(M[0],<sp/>M[1],<sp/>D[1])<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>call<sp/>Face_MoveTexture_BrushPrimit<sp/>after<sp/>idVec3D<sp/>computation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Select_ShiftTexture_BrushPrimit(<ref refid="structface__s" kindref="compound">face_t</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>autoAdjust)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="507"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>texS,<sp/>texT;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>delta;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>ComputeAxisBase(f-&gt;plane.normal,<sp/>texS,<sp/>texT);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorScale(texS,<sp/>x,<sp/>texS);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorScale(texT,<sp/>y,<sp/>texT);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorCopy(texS,<sp/>delta);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorAdd(delta,<sp/>texT,<sp/>delta);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>Face_MoveTexture_BrushPrimit(f,<sp/>delta);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="516"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(autoAdjust)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>/=<sp/>f-&gt;d_texture-&gt;GetEditorImage()-&gt;uploadWidth;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>/=<sp/>f-&gt;d_texture-&gt;GetEditorImage()-&gt;uploadHeight;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[0][2]<sp/>+=<sp/>x;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[1][2]<sp/>+=<sp/>y;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>EmitBrushPrimitTextureCoordinates(f,<sp/>f-&gt;face_winding);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="524"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>best<sp/>fitted<sp/>2D<sp/>vector<sp/>is<sp/>x.X+y.Y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ComputeBest2DVector(<ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>v,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>X,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>Y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;y)<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>sx,<sp/>sy;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>sx<sp/>=<sp/>DotProduct(v,<sp/>X);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>sy<sp/>=<sp/>DotProduct(v,<sp/>Y);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idMath::Fabs(sy)<sp/>&gt;<sp/>idMath::Fabs(sx))<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sy<sp/>&gt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sx<sp/>&gt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>in<sp/>many<sp/>case<sp/>we<sp/>know<sp/>three<sp/>points<sp/>A,B,C<sp/>in<sp/>two<sp/>axis<sp/>base<sp/>B1<sp/>and<sp/>B2<sp/>and<sp/>we<sp/>want<sp/>the<sp/>matrix<sp/>M<sp/>so<sp/>that<sp/>A(B1)<sp/>=<sp/>T<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>A(B2)<sp/>NOTE:<sp/>2D<sp/>homogeneous<sp/>space<sp/>stuff<sp/>NOTE:<sp/>we<sp/>don&apos;t<sp/>do<sp/>any<sp/>check<sp/>to<sp/>see<sp/>if<sp/>there&apos;s<sp/>a<sp/>solution<sp/>or<sp/>we<sp/>have<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>particular<sp/>case<sp/>..<sp/>need<sp/>to<sp/>make<sp/>sure<sp/>before<sp/>calling<sp/>NOTE:<sp/>the<sp/>third<sp/>coord<sp/>of<sp/>the<sp/>A,B,C<sp/>point<sp/>is<sp/>ignored<sp/>NOTE:<sp/>see</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>commented<sp/>out<sp/>section<sp/>to<sp/>fill<sp/>M<sp/>and<sp/>D<sp/>++timo<sp/>TODO:<sp/>update<sp/>the<sp/>other<sp/>members<sp/>to<sp/>use<sp/>this<sp/>when<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MatrixForPoints(<ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>M[3],<sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>D[2],<sp/><ref refid="classbrushprimit__texdef__t" kindref="compound">brushprimit_texdef_t</ref><sp/>*T)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>idVec3D<sp/>M[3];<sp/>//<sp/>columns<sp/>of<sp/>the<sp/>matrix<sp/>..<sp/>easier<sp/>that<sp/>way<sp/>(the<sp/>indexing<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>standard!<sp/>it&apos;s<sp/>column-line<sp/>..<sp/>later<sp/>computations<sp/>are<sp/>easier<sp/>that<sp/>way)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>det;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>idVec3D<sp/>D[2];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>M[2][0]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>M[2][1]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>M[2][2]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="575"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>the<sp/>data<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>M[0][0]<sp/>=<sp/>A2[0];</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>M[0][1]<sp/>=<sp/>B2[0];</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>M[0][2]<sp/>=<sp/>C2[0];</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>M[1][0]<sp/>=<sp/>A2[1];</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>M[1][1]<sp/>=<sp/>B2[1];</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>M[1][2]<sp/>=<sp/>C2[1];</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>M[2][0]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>M[2][1]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>M[2][2]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>D[0][0]<sp/>=<sp/>A1[0];</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>D[0][1]<sp/>=<sp/>B1[0];</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>D[0][2]<sp/>=<sp/>C1[0];</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>D[1][0]<sp/>=<sp/>A1[1];</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>D[1][1]<sp/>=<sp/>B1[1];</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>D[1][2]<sp/>=<sp/>C1[1];</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="593"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>SarrusDet(M[0],<sp/>M[1],<sp/>M[2]);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>T-&gt;coords[0][0]<sp/>=<sp/>SarrusDet(D[0],<sp/>M[1],<sp/>M[2])<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>T-&gt;coords[0][1]<sp/>=<sp/>SarrusDet(M[0],<sp/>D[0],<sp/>M[2])<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>T-&gt;coords[0][2]<sp/>=<sp/>SarrusDet(M[0],<sp/>M[1],<sp/>D[0])<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>T-&gt;coords[1][0]<sp/>=<sp/>SarrusDet(D[1],<sp/>M[1],<sp/>M[2])<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>T-&gt;coords[1][1]<sp/>=<sp/>SarrusDet(M[0],<sp/>D[1],<sp/>M[2])<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>T-&gt;coords[1][2]<sp/>=<sp/>SarrusDet(M[0],<sp/>M[1],<sp/>D[1])<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>++timo<sp/>FIXME<sp/>quick&apos;n<sp/>dirty<sp/>hack,<sp/>doesn&apos;t<sp/>care<sp/>about<sp/>current<sp/>texture<sp/>settings<sp/>(angle)<sp/>can<sp/>be<sp/>improved<sp/>..<sp/>bug<sp/>#107311</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>mins<sp/>and<sp/>maxs<sp/>are<sp/>the<sp/>face<sp/>bounding<sp/>box<sp/>++timo<sp/>fixme:<sp/>we<sp/>use<sp/>the<sp/>face<sp/>info,<sp/>mins<sp/>and<sp/>maxs<sp/>are<sp/>irrelevant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Face_FitTexture_BrushPrimit(<ref refid="structface__s" kindref="compound">face_t</ref><sp/>*f,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>mins,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>maxs,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BBoxSTMin,<sp/>BBoxSTMax;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_winding" kindref="compound">idWinding</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*w;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M[3],<sp/>D[2];</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>idVec3D<sp/>N[2],Mf[2];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbrushprimit__texdef__t" kindref="compound">brushprimit_texdef_t</ref><sp/><sp/><sp/><sp/>N;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mf[2];</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//memset(f-&gt;brushprimit_texdef.coords,<sp/>0,<sp/>sizeof(f-&gt;brushprimit_texdef.coords));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//f-&gt;brushprimit_texdef.coords[0][0]<sp/>=<sp/>1.0f;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//f-&gt;brushprimit_texdef.coords[1][1]<sp/>=<sp/>1.0f;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ConvertTexMatWithQTexture(&amp;f-&gt;brushprimit_texdef,<sp/>NULL,<sp/>&amp;f-&gt;brushprimit_texdef,<sp/>f-&gt;d_texture);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we&apos;ll<sp/>be<sp/>working<sp/>on<sp/>a<sp/>standardized<sp/>texture<sp/>size<sp/>ConvertTexMatWithQTexture(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&amp;f-&gt;brushprimit_texdef,<sp/>f-&gt;d_texture,<sp/>&amp;f-&gt;brushprimit_texdef,<sp/>NULL<sp/>);<sp/>compute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>BBox<sp/>in<sp/>ST<sp/>coords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>EmitBrushPrimitTextureCoordinates(f,<sp/>f-&gt;face_winding);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>BBoxSTMin[0]<sp/>=<sp/>BBoxSTMin[1]<sp/>=<sp/>BBoxSTMin[2]<sp/>=<sp/>999999;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>BBoxSTMax[0]<sp/>=<sp/>BBoxSTMax[1]<sp/>=<sp/>BBoxSTMax[2]<sp/>=<sp/>-999999;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>f-&gt;face_winding;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w)<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>w-&gt;GetNumPoints();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AddPointToBounds<sp/>in<sp/>2D<sp/>on<sp/>(S,T)<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>2;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>(*w)[i][j<sp/>+<sp/>3];</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&lt;<sp/>BBoxSTMin[j])<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BBoxSTMin[j]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&gt;<sp/>BBoxSTMax[j])<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BBoxSTMax[j]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>the<sp/>three<sp/>points<sp/>of<sp/>the<sp/>BBox<sp/>(BBoxSTMin[0].BBoxSTMin[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(BBoxSTMax[0],BBoxSTMin[1])<sp/>(BBoxSTMin[0],BBoxSTMax[1])<sp/>in<sp/>ST<sp/>space<sp/>the<sp/>BP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matrix<sp/>we<sp/>are<sp/>looking<sp/>for<sp/>gives<sp/>(0,0)<sp/>(nwidth,0)<sp/>(0,nHeight)<sp/>coordinates<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(Sfit,Tfit)<sp/>space<sp/>to<sp/>these<sp/>three<sp/>points<sp/>we<sp/>have<sp/>A(Sfit,Tfit)<sp/>=<sp/>(0,0)<sp/>=<sp/>Mf<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A(TexS,TexT)<sp/>=<sp/>N<sp/>*<sp/>M<sp/>*<sp/>A(TexS,TexT)<sp/>=<sp/>N<sp/>*<sp/>A(S,T)<sp/>so<sp/>we<sp/>solve<sp/>the<sp/>system<sp/>for<sp/>N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>then<sp/>Mf<sp/>=<sp/>N<sp/>*<sp/>M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>M[0][0]<sp/>=<sp/>BBoxSTMin[0];</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>M[0][1]<sp/>=<sp/>BBoxSTMax[0];</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>M[0][2]<sp/>=<sp/>BBoxSTMin[0];</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>M[1][0]<sp/>=<sp/>BBoxSTMin[1];</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>M[1][1]<sp/>=<sp/>BBoxSTMin[1];</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>M[1][2]<sp/>=<sp/>BBoxSTMax[1];</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>D[0][0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>D[0][1]<sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>D[0][2]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>D[1][0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>D[1][1]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>D[1][2]<sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixForPoints(M,<sp/>D,<sp/>&amp;N);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="675"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIT<sp/>operation<sp/>gives<sp/>coordinates<sp/>of<sp/>three<sp/>points<sp/>of<sp/>the<sp/>bounding<sp/>box<sp/>in<sp/>(S&apos;,T&apos;),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>our<sp/>target<sp/>axis<sp/>base<sp/>A(S&apos;,T&apos;)=(0,0)<sp/>B(S&apos;,T&apos;)=(nWidth,0)<sp/>C(S&apos;,T&apos;)=(0,nHeight)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>we<sp/>have<sp/>them<sp/>in<sp/>(S,T)<sp/>axis<sp/>base:<sp/>A(S,T)=(BBoxSTMin[0],BBoxSTMin[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>B(S,T)=(BBoxSTMax[0],BBoxSTMin[1])<sp/>C(S,T)=(BBoxSTMin[0],BBoxSTMax[1])<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>N<sp/>transformation<sp/>so<sp/>that:<sp/>A(S&apos;,T&apos;)<sp/>=<sp/>N<sp/>*<sp/>A(S,T)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>N[0][0]<sp/>=<sp/>(BBoxSTMax[0]<sp/>-<sp/>BBoxSTMin[0])<sp/>/<sp/>width;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>N[0][1]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>N[0][2]<sp/>=<sp/>BBoxSTMin[0];</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>N[1][0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>N[1][1]<sp/>=<sp/>(BBoxSTMax[1]<sp/>-<sp/>BBoxSTMin[1])<sp/>/<sp/>height;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>N[1][2]<sp/>=<sp/>BBoxSTMin[1];</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="690"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>final<sp/>matrix<sp/>is<sp/>the<sp/>product<sp/>(Mf<sp/>stands<sp/>for<sp/>Mfit)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>Mf[0][0]<sp/>=<sp/>N.coords[0][0]<sp/>*</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[0][0]<sp/>+</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N.coords[0][1]<sp/>*</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[1][0];</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>Mf[0][1]<sp/>=<sp/>N.coords[0][0]<sp/>*</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[0][1]<sp/>+</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N.coords[0][1]<sp/>*</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[1][1];</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>Mf[0][2]<sp/>=<sp/>N.coords[0][0]<sp/>*</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[0][2]<sp/>+</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N.coords[0][1]<sp/>*</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[1][2]<sp/>+</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N.coords[0][2];</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>Mf[1][0]<sp/>=<sp/>N.coords[1][0]<sp/>*</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[0][0]<sp/>+</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N.coords[1][1]<sp/>*</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[1][0];</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>Mf[1][1]<sp/>=<sp/>N.coords[1][0]<sp/>*</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[0][1]<sp/>+</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N.coords[1][1]<sp/>*</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[1][1];</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>Mf[1][2]<sp/>=<sp/>N.coords[1][0]<sp/>*</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[0][2]<sp/>+</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N.coords[1][1]<sp/>*</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[1][2]<sp/>+</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N.coords[1][2];</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>back</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorCopy(Mf[0],<sp/>f-&gt;brushprimit_texdef.coords[0]);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorCopy(Mf[1],<sp/>f-&gt;brushprimit_texdef.coords[1]);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>the<sp/>texture<sp/>size<sp/>ConvertTexMatWithQTexture(<sp/>&amp;f-&gt;brushprimit_texdef,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NULL,<sp/>&amp;f-&gt;brushprimit_texdef,<sp/>f-&gt;d_texture<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal">}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/>=======================================================================================================================</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/>=======================================================================================================================</highlight></codeline>
<codeline lineno="731"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Face_ScaleTexture_BrushPrimit(<ref refid="structface__s" kindref="compound">face_t</ref><sp/>*face,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sS,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sT)<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_qeglobals.m_bBrushPrimitMode)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sys_Status(</highlight><highlight class="stringliteral">&quot;BP<sp/>mode<sp/>required\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbrushprimit__texdef__t" kindref="compound">brushprimit_texdef_t</ref><sp/><sp/><sp/><sp/>*pBP<sp/>=<sp/>&amp;face-&gt;brushprimit_texdef;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>BPMatScale(pBP-&gt;coords,<sp/>sS,<sp/>sT);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>emit<sp/>the<sp/>coordinates<sp/>on<sp/>the<sp/>winding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>EmitBrushPrimitTextureCoordinates(face,<sp/>face-&gt;face_winding);</highlight></codeline>
<codeline lineno="743"><highlight class="normal">}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/>=======================================================================================================================</highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/>=======================================================================================================================</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Face_RotateTexture_BrushPrimit(<ref refid="structface__s" kindref="compound">face_t</ref><sp/>*face,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amount,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>origin)<sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbrushprimit__texdef__t" kindref="compound">brushprimit_texdef_t</ref><sp/><sp/><sp/><sp/>*pBP<sp/>=<sp/>&amp;face-&gt;brushprimit_texdef;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(amount)<sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>pBP-&gt;coords[0][0];</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>y<sp/>=<sp/>pBP-&gt;coords[0][1];</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>x1<sp/>=<sp/>pBP-&gt;coords[1][0];</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>y1<sp/>=<sp/>pBP-&gt;coords[1][1];</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>sin(<sp/>DEG2RAD(<sp/>amount<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>c<sp/>=<sp/>cos(<sp/>DEG2RAD(<sp/>amount<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pBP-&gt;coords[0][0]<sp/>=<sp/>(((x<sp/>-<sp/>origin[0])<sp/>*<sp/>c)<sp/>-<sp/>((y<sp/>-<sp/>origin[1])<sp/>*<sp/>s))<sp/>+<sp/>origin[0];</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pBP-&gt;coords[0][1]<sp/>=<sp/>(((x<sp/>-<sp/>origin[0])<sp/>*<sp/>s)<sp/>+<sp/>((y<sp/>-<sp/>origin[1])<sp/>*<sp/>c))<sp/>+<sp/>origin[1];</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pBP-&gt;coords[1][0]<sp/>=<sp/>(((x1<sp/>-<sp/>origin[0])<sp/>*<sp/>c)<sp/>-<sp/>((y1<sp/>-<sp/>origin[1])<sp/>*<sp/>s))<sp/>+<sp/>origin[0];</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pBP-&gt;coords[1][1]<sp/>=<sp/>(((x1<sp/>-<sp/>origin[0])<sp/>*<sp/>s)<sp/>+<sp/>((y1<sp/>-<sp/>origin[1])<sp/>*<sp/>c))<sp/>+<sp/>origin[1];</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EmitBrushPrimitTextureCoordinates(face,<sp/>face-&gt;face_winding);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TEXTURE<sp/>LOCKING<sp/>(Relevant<sp/>to<sp/>the<sp/>editor<sp/>only?)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="comment">//<sp/>internally<sp/>used<sp/>for<sp/>texture<sp/>locking<sp/>on<sp/>rotation<sp/>and<sp/>flipping<sp/>the<sp/>general</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="comment">//<sp/>algorithm<sp/>is<sp/>the<sp/>same<sp/>for<sp/>both<sp/>lockings,<sp/>it&apos;s<sp/>only<sp/>the<sp/>geometric<sp/>transformation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="comment">//<sp/>part<sp/>that<sp/>changes<sp/>so<sp/>I<sp/>wanted<sp/>to<sp/>keep<sp/>it<sp/>in<sp/>a<sp/>single<sp/>function<sp/>if<sp/>there<sp/>are<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="comment">//<sp/>linear<sp/>transformations<sp/>that<sp/>need<sp/>the<sp/>locking,<sp/>going<sp/>to<sp/>a<sp/>C++<sp/>or<sp/>code<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="comment">//<sp/>solution<sp/>would<sp/>be<sp/>best<sp/>(but<sp/>right<sp/>now<sp/>I<sp/>want<sp/>to<sp/>keep<sp/>brush_primit.cpp<sp/>striclty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>txlock_bRotation;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="comment">//<sp/>rotation<sp/>locking<sp/>params</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>txl_nAxis;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>txl_fDeg;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>txl_vOrigin;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="comment">//<sp/>flip<sp/>locking<sp/>params</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>txl_matrix[3];</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>txl_origin;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="787"><highlight class="comment"><sp/>=======================================================================================================================</highlight></codeline>
<codeline lineno="788"><highlight class="comment"><sp/>=======================================================================================================================</highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextureLockTransformation_BrushPrimit(<ref refid="structface__s" kindref="compound">face_t</ref><sp/>*f)<sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>Orig,<sp/>texS,<sp/>texT;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>axis<sp/>base<sp/>of<sp/>initial<sp/>plane</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>by<sp/>transformation<sp/>algo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>temp;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>j;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//idVec3D<sp/><sp/><sp/>vRotate;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>rotation<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>rOrig,<sp/>rvecS,<sp/>rvecT;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>geometric<sp/>transformation<sp/>of<sp/>(0,0)<sp/>(1,0)<sp/>(0,1)<sp/>{<sp/>initial<sp/>plane<sp/>axis<sp/>base<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>rNormal;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>rtexS,<sp/>rtexT;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>axis<sp/>base<sp/>for<sp/>the<sp/>transformed<sp/>plane</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>lOrig,<sp/>lvecS,<sp/>lvecT;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[2]<sp/>are<sp/>not<sp/>used<sp/>(<sp/>but<sp/>usefull<sp/>for<sp/>debugging<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>M[3];</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>det;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>D[2];</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>silence<sp/>compiler<sp/>warnings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>rOrig.Zero();</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>rvecS<sp/>=<sp/>rOrig;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>rvecT<sp/>=<sp/>rOrig;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>rNormal.x<sp/>=<sp/>rOrig.x;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>rNormal.y<sp/>=<sp/>rOrig.y;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>rNormal.z<sp/>=<sp/>rOrig.z;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>plane<sp/>axis<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>ComputeAxisBase(f-&gt;plane.Normal(),<sp/>texS,<sp/>texT);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>Orig.x<sp/>=<sp/>vec3_origin.x;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>Orig.y<sp/>=<sp/>vec3_origin.y;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>Orig.z<sp/>=<sp/>vec3_origin.z;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>coordinates<sp/>of<sp/>(0,0)<sp/>(1,0)<sp/>(0,1)<sp/>(<sp/>expressed<sp/>in<sp/>initial<sp/>plane<sp/>axis<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>)<sp/>after<sp/>transformation<sp/>(0,0)<sp/>(1,0)<sp/>(0,1)<sp/>(<sp/>expressed<sp/>in<sp/>initial<sp/>plane<sp/>axis<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>)<sp/>&lt;-&gt;<sp/>(0,0,0)<sp/>texS<sp/>texT<sp/>(<sp/>expressed<sp/>world<sp/>axis<sp/>base<sp/>)<sp/>input:<sp/>Orig,<sp/>texS,<sp/>texT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(and<sp/>the<sp/>global<sp/>locking<sp/>params)<sp/>ouput:<sp/>rOrig,<sp/>rvecS,<sp/>rvecT,<sp/>rNormal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(txlock_bRotation)<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>rotation<sp/>vector</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRotate.x<sp/>=<sp/>vec3_origin.x;</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRotate.y<sp/>=<sp/>vec3_origin.y;</highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRotate.z<sp/>=<sp/>vec3_origin.z;</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRotate[txl_nAxis]<sp/>=<sp/>txl_fDeg;</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorRotate3Origin(Orig,<sp/>vRotate,<sp/>txl_vOrigin,<sp/>rOrig);</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorRotate3Origin(texS,<sp/>vRotate,<sp/>txl_vOrigin,<sp/>rvecS);</highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorRotate3Origin(texT,<sp/>vRotate,<sp/>txl_vOrigin,<sp/>rvecT);</highlight></codeline>
<codeline lineno="836"><highlight class="comment"></highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>compute<sp/>normal<sp/>of<sp/>plane<sp/>after<sp/>rotation</highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorRotate3(f-&gt;plane.Normal(),<sp/>vRotate,<sp/>rNormal);</highlight></codeline>
<codeline lineno="839"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorSubtract(Orig,<sp/>txl_origin,<sp/>temp);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>3;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rOrig[j]<sp/>=<sp/>DotProduct(temp,<sp/>txl_matrix[j])<sp/>+<sp/>txl_origin[j];</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorSubtract(texS,<sp/>txl_origin,<sp/>temp);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>3;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvecS[j]<sp/>=<sp/>DotProduct(temp,<sp/>txl_matrix[j])<sp/>+<sp/>txl_origin[j];</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorSubtract(texT,<sp/>txl_origin,<sp/>temp);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>3;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvecT[j]<sp/>=<sp/>DotProduct(temp,<sp/>txl_matrix[j])<sp/>+<sp/>txl_origin[j];</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>also<sp/>need<sp/>the<sp/>axis<sp/>base<sp/>of<sp/>the<sp/>target<sp/>plane,<sp/>apply<sp/>the<sp/>transformation<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>normal<sp/>too..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>3;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rNormal[j]<sp/>=<sp/>DotProduct(f-&gt;plane,<sp/>txl_matrix[j]);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>rotated<sp/>plane<sp/>axis<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>ComputeAxisBase(rNormal,<sp/>rtexS,<sp/>rtexT);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>S/T<sp/>coordinates<sp/>of<sp/>the<sp/>three<sp/>points<sp/>in<sp/>rotated<sp/>axis<sp/>base<sp/>(<sp/>in<sp/>M<sp/>matrix<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>lOrig[0]<sp/>=<sp/>DotProduct(rOrig,<sp/>rtexS);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>lOrig[1]<sp/>=<sp/>DotProduct(rOrig,<sp/>rtexT);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>lvecS[0]<sp/>=<sp/>DotProduct(rvecS,<sp/>rtexS);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>lvecS[1]<sp/>=<sp/>DotProduct(rvecS,<sp/>rtexT);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>lvecT[0]<sp/>=<sp/>DotProduct(rvecT,<sp/>rtexS);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>lvecT[1]<sp/>=<sp/>DotProduct(rvecT,<sp/>rtexT);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>M[0][0]<sp/>=<sp/>lOrig[0];</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>M[1][0]<sp/>=<sp/>lOrig[1];</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>M[2][0]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>M[0][1]<sp/>=<sp/>lvecS[0];</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>M[1][1]<sp/>=<sp/>lvecS[1];</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>M[2][1]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>M[0][2]<sp/>=<sp/>lvecT[0];</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>M[1][2]<sp/>=<sp/>lvecT[1];</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>M[2][2]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>data<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>D[0][0]<sp/>=<sp/>f-&gt;brushprimit_texdef.coords[0][2];</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>D[0][1]<sp/>=<sp/>f-&gt;brushprimit_texdef.coords[0][0]<sp/>+<sp/>f-&gt;brushprimit_texdef.coords[0][2];</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>D[0][2]<sp/>=<sp/>f-&gt;brushprimit_texdef.coords[0][1]<sp/>+<sp/>f-&gt;brushprimit_texdef.coords[0][2];</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>D[1][0]<sp/>=<sp/>f-&gt;brushprimit_texdef.coords[1][2];</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>D[1][1]<sp/>=<sp/>f-&gt;brushprimit_texdef.coords[1][0]<sp/>+<sp/>f-&gt;brushprimit_texdef.coords[1][2];</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>D[1][2]<sp/>=<sp/>f-&gt;brushprimit_texdef.coords[1][1]<sp/>+<sp/>f-&gt;brushprimit_texdef.coords[1][2];</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>SarrusDet(M[0],<sp/>M[1],<sp/>M[2]);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[0][0]<sp/>=<sp/>SarrusDet(D[0],<sp/>M[1],<sp/>M[2])<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[0][1]<sp/>=<sp/>SarrusDet(M[0],<sp/>D[0],<sp/>M[2])<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[0][2]<sp/>=<sp/>SarrusDet(M[0],<sp/>M[1],<sp/>D[0])<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[1][0]<sp/>=<sp/>SarrusDet(D[1],<sp/>M[1],<sp/>M[2])<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[1][1]<sp/>=<sp/>SarrusDet(M[0],<sp/>D[1],<sp/>M[2])<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>f-&gt;brushprimit_texdef.coords[1][2]<sp/>=<sp/>SarrusDet(M[0],<sp/>M[1],<sp/>D[1])<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="902"><highlight class="normal">}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>texture<sp/>locking<sp/>called<sp/>before<sp/>the<sp/>points<sp/>on<sp/>the<sp/>face<sp/>are<sp/>actually<sp/>rotated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RotateFaceTexture_BrushPrimit(<ref refid="structface__s" kindref="compound">face_t</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nAxis,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fDeg,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>vOrigin)<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>placeholder<sp/>to<sp/>call<sp/>the<sp/>general<sp/>texture<sp/>locking<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>txlock_bRotation<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>txl_nAxis<sp/>=<sp/>nAxis;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>txl_fDeg<sp/>=<sp/>fDeg;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorCopy(vOrigin,<sp/>txl_vOrigin);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>TextureLockTransformation_BrushPrimit(f);</highlight></codeline>
<codeline lineno="916"><highlight class="normal">}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>compute<sp/>the<sp/>new<sp/>brush<sp/>primit<sp/>texture<sp/>matrix<sp/>for<sp/>a<sp/>transformation<sp/>matrix<sp/>and<sp/>a<sp/>flip<sp/>order<sp/>flag<sp/>(change<sp/>plane<sp/>o</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>rientation)<sp/>this<sp/>matches<sp/>the<sp/>select_matrix<sp/>algo<sp/>used<sp/>in<sp/>select.cpp<sp/>this<sp/>needs<sp/>to<sp/>be<sp/>called<sp/>on<sp/>the<sp/>face<sp/>BEFORE<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>geometric<sp/>transformation<sp/>it<sp/>will<sp/>compute<sp/>the<sp/>texture<sp/>matrix<sp/>that<sp/>will<sp/>represent<sp/>the<sp/>same<sp/>texture<sp/>on<sp/>the<sp/>face<sp/>after</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>geometric<sp/>transformation<sp/>is<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ApplyMatrix_BrushPrimit(<ref refid="structface__s" kindref="compound">face_t</ref><sp/>*f,<sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>matrix,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>origin)<sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>placeholder<sp/>to<sp/>call<sp/>the<sp/>general<sp/>texture<sp/>locking<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>txlock_bRotation<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorCopy(matrix[0],<sp/>txl_matrix[0]);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorCopy(matrix[1],<sp/>txl_matrix[1]);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorCopy(matrix[2],<sp/>txl_matrix[2]);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorCopy(origin,<sp/>txl_origin);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>TextureLockTransformation_BrushPrimit(f);</highlight></codeline>
<codeline lineno="934"><highlight class="normal">}</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>don&apos;t<sp/>do<sp/>C==A!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BPMatMul(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>A[2][3],<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>B[2][3],<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>C[2][3])<sp/>{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>C[0][0]<sp/>=<sp/>A[0][0]<sp/>*<sp/>B[0][0]<sp/>+<sp/>A[0][1]<sp/>*<sp/>B[1][0];</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>C[1][0]<sp/>=<sp/>A[1][0]<sp/>*<sp/>B[0][0]<sp/>+<sp/>A[1][1]<sp/>*<sp/>B[1][0];</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>C[0][1]<sp/>=<sp/>A[0][0]<sp/>*<sp/>B[0][1]<sp/>+<sp/>A[0][1]<sp/>*<sp/>B[1][1];</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>C[1][1]<sp/>=<sp/>A[1][0]<sp/>*<sp/>B[0][1]<sp/>+<sp/>A[1][1]<sp/>*<sp/>B[1][1];</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>C[0][2]<sp/>=<sp/>A[0][0]<sp/>*<sp/>B[0][2]<sp/>+<sp/>A[0][1]<sp/>*<sp/>B[1][2]<sp/>+<sp/>A[0][2];</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>C[1][2]<sp/>=<sp/>A[1][0]<sp/>*<sp/>B[0][2]<sp/>+<sp/>A[1][1]<sp/>*<sp/>B[1][2]<sp/>+<sp/>A[1][2];</highlight></codeline>
<codeline lineno="948"><highlight class="normal">}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="951"><highlight class="comment"><sp/>=======================================================================================================================</highlight></codeline>
<codeline lineno="952"><highlight class="comment"><sp/>=======================================================================================================================</highlight></codeline>
<codeline lineno="953"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BPMatDump(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>A[2][3])<sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(</highlight><highlight class="stringliteral">&quot;%g<sp/>%g<sp/>%g\n%g<sp/>%g<sp/>%g\n0<sp/>0<sp/>1\n&quot;</highlight><highlight class="normal">,<sp/>A[0][0],<sp/>A[0][1],<sp/>A[0][2],<sp/>A[1][0],<sp/>A[1][1],<sp/>A[1][2]);</highlight></codeline>
<codeline lineno="956"><highlight class="normal">}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="959"><highlight class="comment"><sp/>=======================================================================================================================</highlight></codeline>
<codeline lineno="960"><highlight class="comment"><sp/>=======================================================================================================================</highlight></codeline>
<codeline lineno="961"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BPMatRotate(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>A[2][3],<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>theta)<sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>m[2][3];</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>aux[2][3];</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;m,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*6);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>m[0][0]<sp/>=<sp/>cos(<sp/>DEG2RAD(<sp/>theta<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>m[0][1]<sp/>=<sp/>-sin(<sp/>DEG2RAD(<sp/>theta<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>m[1][0]<sp/>=<sp/>-m[0][1];</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>m[1][1]<sp/>=<sp/>m[0][0];</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>BPMatMul(A,<sp/>m,<sp/>aux);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>BPMatCopy(aux,<sp/>A);</highlight></codeline>
<codeline lineno="972"><highlight class="normal">}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Face_GetScale_BrushPrimit(<ref refid="structface__s" kindref="compound">face_t</ref><sp/>*face,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*rot)<sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>texS,<sp/>texT;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>ComputeAxisBase(face-&gt;plane.Normal(),<sp/>texS,<sp/>texT);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(face<sp/>==<sp/>NULL<sp/>||<sp/>face-&gt;face_winding<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>ST<sp/>coordinates<sp/>for<sp/>the<sp/>center<sp/>of<sp/>the<sp/>face</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>Os<sp/>=<sp/>0,<sp/>Ot<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>face-&gt;face_winding-&gt;GetNumPoints();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Os<sp/>+=<sp/>DotProduct((*face-&gt;face_winding)[i],<sp/>texS);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ot<sp/>+=<sp/>DotProduct((*face-&gt;face_winding)[i],<sp/>texT);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>Os<sp/>/=<sp/>face-&gt;face_winding-&gt;GetNumPoints();</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>Ot<sp/>/=<sp/>face-&gt;face_winding-&gt;GetNumPoints();</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbrushprimit__texdef__t" kindref="compound">brushprimit_texdef_t</ref><sp/><sp/><sp/><sp/>*pBP<sp/>=<sp/>&amp;face-&gt;brushprimit_texdef;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>we<sp/>have<sp/>a<sp/>special<sp/>case,<sp/>M<sp/>is<sp/>a<sp/>translation<sp/>and<sp/>it&apos;s<sp/>inverse<sp/>is<sp/>easy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BPO[2][3];</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux[2][3];</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[2][3];</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;m,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*6);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>m[0][0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>m[1][1]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>m[0][2]<sp/>=<sp/>-Os;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>m[1][2]<sp/>=<sp/>-Ot;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>BPMatMul(m,<sp/>pBP-&gt;coords,<sp/>aux);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>m[0][2]<sp/>=<sp/>Os;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>m[1][2]<sp/>=<sp/>Ot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>M^-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>BPMatMul(aux,<sp/>m,<sp/>BPO);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>a<sp/>given<sp/>scale<sp/>(on<sp/>S<sp/>and<sp/>T)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>ConvertTexMatWithQTexture(BPO,<sp/>face-&gt;d_texture,<sp/>aux,<sp/>NULL);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>*s<sp/>=<sp/>idMath::Sqrt(aux[0][0]<sp/>*<sp/>aux[0][0]<sp/>+<sp/>aux[1][0]<sp/>*<sp/>aux[1][0]);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>*t<sp/>=<sp/>idMath::Sqrt(aux[0][1]<sp/>*<sp/>aux[0][1]<sp/>+<sp/>aux[1][1]<sp/>*<sp/>aux[1][1]);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>rotate<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idMath::Fabs(face-&gt;brushprimit_texdef.coords[0][0])<sp/>&lt;<sp/>ZERO_EPSILON)</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rotate<sp/>is<sp/>+-90</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(face-&gt;brushprimit_texdef.coords[1][0]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*rot<sp/>=<sp/>90.0f;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*rot<sp/>=<sp/>-90.0f;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*rot<sp/>=<sp/>RAD2DEG(atan2(face-&gt;brushprimit_texdef.coords[1][0]<sp/>/<sp/>(*s)<sp/>?<sp/>(*s)<sp/>:<sp/>1.0f,<sp/>face-&gt;brushprimit_texdef.coords[0][0]<sp/>/<sp/>(*t)<sp/>?<sp/>(*t)<sp/>:<sp/>1.0f));</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1032"><highlight class="comment"><sp/>=======================================================================================================================</highlight></codeline>
<codeline lineno="1033"><highlight class="comment"><sp/>=======================================================================================================================</highlight></codeline>
<codeline lineno="1034"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Face_SetExplicitScale_BrushPrimit(<ref refid="structface__s" kindref="compound">face_t</ref><sp/>*face,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>texS,<sp/>texT;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>ComputeAxisBase(face-&gt;plane.Normal(),<sp/>texS,<sp/>texT);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>ST<sp/>coordinates<sp/>for<sp/>the<sp/>center<sp/>of<sp/>the<sp/>face</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>Os<sp/>=<sp/>0,<sp/>Ot<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>face-&gt;face_winding-&gt;GetNumPoints();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Os<sp/>+=<sp/>DotProduct((*face-&gt;face_winding)[i],<sp/>texS);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ot<sp/>+=<sp/>DotProduct((*face-&gt;face_winding)[i],<sp/>texT);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>Os<sp/>/=<sp/>face-&gt;face_winding-&gt;GetNumPoints();</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>Ot<sp/>/=<sp/>face-&gt;face_winding-&gt;GetNumPoints();</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbrushprimit__texdef__t" kindref="compound">brushprimit_texdef_t</ref><sp/><sp/><sp/><sp/>*pBP<sp/>=<sp/>&amp;face-&gt;brushprimit_texdef;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>we<sp/>have<sp/>a<sp/>special<sp/>case,<sp/>M<sp/>is<sp/>a<sp/>translation<sp/>and<sp/>it&apos;s<sp/>inverse<sp/>is<sp/>easy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BPO[2][3];</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux[2][3];</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[2][3];</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;m,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*6);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>m[0][0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>m[1][1]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>m[0][2]<sp/>=<sp/>-Os;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>m[1][2]<sp/>=<sp/>-Ot;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>BPMatMul(m,<sp/>pBP-&gt;coords,<sp/>aux);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>m[0][2]<sp/>=<sp/>Os;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>m[1][2]<sp/>=<sp/>Ot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>M^-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>BPMatMul(aux,<sp/>m,<sp/>BPO);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>a<sp/>given<sp/>scale<sp/>(on<sp/>S<sp/>and<sp/>T)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>ConvertTexMatWithQTexture(BPO,<sp/>face-&gt;d_texture,<sp/>aux,<sp/>NULL);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>the<sp/>scale<sp/>(normalize<sp/>the<sp/>matrix)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>v1,<sp/>v2;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>idMath::Sqrt(aux[0][0]<sp/>*<sp/>aux[0][0]<sp/>+<sp/>aux[1][0]<sp/>*<sp/>aux[1][0]);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>v2<sp/>=<sp/>idMath::Sqrt(aux[0][1]<sp/>*<sp/>aux[0][1]<sp/>+<sp/>aux[1][1]<sp/>*<sp/>aux[1][1]);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>v1;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>v2;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>sS,<sp/>sT;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>the<sp/>values<sp/>for<sp/>scale<sp/>on<sp/>S<sp/>and<sp/>T<sp/>here:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>sS<sp/>=<sp/>s<sp/>/<sp/>v1;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>sT<sp/>=<sp/>t<sp/>/<sp/>v2;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>aux[0][0]<sp/>*=<sp/>sS;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>aux[1][0]<sp/>*=<sp/>sS;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>aux[0][1]<sp/>*=<sp/>sT;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>aux[1][1]<sp/>*=<sp/>sT;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>ConvertTexMatWithQTexture(aux,<sp/>NULL,<sp/>BPO,<sp/>face-&gt;d_texture);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>BPMatMul(m,<sp/>BPO,<sp/>aux);<sp/><sp/></highlight><highlight class="comment">//<sp/>m<sp/>is<sp/>M^-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>m[0][2]<sp/>=<sp/>-Os;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>m[1][2]<sp/>=<sp/>-Ot;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>BPMatMul(aux,<sp/>m,<sp/>pBP-&gt;coords);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>emit<sp/>the<sp/>coordinates<sp/>on<sp/>the<sp/>winding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>EmitBrushPrimitTextureCoordinates(face,<sp/>face-&gt;face_winding);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Face_FlipTexture_BrushPrimit(<ref refid="structface__s" kindref="compound">face_t</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s,<sp/>t,<sp/>rot;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>Face_GetScale_BrushPrimit(f,<sp/>&amp;s,<sp/>&amp;t,<sp/>&amp;rot);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y)<sp/>{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Face_SetExplicitScale_BrushPrimit(f,<sp/>0.0,<sp/>-t);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Face_SetExplicitScale_BrushPrimit(f,<sp/>-s,<sp/>0.0);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="1111"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>texS,<sp/>texT;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>ComputeAxisBase(f-&gt;plane.normal,<sp/>texS,<sp/>texT);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>Os<sp/>=<sp/>0,<sp/>Ot<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>f-&gt;face_winding-&gt;numpoints;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Os<sp/>+=<sp/>DotProduct(f-&gt;face_winding-&gt;p[i],<sp/>texS);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ot<sp/>+=<sp/>DotProduct(f-&gt;face_winding-&gt;p[i],<sp/>texT);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>Ot<sp/>=<sp/>abs(Ot);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>Ot<sp/>*=<sp/>t;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>Ot<sp/>/=<sp/>f-&gt;d_texture-&gt;GetEditorImage()-&gt;uploadHeight;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/>Os<sp/>=<sp/>abs(Os);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/>Os<sp/>*=<sp/>s;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>Os<sp/>/=<sp/>f-&gt;d_texture-&gt;GetEditorImage()-&gt;uploadWidth;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y)<sp/>{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Face_FitTexture_BrushPrimit(f,<sp/>texS,<sp/>texT,<sp/>-Ot,<sp/>1.0);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Face_FitTexture_BrushPrimit(f,<sp/>texS,<sp/>texT,<sp/>1.0,<sp/>-Os);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>EmitBrushPrimitTextureCoordinates(f,<sp/>f-&gt;face_winding);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1136"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Brush_FlipTexture_BrushPrimit(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structface__s" kindref="compound">face_t</ref><sp/>*f<sp/>=<sp/>b-&gt;brush_faces;<sp/>f;<sp/>f<sp/>=<sp/>f-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Face_FlipTexture_BrushPrimit(f,<sp/>y);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Face_SetAxialScale_BrushPrimit(<ref refid="structface__s" kindref="compound">face_t</ref><sp/>*face,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!face)<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!face-&gt;face_winding)<sp/>{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//float<sp/>oldS,<sp/>oldT,<sp/>oldR;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Face_GetScale_BrushPrimit(face,<sp/>&amp;oldS,<sp/>&amp;oldT,<sp/>&amp;oldR);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3_d" kindref="compound">idVec3D</ref><sp/>min,<sp/>max;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>min.x<sp/>=<sp/>min.y<sp/>=<sp/>min.z<sp/>=<sp/>999999.0;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>max.x<sp/>=<sp/>max.y<sp/>=<sp/>max.z<sp/>=<sp/>-999999.0;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>face-&gt;face_winding-&gt;GetNumPoints();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>3;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*face-&gt;face_winding)[i][j]<sp/>&lt;<sp/>min[j])<sp/>{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min[j]<sp/>=<sp/>(*face-&gt;face_winding)[i][j];</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*face-&gt;face_winding)[i][j]<sp/>&gt;<sp/>max[j])<sp/>{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max[j]<sp/>=<sp/>(*face-&gt;face_winding)[i][j];</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>len;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_bAxialMode)<sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_axialAnchor<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>g_axialAnchor<sp/>&lt;<sp/>face-&gt;face_winding-&gt;GetNumPoints()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_axialDest<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>g_axialDest<sp/>&lt;<sp/>face-&gt;face_winding-&gt;GetNumPoints()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_axialAnchor<sp/>!=<sp/>g_axialDest)<sp/>{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>(*face-&gt;face_winding)[g_axialDest].ToVec3()<sp/>-<sp/>(*face-&gt;face_winding)[g_axialAnchor].ToVec3();</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y)<sp/>{</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>(*face-&gt;face_winding)[2].ToVec3()<sp/>-<sp/>(*face-&gt;face_winding)[1].ToVec3();</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>(*face-&gt;face_winding)[1].ToVec3()<sp/>-<sp/>(*face-&gt;face_winding)[0].ToVec3();</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>len.Length();</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>idMath::Fabs(max.x<sp/>-<sp/>min.x);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>height<sp/>=<sp/>idMath::Fabs(max.z<sp/>-<sp/>min.z);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//len<sp/>=<sp/>maxs[2]<sp/>-<sp/>mins[2];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//double<sp/>yDist<sp/>=<sp/>len.Length();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>!=<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>&gt;<sp/>face-&gt;d_texture-&gt;GetEditorImage()-&gt;uploadHeight)<sp/>{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>height<sp/>=<sp/>1.0<sp/>/<sp/>(dist<sp/>/<sp/>face-&gt;d_texture-&gt;GetEditorImage()-&gt;uploadHeight);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>height<sp/>/=<sp/>dist;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>&gt;<sp/>face-&gt;d_texture-&gt;GetEditorImage()-&gt;uploadWidth)<sp/>{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>=<sp/>1.0<sp/>/<sp/>(dist<sp/>/<sp/>face-&gt;d_texture-&gt;GetEditorImage()-&gt;uploadWidth);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>/=<sp/>dist;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y)<sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Face_SetExplicitScale_BrushPrimit(face,<sp/>0.0,<sp/>height);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//oldT<sp/>=<sp/>oldT<sp/>/<sp/>height<sp/>*<sp/>10;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Select_ShiftTexture_BrushPrimit(face,<sp/>0,<sp/>-oldT,<sp/>true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Face_SetExplicitScale_BrushPrimit(face,<sp/>width,<sp/>0.0);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1218"><highlight class="comment"><sp/><sp/><sp/><sp/>common-&gt;Printf(&quot;Face<sp/>x:<sp/>%f<sp/><sp/>y:<sp/>%f<sp/><sp/>xr:<sp/>%f<sp/><sp/>yr:<sp/>%f\n&quot;,<sp/>x,<sp/>y,<sp/>xRatio,<sp/>yRatio);</highlight></codeline>
<codeline lineno="1219"><highlight class="comment"><sp/><sp/><sp/><sp/>common-&gt;Printf(&quot;Texture<sp/>x:<sp/>%i<sp/><sp/>y:<sp/>%i<sp/><sp/>\n&quot;,face-&gt;d_texture-&gt;GetEditorImage()-&gt;uploadWidth,<sp/>face-&gt;d_texture-&gt;GetEditorImage()-&gt;uploadHeight);</highlight></codeline>
<codeline lineno="1220"><highlight class="comment"></highlight></codeline>
<codeline lineno="1221"><highlight class="comment"><sp/><sp/><sp/><sp/>idVec3D<sp/>texS,<sp/>texT;</highlight></codeline>
<codeline lineno="1222"><highlight class="comment"><sp/><sp/><sp/><sp/>ComputeAxisBase(face-&gt;plane.normal,<sp/>texS,<sp/>texT);</highlight></codeline>
<codeline lineno="1223"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/><sp/><sp/>Os<sp/>=<sp/>0,<sp/>Ot<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1224"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>face-&gt;face_winding-&gt;numpoints;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Os<sp/>+=<sp/>DotProduct(face-&gt;face_winding-&gt;p[i],<sp/>texS);</highlight></codeline>
<codeline lineno="1226"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ot<sp/>+=<sp/>DotProduct(face-&gt;face_winding-&gt;p[i],<sp/>texT);</highlight></codeline>
<codeline lineno="1227"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1228"><highlight class="comment"></highlight></codeline>
<codeline lineno="1229"><highlight class="comment"><sp/><sp/><sp/><sp/>common-&gt;Printf(&quot;Face2<sp/>x:<sp/>%f<sp/><sp/>y:<sp/>%f<sp/><sp/>\n&quot;,<sp/>Os,<sp/>Ot);</highlight></codeline>
<codeline lineno="1230"><highlight class="comment"><sp/><sp/><sp/><sp/>Os<sp/>/=<sp/>face-&gt;face_winding-&gt;numpoints;</highlight></codeline>
<codeline lineno="1231"><highlight class="comment"><sp/><sp/><sp/><sp/>Ot<sp/>/=<sp/>face-&gt;face_winding-&gt;numpoints;</highlight></codeline>
<codeline lineno="1232"><highlight class="comment"></highlight></codeline>
<codeline lineno="1233"><highlight class="comment"></highlight></codeline>
<codeline lineno="1234"><highlight class="comment"><sp/><sp/><sp/><sp/>//Os<sp/>/=<sp/>face-&gt;face_winding-&gt;numpoints;</highlight></codeline>
<codeline lineno="1235"><highlight class="comment"><sp/><sp/><sp/><sp/>//Ot<sp/>/=<sp/>face-&gt;face_winding-&gt;numpoints;</highlight></codeline>
<codeline lineno="1236"><highlight class="comment"></highlight></codeline>
<codeline lineno="1237"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorBrushPrimit.cpp"/>
  </compounddef>
</doxygen>
