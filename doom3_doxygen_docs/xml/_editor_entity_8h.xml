<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_editor_entity_8h" kind="file">
    <compoundname>EditorEntity.h</compoundname>
    <includedby refid="_q_e3_8_h" local="yes">E:/sources/3rd_party/DOOM/neo/tools/radiant/QE3.H</includedby>
    <innerclass refid="structentity__s" prot="public">entity_s</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_editor_entity_8h_1a01f4cf4c936b7ebadc3339bf8b679aa6" prot="public" static="no">
        <type>struct <ref refid="structentity__s" kindref="compound">entity_s</ref></type>
        <definition>typedef struct entity_s  entity_t</definition>
        <argsstring></argsstring>
        <name>entity_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="49" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_editor_entity_8h_1a36fbabbf260fcead743032876eed957c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Eclass_InitForSourceDirectory</definition>
        <argsstring>(const char *path)</argsstring>
        <name>Eclass_InitForSourceDirectory</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="29" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/ECLASS.CPP" bodystart="368" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a4d2c88634dfa8e20afd67deac1aa8259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeclass__s" kindref="compound">eclass_t</ref> *</type>
        <definition>eclass_t* Eclass_ForName</definition>
        <argsstring>(const char *name, bool has_brushes)</argsstring>
        <name>Eclass_ForName</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_brushes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="30" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/ECLASS.CPP" bodystart="392" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a298d2fe2d41801e9c018f4814c684f75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Eclass_hasModel</definition>
        <argsstring>(eclass_t *e, idVec3 &amp;vMin, idVec3 &amp;vMax)</argsstring>
        <name>Eclass_hasModel</name>
        <param>
          <type><ref refid="structeclass__s" kindref="compound">eclass_t</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>vMin</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>vMax</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a1b0b193f0d32660039e1abe89d49b04a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParseEpair</definition>
        <argsstring>(idDict *dict)</argsstring>
        <name>ParseEpair</name>
        <param>
          <type><ref refid="classid_dict" kindref="compound">idDict</ref> *</type>
          <declname>dict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="51" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="427" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1acf86e57af7bbe2a54a303430f7b69382" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* ValueForKey</definition>
        <argsstring>(entity_t *ent, const char *key)</argsstring>
        <name>ValueForKey</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>ent</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="52" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a4e477dc8bebf72997e492713b99e58bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GetNumKeys</definition>
        <argsstring>(entity_t *ent)</argsstring>
        <name>GetNumKeys</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>ent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="53" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="41" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a4dcc59aa2acba440e344a4bf1216b293" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* GetKeyString</definition>
        <argsstring>(entity_t *ent, int iIndex)</argsstring>
        <name>GetKeyString</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>ent</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="54" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="53" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1aa2c4dce943746ddb63be8e511aa2369a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SetKeyValue</definition>
        <argsstring>(entity_t *ent, const char *key, const char *value, bool trackAngles=true)</argsstring>
        <name>SetKeyValue</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>ent</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>trackAngles</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="55" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="109" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a667d208fdd7177a956fb170d9ad2a3bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DeleteKey</definition>
        <argsstring>(entity_t *ent, const char *key)</argsstring>
        <name>DeleteKey</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>ent</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="56" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="175" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a96132d82c9aa700933a63ca766841c2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float FloatForKey</definition>
        <argsstring>(entity_t *ent, const char *key)</argsstring>
        <name>FloatForKey</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>ent</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="57" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="186" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1afa223bdd960dfaa9d72461382d9a9201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IntForKey</definition>
        <argsstring>(entity_t *ent, const char *key)</argsstring>
        <name>IntForKey</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>ent</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="58" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="201" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1aadf4a25cc04cce35adafb1f6e5265300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetVectorForKey</definition>
        <argsstring>(entity_t *ent, const char *key, idVec3 &amp;vec)</argsstring>
        <name>GetVectorForKey</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>ent</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="59" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="212" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a6026ee6513e2fa45b8496b9bfaabac39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetVector4ForKey</definition>
        <argsstring>(entity_t *ent, const char *key, idVec4 &amp;vec)</argsstring>
        <name>GetVector4ForKey</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>ent</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="classid_vec4" kindref="compound">idVec4</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="60" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="230" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1adde4a046897465e7d4736d2341b7ca95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetFloatForKey</definition>
        <argsstring>(entity_t *end, const char *key, float *f)</argsstring>
        <name>GetFloatForKey</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="61" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="248" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a5d6ca093a1776f5d305dad45a55b6f6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SetKeyVec3</definition>
        <argsstring>(entity_t *ent, const char *key, idVec3 v)</argsstring>
        <name>SetKeyVec3</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>ent</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="62" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="133" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1af1c26a2a0591e54fae3e715a8bdc007f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SetKeyMat3</definition>
        <argsstring>(entity_t *ent, const char *key, idMat3 m)</argsstring>
        <name>SetKeyMat3</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>ent</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="classid_mat3" kindref="compound">idMat3</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="63" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="152" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a7c5e0b72b0a02ad7acd3c60c91827092" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetMatrixForKey</definition>
        <argsstring>(entity_t *ent, const char *key, idMat3 &amp;mat)</argsstring>
        <name>GetMatrixForKey</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>ent</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="64" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="264" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a6c3c10b1b4c693139aba26a032044426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Entity_UpdateSoundEmitter</definition>
        <argsstring>(entity_t *ent)</argsstring>
        <name>Entity_UpdateSoundEmitter</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>ent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="66" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="1369" bodyend="1400"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a8444c52c97d1a62793ef7ea1de00aebe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_curve" kindref="compound">idCurve</ref>&lt; <ref refid="classid_vec3" kindref="compound">idVec3</ref> &gt; *</type>
        <definition>idCurve&lt;idVec3&gt;* Entity_MakeCurve</definition>
        <argsstring>(entity_t *e)</argsstring>
        <name>Entity_MakeCurve</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="67" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="516" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1ac8ce6d022dc2cdc1e4497eaec513c0c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Entity_UpdateCurveData</definition>
        <argsstring>(entity_t *e)</argsstring>
        <name>Entity_UpdateCurveData</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="68" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="483" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1ae44fe3b4a0a906f17c7d6e68013f001f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Entity_SetCurveData</definition>
        <argsstring>(entity_t *e)</argsstring>
        <name>Entity_SetCurveData</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="69" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="529" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a64c43cd28213135317148dbd2ab3d218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Entity_Free</definition>
        <argsstring>(entity_t *e)</argsstring>
        <name>Entity_Free</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="70" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="336" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a44bc15fba9eef092e6492e7556e5f41d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Entity_FreeEpairs</definition>
        <argsstring>(entity_t *e)</argsstring>
        <name>Entity_FreeEpairs</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="71" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="296" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a9e50b657b23b0b77731a4c95e5bc30a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Entity_MemorySize</definition>
        <argsstring>(entity_t *e)</argsstring>
        <name>Entity_MemorySize</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="72" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="358" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a90e7aaf4eb0116321981650daa537bcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
        <definition>entity_t* Entity_Parse</definition>
        <argsstring>(bool onlypairs, brush_t *pList=NULL)</argsstring>
        <name>Entity_Parse</name>
        <param>
          <type>bool</type>
          <declname>onlypairs</declname>
        </param>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>pList</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="73" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="797" bodyend="849"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a541af4cf430a50f98c4032eaffaa9d99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Entity_Write</definition>
        <argsstring>(entity_t *e, FILE *f, bool use_region)</argsstring>
        <name>Entity_Write</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_region</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="74" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="866" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a9bef64cf5a99f1dc0828631ef71d1127" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Entity_WriteSelected</definition>
        <argsstring>(entity_t *e, FILE *f)</argsstring>
        <name>Entity_WriteSelected</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="75" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="961" bodyend="1008"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a5790505f921be1f21ba84721728157f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Entity_WriteSelected</definition>
        <argsstring>(entity_t *e, CMemFile *)</argsstring>
        <name>Entity_WriteSelected</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>CMemFile *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="76" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="1015" bodyend="1062"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a5bf3ca271983d5247cbb2faaaa4addc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
        <definition>entity_t* Entity_Create</definition>
        <argsstring>(eclass_t *c, bool forceFixed=false)</argsstring>
        <name>Entity_Create</name>
        <param>
          <type><ref refid="structeclass__s" kindref="compound">eclass_t</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forceFixed</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="77" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="1129" bodyend="1224"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a1c2467e0e9173ff14c0fe9ae0fbcf996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
        <definition>entity_t* Entity_Clone</definition>
        <argsstring>(entity_t *e)</argsstring>
        <name>Entity_Clone</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="78" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="1273" bodyend="1288"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1afffd1b77ead7128ad331891ea1f9fb9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Entity_AddToList</definition>
        <argsstring>(entity_t *e, entity_t *list)</argsstring>
        <name>Entity_AddToList</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="79" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="305" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a606f24187734d662e315b7b99c6bd564" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Entity_RemoveFromList</definition>
        <argsstring>(entity_t *e)</argsstring>
        <name>Entity_RemoveFromList</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="80" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="321" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1aac5238f620ab190adb651623c4967afc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EntityHasModel</definition>
        <argsstring>(entity_t *ent)</argsstring>
        <name>EntityHasModel</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>ent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="81" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="441" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a89dc9c998b3b23c16fd0f9670cc3bbed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Entity_LinkBrush</definition>
        <argsstring>(entity_t *e, brush_t *b)</argsstring>
        <name>Entity_LinkBrush</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="83" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="1236" bodyend="1249"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a64dddc07b6a40bd21ff98f042bed32e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Entity_UnlinkBrush</definition>
        <argsstring>(brush_t *b)</argsstring>
        <name>Entity_UnlinkBrush</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="84" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="1256" bodyend="1266"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a0d06bf3b94a30b75271ffcadd2ed7ee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
        <definition>entity_t* FindEntity</definition>
        <argsstring>(const char *pszKey, const char *pszValue)</argsstring>
        <name>FindEntity</name>
        <param>
          <type>const char *</type>
          <declname>pszKey</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pszValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="85" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="1327" bodyend="1339"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a6a69f96ca69ae9b5922a1d6bff3bf138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
        <definition>entity_t* FindEntityInt</definition>
        <argsstring>(const char *pszKey, int iValue)</argsstring>
        <name>FindEntityInt</name>
        <param>
          <type>const char *</type>
          <declname>pszKey</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="86" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="1345" bodyend="1357"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a92e6020cace1933bff841b80e8bce7e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
        <definition>entity_t* Entity_New</definition>
        <argsstring>()</argsstring>
        <name>Entity_New</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="87" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="459" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1ac21e0da0b1d516bea2da8942df93e161" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Entity_SetName</definition>
        <argsstring>(entity_t *e, const char *name)</argsstring>
        <name>Entity_SetName</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="88" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="1068" bodyend="1075"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1a9b3515943560d4edf3b0dc6b1cbf1edd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GetUniqueTargetId</definition>
        <argsstring>(int iHint)</argsstring>
        <name>GetUniqueTargetId</name>
        <param>
          <type>int</type>
          <declname>iHint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="90" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="1294" bodyend="1321"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1ade19fa2087acbd6dd59f437e1bd325f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeclass__s" kindref="compound">eclass_t</ref> *</type>
        <definition>eclass_t* GetCachedModel</definition>
        <argsstring>(entity_t *pEntity, const char *pName, idVec3 &amp;vMin, idVec3 &amp;vMax)</argsstring>
        <name>GetCachedModel</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>pEntity</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pName</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>vMin</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>vMax</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="91" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/ECLASS.CPP" bodystart="426" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1ae450d8ee5a721c1ad155782f0b385175" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Entity_Name</definition>
        <argsstring>(entity_t *e, bool force)</argsstring>
        <name>Entity_Name</name>
        <param>
          <type><ref refid="structentity__s" kindref="compound">entity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>force</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="94" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="1083" bodyend="1121"/>
      </memberdef>
      <memberdef kind="function" id="_editor_entity_8h_1af86f688e364f51b6cbadaa7fd7ffe24f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsBrushSelected</definition>
        <argsstring>(brush_t *bSel)</argsstring>
        <name>IsBrushSelected</name>
        <param>
          <type><ref refid="structbrush__s" kindref="compound">brush_t</ref> *</type>
          <declname>bSel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h" line="96" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.cpp" bodystart="946" bodyend="954"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eclass_InitForSourceDirectory(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path<sp/>);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><ref refid="structeclass__s" kindref="compound">eclass_t</ref><sp/>*<sp/><sp/>Eclass_ForName(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_brushes<sp/>);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eclass_hasModel(<ref refid="structeclass__s" kindref="compound">eclass_t</ref><sp/>*e,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;vMin,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;vMax);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="structentity__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structentity__s" kindref="compound">entity_s</ref><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structentity__s" kindref="compound">entity_s</ref><sp/>*prev,<sp/>*next;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/><sp/><sp/><sp/><sp/>brushes;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>head/tail<sp/>of<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>undoId,<sp/>redoId,<sp/>entityId;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>for<sp/>undo/redo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/>origin;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>qhandle_t<sp/><sp/><sp/>lightDef;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>qhandle_t<sp/><sp/><sp/>modelDef;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_sound_emitter" kindref="compound">idSoundEmitter</ref><sp/>*soundEmitter;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structeclass__s" kindref="compound">eclass_t</ref><sp/>*<sp/><sp/>eclass;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/><sp/><sp/><sp/><sp/><sp/>epairs;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structeclass__s" kindref="compound">eclass_t</ref><sp/>*<sp/><sp/>md3Class;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/><sp/><sp/><sp/><sp/><sp/>rotation;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/>lightOrigin;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>lights<sp/>that<sp/>have<sp/>been<sp/>combined<sp/>with<sp/>models</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/><sp/><sp/><sp/><sp/><sp/>lightRotation;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trackLightOrigin;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_curve" kindref="compound">idCurve&lt;idVec3&gt;</ref><sp/>*curve;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}<sp/><ref refid="structentity__s" kindref="compound">entity_t</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseEpair(<ref refid="classid_dict" kindref="compound">idDict</ref><sp/>*dict);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ValueForKey(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*ent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetNumKeys(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*ent);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*GetKeyString(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*ent,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iIndex);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetKeyValue<sp/>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*ent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>trackAngles<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeleteKey<sp/>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*ent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FloatForKey<sp/>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*ent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IntForKey<sp/>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*ent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetVectorForKey<sp/>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*ent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;vec);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetVector4ForKey<sp/>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*ent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/>&amp;vec);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetFloatForKey(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*f);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetKeyVec3(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*ent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>v);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetKeyMat3(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*ent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>m);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetMatrixForKey(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*ent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>&amp;mat);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entity_UpdateSoundEmitter(<sp/><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*ent<sp/>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><ref refid="classid_curve" kindref="compound">idCurve&lt;idVec3&gt;</ref><sp/>*Entity_MakeCurve(<sp/><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*e<sp/>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entity_UpdateCurveData(<sp/><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*e<sp/>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entity_SetCurveData(<sp/><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*e<sp/>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entity_Free<sp/>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*e);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entity_FreeEpairs(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*e);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entity_MemorySize(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*e);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*<sp/><sp/>Entity_Parse<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>onlypairs,<sp/><ref refid="structbrush__s" kindref="compound">brush_t</ref>*<sp/>pList<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entity_Write<sp/>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*e,<sp/>FILE<sp/>*f,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_region);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entity_WriteSelected(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*e,<sp/>FILE<sp/>*f);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entity_WriteSelected(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*e,<sp/>CMemFile*);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*<sp/><sp/>Entity_Create<sp/>(<ref refid="structeclass__s" kindref="compound">eclass_t</ref><sp/>*c,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>forceFixed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*<sp/><sp/>Entity_Clone<sp/>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*e);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entity_AddToList(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*e,<sp/><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*list);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entity_RemoveFromList(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*e);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EntityHasModel(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*ent);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entity_LinkBrush<sp/>(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*e,<sp/><ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entity_UnlinkBrush<sp/>(<ref refid="structbrush__s" kindref="compound">brush_t</ref><sp/>*b);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*<sp/><sp/>FindEntity(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pszKey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pszValue);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*<sp/><sp/>FindEntityInt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pszKey,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iValue);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*<sp/><sp/>Entity_New();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entity_SetName(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*e,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetUniqueTargetId(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iHint);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><ref refid="structeclass__s" kindref="compound">eclass_t</ref><sp/>*<sp/><sp/>GetCachedModel(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*pEntity,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pName,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;vMin,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;vMax);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//Timo<sp/>:<sp/>used<sp/>for<sp/>parsing<sp/>epairs<sp/>in<sp/>brush<sp/>primitive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entity_Name(<ref refid="structentity__s" kindref="compound">entity_t</ref><sp/>*e,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>force);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsBrushSelected(<ref refid="structbrush__s" kindref="compound">brush_t</ref>*<sp/>bSel);</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/EditorEntity.h"/>
  </compounddef>
</doxygen>
