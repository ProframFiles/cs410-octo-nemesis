<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_image__process_8cpp" kind="file">
    <compoundname>Image_process.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../idlib/precompiled.h</includes>
    <includes refid="tr__local_8h" local="yes">tr_local.h</includes>
      <sectiondef kind="define">
      <memberdef kind="define" id="_image__process_8cpp_1a776947deb6cf27cbd4faf91e0d60ff49" prot="public" static="no">
        <name>MAX_DIMENSION</name>
        <initializer>4096</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" line="46" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_image__process_8cpp_1a562460d039086701be2f77dea69aabe3" prot="public" static="no">
        <name>MIP_MIN</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>(a&lt;b?a:b)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" line="305" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" bodystart="305" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_image__process_8cpp_1a8425974695571ec61275c26183ba508e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>byte *</type>
        <definition>byte* R_ResampleTexture</definition>
        <argsstring>(const byte *in, int inwidth, int inheight, int outwidth, int outheight)</argsstring>
        <name>R_ResampleTexture</name>
        <param>
          <type>const byte *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inwidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inheight</declname>
        </param>
        <param>
          <type>int</type>
          <declname>outwidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>outheight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" line="47" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" bodystart="47" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="_image__process_8cpp_1ae462567ad4eae412307de69da8e64602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>byte *</type>
        <definition>byte* R_Dropsample</definition>
        <argsstring>(const byte *in, int inwidth, int inheight, int outwidth, int outheight)</argsstring>
        <name>R_Dropsample</name>
        <param>
          <type>const byte *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inwidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inheight</declname>
        </param>
        <param>
          <type>int</type>
          <declname>outwidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>outheight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" line="106" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" bodystart="106" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="_image__process_8cpp_1ab5da565a9573bf65ef4229d527e57c07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_SetBorderTexels</definition>
        <argsstring>(byte *inBase, int width, int height, const byte border[4])</argsstring>
        <name>R_SetBorderTexels</name>
        <param>
          <type>byte *</type>
          <declname>inBase</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>const byte</type>
          <declname>border</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" line="138" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" bodystart="138" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="_image__process_8cpp_1af92ae1ff360a109a2f744ee4d56c12d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_SetBorderTexels3D</definition>
        <argsstring>(byte *inBase, int width, int height, int depth, const byte border[4])</argsstring>
        <name>R_SetBorderTexels3D</name>
        <param>
          <type>byte *</type>
          <declname>inBase</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>const byte</type>
          <declname>border</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" line="178" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" bodystart="178" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="_image__process_8cpp_1a19650084d8a60d44205629278729e525" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_SetAlphaNormalDivergence</definition>
        <argsstring>(byte *in, int width, int height)</argsstring>
        <name>R_SetAlphaNormalDivergence</name>
        <param>
          <type>byte *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" line="255" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" bodystart="255" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="_image__process_8cpp_1ad270f8ffd185ba379687e7f3e013b7e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>byte *</type>
        <definition>byte* R_MipMapWithAlphaSpecularity</definition>
        <argsstring>(const byte *in, int width, int height)</argsstring>
        <name>R_MipMapWithAlphaSpecularity</name>
        <param>
          <type>const byte *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" line="307" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" bodystart="307" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="_image__process_8cpp_1a84d3e2e3c95e24c1355d94867dfb11f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>byte *</type>
        <definition>byte* R_MipMap</definition>
        <argsstring>(const byte *in, int width, int height, bool preserveBorder)</argsstring>
        <name>R_MipMap</name>
        <param>
          <type>const byte *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>preserveBorder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" line="396" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" bodystart="396" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="_image__process_8cpp_1afe13084d60153ef14bf726dbe26444e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>byte *</type>
        <definition>byte* R_MipMap3D</definition>
        <argsstring>(const byte *in, int width, int height, int depth, bool preserveBorder)</argsstring>
        <name>R_MipMap3D</name>
        <param>
          <type>const byte *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>preserveBorder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" line="481" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" bodystart="481" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="_image__process_8cpp_1aa92e3be7b3dc373c4cbec9a8af143bd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_BlendOverTexture</definition>
        <argsstring>(byte *data, int pixelCount, const byte blend[4])</argsstring>
        <name>R_BlendOverTexture</name>
        <param>
          <type>byte *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pixelCount</declname>
        </param>
        <param>
          <type>const byte</type>
          <declname>blend</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" line="554" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" bodystart="554" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="_image__process_8cpp_1a8146c473f537db775900f07be1c54433" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_HorizontalFlip</definition>
        <argsstring>(byte *data, int width, int height)</argsstring>
        <name>R_HorizontalFlip</name>
        <param>
          <type>byte *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" line="579" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" bodystart="579" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="_image__process_8cpp_1ad963fbe57faa1a38c2b052c8bc66fd8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_VerticalFlip</definition>
        <argsstring>(byte *data, int width, int height)</argsstring>
        <name>R_VerticalFlip</name>
        <param>
          <type>byte *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" line="592" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" bodystart="592" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="_image__process_8cpp_1ac74feb2b96a2728eaf21b26cdbab6f10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_RotatePic</definition>
        <argsstring>(byte *data, int width)</argsstring>
        <name>R_RotatePic</name>
        <param>
          <type>byte *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" line="605" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp" bodystart="605" bodyend="620"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tr_local.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="34"><highlight class="comment">================</highlight></codeline>
<codeline lineno="35"><highlight class="comment">R_ResampleTexture</highlight></codeline>
<codeline lineno="36"><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="comment">Used<sp/>to<sp/>resample<sp/>images<sp/>in<sp/>a<sp/>more<sp/>general<sp/>than<sp/>quartering<sp/>fashion.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"></highlight></codeline>
<codeline lineno="39"><highlight class="comment">This<sp/>will<sp/>only<sp/>have<sp/>filter<sp/>coverage<sp/>if<sp/>the<sp/>resampled<sp/>size</highlight></codeline>
<codeline lineno="40"><highlight class="comment">is<sp/>greater<sp/>than<sp/>half<sp/>the<sp/>original<sp/>size.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"></highlight></codeline>
<codeline lineno="42"><highlight class="comment">If<sp/>a<sp/>larger<sp/>shrinking<sp/>is<sp/>needed,<sp/>use<sp/>the<sp/>mipmap<sp/>function<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="comment">after<sp/>resampling<sp/>to<sp/>the<sp/>next<sp/>lower<sp/>power<sp/>of<sp/>two.</highlight></codeline>
<codeline lineno="44"><highlight class="comment">================</highlight></codeline>
<codeline lineno="45"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_DIMENSION<sp/><sp/><sp/>4096</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"></highlight><highlight class="normal">byte<sp/>*R_ResampleTexture(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>*in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inwidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inheight,<sp/><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outwidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outheight<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/><sp/>*inrow,<sp/>*inrow2;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>frac,<sp/>fracstep;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>p1[MAX_DIMENSION],<sp/>p2[MAX_DIMENSION];</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/>*pix1,<sp/>*pix2,<sp/>*pix3,<sp/>*pix4;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out,<sp/>*out_p;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>outwidth<sp/>&gt;<sp/>MAX_DIMENSION<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outwidth<sp/>=<sp/>MAX_DIMENSION;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>outheight<sp/>&gt;<sp/>MAX_DIMENSION<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outheight<sp/>=<sp/>MAX_DIMENSION;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>(byte<sp/>*)R_StaticAlloc(<sp/>outwidth<sp/>*<sp/>outheight<sp/>*<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>out_p<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>fracstep<sp/>=<sp/>inwidth*0x10000/outwidth;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>frac<sp/>=<sp/>fracstep&gt;&gt;2;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i=0<sp/>;<sp/>i&lt;outwidth<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[i]<sp/>=<sp/>4*(frac&gt;&gt;16);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frac<sp/>+=<sp/>fracstep;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>frac<sp/>=<sp/>3*(fracstep&gt;&gt;2);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i=0<sp/>;<sp/>i&lt;outwidth<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2[i]<sp/>=<sp/>4*(frac&gt;&gt;16);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frac<sp/>+=<sp/>fracstep;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0<sp/>;<sp/>i&lt;outheight<sp/>;<sp/>i++,<sp/>out_p<sp/>+=<sp/>outwidth*4<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inrow<sp/>=<sp/>in<sp/>+<sp/>4<sp/>*<sp/>inwidth<sp/>*<sp/>(int)(<sp/>(<sp/>i<sp/>+<sp/>0.25f<sp/>)<sp/>*<sp/>inheight<sp/>/<sp/>outheight<sp/>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inrow2<sp/>=<sp/>in<sp/>+<sp/>4<sp/>*<sp/>inwidth<sp/>*<sp/>(int)(<sp/>(<sp/>i<sp/>+<sp/>0.75f<sp/>)<sp/>*<sp/>inheight<sp/>/<sp/>outheight<sp/>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frac<sp/>=<sp/>fracstep<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0<sp/>;<sp/>j&lt;outwidth<sp/>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pix1<sp/>=<sp/>inrow<sp/>+<sp/>p1[j];</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pix2<sp/>=<sp/>inrow<sp/>+<sp/>p2[j];</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pix3<sp/>=<sp/>inrow2<sp/>+<sp/>p1[j];</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pix4<sp/>=<sp/>inrow2<sp/>+<sp/>p2[j];</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[j*4+0]<sp/>=<sp/>(pix1[0]<sp/>+<sp/>pix2[0]<sp/>+<sp/>pix3[0]<sp/>+<sp/>pix4[0])&gt;&gt;2;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[j*4+1]<sp/>=<sp/>(pix1[1]<sp/>+<sp/>pix2[1]<sp/>+<sp/>pix3[1]<sp/>+<sp/>pix4[1])&gt;&gt;2;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[j*4+2]<sp/>=<sp/>(pix1[2]<sp/>+<sp/>pix2[2]<sp/>+<sp/>pix3[2]<sp/>+<sp/>pix4[2])&gt;&gt;2;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[j*4+3]<sp/>=<sp/>(pix1[3]<sp/>+<sp/>pix2[3]<sp/>+<sp/>pix3[3]<sp/>+<sp/>pix4[3])&gt;&gt;2;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="99"><highlight class="comment">================</highlight></codeline>
<codeline lineno="100"><highlight class="comment">R_Dropsample</highlight></codeline>
<codeline lineno="101"><highlight class="comment"></highlight></codeline>
<codeline lineno="102"><highlight class="comment">Used<sp/>to<sp/>resample<sp/>images<sp/>in<sp/>a<sp/>more<sp/>general<sp/>than<sp/>quartering<sp/>fashion.</highlight></codeline>
<codeline lineno="103"><highlight class="comment">Normal<sp/>maps<sp/>and<sp/>such<sp/>should<sp/>not<sp/>be<sp/>bilerped.</highlight></codeline>
<codeline lineno="104"><highlight class="comment">================</highlight></codeline>
<codeline lineno="105"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">byte<sp/>*R_Dropsample(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>*in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inwidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inheight,<sp/><sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outwidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outheight<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/><sp/>*inrow;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/><sp/>*pix1;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out,<sp/>*out_p;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>(byte<sp/>*)R_StaticAlloc(<sp/>outwidth<sp/>*<sp/>outheight<sp/>*<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>out_p<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0<sp/>;<sp/>i&lt;outheight<sp/>;<sp/>i++,<sp/>out_p<sp/>+=<sp/>outwidth*4<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inrow<sp/>=<sp/>in<sp/>+<sp/>4*inwidth*(int)((i+0.25)*inheight/outheight);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0<sp/>;<sp/>j&lt;outwidth<sp/>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>j<sp/>*<sp/>inwidth<sp/>/<sp/>outwidth;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pix1<sp/>=<sp/>inrow<sp/>+<sp/>k<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[j*4+0]<sp/>=<sp/>pix1[0];</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[j*4+1]<sp/>=<sp/>pix1[1];</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[j*4+2]<sp/>=<sp/>pix1[2];</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[j*4+3]<sp/>=<sp/>pix1[3];</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="133"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="134"><highlight class="comment">R_SetBorderTexels</highlight></codeline>
<codeline lineno="135"><highlight class="comment"></highlight></codeline>
<codeline lineno="136"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="137"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_SetBorderTexels(<sp/>byte<sp/>*inBase,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>border[4]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/>*out;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>inBase;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0<sp/>;<sp/>i&lt;height<sp/>;<sp/>i++,<sp/>out+=width*4)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>border[0];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>border[1];</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>border[2];</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[3]<sp/>=<sp/>border[3];</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>inBase+(width-1)*4;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0<sp/>;<sp/>i&lt;height<sp/>;<sp/>i++,<sp/>out+=width*4)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>border[0];</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>border[1];</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>border[2];</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[3]<sp/>=<sp/>border[3];</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>inBase;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0<sp/>;<sp/>i&lt;width<sp/>;<sp/>i++,<sp/>out+=4)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>border[0];</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>border[1];</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>border[2];</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[3]<sp/>=<sp/>border[3];</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>inBase+width*4*(height-1);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0<sp/>;<sp/>i&lt;width<sp/>;<sp/>i++,<sp/>out+=4)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>border[0];</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>border[1];</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>border[2];</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[3]<sp/>=<sp/>border[3];</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="173"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="174"><highlight class="comment">R_SetBorderTexels3D</highlight></codeline>
<codeline lineno="175"><highlight class="comment"></highlight></codeline>
<codeline lineno="176"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="177"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_SetBorderTexels3D(<sp/>byte<sp/>*inBase,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>border[4]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/>*out;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>row,<sp/>plane;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>row<sp/>=<sp/>width<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>plane<sp/>=<sp/>row<sp/>*<sp/>depth;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>1<sp/>;<sp/>j<sp/>&lt;<sp/>depth<sp/>-<sp/>1<sp/>;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>inBase<sp/>+<sp/>j<sp/>*<sp/>plane;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0<sp/>;<sp/>i&lt;height<sp/>;<sp/>i++,<sp/>out+=row)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>border[0];</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>border[1];</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>border[2];</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[3]<sp/>=<sp/>border[3];</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>inBase+(width-1)*4<sp/>+<sp/>j<sp/>*<sp/>plane;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0<sp/>;<sp/>i&lt;height<sp/>;<sp/>i++,<sp/>out+=row)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>border[0];</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>border[1];</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>border[2];</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[3]<sp/>=<sp/>border[3];</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>inBase<sp/>+<sp/>j<sp/>*<sp/>plane;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0<sp/>;<sp/>i&lt;width<sp/>;<sp/>i++,<sp/>out+=4)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>border[0];</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>border[1];</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>border[2];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[3]<sp/>=<sp/>border[3];</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>inBase+width*4*(height-1)<sp/>+<sp/>j<sp/>*<sp/>plane;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0<sp/>;<sp/>i&lt;width<sp/>;<sp/>i++,<sp/>out+=4)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>border[0];</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>border[1];</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>border[2];</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[3]<sp/>=<sp/>border[3];</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>inBase;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>plane<sp/>;<sp/>i<sp/>+=<sp/>4,<sp/>out<sp/>+=<sp/>4<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>border[0];</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>border[1];</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>border[2];</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[3]<sp/>=<sp/>border[3];</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>inBase+(depth-1)*plane;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>plane<sp/>;<sp/>i<sp/>+=<sp/>4,<sp/>out<sp/>+=<sp/>4<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>border[0];</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>border[1];</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>border[2];</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[3]<sp/>=<sp/>border[3];</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="234"><highlight class="comment">================</highlight></codeline>
<codeline lineno="235"><highlight class="comment">R_SetAlphaNormalDivergence</highlight></codeline>
<codeline lineno="236"><highlight class="comment"></highlight></codeline>
<codeline lineno="237"><highlight class="comment">If<sp/>any<sp/>of<sp/>the<sp/>angles<sp/>inside<sp/>the<sp/>cone<sp/>would<sp/>directly<sp/>reflect<sp/>to<sp/>the<sp/>light,<sp/>there<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="238"><highlight class="comment">a<sp/>specular<sp/>highlight.<sp/><sp/>The<sp/>intensity<sp/>of<sp/>the<sp/>highlight<sp/>is<sp/>inversely<sp/>proportional<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="239"><highlight class="comment">area<sp/>of<sp/>the<sp/>spread.</highlight></codeline>
<codeline lineno="240"><highlight class="comment"></highlight></codeline>
<codeline lineno="241"><highlight class="comment">Light<sp/>source<sp/>area<sp/>is<sp/>important<sp/>for<sp/>the<sp/>base<sp/>size.</highlight></codeline>
<codeline lineno="242"><highlight class="comment"></highlight></codeline>
<codeline lineno="243"><highlight class="comment">area<sp/>subtended<sp/>in<sp/>light<sp/>is<sp/>the<sp/>divergence<sp/>times<sp/>the<sp/>distance</highlight></codeline>
<codeline lineno="244"><highlight class="comment"></highlight></codeline>
<codeline lineno="245"><highlight class="comment">Shininess<sp/>value<sp/>is<sp/>subtracted<sp/>from<sp/>the<sp/>divergence</highlight></codeline>
<codeline lineno="246"><highlight class="comment"></highlight></codeline>
<codeline lineno="247"><highlight class="comment">Sets<sp/>the<sp/>alpha<sp/>channel<sp/>to<sp/>the<sp/>greatest<sp/>divergence<sp/>dot<sp/>product<sp/>of<sp/>the<sp/>surrounding<sp/>texels.</highlight></codeline>
<codeline lineno="248"><highlight class="comment">1.0<sp/>=<sp/>flat,<sp/>0.0<sp/>=<sp/>turns<sp/>a<sp/>90<sp/>degree<sp/>angle</highlight></codeline>
<codeline lineno="249"><highlight class="comment">Lower<sp/>values<sp/>give<sp/>less<sp/>shiny<sp/>specular</highlight></codeline>
<codeline lineno="250"><highlight class="comment">With<sp/>mip<sp/>maps,<sp/>the<sp/>lowest<sp/>samnpled<sp/>value<sp/>will<sp/>be<sp/>retained</highlight></codeline>
<codeline lineno="251"><highlight class="comment"></highlight></codeline>
<codeline lineno="252"><highlight class="comment">Should<sp/>we<sp/>rewrite<sp/>the<sp/>normal<sp/>as<sp/>the<sp/>centered<sp/>average?</highlight></codeline>
<codeline lineno="253"><highlight class="comment">================</highlight></codeline>
<codeline lineno="254"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>R_SetAlphaNormalDivergence(<sp/>byte<sp/>*in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0<sp/>;<sp/>y<sp/>&lt;<sp/>height<sp/>;<sp/>y++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0<sp/>;<sp/>x<sp/>&lt;<sp/>width<sp/>;<sp/>x++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>divergence<sp/>is<sp/>the<sp/>smallest<sp/>dot<sp/>product<sp/>of<sp/>any<sp/>of<sp/>the<sp/>eight<sp/>surrounding<sp/>texels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/>*pic_p<sp/>=<sp/>in<sp/>+<sp/>(<sp/>y<sp/>*<sp/>width<sp/>+<sp/>x<sp/>)<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>center;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>center[0]<sp/>=<sp/>(<sp/>pic_p[0]<sp/>-<sp/>128<sp/>)<sp/>/<sp/>127;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>center[1]<sp/>=<sp/>(<sp/>pic_p[1]<sp/>-<sp/>128<sp/>)<sp/>/<sp/>127;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>center[2]<sp/>=<sp/>(<sp/>pic_p[2]<sp/>-<sp/>128<sp/>)<sp/>/<sp/>127;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>center.Normalize();</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>maxDiverge<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>this<sp/>assumes<sp/>wrap<sp/>mode,<sp/>but<sp/>should<sp/>handle<sp/>clamp<sp/>modes<sp/>and<sp/>border<sp/>colors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yy<sp/>=<sp/>-1<sp/>;<sp/>yy<sp/>&lt;=<sp/>1<sp/>;<sp/>yy++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xx<sp/>=<sp/>-1<sp/>;<sp/>xx<sp/>&lt;=<sp/>1<sp/>;<sp/>xx++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>yy<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>xx<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/>*corner_p<sp/>=<sp/>in<sp/>+<sp/>(<sp/>((y+yy)&amp;(height-1))<sp/>*<sp/>width<sp/>+<sp/>((x+xx)&amp;width-1)<sp/>)<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>corner;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corner[0]<sp/>=<sp/>(<sp/>corner_p[0]<sp/>-<sp/>128<sp/>)<sp/>/<sp/>127;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corner[1]<sp/>=<sp/>(<sp/>corner_p[1]<sp/>-<sp/>128<sp/>)<sp/>/<sp/>127;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corner[2]<sp/>=<sp/>(<sp/>corner_p[2]<sp/>-<sp/>128<sp/>)<sp/>/<sp/>127;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corner.Normalize();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>diverge<sp/>=<sp/>corner<sp/>*<sp/>center;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>diverge<sp/>&lt;<sp/>maxDiverge<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxDiverge<sp/>=<sp/>diverge;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>can<sp/>get<sp/>a<sp/>diverge<sp/>&lt;<sp/>0<sp/>in<sp/>some<sp/>extreme<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>maxDiverge<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxDiverge<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pic_p[3]<sp/>=<sp/>maxDiverge<sp/>*<sp/>255;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="298"><highlight class="comment">================</highlight></codeline>
<codeline lineno="299"><highlight class="comment">R_MipMapWithAlphaSpecularity</highlight></codeline>
<codeline lineno="300"><highlight class="comment"></highlight></codeline>
<codeline lineno="301"><highlight class="comment">Returns<sp/>a<sp/>new<sp/>copy<sp/>of<sp/>the<sp/>texture,<sp/>quartered<sp/>in<sp/>size<sp/>and<sp/>filtered.</highlight></codeline>
<codeline lineno="302"><highlight class="comment">The<sp/>alpha<sp/>channel<sp/>is<sp/>taken<sp/>to<sp/>be<sp/>the<sp/>minimum<sp/>of<sp/>the<sp/>dots<sp/>of<sp/>all<sp/>surrounding<sp/>normals.</highlight></codeline>
<codeline lineno="303"><highlight class="comment">================</highlight></codeline>
<codeline lineno="304"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIP_MIN(a,b)<sp/>(a&lt;b?a:b)</highlight></codeline>
<codeline lineno="306"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal">byte<sp/>*R_MipMapWithAlphaSpecularity(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>*in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i,<sp/>j,<sp/>c,<sp/>x,<sp/>y,<sp/>sx,<sp/>sy;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/><sp/>*in_p;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/>*out,<sp/>*out_p;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>row;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>newWidth,<sp/>newHeight;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>*fbuf,<sp/>*fbuf_p;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>width<sp/>&lt;<sp/>1<sp/>||<sp/>height<sp/>&lt;<sp/>1<sp/>||<sp/>(<sp/>width<sp/>+<sp/>height<sp/>==<sp/>2<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;FatalError(<sp/></highlight><highlight class="stringliteral">&quot;R_MipMapWithAlphaMin<sp/>called<sp/>with<sp/>size<sp/>%i,%i&quot;</highlight><highlight class="normal">,<sp/>width,<sp/>height<sp/>);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>the<sp/>incoming<sp/>texture<sp/>to<sp/>centered<sp/>floating<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>width<sp/>*<sp/>height;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>fbuf<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)_alloca(<sp/>c<sp/>*<sp/>4<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>*fbuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>in_p<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>fbuf_p<sp/>=<sp/>fbuf;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>c<sp/>;<sp/>i++,<sp/>in_p+=4,<sp/>fbuf_p<sp/>+=<sp/>4<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fbuf_p[0]<sp/>=<sp/>(<sp/>in_p[0]<sp/>/<sp/>255.0<sp/>)<sp/>*<sp/>2.0<sp/>-<sp/>1.0;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>to<sp/>a<sp/>normal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fbuf_p[1]<sp/>=<sp/>(<sp/>in_p[1]<sp/>/<sp/>255.0<sp/>)<sp/>*<sp/>2.0<sp/>-<sp/>1.0;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fbuf_p[2]<sp/>=<sp/>(<sp/>in_p[2]<sp/>/<sp/>255.0<sp/>)<sp/>*<sp/>2.0<sp/>-<sp/>1.0;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fbuf_p[3]<sp/>=<sp/>(<sp/>in_p[3]<sp/>/<sp/>255.0<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>filtered<sp/>divegence<sp/>/<sp/>specularity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>row<sp/>=<sp/>width<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>newWidth<sp/>=<sp/>width<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>newHeight<sp/>=<sp/>height<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!newWidth<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newWidth<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!newHeight<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newHeight<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>(byte<sp/>*)R_StaticAlloc(<sp/>newWidth<sp/>*<sp/>newHeight<sp/>*<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>out_p<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>in_p<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i=0<sp/>;<sp/>i&lt;newHeight<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j=0<sp/>;<sp/>j&lt;newWidth<sp/>;<sp/>j++,<sp/>out_p+=4<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>total;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>totalSpec;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total.Zero();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalSpec<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>average<sp/>normal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>x<sp/>=<sp/>-1<sp/>;<sp/>x<sp/>&lt;=<sp/>1<sp/>;<sp/>x++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sx<sp/>=<sp/>(<sp/>j<sp/>*<sp/>2<sp/>+<sp/>x<sp/>)<sp/>&amp;<sp/>(width-1);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>y<sp/>=<sp/>-1<sp/>;<sp/>y<sp/>&lt;=<sp/>1<sp/>;<sp/>y++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sy<sp/>=<sp/>(<sp/>i<sp/>*<sp/>2<sp/>+<sp/>y<sp/>)<sp/>&amp;<sp/>(height-1);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fbuf_p<sp/>=<sp/>fbuf<sp/>+<sp/>(<sp/>sy<sp/>*<sp/>width<sp/>+<sp/>sx<sp/>)<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total[0]<sp/>+=<sp/>fbuf_p[0];</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total[1]<sp/>+=<sp/>fbuf_p[1];</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total[2]<sp/>+=<sp/>fbuf_p[2];</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalSpec<sp/>+=<sp/>fbuf_p[3];</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total.Normalize();</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalSpec<sp/>/=<sp/>9.0;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>maximum<sp/>divergence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>x<sp/>=<sp/>-1<sp/>;<sp/>x<sp/>&lt;=<sp/>1<sp/>;<sp/>x++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>y<sp/>=<sp/>-1<sp/>;<sp/>y<sp/>&lt;=<sp/>1<sp/>;<sp/>y++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>the<sp/>average<sp/>normal<sp/>and<sp/>divergence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="384"><highlight class="comment">================</highlight></codeline>
<codeline lineno="385"><highlight class="comment">R_MipMap</highlight></codeline>
<codeline lineno="386"><highlight class="comment"></highlight></codeline>
<codeline lineno="387"><highlight class="comment">Returns<sp/>a<sp/>new<sp/>copy<sp/>of<sp/>the<sp/>texture,<sp/>quartered<sp/>in<sp/>size<sp/>and<sp/>filtered.</highlight></codeline>
<codeline lineno="388"><highlight class="comment"></highlight></codeline>
<codeline lineno="389"><highlight class="comment">If<sp/>a<sp/>texture<sp/>is<sp/>intended<sp/>to<sp/>be<sp/>used<sp/>in<sp/>GL_CLAMP<sp/>or<sp/>GL_CLAMP_TO_EDGE<sp/>mode<sp/>with</highlight></codeline>
<codeline lineno="390"><highlight class="comment">a<sp/>completely<sp/>transparent<sp/>border,<sp/>we<sp/>must<sp/>prevent<sp/>any<sp/>blurring<sp/>into<sp/>the<sp/>outer</highlight></codeline>
<codeline lineno="391"><highlight class="comment">ring<sp/>of<sp/>texels<sp/>by<sp/>filling<sp/>it<sp/>with<sp/>the<sp/>border<sp/>from<sp/>the<sp/>previous<sp/>level.<sp/><sp/>This</highlight></codeline>
<codeline lineno="392"><highlight class="comment">will<sp/>result<sp/>in<sp/>a<sp/>slight<sp/>shrinking<sp/>of<sp/>the<sp/>texture<sp/>as<sp/>it<sp/>mips,<sp/>but<sp/>better<sp/>than</highlight></codeline>
<codeline lineno="393"><highlight class="comment">smeared<sp/>clamps...</highlight></codeline>
<codeline lineno="394"><highlight class="comment">================</highlight></codeline>
<codeline lineno="395"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal">byte<sp/>*R_MipMap(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>*in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>preserveBorder<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/><sp/>*in_p;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/>*out,<sp/>*out_p;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>row;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/>border[4];</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>newWidth,<sp/>newHeight;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>width<sp/>&lt;<sp/>1<sp/>||<sp/>height<sp/>&lt;<sp/>1<sp/>||<sp/>(<sp/>width<sp/>+<sp/>height<sp/>==<sp/>2<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;FatalError(<sp/></highlight><highlight class="stringliteral">&quot;R_MipMap<sp/>called<sp/>with<sp/>size<sp/>%i,%i&quot;</highlight><highlight class="normal">,<sp/>width,<sp/>height<sp/>);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>border[0]<sp/>=<sp/>in[0];</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>border[1]<sp/>=<sp/>in[1];</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>border[2]<sp/>=<sp/>in[2];</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>border[3]<sp/>=<sp/>in[3];</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>row<sp/>=<sp/>width<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>newWidth<sp/>=<sp/>width<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>newHeight<sp/>=<sp/>height<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!newWidth<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newWidth<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!newHeight<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newHeight<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>(byte<sp/>*)R_StaticAlloc(<sp/>newWidth<sp/>*<sp/>newHeight<sp/>*<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>out_p<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>in_p<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>width<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>height<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>width<sp/>==<sp/>0<sp/>||<sp/>height<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>+=<sp/>height;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>largest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>preserveBorder<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0<sp/>;<sp/>i&lt;width<sp/>;<sp/>i++,<sp/>out_p+=4<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[0]<sp/>=<sp/>border[0];</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[1]<sp/>=<sp/>border[1];</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[2]<sp/>=<sp/>border[2];</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[3]<sp/>=<sp/>border[3];</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0<sp/>;<sp/>i&lt;width<sp/>;<sp/>i++,<sp/>out_p+=4,<sp/>in_p+=8<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[0]<sp/>=<sp/>(<sp/>in_p[0]<sp/>+<sp/>in_p[4]<sp/>)&gt;&gt;1;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[1]<sp/>=<sp/>(<sp/>in_p[1]<sp/>+<sp/>in_p[5]<sp/>)&gt;&gt;1;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[2]<sp/>=<sp/>(<sp/>in_p[2]<sp/>+<sp/>in_p[6]<sp/>)&gt;&gt;1;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[3]<sp/>=<sp/>(<sp/>in_p[3]<sp/>+<sp/>in_p[7]<sp/>)&gt;&gt;1;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0<sp/>;<sp/>i&lt;height<sp/>;<sp/>i++,<sp/>in_p+=row)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0<sp/>;<sp/>j&lt;width<sp/>;<sp/>j++,<sp/>out_p+=4,<sp/>in_p+=8)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[0]<sp/>=<sp/>(in_p[0]<sp/>+<sp/>in_p[4]<sp/>+<sp/>in_p[row+0]<sp/>+<sp/>in_p[row+4])&gt;&gt;2;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[1]<sp/>=<sp/>(in_p[1]<sp/>+<sp/>in_p[5]<sp/>+<sp/>in_p[row+1]<sp/>+<sp/>in_p[row+5])&gt;&gt;2;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[2]<sp/>=<sp/>(in_p[2]<sp/>+<sp/>in_p[6]<sp/>+<sp/>in_p[row+2]<sp/>+<sp/>in_p[row+6])&gt;&gt;2;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[3]<sp/>=<sp/>(in_p[3]<sp/>+<sp/>in_p[7]<sp/>+<sp/>in_p[row+3]<sp/>+<sp/>in_p[row+7])&gt;&gt;2;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>old<sp/>border<sp/>texel<sp/>back<sp/>around<sp/>if<sp/>desired</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>preserveBorder<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_SetBorderTexels(<sp/>out,<sp/>width,<sp/>height,<sp/>border<sp/>);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="469"><highlight class="comment">================</highlight></codeline>
<codeline lineno="470"><highlight class="comment">R_MipMap3D</highlight></codeline>
<codeline lineno="471"><highlight class="comment"></highlight></codeline>
<codeline lineno="472"><highlight class="comment">Returns<sp/>a<sp/>new<sp/>copy<sp/>of<sp/>the<sp/>texture,<sp/>eigthed<sp/>in<sp/>size<sp/>and<sp/>filtered.</highlight></codeline>
<codeline lineno="473"><highlight class="comment"></highlight></codeline>
<codeline lineno="474"><highlight class="comment">If<sp/>a<sp/>texture<sp/>is<sp/>intended<sp/>to<sp/>be<sp/>used<sp/>in<sp/>GL_CLAMP<sp/>or<sp/>GL_CLAMP_TO_EDGE<sp/>mode<sp/>with</highlight></codeline>
<codeline lineno="475"><highlight class="comment">a<sp/>completely<sp/>transparent<sp/>border,<sp/>we<sp/>must<sp/>prevent<sp/>any<sp/>blurring<sp/>into<sp/>the<sp/>outer</highlight></codeline>
<codeline lineno="476"><highlight class="comment">ring<sp/>of<sp/>texels<sp/>by<sp/>filling<sp/>it<sp/>with<sp/>the<sp/>border<sp/>from<sp/>the<sp/>previous<sp/>level.<sp/><sp/>This</highlight></codeline>
<codeline lineno="477"><highlight class="comment">will<sp/>result<sp/>in<sp/>a<sp/>slight<sp/>shrinking<sp/>of<sp/>the<sp/>texture<sp/>as<sp/>it<sp/>mips,<sp/>but<sp/>better<sp/>than</highlight></codeline>
<codeline lineno="478"><highlight class="comment">smeared<sp/>clamps...</highlight></codeline>
<codeline lineno="479"><highlight class="comment">================</highlight></codeline>
<codeline lineno="480"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal">byte<sp/>*R_MipMap3D(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>*in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>preserveBorder<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/><sp/>*in_p;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/>*out,<sp/>*out_p;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>row,<sp/>plane;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/>border[4];</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>newWidth,<sp/>newHeight,<sp/>newDepth;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>depth<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>R_MipMap(<sp/>in,<sp/>width,<sp/>height,<sp/>preserveBorder<sp/>);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>symetric<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>width<sp/>&lt;<sp/>2<sp/>||<sp/>height<sp/>&lt;<sp/>2<sp/>||<sp/>depth<sp/>&lt;<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;FatalError(<sp/></highlight><highlight class="stringliteral">&quot;R_MipMap3D<sp/>called<sp/>with<sp/>size<sp/>%i,%i,%i&quot;</highlight><highlight class="normal">,<sp/>width,<sp/>height,<sp/>depth<sp/>);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>border[0]<sp/>=<sp/>in[0];</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>border[1]<sp/>=<sp/>in[1];</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>border[2]<sp/>=<sp/>in[2];</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>border[3]<sp/>=<sp/>in[3];</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>row<sp/>=<sp/>width<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>plane<sp/>=<sp/>row<sp/>*<sp/>height;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>newWidth<sp/>=<sp/>width<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>newHeight<sp/>=<sp/>height<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>newDepth<sp/>=<sp/>depth<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>(byte<sp/>*)R_StaticAlloc(<sp/>newWidth<sp/>*<sp/>newHeight<sp/>*<sp/>newDepth<sp/>*<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>out_p<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>in_p<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>width<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>height<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>depth<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0<sp/>;<sp/>k&lt;depth<sp/>;<sp/>k++,<sp/>in_p+=plane)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0<sp/>;<sp/>i&lt;height<sp/>;<sp/>i++,<sp/>in_p+=row)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0<sp/>;<sp/>j&lt;width<sp/>;<sp/>j++,<sp/>out_p+=4,<sp/>in_p+=8)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[0]<sp/>=<sp/>(in_p[0]<sp/>+<sp/>in_p[4]<sp/>+<sp/>in_p[row+0]<sp/>+<sp/>in_p[row+4]<sp/>+</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_p[plane+0]<sp/>+<sp/>in_p[plane+4]<sp/>+<sp/>in_p[plane+row+0]<sp/>+<sp/>in_p[plane+row+4]</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)&gt;&gt;3;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[1]<sp/>=<sp/>(in_p[1]<sp/>+<sp/>in_p[5]<sp/>+<sp/>in_p[row+1]<sp/>+<sp/>in_p[row+5]<sp/>+</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_p[plane+1]<sp/>+<sp/>in_p[plane+5]<sp/>+<sp/>in_p[plane+row+1]<sp/>+<sp/>in_p[plane+row+5]</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)&gt;&gt;3;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[2]<sp/>=<sp/>(in_p[2]<sp/>+<sp/>in_p[6]<sp/>+<sp/>in_p[row+2]<sp/>+<sp/>in_p[row+6]<sp/>+</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_p[plane+2]<sp/>+<sp/>in_p[plane+6]<sp/>+<sp/>in_p[plane+row+2]<sp/>+<sp/>in_p[plane+row+6]</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)&gt;&gt;3;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_p[3]<sp/>=<sp/>(in_p[3]<sp/>+<sp/>in_p[7]<sp/>+<sp/>in_p[row+3]<sp/>+<sp/>in_p[row+7]<sp/>+</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_p[plane+3]<sp/>+<sp/>in_p[plane+6]<sp/>+<sp/>in_p[plane+row+3]<sp/>+<sp/>in_p[plane+row+6]</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)&gt;&gt;3;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>old<sp/>border<sp/>texel<sp/>back<sp/>around<sp/>if<sp/>desired</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>preserveBorder<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R_SetBorderTexels3D(<sp/>out,<sp/>width,<sp/>height,<sp/>depth,<sp/>border<sp/>);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="548"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="549"><highlight class="comment">R_BlendOverTexture</highlight></codeline>
<codeline lineno="550"><highlight class="comment"></highlight></codeline>
<codeline lineno="551"><highlight class="comment">Apply<sp/>a<sp/>color<sp/>blend<sp/>over<sp/>a<sp/>set<sp/>of<sp/>pixels</highlight></codeline>
<codeline lineno="552"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="553"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_BlendOverTexture(<sp/>byte<sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixelCount,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>blend[4]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>inverseAlpha;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>premult[3];</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>inverseAlpha<sp/>=<sp/>255<sp/>-<sp/>blend[3];</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>premult[0]<sp/>=<sp/>blend[0]<sp/>*<sp/>blend[3];</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>premult[1]<sp/>=<sp/>blend[1]<sp/>*<sp/>blend[3];</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>premult[2]<sp/>=<sp/>blend[2]<sp/>*<sp/>blend[3];</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>pixelCount<sp/>;<sp/>i++,<sp/>data+=4<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[0]<sp/>=<sp/>(<sp/>data[0]<sp/>*<sp/>inverseAlpha<sp/>+<sp/>premult[0]<sp/>)<sp/>&gt;&gt;<sp/>9;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[1]<sp/>=<sp/>(<sp/>data[1]<sp/>*<sp/>inverseAlpha<sp/>+<sp/>premult[1]<sp/>)<sp/>&gt;&gt;<sp/>9;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[2]<sp/>=<sp/>(<sp/>data[2]<sp/>*<sp/>inverseAlpha<sp/>+<sp/>premult[2]<sp/>)<sp/>&gt;&gt;<sp/>9;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="573"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="574"><highlight class="comment">R_HorizontalFlip</highlight></codeline>
<codeline lineno="575"><highlight class="comment"></highlight></codeline>
<codeline lineno="576"><highlight class="comment">Flip<sp/>the<sp/>image<sp/>in<sp/>place</highlight></codeline>
<codeline lineno="577"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="578"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_HorizontalFlip(<sp/>byte<sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>temp;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>height<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0<sp/>;<sp/>j<sp/>&lt;<sp/>width<sp/>/<sp/>2<sp/>;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>*(<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)data<sp/>+<sp/>i<sp/>*<sp/>width<sp/>+<sp/>j<sp/>);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)data<sp/>+<sp/>i<sp/>*<sp/>width<sp/>+<sp/>j<sp/>)<sp/>=<sp/>*(<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)data<sp/>+<sp/>i<sp/>*<sp/>width<sp/>+<sp/>width<sp/>-<sp/>1<sp/>-<sp/>j<sp/>);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)data<sp/>+<sp/>i<sp/>*<sp/>width<sp/>+<sp/>width<sp/>-<sp/>1<sp/>-<sp/>j<sp/>)<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_VerticalFlip(<sp/>byte<sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>temp;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>width<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0<sp/>;<sp/>j<sp/>&lt;<sp/>height<sp/>/<sp/>2<sp/>;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>*(<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)data<sp/>+<sp/>j<sp/>*<sp/>width<sp/>+<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)data<sp/>+<sp/>j<sp/>*<sp/>width<sp/>+<sp/>i<sp/>)<sp/>=<sp/>*(<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)data<sp/>+<sp/>(<sp/>height<sp/>-<sp/>1<sp/>-<sp/>j<sp/>)<sp/>*<sp/>width<sp/>+<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)data<sp/>+<sp/>(<sp/>height<sp/>-<sp/>1<sp/>-<sp/>j<sp/>)<sp/>*<sp/>width<sp/>+<sp/>i<sp/>)<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_RotatePic(<sp/>byte<sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*temp;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)R_StaticAlloc(<sp/>width<sp/>*<sp/>width<sp/>*<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>width<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0<sp/>;<sp/>j<sp/>&lt;<sp/>width<sp/>;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(<sp/>temp<sp/>+<sp/>i<sp/>*<sp/>width<sp/>+<sp/>j<sp/>)<sp/>=<sp/>*(<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)data<sp/>+<sp/>j<sp/>*<sp/>width<sp/>+<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(<sp/>data,<sp/>temp,<sp/>width<sp/>*<sp/>width<sp/>*<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>R_StaticFree(<sp/>temp<sp/>);</highlight></codeline>
<codeline lineno="620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/renderer/Image_process.cpp"/>
  </compounddef>
</doxygen>
