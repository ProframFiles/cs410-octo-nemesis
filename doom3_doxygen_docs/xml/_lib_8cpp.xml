<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_lib_8cpp" kind="file">
    <compoundname>Lib.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">precompiled.h</includes>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_lib_8cpp_1ae309c6fbb874ccc6f25e0db4fb0ee5c8" prot="public" static="no" mutable="no">
        <type><ref refid="classid_vec4" kindref="compound">idVec4</ref></type>
        <definition>idVec4 colorBlack</definition>
        <argsstring></argsstring>
        <name>colorBlack</name>
        <initializer>= <ref refid="classid_vec4" kindref="compound">idVec4</ref>( 0.00f, 0.00f, 0.00f, 1.00f )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="115" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1aff5329dda7a30bc514fde7a6725c8762" prot="public" static="no" mutable="no">
        <type><ref refid="classid_vec4" kindref="compound">idVec4</ref></type>
        <definition>idVec4 colorWhite</definition>
        <argsstring></argsstring>
        <name>colorWhite</name>
        <initializer>= <ref refid="classid_vec4" kindref="compound">idVec4</ref>( 1.00f, 1.00f, 1.00f, 1.00f )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="116" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1a560ce86a7944d5ac7cfc7a290b39090f" prot="public" static="no" mutable="no">
        <type><ref refid="classid_vec4" kindref="compound">idVec4</ref></type>
        <definition>idVec4 colorRed</definition>
        <argsstring></argsstring>
        <name>colorRed</name>
        <initializer>= <ref refid="classid_vec4" kindref="compound">idVec4</ref>( 1.00f, 0.00f, 0.00f, 1.00f )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="117" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1aa8f8089d7c11c315ad14ff9f10301957" prot="public" static="no" mutable="no">
        <type><ref refid="classid_vec4" kindref="compound">idVec4</ref></type>
        <definition>idVec4 colorGreen</definition>
        <argsstring></argsstring>
        <name>colorGreen</name>
        <initializer>= <ref refid="classid_vec4" kindref="compound">idVec4</ref>( 0.00f, 1.00f, 0.00f, 1.00f )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="118" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1a37ea1867bf59a5a7caf15bfaba95c95c" prot="public" static="no" mutable="no">
        <type><ref refid="classid_vec4" kindref="compound">idVec4</ref></type>
        <definition>idVec4 colorBlue</definition>
        <argsstring></argsstring>
        <name>colorBlue</name>
        <initializer>= <ref refid="classid_vec4" kindref="compound">idVec4</ref>( 0.00f, 0.00f, 1.00f, 1.00f )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="119" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1a5b717d5b1aa7a1cf72a2d8d1f02c92b9" prot="public" static="no" mutable="no">
        <type><ref refid="classid_vec4" kindref="compound">idVec4</ref></type>
        <definition>idVec4 colorYellow</definition>
        <argsstring></argsstring>
        <name>colorYellow</name>
        <initializer>= <ref refid="classid_vec4" kindref="compound">idVec4</ref>( 1.00f, 1.00f, 0.00f, 1.00f )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="120" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1a625c1bd5102099a5afdbbc21ba1a8ae9" prot="public" static="no" mutable="no">
        <type><ref refid="classid_vec4" kindref="compound">idVec4</ref></type>
        <definition>idVec4 colorMagenta</definition>
        <argsstring></argsstring>
        <name>colorMagenta</name>
        <initializer>= <ref refid="classid_vec4" kindref="compound">idVec4</ref>( 1.00f, 0.00f, 1.00f, 1.00f )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="121" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1a24d2a4590ad9157ed2ed6abd931677cd" prot="public" static="no" mutable="no">
        <type><ref refid="classid_vec4" kindref="compound">idVec4</ref></type>
        <definition>idVec4 colorCyan</definition>
        <argsstring></argsstring>
        <name>colorCyan</name>
        <initializer>= <ref refid="classid_vec4" kindref="compound">idVec4</ref>( 0.00f, 1.00f, 1.00f, 1.00f )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="122" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1abe0bd831d1d3354e25f3f4e967ac9198" prot="public" static="no" mutable="no">
        <type><ref refid="classid_vec4" kindref="compound">idVec4</ref></type>
        <definition>idVec4 colorOrange</definition>
        <argsstring></argsstring>
        <name>colorOrange</name>
        <initializer>= <ref refid="classid_vec4" kindref="compound">idVec4</ref>( 1.00f, 0.50f, 0.00f, 1.00f )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="123" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1a383e3d3e5abea9740857c78c88f4cf62" prot="public" static="no" mutable="no">
        <type><ref refid="classid_vec4" kindref="compound">idVec4</ref></type>
        <definition>idVec4 colorPurple</definition>
        <argsstring></argsstring>
        <name>colorPurple</name>
        <initializer>= <ref refid="classid_vec4" kindref="compound">idVec4</ref>( 0.60f, 0.00f, 0.60f, 1.00f )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="124" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1ad4f11b90769eaeda382f40d78070bc72" prot="public" static="no" mutable="no">
        <type><ref refid="classid_vec4" kindref="compound">idVec4</ref></type>
        <definition>idVec4 colorPink</definition>
        <argsstring></argsstring>
        <name>colorPink</name>
        <initializer>= <ref refid="classid_vec4" kindref="compound">idVec4</ref>( 0.73f, 0.40f, 0.48f, 1.00f )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="125" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1abc25569edd7cb6f7619bdbab50c3757f" prot="public" static="no" mutable="no">
        <type><ref refid="classid_vec4" kindref="compound">idVec4</ref></type>
        <definition>idVec4 colorBrown</definition>
        <argsstring></argsstring>
        <name>colorBrown</name>
        <initializer>= <ref refid="classid_vec4" kindref="compound">idVec4</ref>( 0.40f, 0.35f, 0.08f, 1.00f )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="126" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1a76c3dd6779e7360d79ce875a92943a26" prot="public" static="no" mutable="no">
        <type><ref refid="classid_vec4" kindref="compound">idVec4</ref></type>
        <definition>idVec4 colorLtGrey</definition>
        <argsstring></argsstring>
        <name>colorLtGrey</name>
        <initializer>= <ref refid="classid_vec4" kindref="compound">idVec4</ref>( 0.75f, 0.75f, 0.75f, 1.00f )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="127" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1a91ba9db57b973c725fc6d222484837bf" prot="public" static="no" mutable="no">
        <type><ref refid="classid_vec4" kindref="compound">idVec4</ref></type>
        <definition>idVec4 colorMdGrey</definition>
        <argsstring></argsstring>
        <name>colorMdGrey</name>
        <initializer>= <ref refid="classid_vec4" kindref="compound">idVec4</ref>( 0.50f, 0.50f, 0.50f, 1.00f )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="128" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1a6697e39886c0d7125de4f824fae86a15" prot="public" static="no" mutable="no">
        <type><ref refid="classid_vec4" kindref="compound">idVec4</ref></type>
        <definition>idVec4 colorDkGrey</definition>
        <argsstring></argsstring>
        <name>colorDkGrey</name>
        <initializer>= <ref refid="classid_vec4" kindref="compound">idVec4</ref>( 0.25f, 0.25f, 0.25f, 1.00f )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="129" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1a8cbdf159888453d819c30243ee65d629" prot="public" static="yes" mutable="no">
        <type>dword</type>
        <definition>dword colorMask[2]</definition>
        <argsstring>[2]</argsstring>
        <name>colorMask</name>
        <initializer>= { 255, 0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="131" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1abce4f9bb1a52da538a12977ef0d0e5b8" prot="public" static="yes" mutable="no">
        <type>short(*</type>
        <definition>short(* _BigShort)(short l)</definition>
        <argsstring>)(short l)</argsstring>
        <name>_BigShort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="266" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1a7eeef1b3eb3cd89479b388f399e2da31" prot="public" static="yes" mutable="no">
        <type>short(*</type>
        <definition>short(* _LittleShort)(short l)</definition>
        <argsstring>)(short l)</argsstring>
        <name>_LittleShort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="267" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1a14b4aa91d29dfe97ab59f7b67f7fe712" prot="public" static="yes" mutable="no">
        <type>int(*</type>
        <definition>int(* _BigLong)(int l)</definition>
        <argsstring>)(int l)</argsstring>
        <name>_BigLong</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="268" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1a7569ced319a545e7500692e061d94518" prot="public" static="yes" mutable="no">
        <type>int(*</type>
        <definition>int(* _LittleLong)(int l)</definition>
        <argsstring>)(int l)</argsstring>
        <name>_LittleLong</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="269" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1afdbc44b0eb49cb3c5702d36ad866cec5" prot="public" static="yes" mutable="no">
        <type>float(*</type>
        <definition>float(* _BigFloat)(float l)</definition>
        <argsstring>)(float l)</argsstring>
        <name>_BigFloat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="270" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1a28d897bef1d5d3f0c767c1a8c1b6df27" prot="public" static="yes" mutable="no">
        <type>float(*</type>
        <definition>float(* _LittleFloat)(float l)</definition>
        <argsstring>)(float l)</argsstring>
        <name>_LittleFloat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="271" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1aaa33bcf56f61cb54b0242c1533542757" prot="public" static="yes" mutable="no">
        <type>void(*</type>
        <definition>void(* _BigRevBytes)(void *bp, int elsize, int elcount)</definition>
        <argsstring>)(void *bp, int elsize, int elcount)</argsstring>
        <name>_BigRevBytes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="272" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1ad78aeeaf503be4ac2ed85e097d69f00d" prot="public" static="yes" mutable="no">
        <type>void(*</type>
        <definition>void(* _LittleRevBytes)(void *bp, int elsize, int elcount)</definition>
        <argsstring>)(void *bp, int elsize, int elcount)</argsstring>
        <name>_LittleRevBytes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="273" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1a72f7bda645b82d70693517d83b727257" prot="public" static="yes" mutable="no">
        <type>void(*</type>
        <definition>void(* _LittleBitField)(void *bp, int elsize)</definition>
        <argsstring>)(void *bp, int elsize)</argsstring>
        <name>_LittleBitField</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="274" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1a921792b38ce79826cd70f7216af3d96c" prot="public" static="yes" mutable="no">
        <type>void(*</type>
        <definition>void(* _SixtetsForInt)(byte *out, int src)</definition>
        <argsstring>)(byte *out, int src)</argsstring>
        <name>_SixtetsForInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="275" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_lib_8cpp_1aa445839cd24a1534ac8cd456967c10a1" prot="public" static="yes" mutable="no">
        <type>int(*</type>
        <definition>int(* _IntForSixtets)(byte *in)</definition>
        <argsstring>)(byte *in)</argsstring>
        <name>_IntForSixtets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="276" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="276" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_lib_8cpp_1a5c5180a93a6926a5bcfee9ff4e9e6765" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ID_INLINE byte</type>
        <definition>static ID_INLINE byte ColorFloatToByte</definition>
        <argsstring>(float c)</argsstring>
        <name>ColorFloatToByte</name>
        <param>
          <type>float</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="138" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="138" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1affed0dabc17447979a9fb20775ae88b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dword</type>
        <definition>dword PackColor</definition>
        <argsstring>(const idVec4 &amp;color)</argsstring>
        <name>PackColor</name>
        <param>
          <type>const <ref refid="classid_vec4" kindref="compound">idVec4</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="147" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="147" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1aa21188017738e1f2f3e98a49c1c65b31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UnpackColor</definition>
        <argsstring>(const dword color, idVec4 &amp;unpackedColor)</argsstring>
        <name>UnpackColor</name>
        <param>
          <type>const dword</type>
          <declname>color</declname>
        </param>
        <param>
          <type><ref refid="classid_vec4" kindref="compound">idVec4</ref> &amp;</type>
          <declname>unpackedColor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="169" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="169" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1a81c3aae10619b764aff4e7b78481a26b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dword</type>
        <definition>dword PackColor</definition>
        <argsstring>(const idVec3 &amp;color)</argsstring>
        <name>PackColor</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="190" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="190" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1a57b77d6662c1ffe641a142e436acc9e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UnpackColor</definition>
        <argsstring>(const dword color, idVec3 &amp;unpackedColor)</argsstring>
        <name>UnpackColor</name>
        <param>
          <type>const dword</type>
          <declname>color</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>unpackedColor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="211" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="211" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1a978c48a348221d299cff33735bba024d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short</type>
        <definition>short BigShort</definition>
        <argsstring>(short l)</argsstring>
        <name>BigShort</name>
        <param>
          <type>short</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="278" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="278" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1a828f0707165da852f26a4ba78b5c8b93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short</type>
        <definition>short LittleShort</definition>
        <argsstring>(short l)</argsstring>
        <name>LittleShort</name>
        <param>
          <type>short</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="279" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="279" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1ab71af9df568c77b660e319cd5c55c5f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BigLong</definition>
        <argsstring>(int l)</argsstring>
        <name>BigLong</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="280" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="280" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1a6d86ea8391ece88ae93396b5963fd000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int LittleLong</definition>
        <argsstring>(int l)</argsstring>
        <name>LittleLong</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="281" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="281" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1a9e67da200e74578e74cab026386ad124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float BigFloat</definition>
        <argsstring>(float l)</argsstring>
        <name>BigFloat</name>
        <param>
          <type>float</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="282" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="282" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1aab0c3ba93ad499c902e21c6aafc4abeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float LittleFloat</definition>
        <argsstring>(float l)</argsstring>
        <name>LittleFloat</name>
        <param>
          <type>float</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="283" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="283" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1aaccca1d2784ce3dd24ffde6838dfd543" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BigRevBytes</definition>
        <argsstring>(void *bp, int elsize, int elcount)</argsstring>
        <name>BigRevBytes</name>
        <param>
          <type>void *</type>
          <declname>bp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>elsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>elcount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="284" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="284" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1ac77bd281bde42f9aadb687a0b03aafeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LittleRevBytes</definition>
        <argsstring>(void *bp, int elsize, int elcount)</argsstring>
        <name>LittleRevBytes</name>
        <param>
          <type>void *</type>
          <declname>bp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>elsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>elcount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="285" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="285" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1a51d6efc0ae39f523c0dd0d2e30ffb280" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LittleBitField</definition>
        <argsstring>(void *bp, int elsize)</argsstring>
        <name>LittleBitField</name>
        <param>
          <type>void *</type>
          <declname>bp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>elsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="286" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="286" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1ac90620cddce45767581f25805392686f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SixtetsForInt</definition>
        <argsstring>(byte *out, int src)</argsstring>
        <name>SixtetsForInt</name>
        <param>
          <type>byte *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="288" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="288" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1a9c47b85242eb6ebfd7334b97c802b15c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IntForSixtets</definition>
        <argsstring>(byte *in)</argsstring>
        <name>IntForSixtets</name>
        <param>
          <type>byte *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="289" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="289" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1a95ba0ebe9d824ac28d2b29d8ae536f36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short</type>
        <definition>short ShortSwap</definition>
        <argsstring>(short l)</argsstring>
        <name>ShortSwap</name>
        <param>
          <type>short</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="296" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="296" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1a0b956d27866d70acb1fa37479ae24a36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short</type>
        <definition>short ShortNoSwap</definition>
        <argsstring>(short l)</argsstring>
        <name>ShortNoSwap</name>
        <param>
          <type>short</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="310" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="310" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1a77083cf3ebbbebab14951e086b414729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int LongSwap</definition>
        <argsstring>(int l)</argsstring>
        <name>LongSwap</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="319" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="319" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1a4478d8c1d49a3463edaacad65f105999" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int LongNoSwap</definition>
        <argsstring>(int l)</argsstring>
        <name>LongNoSwap</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="335" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="335" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1aa6c5effea70a7dc83c97ff2c6a2a12ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float FloatSwap</definition>
        <argsstring>(float f)</argsstring>
        <name>FloatSwap</name>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="344" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="344" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1a9fe357d18098a536a373c6026df0954c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float FloatNoSwap</definition>
        <argsstring>(float f)</argsstring>
        <name>FloatNoSwap</name>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="364" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="364" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1a55681d57c5ec8779bba4de0a6600c3a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RevBytesSwap</definition>
        <argsstring>(void *bp, int elsize, int elcount)</argsstring>
        <name>RevBytesSwap</name>
        <param>
          <type>void *</type>
          <declname>bp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>elsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>elcount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="382" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="382" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1aa3642f52d9d61302e091f04b1d7c4d58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RevBitFieldSwap</definition>
        <argsstring>(void *bp, int elsize)</argsstring>
        <name>RevBitFieldSwap</name>
        <param>
          <type>void *</type>
          <declname>bp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>elsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="425" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="425" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1a87fab4ae1d5cf0ef7d7c49784316f5df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RevBytesNoSwap</definition>
        <argsstring>(void *bp, int elsize, int elcount)</argsstring>
        <name>RevBytesNoSwap</name>
        <param>
          <type>void *</type>
          <declname>bp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>elsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>elcount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="449" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="449" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1aa607eec91233c97c61ec51694a22effb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RevBitFieldNoSwap</definition>
        <argsstring>(void *bp, int elsize)</argsstring>
        <name>RevBitFieldNoSwap</name>
        <param>
          <type>void *</type>
          <declname>bp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>elsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="458" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="458" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1ad0b3273efe6cf40c49c1ff613dcbc307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SixtetsForIntLittle</definition>
        <argsstring>(byte *out, int src)</argsstring>
        <name>SixtetsForIntLittle</name>
        <param>
          <type>byte *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="467" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="467" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1af5cac5a5601c9e9bf132d7451be96e4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SixtetsForIntBig</definition>
        <argsstring>(byte *out, int src)</argsstring>
        <name>SixtetsForIntBig</name>
        <param>
          <type>byte *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="481" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="481" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1a9d9db77196328aab096e755410090c0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IntForSixtetsLittle</definition>
        <argsstring>(byte *in)</argsstring>
        <name>IntForSixtetsLittle</name>
        <param>
          <type>byte *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="493" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="493" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1af58cd41499c36141c0de82a8cbb011d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IntForSixtetsBig</definition>
        <argsstring>(byte *in)</argsstring>
        <name>IntForSixtetsBig</name>
        <param>
          <type>byte *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="511" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="511" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1a3f1e51a375175dfec81299186ba5135f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Swap_Init</definition>
        <argsstring>(void)</argsstring>
        <name>Swap_Init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="525" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="525" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1a7306f9eaae0369079adb91bff1f461c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Swap_IsBigEndian</definition>
        <argsstring>(void)</argsstring>
        <name>Swap_IsBigEndian</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="563" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="563" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="_lib_8cpp_1ac7ab9855c0005a7cfe2700643d84ef6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AssertFailed</definition>
        <argsstring>(const char *file, int line, const char *expression)</argsstring>
        <name>AssertFailed</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expression</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" line="576" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp" bodystart="576" bodyend="585"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(<sp/>MACOS_X<sp/>)</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="39"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="40"><highlight class="comment"></highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/>idLib</highlight></codeline>
<codeline lineno="42"><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="44"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><ref refid="classid_sys" kindref="compound">idSys</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::sys<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><ref refid="classid_common" kindref="compound">idCommon</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>idLib::common<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><ref refid="classid_c_var_system" kindref="compound">idCVarSystem</ref><sp/>*<sp/><sp/>idLib::cvarSystem<sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="classid_file_system" kindref="compound">idFileSystem</ref><sp/>*<sp/><sp/>idLib::fileSystem<sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::frameNumber<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="53"><highlight class="comment">================</highlight></codeline>
<codeline lineno="54"><highlight class="comment">idLib::Init</highlight></codeline>
<codeline lineno="55"><highlight class="comment">================</highlight></codeline>
<codeline lineno="56"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idLib::Init(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>little/big<sp/>endian<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>Swap_Init();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>memory<sp/>manager</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>Mem_Init();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>string<sp/>memory<sp/>allocator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>idStr::InitMemory();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>generic<sp/>SIMD<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>idSIMD::Init();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>math</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>idMath::Init();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>idMatX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//idMatX::Test();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>idPolynomial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>idPolynomial::Test();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>the<sp/>dictionary<sp/>string<sp/>pools</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>idDict::Init();</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="87"><highlight class="comment">================</highlight></codeline>
<codeline lineno="88"><highlight class="comment">idLib::ShutDown</highlight></codeline>
<codeline lineno="89"><highlight class="comment">================</highlight></codeline>
<codeline lineno="90"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idLib::ShutDown(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shut<sp/>down<sp/>the<sp/>dictionary<sp/>string<sp/>pools</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>idDict::Shutdown();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shut<sp/>down<sp/>the<sp/>string<sp/>memory<sp/>allocator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>idStr::ShutdownMemory();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shut<sp/>down<sp/>the<sp/>SIMD<sp/>engine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>idSIMD::Shutdown();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shut<sp/>down<sp/>the<sp/>memory<sp/>manager</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>Mem_Shutdown();</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="108"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="109"><highlight class="comment"></highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/>Colors</highlight></codeline>
<codeline lineno="111"><highlight class="comment"></highlight></codeline>
<codeline lineno="112"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="113"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/><sp/>colorBlack<sp/><sp/>=<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>0.00f,<sp/>0.00f,<sp/>0.00f,<sp/>1.00f<sp/>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/><sp/>colorWhite<sp/><sp/>=<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>1.00f,<sp/>1.00f,<sp/>1.00f,<sp/>1.00f<sp/>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/><sp/>colorRed<sp/><sp/><sp/><sp/>=<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>1.00f,<sp/>0.00f,<sp/>0.00f,<sp/>1.00f<sp/>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/><sp/>colorGreen<sp/><sp/>=<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>0.00f,<sp/>1.00f,<sp/>0.00f,<sp/>1.00f<sp/>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/><sp/>colorBlue<sp/><sp/><sp/>=<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>0.00f,<sp/>0.00f,<sp/>1.00f,<sp/>1.00f<sp/>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/><sp/>colorYellow<sp/>=<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>1.00f,<sp/>1.00f,<sp/>0.00f,<sp/>1.00f<sp/>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/><sp/>colorMagenta=<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>1.00f,<sp/>0.00f,<sp/>1.00f,<sp/>1.00f<sp/>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/><sp/>colorCyan<sp/><sp/><sp/>=<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>0.00f,<sp/>1.00f,<sp/>1.00f,<sp/>1.00f<sp/>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/><sp/>colorOrange<sp/>=<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>1.00f,<sp/>0.50f,<sp/>0.00f,<sp/>1.00f<sp/>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/><sp/>colorPurple<sp/>=<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>0.60f,<sp/>0.00f,<sp/>0.60f,<sp/>1.00f<sp/>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/><sp/>colorPink<sp/><sp/><sp/>=<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>0.73f,<sp/>0.40f,<sp/>0.48f,<sp/>1.00f<sp/>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/><sp/>colorBrown<sp/><sp/>=<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>0.40f,<sp/>0.35f,<sp/>0.08f,<sp/>1.00f<sp/>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/><sp/>colorLtGrey<sp/>=<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>0.75f,<sp/>0.75f,<sp/>0.75f,<sp/>1.00f<sp/>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/><sp/>colorMdGrey<sp/>=<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>0.50f,<sp/>0.50f,<sp/>0.50f,<sp/>1.00f<sp/>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/><sp/>colorDkGrey<sp/>=<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>0.25f,<sp/>0.25f,<sp/>0.25f,<sp/>1.00f<sp/>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>dword<sp/>colorMask[2]<sp/>=<sp/>{<sp/>255,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="134"><highlight class="comment">================</highlight></codeline>
<codeline lineno="135"><highlight class="comment">ColorFloatToByte</highlight></codeline>
<codeline lineno="136"><highlight class="comment">================</highlight></codeline>
<codeline lineno="137"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>byte<sp/>ColorFloatToByte(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>c<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(byte)<sp/>(<sp/>(<sp/>(dword)<sp/>(<sp/>c<sp/>*<sp/>255.0f<sp/>)<sp/>)<sp/>&amp;<sp/>colorMask[FLOATSIGNBITSET(c)]<sp/>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="143"><highlight class="comment">================</highlight></codeline>
<codeline lineno="144"><highlight class="comment">PackColor</highlight></codeline>
<codeline lineno="145"><highlight class="comment">================</highlight></codeline>
<codeline lineno="146"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">dword<sp/>PackColor(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/>&amp;color<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>dword<sp/>dw,<sp/>dx,<sp/>dy,<sp/>dz;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>ColorFloatToByte(<sp/>color.x<sp/>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>ColorFloatToByte(<sp/>color.y<sp/>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>dz<sp/>=<sp/>ColorFloatToByte(<sp/>color.z<sp/>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>dw<sp/>=<sp/>ColorFloatToByte(<sp/>color.w<sp/>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>||<sp/>defined(__linux__)<sp/>||<sp/>(defined(MACOS_X)<sp/>&amp;&amp;<sp/>defined(__i386__))</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>dx<sp/>&lt;&lt;<sp/>0<sp/>)<sp/>|<sp/>(<sp/>dy<sp/>&lt;&lt;<sp/>8<sp/>)<sp/>|<sp/>(<sp/>dz<sp/>&lt;&lt;<sp/>16<sp/>)<sp/>|<sp/>(<sp/>dw<sp/>&lt;&lt;<sp/>24<sp/>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>(defined(MACOS_X)<sp/>&amp;&amp;<sp/>defined(__ppc__))</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>dx<sp/>&lt;&lt;<sp/>24<sp/>)<sp/>|<sp/>(<sp/>dy<sp/>&lt;&lt;<sp/>16<sp/>)<sp/>|<sp/>(<sp/>dz<sp/>&lt;&lt;<sp/>8<sp/>)<sp/>|<sp/>(<sp/>dw<sp/>&lt;&lt;<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#error<sp/>OS<sp/>define<sp/>is<sp/>required!</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="165"><highlight class="comment">================</highlight></codeline>
<codeline lineno="166"><highlight class="comment">UnpackColor</highlight></codeline>
<codeline lineno="167"><highlight class="comment">================</highlight></codeline>
<codeline lineno="168"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnpackColor(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dword<sp/>color,<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/>&amp;unpackedColor<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>||<sp/>defined(__linux__)<sp/>||<sp/>(defined(MACOS_X)<sp/>&amp;&amp;<sp/>defined(__i386__))</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>unpackedColor.Set(<sp/>(<sp/>(<sp/>color<sp/>&gt;&gt;<sp/>0<sp/>)<sp/>&amp;<sp/>255<sp/>)<sp/>*<sp/>(<sp/>1.0f<sp/>/<sp/>255.0f<sp/>),</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>color<sp/>&gt;&gt;<sp/>8<sp/>)<sp/>&amp;<sp/>255<sp/>)<sp/>*<sp/>(<sp/>1.0f<sp/>/<sp/>255.0f<sp/>),<sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>color<sp/>&gt;&gt;<sp/>16<sp/>)<sp/>&amp;<sp/>255<sp/>)<sp/>*<sp/>(<sp/>1.0f<sp/>/<sp/>255.0f<sp/>),</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>color<sp/>&gt;&gt;<sp/>24<sp/>)<sp/>&amp;<sp/>255<sp/>)<sp/>*<sp/>(<sp/>1.0f<sp/>/<sp/>255.0f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>(defined(MACOS_X)<sp/>&amp;&amp;<sp/>defined(__ppc__))</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>unpackedColor.Set(<sp/>(<sp/>(<sp/>color<sp/>&gt;&gt;<sp/>24<sp/>)<sp/>&amp;<sp/>255<sp/>)<sp/>*<sp/>(<sp/>1.0f<sp/>/<sp/>255.0f<sp/>),</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>color<sp/>&gt;&gt;<sp/>16<sp/>)<sp/>&amp;<sp/>255<sp/>)<sp/>*<sp/>(<sp/>1.0f<sp/>/<sp/>255.0f<sp/>),<sp/></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>color<sp/>&gt;&gt;<sp/>8<sp/>)<sp/>&amp;<sp/>255<sp/>)<sp/>*<sp/>(<sp/>1.0f<sp/>/<sp/>255.0f<sp/>),</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>color<sp/>&gt;&gt;<sp/>0<sp/>)<sp/>&amp;<sp/>255<sp/>)<sp/>*<sp/>(<sp/>1.0f<sp/>/<sp/>255.0f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#error<sp/>OS<sp/>define<sp/>is<sp/>required!</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="186"><highlight class="comment">================</highlight></codeline>
<codeline lineno="187"><highlight class="comment">PackColor</highlight></codeline>
<codeline lineno="188"><highlight class="comment">================</highlight></codeline>
<codeline lineno="189"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">dword<sp/>PackColor(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;color<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>dword<sp/>dx,<sp/>dy,<sp/>dz;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>ColorFloatToByte(<sp/>color.x<sp/>);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>ColorFloatToByte(<sp/>color.y<sp/>);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>dz<sp/>=<sp/>ColorFloatToByte(<sp/>color.z<sp/>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>||<sp/>defined(__linux__)<sp/>||<sp/>(defined(MACOS_X)<sp/>&amp;&amp;<sp/>defined(__i386__))</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>dx<sp/>&lt;&lt;<sp/>0<sp/>)<sp/>|<sp/>(<sp/>dy<sp/>&lt;&lt;<sp/>8<sp/>)<sp/>|<sp/>(<sp/>dz<sp/>&lt;&lt;<sp/>16<sp/>);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>(defined(MACOS_X)<sp/>&amp;&amp;<sp/>defined(__ppc__))</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>dy<sp/>&lt;&lt;<sp/>16<sp/>)<sp/>|<sp/>(<sp/>dz<sp/>&lt;&lt;<sp/>8<sp/>)<sp/>|<sp/>(<sp/>dx<sp/>&lt;&lt;<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#error<sp/>OS<sp/>define<sp/>is<sp/>required!</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="207"><highlight class="comment">================</highlight></codeline>
<codeline lineno="208"><highlight class="comment">UnpackColor</highlight></codeline>
<codeline lineno="209"><highlight class="comment">================</highlight></codeline>
<codeline lineno="210"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnpackColor(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dword<sp/>color,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;unpackedColor<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>||<sp/>defined(__linux__)<sp/>||<sp/>(defined(MACOS_X)<sp/>&amp;&amp;<sp/>defined(__i386__))</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>unpackedColor.Set(<sp/>(<sp/>(<sp/>color<sp/>&gt;&gt;<sp/>0<sp/>)<sp/>&amp;<sp/>255<sp/>)<sp/>*<sp/>(<sp/>1.0f<sp/>/<sp/>255.0f<sp/>),</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>color<sp/>&gt;&gt;<sp/>8<sp/>)<sp/>&amp;<sp/>255<sp/>)<sp/>*<sp/>(<sp/>1.0f<sp/>/<sp/>255.0f<sp/>),<sp/></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>color<sp/>&gt;&gt;<sp/>16<sp/>)<sp/>&amp;<sp/>255<sp/>)<sp/>*<sp/>(<sp/>1.0f<sp/>/<sp/>255.0f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>(defined(MACOS_X)<sp/>&amp;&amp;<sp/>defined(__ppc__))</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>unpackedColor.Set(<sp/>(<sp/>(<sp/>color<sp/>&gt;&gt;<sp/>16<sp/>)<sp/>&amp;<sp/>255<sp/>)<sp/>*<sp/>(<sp/>1.0f<sp/>/<sp/>255.0f<sp/>),</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>color<sp/>&gt;&gt;<sp/>8<sp/>)<sp/>&amp;<sp/>255<sp/>)<sp/>*<sp/>(<sp/>1.0f<sp/>/<sp/>255.0f<sp/>),</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>color<sp/>&gt;&gt;<sp/>0<sp/>)<sp/>&amp;<sp/>255<sp/>)<sp/>*<sp/>(<sp/>1.0f<sp/>/<sp/>255.0f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#error<sp/>OS<sp/>define<sp/>is<sp/>required!</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="226"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="227"><highlight class="comment">idLib::Error</highlight></codeline>
<codeline lineno="228"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="229"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idLib::Error(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/><sp/><sp/><sp/><sp/>argptr;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text[MAX_STRING_CHARS];</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(<sp/>argptr,<sp/>fmt<sp/>);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>idStr::vsnPrintf(<sp/>text,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>text<sp/>),<sp/>fmt,<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Error(<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="242"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="243"><highlight class="comment">idLib::Warning</highlight></codeline>
<codeline lineno="244"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="245"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idLib::Warning(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/><sp/><sp/><sp/><sp/>argptr;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text[MAX_STRING_CHARS];</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(<sp/>argptr,<sp/>fmt<sp/>);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>idStr::vsnPrintf(<sp/>text,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>text<sp/>),<sp/>fmt,<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="258"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="259"><highlight class="comment"></highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/>Byte<sp/>order<sp/>functions</highlight></codeline>
<codeline lineno="261"><highlight class="comment"></highlight></codeline>
<codeline lineno="262"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="263"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>just<sp/>use<sp/>function<sp/>pointers,<sp/>or<sp/>dll<sp/>linkage<sp/>can<sp/>mess<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>short<sp/><sp/><sp/><sp/>(*_BigShort)(<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>l<sp/>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>short<sp/><sp/><sp/><sp/>(*_LittleShort)(<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>l<sp/>);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/>(*_BigLong)(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/>(*_LittleLong)(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>float<sp/><sp/><sp/><sp/>(*_BigFloat)(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>l<sp/>);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>float<sp/><sp/><sp/><sp/>(*_LittleFloat)(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>l<sp/>);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>void<sp/><sp/><sp/><sp/><sp/>(*_BigRevBytes)(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*bp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elsize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elcount<sp/>);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>void<sp/><sp/><sp/><sp/><sp/>(*_LittleRevBytes)(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*bp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elsize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elcount<sp/>);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>void<sp/><sp/><sp/><sp/><sp/>(*_LittleBitField)(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*bp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elsize<sp/>);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>void<sp/><sp/><sp/><sp/><sp/>(*_SixtetsForInt)(<sp/>byte<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src<sp/>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/>(*_IntForSixtets)(<sp/>byte<sp/>*in<sp/>);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/>BigShort(<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>l<sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_BigShort(<sp/>l<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/>LittleShort(<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>l<sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_LittleShort(<sp/>l<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>BigLong(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_BigLong(<sp/>l<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>LittleLong(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_LittleLong(<sp/>l<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>BigFloat(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>l<sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_BigFloat(<sp/>l<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>LittleFloat(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>l<sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_LittleFloat(<sp/>l<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>BigRevBytes(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*bp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elsize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elcount<sp/>)<sp/>{<sp/>_BigRevBytes(<sp/>bp,<sp/>elsize,<sp/>elcount<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>LittleRevBytes(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*bp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elsize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elcount<sp/>){<sp/>_LittleRevBytes(<sp/>bp,<sp/>elsize,<sp/>elcount<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>LittleBitField(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*bp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elsize<sp/>){<sp/>_LittleBitField(<sp/>bp,<sp/>elsize<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>SixtetsForInt(<sp/>byte<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src)<sp/>{<sp/>_SixtetsForInt(<sp/>out,<sp/>src<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>IntForSixtets(<sp/>byte<sp/>*in<sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_IntForSixtets(<sp/>in<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="292"><highlight class="comment">================</highlight></codeline>
<codeline lineno="293"><highlight class="comment">ShortSwap</highlight></codeline>
<codeline lineno="294"><highlight class="comment">================</highlight></codeline>
<codeline lineno="295"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>ShortSwap(<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>l<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/>b1,b2;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>b1<sp/>=<sp/>l&amp;255;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>b2<sp/>=<sp/>(l&gt;&gt;8)&amp;255;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(b1&lt;&lt;8)<sp/>+<sp/>b2;</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="306"><highlight class="comment">================</highlight></codeline>
<codeline lineno="307"><highlight class="comment">ShortNoSwap</highlight></codeline>
<codeline lineno="308"><highlight class="comment">================</highlight></codeline>
<codeline lineno="309"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>ShortNoSwap(<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>l<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l;</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="315"><highlight class="comment">================</highlight></codeline>
<codeline lineno="316"><highlight class="comment">LongSwap</highlight></codeline>
<codeline lineno="317"><highlight class="comment">================</highlight></codeline>
<codeline lineno="318"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LongSwap<sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/>b1,b2,b3,b4;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>b1<sp/>=<sp/>l&amp;255;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>b2<sp/>=<sp/>(l&gt;&gt;8)&amp;255;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>b3<sp/>=<sp/>(l&gt;&gt;16)&amp;255;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>b4<sp/>=<sp/>(l&gt;&gt;24)&amp;255;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)b1&lt;&lt;24)<sp/>+<sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)b2&lt;&lt;16)<sp/>+<sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)b3&lt;&lt;8)<sp/>+<sp/>b4;</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="331"><highlight class="comment">================</highlight></codeline>
<codeline lineno="332"><highlight class="comment">LongNoSwap</highlight></codeline>
<codeline lineno="333"><highlight class="comment">================</highlight></codeline>
<codeline lineno="334"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LongNoSwap(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l;</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="340"><highlight class="comment">================</highlight></codeline>
<codeline lineno="341"><highlight class="comment">FloatSwap</highlight></codeline>
<codeline lineno="342"><highlight class="comment">================</highlight></codeline>
<codeline lineno="343"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>FloatSwap(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>f;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/>b[4];</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>dat1,<sp/>dat2;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>dat1.f<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>dat2.b[0]<sp/>=<sp/>dat1.b[3];</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>dat2.b[1]<sp/>=<sp/>dat1.b[2];</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>dat2.b[2]<sp/>=<sp/>dat1.b[1];</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>dat2.b[3]<sp/>=<sp/>dat1.b[0];</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dat2.f;</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="360"><highlight class="comment">================</highlight></codeline>
<codeline lineno="361"><highlight class="comment">FloatNoSwap</highlight></codeline>
<codeline lineno="362"><highlight class="comment">================</highlight></codeline>
<codeline lineno="363"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>FloatNoSwap(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="369"><highlight class="comment">=====================================================================</highlight></codeline>
<codeline lineno="370"><highlight class="comment">RevBytesSwap</highlight></codeline>
<codeline lineno="371"><highlight class="comment"></highlight></codeline>
<codeline lineno="372"><highlight class="comment">Reverses<sp/>byte<sp/>order<sp/>in<sp/>place.</highlight></codeline>
<codeline lineno="373"><highlight class="comment"></highlight></codeline>
<codeline lineno="374"><highlight class="comment">INPUTS</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/><sp/><sp/>bp<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes<sp/>to<sp/>reverse</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/><sp/><sp/>elsize<sp/><sp/><sp/>size<sp/>of<sp/>the<sp/>underlying<sp/>data<sp/>type</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/><sp/><sp/>elcount<sp/><sp/>number<sp/>of<sp/>elements<sp/>to<sp/>swap</highlight></codeline>
<codeline lineno="378"><highlight class="comment"></highlight></codeline>
<codeline lineno="379"><highlight class="comment">RESULTS</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/><sp/>Reverses<sp/>the<sp/>byte<sp/>order<sp/>in<sp/>each<sp/>of<sp/>elcount<sp/>elements.</highlight></codeline>
<codeline lineno="381"><highlight class="comment">=====================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RevBytesSwap(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*bp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elsize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elcount<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p,<sp/>*q;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>bp;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>elsize<sp/>==<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>p<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>elcount--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>^=<sp/>*q;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*q<sp/>^=<sp/>*p;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>^=<sp/>*q;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>elcount--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>p<sp/>+<sp/>elsize<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>p<sp/>&lt;<sp/>q<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>^=<sp/>*q;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*q<sp/>^=<sp/>*p;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>^=<sp/>*q;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++p;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--q;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>elsize<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/>=====================================================================</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>RevBytesSwap</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>Reverses<sp/>byte<sp/>order<sp/>in<sp/>place,<sp/>then<sp/>reverses<sp/>bits<sp/>in<sp/>those<sp/>bytes</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/>INPUTS</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/>bp<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitfield<sp/>structure<sp/>to<sp/>reverse</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/>elsize<sp/><sp/><sp/>size<sp/>of<sp/>the<sp/>underlying<sp/>data<sp/>type</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/>RESULTS</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/>Reverses<sp/>the<sp/>bitfield<sp/>of<sp/>size<sp/>elsize.</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/>=====================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RevBitFieldSwap(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*bp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elsize)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p,<sp/>t,<sp/>v;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>LittleRevBytes(<sp/>bp,<sp/>elsize,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>bp;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>elsize--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>*p;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>7;<sp/>i;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>|=<sp/>v<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="445"><highlight class="comment">================</highlight></codeline>
<codeline lineno="446"><highlight class="comment">RevBytesNoSwap</highlight></codeline>
<codeline lineno="447"><highlight class="comment">================</highlight></codeline>
<codeline lineno="448"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RevBytesNoSwap(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*bp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elsize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elcount<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/>================</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/>RevBytesNoSwap</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/>================</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RevBitFieldNoSwap(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*bp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elsize<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="463"><highlight class="comment">================</highlight></codeline>
<codeline lineno="464"><highlight class="comment">SixtetsForIntLittle</highlight></codeline>
<codeline lineno="465"><highlight class="comment">================</highlight></codeline>
<codeline lineno="466"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SixtetsForIntLittle(<sp/>byte<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/>*b<sp/>=<sp/>(byte<sp/>*)&amp;src;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>(<sp/>b[0]<sp/>&amp;<sp/>0xfc<sp/>)<sp/>&gt;&gt;<sp/>2;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>(<sp/>(<sp/>b[0]<sp/>&amp;<sp/>0x3<sp/>)<sp/>&lt;&lt;<sp/>4<sp/>)<sp/>+<sp/>(<sp/>(<sp/>b[1]<sp/>&amp;<sp/>0xf0<sp/>)<sp/>&gt;&gt;<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>(<sp/>(<sp/>b[1]<sp/>&amp;<sp/>0xf<sp/>)<sp/>&lt;&lt;<sp/>2<sp/>)<sp/>+<sp/>(<sp/>(<sp/>b[2]<sp/>&amp;<sp/>0xc0<sp/>)<sp/>&gt;&gt;<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>out[3]<sp/>=<sp/>b[2]<sp/>&amp;<sp/>0x3f;</highlight></codeline>
<codeline lineno="473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="476"><highlight class="comment">================</highlight></codeline>
<codeline lineno="477"><highlight class="comment">SixtetsForIntBig</highlight></codeline>
<codeline lineno="478"><highlight class="comment">TTimo:<sp/>untested<sp/>-<sp/>that&apos;s<sp/>the<sp/>version<sp/>from<sp/>initial<sp/>base64<sp/>encode</highlight></codeline>
<codeline lineno="479"><highlight class="comment">================</highlight></codeline>
<codeline lineno="480"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SixtetsForIntBig(<sp/>byte<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>4<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[i]<sp/>=<sp/>src<sp/>&amp;<sp/>0x3f;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src<sp/>&gt;&gt;=<sp/>6;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="489"><highlight class="comment">================</highlight></codeline>
<codeline lineno="490"><highlight class="comment">IntForSixtetsLittle</highlight></codeline>
<codeline lineno="491"><highlight class="comment">================</highlight></codeline>
<codeline lineno="492"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IntForSixtetsLittle(<sp/>byte<sp/>*in<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/>*b<sp/>=<sp/>(byte<sp/>*)&amp;ret;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>b[0]<sp/>|=<sp/>in[0]<sp/>&lt;&lt;<sp/>2;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>b[0]<sp/>|=<sp/>(<sp/>in[1]<sp/>&amp;<sp/>0x30<sp/>)<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>b[1]<sp/>|=<sp/>(<sp/>in[1]<sp/>&amp;<sp/>0xf<sp/>)<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>b[1]<sp/>|=<sp/>(<sp/>in[2]<sp/>&amp;<sp/>0x3c<sp/>)<sp/>&gt;&gt;<sp/>2;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>b[2]<sp/>|=<sp/>(<sp/>in[2]<sp/>&amp;<sp/>0x3<sp/>)<sp/>&lt;&lt;<sp/>6;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>b[2]<sp/>|=<sp/>in[3];</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="506"><highlight class="comment">================</highlight></codeline>
<codeline lineno="507"><highlight class="comment">IntForSixtetsBig</highlight></codeline>
<codeline lineno="508"><highlight class="comment">TTimo:<sp/>untested<sp/>-<sp/>that&apos;s<sp/>the<sp/>version<sp/>from<sp/>initial<sp/>base64<sp/>decode</highlight></codeline>
<codeline lineno="509"><highlight class="comment">================</highlight></codeline>
<codeline lineno="510"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IntForSixtetsBig(<sp/>byte<sp/>*in<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>|=<sp/>in[0];</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>|=<sp/>in[1]<sp/>&lt;&lt;<sp/>6;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>|=<sp/>in[2]<sp/>&lt;&lt;<sp/>2*6;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>|=<sp/>in[3]<sp/>&lt;&lt;<sp/>3*6;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="521"><highlight class="comment">================</highlight></codeline>
<codeline lineno="522"><highlight class="comment">Swap_Init</highlight></codeline>
<codeline lineno="523"><highlight class="comment">================</highlight></codeline>
<codeline lineno="524"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Swap_Init(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/>swaptest[2]<sp/>=<sp/>{1,0};</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>byte<sp/>swapping<sp/>variables<sp/>in<sp/>a<sp/>portable<sp/>manner<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*)swaptest<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>little<sp/>endian<sp/>ex:<sp/>x86</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_BigShort<sp/>=<sp/>ShortSwap;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_LittleShort<sp/>=<sp/>ShortNoSwap;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_BigLong<sp/>=<sp/>LongSwap;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_LittleLong<sp/>=<sp/>LongNoSwap;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_BigFloat<sp/>=<sp/>FloatSwap;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_LittleFloat<sp/>=<sp/>FloatNoSwap;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_BigRevBytes<sp/>=<sp/>RevBytesSwap;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_LittleRevBytes<sp/>=<sp/>RevBytesNoSwap;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_LittleBitField<sp/>=<sp/>RevBitFieldNoSwap;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_SixtetsForInt<sp/>=<sp/>SixtetsForIntLittle;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_IntForSixtets<sp/>=<sp/>IntForSixtetsLittle;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>big<sp/>endian<sp/>ex:<sp/>ppc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_BigShort<sp/>=<sp/>ShortNoSwap;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_LittleShort<sp/>=<sp/>ShortSwap;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_BigLong<sp/>=<sp/>LongNoSwap;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_LittleLong<sp/>=<sp/>LongSwap;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_BigFloat<sp/>=<sp/>FloatNoSwap;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_LittleFloat<sp/>=<sp/>FloatSwap;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_BigRevBytes<sp/>=<sp/>RevBytesNoSwap;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_LittleRevBytes<sp/>=<sp/>RevBytesSwap;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_LittleBitField<sp/>=<sp/>RevBitFieldSwap;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_SixtetsForInt<sp/>=<sp/>SixtetsForIntBig;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_IntForSixtets<sp/>=<sp/>IntForSixtetsBig;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="559"><highlight class="comment">==========</highlight></codeline>
<codeline lineno="560"><highlight class="comment">Swap_IsBigEndian</highlight></codeline>
<codeline lineno="561"><highlight class="comment">==========</highlight></codeline>
<codeline lineno="562"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Swap_IsBigEndian(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/>swaptest[2]<sp/>=<sp/>{1,0};</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*)swaptest<sp/>!=<sp/>1;</highlight></codeline>
<codeline lineno="566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="569"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="570"><highlight class="comment"></highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/><sp/><sp/><sp/>Assertion</highlight></codeline>
<codeline lineno="572"><highlight class="comment"></highlight></codeline>
<codeline lineno="573"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="574"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssertFailed(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*expression<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>idLib::sys-&gt;DebugPrintf(<sp/></highlight><highlight class="stringliteral">&quot;\n\nASSERTION<sp/>FAILED!\n%s(%d):<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>file,<sp/>line,<sp/>expression<sp/>);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight></codeline>
<codeline lineno="579"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>__asm<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>0x03</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(<sp/>__linux__<sp/>)</highlight></codeline>
<codeline lineno="581"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>__asm__<sp/>__volatile__<sp/>(</highlight><highlight class="stringliteral">&quot;int<sp/>$0x03&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(<sp/>MACOS_X<sp/>)</highlight></codeline>
<codeline lineno="583"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>kill(<sp/>getpid(),<sp/>SIGINT<sp/>);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="585"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/idlib/Lib.cpp"/>
  </compounddef>
</doxygen>
