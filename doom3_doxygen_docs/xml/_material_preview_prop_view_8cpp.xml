<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_material_preview_prop_view_8cpp" kind="file">
    <compoundname>MaterialPreviewPropView.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../../idlib/precompiled.h</includes>
    <includes refid="_material_preview_prop_view_8h" local="yes">MaterialPreviewPropView.h</includes>
      <sectiondef kind="func">
      <memberdef kind="function" id="_material_preview_prop_view_8cpp_1a80964676c0a3ef39795fcd30559d4cf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>IMPLEMENT_DYNCREATE</definition>
        <argsstring>(MaterialPreviewPropView, CPropTreeView) MaterialPreviewPropView</argsstring>
        <name>IMPLEMENT_DYNCREATE</name>
        <param>
          <type><ref refid="class_material_preview_prop_view" kindref="compound">MaterialPreviewPropView</ref></type>
        </param>
        <param>
          <type><ref refid="class_c_prop_tree_view" kindref="compound">CPropTreeView</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/materialeditor/MaterialPreviewPropView.cpp" line="37" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/materialeditor/MaterialPreviewPropView.cpp" bodystart="37" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="_material_preview_prop_view_8cpp_1aee733485fc10cd8f100c53305a6016f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BEGIN_MESSAGE_MAP</definition>
        <argsstring>(MaterialPreviewPropView, CPropTreeView) ON_NOTIFY(((0U-1100U)-5)</argsstring>
        <name>BEGIN_MESSAGE_MAP</name>
        <param>
          <type><ref refid="class_material_preview_prop_view" kindref="compound">MaterialPreviewPropView</ref></type>
        </param>
        <param>
          <type><ref refid="class_c_prop_tree_view" kindref="compound">CPropTreeView</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/materialeditor/MaterialPreviewPropView.cpp" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_material_preview_prop_view_8cpp_1a6db10612a91b46734bb276addd2832dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OnPropertyChangeNotification</type>
        <definition>OnPropertyChangeNotification ON_NOTIFY</definition>
        <argsstring>(((0U-1100U)-6), 100, OnPropertyButtonClick) END_MESSAGE_MAP() void MaterialPreviewPropView</argsstring>
        <name>ON_NOTIFY</name>
        <param>
          <type>((0U-1100U)-6)</type>
        </param>
        <param>
          <type>100</type>
        </param>
        <param>
          <type>OnPropertyButtonClick</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/materialeditor/MaterialPreviewPropView.cpp" line="50" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/materialeditor/MaterialPreviewPropView.cpp" bodystart="50" bodyend="118"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MaterialPreviewPropView.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MaterialPropTreeView</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">IMPLEMENT_DYNCREATE(<ref refid="class_material_preview_prop_view" kindref="compound">MaterialPreviewPropView</ref>,<sp/><ref refid="class_c_prop_tree_view" kindref="compound">CPropTreeView</ref>)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><ref refid="class_material_preview_prop_view" kindref="compound">MaterialPreviewPropView</ref>::<ref refid="class_material_preview_prop_view" kindref="compound">MaterialPreviewPropView</ref>()<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>numLights<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>materialPreview<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">MaterialPreviewPropView::~MaterialPreviewPropView()<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">BEGIN_MESSAGE_MAP(<ref refid="class_material_preview_prop_view" kindref="compound">MaterialPreviewPropView</ref>,<sp/><ref refid="class_c_prop_tree_view" kindref="compound">CPropTreeView</ref>)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>ON_NOTIFY(<sp/>PTN_ITEMCHANGED,<sp/>IDC_PROPERTYTREE,<sp/>OnPropertyChangeNotification<sp/>)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>ON_NOTIFY(<sp/>PTN_ITEMBUTTONCLICK,<sp/>IDC_PROPERTYTREE,<sp/>OnPropertyButtonClick<sp/>)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">END_MESSAGE_MAP()</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_material_preview_prop_view" kindref="compound">MaterialPreviewPropView</ref>::AddLight(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>count,<sp/>lightShaderIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_material" kindref="compound">idMaterial</ref><sp/>*mat;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_prop_tree_item_button" kindref="compound">CPropTreeItemButton</ref>*<sp/><sp/><sp/><sp/>pRoot;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_prop_tree_item_combo" kindref="compound">CPropTreeItemCombo</ref>*<sp/><sp/><sp/><sp/><sp/>pCombo;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_prop_tree_item_color" kindref="compound">CPropTreeItemColor</ref>*<sp/><sp/><sp/><sp/><sp/>pColor;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_prop_tree_item_check" kindref="compound">CPropTreeItemCheck</ref>*<sp/><sp/><sp/><sp/><sp/>pCheck;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_prop_tree_item_edit" kindref="compound">CPropTreeItemEdit</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>pEdit;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Increase<sp/>the<sp/>number<sp/>of<sp/>lights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>numLights++;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>pRoot<sp/>=<sp/>(<ref refid="class_c_prop_tree_item_button" kindref="compound">CPropTreeItemButton</ref>*)m_Tree.InsertItem(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_prop_tree_item_button" kindref="compound">CPropTreeItemButton</ref>());</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>pRoot-&gt;SetLabelText(_T(va(</highlight><highlight class="stringliteral">&quot;Light<sp/>#%d&quot;</highlight><highlight class="normal">,<sp/>numLights)));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>pRoot-&gt;SetInfoText(_T(va(</highlight><highlight class="stringliteral">&quot;Parameters<sp/>for<sp/>light<sp/>number<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>numLights)));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>pRoot-&gt;SetButtonText(<sp/></highlight><highlight class="stringliteral">&quot;Remove&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>pRoot-&gt;SetCtrlID(<sp/>numLights<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>pRoot-&gt;Expand();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo<sp/>=<sp/>(<ref refid="class_c_prop_tree_item_combo" kindref="compound">CPropTreeItemCombo</ref>*)m_Tree.InsertItem(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_prop_tree_item_combo" kindref="compound">CPropTreeItemCombo</ref>(),<sp/>pRoot);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;SetLabelText(<sp/>_T(</highlight><highlight class="stringliteral">&quot;Shader&quot;</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;SetInfoText(<sp/>_T(</highlight><highlight class="stringliteral">&quot;Set<sp/>the<sp/>light<sp/>shader.&quot;</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;SetDropDownHeight(<sp/>200<sp/>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;CreateComboBox();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>all<sp/>light<sp/>shaders<sp/>to<sp/>the<sp/>combo<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/>declManager-&gt;GetNumDecls(<sp/>DECL_MATERIAL<sp/>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat<sp/>=<sp/>declManager-&gt;MaterialByIndex(i,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>materialName<sp/>=<sp/>mat-&gt;GetName();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>materialName.ToLower();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>materialName.Left(7)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lights/&quot;</highlight><highlight class="normal"><sp/>||<sp/>materialName.Left(5)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;fogs/&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pCombo-&gt;InsertString(<sp/>lightShaderIndex,<sp/>materialName<sp/>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pCombo-&gt;SetItemData(<sp/>lightShaderIndex,<sp/>lightShaderIndex<sp/>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>materialName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lights/defaultpointlight&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pCombo-&gt;SetCurSel(<sp/>lightShaderIndex<sp/>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lightShaderIndex++;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>pColor<sp/>=<sp/>(<ref refid="class_c_prop_tree_item_color" kindref="compound">CPropTreeItemColor</ref>*)m_Tree.InsertItem(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_prop_tree_item_color" kindref="compound">CPropTreeItemColor</ref>(),<sp/>pRoot);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>pColor-&gt;SetLabelText(_T(</highlight><highlight class="stringliteral">&quot;Color&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>pColor-&gt;SetInfoText(_T(</highlight><highlight class="stringliteral">&quot;Color<sp/>of<sp/>the<sp/>light.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>pColor-&gt;SetItemValue((<ref refid="class_c_prop_tree_item" kindref="compound">LPARAM</ref>)RGB(0xff,<sp/>0xff,<sp/>0xff));<sp/></highlight><highlight class="comment">//<sp/>default<sp/>as<sp/>color<sp/>white</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>pEdit<sp/>=<sp/>(<ref refid="class_c_prop_tree_item_edit" kindref="compound">CPropTreeItemEdit</ref>*)m_Tree.InsertItem(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_prop_tree_item_edit" kindref="compound">CPropTreeItemEdit</ref>(),<sp/>pRoot);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>pEdit-&gt;SetLabelText(_T(</highlight><highlight class="stringliteral">&quot;Radius&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>pEdit-&gt;SetInfoText(_T(</highlight><highlight class="stringliteral">&quot;Radius<sp/>of<sp/>the<sp/>light.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>pEdit-&gt;SetItemValue(<sp/>(<ref refid="class_c_prop_tree_item" kindref="compound">LPARAM</ref>)_T(</highlight><highlight class="stringliteral">&quot;300.0&quot;</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>pCheck<sp/>=<sp/>(<ref refid="class_c_prop_tree_item_check" kindref="compound">CPropTreeItemCheck</ref>*)m_Tree.InsertItem(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_prop_tree_item_check" kindref="compound">CPropTreeItemCheck</ref>(),<sp/>pRoot);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>pCheck-&gt;SetLabelText(_T(</highlight><highlight class="stringliteral">&quot;Move<sp/>light&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>pCheck-&gt;SetInfoText(_T(</highlight><highlight class="stringliteral">&quot;When<sp/>checked,<sp/>allow<sp/>light<sp/>to<sp/>move.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>pCheck-&gt;CreateCheckBox();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>pCheck-&gt;SetCheckState(<sp/>BST_CHECKED<sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>materialPreview<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>materialPreview-&gt;OnAddLight();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//Create<sp/>sample<sp/>data<sp/>for<sp/>the<sp/>preview<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MaterialPreviewPropView::InitializePropTree(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_prop_tree_item" kindref="compound">CPropTreeItem</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pRoot;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_prop_tree_item" kindref="compound">CPropTreeItem</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pParmRoot;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_prop_tree_item_check" kindref="compound">CPropTreeItemCheck</ref><sp/><sp/>*pCheck;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_prop_tree_item_edit" kindref="compound">CPropTreeItemEdit</ref><sp/><sp/><sp/>*pEdit;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>pRoot<sp/>=<sp/>m_Tree.InsertItem(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_prop_tree_item" kindref="compound">CPropTreeItem</ref>());</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>pRoot-&gt;SetLabelText(_T(</highlight><highlight class="stringliteral">&quot;Preview<sp/>Properties&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>pRoot-&gt;SetInfoText(_T(</highlight><highlight class="stringliteral">&quot;Properties<sp/>for<sp/>the<sp/>preview<sp/>window.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>pRoot-&gt;Expand();<sp/></highlight><highlight class="comment">//<sp/>have<sp/>this<sp/>item<sp/>expanded<sp/>by<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_prop_tree_item_combo" kindref="compound">CPropTreeItemCombo</ref>*<sp/>pCombo;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo<sp/>=<sp/>(<ref refid="class_c_prop_tree_item_combo" kindref="compound">CPropTreeItemCombo</ref>*)m_Tree.InsertItem(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_prop_tree_item_combo" kindref="compound">CPropTreeItemCombo</ref>(),<sp/>pRoot);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;SetLabelText(_T(</highlight><highlight class="stringliteral">&quot;Model<sp/>Type&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;SetInfoText(_T(</highlight><highlight class="stringliteral">&quot;Select<sp/>the<sp/>type<sp/>of<sp/>model<sp/>on<sp/>which<sp/>to<sp/>preview<sp/>the<sp/>material.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;CreateComboBox();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;InsertString(<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Cube&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;InsertString(<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Box<sp/>-<sp/>2:1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;InsertString(<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;Box<sp/>-<sp/>4:1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;InsertString(<sp/>3,<sp/></highlight><highlight class="stringliteral">&quot;Box<sp/>-<sp/>1:2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;InsertString(<sp/>4,<sp/></highlight><highlight class="stringliteral">&quot;Box<sp/>-<sp/>1:4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;InsertString(<sp/>5,<sp/></highlight><highlight class="stringliteral">&quot;Cylinder<sp/>-<sp/>V&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;InsertString(<sp/>6,<sp/></highlight><highlight class="stringliteral">&quot;Cylinder<sp/>-<sp/>H&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;InsertString(<sp/>7,<sp/></highlight><highlight class="stringliteral">&quot;Sphere&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;SetItemData(<sp/>0,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;SetItemData(<sp/>1,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;SetItemData(<sp/>2,<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;SetItemData(<sp/>3,<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;SetItemData(<sp/>4,<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;SetItemData(<sp/>5,<sp/>5<sp/>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;SetItemData(<sp/>6,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;SetItemData(<sp/>7,<sp/>7<sp/>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>pCombo-&gt;SetCurSel(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Custom<sp/>model<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*pEdit<sp/>=<sp/>(CPropTreeItemEdit*)m_Tree.InsertItem(<sp/>new<sp/>CPropTreeItemEdit(),<sp/>pRoot<sp/>);</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/>pEdit-&gt;SetLabelText(_T(&quot;Custom<sp/>Model&quot;));</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/>pEdit-&gt;SetInfoText(_T(&quot;Specify<sp/>any<sp/>model<sp/>to<sp/>display<sp/>the<sp/>current<sp/>material.&quot;));</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/>pEdit-&gt;SetItemValue((LPARAM)_T(&quot;&quot;));*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_prop_tree_item_edit_button" kindref="compound">CPropTreeItemEditButton</ref><sp/>*pCutomButton;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>pCutomButton<sp/>=<sp/>(<ref refid="class_c_prop_tree_item_edit_button" kindref="compound">CPropTreeItemEditButton</ref>*)m_Tree.InsertItem(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_prop_tree_item_edit_button" kindref="compound">CPropTreeItemEditButton</ref>(),<sp/>pRoot<sp/>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>pCutomButton-&gt;SetButtonText(_T(</highlight><highlight class="stringliteral">&quot;...&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>pCutomButton-&gt;SetLabelText(_T(</highlight><highlight class="stringliteral">&quot;Custom<sp/>Model&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>pCutomButton-&gt;SetInfoText(_T(</highlight><highlight class="stringliteral">&quot;Specify<sp/>any<sp/>model<sp/>to<sp/>display<sp/>the<sp/>current<sp/>material.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>pCutomButton-&gt;SetItemValue((<ref refid="class_c_prop_tree_item" kindref="compound">LPARAM</ref>)_T(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Checkbox<sp/>for<sp/>showing<sp/>debug<sp/>light<sp/>spheres</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>pCheck<sp/>=<sp/>(<ref refid="class_c_prop_tree_item_check" kindref="compound">CPropTreeItemCheck</ref>*)m_Tree.InsertItem(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_prop_tree_item_check" kindref="compound">CPropTreeItemCheck</ref>(),<sp/>pRoot<sp/>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>pCheck-&gt;SetLabelText(_T(</highlight><highlight class="stringliteral">&quot;Show<sp/>Lights&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>pCheck-&gt;SetInfoText(_T(</highlight><highlight class="stringliteral">&quot;Show<sp/>the<sp/>light<sp/>origin<sp/>sphere<sp/>and<sp/>number<sp/>in<sp/>the<sp/>preview.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>pCheck-&gt;CreateCheckBox();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>pCheck-&gt;SetCheckState(<sp/>BST_CHECKED<sp/>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Local<sp/>and<sp/>Global<sp/>shader<sp/>parms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>pParmRoot<sp/>=<sp/>m_Tree.InsertItem(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_prop_tree_item" kindref="compound">CPropTreeItem</ref>());</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>pParmRoot-&gt;SetLabelText(_T(</highlight><highlight class="stringliteral">&quot;Local<sp/>Parms&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>pParmRoot-&gt;SetInfoText(_T(</highlight><highlight class="stringliteral">&quot;Local<sp/>shaderparms<sp/>for<sp/>the<sp/>model<sp/>being<sp/>displayed.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>pParmRoot-&gt;Expand(<sp/>FALSE<sp/>);<sp/></highlight><highlight class="comment">//<sp/>have<sp/>this<sp/>item<sp/>NOT<sp/>expanded<sp/>by<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ENTITY_SHADER_PARMS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pEdit<sp/>=<sp/>(<ref refid="class_c_prop_tree_item_edit" kindref="compound">CPropTreeItemEdit</ref>*)m_Tree.InsertItem(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_prop_tree_item_edit" kindref="compound">CPropTreeItemEdit</ref>(),<sp/>pParmRoot<sp/>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pEdit-&gt;SetLabelText(_T(va(</highlight><highlight class="stringliteral">&quot;parm%d&quot;</highlight><highlight class="normal">,<sp/>i)));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pEdit-&gt;SetInfoText(_T(</highlight><highlight class="stringliteral">&quot;Set<sp/>the<sp/>local<sp/>shaderparm<sp/>for<sp/>the<sp/>model&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&lt;<sp/>4<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pEdit-&gt;SetItemValue((<ref refid="class_c_prop_tree_item" kindref="compound">LPARAM</ref>)_T(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pEdit-&gt;SetItemValue((<ref refid="class_c_prop_tree_item" kindref="compound">LPARAM</ref>)_T(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>pParmRoot<sp/>=<sp/>m_Tree.InsertItem(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_prop_tree_item" kindref="compound">CPropTreeItem</ref>());</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>pParmRoot-&gt;SetLabelText(_T(</highlight><highlight class="stringliteral">&quot;Global<sp/>Parms&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>pParmRoot-&gt;SetInfoText(_T(</highlight><highlight class="stringliteral">&quot;Global<sp/>shaderparms<sp/>for<sp/>the<sp/>renderworld<sp/>being<sp/>displayed.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>pParmRoot-&gt;Expand(<sp/>FALSE<sp/>);<sp/></highlight><highlight class="comment">//<sp/>have<sp/>this<sp/>item<sp/>NOT<sp/>expanded<sp/>by<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_GLOBAL_SHADER_PARMS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pEdit<sp/>=<sp/>(<ref refid="class_c_prop_tree_item_edit" kindref="compound">CPropTreeItemEdit</ref>*)m_Tree.InsertItem(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_prop_tree_item_edit" kindref="compound">CPropTreeItemEdit</ref>(),<sp/>pParmRoot<sp/>);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pEdit-&gt;SetLabelText(_T(va(</highlight><highlight class="stringliteral">&quot;global%d&quot;</highlight><highlight class="normal">,<sp/>i)));</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pEdit-&gt;SetInfoText(_T(</highlight><highlight class="stringliteral">&quot;Set<sp/>the<sp/>global<sp/>shaderparm<sp/>for<sp/>the<sp/>renderworld&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&lt;<sp/>4<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pEdit-&gt;SetItemValue((<ref refid="class_c_prop_tree_item" kindref="compound">LPARAM</ref>)_T(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pEdit-&gt;SetItemValue((<ref refid="class_c_prop_tree_item" kindref="compound">LPARAM</ref>)_T(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Lights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>pRoot<sp/>=<sp/>m_Tree.InsertItem(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_prop_tree_item" kindref="compound">CPropTreeItem</ref>());</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>pRoot-&gt;SetLabelText(_T(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>pRoot-&gt;SetInfoText(_T(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_prop_tree_item_button" kindref="compound">CPropTreeItemButton</ref><sp/>*pButton;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>pButton<sp/>=<sp/>(<ref refid="class_c_prop_tree_item_button" kindref="compound">CPropTreeItemButton</ref>*)m_Tree.InsertItem(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_prop_tree_item_button" kindref="compound">CPropTreeItemButton</ref>());</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>pButton-&gt;SetButtonText(_T(</highlight><highlight class="stringliteral">&quot;<sp/>Add<sp/>Light<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>pButton-&gt;SetLabelText(_T(</highlight><highlight class="stringliteral">&quot;Preview<sp/>Lights&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>pButton-&gt;SetInfoText(_T(</highlight><highlight class="stringliteral">&quot;Test<sp/>the<sp/>button.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>pRoot<sp/>=<sp/>m_Tree.InsertItem(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_prop_tree_item" kindref="compound">CPropTreeItem</ref>());</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>pRoot-&gt;SetLabelText(_T(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>pRoot-&gt;SetInfoText(_T(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>AddLight();</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MaterialPreviewPropView<sp/>drawing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MaterialPreviewPropView::OnDraw(CDC*<sp/>pDC)</highlight></codeline>
<codeline lineno="231"><highlight class="normal">{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>add<sp/>draw<sp/>code<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MaterialPreviewPropView<sp/>diagnostics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG</highlight></codeline>
<codeline lineno="238"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MaterialPreviewPropView::AssertValid()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="239"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>CPropTreeView::AssertValid();</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MaterialPreviewPropView::Dump(CDumpContext&amp;<sp/>dc)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="244"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>CPropTreeView::Dump(dc);</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//_DEBUG</highlight></codeline>
<codeline lineno="248"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MaterialPreviewPropView::RegisterPreviewView(<sp/><ref refid="class_material_preview_view" kindref="compound">MaterialPreviewView</ref><sp/>*view<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>materialPreview<sp/>=<sp/>view;</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MaterialPreviewPropView<sp/>message<sp/>handlers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MaterialPreviewPropView::OnPropertyChangeNotification(<sp/>NMHDR<sp/>*nmhdr,<sp/>LRESULT<sp/>*lresult<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testColor;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lightId<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>COLORREF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___n_m_p_r_o_p_t_r_e_e" kindref="compound">NMPROPTREE</ref><sp/><sp/><sp/><sp/><sp/><sp/>*nmProp;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_prop_tree_item" kindref="compound">CPropTreeItem</ref><sp/><sp/><sp/>*item;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_prop_tree_item" kindref="compound">CPropTreeItem</ref><sp/><sp/><sp/>*parent;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>nmProp<sp/>=<sp/>(<ref refid="struct___n_m_p_r_o_p_t_r_e_e" kindref="compound">NMPROPTREE</ref><sp/>*)nmhdr;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>item<sp/>=<sp/>nmProp-&gt;pItem;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>which<sp/>light<sp/>this<sp/>item<sp/>modifies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>parent<sp/>=<sp/>item-&gt;GetParent();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>parent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lightId<sp/>=<sp/>parent-&gt;GetCtrlID();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/><sp/><sp/>itemLabel<sp/>=<sp/>item-&gt;GetLabelText();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>itemLabel<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Model<sp/>Type&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>materialPreview-&gt;OnModelChange(<sp/>item-&gt;GetItemValue()<sp/>);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>itemLabel<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Custom<sp/>Model&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>materialPreview-&gt;OnCustomModelChange(<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)item-&gt;GetItemValue()<sp/>);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>itemLabel<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Show<sp/>Lights&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>materialPreview-&gt;OnShowLightsChange(<sp/>item-&gt;GetItemValue()<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/>false<sp/>);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>itemLabel<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Shader&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_prop_tree_item_combo" kindref="compound">CPropTreeItemCombo</ref><sp/><sp/>*combo<sp/>=<sp/>(<ref refid="class_c_prop_tree_item_combo" kindref="compound">CPropTreeItemCombo</ref><sp/>*)item;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CString<sp/>materialName;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combo-&gt;GetLBText(<sp/>combo-&gt;GetCurSel(),<sp/>materialName<sp/>);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>materialPreview-&gt;OnLightShaderChange(<sp/>lightId,<sp/>materialName.GetBuffer()<sp/>);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>itemLabel<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Radius&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>materialPreview-&gt;OnLightRadiusChange(<sp/>lightId,<sp/>atof(<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)item-&gt;GetItemValue()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>itemLabel<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Color&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>item-&gt;GetItemValue();</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testColor.x<sp/>=<sp/>(float)GetRValue(<sp/>color<sp/>)<sp/>*<sp/>(float)(<sp/>1.f/255.f<sp/>);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testColor.y<sp/>=<sp/>(float)GetGValue(<sp/>color<sp/>)<sp/>*<sp/>(float)(<sp/>1.f/255.f<sp/>);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testColor.z<sp/>=<sp/>(float)GetBValue(<sp/>color<sp/>)<sp/>*<sp/>(float)(<sp/>1.f/255.f<sp/>);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>materialPreview-&gt;OnLightColorChange(<sp/>lightId,<sp/>testColor<sp/>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>itemLabel<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Move<sp/>light&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>materialPreview-&gt;OnLightAllowMoveChange(<sp/>lightId,<sp/>item-&gt;GetItemValue()<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/>false<sp/>);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>itemLabel.Left(4)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;parm&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itemLabel.Strip(<sp/></highlight><highlight class="stringliteral">&quot;parm&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>atoi(<sp/>itemLabel.c_str()<sp/>);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>materialPreview-&gt;OnLocalParmChange(<sp/>index,<sp/>atof(<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)item-&gt;GetItemValue()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>itemLabel.Left(6)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;global&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itemLabel.Strip(<sp/></highlight><highlight class="stringliteral">&quot;global&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>atoi(<sp/>itemLabel.c_str()<sp/>);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>materialPreview-&gt;OnGlobalParmChange(<sp/>index,<sp/>atof(<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)item-&gt;GetItemValue()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MaterialPreviewPropView::OnPropertyButtonClick(<sp/>NMHDR<sp/>*nmhdr,<sp/>LRESULT<sp/>*lresult<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___n_m_p_r_o_p_t_r_e_e" kindref="compound">NMPROPTREE</ref><sp/><sp/><sp/><sp/><sp/><sp/>*nmProp;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_prop_tree_item" kindref="compound">CPropTreeItem</ref><sp/><sp/><sp/>*item;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>nmProp<sp/>=<sp/>(<ref refid="struct___n_m_p_r_o_p_t_r_e_e" kindref="compound">NMPROPTREE</ref><sp/>*)nmhdr;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>item<sp/>=<sp/>nmProp-&gt;pItem;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/><sp/><sp/>itemLabel<sp/>=<sp/>item-&gt;GetLabelText();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>itemLabel<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Preview<sp/>Lights&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddLight();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>itemLabel.Left(5)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Light&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_prop_tree_item" kindref="compound">CPropTreeItem</ref><sp/><sp/><sp/>*light;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lightId<sp/>=<sp/>item-&gt;GetCtrlID();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>testLightNum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_Tree.DeleteItem(<sp/>item<sp/>);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>light<sp/>=<sp/>m_Tree.GetRootItem()-&gt;GetChild();<sp/>light<sp/>!=<sp/>NULL;<sp/>light<sp/>=<sp/>light-&gt;GetSibling()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>label<sp/>=<sp/>light-&gt;GetLabelText();</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>label.Left(5)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Light&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testLightNum++;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>light-&gt;SetLabelText(_T(va(</highlight><highlight class="stringliteral">&quot;Light<sp/>#%d&quot;</highlight><highlight class="normal">,<sp/>testLightNum)));</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>light-&gt;SetInfoText(_T(va(</highlight><highlight class="stringliteral">&quot;Parameters<sp/>for<sp/>light<sp/>number<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>testLightNum)));</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>light-&gt;SetCtrlID(<sp/>testLightNum<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>materialPreview-&gt;OnDeleteLight(<sp/>lightId<sp/>);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numLights--;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>itemLabel<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Custom<sp/>Model&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CFileDialog<sp/>dlg(TRUE);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dlg.m_ofn.Flags<sp/>|=<sp/>OFN_FILEMUSTEXIST;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;Check(FALSE);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>dlg.DoModal()==<sp/>IDOK)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;Check(FALSE);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;SetItemValue((<ref refid="class_c_prop_tree_item" kindref="compound">LPARAM</ref>)fileSystem-&gt;OSPathToRelativePath(dlg.m_ofn.lpstrFile));</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_Tree.SendNotify(PTN_ITEMCHANGED,<sp/>item);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/tools/materialeditor/MaterialPreviewPropView.cpp"/>
  </compounddef>
</doxygen>
