<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_matrix_8cpp" kind="file">
    <compoundname>Matrix.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../precompiled.h</includes>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_matrix_8cpp_1ac01145bf446942662286c1c1e917c21d" prot="public" static="no" mutable="no">
        <type><ref refid="classid_mat2" kindref="compound">idMat2</ref></type>
        <definition>idMat2 mat2_zero(idVec2(0, 0), idVec2(0, 0))</definition>
        <argsstring>(idVec2(0, 0), idVec2(0, 0))</argsstring>
        <name>mat2_zero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" line="39" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_matrix_8cpp_1ade44b9d05cd1c11b73d6cd1e792b82e4" prot="public" static="no" mutable="no">
        <type><ref refid="classid_mat2" kindref="compound">idMat2</ref></type>
        <definition>idMat2 mat2_identity(idVec2(1, 0), idVec2(0, 1))</definition>
        <argsstring>(idVec2(1, 0), idVec2(0, 1))</argsstring>
        <name>mat2_identity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" line="40" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_matrix_8cpp_1a0ce331d10643f7c5f6dd8bcecfd38e81" prot="public" static="no" mutable="no">
        <type><ref refid="classid_mat3" kindref="compound">idMat3</ref></type>
        <definition>idMat3 mat3_zero(idVec3(0, 0, 0), idVec3(0, 0, 0), idVec3(0, 0, 0))</definition>
        <argsstring>(idVec3(0, 0, 0), idVec3(0, 0, 0), idVec3(0, 0, 0))</argsstring>
        <name>mat3_zero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" line="139" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_matrix_8cpp_1a6b3226841119346060135164c5132afd" prot="public" static="no" mutable="no">
        <type><ref refid="classid_mat3" kindref="compound">idMat3</ref></type>
        <definition>idMat3 mat3_identity(idVec3(1, 0, 0), idVec3(0, 1, 0), idVec3(0, 0, 1))</definition>
        <argsstring>(idVec3(1, 0, 0), idVec3(0, 1, 0), idVec3(0, 0, 1))</argsstring>
        <name>mat3_identity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" line="140" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_matrix_8cpp_1a53cac29a5626512d5a3896f437adcff5" prot="public" static="no" mutable="no">
        <type><ref refid="classid_mat4" kindref="compound">idMat4</ref></type>
        <definition>idMat4 mat4_zero(idVec4(0, 0, 0, 0), idVec4(0, 0, 0, 0), idVec4(0, 0, 0, 0), idVec4(0, 0, 0, 0))</definition>
        <argsstring>(idVec4(0, 0, 0, 0), idVec4(0, 0, 0, 0), idVec4(0, 0, 0, 0), idVec4(0, 0, 0, 0))</argsstring>
        <name>mat4_zero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" line="621" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_matrix_8cpp_1ada98c1e5e4a0226a6e38e0499ae1b1c8" prot="public" static="no" mutable="no">
        <type><ref refid="classid_mat4" kindref="compound">idMat4</ref></type>
        <definition>idMat4 mat4_identity(idVec4(1, 0, 0, 0), idVec4(0, 1, 0, 0), idVec4(0, 0, 1, 0), idVec4(0, 0, 0, 1))</definition>
        <argsstring>(idVec4(1, 0, 0, 0), idVec4(0, 1, 0, 0), idVec4(0, 0, 1, 0), idVec4(0, 0, 0, 1))</argsstring>
        <name>mat4_identity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" line="622" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_matrix_8cpp_1a6b09e53114fc7657ccbfd56bba5a0b46" prot="public" static="no" mutable="no">
        <type><ref refid="classid_mat5" kindref="compound">idMat5</ref></type>
        <definition>idMat5 mat5_zero(idVec5(0, 0, 0, 0, 0), idVec5(0, 0, 0, 0, 0), idVec5(0, 0, 0, 0, 0), idVec5(0, 0, 0, 0, 0), idVec5(0, 0, 0, 0, 0))</definition>
        <argsstring>(idVec5(0, 0, 0, 0, 0), idVec5(0, 0, 0, 0, 0), idVec5(0, 0, 0, 0, 0), idVec5(0, 0, 0, 0, 0), idVec5(0, 0, 0, 0, 0))</argsstring>
        <name>mat5_zero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" line="1056" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_matrix_8cpp_1a76a8eccc5055bdd753e18e9ece25238a" prot="public" static="no" mutable="no">
        <type><ref refid="classid_mat5" kindref="compound">idMat5</ref></type>
        <definition>idMat5 mat5_identity(idVec5(1, 0, 0, 0, 0), idVec5(0, 1, 0, 0, 0), idVec5(0, 0, 1, 0, 0), idVec5(0, 0, 0, 1, 0), idVec5(0, 0, 0, 0, 1))</definition>
        <argsstring>(idVec5(1, 0, 0, 0, 0), idVec5(0, 1, 0, 0, 0), idVec5(0, 0, 1, 0, 0), idVec5(0, 0, 0, 1, 0), idVec5(0, 0, 0, 0, 1))</argsstring>
        <name>mat5_identity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" line="1057" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_matrix_8cpp_1a7a161d4f3ad7671c07a21ad2c691e949" prot="public" static="no" mutable="no">
        <type><ref refid="classid_mat6" kindref="compound">idMat6</ref></type>
        <definition>idMat6 mat6_zero(idVec6(0, 0, 0, 0, 0, 0), idVec6(0, 0, 0, 0, 0, 0), idVec6(0, 0, 0, 0, 0, 0), idVec6(0, 0, 0, 0, 0, 0), idVec6(0, 0, 0, 0, 0, 0), idVec6(0, 0, 0, 0, 0, 0))</definition>
        <argsstring>(idVec6(0, 0, 0, 0, 0, 0), idVec6(0, 0, 0, 0, 0, 0), idVec6(0, 0, 0, 0, 0, 0), idVec6(0, 0, 0, 0, 0, 0), idVec6(0, 0, 0, 0, 0, 0), idVec6(0, 0, 0, 0, 0, 0))</argsstring>
        <name>mat6_zero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" line="1749" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_matrix_8cpp_1aff4eb72cffd6d536c75342e6888082fd" prot="public" static="no" mutable="no">
        <type><ref refid="classid_mat6" kindref="compound">idMat6</ref></type>
        <definition>idMat6 mat6_identity(idVec6(1, 0, 0, 0, 0, 0), idVec6(0, 1, 0, 0, 0, 0), idVec6(0, 0, 1, 0, 0, 0), idVec6(0, 0, 0, 1, 0, 0), idVec6(0, 0, 0, 0, 1, 0), idVec6(0, 0, 0, 0, 0, 1))</definition>
        <argsstring>(idVec6(1, 0, 0, 0, 0, 0), idVec6(0, 1, 0, 0, 0, 0), idVec6(0, 0, 1, 0, 0, 0), idVec6(0, 0, 0, 1, 0, 0), idVec6(0, 0, 0, 0, 1, 0), idVec6(0, 0, 0, 0, 0, 1))</argsstring>
        <name>mat6_identity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" line="1750" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idMat2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><ref refid="classid_mat2" kindref="compound">idMat2</ref><sp/>mat2_zero(<sp/><ref refid="classid_vec2" kindref="compound">idVec2</ref>(<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec2" kindref="compound">idVec2</ref>(<sp/>0,<sp/>0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><ref refid="classid_mat2" kindref="compound">idMat2</ref><sp/>mat2_identity(<sp/><ref refid="classid_vec2" kindref="compound">idVec2</ref>(<sp/>1,<sp/>0<sp/>),<sp/><ref refid="classid_vec2" kindref="compound">idVec2</ref>(<sp/>0,<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="43"><highlight class="comment">============</highlight></codeline>
<codeline lineno="44"><highlight class="comment">idMat2::InverseSelf</highlight></codeline>
<codeline lineno="45"><highlight class="comment">============</highlight></codeline>
<codeline lineno="46"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMat2::InverseSelf(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2+4<sp/>=<sp/>6<sp/>multiplications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>division</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>det,<sp/>invDet,<sp/>a;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>mat[0][0]<sp/>*<sp/>mat[1][1]<sp/>-<sp/>mat[0][1]<sp/>*<sp/>mat[1][0];</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>det<sp/>)<sp/>&lt;<sp/>MATRIX_INVERSE_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>invDet<sp/>=<sp/>1.0f<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>mat[0][0];</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][0]<sp/>=<sp/><sp/><sp/>mat[1][1]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][1]<sp/>=<sp/>-<sp/>mat[0][1]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][0]<sp/>=<sp/>-<sp/>mat[1][0]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][1]<sp/>=<sp/><sp/><sp/>a<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="70"><highlight class="comment">============</highlight></codeline>
<codeline lineno="71"><highlight class="comment">idMat2::InverseFastSelf</highlight></codeline>
<codeline lineno="72"><highlight class="comment">============</highlight></codeline>
<codeline lineno="73"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMat2::InverseFastSelf(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2+4<sp/>=<sp/>6<sp/>multiplications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>division</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>det,<sp/>invDet,<sp/>a;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>mat[0][0]<sp/>*<sp/>mat[1][1]<sp/>-<sp/>mat[0][1]<sp/>*<sp/>mat[1][0];</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>det<sp/>)<sp/>&lt;<sp/>MATRIX_INVERSE_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>invDet<sp/>=<sp/>1.0f<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>mat[0][0];</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][0]<sp/>=<sp/><sp/><sp/>mat[1][1]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][1]<sp/>=<sp/>-<sp/>mat[0][1]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][0]<sp/>=<sp/>-<sp/>mat[1][0]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][1]<sp/>=<sp/><sp/><sp/>a<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2*4<sp/>=<sp/>8<sp/>multiplications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>division</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*mat<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d,<sp/>di;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>di<sp/>=<sp/>mat[0];</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>di;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0*2+0]<sp/>=<sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>di;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0*2+1]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>-d;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1*2+0]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[1*2+0]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1*2+1]<sp/>+=<sp/>mat[0*2+1]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>di<sp/>=<sp/>mat[1*2+1];</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>*=<sp/>di;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1*2+1]<sp/>=<sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>di;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1*2+0]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>-d;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0*2+1]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[0*2+1]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0*2+0]<sp/>+=<sp/>mat[1*2+0]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>s<sp/>!=<sp/>0.0f<sp/>&amp;&amp;<sp/>!FLOAT_IS_NAN(<sp/>s<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="124"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="125"><highlight class="comment">idMat2::ToString</highlight></codeline>
<codeline lineno="126"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="127"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*idMat2::ToString(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idStr::FloatArrayToString(<sp/>ToFloatPtr(),<sp/>GetDimension(),<sp/>precision<sp/>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idMat3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>mat3_zero(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>0,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>0,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>0,<sp/>0,<sp/>0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>mat3_identity(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>1,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>0,<sp/>1,<sp/>0<sp/>),<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>0,<sp/>0,<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="143"><highlight class="comment">============</highlight></codeline>
<codeline lineno="144"><highlight class="comment">idMat3::ToAngles</highlight></codeline>
<codeline lineno="145"><highlight class="comment">============</highlight></codeline>
<codeline lineno="146"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><ref refid="classid_angles" kindref="compound">idAngles</ref><sp/>idMat3::ToAngles(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_angles" kindref="compound">idAngles</ref><sp/><sp/><sp/><sp/>angles;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>theta;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cp;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>sp<sp/>=<sp/>mat[<sp/>0<sp/>][<sp/>2<sp/>];</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cap<sp/>off<sp/>our<sp/>sin<sp/>value<sp/>so<sp/>that<sp/>we<sp/>don&apos;t<sp/>get<sp/>any<sp/>NANs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sp<sp/>&gt;<sp/>1.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sp<sp/>&lt;<sp/>-1.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp<sp/>=<sp/>-1.0f;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>-asin(<sp/>sp<sp/>);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>cos(<sp/>theta<sp/>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cp<sp/>&gt;<sp/>8192.0f<sp/>*<sp/>idMath::FLT_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angles.pitch<sp/><sp/><sp/><sp/>=<sp/>RAD2DEG(<sp/>theta<sp/>);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angles.yaw<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RAD2DEG(<sp/>atan2(<sp/>mat[<sp/>0<sp/>][<sp/>1<sp/>],<sp/>mat[<sp/>0<sp/>][<sp/>0<sp/>]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angles.roll<sp/><sp/><sp/><sp/><sp/>=<sp/>RAD2DEG(<sp/>atan2(<sp/>mat[<sp/>1<sp/>][<sp/>2<sp/>],<sp/>mat[<sp/>2<sp/>][<sp/>2<sp/>]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angles.pitch<sp/><sp/><sp/><sp/>=<sp/>RAD2DEG(<sp/>theta<sp/>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angles.yaw<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RAD2DEG(<sp/>-atan2(<sp/>mat[<sp/>1<sp/>][<sp/>0<sp/>],<sp/>mat[<sp/>1<sp/>][<sp/>1<sp/>]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angles.roll<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>angles;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="178"><highlight class="comment">============</highlight></codeline>
<codeline lineno="179"><highlight class="comment">idMat3::ToQuat</highlight></codeline>
<codeline lineno="180"><highlight class="comment">============</highlight></codeline>
<codeline lineno="181"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><ref refid="classid_quat" kindref="compound">idQuat</ref><sp/>idMat3::ToQuat(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_quat" kindref="compound">idQuat</ref><sp/><sp/><sp/><sp/><sp/><sp/>q;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trace;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>next[<sp/>3<sp/>]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>trace<sp/>=<sp/>mat[<sp/>0<sp/>][<sp/>0<sp/>]<sp/>+<sp/>mat[<sp/>1<sp/>][<sp/>1<sp/>]<sp/>+<sp/>mat[<sp/>2<sp/>][<sp/>2<sp/>];</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>trace<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>trace<sp/>+<sp/>1.0f;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>idMath::InvSqrt(<sp/>t<sp/>)<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q[3]<sp/>=<sp/>s<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q[0]<sp/>=<sp/>(<sp/>mat[<sp/>2<sp/>][<sp/>1<sp/>]<sp/>-<sp/>mat[<sp/>1<sp/>][<sp/>2<sp/>]<sp/>)<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q[1]<sp/>=<sp/>(<sp/>mat[<sp/>0<sp/>][<sp/>2<sp/>]<sp/>-<sp/>mat[<sp/>2<sp/>][<sp/>0<sp/>]<sp/>)<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q[2]<sp/>=<sp/>(<sp/>mat[<sp/>1<sp/>][<sp/>0<sp/>]<sp/>-<sp/>mat[<sp/>0<sp/>][<sp/>1<sp/>]<sp/>)<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mat[<sp/>1<sp/>][<sp/>1<sp/>]<sp/>&gt;<sp/>mat[<sp/>0<sp/>][<sp/>0<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mat[<sp/>2<sp/>][<sp/>2<sp/>]<sp/>&gt;<sp/>mat[<sp/>i<sp/>][<sp/>i<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>next[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>next[<sp/>j<sp/>];</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(<sp/>mat[<sp/>i<sp/>][<sp/>i<sp/>]<sp/>-<sp/>(<sp/>mat[<sp/>j<sp/>][<sp/>j<sp/>]<sp/>+<sp/>mat[<sp/>k<sp/>][<sp/>k<sp/>]<sp/>)<sp/>)<sp/>+<sp/>1.0f;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>idMath::InvSqrt(<sp/>t<sp/>)<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q[i]<sp/>=<sp/>s<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q[3]<sp/>=<sp/>(<sp/>mat[<sp/>k<sp/>][<sp/>j<sp/>]<sp/>-<sp/>mat[<sp/>j<sp/>][<sp/>k<sp/>]<sp/>)<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q[j]<sp/>=<sp/>(<sp/>mat[<sp/>j<sp/>][<sp/>i<sp/>]<sp/>+<sp/>mat[<sp/>i<sp/>][<sp/>j<sp/>]<sp/>)<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q[k]<sp/>=<sp/>(<sp/>mat[<sp/>k<sp/>][<sp/>i<sp/>]<sp/>+<sp/>mat[<sp/>i<sp/>][<sp/>k<sp/>]<sp/>)<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="229"><highlight class="comment">============</highlight></codeline>
<codeline lineno="230"><highlight class="comment">idMat3::ToCQuat</highlight></codeline>
<codeline lineno="231"><highlight class="comment">============</highlight></codeline>
<codeline lineno="232"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><ref refid="classid_c_quat" kindref="compound">idCQuat</ref><sp/>idMat3::ToCQuat(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_quat" kindref="compound">idQuat</ref><sp/>q<sp/>=<sp/>ToQuat();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>q.w<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classid_c_quat" kindref="compound">idCQuat</ref>(<sp/>-q.x,<sp/>-q.y,<sp/>-q.z<sp/>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classid_c_quat" kindref="compound">idCQuat</ref>(<sp/>q.x,<sp/>q.y,<sp/>q.z<sp/>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="242"><highlight class="comment">============</highlight></codeline>
<codeline lineno="243"><highlight class="comment">idMat3::ToRotation</highlight></codeline>
<codeline lineno="244"><highlight class="comment">============</highlight></codeline>
<codeline lineno="245"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>idMat3::ToRotation(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/><sp/>r;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trace;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>next[<sp/>3<sp/>]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>trace<sp/>=<sp/>mat[<sp/>0<sp/>][<sp/>0<sp/>]<sp/>+<sp/>mat[<sp/>1<sp/>][<sp/>1<sp/>]<sp/>+<sp/>mat[<sp/>2<sp/>][<sp/>2<sp/>];</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>trace<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>trace<sp/>+<sp/>1.0f;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>idMath::InvSqrt(<sp/>t<sp/>)<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.angle<sp/>=<sp/>s<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.vec[0]<sp/>=<sp/>(<sp/>mat[<sp/>2<sp/>][<sp/>1<sp/>]<sp/>-<sp/>mat[<sp/>1<sp/>][<sp/>2<sp/>]<sp/>)<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.vec[1]<sp/>=<sp/>(<sp/>mat[<sp/>0<sp/>][<sp/>2<sp/>]<sp/>-<sp/>mat[<sp/>2<sp/>][<sp/>0<sp/>]<sp/>)<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.vec[2]<sp/>=<sp/>(<sp/>mat[<sp/>1<sp/>][<sp/>0<sp/>]<sp/>-<sp/>mat[<sp/>0<sp/>][<sp/>1<sp/>]<sp/>)<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mat[<sp/>1<sp/>][<sp/>1<sp/>]<sp/>&gt;<sp/>mat[<sp/>0<sp/>][<sp/>0<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mat[<sp/>2<sp/>][<sp/>2<sp/>]<sp/>&gt;<sp/>mat[<sp/>i<sp/>][<sp/>i<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>next[<sp/>i<sp/>];<sp/><sp/></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>next[<sp/>j<sp/>];</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(<sp/>mat[<sp/>i<sp/>][<sp/>i<sp/>]<sp/>-<sp/>(<sp/>mat[<sp/>j<sp/>][<sp/>j<sp/>]<sp/>+<sp/>mat[<sp/>k<sp/>][<sp/>k<sp/>]<sp/>)<sp/>)<sp/>+<sp/>1.0f;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>idMath::InvSqrt(<sp/>t<sp/>)<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.vec[i]<sp/><sp/><sp/><sp/>=<sp/>s<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.angle<sp/><sp/><sp/><sp/><sp/>=<sp/>(<sp/>mat[<sp/>k<sp/>][<sp/>j<sp/>]<sp/>-<sp/>mat[<sp/>j<sp/>][<sp/>k<sp/>]<sp/>)<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.vec[j]<sp/><sp/><sp/><sp/>=<sp/>(<sp/>mat[<sp/>j<sp/>][<sp/>i<sp/>]<sp/>+<sp/>mat[<sp/>i<sp/>][<sp/>j<sp/>]<sp/>)<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.vec[k]<sp/><sp/><sp/><sp/>=<sp/>(<sp/>mat[<sp/>k<sp/>][<sp/>i<sp/>]<sp/>+<sp/>mat[<sp/>i<sp/>][<sp/>k<sp/>]<sp/>)<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>r.angle<sp/>=<sp/>idMath::ACos(<sp/>r.angle<sp/>);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>r.angle<sp/>)<sp/>&lt;<sp/>1e-10f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.vec.Set(<sp/>0.0f,<sp/>0.0f,<sp/>1.0f<sp/>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.angle<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//vec<sp/>*=<sp/>(1.0f<sp/>/<sp/>sin(<sp/>angle<sp/>));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.vec.Normalize();</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.vec.FixDegenerateNormal();</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.angle<sp/>*=<sp/>2.0f<sp/>*<sp/>idMath::M_RAD2DEG;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>r.origin.Zero();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>r.axis<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>r.axisValid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="305"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="306"><highlight class="comment">idMat3::ToAngularVelocity</highlight></codeline>
<codeline lineno="307"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="308"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>idMat3::ToAngularVelocity(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>rotation<sp/>=<sp/>ToRotation();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rotation.GetVec()<sp/>*<sp/>DEG2RAD(<sp/>rotation.GetAngle()<sp/>);</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="315"><highlight class="comment">============</highlight></codeline>
<codeline lineno="316"><highlight class="comment">idMat3::Determinant</highlight></codeline>
<codeline lineno="317"><highlight class="comment">============</highlight></codeline>
<codeline lineno="318"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>idMat3::Determinant(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_12_01<sp/>=<sp/>mat[1][0]<sp/>*<sp/>mat[2][1]<sp/>-<sp/>mat[1][1]<sp/>*<sp/>mat[2][0];</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_12_02<sp/>=<sp/>mat[1][0]<sp/>*<sp/>mat[2][2]<sp/>-<sp/>mat[1][2]<sp/>*<sp/>mat[2][0];</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_12_12<sp/>=<sp/>mat[1][1]<sp/>*<sp/>mat[2][2]<sp/>-<sp/>mat[1][2]<sp/>*<sp/>mat[2][1];</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mat[0][0]<sp/>*<sp/>det2_12_12<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det2_12_02<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det2_12_01;</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="329"><highlight class="comment">============</highlight></codeline>
<codeline lineno="330"><highlight class="comment">idMat3::InverseSelf</highlight></codeline>
<codeline lineno="331"><highlight class="comment">============</highlight></codeline>
<codeline lineno="332"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMat3::InverseSelf(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>18+3+9<sp/>=<sp/>30<sp/>multiplications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>division</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>inverse;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>det,<sp/>invDet;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>inverse[0][0]<sp/>=<sp/>mat[1][1]<sp/>*<sp/>mat[2][2]<sp/>-<sp/>mat[1][2]<sp/>*<sp/>mat[2][1];</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>inverse[1][0]<sp/>=<sp/>mat[1][2]<sp/>*<sp/>mat[2][0]<sp/>-<sp/>mat[1][0]<sp/>*<sp/>mat[2][2];</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>inverse[2][0]<sp/>=<sp/>mat[1][0]<sp/>*<sp/>mat[2][1]<sp/>-<sp/>mat[1][1]<sp/>*<sp/>mat[2][0];</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>mat[0][0]<sp/>*<sp/>inverse[0][0]<sp/>+<sp/>mat[0][1]<sp/>*<sp/>inverse[1][0]<sp/>+<sp/>mat[0][2]<sp/>*<sp/>inverse[2][0];</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>det<sp/>)<sp/>&lt;<sp/>MATRIX_INVERSE_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>invDet<sp/>=<sp/>1.0f<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>inverse[0][1]<sp/>=<sp/>mat[0][2]<sp/>*<sp/>mat[2][1]<sp/>-<sp/>mat[0][1]<sp/>*<sp/>mat[2][2];</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>inverse[0][2]<sp/>=<sp/>mat[0][1]<sp/>*<sp/>mat[1][2]<sp/>-<sp/>mat[0][2]<sp/>*<sp/>mat[1][1];</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>inverse[1][1]<sp/>=<sp/>mat[0][0]<sp/>*<sp/>mat[2][2]<sp/>-<sp/>mat[0][2]<sp/>*<sp/>mat[2][0];</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>inverse[1][2]<sp/>=<sp/>mat[0][2]<sp/>*<sp/>mat[1][0]<sp/>-<sp/>mat[0][0]<sp/>*<sp/>mat[1][2];</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>inverse[2][1]<sp/>=<sp/>mat[0][1]<sp/>*<sp/>mat[2][0]<sp/>-<sp/>mat[0][0]<sp/>*<sp/>mat[2][1];</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>inverse[2][2]<sp/>=<sp/>mat[0][0]<sp/>*<sp/>mat[1][1]<sp/>-<sp/>mat[0][1]<sp/>*<sp/>mat[1][0];</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][0]<sp/>=<sp/>inverse[0][0]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][1]<sp/>=<sp/>inverse[0][1]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][2]<sp/>=<sp/>inverse[0][2]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][0]<sp/>=<sp/>inverse[1][0]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][1]<sp/>=<sp/>inverse[1][1]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][2]<sp/>=<sp/>inverse[1][2]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][0]<sp/>=<sp/>inverse[2][0]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][1]<sp/>=<sp/>inverse[2][1]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][2]<sp/>=<sp/>inverse[2][2]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="374"><highlight class="comment">============</highlight></codeline>
<codeline lineno="375"><highlight class="comment">idMat3::InverseFastSelf</highlight></codeline>
<codeline lineno="376"><highlight class="comment">============</highlight></codeline>
<codeline lineno="377"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMat3::InverseFastSelf(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1</highlight></codeline>
<codeline lineno="380"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>18+3+9<sp/>=<sp/>30<sp/>multiplications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>division</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>inverse;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>det,<sp/>invDet;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>inverse[0][0]<sp/>=<sp/>mat[1][1]<sp/>*<sp/>mat[2][2]<sp/>-<sp/>mat[1][2]<sp/>*<sp/>mat[2][1];</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>inverse[1][0]<sp/>=<sp/>mat[1][2]<sp/>*<sp/>mat[2][0]<sp/>-<sp/>mat[1][0]<sp/>*<sp/>mat[2][2];</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>inverse[2][0]<sp/>=<sp/>mat[1][0]<sp/>*<sp/>mat[2][1]<sp/>-<sp/>mat[1][1]<sp/>*<sp/>mat[2][0];</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>mat[0][0]<sp/>*<sp/>inverse[0][0]<sp/>+<sp/>mat[0][1]<sp/>*<sp/>inverse[1][0]<sp/>+<sp/>mat[0][2]<sp/>*<sp/>inverse[2][0];</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>det<sp/>)<sp/>&lt;<sp/>MATRIX_INVERSE_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>invDet<sp/>=<sp/>1.0f<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>inverse[0][1]<sp/>=<sp/>mat[0][2]<sp/>*<sp/>mat[2][1]<sp/>-<sp/>mat[0][1]<sp/>*<sp/>mat[2][2];</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>inverse[0][2]<sp/>=<sp/>mat[0][1]<sp/>*<sp/>mat[1][2]<sp/>-<sp/>mat[0][2]<sp/>*<sp/>mat[1][1];</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>inverse[1][1]<sp/>=<sp/>mat[0][0]<sp/>*<sp/>mat[2][2]<sp/>-<sp/>mat[0][2]<sp/>*<sp/>mat[2][0];</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>inverse[1][2]<sp/>=<sp/>mat[0][2]<sp/>*<sp/>mat[1][0]<sp/>-<sp/>mat[0][0]<sp/>*<sp/>mat[1][2];</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>inverse[2][1]<sp/>=<sp/>mat[0][1]<sp/>*<sp/>mat[2][0]<sp/>-<sp/>mat[0][0]<sp/>*<sp/>mat[2][1];</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>inverse[2][2]<sp/>=<sp/>mat[0][0]<sp/>*<sp/>mat[1][1]<sp/>-<sp/>mat[0][1]<sp/>*<sp/>mat[1][0];</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][0]<sp/>=<sp/>inverse[0][0]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][1]<sp/>=<sp/>inverse[0][1]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][2]<sp/>=<sp/>inverse[0][2]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][0]<sp/>=<sp/>inverse[1][0]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][1]<sp/>=<sp/>inverse[1][1]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][2]<sp/>=<sp/>inverse[1][2]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][0]<sp/>=<sp/>inverse[2][0]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][1]<sp/>=<sp/>inverse[2][1]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][2]<sp/>=<sp/>inverse[2][2]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>0</highlight></codeline>
<codeline lineno="418"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3*10<sp/>=<sp/>30<sp/>multiplications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3<sp/>divisions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*mat<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d,<sp/>di;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>di<sp/>=<sp/>mat[0];</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>di;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0]<sp/>=<sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>di;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>-d;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[6]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[3]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4]<sp/>+=<sp/>mat[1]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5]<sp/>+=<sp/>mat[2]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[6]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[7]<sp/>+=<sp/>mat[1]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[8]<sp/>+=<sp/>mat[2]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>di<sp/>=<sp/>mat[4];</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>*=<sp/>di;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4]<sp/>=<sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>di;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>-d;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[7]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[1]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0]<sp/>+=<sp/>mat[3]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2]<sp/>+=<sp/>mat[5]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[7]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[6]<sp/>+=<sp/>mat[3]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[8]<sp/>+=<sp/>mat[5]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>di<sp/>=<sp/>mat[8];</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>*=<sp/>di;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[8]<sp/>=<sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>di;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[6]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[7]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>-d;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[2]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0]<sp/>+=<sp/>mat[6]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1]<sp/>+=<sp/>mat[7]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[5]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3]<sp/>+=<sp/>mat[6]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4]<sp/>+=<sp/>mat[7]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>s<sp/>!=<sp/>0.0f<sp/>&amp;&amp;<sp/>!FLOAT_IS_NAN(<sp/>s<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="469"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>4*2+4*4<sp/>=<sp/>24<sp/>multiplications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>2*1<sp/>=<sp/><sp/>2<sp/>divisions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat2" kindref="compound">idMat2</ref><sp/>r0;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r1[2],<sp/>r2[2],<sp/>r3;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det,<sp/>invDet;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*mat<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r0<sp/>=<sp/>m0.Inverse();<sp/><sp/><sp/>//<sp/>2x2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>mat[0*3+0]<sp/>*<sp/>mat[1*3+1]<sp/>-<sp/>mat[0*3+1]<sp/>*<sp/>mat[1*3+0];</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>det<sp/>)<sp/>&lt;<sp/>MATRIX_INVERSE_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>invDet<sp/>=<sp/>1.0f<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[0][0]<sp/>=<sp/><sp/><sp/>mat[1*3+1]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[0][1]<sp/>=<sp/>-<sp/>mat[0*3+1]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[1][0]<sp/>=<sp/>-<sp/>mat[1*3+0]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[1][1]<sp/>=<sp/><sp/><sp/>mat[0*3+0]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r1<sp/>=<sp/>r0<sp/>*<sp/>m1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>2x1<sp/>=<sp/>2x2<sp/>*<sp/>2x1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>r1[0]<sp/>=<sp/>r0[0][0]<sp/>*<sp/>mat[0*3+2]<sp/>+<sp/>r0[0][1]<sp/>*<sp/>mat[1*3+2];</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>r1[1]<sp/>=<sp/>r0[1][0]<sp/>*<sp/>mat[0*3+2]<sp/>+<sp/>r0[1][1]<sp/>*<sp/>mat[1*3+2];</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r2<sp/>=<sp/>m2<sp/>*<sp/>r1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>1x1<sp/>=<sp/>1x2<sp/>*<sp/>2x1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[0]<sp/>=<sp/>mat[2*3+0]<sp/>*<sp/>r1[0]<sp/>+<sp/>mat[2*3+1]<sp/>*<sp/>r1[1];</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r3<sp/>=<sp/>r2<sp/>-<sp/>m3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>1x1<sp/>=<sp/>1x1<sp/>-<sp/>1x1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>r3<sp/>=<sp/>r2[0]<sp/>-<sp/>mat[2*3+2];</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r3.InverseSelf();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>r3<sp/>)<sp/>&lt;<sp/>MATRIX_INVERSE_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>r3<sp/>=<sp/>1.0f<sp/>/<sp/>r3;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r2<sp/>=<sp/>m2<sp/>*<sp/>r0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>1x2<sp/>=<sp/>1x2<sp/>*<sp/>2x2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[0]<sp/>=<sp/>mat[2*3+0]<sp/>*<sp/>r0[0][0]<sp/>+<sp/>mat[2*3+1]<sp/>*<sp/>r0[1][0];</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[1]<sp/>=<sp/>mat[2*3+0]<sp/>*<sp/>r0[0][1]<sp/>+<sp/>mat[2*3+1]<sp/>*<sp/>r0[1][1];</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m2<sp/>=<sp/>r3<sp/>*<sp/>r2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>1x2<sp/>=<sp/>1x1<sp/>*<sp/>1x2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2*3+0]<sp/>=<sp/>r3<sp/>*<sp/>r2[0];</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2*3+1]<sp/>=<sp/>r3<sp/>*<sp/>r2[1];</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m0<sp/>=<sp/>r0<sp/>-<sp/>r1<sp/>*<sp/>m2;<sp/><sp/><sp/>//<sp/>2x2<sp/>-<sp/>2x1<sp/>*<sp/>1x2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0*3+0]<sp/>=<sp/>r0[0][0]<sp/>-<sp/>r1[0]<sp/>*<sp/>mat[2*3+0];</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0*3+1]<sp/>=<sp/>r0[0][1]<sp/>-<sp/>r1[0]<sp/>*<sp/>mat[2*3+1];</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1*3+0]<sp/>=<sp/>r0[1][0]<sp/>-<sp/>r1[1]<sp/>*<sp/>mat[2*3+0];</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1*3+1]<sp/>=<sp/>r0[1][1]<sp/>-<sp/>r1[1]<sp/>*<sp/>mat[2*3+1];</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m1<sp/>=<sp/>r1<sp/>*<sp/>r3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>2x1<sp/>=<sp/>2x1<sp/>*<sp/>1x1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0*3+2]<sp/>=<sp/>r1[0]<sp/>*<sp/>r3;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1*3+2]<sp/>=<sp/>r1[1]<sp/>*<sp/>r3;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m3<sp/>=<sp/>-r3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2*3+2]<sp/>=<sp/>-r3;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="530"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="533"><highlight class="comment">============</highlight></codeline>
<codeline lineno="534"><highlight class="comment">idMat3::InertiaTranslate</highlight></codeline>
<codeline lineno="535"><highlight class="comment">============</highlight></codeline>
<codeline lineno="536"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>idMat3::InertiaTranslate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mass,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;centerOfMass,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>m;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>newCenter;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>newCenter<sp/>=<sp/>centerOfMass<sp/>+<sp/>translation;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>m[0][0]<sp/>=<sp/>mass<sp/>*<sp/>(<sp/>(<sp/>centerOfMass[1]<sp/>*<sp/>centerOfMass[1]<sp/>+<sp/>centerOfMass[2]<sp/>*<sp/>centerOfMass[2]<sp/>)</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>(<sp/>newCenter[1]<sp/>*<sp/>newCenter[1]<sp/>+<sp/>newCenter[2]<sp/>*<sp/>newCenter[2]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>m[1][1]<sp/>=<sp/>mass<sp/>*<sp/>(<sp/>(<sp/>centerOfMass[0]<sp/>*<sp/>centerOfMass[0]<sp/>+<sp/>centerOfMass[2]<sp/>*<sp/>centerOfMass[2]<sp/>)</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>(<sp/>newCenter[0]<sp/>*<sp/>newCenter[0]<sp/>+<sp/>newCenter[2]<sp/>*<sp/>newCenter[2]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>m[2][2]<sp/>=<sp/>mass<sp/>*<sp/>(<sp/>(<sp/>centerOfMass[0]<sp/>*<sp/>centerOfMass[0]<sp/>+<sp/>centerOfMass[1]<sp/>*<sp/>centerOfMass[1]<sp/>)</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>(<sp/>newCenter[0]<sp/>*<sp/>newCenter[0]<sp/>+<sp/>newCenter[1]<sp/>*<sp/>newCenter[1]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>m[0][1]<sp/>=<sp/>m[1][0]<sp/>=<sp/>mass<sp/>*<sp/>(<sp/>newCenter[0]<sp/>*<sp/>newCenter[1]<sp/>-<sp/>centerOfMass[0]<sp/>*<sp/>centerOfMass[1]<sp/>);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>m[1][2]<sp/>=<sp/>m[2][1]<sp/>=<sp/>mass<sp/>*<sp/>(<sp/>newCenter[1]<sp/>*<sp/>newCenter[2]<sp/>-<sp/>centerOfMass[1]<sp/>*<sp/>centerOfMass[2]<sp/>);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>m[0][2]<sp/>=<sp/>m[2][0]<sp/>=<sp/>mass<sp/>*<sp/>(<sp/>newCenter[0]<sp/>*<sp/>newCenter[2]<sp/>-<sp/>centerOfMass[0]<sp/>*<sp/>centerOfMass[2]<sp/>);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>+<sp/>m;</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="558"><highlight class="comment">============</highlight></codeline>
<codeline lineno="559"><highlight class="comment">idMat3::InertiaTranslateSelf</highlight></codeline>
<codeline lineno="560"><highlight class="comment">============</highlight></codeline>
<codeline lineno="561"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>&amp;idMat3::InertiaTranslateSelf(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mass,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;centerOfMass,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>m;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>newCenter;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>newCenter<sp/>=<sp/>centerOfMass<sp/>+<sp/>translation;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>m[0][0]<sp/>=<sp/>mass<sp/>*<sp/>(<sp/>(<sp/>centerOfMass[1]<sp/>*<sp/>centerOfMass[1]<sp/>+<sp/>centerOfMass[2]<sp/>*<sp/>centerOfMass[2]<sp/>)</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>(<sp/>newCenter[1]<sp/>*<sp/>newCenter[1]<sp/>+<sp/>newCenter[2]<sp/>*<sp/>newCenter[2]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>m[1][1]<sp/>=<sp/>mass<sp/>*<sp/>(<sp/>(<sp/>centerOfMass[0]<sp/>*<sp/>centerOfMass[0]<sp/>+<sp/>centerOfMass[2]<sp/>*<sp/>centerOfMass[2]<sp/>)</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>(<sp/>newCenter[0]<sp/>*<sp/>newCenter[0]<sp/>+<sp/>newCenter[2]<sp/>*<sp/>newCenter[2]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>m[2][2]<sp/>=<sp/>mass<sp/>*<sp/>(<sp/>(<sp/>centerOfMass[0]<sp/>*<sp/>centerOfMass[0]<sp/>+<sp/>centerOfMass[1]<sp/>*<sp/>centerOfMass[1]<sp/>)</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>(<sp/>newCenter[0]<sp/>*<sp/>newCenter[0]<sp/>+<sp/>newCenter[1]<sp/>*<sp/>newCenter[1]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>m[0][1]<sp/>=<sp/>m[1][0]<sp/>=<sp/>mass<sp/>*<sp/>(<sp/>newCenter[0]<sp/>*<sp/>newCenter[1]<sp/>-<sp/>centerOfMass[0]<sp/>*<sp/>centerOfMass[1]<sp/>);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>m[1][2]<sp/>=<sp/>m[2][1]<sp/>=<sp/>mass<sp/>*<sp/>(<sp/>newCenter[1]<sp/>*<sp/>newCenter[2]<sp/>-<sp/>centerOfMass[1]<sp/>*<sp/>centerOfMass[2]<sp/>);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>m[0][2]<sp/>=<sp/>m[2][0]<sp/>=<sp/>mass<sp/>*<sp/>(<sp/>newCenter[0]<sp/>*<sp/>newCenter[2]<sp/>-<sp/>centerOfMass[0]<sp/>*<sp/>centerOfMass[2]<sp/>);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)<sp/>+=<sp/>m;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="585"><highlight class="comment">============</highlight></codeline>
<codeline lineno="586"><highlight class="comment">idMat3::InertiaRotate</highlight></codeline>
<codeline lineno="587"><highlight class="comment">============</highlight></codeline>
<codeline lineno="588"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>idMat3::InertiaRotate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>&amp;rotation<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>the<sp/>rotation<sp/>matrix<sp/>is<sp/>stored<sp/>column-major</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rotation.Transpose()<sp/>*<sp/>(*this)<sp/>*<sp/>rotation;</highlight></codeline>
<codeline lineno="592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="595"><highlight class="comment">============</highlight></codeline>
<codeline lineno="596"><highlight class="comment">idMat3::InertiaRotateSelf</highlight></codeline>
<codeline lineno="597"><highlight class="comment">============</highlight></codeline>
<codeline lineno="598"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>&amp;idMat3::InertiaRotateSelf(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>&amp;rotation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>the<sp/>rotation<sp/>matrix<sp/>is<sp/>stored<sp/>column-major</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>rotation.Transpose()<sp/>*<sp/>(*this)<sp/>*<sp/>rotation;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="606"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="607"><highlight class="comment">idMat3::ToString</highlight></codeline>
<codeline lineno="608"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="609"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*idMat3::ToString(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idStr::FloatArrayToString(<sp/>ToFloatPtr(),<sp/>GetDimension(),<sp/>precision<sp/>);</highlight></codeline>
<codeline lineno="612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idMat4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><ref refid="classid_mat4" kindref="compound">idMat4</ref><sp/>mat4_zero(<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><ref refid="classid_mat4" kindref="compound">idMat4</ref><sp/>mat4_identity(<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>1,<sp/>0,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>0,<sp/>1,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>0,<sp/>0,<sp/>1,<sp/>0<sp/>),<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>0,<sp/>0,<sp/>0,<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="625"><highlight class="comment">============</highlight></codeline>
<codeline lineno="626"><highlight class="comment">idMat4::Transpose</highlight></codeline>
<codeline lineno="627"><highlight class="comment">============</highlight></codeline>
<codeline lineno="628"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><ref refid="classid_mat4" kindref="compound">idMat4</ref><sp/>idMat4::Transpose(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat4" kindref="compound">idMat4</ref><sp/><sp/>transpose;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transpose[<sp/>i<sp/>][<sp/>j<sp/>]<sp/>=<sp/>mat[<sp/>j<sp/>][<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transpose;</highlight></codeline>
<codeline lineno="639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="642"><highlight class="comment">============</highlight></codeline>
<codeline lineno="643"><highlight class="comment">idMat4::TransposeSelf</highlight></codeline>
<codeline lineno="644"><highlight class="comment">============</highlight></codeline>
<codeline lineno="645"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><ref refid="classid_mat4" kindref="compound">idMat4</ref><sp/>&amp;idMat4::TransposeSelf(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>temp;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>4;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>mat[<sp/>i<sp/>][<sp/>j<sp/>];</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[<sp/>i<sp/>][<sp/>j<sp/>]<sp/>=<sp/>mat[<sp/>j<sp/>][<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[<sp/>j<sp/>][<sp/>i<sp/>]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="661"><highlight class="comment">============</highlight></codeline>
<codeline lineno="662"><highlight class="comment">idMat4::Determinant</highlight></codeline>
<codeline lineno="663"><highlight class="comment">============</highlight></codeline>
<codeline lineno="664"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>idMat4::Determinant(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2x2<sp/>sub-determinants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_01_01<sp/>=<sp/>mat[0][0]<sp/>*<sp/>mat[1][1]<sp/>-<sp/>mat[0][1]<sp/>*<sp/>mat[1][0];</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_01_02<sp/>=<sp/>mat[0][0]<sp/>*<sp/>mat[1][2]<sp/>-<sp/>mat[0][2]<sp/>*<sp/>mat[1][0];</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_01_03<sp/>=<sp/>mat[0][0]<sp/>*<sp/>mat[1][3]<sp/>-<sp/>mat[0][3]<sp/>*<sp/>mat[1][0];</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_01_12<sp/>=<sp/>mat[0][1]<sp/>*<sp/>mat[1][2]<sp/>-<sp/>mat[0][2]<sp/>*<sp/>mat[1][1];</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_01_13<sp/>=<sp/>mat[0][1]<sp/>*<sp/>mat[1][3]<sp/>-<sp/>mat[0][3]<sp/>*<sp/>mat[1][1];</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_01_23<sp/>=<sp/>mat[0][2]<sp/>*<sp/>mat[1][3]<sp/>-<sp/>mat[0][3]<sp/>*<sp/>mat[1][2];</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3x3<sp/>sub-determinants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_201_012<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_01_12<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_01_02<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det2_01_01;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_201_013<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_01_13<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_01_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_01_01;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_201_023<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_01_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_01_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_01_02;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_201_123<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_01_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_01_13<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_01_12;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>-<sp/>det3_201_123<sp/>*<sp/>mat[3][0]<sp/>+<sp/>det3_201_023<sp/>*<sp/>mat[3][1]<sp/>-<sp/>det3_201_013<sp/>*<sp/>mat[3][2]<sp/>+<sp/>det3_201_012<sp/>*<sp/>mat[3][3]<sp/>);</highlight></codeline>
<codeline lineno="682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="685"><highlight class="comment">============</highlight></codeline>
<codeline lineno="686"><highlight class="comment">idMat4::InverseSelf</highlight></codeline>
<codeline lineno="687"><highlight class="comment">============</highlight></codeline>
<codeline lineno="688"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMat4::InverseSelf(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>84+4+16<sp/>=<sp/>104<sp/>multiplications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>division</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>det,<sp/>invDet;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2x2<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>4x4<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_01_01<sp/>=<sp/>mat[0][0]<sp/>*<sp/>mat[1][1]<sp/>-<sp/>mat[0][1]<sp/>*<sp/>mat[1][0];</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_01_02<sp/>=<sp/>mat[0][0]<sp/>*<sp/>mat[1][2]<sp/>-<sp/>mat[0][2]<sp/>*<sp/>mat[1][0];</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_01_03<sp/>=<sp/>mat[0][0]<sp/>*<sp/>mat[1][3]<sp/>-<sp/>mat[0][3]<sp/>*<sp/>mat[1][0];</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_01_12<sp/>=<sp/>mat[0][1]<sp/>*<sp/>mat[1][2]<sp/>-<sp/>mat[0][2]<sp/>*<sp/>mat[1][1];</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_01_13<sp/>=<sp/>mat[0][1]<sp/>*<sp/>mat[1][3]<sp/>-<sp/>mat[0][3]<sp/>*<sp/>mat[1][1];</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_01_23<sp/>=<sp/>mat[0][2]<sp/>*<sp/>mat[1][3]<sp/>-<sp/>mat[0][3]<sp/>*<sp/>mat[1][2];</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3x3<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>4x4<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_201_012<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_01_12<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_01_02<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det2_01_01;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_201_013<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_01_13<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_01_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_01_01;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_201_023<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_01_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_01_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_01_02;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_201_123<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_01_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_01_13<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_01_12;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>(<sp/>-<sp/>det3_201_123<sp/>*<sp/>mat[3][0]<sp/>+<sp/>det3_201_023<sp/>*<sp/>mat[3][1]<sp/>-<sp/>det3_201_013<sp/>*<sp/>mat[3][2]<sp/>+<sp/>det3_201_012<sp/>*<sp/>mat[3][3]<sp/>);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>det<sp/>)<sp/>&lt;<sp/>MATRIX_INVERSE_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>invDet<sp/>=<sp/>1.0f<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remaining<sp/>2x2<sp/>sub-determinants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_03_01<sp/>=<sp/>mat[0][0]<sp/>*<sp/>mat[3][1]<sp/>-<sp/>mat[0][1]<sp/>*<sp/>mat[3][0];</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_03_02<sp/>=<sp/>mat[0][0]<sp/>*<sp/>mat[3][2]<sp/>-<sp/>mat[0][2]<sp/>*<sp/>mat[3][0];</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_03_03<sp/>=<sp/>mat[0][0]<sp/>*<sp/>mat[3][3]<sp/>-<sp/>mat[0][3]<sp/>*<sp/>mat[3][0];</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_03_12<sp/>=<sp/>mat[0][1]<sp/>*<sp/>mat[3][2]<sp/>-<sp/>mat[0][2]<sp/>*<sp/>mat[3][1];</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_03_13<sp/>=<sp/>mat[0][1]<sp/>*<sp/>mat[3][3]<sp/>-<sp/>mat[0][3]<sp/>*<sp/>mat[3][1];</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_03_23<sp/>=<sp/>mat[0][2]<sp/>*<sp/>mat[3][3]<sp/>-<sp/>mat[0][3]<sp/>*<sp/>mat[3][2];</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_13_01<sp/>=<sp/>mat[1][0]<sp/>*<sp/>mat[3][1]<sp/>-<sp/>mat[1][1]<sp/>*<sp/>mat[3][0];</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_13_02<sp/>=<sp/>mat[1][0]<sp/>*<sp/>mat[3][2]<sp/>-<sp/>mat[1][2]<sp/>*<sp/>mat[3][0];</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_13_03<sp/>=<sp/>mat[1][0]<sp/>*<sp/>mat[3][3]<sp/>-<sp/>mat[1][3]<sp/>*<sp/>mat[3][0];</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_13_12<sp/>=<sp/>mat[1][1]<sp/>*<sp/>mat[3][2]<sp/>-<sp/>mat[1][2]<sp/>*<sp/>mat[3][1];</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_13_13<sp/>=<sp/>mat[1][1]<sp/>*<sp/>mat[3][3]<sp/>-<sp/>mat[1][3]<sp/>*<sp/>mat[3][1];</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_13_23<sp/>=<sp/>mat[1][2]<sp/>*<sp/>mat[3][3]<sp/>-<sp/>mat[1][3]<sp/>*<sp/>mat[3][2];</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remaining<sp/>3x3<sp/>sub-determinants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_203_012<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_03_12<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_03_02<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det2_03_01;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_203_013<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_03_13<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_03_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_03_01;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_203_023<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_03_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_03_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_03_02;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_203_123<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_03_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_03_13<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_03_12;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_213_012<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_13_12<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_13_02<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det2_13_01;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_213_013<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_13_13<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_13_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_13_01;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_213_023<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_13_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_13_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_13_02;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_213_123<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_13_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_13_13<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_13_12;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_301_012<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_01_12<sp/>-<sp/>mat[3][1]<sp/>*<sp/>det2_01_02<sp/>+<sp/>mat[3][2]<sp/>*<sp/>det2_01_01;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_301_013<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_01_13<sp/>-<sp/>mat[3][1]<sp/>*<sp/>det2_01_03<sp/>+<sp/>mat[3][3]<sp/>*<sp/>det2_01_01;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_301_023<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_01_23<sp/>-<sp/>mat[3][2]<sp/>*<sp/>det2_01_03<sp/>+<sp/>mat[3][3]<sp/>*<sp/>det2_01_02;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_301_123<sp/>=<sp/>mat[3][1]<sp/>*<sp/>det2_01_23<sp/>-<sp/>mat[3][2]<sp/>*<sp/>det2_01_13<sp/>+<sp/>mat[3][3]<sp/>*<sp/>det2_01_12;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][0]<sp/>=<sp/>-<sp/>det3_213_123<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][0]<sp/>=<sp/>+<sp/>det3_213_023<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][0]<sp/>=<sp/>-<sp/>det3_213_013<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][0]<sp/>=<sp/>+<sp/>det3_213_012<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][1]<sp/>=<sp/>+<sp/>det3_203_123<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][1]<sp/>=<sp/>-<sp/>det3_203_023<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][1]<sp/>=<sp/>+<sp/>det3_203_013<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][1]<sp/>=<sp/>-<sp/>det3_203_012<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][2]<sp/>=<sp/>+<sp/>det3_301_123<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][2]<sp/>=<sp/>-<sp/>det3_301_023<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][2]<sp/>=<sp/>+<sp/>det3_301_013<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][2]<sp/>=<sp/>-<sp/>det3_301_012<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][3]<sp/>=<sp/>-<sp/>det3_201_123<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][3]<sp/>=<sp/>+<sp/>det3_201_023<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][3]<sp/>=<sp/>-<sp/>det3_201_013<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][3]<sp/>=<sp/>+<sp/>det3_201_012<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="771"><highlight class="comment">============</highlight></codeline>
<codeline lineno="772"><highlight class="comment">idMat4::InverseFastSelf</highlight></codeline>
<codeline lineno="773"><highlight class="comment">============</highlight></codeline>
<codeline lineno="774"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMat4::InverseFastSelf(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="777"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>84+4+16<sp/>=<sp/>104<sp/>multiplications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>division</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>det,<sp/>invDet;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2x2<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>4x4<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_01_01<sp/>=<sp/>mat[0][0]<sp/>*<sp/>mat[1][1]<sp/>-<sp/>mat[0][1]<sp/>*<sp/>mat[1][0];</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_01_02<sp/>=<sp/>mat[0][0]<sp/>*<sp/>mat[1][2]<sp/>-<sp/>mat[0][2]<sp/>*<sp/>mat[1][0];</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_01_03<sp/>=<sp/>mat[0][0]<sp/>*<sp/>mat[1][3]<sp/>-<sp/>mat[0][3]<sp/>*<sp/>mat[1][0];</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_01_12<sp/>=<sp/>mat[0][1]<sp/>*<sp/>mat[1][2]<sp/>-<sp/>mat[0][2]<sp/>*<sp/>mat[1][1];</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_01_13<sp/>=<sp/>mat[0][1]<sp/>*<sp/>mat[1][3]<sp/>-<sp/>mat[0][3]<sp/>*<sp/>mat[1][1];</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_01_23<sp/>=<sp/>mat[0][2]<sp/>*<sp/>mat[1][3]<sp/>-<sp/>mat[0][3]<sp/>*<sp/>mat[1][2];</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3x3<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>4x4<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_201_012<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_01_12<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_01_02<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det2_01_01;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_201_013<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_01_13<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_01_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_01_01;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_201_023<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_01_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_01_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_01_02;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_201_123<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_01_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_01_13<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_01_12;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>(<sp/>-<sp/>det3_201_123<sp/>*<sp/>mat[3][0]<sp/>+<sp/>det3_201_023<sp/>*<sp/>mat[3][1]<sp/>-<sp/>det3_201_013<sp/>*<sp/>mat[3][2]<sp/>+<sp/>det3_201_012<sp/>*<sp/>mat[3][3]<sp/>);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>det<sp/>)<sp/>&lt;<sp/>MATRIX_INVERSE_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>invDet<sp/>=<sp/>1.0f<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remaining<sp/>2x2<sp/>sub-determinants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_03_01<sp/>=<sp/>mat[0][0]<sp/>*<sp/>mat[3][1]<sp/>-<sp/>mat[0][1]<sp/>*<sp/>mat[3][0];</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_03_02<sp/>=<sp/>mat[0][0]<sp/>*<sp/>mat[3][2]<sp/>-<sp/>mat[0][2]<sp/>*<sp/>mat[3][0];</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_03_03<sp/>=<sp/>mat[0][0]<sp/>*<sp/>mat[3][3]<sp/>-<sp/>mat[0][3]<sp/>*<sp/>mat[3][0];</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_03_12<sp/>=<sp/>mat[0][1]<sp/>*<sp/>mat[3][2]<sp/>-<sp/>mat[0][2]<sp/>*<sp/>mat[3][1];</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_03_13<sp/>=<sp/>mat[0][1]<sp/>*<sp/>mat[3][3]<sp/>-<sp/>mat[0][3]<sp/>*<sp/>mat[3][1];</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_03_23<sp/>=<sp/>mat[0][2]<sp/>*<sp/>mat[3][3]<sp/>-<sp/>mat[0][3]<sp/>*<sp/>mat[3][2];</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_13_01<sp/>=<sp/>mat[1][0]<sp/>*<sp/>mat[3][1]<sp/>-<sp/>mat[1][1]<sp/>*<sp/>mat[3][0];</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_13_02<sp/>=<sp/>mat[1][0]<sp/>*<sp/>mat[3][2]<sp/>-<sp/>mat[1][2]<sp/>*<sp/>mat[3][0];</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_13_03<sp/>=<sp/>mat[1][0]<sp/>*<sp/>mat[3][3]<sp/>-<sp/>mat[1][3]<sp/>*<sp/>mat[3][0];</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_13_12<sp/>=<sp/>mat[1][1]<sp/>*<sp/>mat[3][2]<sp/>-<sp/>mat[1][2]<sp/>*<sp/>mat[3][1];</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_13_13<sp/>=<sp/>mat[1][1]<sp/>*<sp/>mat[3][3]<sp/>-<sp/>mat[1][3]<sp/>*<sp/>mat[3][1];</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_13_23<sp/>=<sp/>mat[1][2]<sp/>*<sp/>mat[3][3]<sp/>-<sp/>mat[1][3]<sp/>*<sp/>mat[3][2];</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remaining<sp/>3x3<sp/>sub-determinants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_203_012<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_03_12<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_03_02<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det2_03_01;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_203_013<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_03_13<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_03_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_03_01;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_203_023<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_03_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_03_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_03_02;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_203_123<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_03_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_03_13<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_03_12;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_213_012<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_13_12<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_13_02<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det2_13_01;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_213_013<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_13_13<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_13_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_13_01;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_213_023<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_13_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_13_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_13_02;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_213_123<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_13_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_13_13<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_13_12;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_301_012<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_01_12<sp/>-<sp/>mat[3][1]<sp/>*<sp/>det2_01_02<sp/>+<sp/>mat[3][2]<sp/>*<sp/>det2_01_01;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_301_013<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_01_13<sp/>-<sp/>mat[3][1]<sp/>*<sp/>det2_01_03<sp/>+<sp/>mat[3][3]<sp/>*<sp/>det2_01_01;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_301_023<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_01_23<sp/>-<sp/>mat[3][2]<sp/>*<sp/>det2_01_03<sp/>+<sp/>mat[3][3]<sp/>*<sp/>det2_01_02;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_301_123<sp/>=<sp/>mat[3][1]<sp/>*<sp/>det2_01_23<sp/>-<sp/>mat[3][2]<sp/>*<sp/>det2_01_13<sp/>+<sp/>mat[3][3]<sp/>*<sp/>det2_01_12;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][0]<sp/>=<sp/>-<sp/>det3_213_123<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][0]<sp/>=<sp/>+<sp/>det3_213_023<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][0]<sp/>=<sp/>-<sp/>det3_213_013<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][0]<sp/>=<sp/>+<sp/>det3_213_012<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][1]<sp/>=<sp/>+<sp/>det3_203_123<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][1]<sp/>=<sp/>-<sp/>det3_203_023<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][1]<sp/>=<sp/>+<sp/>det3_203_013<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][1]<sp/>=<sp/>-<sp/>det3_203_012<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][2]<sp/>=<sp/>+<sp/>det3_301_123<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][2]<sp/>=<sp/>-<sp/>det3_301_023<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][2]<sp/>=<sp/>+<sp/>det3_301_013<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][2]<sp/>=<sp/>-<sp/>det3_301_012<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][3]<sp/>=<sp/>-<sp/>det3_201_123<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][3]<sp/>=<sp/>+<sp/>det3_201_023<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][3]<sp/>=<sp/>-<sp/>det3_201_013<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][3]<sp/>=<sp/>+<sp/>det3_201_012<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>0</highlight></codeline>
<codeline lineno="856"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4*18<sp/>=<sp/>72<sp/>multiplications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/>divisions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*mat<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d,<sp/>di;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>di<sp/>=<sp/>mat[0];</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>di;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0]<sp/>=<sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>di;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>-d;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[8]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[12]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[4]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5]<sp/>+=<sp/>mat[1]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[6]<sp/>+=<sp/>mat[2]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[7]<sp/>+=<sp/>mat[3]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[8]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[9]<sp/>+=<sp/>mat[1]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[10]<sp/>+=<sp/>mat[2]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[11]<sp/>+=<sp/>mat[3]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[12]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[13]<sp/>+=<sp/>mat[1]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[14]<sp/>+=<sp/>mat[2]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[15]<sp/>+=<sp/>mat[3]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>di<sp/>=<sp/>mat[5];</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>*=<sp/>di;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5]<sp/>=<sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>di;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[6]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[7]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>-d;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[9]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[13]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[1]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0]<sp/>+=<sp/>mat[4]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2]<sp/>+=<sp/>mat[6]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3]<sp/>+=<sp/>mat[7]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[9]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[8]<sp/>+=<sp/>mat[4]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[10]<sp/>+=<sp/>mat[6]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[11]<sp/>+=<sp/>mat[7]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[13]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[12]<sp/>+=<sp/>mat[4]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[14]<sp/>+=<sp/>mat[6]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[15]<sp/>+=<sp/>mat[7]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>di<sp/>=<sp/>mat[10];</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>*=<sp/>di;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[10]<sp/>=<sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>di;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[8]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[9]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[11]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>-d;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[6]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[14]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[2]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0]<sp/>+=<sp/>mat[8]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1]<sp/>+=<sp/>mat[9]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3]<sp/>+=<sp/>mat[11]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[6]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4]<sp/>+=<sp/>mat[8]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5]<sp/>+=<sp/>mat[9]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[7]<sp/>+=<sp/>mat[11]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[14]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[12]<sp/>+=<sp/>mat[8]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[13]<sp/>+=<sp/>mat[9]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[15]<sp/>+=<sp/>mat[11]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>di<sp/>=<sp/>mat[15];</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>*=<sp/>di;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[15]<sp/>=<sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>di;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[12]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[13]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[14]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>-d;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[7]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[11]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[3]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0]<sp/>+=<sp/>mat[12]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1]<sp/>+=<sp/>mat[13]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2]<sp/>+=<sp/>mat[14]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[7]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4]<sp/>+=<sp/>mat[12]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5]<sp/>+=<sp/>mat[13]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[6]<sp/>+=<sp/>mat[14]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[11]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[8]<sp/>+=<sp/>mat[12]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[9]<sp/>+=<sp/>mat[13]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[10]<sp/>+=<sp/>mat[14]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>s<sp/>!=<sp/>0.0f<sp/>&amp;&amp;<sp/>!FLOAT_IS_NAN(<sp/>s<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="953"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>6*8+2*6<sp/>=<sp/>60<sp/>multiplications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>2*1<sp/>=<sp/><sp/>2<sp/>divisions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat2" kindref="compound">idMat2</ref><sp/>r0,<sp/>r1,<sp/>r2,<sp/>r3;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/>det,<sp/>invDet;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*mat<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r0<sp/>=<sp/>m0.Inverse();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>mat[0*4+0]<sp/>*<sp/>mat[1*4+1]<sp/>-<sp/>mat[0*4+1]<sp/>*<sp/>mat[1*4+0];</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>det<sp/>)<sp/>&lt;<sp/>MATRIX_INVERSE_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>invDet<sp/>=<sp/>1.0f<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[0][0]<sp/>=<sp/><sp/><sp/>mat[1*4+1]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[0][1]<sp/>=<sp/>-<sp/>mat[0*4+1]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[1][0]<sp/>=<sp/>-<sp/>mat[1*4+0]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[1][1]<sp/>=<sp/><sp/><sp/>mat[0*4+0]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r1<sp/>=<sp/>r0<sp/>*<sp/>m1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>r1[0][0]<sp/>=<sp/>r0[0][0]<sp/>*<sp/>mat[0*4+2]<sp/>+<sp/>r0[0][1]<sp/>*<sp/>mat[1*4+2];</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>r1[0][1]<sp/>=<sp/>r0[0][0]<sp/>*<sp/>mat[0*4+3]<sp/>+<sp/>r0[0][1]<sp/>*<sp/>mat[1*4+3];</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>r1[1][0]<sp/>=<sp/>r0[1][0]<sp/>*<sp/>mat[0*4+2]<sp/>+<sp/>r0[1][1]<sp/>*<sp/>mat[1*4+2];</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>r1[1][1]<sp/>=<sp/>r0[1][0]<sp/>*<sp/>mat[0*4+3]<sp/>+<sp/>r0[1][1]<sp/>*<sp/>mat[1*4+3];</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r2<sp/>=<sp/>m2<sp/>*<sp/>r1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[0][0]<sp/>=<sp/>mat[2*4+0]<sp/>*<sp/>r1[0][0]<sp/>+<sp/>mat[2*4+1]<sp/>*<sp/>r1[1][0];</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[0][1]<sp/>=<sp/>mat[2*4+0]<sp/>*<sp/>r1[0][1]<sp/>+<sp/>mat[2*4+1]<sp/>*<sp/>r1[1][1];</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[1][0]<sp/>=<sp/>mat[3*4+0]<sp/>*<sp/>r1[0][0]<sp/>+<sp/>mat[3*4+1]<sp/>*<sp/>r1[1][0];</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[1][1]<sp/>=<sp/>mat[3*4+0]<sp/>*<sp/>r1[0][1]<sp/>+<sp/>mat[3*4+1]<sp/>*<sp/>r1[1][1];</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r3<sp/>=<sp/>r2<sp/>-<sp/>m3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[0][0]<sp/>=<sp/>r2[0][0]<sp/>-<sp/>mat[2*4+2];</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[0][1]<sp/>=<sp/>r2[0][1]<sp/>-<sp/>mat[2*4+3];</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[1][0]<sp/>=<sp/>r2[1][0]<sp/>-<sp/>mat[3*4+2];</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[1][1]<sp/>=<sp/>r2[1][1]<sp/>-<sp/>mat[3*4+3];</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r3.InverseSelf();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>r3[0][0]<sp/>*<sp/>r3[1][1]<sp/>-<sp/>r3[0][1]<sp/>*<sp/>r3[1][0];</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>det<sp/>)<sp/>&lt;<sp/>MATRIX_INVERSE_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>invDet<sp/>=<sp/>1.0f<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>r3[0][0];</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[0][0]<sp/>=<sp/><sp/><sp/>r3[1][1]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[0][1]<sp/>=<sp/>-<sp/>r3[0][1]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[1][0]<sp/>=<sp/>-<sp/>r3[1][0]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[1][1]<sp/>=<sp/><sp/><sp/>a<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r2<sp/>=<sp/>m2<sp/>*<sp/>r0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[0][0]<sp/>=<sp/>mat[2*4+0]<sp/>*<sp/>r0[0][0]<sp/>+<sp/>mat[2*4+1]<sp/>*<sp/>r0[1][0];</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[0][1]<sp/>=<sp/>mat[2*4+0]<sp/>*<sp/>r0[0][1]<sp/>+<sp/>mat[2*4+1]<sp/>*<sp/>r0[1][1];</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[1][0]<sp/>=<sp/>mat[3*4+0]<sp/>*<sp/>r0[0][0]<sp/>+<sp/>mat[3*4+1]<sp/>*<sp/>r0[1][0];</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[1][1]<sp/>=<sp/>mat[3*4+0]<sp/>*<sp/>r0[0][1]<sp/>+<sp/>mat[3*4+1]<sp/>*<sp/>r0[1][1];</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m2<sp/>=<sp/>r3<sp/>*<sp/>r2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2*4+0]<sp/>=<sp/>r3[0][0]<sp/>*<sp/>r2[0][0]<sp/>+<sp/>r3[0][1]<sp/>*<sp/>r2[1][0];</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2*4+1]<sp/>=<sp/>r3[0][0]<sp/>*<sp/>r2[0][1]<sp/>+<sp/>r3[0][1]<sp/>*<sp/>r2[1][1];</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3*4+0]<sp/>=<sp/>r3[1][0]<sp/>*<sp/>r2[0][0]<sp/>+<sp/>r3[1][1]<sp/>*<sp/>r2[1][0];</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3*4+1]<sp/>=<sp/>r3[1][0]<sp/>*<sp/>r2[0][1]<sp/>+<sp/>r3[1][1]<sp/>*<sp/>r2[1][1];</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m0<sp/>=<sp/>r0<sp/>-<sp/>r1<sp/>*<sp/>m2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0*4+0]<sp/>=<sp/>r0[0][0]<sp/>-<sp/>r1[0][0]<sp/>*<sp/>mat[2*4+0]<sp/>-<sp/>r1[0][1]<sp/>*<sp/>mat[3*4+0];</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0*4+1]<sp/>=<sp/>r0[0][1]<sp/>-<sp/>r1[0][0]<sp/>*<sp/>mat[2*4+1]<sp/>-<sp/>r1[0][1]<sp/>*<sp/>mat[3*4+1];</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1*4+0]<sp/>=<sp/>r0[1][0]<sp/>-<sp/>r1[1][0]<sp/>*<sp/>mat[2*4+0]<sp/>-<sp/>r1[1][1]<sp/>*<sp/>mat[3*4+0];</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1*4+1]<sp/>=<sp/>r0[1][1]<sp/>-<sp/>r1[1][0]<sp/>*<sp/>mat[2*4+1]<sp/>-<sp/>r1[1][1]<sp/>*<sp/>mat[3*4+1];</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m1<sp/>=<sp/>r1<sp/>*<sp/>r3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0*4+2]<sp/>=<sp/>r1[0][0]<sp/>*<sp/>r3[0][0]<sp/>+<sp/>r1[0][1]<sp/>*<sp/>r3[1][0];</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0*4+3]<sp/>=<sp/>r1[0][0]<sp/>*<sp/>r3[0][1]<sp/>+<sp/>r1[0][1]<sp/>*<sp/>r3[1][1];</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1*4+2]<sp/>=<sp/>r1[1][0]<sp/>*<sp/>r3[0][0]<sp/>+<sp/>r1[1][1]<sp/>*<sp/>r3[1][0];</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1*4+3]<sp/>=<sp/>r1[1][0]<sp/>*<sp/>r3[0][1]<sp/>+<sp/>r1[1][1]<sp/>*<sp/>r3[1][1];</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m3<sp/>=<sp/>-r3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2*4+2]<sp/>=<sp/>-r3[0][0];</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2*4+3]<sp/>=<sp/>-r3[0][1];</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3*4+2]<sp/>=<sp/>-r3[1][0];</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3*4+3]<sp/>=<sp/>-r3[1][1];</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1038"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1041"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="1042"><highlight class="comment">idMat4::ToString</highlight></codeline>
<codeline lineno="1043"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="1044"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*idMat4::ToString(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idStr::FloatArrayToString(<sp/>ToFloatPtr(),<sp/>GetDimension(),<sp/>precision<sp/>);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idMat5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><ref refid="classid_mat5" kindref="compound">idMat5</ref><sp/>mat5_zero(<sp/><ref refid="classid_vec5" kindref="compound">idVec5</ref>(<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec5" kindref="compound">idVec5</ref>(<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec5" kindref="compound">idVec5</ref>(<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec5" kindref="compound">idVec5</ref>(<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec5" kindref="compound">idVec5</ref>(<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><ref refid="classid_mat5" kindref="compound">idMat5</ref><sp/>mat5_identity(<sp/><ref refid="classid_vec5" kindref="compound">idVec5</ref>(<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec5" kindref="compound">idVec5</ref>(<sp/>0,<sp/>1,<sp/>0,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec5" kindref="compound">idVec5</ref>(<sp/>0,<sp/>0,<sp/>1,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec5" kindref="compound">idVec5</ref>(<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>0<sp/>),<sp/><ref refid="classid_vec5" kindref="compound">idVec5</ref>(<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1060"><highlight class="comment">============</highlight></codeline>
<codeline lineno="1061"><highlight class="comment">idMat5::Transpose</highlight></codeline>
<codeline lineno="1062"><highlight class="comment">============</highlight></codeline>
<codeline lineno="1063"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><ref refid="classid_mat5" kindref="compound">idMat5</ref><sp/>idMat5::Transpose(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat5" kindref="compound">idMat5</ref><sp/><sp/>transpose;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>5;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transpose[<sp/>i<sp/>][<sp/>j<sp/>]<sp/>=<sp/>mat[<sp/>j<sp/>][<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transpose;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1077"><highlight class="comment">============</highlight></codeline>
<codeline lineno="1078"><highlight class="comment">idMat5::TransposeSelf</highlight></codeline>
<codeline lineno="1079"><highlight class="comment">============</highlight></codeline>
<codeline lineno="1080"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><ref refid="classid_mat5" kindref="compound">idMat5</ref><sp/>&amp;idMat5::TransposeSelf(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>temp;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>5;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>mat[<sp/>i<sp/>][<sp/>j<sp/>];</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[<sp/>i<sp/>][<sp/>j<sp/>]<sp/>=<sp/>mat[<sp/>j<sp/>][<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[<sp/>j<sp/>][<sp/>i<sp/>]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1096"><highlight class="comment">============</highlight></codeline>
<codeline lineno="1097"><highlight class="comment">idMat5::Determinant</highlight></codeline>
<codeline lineno="1098"><highlight class="comment">============</highlight></codeline>
<codeline lineno="1099"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>idMat5::Determinant(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2x2<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>5x5<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_01<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[4][1]<sp/>-<sp/>mat[3][1]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_02<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[4][2]<sp/>-<sp/>mat[3][2]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_03<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[4][3]<sp/>-<sp/>mat[3][3]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_04<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_12<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[4][2]<sp/>-<sp/>mat[3][2]<sp/>*<sp/>mat[4][1];</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_13<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[4][3]<sp/>-<sp/>mat[3][3]<sp/>*<sp/>mat[4][1];</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_14<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[4][1];</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_23<sp/>=<sp/>mat[3][2]<sp/>*<sp/>mat[4][3]<sp/>-<sp/>mat[3][3]<sp/>*<sp/>mat[4][2];</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_24<sp/>=<sp/>mat[3][2]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[4][2];</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_34<sp/>=<sp/>mat[3][3]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[4][3];</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3x3<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>5x5<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_012<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_12<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_34_02<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det2_34_01;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_013<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_13<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_34_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_34_01;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_014<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_14<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_34_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_01;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_023<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_34_02;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_024<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_24<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_02;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_034<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_34_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_03;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_123<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_34_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_13<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_34_12;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_124<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_34_24<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_14<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_12;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_134<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_34_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_34_14<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_13;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_234<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det2_34_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_34_24<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_23;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4x4<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>5x5<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0123<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_123<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_234_023<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_234_013<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_234_012;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0124<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_124<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_234_024<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_234_014<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_234_012;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0134<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_134<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_234_034<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_234_014<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_234_013;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0234<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_234<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_234_034<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_234_024<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_234_023;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_1234<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_234_234<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_234_134<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_234_124<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_234_123;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determinant<sp/>of<sp/>5x5<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mat[0][0]<sp/>*<sp/>det4_1234_1234<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1234_0234<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1234_0134<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det4_1234_0124<sp/>+<sp/>mat[0][4]<sp/>*<sp/>det4_1234_0123;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1138"><highlight class="comment">============</highlight></codeline>
<codeline lineno="1139"><highlight class="comment">idMat5::InverseSelf</highlight></codeline>
<codeline lineno="1140"><highlight class="comment">============</highlight></codeline>
<codeline lineno="1141"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMat5::InverseSelf(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>280+5+25<sp/>=<sp/>310<sp/>multiplications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>division</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>det,<sp/>invDet;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2x2<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>5x5<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_01<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[4][1]<sp/>-<sp/>mat[3][1]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_02<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[4][2]<sp/>-<sp/>mat[3][2]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_03<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[4][3]<sp/>-<sp/>mat[3][3]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_04<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_12<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[4][2]<sp/>-<sp/>mat[3][2]<sp/>*<sp/>mat[4][1];</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_13<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[4][3]<sp/>-<sp/>mat[3][3]<sp/>*<sp/>mat[4][1];</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_14<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[4][1];</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_23<sp/>=<sp/>mat[3][2]<sp/>*<sp/>mat[4][3]<sp/>-<sp/>mat[3][3]<sp/>*<sp/>mat[4][2];</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_24<sp/>=<sp/>mat[3][2]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[4][2];</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_34<sp/>=<sp/>mat[3][3]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[4][3];</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3x3<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>5x5<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_012<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_12<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_34_02<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det2_34_01;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_013<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_13<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_34_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_34_01;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_014<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_14<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_34_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_01;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_023<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_34_02;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_024<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_24<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_02;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_034<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_34_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_03;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_123<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_34_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_13<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_34_12;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_124<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_34_24<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_14<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_12;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_134<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_34_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_34_14<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_13;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_234<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det2_34_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_34_24<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_23;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4x4<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>5x5<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0123<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_123<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_234_023<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_234_013<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_234_012;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0124<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_124<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_234_024<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_234_014<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_234_012;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0134<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_134<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_234_034<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_234_014<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_234_013;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0234<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_234<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_234_034<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_234_024<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_234_023;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_1234<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_234_234<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_234_134<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_234_124<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_234_123;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determinant<sp/>of<sp/>5x5<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1234_1234<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1234_0234<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1234_0134<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det4_1234_0124<sp/>+<sp/>mat[0][4]<sp/>*<sp/>det4_1234_0123;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>idMath::Fabs(<sp/>det<sp/>)<sp/>&lt;<sp/>MATRIX_INVERSE_EPSILON<sp/>)<sp/>{<sp/><sp/></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>invDet<sp/>=<sp/>1.0f<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remaining<sp/>2x2<sp/>sub-determinants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_23_01<sp/>=<sp/>mat[2][0]<sp/>*<sp/>mat[3][1]<sp/>-<sp/>mat[2][1]<sp/>*<sp/>mat[3][0];</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_23_02<sp/>=<sp/>mat[2][0]<sp/>*<sp/>mat[3][2]<sp/>-<sp/>mat[2][2]<sp/>*<sp/>mat[3][0];</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_23_03<sp/>=<sp/>mat[2][0]<sp/>*<sp/>mat[3][3]<sp/>-<sp/>mat[2][3]<sp/>*<sp/>mat[3][0];</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_23_04<sp/>=<sp/>mat[2][0]<sp/>*<sp/>mat[3][4]<sp/>-<sp/>mat[2][4]<sp/>*<sp/>mat[3][0];</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_23_12<sp/>=<sp/>mat[2][1]<sp/>*<sp/>mat[3][2]<sp/>-<sp/>mat[2][2]<sp/>*<sp/>mat[3][1];</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_23_13<sp/>=<sp/>mat[2][1]<sp/>*<sp/>mat[3][3]<sp/>-<sp/>mat[2][3]<sp/>*<sp/>mat[3][1];</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_23_14<sp/>=<sp/>mat[2][1]<sp/>*<sp/>mat[3][4]<sp/>-<sp/>mat[2][4]<sp/>*<sp/>mat[3][1];</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_23_23<sp/>=<sp/>mat[2][2]<sp/>*<sp/>mat[3][3]<sp/>-<sp/>mat[2][3]<sp/>*<sp/>mat[3][2];</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_23_24<sp/>=<sp/>mat[2][2]<sp/>*<sp/>mat[3][4]<sp/>-<sp/>mat[2][4]<sp/>*<sp/>mat[3][2];</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_23_34<sp/>=<sp/>mat[2][3]<sp/>*<sp/>mat[3][4]<sp/>-<sp/>mat[2][4]<sp/>*<sp/>mat[3][3];</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_24_01<sp/>=<sp/>mat[2][0]<sp/>*<sp/>mat[4][1]<sp/>-<sp/>mat[2][1]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_24_02<sp/>=<sp/>mat[2][0]<sp/>*<sp/>mat[4][2]<sp/>-<sp/>mat[2][2]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_24_03<sp/>=<sp/>mat[2][0]<sp/>*<sp/>mat[4][3]<sp/>-<sp/>mat[2][3]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_24_04<sp/>=<sp/>mat[2][0]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[2][4]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_24_12<sp/>=<sp/>mat[2][1]<sp/>*<sp/>mat[4][2]<sp/>-<sp/>mat[2][2]<sp/>*<sp/>mat[4][1];</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_24_13<sp/>=<sp/>mat[2][1]<sp/>*<sp/>mat[4][3]<sp/>-<sp/>mat[2][3]<sp/>*<sp/>mat[4][1];</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_24_14<sp/>=<sp/>mat[2][1]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[2][4]<sp/>*<sp/>mat[4][1];</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_24_23<sp/>=<sp/>mat[2][2]<sp/>*<sp/>mat[4][3]<sp/>-<sp/>mat[2][3]<sp/>*<sp/>mat[4][2];</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_24_24<sp/>=<sp/>mat[2][2]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[2][4]<sp/>*<sp/>mat[4][2];</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_24_34<sp/>=<sp/>mat[2][3]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[2][4]<sp/>*<sp/>mat[4][3];</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remaining<sp/>3x3<sp/>sub-determinants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_123_012<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_23_12<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det2_23_02<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det2_23_01;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_123_013<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_23_13<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det2_23_03<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det2_23_01;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_123_014<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_23_14<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det2_23_04<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_23_01;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_123_023<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_23_23<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_23_03<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det2_23_02;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_123_024<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_23_24<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_23_04<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_23_02;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_123_034<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_23_34<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det2_23_04<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_23_03;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_123_123<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det2_23_23<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_23_13<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det2_23_12;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_123_124<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det2_23_24<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_23_14<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_23_12;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_123_134<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det2_23_34<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det2_23_14<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_23_13;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_123_234<sp/>=<sp/>mat[1][2]<sp/>*<sp/>det2_23_34<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det2_23_24<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_23_23;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_124_012<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_24_12<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det2_24_02<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det2_24_01;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_124_013<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_24_13<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det2_24_03<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det2_24_01;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_124_014<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_24_14<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det2_24_04<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_24_01;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_124_023<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_24_23<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_24_03<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det2_24_02;</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_124_024<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_24_24<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_24_04<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_24_02;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_124_034<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_24_34<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det2_24_04<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_24_03;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_124_123<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det2_24_23<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_24_13<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det2_24_12;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_124_124<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det2_24_24<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_24_14<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_24_12;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_124_134<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det2_24_34<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det2_24_14<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_24_13;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_124_234<sp/>=<sp/>mat[1][2]<sp/>*<sp/>det2_24_34<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det2_24_24<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_24_23;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_134_012<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_34_12<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det2_34_02<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det2_34_01;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_134_013<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_34_13<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det2_34_03<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det2_34_01;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_134_014<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_34_14<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det2_34_04<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_34_01;</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_134_023<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_34_23<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_34_03<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det2_34_02;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_134_024<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_34_24<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_34_04<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_34_02;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_134_034<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_34_34<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det2_34_04<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_34_03;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_134_123<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det2_34_23<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_34_13<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det2_34_12;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_134_124<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det2_34_24<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_34_14<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_34_12;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_134_134<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det2_34_34<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det2_34_14<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_34_13;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_134_234<sp/>=<sp/>mat[1][2]<sp/>*<sp/>det2_34_34<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det2_34_24<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_34_23;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remaining<sp/>4x4<sp/>sub-determinants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0123_0123<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_123_123<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_123_023<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det3_123_013<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det3_123_012;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0123_0124<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_123_124<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_123_024<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det3_123_014<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_123_012;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0123_0134<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_123_134<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_123_034<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_123_014<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_123_013;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0123_0234<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_123_234<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det3_123_034<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_123_024<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_123_023;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0123_1234<sp/>=<sp/>mat[0][1]<sp/>*<sp/>det3_123_234<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det3_123_134<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_123_124<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_123_123;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0124_0123<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_124_123<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_124_023<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det3_124_013<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det3_124_012;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0124_0124<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_124_124<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_124_024<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det3_124_014<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_124_012;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0124_0134<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_124_134<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_124_034<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_124_014<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_124_013;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0124_0234<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_124_234<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det3_124_034<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_124_024<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_124_023;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0124_1234<sp/>=<sp/>mat[0][1]<sp/>*<sp/>det3_124_234<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det3_124_134<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_124_124<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_124_123;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0134_0123<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_134_123<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_134_023<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det3_134_013<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det3_134_012;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0134_0124<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_134_124<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_134_024<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det3_134_014<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_134_012;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0134_0134<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_134_134<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_134_034<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_134_014<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_134_013;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0134_0234<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_134_234<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det3_134_034<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_134_024<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_134_023;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0134_1234<sp/>=<sp/>mat[0][1]<sp/>*<sp/>det3_134_234<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det3_134_134<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_134_124<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_134_123;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0234_0123<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_234_123<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_234_023<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det3_234_013<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det3_234_012;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0234_0124<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_234_124<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_234_024<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det3_234_014<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_234_012;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0234_0134<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_234_134<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_234_034<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_234_014<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_234_013;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0234_0234<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_234_234<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det3_234_034<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_234_024<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_234_023;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0234_1234<sp/>=<sp/>mat[0][1]<sp/>*<sp/>det3_234_234<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det3_234_134<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_234_124<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_234_123;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][0]<sp/>=<sp/><sp/>det4_1234_1234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][1]<sp/>=<sp/>-det4_0234_1234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][2]<sp/>=<sp/><sp/>det4_0134_1234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][3]<sp/>=<sp/>-det4_0124_1234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][4]<sp/>=<sp/><sp/>det4_0123_1234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][0]<sp/>=<sp/>-det4_1234_0234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][1]<sp/>=<sp/><sp/>det4_0234_0234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][2]<sp/>=<sp/>-det4_0134_0234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][3]<sp/>=<sp/><sp/>det4_0124_0234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][4]<sp/>=<sp/>-det4_0123_0234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][0]<sp/>=<sp/><sp/>det4_1234_0134<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][1]<sp/>=<sp/>-det4_0234_0134<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][2]<sp/>=<sp/><sp/>det4_0134_0134<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][3]<sp/>=<sp/>-det4_0124_0134<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][4]<sp/>=<sp/><sp/>det4_0123_0134<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][0]<sp/>=<sp/>-det4_1234_0124<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][1]<sp/>=<sp/><sp/>det4_0234_0124<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][2]<sp/>=<sp/>-det4_0134_0124<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][3]<sp/>=<sp/><sp/>det4_0124_0124<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][4]<sp/>=<sp/>-det4_0123_0124<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4][0]<sp/>=<sp/><sp/>det4_1234_0123<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4][1]<sp/>=<sp/>-det4_0234_0123<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4][2]<sp/>=<sp/><sp/>det4_0134_0123<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4][3]<sp/>=<sp/>-det4_0124_0123<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4][4]<sp/>=<sp/><sp/>det4_0123_0123<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1297"><highlight class="comment">============</highlight></codeline>
<codeline lineno="1298"><highlight class="comment">idMat5::InverseFastSelf</highlight></codeline>
<codeline lineno="1299"><highlight class="comment">============</highlight></codeline>
<codeline lineno="1300"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMat5::InverseFastSelf(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="1303"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>280+5+25<sp/>=<sp/>310<sp/>multiplications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>division</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>det,<sp/>invDet;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2x2<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>5x5<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_01<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[4][1]<sp/>-<sp/>mat[3][1]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_02<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[4][2]<sp/>-<sp/>mat[3][2]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_03<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[4][3]<sp/>-<sp/>mat[3][3]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_04<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_12<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[4][2]<sp/>-<sp/>mat[3][2]<sp/>*<sp/>mat[4][1];</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_13<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[4][3]<sp/>-<sp/>mat[3][3]<sp/>*<sp/>mat[4][1];</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_14<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[4][1];</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_23<sp/>=<sp/>mat[3][2]<sp/>*<sp/>mat[4][3]<sp/>-<sp/>mat[3][3]<sp/>*<sp/>mat[4][2];</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_24<sp/>=<sp/>mat[3][2]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[4][2];</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_34<sp/>=<sp/>mat[3][3]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[4][3];</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3x3<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>5x5<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_012<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_12<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_34_02<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det2_34_01;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_013<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_13<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_34_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_34_01;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_014<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_14<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_34_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_01;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_023<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_34_02;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_024<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_24<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_02;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_034<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_34_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_03;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_123<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_34_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_13<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_34_12;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_124<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_34_24<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_14<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_12;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_134<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_34_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_34_14<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_13;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_234<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det2_34_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_34_24<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_23;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4x4<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>5x5<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0123<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_123<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_234_023<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_234_013<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_234_012;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0124<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_124<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_234_024<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_234_014<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_234_012;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0134<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_134<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_234_034<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_234_014<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_234_013;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0234<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_234<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_234_034<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_234_024<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_234_023;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_1234<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_234_234<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_234_134<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_234_124<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_234_123;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determinant<sp/>of<sp/>5x5<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1234_1234<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1234_0234<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1234_0134<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det4_1234_0124<sp/>+<sp/>mat[0][4]<sp/>*<sp/>det4_1234_0123;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>idMath::Fabs(<sp/>det<sp/>)<sp/>&lt;<sp/>MATRIX_INVERSE_EPSILON<sp/>)<sp/>{<sp/><sp/></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/>invDet<sp/>=<sp/>1.0f<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remaining<sp/>2x2<sp/>sub-determinants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_23_01<sp/>=<sp/>mat[2][0]<sp/>*<sp/>mat[3][1]<sp/>-<sp/>mat[2][1]<sp/>*<sp/>mat[3][0];</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_23_02<sp/>=<sp/>mat[2][0]<sp/>*<sp/>mat[3][2]<sp/>-<sp/>mat[2][2]<sp/>*<sp/>mat[3][0];</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_23_03<sp/>=<sp/>mat[2][0]<sp/>*<sp/>mat[3][3]<sp/>-<sp/>mat[2][3]<sp/>*<sp/>mat[3][0];</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_23_04<sp/>=<sp/>mat[2][0]<sp/>*<sp/>mat[3][4]<sp/>-<sp/>mat[2][4]<sp/>*<sp/>mat[3][0];</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_23_12<sp/>=<sp/>mat[2][1]<sp/>*<sp/>mat[3][2]<sp/>-<sp/>mat[2][2]<sp/>*<sp/>mat[3][1];</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_23_13<sp/>=<sp/>mat[2][1]<sp/>*<sp/>mat[3][3]<sp/>-<sp/>mat[2][3]<sp/>*<sp/>mat[3][1];</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_23_14<sp/>=<sp/>mat[2][1]<sp/>*<sp/>mat[3][4]<sp/>-<sp/>mat[2][4]<sp/>*<sp/>mat[3][1];</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_23_23<sp/>=<sp/>mat[2][2]<sp/>*<sp/>mat[3][3]<sp/>-<sp/>mat[2][3]<sp/>*<sp/>mat[3][2];</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_23_24<sp/>=<sp/>mat[2][2]<sp/>*<sp/>mat[3][4]<sp/>-<sp/>mat[2][4]<sp/>*<sp/>mat[3][2];</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_23_34<sp/>=<sp/>mat[2][3]<sp/>*<sp/>mat[3][4]<sp/>-<sp/>mat[2][4]<sp/>*<sp/>mat[3][3];</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_24_01<sp/>=<sp/>mat[2][0]<sp/>*<sp/>mat[4][1]<sp/>-<sp/>mat[2][1]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_24_02<sp/>=<sp/>mat[2][0]<sp/>*<sp/>mat[4][2]<sp/>-<sp/>mat[2][2]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_24_03<sp/>=<sp/>mat[2][0]<sp/>*<sp/>mat[4][3]<sp/>-<sp/>mat[2][3]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_24_04<sp/>=<sp/>mat[2][0]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[2][4]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_24_12<sp/>=<sp/>mat[2][1]<sp/>*<sp/>mat[4][2]<sp/>-<sp/>mat[2][2]<sp/>*<sp/>mat[4][1];</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_24_13<sp/>=<sp/>mat[2][1]<sp/>*<sp/>mat[4][3]<sp/>-<sp/>mat[2][3]<sp/>*<sp/>mat[4][1];</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_24_14<sp/>=<sp/>mat[2][1]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[2][4]<sp/>*<sp/>mat[4][1];</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_24_23<sp/>=<sp/>mat[2][2]<sp/>*<sp/>mat[4][3]<sp/>-<sp/>mat[2][3]<sp/>*<sp/>mat[4][2];</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_24_24<sp/>=<sp/>mat[2][2]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[2][4]<sp/>*<sp/>mat[4][2];</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_24_34<sp/>=<sp/>mat[2][3]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[2][4]<sp/>*<sp/>mat[4][3];</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remaining<sp/>3x3<sp/>sub-determinants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_123_012<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_23_12<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det2_23_02<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det2_23_01;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_123_013<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_23_13<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det2_23_03<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det2_23_01;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_123_014<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_23_14<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det2_23_04<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_23_01;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_123_023<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_23_23<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_23_03<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det2_23_02;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_123_024<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_23_24<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_23_04<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_23_02;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_123_034<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_23_34<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det2_23_04<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_23_03;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_123_123<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det2_23_23<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_23_13<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det2_23_12;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_123_124<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det2_23_24<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_23_14<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_23_12;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_123_134<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det2_23_34<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det2_23_14<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_23_13;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_123_234<sp/>=<sp/>mat[1][2]<sp/>*<sp/>det2_23_34<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det2_23_24<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_23_23;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_124_012<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_24_12<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det2_24_02<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det2_24_01;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_124_013<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_24_13<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det2_24_03<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det2_24_01;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_124_014<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_24_14<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det2_24_04<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_24_01;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_124_023<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_24_23<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_24_03<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det2_24_02;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_124_024<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_24_24<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_24_04<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_24_02;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_124_034<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_24_34<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det2_24_04<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_24_03;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_124_123<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det2_24_23<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_24_13<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det2_24_12;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_124_124<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det2_24_24<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_24_14<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_24_12;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_124_134<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det2_24_34<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det2_24_14<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_24_13;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_124_234<sp/>=<sp/>mat[1][2]<sp/>*<sp/>det2_24_34<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det2_24_24<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_24_23;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_134_012<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_34_12<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det2_34_02<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det2_34_01;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_134_013<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_34_13<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det2_34_03<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det2_34_01;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_134_014<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_34_14<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det2_34_04<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_34_01;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_134_023<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_34_23<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_34_03<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det2_34_02;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_134_024<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_34_24<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_34_04<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_34_02;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_134_034<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det2_34_34<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det2_34_04<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_34_03;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_134_123<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det2_34_23<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_34_13<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det2_34_12;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_134_124<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det2_34_24<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det2_34_14<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_34_12;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_134_134<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det2_34_34<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det2_34_14<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_34_13;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_134_234<sp/>=<sp/>mat[1][2]<sp/>*<sp/>det2_34_34<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det2_34_24<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det2_34_23;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remaining<sp/>4x4<sp/>sub-determinants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0123_0123<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_123_123<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_123_023<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det3_123_013<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det3_123_012;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0123_0124<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_123_124<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_123_024<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det3_123_014<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_123_012;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0123_0134<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_123_134<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_123_034<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_123_014<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_123_013;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0123_0234<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_123_234<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det3_123_034<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_123_024<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_123_023;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0123_1234<sp/>=<sp/>mat[0][1]<sp/>*<sp/>det3_123_234<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det3_123_134<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_123_124<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_123_123;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0124_0123<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_124_123<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_124_023<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det3_124_013<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det3_124_012;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0124_0124<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_124_124<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_124_024<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det3_124_014<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_124_012;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0124_0134<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_124_134<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_124_034<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_124_014<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_124_013;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0124_0234<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_124_234<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det3_124_034<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_124_024<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_124_023;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0124_1234<sp/>=<sp/>mat[0][1]<sp/>*<sp/>det3_124_234<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det3_124_134<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_124_124<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_124_123;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0134_0123<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_134_123<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_134_023<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det3_134_013<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det3_134_012;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0134_0124<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_134_124<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_134_024<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det3_134_014<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_134_012;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0134_0134<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_134_134<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_134_034<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_134_014<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_134_013;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0134_0234<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_134_234<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det3_134_034<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_134_024<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_134_023;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0134_1234<sp/>=<sp/>mat[0][1]<sp/>*<sp/>det3_134_234<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det3_134_134<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_134_124<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_134_123;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0234_0123<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_234_123<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_234_023<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det3_234_013<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det3_234_012;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0234_0124<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_234_124<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_234_024<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det3_234_014<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_234_012;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0234_0134<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_234_134<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det3_234_034<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_234_014<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_234_013;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0234_0234<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det3_234_234<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det3_234_034<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_234_024<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_234_023;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_0234_1234<sp/>=<sp/>mat[0][1]<sp/>*<sp/>det3_234_234<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det3_234_134<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det3_234_124<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det3_234_123;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][0]<sp/>=<sp/><sp/>det4_1234_1234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][1]<sp/>=<sp/>-det4_0234_1234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][2]<sp/>=<sp/><sp/>det4_0134_1234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][3]<sp/>=<sp/>-det4_0124_1234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][4]<sp/>=<sp/><sp/>det4_0123_1234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][0]<sp/>=<sp/>-det4_1234_0234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][1]<sp/>=<sp/><sp/>det4_0234_0234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][2]<sp/>=<sp/>-det4_0134_0234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][3]<sp/>=<sp/><sp/>det4_0124_0234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][4]<sp/>=<sp/>-det4_0123_0234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][0]<sp/>=<sp/><sp/>det4_1234_0134<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][1]<sp/>=<sp/>-det4_0234_0134<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][2]<sp/>=<sp/><sp/>det4_0134_0134<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][3]<sp/>=<sp/>-det4_0124_0134<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][4]<sp/>=<sp/><sp/>det4_0123_0134<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][0]<sp/>=<sp/>-det4_1234_0124<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][1]<sp/>=<sp/><sp/>det4_0234_0124<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][2]<sp/>=<sp/>-det4_0134_0124<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][3]<sp/>=<sp/><sp/>det4_0124_0124<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][4]<sp/>=<sp/>-det4_0123_0124<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4][0]<sp/>=<sp/><sp/>det4_1234_0123<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4][1]<sp/>=<sp/>-det4_0234_0123<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4][2]<sp/>=<sp/><sp/>det4_0134_0123<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4][3]<sp/>=<sp/>-det4_0124_0123<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4][4]<sp/>=<sp/><sp/>det4_0123_0123<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>0</highlight></codeline>
<codeline lineno="1455"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>5*28<sp/>=<sp/>140<sp/>multiplications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5<sp/>divisions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*mat<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d,<sp/>di;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>di<sp/>=<sp/>mat[0];</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>di;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0]<sp/>=<sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>di;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>-d;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[10]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[15]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[20]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[5]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[6]<sp/>+=<sp/>mat[1]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[7]<sp/>+=<sp/>mat[2]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[8]<sp/>+=<sp/>mat[3]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[9]<sp/>+=<sp/>mat[4]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[10]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[11]<sp/>+=<sp/>mat[1]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[12]<sp/>+=<sp/>mat[2]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[13]<sp/>+=<sp/>mat[3]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[14]<sp/>+=<sp/>mat[4]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[15]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[16]<sp/>+=<sp/>mat[1]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[17]<sp/>+=<sp/>mat[2]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[18]<sp/>+=<sp/>mat[3]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[19]<sp/>+=<sp/>mat[4]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[20]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[21]<sp/>+=<sp/>mat[1]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[22]<sp/>+=<sp/>mat[2]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[23]<sp/>+=<sp/>mat[3]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[24]<sp/>+=<sp/>mat[4]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/>di<sp/>=<sp/>mat[6];</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>*=<sp/>di;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[6]<sp/>=<sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>di;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[7]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[8]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[9]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>-d;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[11]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[16]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[21]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[1]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0]<sp/>+=<sp/>mat[5]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2]<sp/>+=<sp/>mat[7]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3]<sp/>+=<sp/>mat[8]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4]<sp/>+=<sp/>mat[9]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[11]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[10]<sp/>+=<sp/>mat[5]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[12]<sp/>+=<sp/>mat[7]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[13]<sp/>+=<sp/>mat[8]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[14]<sp/>+=<sp/>mat[9]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[16]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[15]<sp/>+=<sp/>mat[5]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[17]<sp/>+=<sp/>mat[7]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[18]<sp/>+=<sp/>mat[8]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[19]<sp/>+=<sp/>mat[9]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[21]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[20]<sp/>+=<sp/>mat[5]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[22]<sp/>+=<sp/>mat[7]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[23]<sp/>+=<sp/>mat[8]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[24]<sp/>+=<sp/>mat[9]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>di<sp/>=<sp/>mat[12];</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>*=<sp/>di;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[12]<sp/>=<sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>di;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[10]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[11]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[13]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[14]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>-d;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[7]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[17]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[22]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[2]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0]<sp/>+=<sp/>mat[10]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1]<sp/>+=<sp/>mat[11]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3]<sp/>+=<sp/>mat[13]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4]<sp/>+=<sp/>mat[14]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[7]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5]<sp/>+=<sp/>mat[10]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[6]<sp/>+=<sp/>mat[11]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[8]<sp/>+=<sp/>mat[13]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[9]<sp/>+=<sp/>mat[14]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[17]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[15]<sp/>+=<sp/>mat[10]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[16]<sp/>+=<sp/>mat[11]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[18]<sp/>+=<sp/>mat[13]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[19]<sp/>+=<sp/>mat[14]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[22]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[20]<sp/>+=<sp/>mat[10]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[21]<sp/>+=<sp/>mat[11]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[23]<sp/>+=<sp/>mat[13]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[24]<sp/>+=<sp/>mat[14]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/>di<sp/>=<sp/>mat[18];</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>*=<sp/>di;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[18]<sp/>=<sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>di;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[15]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[16]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[17]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[19]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>-d;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[8]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[13]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[23]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[3]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0]<sp/>+=<sp/>mat[15]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1]<sp/>+=<sp/>mat[16]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2]<sp/>+=<sp/>mat[17]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4]<sp/>+=<sp/>mat[19]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[8]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5]<sp/>+=<sp/>mat[15]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[6]<sp/>+=<sp/>mat[16]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[7]<sp/>+=<sp/>mat[17]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[9]<sp/>+=<sp/>mat[19]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[13]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[10]<sp/>+=<sp/>mat[15]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[11]<sp/>+=<sp/>mat[16]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[12]<sp/>+=<sp/>mat[17]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[14]<sp/>+=<sp/>mat[19]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[23]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[20]<sp/>+=<sp/>mat[15]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[21]<sp/>+=<sp/>mat[16]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[22]<sp/>+=<sp/>mat[17]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[24]<sp/>+=<sp/>mat[19]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/>di<sp/>=<sp/>mat[24];</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>*=<sp/>di;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[24]<sp/>=<sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>di;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[20]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[21]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[22]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[23]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>-d;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[9]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[14]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[19]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[4]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0]<sp/>+=<sp/>mat[20]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1]<sp/>+=<sp/>mat[21]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2]<sp/>+=<sp/>mat[22]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3]<sp/>+=<sp/>mat[23]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[9]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5]<sp/>+=<sp/>mat[20]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[6]<sp/>+=<sp/>mat[21]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[7]<sp/>+=<sp/>mat[22]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[8]<sp/>+=<sp/>mat[23]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[14]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[10]<sp/>+=<sp/>mat[20]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[11]<sp/>+=<sp/>mat[21]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[12]<sp/>+=<sp/>mat[22]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[13]<sp/>+=<sp/>mat[23]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[19]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[15]<sp/>+=<sp/>mat[20]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[16]<sp/>+=<sp/>mat[21]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[17]<sp/>+=<sp/>mat[22]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[18]<sp/>+=<sp/>mat[23]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>s<sp/>!=<sp/>0.0f<sp/>&amp;&amp;<sp/>!FLOAT_IS_NAN(<sp/>s<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1624"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>86+30+6<sp/>=<sp/>122<sp/>multiplications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>2*1<sp/><sp/>=<sp/><sp/><sp/>2<sp/>divisions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>r0,<sp/>r1,<sp/>r2,<sp/>r3;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>c0,<sp/>c1,<sp/>c2,<sp/>det,<sp/>invDet;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*mat<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r0<sp/>=<sp/>m0.Inverse();<sp/><sp/><sp/>//<sp/>3x3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/>c0<sp/>=<sp/>mat[1*5+1]<sp/>*<sp/>mat[2*5+2]<sp/>-<sp/>mat[1*5+2]<sp/>*<sp/>mat[2*5+1];</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>mat[1*5+2]<sp/>*<sp/>mat[2*5+0]<sp/>-<sp/>mat[1*5+0]<sp/>*<sp/>mat[2*5+2];</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/>c2<sp/>=<sp/>mat[1*5+0]<sp/>*<sp/>mat[2*5+1]<sp/>-<sp/>mat[1*5+1]<sp/>*<sp/>mat[2*5+0];</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>mat[0*5+0]<sp/>*<sp/>c0<sp/>+<sp/>mat[0*5+1]<sp/>*<sp/>c1<sp/>+<sp/>mat[0*5+2]<sp/>*<sp/>c2;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>det<sp/>)<sp/>&lt;<sp/>MATRIX_INVERSE_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/>invDet<sp/>=<sp/>1.0f<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[0][0]<sp/>=<sp/>c0<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[0][1]<sp/>=<sp/>(<sp/>mat[0*5+2]<sp/>*<sp/>mat[2*5+1]<sp/>-<sp/>mat[0*5+1]<sp/>*<sp/>mat[2*5+2]<sp/>)<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[0][2]<sp/>=<sp/>(<sp/>mat[0*5+1]<sp/>*<sp/>mat[1*5+2]<sp/>-<sp/>mat[0*5+2]<sp/>*<sp/>mat[1*5+1]<sp/>)<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[1][0]<sp/>=<sp/>c1<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[1][1]<sp/>=<sp/>(<sp/>mat[0*5+0]<sp/>*<sp/>mat[2*5+2]<sp/>-<sp/>mat[0*5+2]<sp/>*<sp/>mat[2*5+0]<sp/>)<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[1][2]<sp/>=<sp/>(<sp/>mat[0*5+2]<sp/>*<sp/>mat[1*5+0]<sp/>-<sp/>mat[0*5+0]<sp/>*<sp/>mat[1*5+2]<sp/>)<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[2][0]<sp/>=<sp/>c2<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[2][1]<sp/>=<sp/>(<sp/>mat[0*5+1]<sp/>*<sp/>mat[2*5+0]<sp/>-<sp/>mat[0*5+0]<sp/>*<sp/>mat[2*5+1]<sp/>)<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[2][2]<sp/>=<sp/>(<sp/>mat[0*5+0]<sp/>*<sp/>mat[1*5+1]<sp/>-<sp/>mat[0*5+1]<sp/>*<sp/>mat[1*5+0]<sp/>)<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r1<sp/>=<sp/>r0<sp/>*<sp/>m1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>3x2<sp/>=<sp/>3x3<sp/>*<sp/>3x2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>r1[0][0]<sp/>=<sp/>r0[0][0]<sp/>*<sp/>mat[0*5+3]<sp/>+<sp/>r0[0][1]<sp/>*<sp/>mat[1*5+3]<sp/>+<sp/>r0[0][2]<sp/>*<sp/>mat[2*5+3];</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/>r1[0][1]<sp/>=<sp/>r0[0][0]<sp/>*<sp/>mat[0*5+4]<sp/>+<sp/>r0[0][1]<sp/>*<sp/>mat[1*5+4]<sp/>+<sp/>r0[0][2]<sp/>*<sp/>mat[2*5+4];</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>r1[1][0]<sp/>=<sp/>r0[1][0]<sp/>*<sp/>mat[0*5+3]<sp/>+<sp/>r0[1][1]<sp/>*<sp/>mat[1*5+3]<sp/>+<sp/>r0[1][2]<sp/>*<sp/>mat[2*5+3];</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/>r1[1][1]<sp/>=<sp/>r0[1][0]<sp/>*<sp/>mat[0*5+4]<sp/>+<sp/>r0[1][1]<sp/>*<sp/>mat[1*5+4]<sp/>+<sp/>r0[1][2]<sp/>*<sp/>mat[2*5+4];</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>r1[2][0]<sp/>=<sp/>r0[2][0]<sp/>*<sp/>mat[0*5+3]<sp/>+<sp/>r0[2][1]<sp/>*<sp/>mat[1*5+3]<sp/>+<sp/>r0[2][2]<sp/>*<sp/>mat[2*5+3];</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/>r1[2][1]<sp/>=<sp/>r0[2][0]<sp/>*<sp/>mat[0*5+4]<sp/>+<sp/>r0[2][1]<sp/>*<sp/>mat[1*5+4]<sp/>+<sp/>r0[2][2]<sp/>*<sp/>mat[2*5+4];</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r2<sp/>=<sp/>m2<sp/>*<sp/>r1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>2x2<sp/>=<sp/>2x3<sp/>*<sp/>3x2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[0][0]<sp/>=<sp/>mat[3*5+0]<sp/>*<sp/>r1[0][0]<sp/>+<sp/>mat[3*5+1]<sp/>*<sp/>r1[1][0]<sp/>+<sp/>mat[3*5+2]<sp/>*<sp/>r1[2][0];</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[0][1]<sp/>=<sp/>mat[3*5+0]<sp/>*<sp/>r1[0][1]<sp/>+<sp/>mat[3*5+1]<sp/>*<sp/>r1[1][1]<sp/>+<sp/>mat[3*5+2]<sp/>*<sp/>r1[2][1];</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[1][0]<sp/>=<sp/>mat[4*5+0]<sp/>*<sp/>r1[0][0]<sp/>+<sp/>mat[4*5+1]<sp/>*<sp/>r1[1][0]<sp/>+<sp/>mat[4*5+2]<sp/>*<sp/>r1[2][0];</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[1][1]<sp/>=<sp/>mat[4*5+0]<sp/>*<sp/>r1[0][1]<sp/>+<sp/>mat[4*5+1]<sp/>*<sp/>r1[1][1]<sp/>+<sp/>mat[4*5+2]<sp/>*<sp/>r1[2][1];</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r3<sp/>=<sp/>r2<sp/>-<sp/>m3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>2x2<sp/>=<sp/>2x2<sp/>-<sp/>2x2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[0][0]<sp/>=<sp/>r2[0][0]<sp/>-<sp/>mat[3*5+3];</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[0][1]<sp/>=<sp/>r2[0][1]<sp/>-<sp/>mat[3*5+4];</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[1][0]<sp/>=<sp/>r2[1][0]<sp/>-<sp/>mat[4*5+3];</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[1][1]<sp/>=<sp/>r2[1][1]<sp/>-<sp/>mat[4*5+4];</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r3.InverseSelf();<sp/><sp/><sp/><sp/>//<sp/>2x2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>r3[0][0]<sp/>*<sp/>r3[1][1]<sp/>-<sp/>r3[0][1]<sp/>*<sp/>r3[1][0];</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>det<sp/>)<sp/>&lt;<sp/>MATRIX_INVERSE_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/>invDet<sp/>=<sp/>1.0f<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/>c0<sp/>=<sp/>r3[0][0];</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[0][0]<sp/>=<sp/><sp/><sp/>r3[1][1]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[0][1]<sp/>=<sp/>-<sp/>r3[0][1]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[1][0]<sp/>=<sp/>-<sp/>r3[1][0]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[1][1]<sp/>=<sp/><sp/><sp/>c0<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r2<sp/>=<sp/>m2<sp/>*<sp/>r0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>2x3<sp/>=<sp/>2x3<sp/>*<sp/>3x3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[0][0]<sp/>=<sp/>mat[3*5+0]<sp/>*<sp/>r0[0][0]<sp/>+<sp/>mat[3*5+1]<sp/>*<sp/>r0[1][0]<sp/>+<sp/>mat[3*5+2]<sp/>*<sp/>r0[2][0];</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[0][1]<sp/>=<sp/>mat[3*5+0]<sp/>*<sp/>r0[0][1]<sp/>+<sp/>mat[3*5+1]<sp/>*<sp/>r0[1][1]<sp/>+<sp/>mat[3*5+2]<sp/>*<sp/>r0[2][1];</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[0][2]<sp/>=<sp/>mat[3*5+0]<sp/>*<sp/>r0[0][2]<sp/>+<sp/>mat[3*5+1]<sp/>*<sp/>r0[1][2]<sp/>+<sp/>mat[3*5+2]<sp/>*<sp/>r0[2][2];</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[1][0]<sp/>=<sp/>mat[4*5+0]<sp/>*<sp/>r0[0][0]<sp/>+<sp/>mat[4*5+1]<sp/>*<sp/>r0[1][0]<sp/>+<sp/>mat[4*5+2]<sp/>*<sp/>r0[2][0];</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[1][1]<sp/>=<sp/>mat[4*5+0]<sp/>*<sp/>r0[0][1]<sp/>+<sp/>mat[4*5+1]<sp/>*<sp/>r0[1][1]<sp/>+<sp/>mat[4*5+2]<sp/>*<sp/>r0[2][1];</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[1][2]<sp/>=<sp/>mat[4*5+0]<sp/>*<sp/>r0[0][2]<sp/>+<sp/>mat[4*5+1]<sp/>*<sp/>r0[1][2]<sp/>+<sp/>mat[4*5+2]<sp/>*<sp/>r0[2][2];</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m2<sp/>=<sp/>r3<sp/>*<sp/>r2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>2x3<sp/>=<sp/>2x2<sp/>*<sp/>2x3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3*5+0]<sp/>=<sp/>r3[0][0]<sp/>*<sp/>r2[0][0]<sp/>+<sp/>r3[0][1]<sp/>*<sp/>r2[1][0];</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3*5+1]<sp/>=<sp/>r3[0][0]<sp/>*<sp/>r2[0][1]<sp/>+<sp/>r3[0][1]<sp/>*<sp/>r2[1][1];</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3*5+2]<sp/>=<sp/>r3[0][0]<sp/>*<sp/>r2[0][2]<sp/>+<sp/>r3[0][1]<sp/>*<sp/>r2[1][2];</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4*5+0]<sp/>=<sp/>r3[1][0]<sp/>*<sp/>r2[0][0]<sp/>+<sp/>r3[1][1]<sp/>*<sp/>r2[1][0];</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4*5+1]<sp/>=<sp/>r3[1][0]<sp/>*<sp/>r2[0][1]<sp/>+<sp/>r3[1][1]<sp/>*<sp/>r2[1][1];</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4*5+2]<sp/>=<sp/>r3[1][0]<sp/>*<sp/>r2[0][2]<sp/>+<sp/>r3[1][1]<sp/>*<sp/>r2[1][2];</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m0<sp/>=<sp/>r0<sp/>-<sp/>r1<sp/>*<sp/>m2;<sp/><sp/><sp/>//<sp/>3x3<sp/>=<sp/>3x3<sp/>-<sp/>3x2<sp/>*<sp/>2x3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0*5+0]<sp/>=<sp/>r0[0][0]<sp/>-<sp/>r1[0][0]<sp/>*<sp/>mat[3*5+0]<sp/>-<sp/>r1[0][1]<sp/>*<sp/>mat[4*5+0];</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0*5+1]<sp/>=<sp/>r0[0][1]<sp/>-<sp/>r1[0][0]<sp/>*<sp/>mat[3*5+1]<sp/>-<sp/>r1[0][1]<sp/>*<sp/>mat[4*5+1];</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0*5+2]<sp/>=<sp/>r0[0][2]<sp/>-<sp/>r1[0][0]<sp/>*<sp/>mat[3*5+2]<sp/>-<sp/>r1[0][1]<sp/>*<sp/>mat[4*5+2];</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1*5+0]<sp/>=<sp/>r0[1][0]<sp/>-<sp/>r1[1][0]<sp/>*<sp/>mat[3*5+0]<sp/>-<sp/>r1[1][1]<sp/>*<sp/>mat[4*5+0];</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1*5+1]<sp/>=<sp/>r0[1][1]<sp/>-<sp/>r1[1][0]<sp/>*<sp/>mat[3*5+1]<sp/>-<sp/>r1[1][1]<sp/>*<sp/>mat[4*5+1];</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1*5+2]<sp/>=<sp/>r0[1][2]<sp/>-<sp/>r1[1][0]<sp/>*<sp/>mat[3*5+2]<sp/>-<sp/>r1[1][1]<sp/>*<sp/>mat[4*5+2];</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2*5+0]<sp/>=<sp/>r0[2][0]<sp/>-<sp/>r1[2][0]<sp/>*<sp/>mat[3*5+0]<sp/>-<sp/>r1[2][1]<sp/>*<sp/>mat[4*5+0];</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2*5+1]<sp/>=<sp/>r0[2][1]<sp/>-<sp/>r1[2][0]<sp/>*<sp/>mat[3*5+1]<sp/>-<sp/>r1[2][1]<sp/>*<sp/>mat[4*5+1];</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2*5+2]<sp/>=<sp/>r0[2][2]<sp/>-<sp/>r1[2][0]<sp/>*<sp/>mat[3*5+2]<sp/>-<sp/>r1[2][1]<sp/>*<sp/>mat[4*5+2];</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m1<sp/>=<sp/>r1<sp/>*<sp/>r3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>3x2<sp/>=<sp/>3x2<sp/>*<sp/>2x2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0*5+3]<sp/>=<sp/>r1[0][0]<sp/>*<sp/>r3[0][0]<sp/>+<sp/>r1[0][1]<sp/>*<sp/>r3[1][0];</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0*5+4]<sp/>=<sp/>r1[0][0]<sp/>*<sp/>r3[0][1]<sp/>+<sp/>r1[0][1]<sp/>*<sp/>r3[1][1];</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1*5+3]<sp/>=<sp/>r1[1][0]<sp/>*<sp/>r3[0][0]<sp/>+<sp/>r1[1][1]<sp/>*<sp/>r3[1][0];</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1*5+4]<sp/>=<sp/>r1[1][0]<sp/>*<sp/>r3[0][1]<sp/>+<sp/>r1[1][1]<sp/>*<sp/>r3[1][1];</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2*5+3]<sp/>=<sp/>r1[2][0]<sp/>*<sp/>r3[0][0]<sp/>+<sp/>r1[2][1]<sp/>*<sp/>r3[1][0];</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2*5+4]<sp/>=<sp/>r1[2][0]<sp/>*<sp/>r3[0][1]<sp/>+<sp/>r1[2][1]<sp/>*<sp/>r3[1][1];</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m3<sp/>=<sp/>-r3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>2x2<sp/>=<sp/>-<sp/>2x2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3*5+3]<sp/>=<sp/>-r3[0][0];</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3*5+4]<sp/>=<sp/>-r3[0][1];</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4*5+3]<sp/>=<sp/>-r3[1][0];</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4*5+4]<sp/>=<sp/>-r3[1][1];</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1731"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1734"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="1735"><highlight class="comment">idMat5::ToString</highlight></codeline>
<codeline lineno="1736"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="1737"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*idMat5::ToString(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idStr::FloatArrayToString(<sp/>ToFloatPtr(),<sp/>GetDimension(),<sp/>precision<sp/>);</highlight></codeline>
<codeline lineno="1740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idMat6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><ref refid="classid_mat6" kindref="compound">idMat6</ref><sp/>mat6_zero(<sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref>(<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref>(<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref>(<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref>(<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref>(<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref>(<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><ref refid="classid_mat6" kindref="compound">idMat6</ref><sp/>mat6_identity(<sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref>(<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref>(<sp/>0,<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref>(<sp/>0,<sp/>0,<sp/>1,<sp/>0,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref>(<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref>(<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>0<sp/>),<sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref>(<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1753"><highlight class="comment">============</highlight></codeline>
<codeline lineno="1754"><highlight class="comment">idMat6::Transpose</highlight></codeline>
<codeline lineno="1755"><highlight class="comment">============</highlight></codeline>
<codeline lineno="1756"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><ref refid="classid_mat6" kindref="compound">idMat6</ref><sp/>idMat6::Transpose(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat6" kindref="compound">idMat6</ref><sp/><sp/>transpose;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>6;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transpose[<sp/>i<sp/>][<sp/>j<sp/>]<sp/>=<sp/>mat[<sp/>j<sp/>][<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transpose;</highlight></codeline>
<codeline lineno="1767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1770"><highlight class="comment">============</highlight></codeline>
<codeline lineno="1771"><highlight class="comment">idMat6::TransposeSelf</highlight></codeline>
<codeline lineno="1772"><highlight class="comment">============</highlight></codeline>
<codeline lineno="1773"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><ref refid="classid_mat6" kindref="compound">idMat6</ref><sp/>&amp;idMat6::TransposeSelf(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>temp;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>6;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>mat[<sp/>i<sp/>][<sp/>j<sp/>];</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[<sp/>i<sp/>][<sp/>j<sp/>]<sp/>=<sp/>mat[<sp/>j<sp/>][<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[<sp/>j<sp/>][<sp/>i<sp/>]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1789"><highlight class="comment">============</highlight></codeline>
<codeline lineno="1790"><highlight class="comment">idMat6::Determinant</highlight></codeline>
<codeline lineno="1791"><highlight class="comment">============</highlight></codeline>
<codeline lineno="1792"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>idMat6::Determinant(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2x2<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>6x6<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_01<sp/>=<sp/>mat[4][0]<sp/>*<sp/>mat[5][1]<sp/>-<sp/>mat[4][1]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_02<sp/>=<sp/>mat[4][0]<sp/>*<sp/>mat[5][2]<sp/>-<sp/>mat[4][2]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_03<sp/>=<sp/>mat[4][0]<sp/>*<sp/>mat[5][3]<sp/>-<sp/>mat[4][3]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_04<sp/>=<sp/>mat[4][0]<sp/>*<sp/>mat[5][4]<sp/>-<sp/>mat[4][4]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_05<sp/>=<sp/>mat[4][0]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[4][5]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_12<sp/>=<sp/>mat[4][1]<sp/>*<sp/>mat[5][2]<sp/>-<sp/>mat[4][2]<sp/>*<sp/>mat[5][1];</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_13<sp/>=<sp/>mat[4][1]<sp/>*<sp/>mat[5][3]<sp/>-<sp/>mat[4][3]<sp/>*<sp/>mat[5][1];</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_14<sp/>=<sp/>mat[4][1]<sp/>*<sp/>mat[5][4]<sp/>-<sp/>mat[4][4]<sp/>*<sp/>mat[5][1];</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_15<sp/>=<sp/>mat[4][1]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[4][5]<sp/>*<sp/>mat[5][1];</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_23<sp/>=<sp/>mat[4][2]<sp/>*<sp/>mat[5][3]<sp/>-<sp/>mat[4][3]<sp/>*<sp/>mat[5][2];</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_24<sp/>=<sp/>mat[4][2]<sp/>*<sp/>mat[5][4]<sp/>-<sp/>mat[4][4]<sp/>*<sp/>mat[5][2];</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_25<sp/>=<sp/>mat[4][2]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[4][5]<sp/>*<sp/>mat[5][2];</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_34<sp/>=<sp/>mat[4][3]<sp/>*<sp/>mat[5][4]<sp/>-<sp/>mat[4][4]<sp/>*<sp/>mat[5][3];</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_35<sp/>=<sp/>mat[4][3]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[4][5]<sp/>*<sp/>mat[5][3];</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_45<sp/>=<sp/>mat[4][4]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[4][5]<sp/>*<sp/>mat[5][4];</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3x3<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>6x6<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_012<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_12<sp/>-<sp/>mat[3][1]<sp/>*<sp/>det2_45_02<sp/>+<sp/>mat[3][2]<sp/>*<sp/>det2_45_01;</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_013<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_13<sp/>-<sp/>mat[3][1]<sp/>*<sp/>det2_45_03<sp/>+<sp/>mat[3][3]<sp/>*<sp/>det2_45_01;</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_014<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_14<sp/>-<sp/>mat[3][1]<sp/>*<sp/>det2_45_04<sp/>+<sp/>mat[3][4]<sp/>*<sp/>det2_45_01;</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_015<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_15<sp/>-<sp/>mat[3][1]<sp/>*<sp/>det2_45_05<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_01;</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_023<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_23<sp/>-<sp/>mat[3][2]<sp/>*<sp/>det2_45_03<sp/>+<sp/>mat[3][3]<sp/>*<sp/>det2_45_02;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_024<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_24<sp/>-<sp/>mat[3][2]<sp/>*<sp/>det2_45_04<sp/>+<sp/>mat[3][4]<sp/>*<sp/>det2_45_02;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_025<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_25<sp/>-<sp/>mat[3][2]<sp/>*<sp/>det2_45_05<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_02;</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_034<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_34<sp/>-<sp/>mat[3][3]<sp/>*<sp/>det2_45_04<sp/>+<sp/>mat[3][4]<sp/>*<sp/>det2_45_03;</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_035<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_35<sp/>-<sp/>mat[3][3]<sp/>*<sp/>det2_45_05<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_03;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_045<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_45<sp/>-<sp/>mat[3][4]<sp/>*<sp/>det2_45_05<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_04;</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_123<sp/>=<sp/>mat[3][1]<sp/>*<sp/>det2_45_23<sp/>-<sp/>mat[3][2]<sp/>*<sp/>det2_45_13<sp/>+<sp/>mat[3][3]<sp/>*<sp/>det2_45_12;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_124<sp/>=<sp/>mat[3][1]<sp/>*<sp/>det2_45_24<sp/>-<sp/>mat[3][2]<sp/>*<sp/>det2_45_14<sp/>+<sp/>mat[3][4]<sp/>*<sp/>det2_45_12;</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_125<sp/>=<sp/>mat[3][1]<sp/>*<sp/>det2_45_25<sp/>-<sp/>mat[3][2]<sp/>*<sp/>det2_45_15<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_12;</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_134<sp/>=<sp/>mat[3][1]<sp/>*<sp/>det2_45_34<sp/>-<sp/>mat[3][3]<sp/>*<sp/>det2_45_14<sp/>+<sp/>mat[3][4]<sp/>*<sp/>det2_45_13;</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_135<sp/>=<sp/>mat[3][1]<sp/>*<sp/>det2_45_35<sp/>-<sp/>mat[3][3]<sp/>*<sp/>det2_45_15<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_13;</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_145<sp/>=<sp/>mat[3][1]<sp/>*<sp/>det2_45_45<sp/>-<sp/>mat[3][4]<sp/>*<sp/>det2_45_15<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_14;</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_234<sp/>=<sp/>mat[3][2]<sp/>*<sp/>det2_45_34<sp/>-<sp/>mat[3][3]<sp/>*<sp/>det2_45_24<sp/>+<sp/>mat[3][4]<sp/>*<sp/>det2_45_23;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_235<sp/>=<sp/>mat[3][2]<sp/>*<sp/>det2_45_35<sp/>-<sp/>mat[3][3]<sp/>*<sp/>det2_45_25<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_23;</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_245<sp/>=<sp/>mat[3][2]<sp/>*<sp/>det2_45_45<sp/>-<sp/>mat[3][4]<sp/>*<sp/>det2_45_25<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_24;</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_345<sp/>=<sp/>mat[3][3]<sp/>*<sp/>det2_45_45<sp/>-<sp/>mat[3][4]<sp/>*<sp/>det2_45_35<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_34;</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4x4<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>6x6<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0123<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_123<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det3_345_023<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det3_345_013<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det3_345_012;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0124<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_124<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det3_345_024<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det3_345_014<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det3_345_012;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0125<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_125<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det3_345_025<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det3_345_015<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_012;</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0134<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_134<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det3_345_034<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det3_345_014<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det3_345_013;</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0135<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_135<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det3_345_035<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det3_345_015<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_013;</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0145<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_145<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det3_345_045<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det3_345_015<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_014;</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0234<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_234<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det3_345_034<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det3_345_024<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det3_345_023;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0235<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_235<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det3_345_035<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det3_345_025<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_023;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0245<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_245<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det3_345_045<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det3_345_025<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_024;</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0345<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_345<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det3_345_045<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det3_345_035<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_034;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_1234<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det3_345_234<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det3_345_134<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det3_345_124<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det3_345_123;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_1235<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det3_345_235<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det3_345_135<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det3_345_125<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_123;</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_1245<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det3_345_245<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det3_345_145<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det3_345_125<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_124;</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_1345<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det3_345_345<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det3_345_145<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det3_345_135<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_134;</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_2345<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det3_345_345<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det3_345_245<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det3_345_235<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_234;</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>5x5<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>6x6<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_12345_01234<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det4_2345_1234<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det4_2345_0234<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det4_2345_0134<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det4_2345_0124<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det4_2345_0123;</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_12345_01235<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det4_2345_1235<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det4_2345_0235<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det4_2345_0135<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det4_2345_0125<sp/>+<sp/>mat[1][5]<sp/>*<sp/>det4_2345_0123;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_12345_01245<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det4_2345_1245<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det4_2345_0245<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det4_2345_0145<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det4_2345_0125<sp/>+<sp/>mat[1][5]<sp/>*<sp/>det4_2345_0124;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_12345_01345<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det4_2345_1345<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det4_2345_0345<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det4_2345_0145<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det4_2345_0135<sp/>+<sp/>mat[1][5]<sp/>*<sp/>det4_2345_0134;</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_12345_02345<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det4_2345_2345<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det4_2345_0345<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det4_2345_0245<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det4_2345_0235<sp/>+<sp/>mat[1][5]<sp/>*<sp/>det4_2345_0234;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_12345_12345<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det4_2345_2345<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det4_2345_1345<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det4_2345_1245<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det4_2345_1235<sp/>+<sp/>mat[1][5]<sp/>*<sp/>det4_2345_1234;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determinant<sp/>of<sp/>6x6<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>mat[0][0]<sp/>*<sp/>det5_12345_12345<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det5_12345_02345<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det5_12345_01345<sp/>-</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[0][3]<sp/>*<sp/>det5_12345_01245<sp/>+<sp/>mat[0][4]<sp/>*<sp/>det5_12345_01235<sp/>-<sp/>mat[0][5]<sp/>*<sp/>det5_12345_01234;</highlight></codeline>
<codeline lineno="1862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1865"><highlight class="comment">============</highlight></codeline>
<codeline lineno="1866"><highlight class="comment">idMat6::InverseSelf</highlight></codeline>
<codeline lineno="1867"><highlight class="comment">============</highlight></codeline>
<codeline lineno="1868"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMat6::InverseSelf(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>810+6+36<sp/>=<sp/>852<sp/>multiplications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>division</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>det,<sp/>invDet;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2x2<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>6x6<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_01<sp/>=<sp/>mat[4][0]<sp/>*<sp/>mat[5][1]<sp/>-<sp/>mat[4][1]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_02<sp/>=<sp/>mat[4][0]<sp/>*<sp/>mat[5][2]<sp/>-<sp/>mat[4][2]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_03<sp/>=<sp/>mat[4][0]<sp/>*<sp/>mat[5][3]<sp/>-<sp/>mat[4][3]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_04<sp/>=<sp/>mat[4][0]<sp/>*<sp/>mat[5][4]<sp/>-<sp/>mat[4][4]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_05<sp/>=<sp/>mat[4][0]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[4][5]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_12<sp/>=<sp/>mat[4][1]<sp/>*<sp/>mat[5][2]<sp/>-<sp/>mat[4][2]<sp/>*<sp/>mat[5][1];</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_13<sp/>=<sp/>mat[4][1]<sp/>*<sp/>mat[5][3]<sp/>-<sp/>mat[4][3]<sp/>*<sp/>mat[5][1];</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_14<sp/>=<sp/>mat[4][1]<sp/>*<sp/>mat[5][4]<sp/>-<sp/>mat[4][4]<sp/>*<sp/>mat[5][1];</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_15<sp/>=<sp/>mat[4][1]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[4][5]<sp/>*<sp/>mat[5][1];</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_23<sp/>=<sp/>mat[4][2]<sp/>*<sp/>mat[5][3]<sp/>-<sp/>mat[4][3]<sp/>*<sp/>mat[5][2];</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_24<sp/>=<sp/>mat[4][2]<sp/>*<sp/>mat[5][4]<sp/>-<sp/>mat[4][4]<sp/>*<sp/>mat[5][2];</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_25<sp/>=<sp/>mat[4][2]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[4][5]<sp/>*<sp/>mat[5][2];</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_34<sp/>=<sp/>mat[4][3]<sp/>*<sp/>mat[5][4]<sp/>-<sp/>mat[4][4]<sp/>*<sp/>mat[5][3];</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_35<sp/>=<sp/>mat[4][3]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[4][5]<sp/>*<sp/>mat[5][3];</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_45<sp/>=<sp/>mat[4][4]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[4][5]<sp/>*<sp/>mat[5][4];</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3x3<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>6x6<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_012<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_12<sp/>-<sp/>mat[3][1]<sp/>*<sp/>det2_45_02<sp/>+<sp/>mat[3][2]<sp/>*<sp/>det2_45_01;</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_013<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_13<sp/>-<sp/>mat[3][1]<sp/>*<sp/>det2_45_03<sp/>+<sp/>mat[3][3]<sp/>*<sp/>det2_45_01;</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_014<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_14<sp/>-<sp/>mat[3][1]<sp/>*<sp/>det2_45_04<sp/>+<sp/>mat[3][4]<sp/>*<sp/>det2_45_01;</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_015<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_15<sp/>-<sp/>mat[3][1]<sp/>*<sp/>det2_45_05<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_01;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_023<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_23<sp/>-<sp/>mat[3][2]<sp/>*<sp/>det2_45_03<sp/>+<sp/>mat[3][3]<sp/>*<sp/>det2_45_02;</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_024<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_24<sp/>-<sp/>mat[3][2]<sp/>*<sp/>det2_45_04<sp/>+<sp/>mat[3][4]<sp/>*<sp/>det2_45_02;</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_025<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_25<sp/>-<sp/>mat[3][2]<sp/>*<sp/>det2_45_05<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_02;</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_034<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_34<sp/>-<sp/>mat[3][3]<sp/>*<sp/>det2_45_04<sp/>+<sp/>mat[3][4]<sp/>*<sp/>det2_45_03;</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_035<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_35<sp/>-<sp/>mat[3][3]<sp/>*<sp/>det2_45_05<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_03;</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_045<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_45<sp/>-<sp/>mat[3][4]<sp/>*<sp/>det2_45_05<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_04;</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_123<sp/>=<sp/>mat[3][1]<sp/>*<sp/>det2_45_23<sp/>-<sp/>mat[3][2]<sp/>*<sp/>det2_45_13<sp/>+<sp/>mat[3][3]<sp/>*<sp/>det2_45_12;</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_124<sp/>=<sp/>mat[3][1]<sp/>*<sp/>det2_45_24<sp/>-<sp/>mat[3][2]<sp/>*<sp/>det2_45_14<sp/>+<sp/>mat[3][4]<sp/>*<sp/>det2_45_12;</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_125<sp/>=<sp/>mat[3][1]<sp/>*<sp/>det2_45_25<sp/>-<sp/>mat[3][2]<sp/>*<sp/>det2_45_15<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_12;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_134<sp/>=<sp/>mat[3][1]<sp/>*<sp/>det2_45_34<sp/>-<sp/>mat[3][3]<sp/>*<sp/>det2_45_14<sp/>+<sp/>mat[3][4]<sp/>*<sp/>det2_45_13;</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_135<sp/>=<sp/>mat[3][1]<sp/>*<sp/>det2_45_35<sp/>-<sp/>mat[3][3]<sp/>*<sp/>det2_45_15<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_13;</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_145<sp/>=<sp/>mat[3][1]<sp/>*<sp/>det2_45_45<sp/>-<sp/>mat[3][4]<sp/>*<sp/>det2_45_15<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_14;</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_234<sp/>=<sp/>mat[3][2]<sp/>*<sp/>det2_45_34<sp/>-<sp/>mat[3][3]<sp/>*<sp/>det2_45_24<sp/>+<sp/>mat[3][4]<sp/>*<sp/>det2_45_23;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_235<sp/>=<sp/>mat[3][2]<sp/>*<sp/>det2_45_35<sp/>-<sp/>mat[3][3]<sp/>*<sp/>det2_45_25<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_23;</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_245<sp/>=<sp/>mat[3][2]<sp/>*<sp/>det2_45_45<sp/>-<sp/>mat[3][4]<sp/>*<sp/>det2_45_25<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_24;</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_345<sp/>=<sp/>mat[3][3]<sp/>*<sp/>det2_45_45<sp/>-<sp/>mat[3][4]<sp/>*<sp/>det2_45_35<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_34;</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4x4<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>6x6<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0123<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_123<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det3_345_023<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det3_345_013<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det3_345_012;</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0124<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_124<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det3_345_024<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det3_345_014<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det3_345_012;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0125<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_125<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det3_345_025<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det3_345_015<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_012;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0134<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_134<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det3_345_034<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det3_345_014<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det3_345_013;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0135<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_135<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det3_345_035<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det3_345_015<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_013;</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0145<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_145<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det3_345_045<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det3_345_015<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_014;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0234<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_234<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det3_345_034<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det3_345_024<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det3_345_023;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0235<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_235<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det3_345_035<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det3_345_025<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_023;</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0245<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_245<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det3_345_045<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det3_345_025<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_024;</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0345<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_345<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det3_345_045<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det3_345_035<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_034;</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_1234<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det3_345_234<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det3_345_134<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det3_345_124<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det3_345_123;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_1235<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det3_345_235<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det3_345_135<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det3_345_125<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_123;</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_1245<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det3_345_245<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det3_345_145<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det3_345_125<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_124;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_1345<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det3_345_345<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det3_345_145<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det3_345_135<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_134;</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_2345<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det3_345_345<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det3_345_245<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det3_345_235<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_234;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>5x5<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>6x6<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_12345_01234<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det4_2345_1234<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det4_2345_0234<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det4_2345_0134<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det4_2345_0124<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det4_2345_0123;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_12345_01235<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det4_2345_1235<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det4_2345_0235<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det4_2345_0135<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det4_2345_0125<sp/>+<sp/>mat[1][5]<sp/>*<sp/>det4_2345_0123;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_12345_01245<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det4_2345_1245<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det4_2345_0245<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det4_2345_0145<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det4_2345_0125<sp/>+<sp/>mat[1][5]<sp/>*<sp/>det4_2345_0124;</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_12345_01345<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det4_2345_1345<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det4_2345_0345<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det4_2345_0145<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det4_2345_0135<sp/>+<sp/>mat[1][5]<sp/>*<sp/>det4_2345_0134;</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_12345_02345<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det4_2345_2345<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det4_2345_0345<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det4_2345_0245<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det4_2345_0235<sp/>+<sp/>mat[1][5]<sp/>*<sp/>det4_2345_0234;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_12345_12345<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det4_2345_2345<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det4_2345_1345<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det4_2345_1245<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det4_2345_1235<sp/>+<sp/>mat[1][5]<sp/>*<sp/>det4_2345_1234;</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determinant<sp/>of<sp/>6x6<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det5_12345_12345<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det5_12345_02345<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det5_12345_01345<sp/>-</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[0][3]<sp/>*<sp/>det5_12345_01245<sp/>+<sp/>mat[0][4]<sp/>*<sp/>det5_12345_01235<sp/>-<sp/>mat[0][5]<sp/>*<sp/>det5_12345_01234;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>det<sp/>)<sp/>&lt;<sp/>MATRIX_INVERSE_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/>invDet<sp/>=<sp/>1.0f<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remaining<sp/>2x2<sp/>sub-determinants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_01<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[4][1]<sp/>-<sp/>mat[3][1]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_02<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[4][2]<sp/>-<sp/>mat[3][2]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_03<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[4][3]<sp/>-<sp/>mat[3][3]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_04<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_05<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[4][5]<sp/>-<sp/>mat[3][5]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_12<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[4][2]<sp/>-<sp/>mat[3][2]<sp/>*<sp/>mat[4][1];</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_13<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[4][3]<sp/>-<sp/>mat[3][3]<sp/>*<sp/>mat[4][1];</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_14<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[4][1];</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_15<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[4][5]<sp/>-<sp/>mat[3][5]<sp/>*<sp/>mat[4][1];</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_23<sp/>=<sp/>mat[3][2]<sp/>*<sp/>mat[4][3]<sp/>-<sp/>mat[3][3]<sp/>*<sp/>mat[4][2];</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_24<sp/>=<sp/>mat[3][2]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[4][2];</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_25<sp/>=<sp/>mat[3][2]<sp/>*<sp/>mat[4][5]<sp/>-<sp/>mat[3][5]<sp/>*<sp/>mat[4][2];</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_34<sp/>=<sp/>mat[3][3]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[4][3];</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_35<sp/>=<sp/>mat[3][3]<sp/>*<sp/>mat[4][5]<sp/>-<sp/>mat[3][5]<sp/>*<sp/>mat[4][3];</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_45<sp/>=<sp/>mat[3][4]<sp/>*<sp/>mat[4][5]<sp/>-<sp/>mat[3][5]<sp/>*<sp/>mat[4][4];</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_01<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[5][1]<sp/>-<sp/>mat[3][1]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_02<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[5][2]<sp/>-<sp/>mat[3][2]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_03<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[5][3]<sp/>-<sp/>mat[3][3]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_04<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[5][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_05<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[3][5]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_12<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[5][2]<sp/>-<sp/>mat[3][2]<sp/>*<sp/>mat[5][1];</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_13<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[5][3]<sp/>-<sp/>mat[3][3]<sp/>*<sp/>mat[5][1];</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_14<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[5][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[5][1];</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_15<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[3][5]<sp/>*<sp/>mat[5][1];</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_23<sp/>=<sp/>mat[3][2]<sp/>*<sp/>mat[5][3]<sp/>-<sp/>mat[3][3]<sp/>*<sp/>mat[5][2];</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_24<sp/>=<sp/>mat[3][2]<sp/>*<sp/>mat[5][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[5][2];</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_25<sp/>=<sp/>mat[3][2]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[3][5]<sp/>*<sp/>mat[5][2];</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_34<sp/>=<sp/>mat[3][3]<sp/>*<sp/>mat[5][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[5][3];</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_35<sp/>=<sp/>mat[3][3]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[3][5]<sp/>*<sp/>mat[5][3];</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_45<sp/>=<sp/>mat[3][4]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[3][5]<sp/>*<sp/>mat[5][4];</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remaining<sp/>3x3<sp/>sub-determinants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_012<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_12<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_34_02<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det2_34_01;</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_013<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_13<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_34_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_34_01;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_014<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_14<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_34_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_01;</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_015<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_15<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_34_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_34_01;</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_023<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_34_02;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_024<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_24<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_02;</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_025<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_25<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_34_02;</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_034<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_34_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_03;</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_035<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_35<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_34_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_34_03;</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_045<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_34_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_34_04;</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_123<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_34_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_13<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_34_12;</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_124<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_34_24<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_14<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_12;</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_125<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_34_25<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_15<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_34_12;</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_134<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_34_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_34_14<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_13;</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_135<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_34_35<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_34_15<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_34_13;</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_145<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_34_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_34_15<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_34_14;</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_234<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det2_34_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_34_24<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_23;</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_235<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det2_34_35<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_34_25<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_34_23;</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_245<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det2_34_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_34_25<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_34_24;</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_345<sp/>=<sp/>mat[2][3]<sp/>*<sp/>det2_34_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_34_35<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_34_34;</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_012<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_35_12<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_35_02<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det2_35_01;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_013<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_35_13<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_35_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_35_01;</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_014<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_35_14<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_35_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_35_01;</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_015<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_35_15<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_35_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_35_01;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_023<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_35_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_35_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_35_02;</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_024<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_35_24<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_35_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_35_02;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_025<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_35_25<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_35_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_35_02;</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_034<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_35_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_35_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_35_03;</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_035<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_35_35<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_35_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_35_03;</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_045<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_35_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_35_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_35_04;</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_123<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_35_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_35_13<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_35_12;</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_124<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_35_24<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_35_14<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_35_12;</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_125<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_35_25<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_35_15<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_35_12;</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_134<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_35_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_35_14<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_35_13;</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_135<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_35_35<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_35_15<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_35_13;</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_145<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_35_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_35_15<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_35_14;</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_234<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det2_35_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_35_24<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_35_23;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_235<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det2_35_35<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_35_25<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_35_23;</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_245<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det2_35_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_35_25<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_35_24;</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_345<sp/>=<sp/>mat[2][3]<sp/>*<sp/>det2_35_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_35_35<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_35_34;</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_012<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_45_12<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_45_02<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det2_45_01;</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_013<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_45_13<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_45_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_45_01;</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_014<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_45_14<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_45_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_45_01;</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_015<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_45_15<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_45_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_45_01;</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_023<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_45_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_45_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_45_02;</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_024<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_45_24<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_45_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_45_02;</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_025<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_45_25<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_45_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_45_02;</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_034<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_45_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_45_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_45_03;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_035<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_45_35<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_45_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_45_03;</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_045<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_45_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_45_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_45_04;</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_123<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_45_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_45_13<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_45_12;</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_124<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_45_24<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_45_14<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_45_12;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_125<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_45_25<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_45_15<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_45_12;</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_134<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_45_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_45_14<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_45_13;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_135<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_45_35<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_45_15<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_45_13;</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_145<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_45_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_45_15<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_45_14;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_234<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det2_45_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_45_24<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_45_23;</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_235<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det2_45_35<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_45_25<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_45_23;</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_245<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det2_45_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_45_25<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_45_24;</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_345<sp/>=<sp/>mat[2][3]<sp/>*<sp/>det2_45_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_45_35<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_45_34;</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remaining<sp/>4x4<sp/>sub-determinants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0123<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_123<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_234_023<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_234_013<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_234_012;</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0124<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_124<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_234_024<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_234_014<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_234_012;</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0125<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_125<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_234_025<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_234_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_234_012;</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0134<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_134<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_234_034<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_234_014<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_234_013;</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0135<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_135<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_234_035<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_234_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_234_013;</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0145<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_145<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_234_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_234_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_234_014;</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0234<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_234<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_234_034<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_234_024<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_234_023;</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0235<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_235<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_234_035<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_234_025<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_234_023;</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0245<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_245<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_234_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_234_025<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_234_024;</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0345<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_234_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_234_035<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_234_034;</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_1234<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_234_234<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_234_134<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_234_124<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_234_123;</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_1235<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_234_235<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_234_135<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_234_125<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_234_123;</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_1245<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_234_245<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_234_145<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_234_125<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_234_124;</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_1345<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_234_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_234_145<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_234_135<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_234_134;</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_2345<sp/>=<sp/>mat[1][2]<sp/>*<sp/>det3_234_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_234_245<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_234_235<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_234_234;</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_0123<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_235_123<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_235_023<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_235_013<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_235_012;</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_0124<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_235_124<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_235_024<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_235_014<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_235_012;</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_0125<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_235_125<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_235_025<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_235_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_235_012;</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_0134<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_235_134<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_235_034<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_235_014<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_235_013;</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_0135<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_235_135<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_235_035<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_235_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_235_013;</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_0145<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_235_145<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_235_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_235_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_235_014;</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_0234<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_235_234<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_235_034<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_235_024<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_235_023;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_0235<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_235_235<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_235_035<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_235_025<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_235_023;</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_0245<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_235_245<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_235_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_235_025<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_235_024;</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_0345<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_235_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_235_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_235_035<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_235_034;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_1234<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_235_234<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_235_134<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_235_124<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_235_123;</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_1235<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_235_235<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_235_135<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_235_125<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_235_123;</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_1245<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_235_245<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_235_145<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_235_125<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_235_124;</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_1345<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_235_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_235_145<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_235_135<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_235_134;</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_2345<sp/>=<sp/>mat[1][2]<sp/>*<sp/>det3_235_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_235_245<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_235_235<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_235_234;</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_0123<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_245_123<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_245_023<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_245_013<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_245_012;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_0124<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_245_124<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_245_024<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_245_014<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_245_012;</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_0125<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_245_125<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_245_025<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_245_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_245_012;</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_0134<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_245_134<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_245_034<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_245_014<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_245_013;</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_0135<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_245_135<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_245_035<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_245_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_245_013;</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_0145<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_245_145<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_245_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_245_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_245_014;</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_0234<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_245_234<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_245_034<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_245_024<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_245_023;</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_0235<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_245_235<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_245_035<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_245_025<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_245_023;</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_0245<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_245_245<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_245_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_245_025<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_245_024;</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_0345<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_245_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_245_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_245_035<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_245_034;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_1234<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_245_234<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_245_134<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_245_124<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_245_123;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_1235<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_245_235<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_245_135<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_245_125<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_245_123;</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_1245<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_245_245<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_245_145<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_245_125<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_245_124;</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_1345<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_245_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_245_145<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_245_135<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_245_134;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_2345<sp/>=<sp/>mat[1][2]<sp/>*<sp/>det3_245_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_245_245<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_245_235<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_245_234;</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_0123<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_345_123<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_345_023<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_345_013<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_345_012;</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_0124<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_345_124<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_345_024<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_345_014<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_345_012;</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_0125<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_345_125<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_345_025<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_345_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_345_012;</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_0134<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_345_134<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_345_034<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_345_014<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_345_013;</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_0135<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_345_135<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_345_035<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_345_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_345_013;</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_0145<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_345_145<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_345_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_345_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_345_014;</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_0234<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_345_234<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_345_034<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_345_024<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_345_023;</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_0235<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_345_235<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_345_035<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_345_025<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_345_023;</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_0245<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_345_245<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_345_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_345_025<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_345_024;</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_0345<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_345_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_345_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_345_035<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_345_034;</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_1234<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_345_234<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_345_134<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_345_124<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_345_123;</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_1235<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_345_235<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_345_135<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_345_125<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_345_123;</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_1245<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_345_245<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_345_145<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_345_125<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_345_124;</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_1345<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_345_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_345_145<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_345_135<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_345_134;</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_2345<sp/>=<sp/>mat[1][2]<sp/>*<sp/>det3_345_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_345_245<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_345_235<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_345_234;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remaining<sp/>5x5<sp/>sub-determinants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01234_01234<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1234_1234<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1234_0234<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1234_0134<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det4_1234_0124<sp/>+<sp/>mat[0][4]<sp/>*<sp/>det4_1234_0123;</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01234_01235<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1234_1235<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1234_0235<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1234_0135<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det4_1234_0125<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1234_0123;</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01234_01245<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1234_1245<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1234_0245<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1234_0145<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1234_0125<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1234_0124;</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01234_01345<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1234_1345<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1234_0345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1234_0145<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1234_0135<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1234_0134;</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01234_02345<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1234_2345<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det4_1234_0345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1234_0245<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1234_0235<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1234_0234;</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01234_12345<sp/>=<sp/>mat[0][1]<sp/>*<sp/>det4_1234_2345<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det4_1234_1345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1234_1245<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1234_1235<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1234_1234;</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01235_01234<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1235_1234<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1235_0234<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1235_0134<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det4_1235_0124<sp/>+<sp/>mat[0][4]<sp/>*<sp/>det4_1235_0123;</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01235_01235<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1235_1235<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1235_0235<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1235_0135<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det4_1235_0125<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1235_0123;</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01235_01245<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1235_1245<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1235_0245<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1235_0145<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1235_0125<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1235_0124;</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01235_01345<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1235_1345<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1235_0345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1235_0145<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1235_0135<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1235_0134;</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01235_02345<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1235_2345<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det4_1235_0345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1235_0245<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1235_0235<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1235_0234;</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01235_12345<sp/>=<sp/>mat[0][1]<sp/>*<sp/>det4_1235_2345<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det4_1235_1345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1235_1245<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1235_1235<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1235_1234;</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01245_01234<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1245_1234<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1245_0234<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1245_0134<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det4_1245_0124<sp/>+<sp/>mat[0][4]<sp/>*<sp/>det4_1245_0123;</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01245_01235<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1245_1235<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1245_0235<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1245_0135<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det4_1245_0125<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1245_0123;</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01245_01245<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1245_1245<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1245_0245<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1245_0145<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1245_0125<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1245_0124;</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01245_01345<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1245_1345<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1245_0345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1245_0145<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1245_0135<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1245_0134;</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01245_02345<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1245_2345<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det4_1245_0345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1245_0245<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1245_0235<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1245_0234;</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01245_12345<sp/>=<sp/>mat[0][1]<sp/>*<sp/>det4_1245_2345<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det4_1245_1345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1245_1245<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1245_1235<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1245_1234;</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01345_01234<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1345_1234<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1345_0234<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1345_0134<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det4_1345_0124<sp/>+<sp/>mat[0][4]<sp/>*<sp/>det4_1345_0123;</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01345_01235<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1345_1235<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1345_0235<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1345_0135<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det4_1345_0125<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1345_0123;</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01345_01245<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1345_1245<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1345_0245<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1345_0145<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1345_0125<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1345_0124;</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01345_01345<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1345_1345<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1345_0345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1345_0145<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1345_0135<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1345_0134;</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01345_02345<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1345_2345<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det4_1345_0345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1345_0245<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1345_0235<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1345_0234;</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01345_12345<sp/>=<sp/>mat[0][1]<sp/>*<sp/>det4_1345_2345<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det4_1345_1345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1345_1245<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1345_1235<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1345_1234;</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_02345_01234<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_2345_1234<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_2345_0234<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_2345_0134<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det4_2345_0124<sp/>+<sp/>mat[0][4]<sp/>*<sp/>det4_2345_0123;</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_02345_01235<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_2345_1235<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_2345_0235<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_2345_0135<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det4_2345_0125<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_2345_0123;</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_02345_01245<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_2345_1245<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_2345_0245<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_2345_0145<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_2345_0125<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_2345_0124;</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_02345_01345<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_2345_1345<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_2345_0345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_2345_0145<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_2345_0135<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_2345_0134;</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_02345_02345<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_2345_2345<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det4_2345_0345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_2345_0245<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_2345_0235<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_2345_0234;</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_02345_12345<sp/>=<sp/>mat[0][1]<sp/>*<sp/>det4_2345_2345<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det4_2345_1345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_2345_1245<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_2345_1235<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_2345_1234;</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][0]<sp/>=<sp/><sp/>det5_12345_12345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][1]<sp/>=<sp/>-det5_02345_12345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][2]<sp/>=<sp/><sp/>det5_01345_12345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][3]<sp/>=<sp/>-det5_01245_12345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][4]<sp/>=<sp/><sp/>det5_01235_12345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][5]<sp/>=<sp/>-det5_01234_12345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][0]<sp/>=<sp/>-det5_12345_02345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][1]<sp/>=<sp/><sp/>det5_02345_02345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][2]<sp/>=<sp/>-det5_01345_02345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][3]<sp/>=<sp/><sp/>det5_01245_02345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][4]<sp/>=<sp/>-det5_01235_02345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][5]<sp/>=<sp/><sp/>det5_01234_02345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][0]<sp/>=<sp/><sp/>det5_12345_01345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][1]<sp/>=<sp/>-det5_02345_01345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][2]<sp/>=<sp/><sp/>det5_01345_01345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][3]<sp/>=<sp/>-det5_01245_01345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][4]<sp/>=<sp/><sp/>det5_01235_01345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][5]<sp/>=<sp/>-det5_01234_01345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][0]<sp/>=<sp/>-det5_12345_01245<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][1]<sp/>=<sp/><sp/>det5_02345_01245<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][2]<sp/>=<sp/>-det5_01345_01245<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][3]<sp/>=<sp/><sp/>det5_01245_01245<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][4]<sp/>=<sp/>-det5_01235_01245<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][5]<sp/>=<sp/><sp/>det5_01234_01245<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"></highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4][0]<sp/>=<sp/><sp/>det5_12345_01235<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4][1]<sp/>=<sp/>-det5_02345_01235<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4][2]<sp/>=<sp/><sp/>det5_01345_01235<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4][3]<sp/>=<sp/>-det5_01245_01235<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4][4]<sp/>=<sp/><sp/>det5_01235_01235<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4][5]<sp/>=<sp/>-det5_01234_01235<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5][0]<sp/>=<sp/>-det5_12345_01234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5][1]<sp/>=<sp/><sp/>det5_02345_01234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5][2]<sp/>=<sp/>-det5_01345_01234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5][3]<sp/>=<sp/><sp/>det5_01245_01234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5][4]<sp/>=<sp/>-det5_01235_01234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5][5]<sp/>=<sp/><sp/>det5_01234_01234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2182"><highlight class="comment">============</highlight></codeline>
<codeline lineno="2183"><highlight class="comment">idMat6::InverseFastSelf</highlight></codeline>
<codeline lineno="2184"><highlight class="comment">============</highlight></codeline>
<codeline lineno="2185"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMat6::InverseFastSelf(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="2188"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>810+6+36<sp/>=<sp/>852<sp/>multiplications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>division</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>det,<sp/>invDet;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2x2<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>6x6<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_01<sp/>=<sp/>mat[4][0]<sp/>*<sp/>mat[5][1]<sp/>-<sp/>mat[4][1]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_02<sp/>=<sp/>mat[4][0]<sp/>*<sp/>mat[5][2]<sp/>-<sp/>mat[4][2]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_03<sp/>=<sp/>mat[4][0]<sp/>*<sp/>mat[5][3]<sp/>-<sp/>mat[4][3]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_04<sp/>=<sp/>mat[4][0]<sp/>*<sp/>mat[5][4]<sp/>-<sp/>mat[4][4]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_05<sp/>=<sp/>mat[4][0]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[4][5]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_12<sp/>=<sp/>mat[4][1]<sp/>*<sp/>mat[5][2]<sp/>-<sp/>mat[4][2]<sp/>*<sp/>mat[5][1];</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_13<sp/>=<sp/>mat[4][1]<sp/>*<sp/>mat[5][3]<sp/>-<sp/>mat[4][3]<sp/>*<sp/>mat[5][1];</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_14<sp/>=<sp/>mat[4][1]<sp/>*<sp/>mat[5][4]<sp/>-<sp/>mat[4][4]<sp/>*<sp/>mat[5][1];</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_15<sp/>=<sp/>mat[4][1]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[4][5]<sp/>*<sp/>mat[5][1];</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_23<sp/>=<sp/>mat[4][2]<sp/>*<sp/>mat[5][3]<sp/>-<sp/>mat[4][3]<sp/>*<sp/>mat[5][2];</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_24<sp/>=<sp/>mat[4][2]<sp/>*<sp/>mat[5][4]<sp/>-<sp/>mat[4][4]<sp/>*<sp/>mat[5][2];</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_25<sp/>=<sp/>mat[4][2]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[4][5]<sp/>*<sp/>mat[5][2];</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_34<sp/>=<sp/>mat[4][3]<sp/>*<sp/>mat[5][4]<sp/>-<sp/>mat[4][4]<sp/>*<sp/>mat[5][3];</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_35<sp/>=<sp/>mat[4][3]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[4][5]<sp/>*<sp/>mat[5][3];</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_45_45<sp/>=<sp/>mat[4][4]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[4][5]<sp/>*<sp/>mat[5][4];</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3x3<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>6x6<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_012<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_12<sp/>-<sp/>mat[3][1]<sp/>*<sp/>det2_45_02<sp/>+<sp/>mat[3][2]<sp/>*<sp/>det2_45_01;</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_013<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_13<sp/>-<sp/>mat[3][1]<sp/>*<sp/>det2_45_03<sp/>+<sp/>mat[3][3]<sp/>*<sp/>det2_45_01;</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_014<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_14<sp/>-<sp/>mat[3][1]<sp/>*<sp/>det2_45_04<sp/>+<sp/>mat[3][4]<sp/>*<sp/>det2_45_01;</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_015<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_15<sp/>-<sp/>mat[3][1]<sp/>*<sp/>det2_45_05<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_01;</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_023<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_23<sp/>-<sp/>mat[3][2]<sp/>*<sp/>det2_45_03<sp/>+<sp/>mat[3][3]<sp/>*<sp/>det2_45_02;</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_024<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_24<sp/>-<sp/>mat[3][2]<sp/>*<sp/>det2_45_04<sp/>+<sp/>mat[3][4]<sp/>*<sp/>det2_45_02;</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_025<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_25<sp/>-<sp/>mat[3][2]<sp/>*<sp/>det2_45_05<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_02;</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_034<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_34<sp/>-<sp/>mat[3][3]<sp/>*<sp/>det2_45_04<sp/>+<sp/>mat[3][4]<sp/>*<sp/>det2_45_03;</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_035<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_35<sp/>-<sp/>mat[3][3]<sp/>*<sp/>det2_45_05<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_03;</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_045<sp/>=<sp/>mat[3][0]<sp/>*<sp/>det2_45_45<sp/>-<sp/>mat[3][4]<sp/>*<sp/>det2_45_05<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_04;</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_123<sp/>=<sp/>mat[3][1]<sp/>*<sp/>det2_45_23<sp/>-<sp/>mat[3][2]<sp/>*<sp/>det2_45_13<sp/>+<sp/>mat[3][3]<sp/>*<sp/>det2_45_12;</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_124<sp/>=<sp/>mat[3][1]<sp/>*<sp/>det2_45_24<sp/>-<sp/>mat[3][2]<sp/>*<sp/>det2_45_14<sp/>+<sp/>mat[3][4]<sp/>*<sp/>det2_45_12;</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_125<sp/>=<sp/>mat[3][1]<sp/>*<sp/>det2_45_25<sp/>-<sp/>mat[3][2]<sp/>*<sp/>det2_45_15<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_12;</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_134<sp/>=<sp/>mat[3][1]<sp/>*<sp/>det2_45_34<sp/>-<sp/>mat[3][3]<sp/>*<sp/>det2_45_14<sp/>+<sp/>mat[3][4]<sp/>*<sp/>det2_45_13;</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_135<sp/>=<sp/>mat[3][1]<sp/>*<sp/>det2_45_35<sp/>-<sp/>mat[3][3]<sp/>*<sp/>det2_45_15<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_13;</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_145<sp/>=<sp/>mat[3][1]<sp/>*<sp/>det2_45_45<sp/>-<sp/>mat[3][4]<sp/>*<sp/>det2_45_15<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_14;</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_234<sp/>=<sp/>mat[3][2]<sp/>*<sp/>det2_45_34<sp/>-<sp/>mat[3][3]<sp/>*<sp/>det2_45_24<sp/>+<sp/>mat[3][4]<sp/>*<sp/>det2_45_23;</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_235<sp/>=<sp/>mat[3][2]<sp/>*<sp/>det2_45_35<sp/>-<sp/>mat[3][3]<sp/>*<sp/>det2_45_25<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_23;</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_245<sp/>=<sp/>mat[3][2]<sp/>*<sp/>det2_45_45<sp/>-<sp/>mat[3][4]<sp/>*<sp/>det2_45_25<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_24;</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_345_345<sp/>=<sp/>mat[3][3]<sp/>*<sp/>det2_45_45<sp/>-<sp/>mat[3][4]<sp/>*<sp/>det2_45_35<sp/>+<sp/>mat[3][5]<sp/>*<sp/>det2_45_34;</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4x4<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>6x6<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0123<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_123<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det3_345_023<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det3_345_013<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det3_345_012;</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0124<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_124<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det3_345_024<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det3_345_014<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det3_345_012;</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0125<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_125<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det3_345_025<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det3_345_015<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_012;</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0134<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_134<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det3_345_034<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det3_345_014<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det3_345_013;</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0135<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_135<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det3_345_035<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det3_345_015<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_013;</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0145<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_145<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det3_345_045<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det3_345_015<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_014;</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0234<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_234<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det3_345_034<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det3_345_024<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det3_345_023;</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0235<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_235<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det3_345_035<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det3_345_025<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_023;</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0245<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_245<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det3_345_045<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det3_345_025<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_024;</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_0345<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det3_345_345<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det3_345_045<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det3_345_035<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_034;</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_1234<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det3_345_234<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det3_345_134<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det3_345_124<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det3_345_123;</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_1235<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det3_345_235<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det3_345_135<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det3_345_125<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_123;</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_1245<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det3_345_245<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det3_345_145<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det3_345_125<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_124;</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_1345<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det3_345_345<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det3_345_145<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det3_345_135<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_134;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_2345_2345<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det3_345_345<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det3_345_245<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det3_345_235<sp/>-<sp/>mat[2][5]<sp/>*<sp/>det3_345_234;</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>5x5<sp/>sub-determinants<sp/>required<sp/>to<sp/>calculate<sp/>6x6<sp/>determinant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_12345_01234<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det4_2345_1234<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det4_2345_0234<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det4_2345_0134<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det4_2345_0124<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det4_2345_0123;</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_12345_01235<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det4_2345_1235<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det4_2345_0235<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det4_2345_0135<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det4_2345_0125<sp/>+<sp/>mat[1][5]<sp/>*<sp/>det4_2345_0123;</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_12345_01245<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det4_2345_1245<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det4_2345_0245<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det4_2345_0145<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det4_2345_0125<sp/>+<sp/>mat[1][5]<sp/>*<sp/>det4_2345_0124;</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_12345_01345<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det4_2345_1345<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det4_2345_0345<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det4_2345_0145<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det4_2345_0135<sp/>+<sp/>mat[1][5]<sp/>*<sp/>det4_2345_0134;</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_12345_02345<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det4_2345_2345<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det4_2345_0345<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det4_2345_0245<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det4_2345_0235<sp/>+<sp/>mat[1][5]<sp/>*<sp/>det4_2345_0234;</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_12345_12345<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det4_2345_2345<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det4_2345_1345<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det4_2345_1245<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det4_2345_1235<sp/>+<sp/>mat[1][5]<sp/>*<sp/>det4_2345_1234;</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determinant<sp/>of<sp/>6x6<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det5_12345_12345<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det5_12345_02345<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det5_12345_01345<sp/>-</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[0][3]<sp/>*<sp/>det5_12345_01245<sp/>+<sp/>mat[0][4]<sp/>*<sp/>det5_12345_01235<sp/>-<sp/>mat[0][5]<sp/>*<sp/>det5_12345_01234;</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>det<sp/>)<sp/>&lt;<sp/>MATRIX_INVERSE_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/>invDet<sp/>=<sp/>1.0f<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remaining<sp/>2x2<sp/>sub-determinants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_01<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[4][1]<sp/>-<sp/>mat[3][1]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_02<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[4][2]<sp/>-<sp/>mat[3][2]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_03<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[4][3]<sp/>-<sp/>mat[3][3]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_04<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_05<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[4][5]<sp/>-<sp/>mat[3][5]<sp/>*<sp/>mat[4][0];</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_12<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[4][2]<sp/>-<sp/>mat[3][2]<sp/>*<sp/>mat[4][1];</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_13<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[4][3]<sp/>-<sp/>mat[3][3]<sp/>*<sp/>mat[4][1];</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_14<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[4][1];</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_15<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[4][5]<sp/>-<sp/>mat[3][5]<sp/>*<sp/>mat[4][1];</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_23<sp/>=<sp/>mat[3][2]<sp/>*<sp/>mat[4][3]<sp/>-<sp/>mat[3][3]<sp/>*<sp/>mat[4][2];</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_24<sp/>=<sp/>mat[3][2]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[4][2];</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_25<sp/>=<sp/>mat[3][2]<sp/>*<sp/>mat[4][5]<sp/>-<sp/>mat[3][5]<sp/>*<sp/>mat[4][2];</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_34<sp/>=<sp/>mat[3][3]<sp/>*<sp/>mat[4][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[4][3];</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_35<sp/>=<sp/>mat[3][3]<sp/>*<sp/>mat[4][5]<sp/>-<sp/>mat[3][5]<sp/>*<sp/>mat[4][3];</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_34_45<sp/>=<sp/>mat[3][4]<sp/>*<sp/>mat[4][5]<sp/>-<sp/>mat[3][5]<sp/>*<sp/>mat[4][4];</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_01<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[5][1]<sp/>-<sp/>mat[3][1]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_02<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[5][2]<sp/>-<sp/>mat[3][2]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_03<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[5][3]<sp/>-<sp/>mat[3][3]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_04<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[5][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_05<sp/>=<sp/>mat[3][0]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[3][5]<sp/>*<sp/>mat[5][0];</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_12<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[5][2]<sp/>-<sp/>mat[3][2]<sp/>*<sp/>mat[5][1];</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_13<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[5][3]<sp/>-<sp/>mat[3][3]<sp/>*<sp/>mat[5][1];</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_14<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[5][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[5][1];</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_15<sp/>=<sp/>mat[3][1]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[3][5]<sp/>*<sp/>mat[5][1];</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_23<sp/>=<sp/>mat[3][2]<sp/>*<sp/>mat[5][3]<sp/>-<sp/>mat[3][3]<sp/>*<sp/>mat[5][2];</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_24<sp/>=<sp/>mat[3][2]<sp/>*<sp/>mat[5][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[5][2];</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_25<sp/>=<sp/>mat[3][2]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[3][5]<sp/>*<sp/>mat[5][2];</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_34<sp/>=<sp/>mat[3][3]<sp/>*<sp/>mat[5][4]<sp/>-<sp/>mat[3][4]<sp/>*<sp/>mat[5][3];</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_35<sp/>=<sp/>mat[3][3]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[3][5]<sp/>*<sp/>mat[5][3];</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det2_35_45<sp/>=<sp/>mat[3][4]<sp/>*<sp/>mat[5][5]<sp/>-<sp/>mat[3][5]<sp/>*<sp/>mat[5][4];</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"></highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remaining<sp/>3x3<sp/>sub-determinants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_012<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_12<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_34_02<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det2_34_01;</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_013<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_13<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_34_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_34_01;</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_014<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_14<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_34_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_01;</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_015<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_15<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_34_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_34_01;</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_023<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_34_02;</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_024<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_24<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_02;</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_025<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_25<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_34_02;</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_034<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_34_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_03;</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_035<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_35<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_34_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_34_03;</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_045<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_34_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_34_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_34_04;</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_123<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_34_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_13<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_34_12;</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_124<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_34_24<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_14<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_12;</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_125<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_34_25<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_34_15<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_34_12;</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_134<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_34_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_34_14<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_13;</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_135<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_34_35<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_34_15<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_34_13;</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_145<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_34_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_34_15<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_34_14;</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_234<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det2_34_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_34_24<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_34_23;</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_235<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det2_34_35<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_34_25<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_34_23;</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_245<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det2_34_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_34_25<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_34_24;</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_234_345<sp/>=<sp/>mat[2][3]<sp/>*<sp/>det2_34_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_34_35<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_34_34;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_012<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_35_12<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_35_02<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det2_35_01;</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_013<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_35_13<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_35_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_35_01;</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_014<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_35_14<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_35_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_35_01;</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_015<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_35_15<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_35_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_35_01;</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_023<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_35_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_35_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_35_02;</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_024<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_35_24<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_35_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_35_02;</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_025<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_35_25<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_35_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_35_02;</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_034<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_35_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_35_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_35_03;</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_035<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_35_35<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_35_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_35_03;</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_045<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_35_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_35_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_35_04;</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_123<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_35_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_35_13<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_35_12;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_124<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_35_24<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_35_14<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_35_12;</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_125<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_35_25<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_35_15<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_35_12;</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_134<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_35_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_35_14<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_35_13;</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_135<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_35_35<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_35_15<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_35_13;</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_145<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_35_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_35_15<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_35_14;</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_234<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det2_35_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_35_24<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_35_23;</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_235<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det2_35_35<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_35_25<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_35_23;</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_245<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det2_35_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_35_25<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_35_24;</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_235_345<sp/>=<sp/>mat[2][3]<sp/>*<sp/>det2_35_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_35_35<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_35_34;</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_012<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_45_12<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_45_02<sp/>+<sp/>mat[2][2]<sp/>*<sp/>det2_45_01;</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_013<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_45_13<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_45_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_45_01;</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_014<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_45_14<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_45_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_45_01;</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_015<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_45_15<sp/>-<sp/>mat[2][1]<sp/>*<sp/>det2_45_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_45_01;</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_023<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_45_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_45_03<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_45_02;</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_024<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_45_24<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_45_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_45_02;</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_025<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_45_25<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_45_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_45_02;</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_034<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_45_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_45_04<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_45_03;</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_035<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_45_35<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_45_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_45_03;</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_045<sp/>=<sp/>mat[2][0]<sp/>*<sp/>det2_45_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_45_05<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_45_04;</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_123<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_45_23<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_45_13<sp/>+<sp/>mat[2][3]<sp/>*<sp/>det2_45_12;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_124<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_45_24<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_45_14<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_45_12;</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_125<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_45_25<sp/>-<sp/>mat[2][2]<sp/>*<sp/>det2_45_15<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_45_12;</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_134<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_45_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_45_14<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_45_13;</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_135<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_45_35<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_45_15<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_45_13;</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_145<sp/>=<sp/>mat[2][1]<sp/>*<sp/>det2_45_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_45_15<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_45_14;</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_234<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det2_45_34<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_45_24<sp/>+<sp/>mat[2][4]<sp/>*<sp/>det2_45_23;</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_235<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det2_45_35<sp/>-<sp/>mat[2][3]<sp/>*<sp/>det2_45_25<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_45_23;</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_245<sp/>=<sp/>mat[2][2]<sp/>*<sp/>det2_45_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_45_25<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_45_24;</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det3_245_345<sp/>=<sp/>mat[2][3]<sp/>*<sp/>det2_45_45<sp/>-<sp/>mat[2][4]<sp/>*<sp/>det2_45_35<sp/>+<sp/>mat[2][5]<sp/>*<sp/>det2_45_34;</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remaining<sp/>4x4<sp/>sub-determinants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0123<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_123<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_234_023<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_234_013<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_234_012;</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0124<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_124<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_234_024<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_234_014<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_234_012;</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0125<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_125<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_234_025<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_234_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_234_012;</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0134<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_134<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_234_034<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_234_014<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_234_013;</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0135<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_135<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_234_035<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_234_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_234_013;</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0145<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_145<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_234_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_234_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_234_014;</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0234<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_234<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_234_034<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_234_024<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_234_023;</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0235<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_235<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_234_035<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_234_025<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_234_023;</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0245<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_245<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_234_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_234_025<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_234_024;</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_0345<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_234_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_234_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_234_035<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_234_034;</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_1234<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_234_234<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_234_134<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_234_124<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_234_123;</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_1235<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_234_235<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_234_135<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_234_125<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_234_123;</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_1245<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_234_245<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_234_145<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_234_125<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_234_124;</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_1345<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_234_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_234_145<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_234_135<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_234_134;</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1234_2345<sp/>=<sp/>mat[1][2]<sp/>*<sp/>det3_234_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_234_245<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_234_235<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_234_234;</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_0123<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_235_123<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_235_023<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_235_013<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_235_012;</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_0124<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_235_124<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_235_024<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_235_014<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_235_012;</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_0125<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_235_125<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_235_025<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_235_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_235_012;</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_0134<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_235_134<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_235_034<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_235_014<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_235_013;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_0135<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_235_135<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_235_035<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_235_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_235_013;</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_0145<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_235_145<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_235_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_235_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_235_014;</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_0234<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_235_234<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_235_034<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_235_024<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_235_023;</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_0235<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_235_235<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_235_035<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_235_025<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_235_023;</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_0245<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_235_245<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_235_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_235_025<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_235_024;</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_0345<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_235_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_235_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_235_035<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_235_034;</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_1234<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_235_234<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_235_134<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_235_124<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_235_123;</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_1235<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_235_235<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_235_135<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_235_125<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_235_123;</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_1245<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_235_245<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_235_145<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_235_125<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_235_124;</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_1345<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_235_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_235_145<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_235_135<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_235_134;</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1235_2345<sp/>=<sp/>mat[1][2]<sp/>*<sp/>det3_235_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_235_245<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_235_235<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_235_234;</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_0123<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_245_123<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_245_023<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_245_013<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_245_012;</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_0124<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_245_124<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_245_024<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_245_014<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_245_012;</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_0125<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_245_125<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_245_025<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_245_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_245_012;</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_0134<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_245_134<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_245_034<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_245_014<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_245_013;</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_0135<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_245_135<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_245_035<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_245_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_245_013;</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_0145<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_245_145<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_245_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_245_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_245_014;</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_0234<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_245_234<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_245_034<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_245_024<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_245_023;</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_0235<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_245_235<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_245_035<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_245_025<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_245_023;</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_0245<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_245_245<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_245_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_245_025<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_245_024;</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_0345<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_245_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_245_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_245_035<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_245_034;</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_1234<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_245_234<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_245_134<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_245_124<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_245_123;</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_1235<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_245_235<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_245_135<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_245_125<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_245_123;</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_1245<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_245_245<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_245_145<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_245_125<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_245_124;</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_1345<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_245_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_245_145<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_245_135<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_245_134;</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1245_2345<sp/>=<sp/>mat[1][2]<sp/>*<sp/>det3_245_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_245_245<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_245_235<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_245_234;</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_0123<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_345_123<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_345_023<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_345_013<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_345_012;</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_0124<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_345_124<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_345_024<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_345_014<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_345_012;</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_0125<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_345_125<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_345_025<sp/>+<sp/>mat[1][2]<sp/>*<sp/>det3_345_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_345_012;</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_0134<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_345_134<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_345_034<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_345_014<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_345_013;</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_0135<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_345_135<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_345_035<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_345_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_345_013;</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_0145<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_345_145<sp/>-<sp/>mat[1][1]<sp/>*<sp/>det3_345_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_345_015<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_345_014;</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_0234<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_345_234<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_345_034<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_345_024<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_345_023;</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_0235<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_345_235<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_345_035<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_345_025<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_345_023;</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_0245<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_345_245<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_345_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_345_025<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_345_024;</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_0345<sp/>=<sp/>mat[1][0]<sp/>*<sp/>det3_345_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_345_045<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_345_035<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_345_034;</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_1234<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_345_234<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_345_134<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_345_124<sp/>-<sp/>mat[1][4]<sp/>*<sp/>det3_345_123;</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_1235<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_345_235<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_345_135<sp/>+<sp/>mat[1][3]<sp/>*<sp/>det3_345_125<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_345_123;</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_1245<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_345_245<sp/>-<sp/>mat[1][2]<sp/>*<sp/>det3_345_145<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_345_125<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_345_124;</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_1345<sp/>=<sp/>mat[1][1]<sp/>*<sp/>det3_345_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_345_145<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_345_135<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_345_134;</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det4_1345_2345<sp/>=<sp/>mat[1][2]<sp/>*<sp/>det3_345_345<sp/>-<sp/>mat[1][3]<sp/>*<sp/>det3_345_245<sp/>+<sp/>mat[1][4]<sp/>*<sp/>det3_345_235<sp/>-<sp/>mat[1][5]<sp/>*<sp/>det3_345_234;</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remaining<sp/>5x5<sp/>sub-determinants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01234_01234<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1234_1234<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1234_0234<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1234_0134<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det4_1234_0124<sp/>+<sp/>mat[0][4]<sp/>*<sp/>det4_1234_0123;</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01234_01235<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1234_1235<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1234_0235<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1234_0135<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det4_1234_0125<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1234_0123;</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01234_01245<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1234_1245<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1234_0245<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1234_0145<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1234_0125<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1234_0124;</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01234_01345<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1234_1345<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1234_0345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1234_0145<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1234_0135<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1234_0134;</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01234_02345<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1234_2345<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det4_1234_0345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1234_0245<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1234_0235<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1234_0234;</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01234_12345<sp/>=<sp/>mat[0][1]<sp/>*<sp/>det4_1234_2345<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det4_1234_1345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1234_1245<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1234_1235<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1234_1234;</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01235_01234<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1235_1234<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1235_0234<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1235_0134<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det4_1235_0124<sp/>+<sp/>mat[0][4]<sp/>*<sp/>det4_1235_0123;</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01235_01235<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1235_1235<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1235_0235<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1235_0135<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det4_1235_0125<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1235_0123;</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01235_01245<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1235_1245<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1235_0245<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1235_0145<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1235_0125<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1235_0124;</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01235_01345<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1235_1345<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1235_0345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1235_0145<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1235_0135<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1235_0134;</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01235_02345<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1235_2345<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det4_1235_0345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1235_0245<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1235_0235<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1235_0234;</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01235_12345<sp/>=<sp/>mat[0][1]<sp/>*<sp/>det4_1235_2345<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det4_1235_1345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1235_1245<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1235_1235<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1235_1234;</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01245_01234<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1245_1234<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1245_0234<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1245_0134<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det4_1245_0124<sp/>+<sp/>mat[0][4]<sp/>*<sp/>det4_1245_0123;</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01245_01235<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1245_1235<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1245_0235<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1245_0135<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det4_1245_0125<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1245_0123;</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01245_01245<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1245_1245<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1245_0245<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1245_0145<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1245_0125<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1245_0124;</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01245_01345<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1245_1345<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1245_0345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1245_0145<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1245_0135<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1245_0134;</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01245_02345<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1245_2345<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det4_1245_0345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1245_0245<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1245_0235<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1245_0234;</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01245_12345<sp/>=<sp/>mat[0][1]<sp/>*<sp/>det4_1245_2345<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det4_1245_1345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1245_1245<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1245_1235<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1245_1234;</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01345_01234<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1345_1234<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1345_0234<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1345_0134<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det4_1345_0124<sp/>+<sp/>mat[0][4]<sp/>*<sp/>det4_1345_0123;</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01345_01235<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1345_1235<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1345_0235<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1345_0135<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det4_1345_0125<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1345_0123;</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01345_01245<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1345_1245<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1345_0245<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_1345_0145<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1345_0125<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1345_0124;</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01345_01345<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1345_1345<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_1345_0345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1345_0145<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1345_0135<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1345_0134;</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01345_02345<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_1345_2345<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det4_1345_0345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1345_0245<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1345_0235<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1345_0234;</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_01345_12345<sp/>=<sp/>mat[0][1]<sp/>*<sp/>det4_1345_2345<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det4_1345_1345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_1345_1245<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_1345_1235<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_1345_1234;</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_02345_01234<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_2345_1234<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_2345_0234<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_2345_0134<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det4_2345_0124<sp/>+<sp/>mat[0][4]<sp/>*<sp/>det4_2345_0123;</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_02345_01235<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_2345_1235<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_2345_0235<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_2345_0135<sp/>-<sp/>mat[0][3]<sp/>*<sp/>det4_2345_0125<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_2345_0123;</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_02345_01245<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_2345_1245<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_2345_0245<sp/>+<sp/>mat[0][2]<sp/>*<sp/>det4_2345_0145<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_2345_0125<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_2345_0124;</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_02345_01345<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_2345_1345<sp/>-<sp/>mat[0][1]<sp/>*<sp/>det4_2345_0345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_2345_0145<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_2345_0135<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_2345_0134;</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_02345_02345<sp/>=<sp/>mat[0][0]<sp/>*<sp/>det4_2345_2345<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det4_2345_0345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_2345_0245<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_2345_0235<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_2345_0234;</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det5_02345_12345<sp/>=<sp/>mat[0][1]<sp/>*<sp/>det4_2345_2345<sp/>-<sp/>mat[0][2]<sp/>*<sp/>det4_2345_1345<sp/>+<sp/>mat[0][3]<sp/>*<sp/>det4_2345_1245<sp/>-<sp/>mat[0][4]<sp/>*<sp/>det4_2345_1235<sp/>+<sp/>mat[0][5]<sp/>*<sp/>det4_2345_1234;</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][0]<sp/>=<sp/><sp/>det5_12345_12345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][1]<sp/>=<sp/>-det5_02345_12345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][2]<sp/>=<sp/><sp/>det5_01345_12345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][3]<sp/>=<sp/>-det5_01245_12345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][4]<sp/>=<sp/><sp/>det5_01235_12345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0][5]<sp/>=<sp/>-det5_01234_12345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][0]<sp/>=<sp/>-det5_12345_02345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][1]<sp/>=<sp/><sp/>det5_02345_02345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][2]<sp/>=<sp/>-det5_01345_02345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][3]<sp/>=<sp/><sp/>det5_01245_02345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][4]<sp/>=<sp/>-det5_01235_02345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1][5]<sp/>=<sp/><sp/>det5_01234_02345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"></highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][0]<sp/>=<sp/><sp/>det5_12345_01345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][1]<sp/>=<sp/>-det5_02345_01345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][2]<sp/>=<sp/><sp/>det5_01345_01345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][3]<sp/>=<sp/>-det5_01245_01345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][4]<sp/>=<sp/><sp/>det5_01235_01345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2][5]<sp/>=<sp/>-det5_01234_01345<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"></highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][0]<sp/>=<sp/>-det5_12345_01245<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][1]<sp/>=<sp/><sp/>det5_02345_01245<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][2]<sp/>=<sp/>-det5_01345_01245<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][3]<sp/>=<sp/><sp/>det5_01245_01245<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][4]<sp/>=<sp/>-det5_01235_01245<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3][5]<sp/>=<sp/><sp/>det5_01234_01245<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4][0]<sp/>=<sp/><sp/>det5_12345_01235<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4][1]<sp/>=<sp/>-det5_02345_01235<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4][2]<sp/>=<sp/><sp/>det5_01345_01235<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4][3]<sp/>=<sp/>-det5_01245_01235<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4][4]<sp/>=<sp/><sp/>det5_01235_01235<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4][5]<sp/>=<sp/>-det5_01234_01235<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"></highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5][0]<sp/>=<sp/>-det5_12345_01234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5][1]<sp/>=<sp/><sp/>det5_02345_01234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5][2]<sp/>=<sp/>-det5_01345_01234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5][3]<sp/>=<sp/><sp/>det5_01245_01234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5][4]<sp/>=<sp/>-det5_01235_01234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5][5]<sp/>=<sp/><sp/>det5_01234_01234<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>0</highlight></codeline>
<codeline lineno="2498"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>6*40<sp/>=<sp/>240<sp/>multiplications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6<sp/>divisions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*mat<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d,<sp/>di;</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"></highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/>di<sp/>=<sp/>mat[0];</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>di;</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0]<sp/>=<sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>di;</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>-d;</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[6]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[12]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[18]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[24]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[30]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[6]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[7]<sp/>+=<sp/>mat[1]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[8]<sp/>+=<sp/>mat[2]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[9]<sp/>+=<sp/>mat[3]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[10]<sp/>+=<sp/>mat[4]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[11]<sp/>+=<sp/>mat[5]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[12]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[13]<sp/>+=<sp/>mat[1]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[14]<sp/>+=<sp/>mat[2]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[15]<sp/>+=<sp/>mat[3]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[16]<sp/>+=<sp/>mat[4]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[17]<sp/>+=<sp/>mat[5]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[18]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[19]<sp/>+=<sp/>mat[1]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[20]<sp/>+=<sp/>mat[2]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[21]<sp/>+=<sp/>mat[3]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[22]<sp/>+=<sp/>mat[4]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[23]<sp/>+=<sp/>mat[5]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[24]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[25]<sp/>+=<sp/>mat[1]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[26]<sp/>+=<sp/>mat[2]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[27]<sp/>+=<sp/>mat[3]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[28]<sp/>+=<sp/>mat[4]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[29]<sp/>+=<sp/>mat[5]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[30]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[31]<sp/>+=<sp/>mat[1]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[32]<sp/>+=<sp/>mat[2]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[33]<sp/>+=<sp/>mat[3]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[34]<sp/>+=<sp/>mat[4]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[35]<sp/>+=<sp/>mat[5]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/>di<sp/>=<sp/>mat[7];</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>*=<sp/>di;</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[7]<sp/>=<sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>di;</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[6]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[8]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[9]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[10]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[11]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>-d;</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[13]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[19]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[25]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[31]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[1]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0]<sp/>+=<sp/>mat[6]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2]<sp/>+=<sp/>mat[8]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3]<sp/>+=<sp/>mat[9]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4]<sp/>+=<sp/>mat[10]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5]<sp/>+=<sp/>mat[11]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[13]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[12]<sp/>+=<sp/>mat[6]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[14]<sp/>+=<sp/>mat[8]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[15]<sp/>+=<sp/>mat[9]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[16]<sp/>+=<sp/>mat[10]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[17]<sp/>+=<sp/>mat[11]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[19]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[18]<sp/>+=<sp/>mat[6]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[20]<sp/>+=<sp/>mat[8]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[21]<sp/>+=<sp/>mat[9]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[22]<sp/>+=<sp/>mat[10]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[23]<sp/>+=<sp/>mat[11]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[25]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[24]<sp/>+=<sp/>mat[6]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[26]<sp/>+=<sp/>mat[8]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[27]<sp/>+=<sp/>mat[9]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[28]<sp/>+=<sp/>mat[10]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[29]<sp/>+=<sp/>mat[11]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[31]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[30]<sp/>+=<sp/>mat[6]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[32]<sp/>+=<sp/>mat[8]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[33]<sp/>+=<sp/>mat[9]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[34]<sp/>+=<sp/>mat[10]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[35]<sp/>+=<sp/>mat[11]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/>di<sp/>=<sp/>mat[14];</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>*=<sp/>di;</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[14]<sp/>=<sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>di;</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[12]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[13]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[15]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[16]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[17]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>-d;</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[8]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[20]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[26]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[32]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[2]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0]<sp/>+=<sp/>mat[12]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1]<sp/>+=<sp/>mat[13]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3]<sp/>+=<sp/>mat[15]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4]<sp/>+=<sp/>mat[16]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5]<sp/>+=<sp/>mat[17]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[8]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[6]<sp/>+=<sp/>mat[12]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[7]<sp/>+=<sp/>mat[13]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[9]<sp/>+=<sp/>mat[15]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[10]<sp/>+=<sp/>mat[16]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[11]<sp/>+=<sp/>mat[17]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[20]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[18]<sp/>+=<sp/>mat[12]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[19]<sp/>+=<sp/>mat[13]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[21]<sp/>+=<sp/>mat[15]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[22]<sp/>+=<sp/>mat[16]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[23]<sp/>+=<sp/>mat[17]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[26]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[24]<sp/>+=<sp/>mat[12]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[25]<sp/>+=<sp/>mat[13]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[27]<sp/>+=<sp/>mat[15]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[28]<sp/>+=<sp/>mat[16]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[29]<sp/>+=<sp/>mat[17]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[32]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[30]<sp/>+=<sp/>mat[12]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[31]<sp/>+=<sp/>mat[13]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[33]<sp/>+=<sp/>mat[15]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[34]<sp/>+=<sp/>mat[16]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[35]<sp/>+=<sp/>mat[17]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/>di<sp/>=<sp/>mat[21];</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>*=<sp/>di;</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[21]<sp/>=<sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>di;</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[18]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[19]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[20]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[22]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[23]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>-d;</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[9]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[15]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[27]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[33]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[3]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0]<sp/>+=<sp/>mat[18]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1]<sp/>+=<sp/>mat[19]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2]<sp/>+=<sp/>mat[20]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4]<sp/>+=<sp/>mat[22]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5]<sp/>+=<sp/>mat[23]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[9]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[6]<sp/>+=<sp/>mat[18]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[7]<sp/>+=<sp/>mat[19]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[8]<sp/>+=<sp/>mat[20]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[10]<sp/>+=<sp/>mat[22]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[11]<sp/>+=<sp/>mat[23]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[15]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[12]<sp/>+=<sp/>mat[18]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[13]<sp/>+=<sp/>mat[19]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[14]<sp/>+=<sp/>mat[20]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[16]<sp/>+=<sp/>mat[22]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[17]<sp/>+=<sp/>mat[23]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[27]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[24]<sp/>+=<sp/>mat[18]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[25]<sp/>+=<sp/>mat[19]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[26]<sp/>+=<sp/>mat[20]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[28]<sp/>+=<sp/>mat[22]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[29]<sp/>+=<sp/>mat[23]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[33]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[30]<sp/>+=<sp/>mat[18]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[31]<sp/>+=<sp/>mat[19]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[32]<sp/>+=<sp/>mat[20]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[34]<sp/>+=<sp/>mat[22]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[35]<sp/>+=<sp/>mat[23]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/>di<sp/>=<sp/>mat[28];</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>*=<sp/>di;</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[28]<sp/>=<sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>di;</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[24]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[25]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[26]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[27]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[29]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>-d;</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[10]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[16]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[22]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[34]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[4]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0]<sp/>+=<sp/>mat[24]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1]<sp/>+=<sp/>mat[25]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2]<sp/>+=<sp/>mat[26]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3]<sp/>+=<sp/>mat[27]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5]<sp/>+=<sp/>mat[29]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[10]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[6]<sp/>+=<sp/>mat[24]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[7]<sp/>+=<sp/>mat[25]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[8]<sp/>+=<sp/>mat[26]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[9]<sp/>+=<sp/>mat[27]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[11]<sp/>+=<sp/>mat[29]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[16]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[12]<sp/>+=<sp/>mat[24]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[13]<sp/>+=<sp/>mat[25]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[14]<sp/>+=<sp/>mat[26]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[15]<sp/>+=<sp/>mat[27]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[17]<sp/>+=<sp/>mat[29]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[22]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[18]<sp/>+=<sp/>mat[24]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[19]<sp/>+=<sp/>mat[25]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[20]<sp/>+=<sp/>mat[26]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[21]<sp/>+=<sp/>mat[27]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[23]<sp/>+=<sp/>mat[29]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[34]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[30]<sp/>+=<sp/>mat[24]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[31]<sp/>+=<sp/>mat[25]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[32]<sp/>+=<sp/>mat[26]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[33]<sp/>+=<sp/>mat[27]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[35]<sp/>+=<sp/>mat[29]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/>di<sp/>=<sp/>mat[35];</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>*=<sp/>di;</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[35]<sp/>=<sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>di;</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[30]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[31]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[32]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[33]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[34]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>-d;</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[11]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[17]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[23]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[29]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[5]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0]<sp/>+=<sp/>mat[30]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1]<sp/>+=<sp/>mat[31]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2]<sp/>+=<sp/>mat[32]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3]<sp/>+=<sp/>mat[33]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4]<sp/>+=<sp/>mat[34]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[11]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[6]<sp/>+=<sp/>mat[30]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[7]<sp/>+=<sp/>mat[31]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[8]<sp/>+=<sp/>mat[32]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[9]<sp/>+=<sp/>mat[33]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[10]<sp/>+=<sp/>mat[34]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[17]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[12]<sp/>+=<sp/>mat[30]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[13]<sp/>+=<sp/>mat[31]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[14]<sp/>+=<sp/>mat[32]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[15]<sp/>+=<sp/>mat[33]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[16]<sp/>+=<sp/>mat[34]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[23]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[18]<sp/>+=<sp/>mat[30]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[19]<sp/>+=<sp/>mat[31]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[20]<sp/>+=<sp/>mat[32]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[21]<sp/>+=<sp/>mat[33]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[22]<sp/>+=<sp/>mat[34]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>mat[29]<sp/>*<sp/>di;</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[24]<sp/>+=<sp/>mat[30]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[25]<sp/>+=<sp/>mat[31]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[26]<sp/>+=<sp/>mat[32]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[27]<sp/>+=<sp/>mat[33]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[28]<sp/>+=<sp/>mat[34]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"></highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>s<sp/>!=<sp/>0.0f<sp/>&amp;&amp;<sp/>!FLOAT_IS_NAN(<sp/>s<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="2771"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>6*27+2*30<sp/>=<sp/>222<sp/>multiplications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>2*1<sp/><sp/>=<sp/><sp/><sp/>2<sp/>divisions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>r0,<sp/>r1,<sp/>r2,<sp/>r3;</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>c0,<sp/>c1,<sp/>c2,<sp/>det,<sp/>invDet;</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*mat<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"></highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r0<sp/>=<sp/>m0.Inverse();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/>c0<sp/>=<sp/>mat[1*6+1]<sp/>*<sp/>mat[2*6+2]<sp/>-<sp/>mat[1*6+2]<sp/>*<sp/>mat[2*6+1];</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>mat[1*6+2]<sp/>*<sp/>mat[2*6+0]<sp/>-<sp/>mat[1*6+0]<sp/>*<sp/>mat[2*6+2];</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/>c2<sp/>=<sp/>mat[1*6+0]<sp/>*<sp/>mat[2*6+1]<sp/>-<sp/>mat[1*6+1]<sp/>*<sp/>mat[2*6+0];</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"></highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>mat[0*6+0]<sp/>*<sp/>c0<sp/>+<sp/>mat[0*6+1]<sp/>*<sp/>c1<sp/>+<sp/>mat[0*6+2]<sp/>*<sp/>c2;</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"></highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>det<sp/>)<sp/>&lt;<sp/>MATRIX_INVERSE_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"></highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/>invDet<sp/>=<sp/>1.0f<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"></highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[0][0]<sp/>=<sp/>c0<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[0][1]<sp/>=<sp/>(<sp/>mat[0*6+2]<sp/>*<sp/>mat[2*6+1]<sp/>-<sp/>mat[0*6+1]<sp/>*<sp/>mat[2*6+2]<sp/>)<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[0][2]<sp/>=<sp/>(<sp/>mat[0*6+1]<sp/>*<sp/>mat[1*6+2]<sp/>-<sp/>mat[0*6+2]<sp/>*<sp/>mat[1*6+1]<sp/>)<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[1][0]<sp/>=<sp/>c1<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[1][1]<sp/>=<sp/>(<sp/>mat[0*6+0]<sp/>*<sp/>mat[2*6+2]<sp/>-<sp/>mat[0*6+2]<sp/>*<sp/>mat[2*6+0]<sp/>)<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[1][2]<sp/>=<sp/>(<sp/>mat[0*6+2]<sp/>*<sp/>mat[1*6+0]<sp/>-<sp/>mat[0*6+0]<sp/>*<sp/>mat[1*6+2]<sp/>)<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[2][0]<sp/>=<sp/>c2<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[2][1]<sp/>=<sp/>(<sp/>mat[0*6+1]<sp/>*<sp/>mat[2*6+0]<sp/>-<sp/>mat[0*6+0]<sp/>*<sp/>mat[2*6+1]<sp/>)<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/>r0[2][2]<sp/>=<sp/>(<sp/>mat[0*6+0]<sp/>*<sp/>mat[1*6+1]<sp/>-<sp/>mat[0*6+1]<sp/>*<sp/>mat[1*6+0]<sp/>)<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"></highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r1<sp/>=<sp/>r0<sp/>*<sp/>m1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/>r1[0][0]<sp/>=<sp/>r0[0][0]<sp/>*<sp/>mat[0*6+3]<sp/>+<sp/>r0[0][1]<sp/>*<sp/>mat[1*6+3]<sp/>+<sp/>r0[0][2]<sp/>*<sp/>mat[2*6+3];</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/>r1[0][1]<sp/>=<sp/>r0[0][0]<sp/>*<sp/>mat[0*6+4]<sp/>+<sp/>r0[0][1]<sp/>*<sp/>mat[1*6+4]<sp/>+<sp/>r0[0][2]<sp/>*<sp/>mat[2*6+4];</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/>r1[0][2]<sp/>=<sp/>r0[0][0]<sp/>*<sp/>mat[0*6+5]<sp/>+<sp/>r0[0][1]<sp/>*<sp/>mat[1*6+5]<sp/>+<sp/>r0[0][2]<sp/>*<sp/>mat[2*6+5];</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/>r1[1][0]<sp/>=<sp/>r0[1][0]<sp/>*<sp/>mat[0*6+3]<sp/>+<sp/>r0[1][1]<sp/>*<sp/>mat[1*6+3]<sp/>+<sp/>r0[1][2]<sp/>*<sp/>mat[2*6+3];</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/>r1[1][1]<sp/>=<sp/>r0[1][0]<sp/>*<sp/>mat[0*6+4]<sp/>+<sp/>r0[1][1]<sp/>*<sp/>mat[1*6+4]<sp/>+<sp/>r0[1][2]<sp/>*<sp/>mat[2*6+4];</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/>r1[1][2]<sp/>=<sp/>r0[1][0]<sp/>*<sp/>mat[0*6+5]<sp/>+<sp/>r0[1][1]<sp/>*<sp/>mat[1*6+5]<sp/>+<sp/>r0[1][2]<sp/>*<sp/>mat[2*6+5];</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/>r1[2][0]<sp/>=<sp/>r0[2][0]<sp/>*<sp/>mat[0*6+3]<sp/>+<sp/>r0[2][1]<sp/>*<sp/>mat[1*6+3]<sp/>+<sp/>r0[2][2]<sp/>*<sp/>mat[2*6+3];</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/>r1[2][1]<sp/>=<sp/>r0[2][0]<sp/>*<sp/>mat[0*6+4]<sp/>+<sp/>r0[2][1]<sp/>*<sp/>mat[1*6+4]<sp/>+<sp/>r0[2][2]<sp/>*<sp/>mat[2*6+4];</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/>r1[2][2]<sp/>=<sp/>r0[2][0]<sp/>*<sp/>mat[0*6+5]<sp/>+<sp/>r0[2][1]<sp/>*<sp/>mat[1*6+5]<sp/>+<sp/>r0[2][2]<sp/>*<sp/>mat[2*6+5];</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"></highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r2<sp/>=<sp/>m2<sp/>*<sp/>r1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[0][0]<sp/>=<sp/>mat[3*6+0]<sp/>*<sp/>r1[0][0]<sp/>+<sp/>mat[3*6+1]<sp/>*<sp/>r1[1][0]<sp/>+<sp/>mat[3*6+2]<sp/>*<sp/>r1[2][0];</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[0][1]<sp/>=<sp/>mat[3*6+0]<sp/>*<sp/>r1[0][1]<sp/>+<sp/>mat[3*6+1]<sp/>*<sp/>r1[1][1]<sp/>+<sp/>mat[3*6+2]<sp/>*<sp/>r1[2][1];</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[0][2]<sp/>=<sp/>mat[3*6+0]<sp/>*<sp/>r1[0][2]<sp/>+<sp/>mat[3*6+1]<sp/>*<sp/>r1[1][2]<sp/>+<sp/>mat[3*6+2]<sp/>*<sp/>r1[2][2];</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[1][0]<sp/>=<sp/>mat[4*6+0]<sp/>*<sp/>r1[0][0]<sp/>+<sp/>mat[4*6+1]<sp/>*<sp/>r1[1][0]<sp/>+<sp/>mat[4*6+2]<sp/>*<sp/>r1[2][0];</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[1][1]<sp/>=<sp/>mat[4*6+0]<sp/>*<sp/>r1[0][1]<sp/>+<sp/>mat[4*6+1]<sp/>*<sp/>r1[1][1]<sp/>+<sp/>mat[4*6+2]<sp/>*<sp/>r1[2][1];</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[1][2]<sp/>=<sp/>mat[4*6+0]<sp/>*<sp/>r1[0][2]<sp/>+<sp/>mat[4*6+1]<sp/>*<sp/>r1[1][2]<sp/>+<sp/>mat[4*6+2]<sp/>*<sp/>r1[2][2];</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[2][0]<sp/>=<sp/>mat[5*6+0]<sp/>*<sp/>r1[0][0]<sp/>+<sp/>mat[5*6+1]<sp/>*<sp/>r1[1][0]<sp/>+<sp/>mat[5*6+2]<sp/>*<sp/>r1[2][0];</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[2][1]<sp/>=<sp/>mat[5*6+0]<sp/>*<sp/>r1[0][1]<sp/>+<sp/>mat[5*6+1]<sp/>*<sp/>r1[1][1]<sp/>+<sp/>mat[5*6+2]<sp/>*<sp/>r1[2][1];</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[2][2]<sp/>=<sp/>mat[5*6+0]<sp/>*<sp/>r1[0][2]<sp/>+<sp/>mat[5*6+1]<sp/>*<sp/>r1[1][2]<sp/>+<sp/>mat[5*6+2]<sp/>*<sp/>r1[2][2];</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r3<sp/>=<sp/>r2<sp/>-<sp/>m3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[0][0]<sp/>=<sp/>r2[0][0]<sp/>-<sp/>mat[3*6+3];</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[0][1]<sp/>=<sp/>r2[0][1]<sp/>-<sp/>mat[3*6+4];</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[0][2]<sp/>=<sp/>r2[0][2]<sp/>-<sp/>mat[3*6+5];</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[1][0]<sp/>=<sp/>r2[1][0]<sp/>-<sp/>mat[4*6+3];</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[1][1]<sp/>=<sp/>r2[1][1]<sp/>-<sp/>mat[4*6+4];</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[1][2]<sp/>=<sp/>r2[1][2]<sp/>-<sp/>mat[4*6+5];</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[2][0]<sp/>=<sp/>r2[2][0]<sp/>-<sp/>mat[5*6+3];</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[2][1]<sp/>=<sp/>r2[2][1]<sp/>-<sp/>mat[5*6+4];</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[2][2]<sp/>=<sp/>r2[2][2]<sp/>-<sp/>mat[5*6+5];</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"></highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r3.InverseSelf();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[0][0]<sp/>=<sp/>r3[1][1]<sp/>*<sp/>r3[2][2]<sp/>-<sp/>r3[1][2]<sp/>*<sp/>r3[2][1];</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[1][0]<sp/>=<sp/>r3[1][2]<sp/>*<sp/>r3[2][0]<sp/>-<sp/>r3[1][0]<sp/>*<sp/>r3[2][2];</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[2][0]<sp/>=<sp/>r3[1][0]<sp/>*<sp/>r3[2][1]<sp/>-<sp/>r3[1][1]<sp/>*<sp/>r3[2][0];</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"></highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>r3[0][0]<sp/>*<sp/>r2[0][0]<sp/>+<sp/>r3[0][1]<sp/>*<sp/>r2[1][0]<sp/>+<sp/>r3[0][2]<sp/>*<sp/>r2[2][0];</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"></highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>det<sp/>)<sp/>&lt;<sp/>MATRIX_INVERSE_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"></highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/>invDet<sp/>=<sp/>1.0f<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"></highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[0][1]<sp/>=<sp/>r3[0][2]<sp/>*<sp/>r3[2][1]<sp/>-<sp/>r3[0][1]<sp/>*<sp/>r3[2][2];</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[0][2]<sp/>=<sp/>r3[0][1]<sp/>*<sp/>r3[1][2]<sp/>-<sp/>r3[0][2]<sp/>*<sp/>r3[1][1];</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[1][1]<sp/>=<sp/>r3[0][0]<sp/>*<sp/>r3[2][2]<sp/>-<sp/>r3[0][2]<sp/>*<sp/>r3[2][0];</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[1][2]<sp/>=<sp/>r3[0][2]<sp/>*<sp/>r3[1][0]<sp/>-<sp/>r3[0][0]<sp/>*<sp/>r3[1][2];</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[2][1]<sp/>=<sp/>r3[0][1]<sp/>*<sp/>r3[2][0]<sp/>-<sp/>r3[0][0]<sp/>*<sp/>r3[2][1];</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[2][2]<sp/>=<sp/>r3[0][0]<sp/>*<sp/>r3[1][1]<sp/>-<sp/>r3[0][1]<sp/>*<sp/>r3[1][0];</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"></highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[0][0]<sp/>=<sp/>r2[0][0]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[0][1]<sp/>=<sp/>r2[0][1]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[0][2]<sp/>=<sp/>r2[0][2]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[1][0]<sp/>=<sp/>r2[1][0]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[1][1]<sp/>=<sp/>r2[1][1]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[1][2]<sp/>=<sp/>r2[1][2]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[2][0]<sp/>=<sp/>r2[2][0]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[2][1]<sp/>=<sp/>r2[2][1]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/>r3[2][2]<sp/>=<sp/>r2[2][2]<sp/>*<sp/>invDet;</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"></highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r2<sp/>=<sp/>m2<sp/>*<sp/>r0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[0][0]<sp/>=<sp/>mat[3*6+0]<sp/>*<sp/>r0[0][0]<sp/>+<sp/>mat[3*6+1]<sp/>*<sp/>r0[1][0]<sp/>+<sp/>mat[3*6+2]<sp/>*<sp/>r0[2][0];</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[0][1]<sp/>=<sp/>mat[3*6+0]<sp/>*<sp/>r0[0][1]<sp/>+<sp/>mat[3*6+1]<sp/>*<sp/>r0[1][1]<sp/>+<sp/>mat[3*6+2]<sp/>*<sp/>r0[2][1];</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[0][2]<sp/>=<sp/>mat[3*6+0]<sp/>*<sp/>r0[0][2]<sp/>+<sp/>mat[3*6+1]<sp/>*<sp/>r0[1][2]<sp/>+<sp/>mat[3*6+2]<sp/>*<sp/>r0[2][2];</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[1][0]<sp/>=<sp/>mat[4*6+0]<sp/>*<sp/>r0[0][0]<sp/>+<sp/>mat[4*6+1]<sp/>*<sp/>r0[1][0]<sp/>+<sp/>mat[4*6+2]<sp/>*<sp/>r0[2][0];</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[1][1]<sp/>=<sp/>mat[4*6+0]<sp/>*<sp/>r0[0][1]<sp/>+<sp/>mat[4*6+1]<sp/>*<sp/>r0[1][1]<sp/>+<sp/>mat[4*6+2]<sp/>*<sp/>r0[2][1];</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[1][2]<sp/>=<sp/>mat[4*6+0]<sp/>*<sp/>r0[0][2]<sp/>+<sp/>mat[4*6+1]<sp/>*<sp/>r0[1][2]<sp/>+<sp/>mat[4*6+2]<sp/>*<sp/>r0[2][2];</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[2][0]<sp/>=<sp/>mat[5*6+0]<sp/>*<sp/>r0[0][0]<sp/>+<sp/>mat[5*6+1]<sp/>*<sp/>r0[1][0]<sp/>+<sp/>mat[5*6+2]<sp/>*<sp/>r0[2][0];</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[2][1]<sp/>=<sp/>mat[5*6+0]<sp/>*<sp/>r0[0][1]<sp/>+<sp/>mat[5*6+1]<sp/>*<sp/>r0[1][1]<sp/>+<sp/>mat[5*6+2]<sp/>*<sp/>r0[2][1];</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[2][2]<sp/>=<sp/>mat[5*6+0]<sp/>*<sp/>r0[0][2]<sp/>+<sp/>mat[5*6+1]<sp/>*<sp/>r0[1][2]<sp/>+<sp/>mat[5*6+2]<sp/>*<sp/>r0[2][2];</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"></highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m2<sp/>=<sp/>r3<sp/>*<sp/>r2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3*6+0]<sp/>=<sp/>r3[0][0]<sp/>*<sp/>r2[0][0]<sp/>+<sp/>r3[0][1]<sp/>*<sp/>r2[1][0]<sp/>+<sp/>r3[0][2]<sp/>*<sp/>r2[2][0];</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3*6+1]<sp/>=<sp/>r3[0][0]<sp/>*<sp/>r2[0][1]<sp/>+<sp/>r3[0][1]<sp/>*<sp/>r2[1][1]<sp/>+<sp/>r3[0][2]<sp/>*<sp/>r2[2][1];</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3*6+2]<sp/>=<sp/>r3[0][0]<sp/>*<sp/>r2[0][2]<sp/>+<sp/>r3[0][1]<sp/>*<sp/>r2[1][2]<sp/>+<sp/>r3[0][2]<sp/>*<sp/>r2[2][2];</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4*6+0]<sp/>=<sp/>r3[1][0]<sp/>*<sp/>r2[0][0]<sp/>+<sp/>r3[1][1]<sp/>*<sp/>r2[1][0]<sp/>+<sp/>r3[1][2]<sp/>*<sp/>r2[2][0];</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4*6+1]<sp/>=<sp/>r3[1][0]<sp/>*<sp/>r2[0][1]<sp/>+<sp/>r3[1][1]<sp/>*<sp/>r2[1][1]<sp/>+<sp/>r3[1][2]<sp/>*<sp/>r2[2][1];</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4*6+2]<sp/>=<sp/>r3[1][0]<sp/>*<sp/>r2[0][2]<sp/>+<sp/>r3[1][1]<sp/>*<sp/>r2[1][2]<sp/>+<sp/>r3[1][2]<sp/>*<sp/>r2[2][2];</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5*6+0]<sp/>=<sp/>r3[2][0]<sp/>*<sp/>r2[0][0]<sp/>+<sp/>r3[2][1]<sp/>*<sp/>r2[1][0]<sp/>+<sp/>r3[2][2]<sp/>*<sp/>r2[2][0];</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5*6+1]<sp/>=<sp/>r3[2][0]<sp/>*<sp/>r2[0][1]<sp/>+<sp/>r3[2][1]<sp/>*<sp/>r2[1][1]<sp/>+<sp/>r3[2][2]<sp/>*<sp/>r2[2][1];</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5*6+2]<sp/>=<sp/>r3[2][0]<sp/>*<sp/>r2[0][2]<sp/>+<sp/>r3[2][1]<sp/>*<sp/>r2[1][2]<sp/>+<sp/>r3[2][2]<sp/>*<sp/>r2[2][2];</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"></highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m0<sp/>=<sp/>r0<sp/>-<sp/>r1<sp/>*<sp/>m2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0*6+0]<sp/>=<sp/>r0[0][0]<sp/>-<sp/>r1[0][0]<sp/>*<sp/>mat[3*6+0]<sp/>-<sp/>r1[0][1]<sp/>*<sp/>mat[4*6+0]<sp/>-<sp/>r1[0][2]<sp/>*<sp/>mat[5*6+0];</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0*6+1]<sp/>=<sp/>r0[0][1]<sp/>-<sp/>r1[0][0]<sp/>*<sp/>mat[3*6+1]<sp/>-<sp/>r1[0][1]<sp/>*<sp/>mat[4*6+1]<sp/>-<sp/>r1[0][2]<sp/>*<sp/>mat[5*6+1];</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0*6+2]<sp/>=<sp/>r0[0][2]<sp/>-<sp/>r1[0][0]<sp/>*<sp/>mat[3*6+2]<sp/>-<sp/>r1[0][1]<sp/>*<sp/>mat[4*6+2]<sp/>-<sp/>r1[0][2]<sp/>*<sp/>mat[5*6+2];</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1*6+0]<sp/>=<sp/>r0[1][0]<sp/>-<sp/>r1[1][0]<sp/>*<sp/>mat[3*6+0]<sp/>-<sp/>r1[1][1]<sp/>*<sp/>mat[4*6+0]<sp/>-<sp/>r1[1][2]<sp/>*<sp/>mat[5*6+0];</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1*6+1]<sp/>=<sp/>r0[1][1]<sp/>-<sp/>r1[1][0]<sp/>*<sp/>mat[3*6+1]<sp/>-<sp/>r1[1][1]<sp/>*<sp/>mat[4*6+1]<sp/>-<sp/>r1[1][2]<sp/>*<sp/>mat[5*6+1];</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1*6+2]<sp/>=<sp/>r0[1][2]<sp/>-<sp/>r1[1][0]<sp/>*<sp/>mat[3*6+2]<sp/>-<sp/>r1[1][1]<sp/>*<sp/>mat[4*6+2]<sp/>-<sp/>r1[1][2]<sp/>*<sp/>mat[5*6+2];</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2*6+0]<sp/>=<sp/>r0[2][0]<sp/>-<sp/>r1[2][0]<sp/>*<sp/>mat[3*6+0]<sp/>-<sp/>r1[2][1]<sp/>*<sp/>mat[4*6+0]<sp/>-<sp/>r1[2][2]<sp/>*<sp/>mat[5*6+0];</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2*6+1]<sp/>=<sp/>r0[2][1]<sp/>-<sp/>r1[2][0]<sp/>*<sp/>mat[3*6+1]<sp/>-<sp/>r1[2][1]<sp/>*<sp/>mat[4*6+1]<sp/>-<sp/>r1[2][2]<sp/>*<sp/>mat[5*6+1];</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2*6+2]<sp/>=<sp/>r0[2][2]<sp/>-<sp/>r1[2][0]<sp/>*<sp/>mat[3*6+2]<sp/>-<sp/>r1[2][1]<sp/>*<sp/>mat[4*6+2]<sp/>-<sp/>r1[2][2]<sp/>*<sp/>mat[5*6+2];</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"></highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m1<sp/>=<sp/>r1<sp/>*<sp/>r3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0*6+3]<sp/>=<sp/>r1[0][0]<sp/>*<sp/>r3[0][0]<sp/>+<sp/>r1[0][1]<sp/>*<sp/>r3[1][0]<sp/>+<sp/>r1[0][2]<sp/>*<sp/>r3[2][0];</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0*6+4]<sp/>=<sp/>r1[0][0]<sp/>*<sp/>r3[0][1]<sp/>+<sp/>r1[0][1]<sp/>*<sp/>r3[1][1]<sp/>+<sp/>r1[0][2]<sp/>*<sp/>r3[2][1];</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[0*6+5]<sp/>=<sp/>r1[0][0]<sp/>*<sp/>r3[0][2]<sp/>+<sp/>r1[0][1]<sp/>*<sp/>r3[1][2]<sp/>+<sp/>r1[0][2]<sp/>*<sp/>r3[2][2];</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1*6+3]<sp/>=<sp/>r1[1][0]<sp/>*<sp/>r3[0][0]<sp/>+<sp/>r1[1][1]<sp/>*<sp/>r3[1][0]<sp/>+<sp/>r1[1][2]<sp/>*<sp/>r3[2][0];</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1*6+4]<sp/>=<sp/>r1[1][0]<sp/>*<sp/>r3[0][1]<sp/>+<sp/>r1[1][1]<sp/>*<sp/>r3[1][1]<sp/>+<sp/>r1[1][2]<sp/>*<sp/>r3[2][1];</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[1*6+5]<sp/>=<sp/>r1[1][0]<sp/>*<sp/>r3[0][2]<sp/>+<sp/>r1[1][1]<sp/>*<sp/>r3[1][2]<sp/>+<sp/>r1[1][2]<sp/>*<sp/>r3[2][2];</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2*6+3]<sp/>=<sp/>r1[2][0]<sp/>*<sp/>r3[0][0]<sp/>+<sp/>r1[2][1]<sp/>*<sp/>r3[1][0]<sp/>+<sp/>r1[2][2]<sp/>*<sp/>r3[2][0];</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2*6+4]<sp/>=<sp/>r1[2][0]<sp/>*<sp/>r3[0][1]<sp/>+<sp/>r1[2][1]<sp/>*<sp/>r3[1][1]<sp/>+<sp/>r1[2][2]<sp/>*<sp/>r3[2][1];</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[2*6+5]<sp/>=<sp/>r1[2][0]<sp/>*<sp/>r3[0][2]<sp/>+<sp/>r1[2][1]<sp/>*<sp/>r3[1][2]<sp/>+<sp/>r1[2][2]<sp/>*<sp/>r3[2][2];</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m3<sp/>=<sp/>-r3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3*6+3]<sp/>=<sp/>-r3[0][0];</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3*6+4]<sp/>=<sp/>-r3[0][1];</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[3*6+5]<sp/>=<sp/>-r3[0][2];</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4*6+3]<sp/>=<sp/>-r3[1][0];</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4*6+4]<sp/>=<sp/>-r3[1][1];</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[4*6+5]<sp/>=<sp/>-r3[1][2];</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5*6+3]<sp/>=<sp/>-r3[2][0];</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5*6+4]<sp/>=<sp/>-r3[2][1];</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[5*6+5]<sp/>=<sp/>-r3[2][2];</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"></highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2920"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"></highlight></codeline>
<codeline lineno="2922"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2923"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="2924"><highlight class="comment">idMat6::ToString</highlight></codeline>
<codeline lineno="2925"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="2926"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2927"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*idMat6::ToString(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idStr::FloatArrayToString(<sp/>ToFloatPtr(),<sp/>GetDimension(),<sp/>precision<sp/>);</highlight></codeline>
<codeline lineno="2929"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"></highlight></codeline>
<codeline lineno="2931"><highlight class="normal"></highlight></codeline>
<codeline lineno="2932"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2933"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2934"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>idMatX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2935"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2936"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2937"><highlight class="normal"></highlight></codeline>
<codeline lineno="2938"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>idMatX::temp[MATX_MAX_TEMP+4];</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>idMatX::tempPtr<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>(<sp/>(<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>idMatX::temp<sp/>+<sp/>15<sp/>)<sp/>&amp;<sp/>~15<sp/>);</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>idMatX::tempIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight></codeline>
<codeline lineno="2942"><highlight class="normal"></highlight></codeline>
<codeline lineno="2943"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2944"><highlight class="comment">============</highlight></codeline>
<codeline lineno="2945"><highlight class="comment">idMatX::ChangeSize</highlight></codeline>
<codeline lineno="2946"><highlight class="comment">============</highlight></codeline>
<codeline lineno="2947"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2948"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::ChangeSize(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rows,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>columns,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>makeZero<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alloc<sp/>=<sp/>(<sp/>rows<sp/>*<sp/>columns<sp/>+<sp/>3<sp/>)<sp/>&amp;<sp/>~3;</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>alloc<sp/>&gt;<sp/>alloced<sp/>&amp;&amp;<sp/>alloced<sp/>!=<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*oldMat<sp/>=<sp/>mat;</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>Mem_Alloc16(<sp/>alloc<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>makeZero<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(<sp/>mat,<sp/>0,<sp/>alloc<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloced<sp/>=<sp/>alloc;</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>oldMat<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minRow<sp/>=<sp/>Min(<sp/>numRows,<sp/>rows<sp/>);</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minColumn<sp/>=<sp/>Min(<sp/>numColumns,<sp/>columns<sp/>);</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>minRow;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>minColumn;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[<sp/>i<sp/>*<sp/>columns<sp/>+<sp/>j<sp/>]<sp/>=<sp/>oldMat[<sp/>i<sp/>*<sp/>numColumns<sp/>+<sp/>j<sp/>];</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free16(<sp/>oldMat<sp/>);</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>columns<sp/>&lt;<sp/>numColumns<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minRow<sp/>=<sp/>Min(<sp/>numRows,<sp/>rows<sp/>);</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>minRow;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>columns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[<sp/>i<sp/>*<sp/>columns<sp/>+<sp/>j<sp/>]<sp/>=<sp/>mat[<sp/>i<sp/>*<sp/>numColumns<sp/>+<sp/>j<sp/>];</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>columns<sp/>&gt;<sp/>numColumns<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>Min(<sp/>numRows,<sp/>rows<sp/>)<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>makeZero<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>columns<sp/>-<sp/>1;<sp/>j<sp/>&gt;=<sp/>numColumns;<sp/>j--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[<sp/>i<sp/>*<sp/>columns<sp/>+<sp/>j<sp/>]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>numColumns<sp/>-<sp/>1;<sp/>j<sp/>&gt;=<sp/>0;<sp/>j--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[<sp/>i<sp/>*<sp/>columns<sp/>+<sp/>j<sp/>]<sp/>=<sp/>mat[<sp/>i<sp/>*<sp/>numColumns<sp/>+<sp/>j<sp/>];</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>makeZero<sp/>&amp;&amp;<sp/>rows<sp/>&gt;<sp/>numRows<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(<sp/>mat<sp/>+<sp/>numRows<sp/>*<sp/>columns,<sp/>0,<sp/>(<sp/>rows<sp/>-<sp/>numRows<sp/>)<sp/>*<sp/>columns<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/>numRows<sp/>=<sp/>rows;</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/>numColumns<sp/>=<sp/>columns;</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/>MATX_CLEAREND();</highlight></codeline>
<codeline lineno="2994"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"></highlight></codeline>
<codeline lineno="2996"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2997"><highlight class="comment">============</highlight></codeline>
<codeline lineno="2998"><highlight class="comment">idMatX::RemoveRow</highlight></codeline>
<codeline lineno="2999"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3000"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;idMatX::RemoveRow(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"></highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>r<sp/>&lt;<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"></highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/>numRows--;</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"></highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>r;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>&amp;mat[i<sp/>*<sp/>numColumns],<sp/>&amp;mat[(<sp/>i<sp/>+<sp/>1<sp/>)<sp/>*<sp/>numColumns],<sp/>numColumns<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"></highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"></highlight></codeline>
<codeline lineno="3015"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3016"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3017"><highlight class="comment">idMatX::RemoveColumn</highlight></codeline>
<codeline lineno="3018"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3019"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;idMatX::RemoveColumn(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"></highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>r<sp/>&lt;<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"></highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/>numColumns--;</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"></highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows<sp/>-<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(<sp/>&amp;mat[i<sp/>*<sp/>numColumns<sp/>+<sp/>r],<sp/>&amp;mat[i<sp/>*<sp/>(<sp/>numColumns<sp/>+<sp/>1<sp/>)<sp/>+<sp/>r<sp/>+<sp/>1],<sp/>numColumns<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(<sp/>&amp;mat[i<sp/>*<sp/>numColumns<sp/>+<sp/>r],<sp/>&amp;mat[i<sp/>*<sp/>(<sp/>numColumns<sp/>+<sp/>1<sp/>)<sp/>+<sp/>r<sp/>+<sp/>1],<sp/>(<sp/>numColumns<sp/>-<sp/>r<sp/>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"></highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3033"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"></highlight></codeline>
<codeline lineno="3035"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3036"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3037"><highlight class="comment">idMatX::RemoveRowColumn</highlight></codeline>
<codeline lineno="3038"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3039"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;idMatX::RemoveRowColumn(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"></highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>r<sp/>&lt;<sp/>numRows<sp/>&amp;&amp;<sp/>r<sp/>&lt;<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"></highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/>numRows--;</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/>numColumns--;</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"></highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>r<sp/>-<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(<sp/>&amp;mat[i<sp/>*<sp/>numColumns<sp/>+<sp/>r],<sp/>&amp;mat[i<sp/>*<sp/>(<sp/>numColumns<sp/>+<sp/>1<sp/>)<sp/>+<sp/>r<sp/>+<sp/>1],<sp/>numColumns<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(<sp/>&amp;mat[i<sp/>*<sp/>numColumns<sp/>+<sp/>r],<sp/>&amp;mat[i<sp/>*<sp/>(<sp/>numColumns<sp/>+<sp/>1<sp/>)<sp/>+<sp/>r<sp/>+<sp/>1],<sp/>(<sp/>numColumns<sp/>-<sp/>r<sp/>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"></highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(<sp/>&amp;mat[r<sp/>*<sp/>numColumns],<sp/>&amp;mat[(<sp/>r<sp/>+<sp/>1<sp/>)<sp/>*<sp/>(<sp/>numColumns<sp/>+<sp/>1<sp/>)],<sp/>r<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"></highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>r;<sp/>i<sp/>&lt;<sp/>numRows<sp/>-<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>&amp;mat[i<sp/>*<sp/>numColumns<sp/>+<sp/>r],<sp/>&amp;mat[(<sp/>i<sp/>+<sp/>1<sp/>)<sp/>*<sp/>(<sp/>numColumns<sp/>+<sp/>1<sp/>)<sp/>+<sp/>r<sp/>+<sp/>1],<sp/>numColumns<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(<sp/>&amp;mat[i<sp/>*<sp/>numColumns<sp/>+<sp/>r],<sp/>&amp;mat[(<sp/>i<sp/>+<sp/>1<sp/>)<sp/>*<sp/>(<sp/>numColumns<sp/>+<sp/>1<sp/>)<sp/>+<sp/>r<sp/>+<sp/>1],<sp/>(<sp/>numColumns<sp/>-<sp/>r<sp/>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"></highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3063"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"></highlight></codeline>
<codeline lineno="3065"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3066"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3067"><highlight class="comment">idMatX::IsOrthogonal</highlight></codeline>
<codeline lineno="3068"><highlight class="comment"></highlight></codeline>
<codeline lineno="3069"><highlight class="comment"><sp/><sp/>returns<sp/>true<sp/>if<sp/>(*this)<sp/>*<sp/>this-&gt;Transpose()<sp/>==<sp/>Identity</highlight></codeline>
<codeline lineno="3070"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3071"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3072"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::IsOrthogonal(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>epsilon<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*ptr1,<sp/>*ptr2,<sp/>sum;</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"></highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!IsSquare()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"></highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr1<sp/>=<sp/>mat;</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr2<sp/>=<sp/>mat<sp/>+<sp/>j;</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>ptr1[0]<sp/>*<sp/>ptr2[0]<sp/>-<sp/>(float)<sp/>(<sp/>i<sp/>==<sp/>j<sp/>);</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1;<sp/>n<sp/>&lt;<sp/>numColumns;<sp/>n++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr2<sp/>+=<sp/>numColumns;</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>ptr1[n]<sp/>*<sp/>ptr2[0];</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>sum<sp/>)<sp/>&gt;<sp/>epsilon<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr1<sp/>+=<sp/>numColumns;</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3095"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"></highlight></codeline>
<codeline lineno="3097"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3098"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3099"><highlight class="comment">idMatX::IsOrthonormal</highlight></codeline>
<codeline lineno="3100"><highlight class="comment"></highlight></codeline>
<codeline lineno="3101"><highlight class="comment"><sp/><sp/>returns<sp/>true<sp/>if<sp/>(*this)<sp/>*<sp/>this-&gt;Transpose()<sp/>==<sp/>Identity<sp/>and<sp/>the<sp/>length<sp/>of<sp/>each<sp/>column<sp/>vector<sp/>is<sp/>1</highlight></codeline>
<codeline lineno="3102"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3103"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3104"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::IsOrthonormal(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>epsilon<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*ptr1,<sp/>*ptr2,<sp/>sum;</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"></highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!IsSquare()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"></highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr1<sp/>=<sp/>mat;</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr2<sp/>=<sp/>mat<sp/>+<sp/>j;</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>ptr1[0]<sp/>*<sp/>ptr2[0]<sp/>-<sp/>(float)<sp/>(<sp/>i<sp/>==<sp/>j<sp/>);</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1;<sp/>n<sp/>&lt;<sp/>numColumns;<sp/>n++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr2<sp/>+=<sp/>numColumns;</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>ptr1[n]<sp/>*<sp/>ptr2[0];</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>sum<sp/>)<sp/>&gt;<sp/>epsilon<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr1<sp/>+=<sp/>numColumns;</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"></highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr2<sp/>=<sp/>mat<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>ptr2[0]<sp/>*<sp/>ptr2[0]<sp/>-<sp/>1.0f;</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr2<sp/>+=<sp/>numColumns;</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>ptr2[i]<sp/>*<sp/>ptr2[i];</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>sum<sp/>)<sp/>&gt;<sp/>epsilon<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"></highlight></codeline>
<codeline lineno="3139"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3140"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3141"><highlight class="comment">idMatX::IsPMatrix</highlight></codeline>
<codeline lineno="3142"><highlight class="comment"></highlight></codeline>
<codeline lineno="3143"><highlight class="comment"><sp/><sp/>returns<sp/>true<sp/>if<sp/>the<sp/>matrix<sp/>is<sp/>a<sp/>P-matrix</highlight></codeline>
<codeline lineno="3144"><highlight class="comment"><sp/><sp/>A<sp/>square<sp/>matrix<sp/>is<sp/>a<sp/>P-matrix<sp/>if<sp/>all<sp/>its<sp/>principal<sp/>minors<sp/>are<sp/>positive.</highlight></codeline>
<codeline lineno="3145"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3146"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3147"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::IsPMatrix(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>epsilon<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>m;</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"></highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!IsSquare()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"></highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numRows<sp/>&lt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"></highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[0][0]<sp/>&lt;=<sp/>epsilon<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"></highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numRows<sp/>&lt;=<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"></highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><sp/><sp/>m.SetData(<sp/>numRows<sp/>-<sp/>1,<sp/>numColumns<sp/>-<sp/>1,<sp/>MATX_ALLOCA(<sp/>(<sp/>numRows<sp/>-<sp/>1<sp/>)<sp/>*<sp/>(<sp/>numColumns<sp/>-<sp/>1<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"></highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>1;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[i-1][j-1]<sp/>=<sp/>(*this)[i][j];</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"></highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m.IsPMatrix(<sp/>epsilon<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"></highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(*this)[i][0]<sp/>/<sp/>(*this)[0][0];</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>1;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[i-1][j-1]<sp/>=<sp/>(*this)[i][j]<sp/>-<sp/>d<sp/>*<sp/>(*this)[0][j];</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"></highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m.IsPMatrix(<sp/>epsilon<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"></highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"></highlight></codeline>
<codeline lineno="3194"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3195"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3196"><highlight class="comment">idMatX::IsZMatrix</highlight></codeline>
<codeline lineno="3197"><highlight class="comment"></highlight></codeline>
<codeline lineno="3198"><highlight class="comment"><sp/><sp/>returns<sp/>true<sp/>if<sp/>the<sp/>matrix<sp/>is<sp/>a<sp/>Z-matrix</highlight></codeline>
<codeline lineno="3199"><highlight class="comment"><sp/><sp/>A<sp/>square<sp/>matrix<sp/>M<sp/>is<sp/>a<sp/>Z-matrix<sp/>if<sp/>M[i][j]<sp/>&lt;=<sp/>0<sp/>for<sp/>all<sp/>i<sp/>!=<sp/>j.</highlight></codeline>
<codeline lineno="3200"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3201"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3202"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::IsZMatrix(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>epsilon<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"></highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!IsSquare()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"></highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[i][j]<sp/>&gt;<sp/>epsilon<sp/>&amp;&amp;<sp/>i<sp/>!=<sp/>j<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"></highlight></codeline>
<codeline lineno="3219"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3220"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3221"><highlight class="comment">idMatX::IsPositiveDefinite</highlight></codeline>
<codeline lineno="3222"><highlight class="comment"></highlight></codeline>
<codeline lineno="3223"><highlight class="comment"><sp/><sp/>returns<sp/>true<sp/>if<sp/>the<sp/>matrix<sp/>is<sp/>Positive<sp/>Definite<sp/>(PD)</highlight></codeline>
<codeline lineno="3224"><highlight class="comment"><sp/><sp/>A<sp/>square<sp/>matrix<sp/>M<sp/>of<sp/>order<sp/>n<sp/>is<sp/>said<sp/>to<sp/>be<sp/>PD<sp/>if<sp/>y&apos;My<sp/>&gt;<sp/>0<sp/>for<sp/>all<sp/>vectors<sp/>y<sp/>of<sp/>dimension<sp/>n,<sp/>y<sp/>!=<sp/>0.</highlight></codeline>
<codeline lineno="3225"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3226"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3227"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::IsPositiveDefinite(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>epsilon<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>d,<sp/>s;</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>m;</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"></highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>matrix<sp/>must<sp/>be<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!IsSquare()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"></highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/>m.SetData(<sp/>numRows,<sp/>numColumns,<sp/>MATX_ALLOCA(<sp/>numRows<sp/>*<sp/>numColumns<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"></highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>transpose</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[i][j]<sp/>+=<sp/>(*this)[j][i];</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"></highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>Positive<sp/>Definiteness<sp/>with<sp/>Gaussian<sp/>pivot<sp/>steps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"></highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m[j][j]<sp/>&lt;=<sp/>epsilon<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"></highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>m[i][i];</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>d<sp/>*<sp/>m[j][i];</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[j][i]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>k<sp/>&lt;<sp/>numRows;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[j][k]<sp/>-=<sp/>s<sp/>*<sp/>m[i][k];</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"></highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"></highlight></codeline>
<codeline lineno="3270"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3271"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3272"><highlight class="comment">idMatX::IsSymmetricPositiveDefinite</highlight></codeline>
<codeline lineno="3273"><highlight class="comment"></highlight></codeline>
<codeline lineno="3274"><highlight class="comment"><sp/><sp/>returns<sp/>true<sp/>if<sp/>the<sp/>matrix<sp/>is<sp/>Symmetric<sp/>Positive<sp/>Definite<sp/>(PD)</highlight></codeline>
<codeline lineno="3275"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3276"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3277"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::IsSymmetricPositiveDefinite(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>epsilon<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>m;</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"></highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>matrix<sp/>must<sp/>be<sp/>symmetric</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!IsSymmetric(<sp/>epsilon<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"></highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/>m.SetData(<sp/>numRows,<sp/>numColumns,<sp/>MATX_ALLOCA(<sp/>numRows<sp/>*<sp/>numColumns<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>being<sp/>able<sp/>to<sp/>obtain<sp/>Cholesky<sp/>factors<sp/>is<sp/>both<sp/>a<sp/>necessary<sp/>and<sp/>sufficient<sp/>condition<sp/>for<sp/>positive<sp/>definiteness</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m.Cholesky_Factor();</highlight></codeline>
<codeline lineno="3291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"></highlight></codeline>
<codeline lineno="3293"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3294"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3295"><highlight class="comment">idMatX::IsPositiveSemiDefinite</highlight></codeline>
<codeline lineno="3296"><highlight class="comment"></highlight></codeline>
<codeline lineno="3297"><highlight class="comment"><sp/><sp/>returns<sp/>true<sp/>if<sp/>the<sp/>matrix<sp/>is<sp/>Positive<sp/>Semi<sp/>Definite<sp/>(PSD)</highlight></codeline>
<codeline lineno="3298"><highlight class="comment"><sp/><sp/>A<sp/>square<sp/>matrix<sp/>M<sp/>of<sp/>order<sp/>n<sp/>is<sp/>said<sp/>to<sp/>be<sp/>PSD<sp/>if<sp/>y&apos;My<sp/>&gt;=<sp/>0<sp/>for<sp/>all<sp/>vectors<sp/>y<sp/>of<sp/>dimension<sp/>n,<sp/>y<sp/>!=<sp/>0.</highlight></codeline>
<codeline lineno="3299"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3300"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3301"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::IsPositiveSemiDefinite(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>epsilon<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>d,<sp/>s;</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>m;</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"></highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>matrix<sp/>must<sp/>be<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!IsSquare()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"></highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>original<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/>m.SetData(<sp/>numRows,<sp/>numColumns,<sp/>MATX_ALLOCA(<sp/>numRows<sp/>*<sp/>numColumns<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"></highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>transpose</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[i][j]<sp/>+=<sp/>(*this)[j][i];</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"></highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>Positive<sp/>Semi<sp/>Definiteness<sp/>with<sp/>Gaussian<sp/>pivot<sp/>steps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"></highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m[j][j]<sp/>&lt;<sp/>-epsilon<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m[j][j]<sp/>&gt;<sp/>epsilon<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>numRows;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>m[k][j]<sp/>)<sp/>&gt;<sp/>epsilon<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>m[j][k]<sp/>)<sp/>&gt;<sp/>epsilon<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"></highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m[i][i]<sp/>&lt;=<sp/>epsilon<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"></highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>m[i][i];</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>d<sp/>*<sp/>m[j][i];</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[j][i]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>k<sp/>&lt;<sp/>numRows;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[j][k]<sp/>-=<sp/>s<sp/>*<sp/>m[i][k];</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"></highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"></highlight></codeline>
<codeline lineno="3359"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3360"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3361"><highlight class="comment">idMatX::IsSymmetricPositiveSemiDefinite</highlight></codeline>
<codeline lineno="3362"><highlight class="comment"></highlight></codeline>
<codeline lineno="3363"><highlight class="comment"><sp/><sp/>returns<sp/>true<sp/>if<sp/>the<sp/>matrix<sp/>is<sp/>Symmetric<sp/>Positive<sp/>Semi<sp/>Definite<sp/>(PSD)</highlight></codeline>
<codeline lineno="3364"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3365"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3366"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::IsSymmetricPositiveSemiDefinite(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>epsilon<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"></highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>matrix<sp/>must<sp/>be<sp/>symmetric</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!IsSymmetric(<sp/>epsilon<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"></highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsPositiveSemiDefinite(<sp/>epsilon<sp/>);</highlight></codeline>
<codeline lineno="3374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"></highlight></codeline>
<codeline lineno="3376"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3377"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3378"><highlight class="comment">idMatX::LowerTriangularInverse</highlight></codeline>
<codeline lineno="3379"><highlight class="comment"></highlight></codeline>
<codeline lineno="3380"><highlight class="comment"><sp/><sp/>in-place<sp/>inversion<sp/>of<sp/>the<sp/>lower<sp/>triangular<sp/>matrix</highlight></codeline>
<codeline lineno="3381"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3382"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3383"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::LowerTriangularInverse(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d,<sp/>sum;</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"></highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][i]<sp/>=<sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>d;</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"></highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>j;<sp/>k<sp/>&lt;<sp/>i;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>(*this)[i][k]<sp/>*<sp/>(*this)[k][j];</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][j]<sp/>=<sp/>sum<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"></highlight></codeline>
<codeline lineno="3405"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3406"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3407"><highlight class="comment">idMatX::UpperTriangularInverse</highlight></codeline>
<codeline lineno="3408"><highlight class="comment"></highlight></codeline>
<codeline lineno="3409"><highlight class="comment"><sp/><sp/>in-place<sp/>inversion<sp/>of<sp/>the<sp/>upper<sp/>triangular<sp/>matrix</highlight></codeline>
<codeline lineno="3410"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3411"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3412"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::UpperTriangularInverse(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d,<sp/>sum;</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"></highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>numRows-1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][i]<sp/>=<sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>d;</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"></highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>numRows-1;<sp/>j<sp/>&gt;<sp/>i;<sp/>j--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>j;<sp/>k<sp/>&gt;<sp/>i;<sp/>k--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>(*this)[i][k]<sp/>*<sp/>(*this)[k][j];</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][j]<sp/>=<sp/>sum<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"></highlight></codeline>
<codeline lineno="3434"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3435"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="3436"><highlight class="comment">idMatX::ToString</highlight></codeline>
<codeline lineno="3437"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="3438"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3439"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*idMatX::ToString(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idStr::FloatArrayToString(<sp/>ToFloatPtr(),<sp/>GetDimension(),<sp/>precision<sp/>);</highlight></codeline>
<codeline lineno="3441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"></highlight></codeline>
<codeline lineno="3443"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3444"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3445"><highlight class="comment">idMatX::Update_RankOne</highlight></codeline>
<codeline lineno="3446"><highlight class="comment"></highlight></codeline>
<codeline lineno="3447"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>matrix<sp/>to<sp/>obtain<sp/>the<sp/>matrix:<sp/>A<sp/>+<sp/>alpha<sp/>*<sp/>v<sp/>*<sp/>w&apos;</highlight></codeline>
<codeline lineno="3448"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3449"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3450"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::Update_RankOne(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;w,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>alpha<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"></highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>w.GetSize()<sp/>&gt;=<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"></highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>alpha<sp/>*<sp/>v[i];</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][j]<sp/>+=<sp/>s<sp/>*<sp/>w[j];</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"></highlight></codeline>
<codeline lineno="3465"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3466"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3467"><highlight class="comment">idMatX::Update_RankOneSymmetric</highlight></codeline>
<codeline lineno="3468"><highlight class="comment"></highlight></codeline>
<codeline lineno="3469"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>matrix<sp/>to<sp/>obtain<sp/>the<sp/>matrix:<sp/>A<sp/>+<sp/>alpha<sp/>*<sp/>v<sp/>*<sp/>v&apos;</highlight></codeline>
<codeline lineno="3470"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3471"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3472"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::Update_RankOneSymmetric(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>alpha<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"></highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"></highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>alpha<sp/>*<sp/>v[i];</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][j]<sp/>+=<sp/>s<sp/>*<sp/>v[j];</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"></highlight></codeline>
<codeline lineno="3487"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3488"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3489"><highlight class="comment">idMatX::Update_RowColumn</highlight></codeline>
<codeline lineno="3490"><highlight class="comment"></highlight></codeline>
<codeline lineno="3491"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>matrix<sp/>to<sp/>obtain<sp/>the<sp/>matrix:</highlight></codeline>
<codeline lineno="3492"><highlight class="comment"></highlight></codeline>
<codeline lineno="3493"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/>0<sp/><sp/>a<sp/><sp/>0<sp/>]</highlight></codeline>
<codeline lineno="3494"><highlight class="comment"><sp/><sp/>A<sp/>+<sp/>[<sp/>d<sp/><sp/>b<sp/><sp/>e<sp/>]</highlight></codeline>
<codeline lineno="3495"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/>0<sp/><sp/>c<sp/><sp/>0<sp/>]</highlight></codeline>
<codeline lineno="3496"><highlight class="comment"></highlight></codeline>
<codeline lineno="3497"><highlight class="comment"><sp/><sp/>where:<sp/>a<sp/>=<sp/>v[0,r-1],<sp/>b<sp/>=<sp/>v[r],<sp/>c<sp/>=<sp/>v[r+1,numRows-1],<sp/>d<sp/>=<sp/>w[0,r-1],<sp/>w[r]<sp/>=<sp/>0.0f,<sp/>e<sp/>=<sp/>w[r+1,numColumns-1]</highlight></codeline>
<codeline lineno="3498"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3499"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3500"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::Update_RowColumn(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"></highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>w[r]<sp/>==<sp/>0.0f<sp/>);</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>w.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"></highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][r]<sp/>+=<sp/>v[i];</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numColumns;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[r][i]<sp/>+=<sp/>w[i];</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"></highlight></codeline>
<codeline lineno="3515"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3516"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3517"><highlight class="comment">idMatX::Update_RowColumnSymmetric</highlight></codeline>
<codeline lineno="3518"><highlight class="comment"></highlight></codeline>
<codeline lineno="3519"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>matrix<sp/>to<sp/>obtain<sp/>the<sp/>matrix:</highlight></codeline>
<codeline lineno="3520"><highlight class="comment"></highlight></codeline>
<codeline lineno="3521"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/>0<sp/><sp/>a<sp/><sp/>0<sp/>]</highlight></codeline>
<codeline lineno="3522"><highlight class="comment"><sp/><sp/>A<sp/>+<sp/>[<sp/>a<sp/><sp/>b<sp/><sp/>c<sp/>]</highlight></codeline>
<codeline lineno="3523"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/>0<sp/><sp/>c<sp/><sp/>0<sp/>]</highlight></codeline>
<codeline lineno="3524"><highlight class="comment"></highlight></codeline>
<codeline lineno="3525"><highlight class="comment"><sp/><sp/>where:<sp/>a<sp/>=<sp/>v[0,r-1],<sp/>b<sp/>=<sp/>v[r],<sp/>c<sp/>=<sp/>v[r+1,numRows-1]</highlight></codeline>
<codeline lineno="3526"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3527"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3528"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::Update_RowColumnSymmetric(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"></highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"></highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>r;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][r]<sp/>+=<sp/>v[i];</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[r][i]<sp/>+=<sp/>v[i];</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)[r][r]<sp/>+=<sp/>v[r];</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>r+1;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][r]<sp/>+=<sp/>v[i];</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[r][i]<sp/>+=<sp/>v[i];</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"></highlight></codeline>
<codeline lineno="3545"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3546"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3547"><highlight class="comment">idMatX::Update_Increment</highlight></codeline>
<codeline lineno="3548"><highlight class="comment"></highlight></codeline>
<codeline lineno="3549"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>matrix<sp/>to<sp/>obtain<sp/>the<sp/>matrix:</highlight></codeline>
<codeline lineno="3550"><highlight class="comment"></highlight></codeline>
<codeline lineno="3551"><highlight class="comment"><sp/><sp/>[<sp/>A<sp/><sp/>a<sp/>]</highlight></codeline>
<codeline lineno="3552"><highlight class="comment"><sp/><sp/>[<sp/>c<sp/><sp/>b<sp/>]</highlight></codeline>
<codeline lineno="3553"><highlight class="comment"></highlight></codeline>
<codeline lineno="3554"><highlight class="comment"><sp/><sp/>where:<sp/>a<sp/>=<sp/>v[0,numRows-1],<sp/>b<sp/>=<sp/>v[numRows],<sp/>c<sp/>=<sp/>w[0,numColumns-1]],<sp/>w[numColumns]<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="3555"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3556"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3557"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::Update_Increment(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;w<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"></highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numRows+1<sp/>);</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>w.GetSize()<sp/>&gt;=<sp/>numColumns+1<sp/>);</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"></highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/>ChangeSize(<sp/>numRows+1,<sp/>numColumns+1,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"></highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][numColumns-1]<sp/>=<sp/>v[i];</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numColumns-1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[numRows-1][i]<sp/>=<sp/>w[i];</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"></highlight></codeline>
<codeline lineno="3574"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3575"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3576"><highlight class="comment">idMatX::Update_IncrementSymmetric</highlight></codeline>
<codeline lineno="3577"><highlight class="comment"></highlight></codeline>
<codeline lineno="3578"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>matrix<sp/>to<sp/>obtain<sp/>the<sp/>matrix:</highlight></codeline>
<codeline lineno="3579"><highlight class="comment"></highlight></codeline>
<codeline lineno="3580"><highlight class="comment"><sp/><sp/>[<sp/>A<sp/><sp/>a<sp/>]</highlight></codeline>
<codeline lineno="3581"><highlight class="comment"><sp/><sp/>[<sp/>a<sp/><sp/>b<sp/>]</highlight></codeline>
<codeline lineno="3582"><highlight class="comment"></highlight></codeline>
<codeline lineno="3583"><highlight class="comment"><sp/><sp/>where:<sp/>a<sp/>=<sp/>v[0,numRows-1],<sp/>b<sp/>=<sp/>v[numRows]</highlight></codeline>
<codeline lineno="3584"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3585"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3586"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::Update_IncrementSymmetric(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"></highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numRows+1<sp/>);</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"></highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/>ChangeSize(<sp/>numRows+1,<sp/>numColumns+1,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"></highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows-1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][numColumns-1]<sp/>=<sp/>v[i];</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numColumns;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[numRows-1][i]<sp/>=<sp/>v[i];</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"></highlight></codeline>
<codeline lineno="3602"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3603"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3604"><highlight class="comment">idMatX::Update_Decrement</highlight></codeline>
<codeline lineno="3605"><highlight class="comment"></highlight></codeline>
<codeline lineno="3606"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>matrix<sp/>to<sp/>obtain<sp/>a<sp/>matrix<sp/>with<sp/>row<sp/>r<sp/>and<sp/>column<sp/>r<sp/>removed.</highlight></codeline>
<codeline lineno="3607"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3608"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3609"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::Update_Decrement(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/>RemoveRowColumn(<sp/>r<sp/>);</highlight></codeline>
<codeline lineno="3611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"></highlight></codeline>
<codeline lineno="3613"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3614"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3615"><highlight class="comment">idMatX::Inverse_GaussJordan</highlight></codeline>
<codeline lineno="3616"><highlight class="comment"></highlight></codeline>
<codeline lineno="3617"><highlight class="comment"><sp/><sp/>in-place<sp/>inversion<sp/>using<sp/>Gauss-Jordan<sp/>elimination</highlight></codeline>
<codeline lineno="3618"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3619"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3620"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::Inverse_GaussJordan(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k,<sp/>r,<sp/>c;</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>d,<sp/>max;</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"></highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"></highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*columnIndex<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numRows<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*rowIndex<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numRows<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*pivot<sp/>=<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numRows<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"></highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>pivot,<sp/>0,<sp/>numRows<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"></highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>elimination<sp/>with<sp/>full<sp/>pivoting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"></highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>search<sp/>the<sp/>whole<sp/>matrix<sp/>except<sp/>for<sp/>pivoted<sp/>rows<sp/>for<sp/>the<sp/>maximum<sp/>absolute<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!pivot[j]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>numRows;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!pivot[k]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>idMath::Fabs(<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[j][k]<sp/>);</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>&gt;<sp/>max<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"></highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>max<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matrix<sp/>is<sp/>not<sp/>invertible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"></highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pivot[c]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"></highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>swap<sp/>rows<sp/>such<sp/>that<sp/>entry<sp/>(c,c)<sp/>has<sp/>the<sp/>pivot<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r<sp/>!=<sp/>c<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwapRows(<sp/>r,<sp/>c<sp/>);</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"></highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>track<sp/>of<sp/>the<sp/>row<sp/>permutation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowIndex[i]<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columnIndex[i]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"></highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scale<sp/>the<sp/>row<sp/>to<sp/>make<sp/>the<sp/>pivot<sp/>entry<sp/>equal<sp/>to<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>(*this)[c][c];</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[c][c]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>numRows;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[c][k]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"></highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>zero<sp/>out<sp/>the<sp/>pivot<sp/>column<sp/>entries<sp/>in<sp/>the<sp/>other<sp/>rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>!=<sp/>c<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(*this)[j][c];</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[j][c]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>numRows;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[j][k]<sp/>-=<sp/>(*this)[c][k]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"></highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reorder<sp/>rows<sp/>to<sp/>store<sp/>the<sp/>inverse<sp/>of<sp/>the<sp/>original<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>numRows<sp/>-<sp/>1;<sp/>j<sp/>&gt;=<sp/>0;<sp/>j--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rowIndex[j]<sp/>!=<sp/>columnIndex[j]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>numRows;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(*this)[k][rowIndex[j]];</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[k][rowIndex[j]]<sp/>=<sp/>(*this)[k][columnIndex[j]];</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[k][columnIndex[j]]<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"></highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3700"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"></highlight></codeline>
<codeline lineno="3702"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3703"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3704"><highlight class="comment">idMatX::Inverse_UpdateRankOne</highlight></codeline>
<codeline lineno="3705"><highlight class="comment"></highlight></codeline>
<codeline lineno="3706"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>in-place<sp/>inverse<sp/>using<sp/>the<sp/>Sherman-Morrison<sp/>formula<sp/>to<sp/>obtain<sp/>the<sp/>inverse<sp/>for<sp/>the<sp/>matrix:<sp/>A<sp/>+<sp/>alpha<sp/>*<sp/>v<sp/>*<sp/>w&apos;</highlight></codeline>
<codeline lineno="3707"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3708"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3709"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::Inverse_UpdateRankOne(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;w,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>alpha<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>beta,<sp/>s;</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>y,<sp/>z;</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"></highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>w.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"></highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/>y.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/>z.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"></highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/>Multiply(<sp/>y,<sp/>v<sp/>);</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/>TransposeMultiply(<sp/>z,<sp/>w<sp/>);</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/>beta<sp/>=<sp/>1.0f<sp/>+<sp/>(<sp/>w<sp/>*<sp/>y<sp/>);</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"></highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>beta<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"></highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha<sp/>/=<sp/>beta;</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"></highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>y[i]<sp/>*<sp/>alpha;</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][j]<sp/>-=<sp/>s<sp/>*<sp/>z[j];</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"></highlight></codeline>
<codeline lineno="3740"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3741"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3742"><highlight class="comment">idMatX::Inverse_UpdateRowColumn</highlight></codeline>
<codeline lineno="3743"><highlight class="comment"></highlight></codeline>
<codeline lineno="3744"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>in-place<sp/>inverse<sp/>to<sp/>obtain<sp/>the<sp/>inverse<sp/>for<sp/>the<sp/>matrix:</highlight></codeline>
<codeline lineno="3745"><highlight class="comment"></highlight></codeline>
<codeline lineno="3746"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/>0<sp/><sp/>a<sp/><sp/>0<sp/>]</highlight></codeline>
<codeline lineno="3747"><highlight class="comment"><sp/><sp/>A<sp/>+<sp/>[<sp/>d<sp/><sp/>b<sp/><sp/>e<sp/>]</highlight></codeline>
<codeline lineno="3748"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/>0<sp/><sp/>c<sp/><sp/>0<sp/>]</highlight></codeline>
<codeline lineno="3749"><highlight class="comment"></highlight></codeline>
<codeline lineno="3750"><highlight class="comment"><sp/><sp/>where:<sp/>a<sp/>=<sp/>v[0,r-1],<sp/>b<sp/>=<sp/>v[r],<sp/>c<sp/>=<sp/>v[r+1,numRows-1],<sp/>d<sp/>=<sp/>w[0,r-1],<sp/>w[r]<sp/>=<sp/>0.0f,<sp/>e<sp/>=<sp/>w[r+1,numColumns-1]</highlight></codeline>
<codeline lineno="3751"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3752"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3753"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::Inverse_UpdateRowColumn(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>s;</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"></highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>w.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>r<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>r<sp/>&lt;<sp/>numRows<sp/>&amp;&amp;<sp/>r<sp/>&lt;<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>w[r]<sp/>==<sp/>0.0f<sp/>);</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"></highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/>s.SetData(<sp/>Max(<sp/>numRows,<sp/>numColumns<sp/>),<sp/>VECX_ALLOCA(<sp/>Max(<sp/>numRows,<sp/>numColumns<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/><sp/><sp/>s.Zero();</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/>s[r]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"></highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!Inverse_UpdateRankOne(<sp/>v,<sp/>s,<sp/>1.0f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!Inverse_UpdateRankOne(<sp/>s,<sp/>w,<sp/>1.0f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"></highlight></codeline>
<codeline lineno="3775"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3776"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3777"><highlight class="comment">idMatX::Inverse_UpdateIncrement</highlight></codeline>
<codeline lineno="3778"><highlight class="comment"></highlight></codeline>
<codeline lineno="3779"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>in-place<sp/>inverse<sp/>to<sp/>obtain<sp/>the<sp/>inverse<sp/>for<sp/>the<sp/>matrix:</highlight></codeline>
<codeline lineno="3780"><highlight class="comment"></highlight></codeline>
<codeline lineno="3781"><highlight class="comment"><sp/><sp/>[<sp/>A<sp/><sp/>a<sp/>]</highlight></codeline>
<codeline lineno="3782"><highlight class="comment"><sp/><sp/>[<sp/>c<sp/><sp/>b<sp/>]</highlight></codeline>
<codeline lineno="3783"><highlight class="comment"></highlight></codeline>
<codeline lineno="3784"><highlight class="comment"><sp/><sp/>where:<sp/>a<sp/>=<sp/>v[0,numRows-1],<sp/>b<sp/>=<sp/>v[numRows],<sp/>c<sp/>=<sp/>w[0,numColumns-1],<sp/>w[numColumns]<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="3785"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3786"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3787"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::Inverse_UpdateIncrement(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;w<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>v2;</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"></highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numRows+1<sp/>);</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>w.GetSize()<sp/>&gt;=<sp/>numColumns+1<sp/>);</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"></highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/>ChangeSize(<sp/>numRows+1,<sp/>numColumns+1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)[numRows-1][numRows-1]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"></highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/><sp/><sp/>v2.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/><sp/><sp/>v2<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/><sp/><sp/>v2[numRows-1]<sp/>-=<sp/>1.0f;</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"></highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Inverse_UpdateRowColumn(<sp/>v2,<sp/>w,<sp/>numRows-1<sp/>);</highlight></codeline>
<codeline lineno="3802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"></highlight></codeline>
<codeline lineno="3804"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3805"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3806"><highlight class="comment">idMatX::Inverse_UpdateDecrement</highlight></codeline>
<codeline lineno="3807"><highlight class="comment"></highlight></codeline>
<codeline lineno="3808"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>in-place<sp/>inverse<sp/>to<sp/>obtain<sp/>the<sp/>inverse<sp/>of<sp/>the<sp/>matrix<sp/>with<sp/>row<sp/>r<sp/>and<sp/>column<sp/>r<sp/>removed.</highlight></codeline>
<codeline lineno="3809"><highlight class="comment"><sp/><sp/>v<sp/>and<sp/>w<sp/>should<sp/>store<sp/>the<sp/>column<sp/>and<sp/>row<sp/>of<sp/>the<sp/>original<sp/>matrix<sp/>respectively.</highlight></codeline>
<codeline lineno="3810"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3811"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3812"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::Inverse_UpdateDecrement(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>v1,<sp/>w1;</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"></highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>w.GetSize()<sp/>&gt;=<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>r<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>r<sp/>&lt;<sp/>numRows<sp/>&amp;&amp;<sp/>r<sp/>&lt;<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"></highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/>w1.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"></highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>row<sp/>and<sp/>column<sp/>to<sp/>identity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>-v;</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/><sp/>w1<sp/>=<sp/>-w;</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/>v1[r]<sp/>+=<sp/>1.0f;</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/>w1[r]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"></highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!Inverse_UpdateRowColumn(<sp/>v1,<sp/>w1,<sp/>r<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"></highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>physically<sp/>remove<sp/>the<sp/>row<sp/>and<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/><sp/>Update_Decrement(<sp/>r<sp/>);</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"></highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"></highlight></codeline>
<codeline lineno="3839"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3840"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3841"><highlight class="comment">idMatX::Inverse_Solve</highlight></codeline>
<codeline lineno="3842"><highlight class="comment"></highlight></codeline>
<codeline lineno="3843"><highlight class="comment"><sp/><sp/>Solve<sp/>Ax<sp/>=<sp/>b<sp/>with<sp/>A<sp/>inverted</highlight></codeline>
<codeline lineno="3844"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3845"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3846"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::Inverse_Solve(<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;b<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/>Multiply(<sp/>x,<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="3848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"></highlight></codeline>
<codeline lineno="3850"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3851"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3852"><highlight class="comment">idMatX::LU_Factor</highlight></codeline>
<codeline lineno="3853"><highlight class="comment"></highlight></codeline>
<codeline lineno="3854"><highlight class="comment"><sp/><sp/>in-place<sp/>factorization:<sp/>LU</highlight></codeline>
<codeline lineno="3855"><highlight class="comment"><sp/><sp/>L<sp/>is<sp/>a<sp/>triangular<sp/>matrix<sp/>stored<sp/>in<sp/>the<sp/>lower<sp/>triangle.</highlight></codeline>
<codeline lineno="3856"><highlight class="comment"><sp/><sp/>L<sp/>has<sp/>ones<sp/>on<sp/>the<sp/>diagonal<sp/>that<sp/>are<sp/>not<sp/>stored.</highlight></codeline>
<codeline lineno="3857"><highlight class="comment"><sp/><sp/>U<sp/>is<sp/>a<sp/>triangular<sp/>matrix<sp/>stored<sp/>in<sp/>the<sp/>upper<sp/>triangle.</highlight></codeline>
<codeline lineno="3858"><highlight class="comment"><sp/><sp/>If<sp/>index<sp/>!=<sp/>NULL<sp/>partial<sp/>pivoting<sp/>is<sp/>used<sp/>for<sp/>numerical<sp/>stability.</highlight></codeline>
<codeline lineno="3859"><highlight class="comment"><sp/><sp/>If<sp/>index<sp/>!=<sp/>NULL<sp/>it<sp/>must<sp/>point<sp/>to<sp/>an<sp/>array<sp/>of<sp/>numRow<sp/>integers<sp/>and<sp/>is<sp/>used<sp/>to<sp/>keep<sp/>track<sp/>of<sp/>the<sp/>row<sp/>permutation.</highlight></codeline>
<codeline lineno="3860"><highlight class="comment"><sp/><sp/>If<sp/>det<sp/>!=<sp/>NULL<sp/>the<sp/>determinant<sp/>of<sp/>the<sp/>matrix<sp/>is<sp/>calculated<sp/>and<sp/>stored.</highlight></codeline>
<codeline lineno="3861"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3862"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3863"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::LU_Factor(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*index,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*det<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k,<sp/>newi,<sp/>min;</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s,<sp/>t,<sp/>d,<sp/>w;</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"></highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>partial<sp/>pivoting<sp/>should<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"></highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/>min<sp/>=<sp/>Min(<sp/>numRows,<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>min;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"></highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newi<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>idMath::Fabs(<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[i][i]<sp/>);</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"></highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>largest<sp/>absolute<sp/>pivot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>idMath::Fabs(<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[j][i]<sp/>);</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>t<sp/>&gt;<sp/>s<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newi<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"></highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>s<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"></highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>newi<sp/>!=<sp/>i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"></highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>-w;</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"></highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>swap<sp/>index<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>index[i];</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index[i]<sp/>=<sp/>index[newi];</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index[newi]<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"></highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>swap<sp/>rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(*this)[newi][j];</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[newi][j]<sp/>=<sp/>(*this)[i][j];</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][j]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"></highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&lt;<sp/>numRows<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[j][i]<sp/>*=<sp/>d;</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"></highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&lt;<sp/>min-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(*this)[j][i];</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>k<sp/>&lt;<sp/>numColumns;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[j][k]<sp/>-=<sp/>d<sp/>*<sp/>(*this)[i][k];</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"></highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>det<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>*=<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*det<sp/>=<sp/>w;</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"></highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3938"><highlight class="normal">}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3939"><highlight class="normal"></highlight></codeline>
<codeline lineno="3940"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3941"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3942"><highlight class="comment">idMatX::LU_UpdateRankOne</highlight></codeline>
<codeline lineno="3943"><highlight class="comment"></highlight></codeline>
<codeline lineno="3944"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>in-place<sp/>LU<sp/>factorization<sp/>to<sp/>obtain<sp/>the<sp/>factors<sp/>for<sp/>the<sp/>matrix:<sp/>LU<sp/>+<sp/>alpha<sp/>*<sp/>v<sp/>*<sp/>w&apos;</highlight></codeline>
<codeline lineno="3945"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3946"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3947"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::LU_UpdateRankOne(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;w,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>alpha,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*index<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>max;</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y,<sp/>*z;</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diag,<sp/>beta,<sp/>p0,<sp/>p1,<sp/>d;</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"></highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>w.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"></highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>v.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/>z<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>w.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"></highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[i]<sp/>=<sp/>alpha<sp/>*<sp/>v[index[i]];</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[i]<sp/>=<sp/>alpha<sp/>*<sp/>v[i];</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"></highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(<sp/>z,<sp/>w.ToFloatPtr(),<sp/>w.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"></highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/>max<sp/>=<sp/>Min(<sp/>numRows,<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>max;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diag<sp/>=<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"></highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p0<sp/>=<sp/>y[i];</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>z[i];</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diag<sp/>+=<sp/>p0<sp/>*<sp/>p1;</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"></highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>diag<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"></highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beta<sp/>=<sp/>p1<sp/>/<sp/>diag;</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"></highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][i]<sp/>=<sp/>diag;</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"></highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i+1;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"></highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(*this)[i][j];</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"></highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>+=<sp/>p0<sp/>*<sp/>z[j];</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z[j]<sp/>-=<sp/>beta<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"></highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][j]<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"></highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i+1;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"></highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(*this)[j][i];</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"></highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[j]<sp/>-=<sp/>p0<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>+=<sp/>beta<sp/>*<sp/>y[j];</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"></highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[j][i]<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4007"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"></highlight></codeline>
<codeline lineno="4009"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4010"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4011"><highlight class="comment">idMatX::LU_UpdateRowColumn</highlight></codeline>
<codeline lineno="4012"><highlight class="comment"></highlight></codeline>
<codeline lineno="4013"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>in-place<sp/>LU<sp/>factorization<sp/>to<sp/>obtain<sp/>the<sp/>factors<sp/>for<sp/>the<sp/>matrix:</highlight></codeline>
<codeline lineno="4014"><highlight class="comment"></highlight></codeline>
<codeline lineno="4015"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/>0<sp/><sp/>a<sp/><sp/>0<sp/>]</highlight></codeline>
<codeline lineno="4016"><highlight class="comment"><sp/><sp/>LU<sp/>+<sp/>[<sp/>d<sp/><sp/>b<sp/><sp/>e<sp/>]</highlight></codeline>
<codeline lineno="4017"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/>0<sp/><sp/>c<sp/><sp/>0<sp/>]</highlight></codeline>
<codeline lineno="4018"><highlight class="comment"></highlight></codeline>
<codeline lineno="4019"><highlight class="comment"><sp/><sp/>where:<sp/>a<sp/>=<sp/>v[0,r-1],<sp/>b<sp/>=<sp/>v[r],<sp/>c<sp/>=<sp/>v[r+1,numRows-1],<sp/>d<sp/>=<sp/>w[0,r-1],<sp/>w[r]<sp/>=<sp/>0.0f,<sp/>e<sp/>=<sp/>w[r+1,numColumns-1]</highlight></codeline>
<codeline lineno="4020"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4021"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4022"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::LU_UpdateRowColumn(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*index<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="4024"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>s;</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"></highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>w.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>r<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>r<sp/>&lt;<sp/>numRows<sp/>&amp;&amp;<sp/>r<sp/>&lt;<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>w[r]<sp/>==<sp/>0.0f<sp/>);</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"></highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/>s.SetData(<sp/>Max(<sp/>numRows,<sp/>numColumns<sp/>),<sp/>VECX_ALLOCA(<sp/>Max(<sp/>numRows,<sp/>numColumns<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/><sp/><sp/>s.Zero();</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/><sp/><sp/>s[r]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"></highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!LU_UpdateRankOne(<sp/>v,<sp/>s,<sp/>1.0f,<sp/>index<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!LU_UpdateRankOne(<sp/>s,<sp/>w,<sp/>1.0f,<sp/>index<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"></highlight></codeline>
<codeline lineno="4044"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="4045"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>min,<sp/>max,<sp/>rp;</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y0,<sp/>*y1,<sp/>*z0,<sp/>*z1;</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diag,<sp/>beta0,<sp/>beta1,<sp/>p0,<sp/>p1,<sp/>q0,<sp/>q1,<sp/>d;</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"></highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>w.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>r<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>r<sp/>&lt;<sp/>numColumns<sp/>&amp;&amp;<sp/>r<sp/>&lt;<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>w[r]<sp/>==<sp/>0.0f<sp/>);</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"></highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/><sp/>y0<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>v.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/><sp/>z0<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>w.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>v.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><sp/><sp/>z1<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>w.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"></highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y0[i]<sp/>=<sp/>v[index[i]];</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rp<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index[i]<sp/>==<sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rp<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>y0,<sp/>v.ToFloatPtr(),<sp/>v.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rp<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"></highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>y1,<sp/>0,<sp/>v.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/>y1[rp]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"></highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>z0,<sp/>0,<sp/>w.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/>z0[r]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"></highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(<sp/>z1,<sp/>w.ToFloatPtr(),<sp/>w.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"></highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>to<sp/>be<sp/>updated<sp/>row<sp/>and<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/><sp/><sp/>min<sp/>=<sp/>Min(<sp/>r,<sp/>rp<sp/>);</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>min;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p0<sp/>=<sp/>y0[i];</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beta1<sp/>=<sp/>z1[i]<sp/>/<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"></highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][r]<sp/>+=<sp/>p0;</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i+1;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z1[j]<sp/>-=<sp/>beta1<sp/>*<sp/>(*this)[i][j];</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i+1;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y0[j]<sp/>-=<sp/>p0<sp/>*<sp/>(*this)[j][i];</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[rp][i]<sp/>+=<sp/>beta1;</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"></highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>lower<sp/>right<sp/>corner<sp/>starting<sp/>at<sp/>r,r</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/><sp/><sp/>max<sp/>=<sp/>Min(<sp/>numRows,<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>min;<sp/>i<sp/>&lt;<sp/>max;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diag<sp/>=<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"></highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p0<sp/>=<sp/>y0[i];</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>z0[i];</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diag<sp/>+=<sp/>p0<sp/>*<sp/>p1;</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"></highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>diag<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"></highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beta0<sp/>=<sp/>p1<sp/>/<sp/>diag;</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"></highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q0<sp/>=<sp/>y1[i];</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q1<sp/>=<sp/>z1[i];</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diag<sp/>+=<sp/>q0<sp/>*<sp/>q1;</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"></highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>diag<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"></highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beta1<sp/>=<sp/>q1<sp/>/<sp/>diag;</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"></highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][i]<sp/>=<sp/>diag;</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"></highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i+1;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"></highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(*this)[i][j];</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"></highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>+=<sp/>p0<sp/>*<sp/>z0[j];</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z0[j]<sp/>-=<sp/>beta0<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"></highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>+=<sp/>q0<sp/>*<sp/>z1[j];</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z1[j]<sp/>-=<sp/>beta1<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"></highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][j]<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"></highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i+1;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"></highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(*this)[j][i];</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"></highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y0[j]<sp/>-=<sp/>p0<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>+=<sp/>beta0<sp/>*<sp/>y0[j];</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"></highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y1[j]<sp/>-=<sp/>q0<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>+=<sp/>beta1<sp/>*<sp/>y1[j];</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"></highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[j][i]<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"></highlight></codeline>
<codeline lineno="4155"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="4156"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"></highlight></codeline>
<codeline lineno="4158"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4159"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4160"><highlight class="comment">idMatX::LU_UpdateIncrement</highlight></codeline>
<codeline lineno="4161"><highlight class="comment"></highlight></codeline>
<codeline lineno="4162"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>in-place<sp/>LU<sp/>factorization<sp/>to<sp/>obtain<sp/>the<sp/>factors<sp/>for<sp/>the<sp/>matrix:</highlight></codeline>
<codeline lineno="4163"><highlight class="comment"></highlight></codeline>
<codeline lineno="4164"><highlight class="comment"><sp/><sp/>[<sp/>A<sp/><sp/>a<sp/>]</highlight></codeline>
<codeline lineno="4165"><highlight class="comment"><sp/><sp/>[<sp/>c<sp/><sp/>b<sp/>]</highlight></codeline>
<codeline lineno="4166"><highlight class="comment"></highlight></codeline>
<codeline lineno="4167"><highlight class="comment"><sp/><sp/>where:<sp/>a<sp/>=<sp/>v[0,numRows-1],<sp/>b<sp/>=<sp/>v[numRows],<sp/>c<sp/>=<sp/>w[0,numColumns-1],<sp/>w[numColumns]<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="4168"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4169"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4170"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::LU_UpdateIncrement(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*index<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"></highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numRows+1<sp/>);</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>w.GetSize()<sp/>&gt;=<sp/>numColumns+1<sp/>);</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"></highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/><sp/><sp/>ChangeSize(<sp/>numRows+1,<sp/>numColumns+1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"></highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>row<sp/>to<sp/>L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows<sp/>-<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>w[i];</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>(*this)[numRows<sp/>-<sp/>1][j]<sp/>*<sp/>(*this)[j][i];</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[numRows<sp/>-<sp/>1<sp/>][i]<sp/>=<sp/>sum<sp/>/<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"></highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>row<sp/>to<sp/>the<sp/>permutation<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index[numRows<sp/>-<sp/>1]<sp/>=<sp/>numRows<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"></highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>column<sp/>to<sp/>U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>v[index[i]];</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>v[i];</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>(*this)[i][j]<sp/>*<sp/>(*this)[j][numRows<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][numRows<sp/>-<sp/>1]<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"></highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"></highlight></codeline>
<codeline lineno="4210"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4211"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4212"><highlight class="comment">idMatX::LU_UpdateDecrement</highlight></codeline>
<codeline lineno="4213"><highlight class="comment"></highlight></codeline>
<codeline lineno="4214"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>in-place<sp/>LU<sp/>factorization<sp/>to<sp/>obtain<sp/>the<sp/>factors<sp/>for<sp/>the<sp/>matrix<sp/>with<sp/>row<sp/>r<sp/>and<sp/>column<sp/>r<sp/>removed.</highlight></codeline>
<codeline lineno="4215"><highlight class="comment"><sp/><sp/>v<sp/>and<sp/>w<sp/>should<sp/>store<sp/>the<sp/>column<sp/>and<sp/>row<sp/>of<sp/>the<sp/>original<sp/>matrix<sp/>respectively.</highlight></codeline>
<codeline lineno="4216"><highlight class="comment"><sp/><sp/>If<sp/>index<sp/>!=<sp/>NULL<sp/>then<sp/>u<sp/>should<sp/>store<sp/>row<sp/>index[r]<sp/>of<sp/>the<sp/>original<sp/>matrix.<sp/>If<sp/>index<sp/>==<sp/>NULL<sp/>then<sp/>u<sp/>=<sp/>w.</highlight></codeline>
<codeline lineno="4217"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4218"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4219"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::LU_UpdateDecrement(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;u,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*index<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>p;</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>v1,<sp/>w1;</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"></highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>w.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>r<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>r<sp/>&lt;<sp/>numRows<sp/>&amp;&amp;<sp/>r<sp/>&lt;<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"></highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/><sp/>w1.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"></highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"></highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>pivot<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>p<sp/>=<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index[i]<sp/>==<sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"></highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>row<sp/>and<sp/>column<sp/>to<sp/>identity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>-v;</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w1<sp/>=<sp/>-u;</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"></highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>p<sp/>!=<sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idSwap(<sp/>v1[index[r]],<sp/>v1[index[p]]<sp/>);</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idSwap(<sp/>index[r],<sp/>index[p]<sp/>);</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"></highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1[r]<sp/>+=<sp/>1.0f;</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w1[r]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"></highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!LU_UpdateRowColumn(<sp/>v1,<sp/>w1,<sp/>r,<sp/>index<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"></highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>p<sp/>!=<sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"></highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>u[p]<sp/>)<sp/>&lt;<sp/>1e-4f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>an<sp/>additional<sp/>row<sp/>interchange<sp/>is<sp/>required<sp/>for<sp/>numerical<sp/>stability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"></highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>row<sp/>index[r]<sp/>of<sp/>the<sp/>original<sp/>matrix<sp/>to<sp/>row<sp/>index[p]<sp/>of<sp/>the<sp/>original<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1.Zero();</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1[index[p]]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w1<sp/>=<sp/>u<sp/>-<sp/>w;</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"></highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!LU_UpdateRankOne(<sp/>v1,<sp/>w1,<sp/>1.0f,<sp/>index<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"></highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>the<sp/>row<sp/>from<sp/>the<sp/>permutation<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>r;<sp/>i<sp/>&lt;<sp/>numRows<sp/>-<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index[i]<sp/>=<sp/>index[i+1];</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows<sp/>-<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index[i]<sp/>&gt;<sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index[i]--;</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"></highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"></highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>-v;</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w1<sp/>=<sp/>-w;</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1[r]<sp/>+=<sp/>1.0f;</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w1[r]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"></highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!LU_UpdateRowColumn(<sp/>v1,<sp/>w1,<sp/>r,<sp/>index<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"></highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>physically<sp/>remove<sp/>the<sp/>row<sp/>and<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/><sp/><sp/>Update_Decrement(<sp/>r<sp/>);</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"></highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"></highlight></codeline>
<codeline lineno="4301"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4302"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4303"><highlight class="comment">idMatX::LU_Solve</highlight></codeline>
<codeline lineno="4304"><highlight class="comment"></highlight></codeline>
<codeline lineno="4305"><highlight class="comment"><sp/><sp/>Solve<sp/>Ax<sp/>=<sp/>b<sp/>with<sp/>A<sp/>factored<sp/>in-place<sp/>as:<sp/>LU</highlight></codeline>
<codeline lineno="4306"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4307"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4308"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::LU_Solve(<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*index<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"></highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>x.GetSize()<sp/>==<sp/>numColumns<sp/>&amp;&amp;<sp/>b.GetSize()<sp/>==<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"></highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>b[index[i]];</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>b[i];</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>(*this)[i][j]<sp/>*<sp/>x[j];</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"></highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>numRows<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>x[i];</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>(*this)[i][j]<sp/>*<sp/>x[j];</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>sum<sp/>/<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"></highlight></codeline>
<codeline lineno="4337"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4338"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4339"><highlight class="comment">idMatX::LU_Inverse</highlight></codeline>
<codeline lineno="4340"><highlight class="comment"></highlight></codeline>
<codeline lineno="4341"><highlight class="comment"><sp/><sp/>Calculates<sp/>the<sp/>inverse<sp/>of<sp/>the<sp/>matrix<sp/>which<sp/>is<sp/>factored<sp/>in-place<sp/>as<sp/>LU</highlight></codeline>
<codeline lineno="4342"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4343"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4344"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::LU_Inverse(<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;inv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*index<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>x,<sp/>b;</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"></highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"></highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/><sp/><sp/>x.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"><sp/><sp/><sp/><sp/>b.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/><sp/><sp/>b.Zero();</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/><sp/><sp/>inv.SetSize(<sp/>numRows,<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"></highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"></highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[i]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LU_Solve(<sp/>x,<sp/>b,<sp/>index<sp/>);</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inv[j][i]<sp/>=<sp/>x[j];</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[i]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"></highlight></codeline>
<codeline lineno="4366"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4367"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4368"><highlight class="comment">idMatX::LU_UnpackFactors</highlight></codeline>
<codeline lineno="4369"><highlight class="comment"></highlight></codeline>
<codeline lineno="4370"><highlight class="comment"><sp/><sp/>Unpacks<sp/>the<sp/>in-place<sp/>LU<sp/>factorization.</highlight></codeline>
<codeline lineno="4371"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4372"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4373"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::LU_UnpackFactors(<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;L,<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;U<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"></highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/><sp/><sp/>L.Zero(<sp/>numRows,<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/><sp/><sp/>U.Zero(<sp/>numRows,<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L[i][j]<sp/>=<sp/>(*this)[i][j];</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L[i][i]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U[i][j]<sp/>=<sp/>(*this)[i][j];</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"></highlight></codeline>
<codeline lineno="4389"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4390"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4391"><highlight class="comment">idMatX::LU_MultiplyFactors</highlight></codeline>
<codeline lineno="4392"><highlight class="comment"></highlight></codeline>
<codeline lineno="4393"><highlight class="comment"><sp/><sp/>Multiplies<sp/>the<sp/>factors<sp/>of<sp/>the<sp/>in-place<sp/>LU<sp/>factorization<sp/>to<sp/>form<sp/>the<sp/>original<sp/>matrix.</highlight></codeline>
<codeline lineno="4394"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4395"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4396"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::LU_MultiplyFactors(<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*index<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/>rp,<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"></highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/><sp/><sp/>m.SetSize(<sp/>numRows,<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"></highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>numRows;<sp/>r++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"></highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rp<sp/>=<sp/>index[r];</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rp<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"></highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>row<sp/>of<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numColumns;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&gt;=<sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>(*this)[r][i];</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;=<sp/>i<sp/>&amp;&amp;<sp/>j<sp/>&lt;<sp/>r;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(*this)[r][j]<sp/>*<sp/>(*this)[j][i];</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[rp][i]<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"></highlight></codeline>
<codeline lineno="4425"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4426"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4427"><highlight class="comment">idMatX::QR_Factor</highlight></codeline>
<codeline lineno="4428"><highlight class="comment"></highlight></codeline>
<codeline lineno="4429"><highlight class="comment"><sp/><sp/>in-place<sp/>factorization:<sp/>QR</highlight></codeline>
<codeline lineno="4430"><highlight class="comment"><sp/><sp/>Q<sp/>is<sp/>an<sp/>orthogonal<sp/>matrix<sp/>represented<sp/>as<sp/>a<sp/>product<sp/>of<sp/>Householder<sp/>matrices<sp/>stored<sp/>in<sp/>the<sp/>lower<sp/>triangle<sp/>and<sp/>c.</highlight></codeline>
<codeline lineno="4431"><highlight class="comment"><sp/><sp/>R<sp/>is<sp/>a<sp/>triangular<sp/>matrix<sp/>stored<sp/>in<sp/>the<sp/>upper<sp/>triangle<sp/>except<sp/>for<sp/>the<sp/>diagonal<sp/>elements<sp/>which<sp/>are<sp/>stored<sp/>in<sp/>d.</highlight></codeline>
<codeline lineno="4432"><highlight class="comment"><sp/><sp/>The<sp/>initial<sp/>matrix<sp/>has<sp/>to<sp/>be<sp/>square.</highlight></codeline>
<codeline lineno="4433"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4434"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4435"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::QR_Factor(<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;c,<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;d<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale,<sp/>s,<sp/>t,<sp/>sum;</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>singular<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"></highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>c.GetSize()<sp/>&gt;=<sp/>numRows<sp/>&amp;&amp;<sp/>d.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"></highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>numRows-1;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"></highlight></codeline>
<codeline lineno="4445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>k;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>idMath::Fabs(<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[i][k]<sp/>);</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>s<sp/>&gt;<sp/>scale<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>scale<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>singular<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c[k]<sp/>=<sp/>d[k]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"></highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>1.0f<sp/>/<sp/>scale;</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>k;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][k]<sp/>*=<sp/>s;</highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"></highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>k;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(*this)[i][k];</highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>s<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"></highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>idMath::Sqrt(<sp/>sum<sp/>);</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[k][k]<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>-s;</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[k][k]<sp/>+=<sp/>s;</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c[k]<sp/>=<sp/>s<sp/>*<sp/>(*this)[k][k];</highlight></codeline>
<codeline lineno="4474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[k]<sp/>=<sp/>-scale<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="4475"><highlight class="normal"></highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>k+1;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"></highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>k;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(*this)[i][k]<sp/>*<sp/>(*this)[i][j];</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>sum<sp/>/<sp/>c[k];</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>k;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][j]<sp/>-=<sp/>t<sp/>*<sp/>(*this)[i][k];</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/><sp/><sp/>d[numRows-1]<sp/>=<sp/>(*this)[<sp/>(numRows-1)<sp/>][<sp/>(numRows-1)<sp/>];</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d[numRows-1]<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>singular<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"></highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!singular;</highlight></codeline>
<codeline lineno="4495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"></highlight></codeline>
<codeline lineno="4497"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4498"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4499"><highlight class="comment">idMatX::QR_Rotate</highlight></codeline>
<codeline lineno="4500"><highlight class="comment"></highlight></codeline>
<codeline lineno="4501"><highlight class="comment"><sp/><sp/>Performs<sp/>a<sp/>Jacobi<sp/>rotation<sp/>on<sp/>the<sp/>rows<sp/>i<sp/>and<sp/>i+1<sp/>of<sp/>the<sp/>unpacked<sp/>QR<sp/>factors.</highlight></codeline>
<codeline lineno="4502"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4503"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4504"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::QR_Rotate(<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;R,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f,<sp/>c,<sp/>s,<sp/>w,<sp/>y;</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"></highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>a<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(<sp/>b<sp/>&gt;=<sp/>0.0f<sp/>)<sp/>?<sp/>1.0f<sp/>:<sp/>-1.0f;</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>a<sp/>)<sp/>&gt;<sp/>idMath::Fabs(<sp/>b<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>b<sp/>/<sp/>a;</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>idMath::Fabs(<sp/>1.0f<sp/>/<sp/>idMath::Sqrt(<sp/>1.0f<sp/>+<sp/>f<sp/>*<sp/>f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>a<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>-c;</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>f<sp/>*<sp/>c;</highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>a<sp/>/<sp/>b;</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>idMath::Fabs(<sp/>1.0f<sp/>/<sp/>idMath::Sqrt(<sp/>1.0f<sp/>+<sp/>f<sp/>*<sp/>f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>-s;</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>f<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>R[i][j];</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>R[i+1][j];</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R[i][j]<sp/>=<sp/>c<sp/>*<sp/>y<sp/>-<sp/>s<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R[i+1][j]<sp/>=<sp/>s<sp/>*<sp/>y<sp/>+<sp/>c<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>(*this)[j][i];</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>(*this)[j][i+1];</highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[j][i]<sp/>=<sp/>c<sp/>*<sp/>y<sp/>-<sp/>s<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="4536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[j][i+1]<sp/>=<sp/>s<sp/>*<sp/>y<sp/>+<sp/>c<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"></highlight></codeline>
<codeline lineno="4540"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4541"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4542"><highlight class="comment">idMatX::QR_UpdateRankOne</highlight></codeline>
<codeline lineno="4543"><highlight class="comment"></highlight></codeline>
<codeline lineno="4544"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>unpacked<sp/>QR<sp/>factorization<sp/>to<sp/>obtain<sp/>the<sp/>factors<sp/>for<sp/>the<sp/>matrix:<sp/>QR<sp/>+<sp/>alpha<sp/>*<sp/>v<sp/>*<sp/>w&apos;</highlight></codeline>
<codeline lineno="4545"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4546"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4547"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::QR_UpdateRankOne(<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;R,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;w,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>alpha<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>k;</highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>u;</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"></highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>w.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"></highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/><sp/><sp/>u.SetData(<sp/>v.GetSize(),<sp/>VECX_ALLOCA(<sp/>v.GetSize()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/>TransposeMultiply(<sp/>u,<sp/>v<sp/>);</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/><sp/><sp/>u<sp/>*=<sp/>alpha;</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"></highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>v.GetSize()-1;<sp/>k<sp/>&gt;<sp/>0;<sp/>k--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>u[k]<sp/>!=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>k-1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QR_Rotate(<sp/>R,<sp/>i,<sp/>u[i],<sp/>-u[i+1]<sp/>);</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>u[i]<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u[i]<sp/>=<sp/>idMath::Fabs(<sp/>u[i+1]<sp/>);</highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>u[i]<sp/>)<sp/>&gt;<sp/>idMath::Fabs(<sp/>u[i+1]<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>u[i+1]<sp/>/<sp/>u[i];</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u[i]<sp/>=<sp/>idMath::Fabs(<sp/>u[i]<sp/>)<sp/>*<sp/>idMath::Sqrt(<sp/>1.0f<sp/>+<sp/>f<sp/>*<sp/>f<sp/>);</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>u[i]<sp/>/<sp/>u[i+1];</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u[i]<sp/>=<sp/>idMath::Fabs(<sp/>u[i+1]<sp/>)<sp/>*<sp/>idMath::Sqrt(<sp/>1.0f<sp/>+<sp/>f<sp/>*<sp/>f<sp/>);</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.GetSize();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R[0][i]<sp/>+=<sp/>u[0]<sp/>*<sp/>w[i];</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>k;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QR_Rotate(<sp/>R,<sp/>i,<sp/>-R[i][i],<sp/>R[i+1][i]<sp/>);</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4584"><highlight class="normal"></highlight></codeline>
<codeline lineno="4585"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4586"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4587"><highlight class="comment">idMatX::QR_UpdateRowColumn</highlight></codeline>
<codeline lineno="4588"><highlight class="comment"></highlight></codeline>
<codeline lineno="4589"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>unpacked<sp/>QR<sp/>factorization<sp/>to<sp/>obtain<sp/>the<sp/>factors<sp/>for<sp/>the<sp/>matrix:</highlight></codeline>
<codeline lineno="4590"><highlight class="comment"></highlight></codeline>
<codeline lineno="4591"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/>0<sp/><sp/>a<sp/><sp/>0<sp/>]</highlight></codeline>
<codeline lineno="4592"><highlight class="comment"><sp/><sp/>QR<sp/>+<sp/>[<sp/>d<sp/><sp/>b<sp/><sp/>e<sp/>]</highlight></codeline>
<codeline lineno="4593"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/>0<sp/><sp/>c<sp/><sp/>0<sp/>]</highlight></codeline>
<codeline lineno="4594"><highlight class="comment"></highlight></codeline>
<codeline lineno="4595"><highlight class="comment"><sp/><sp/>where:<sp/>a<sp/>=<sp/>v[0,r-1],<sp/>b<sp/>=<sp/>v[r],<sp/>c<sp/>=<sp/>v[r+1,numRows-1],<sp/>d<sp/>=<sp/>w[0,r-1],<sp/>w[r]<sp/>=<sp/>0.0f,<sp/>e<sp/>=<sp/>w[r+1,numColumns-1]</highlight></codeline>
<codeline lineno="4596"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4597"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4598"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::QR_UpdateRowColumn(<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;R,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>s;</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"></highlight></codeline>
<codeline lineno="4601"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>w.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>r<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>r<sp/>&lt;<sp/>numRows<sp/>&amp;&amp;<sp/>r<sp/>&lt;<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>w[r]<sp/>==<sp/>0.0f<sp/>);</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"></highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/><sp/><sp/>s.SetData(<sp/>Max(<sp/>numRows,<sp/>numColumns<sp/>),<sp/>VECX_ALLOCA(<sp/>Max(<sp/>numRows,<sp/>numColumns<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/><sp/><sp/>s.Zero();</highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/><sp/><sp/>s[r]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"></highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!QR_UpdateRankOne(<sp/>R,<sp/>v,<sp/>s,<sp/>1.0f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!QR_UpdateRankOne(<sp/>R,<sp/>s,<sp/>w,<sp/>1.0f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"></highlight></codeline>
<codeline lineno="4619"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4620"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4621"><highlight class="comment">idMatX::QR_UpdateIncrement</highlight></codeline>
<codeline lineno="4622"><highlight class="comment"></highlight></codeline>
<codeline lineno="4623"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>unpacked<sp/>QR<sp/>factorization<sp/>to<sp/>obtain<sp/>the<sp/>factors<sp/>for<sp/>the<sp/>matrix:</highlight></codeline>
<codeline lineno="4624"><highlight class="comment"></highlight></codeline>
<codeline lineno="4625"><highlight class="comment"><sp/><sp/>[<sp/>A<sp/><sp/>a<sp/>]</highlight></codeline>
<codeline lineno="4626"><highlight class="comment"><sp/><sp/>[<sp/>c<sp/><sp/>b<sp/>]</highlight></codeline>
<codeline lineno="4627"><highlight class="comment"></highlight></codeline>
<codeline lineno="4628"><highlight class="comment"><sp/><sp/>where:<sp/>a<sp/>=<sp/>v[0,numRows-1],<sp/>b<sp/>=<sp/>v[numRows],<sp/>c<sp/>=<sp/>w[0,numColumns-1],<sp/>w[numColumns]<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="4629"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4630"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4631"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::QR_UpdateIncrement(<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;R,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;w<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>v2;</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"></highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numRows+1<sp/>);</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>w.GetSize()<sp/>&gt;=<sp/>numColumns+1<sp/>);</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"></highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/><sp/><sp/>ChangeSize(<sp/>numRows+1,<sp/>numColumns+1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)[numRows-1][numRows-1]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"></highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/><sp/><sp/>R.ChangeSize(<sp/>R.numRows+1,<sp/>R.numColumns+1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/><sp/><sp/>R[R.numRows-1][R.numRows-1]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"></highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/>v2.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/>v2<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/><sp/><sp/>v2[numRows-1]<sp/>-=<sp/>1.0f;</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"></highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QR_UpdateRowColumn(<sp/>R,<sp/>v2,<sp/>w,<sp/>numRows-1<sp/>);</highlight></codeline>
<codeline lineno="4649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"></highlight></codeline>
<codeline lineno="4651"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4652"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4653"><highlight class="comment">idMatX::QR_UpdateDecrement</highlight></codeline>
<codeline lineno="4654"><highlight class="comment"></highlight></codeline>
<codeline lineno="4655"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>unpacked<sp/>QR<sp/>factorization<sp/>to<sp/>obtain<sp/>the<sp/>factors<sp/>for<sp/>the<sp/>matrix<sp/>with<sp/>row<sp/>r<sp/>and<sp/>column<sp/>r<sp/>removed.</highlight></codeline>
<codeline lineno="4656"><highlight class="comment"><sp/><sp/>v<sp/>and<sp/>w<sp/>should<sp/>store<sp/>the<sp/>column<sp/>and<sp/>row<sp/>of<sp/>the<sp/>original<sp/>matrix<sp/>respectively.</highlight></codeline>
<codeline lineno="4657"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4658"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4659"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::QR_UpdateDecrement(<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;R,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>v1,<sp/>w1;</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"></highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>w.GetSize()<sp/>&gt;=<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>r<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>r<sp/>&lt;<sp/>numRows<sp/>&amp;&amp;<sp/>r<sp/>&lt;<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"></highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/>w1.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"></highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>row<sp/>and<sp/>column<sp/>to<sp/>identity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>-v;</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/>w1<sp/>=<sp/>-w;</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/>v1[r]<sp/>+=<sp/>1.0f;</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/>w1[r]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"></highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!QR_UpdateRowColumn(<sp/>R,<sp/>v1,<sp/>w1,<sp/>r<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4679"><highlight class="normal"></highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>physically<sp/>remove<sp/>the<sp/>row<sp/>and<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><sp/><sp/>Update_Decrement(<sp/>r<sp/>);</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/><sp/><sp/>R.Update_Decrement(<sp/>r<sp/>);</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"></highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"></highlight></codeline>
<codeline lineno="4687"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4688"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4689"><highlight class="comment">idMatX::QR_Solve</highlight></codeline>
<codeline lineno="4690"><highlight class="comment"></highlight></codeline>
<codeline lineno="4691"><highlight class="comment"><sp/><sp/>Solve<sp/>Ax<sp/>=<sp/>b<sp/>with<sp/>A<sp/>factored<sp/>in-place<sp/>as:<sp/>QR</highlight></codeline>
<codeline lineno="4692"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4693"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4694"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::QR_Solve(<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;d<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum,<sp/>t;</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"></highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>x.GetSize()<sp/>&gt;=<sp/>numRows<sp/>&amp;&amp;<sp/>b.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>c.GetSize()<sp/>&gt;=<sp/>numRows<sp/>&amp;&amp;<sp/>d.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"></highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>b[i];</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4705"><highlight class="normal"></highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>multiply<sp/>b<sp/>with<sp/>transpose<sp/>of<sp/>Q</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows-1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4708"><highlight class="normal"></highlight></codeline>
<codeline lineno="4709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(*this)[j][i]<sp/>*<sp/>x[j];</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>sum<sp/>/<sp/>c[i];</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[j]<sp/>-=<sp/>t<sp/>*<sp/>(*this)[j][i];</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"></highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>backsubstitution<sp/>with<sp/>R</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>numRows-1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4721"><highlight class="normal"></highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>x[i];</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>(*this)[i][j]<sp/>*<sp/>x[j];</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>sum<sp/>/<sp/>d[i];</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"></highlight></codeline>
<codeline lineno="4730"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4731"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4732"><highlight class="comment">idMatX::QR_Solve</highlight></codeline>
<codeline lineno="4733"><highlight class="comment"></highlight></codeline>
<codeline lineno="4734"><highlight class="comment"><sp/><sp/>Solve<sp/>Ax<sp/>=<sp/>b<sp/>with<sp/>A<sp/>factored<sp/>as:<sp/>QR</highlight></codeline>
<codeline lineno="4735"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4736"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4737"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::QR_Solve(<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;R<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"></highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"></highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>multiply<sp/>b<sp/>with<sp/>transpose<sp/>of<sp/>Q</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/>TransposeMultiply(<sp/>x,<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"></highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>backsubstitution<sp/>with<sp/>R</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>numRows-1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"></highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>x[i];</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>R[i][j]<sp/>*<sp/>x[j];</highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>sum<sp/>/<sp/>R[i][i];</highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4755"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4756"><highlight class="normal"></highlight></codeline>
<codeline lineno="4757"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4758"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4759"><highlight class="comment">idMatX::QR_Inverse</highlight></codeline>
<codeline lineno="4760"><highlight class="comment"></highlight></codeline>
<codeline lineno="4761"><highlight class="comment"><sp/><sp/>Calculates<sp/>the<sp/>inverse<sp/>of<sp/>the<sp/>matrix<sp/>which<sp/>is<sp/>factored<sp/>in-place<sp/>as:<sp/>QR</highlight></codeline>
<codeline lineno="4762"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4763"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4764"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::QR_Inverse(<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;inv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;d<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>x,<sp/>b;</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"></highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"></highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/><sp/><sp/>x.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/><sp/><sp/>b.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/>b.Zero();</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/><sp/><sp/>inv.SetSize(<sp/>numRows,<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"></highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"></highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[i]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QR_Solve(<sp/>x,<sp/>b,<sp/>c,<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inv[j][i]<sp/>=<sp/>x[j];</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[i]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"></highlight></codeline>
<codeline lineno="4786"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4787"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4788"><highlight class="comment">idMatX::QR_UnpackFactors</highlight></codeline>
<codeline lineno="4789"><highlight class="comment"></highlight></codeline>
<codeline lineno="4790"><highlight class="comment"><sp/><sp/>Unpacks<sp/>the<sp/>in-place<sp/>QR<sp/>factorization.</highlight></codeline>
<codeline lineno="4791"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4792"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4793"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::QR_UnpackFactors(<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;Q,<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;R,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;d<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"></highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/><sp/><sp/>Q.Identity(<sp/>numRows,<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numColumns-1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>c[i]<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>i;<sp/>k<sp/>&lt;<sp/>numColumns;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(*this)[k][i]<sp/>*<sp/>Q[j][k];</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>/=<sp/>c[i];</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>i;<sp/>k<sp/>&lt;<sp/>numColumns;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q[j][k]<sp/>-=<sp/>sum<sp/>*<sp/>(*this)[k][i];</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"></highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/>R.Zero(<sp/>numRows,<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R[i][i]<sp/>=<sp/>d[i];</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i+1;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R[i][j]<sp/>=<sp/>(*this)[i][j];</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4821"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"></highlight></codeline>
<codeline lineno="4823"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4824"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4825"><highlight class="comment">idMatX::QR_MultiplyFactors</highlight></codeline>
<codeline lineno="4826"><highlight class="comment"></highlight></codeline>
<codeline lineno="4827"><highlight class="comment"><sp/><sp/>Multiplies<sp/>the<sp/>factors<sp/>of<sp/>the<sp/>in-place<sp/>QR<sp/>factorization<sp/>to<sp/>form<sp/>the<sp/>original<sp/>matrix.</highlight></codeline>
<codeline lineno="4828"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4829"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4830"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::QR_MultiplyFactors(<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;d<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>Q;</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"></highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/>Q.Identity(<sp/>numRows,<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numColumns-1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>c[i]<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>i;<sp/>k<sp/>&lt;<sp/>numColumns;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(*this)[k][i]<sp/>*<sp/>Q[j][k];</highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>/=<sp/>c[i];</highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>i;<sp/>k<sp/>&lt;<sp/>numColumns;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q[j][k]<sp/>-=<sp/>sum<sp/>*<sp/>(*this)[k][i];</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4851"><highlight class="normal"></highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>Q[i][j]<sp/>*<sp/>d[i];</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>i;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>Q[i][k]<sp/>*<sp/>(*this)[j][k];</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[i][j]<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"></highlight></codeline>
<codeline lineno="4863"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4864"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4865"><highlight class="comment">idMatX::Pythag</highlight></codeline>
<codeline lineno="4866"><highlight class="comment"></highlight></codeline>
<codeline lineno="4867"><highlight class="comment"><sp/><sp/>Computes<sp/>(a^2<sp/>+<sp/>b^2)^1/2<sp/>without<sp/>underflow<sp/>or<sp/>overflow.</highlight></codeline>
<codeline lineno="4868"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4869"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4870"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>idMatX::Pythag(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>at,<sp/>bt,<sp/>ct;</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"></highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/>at<sp/>=<sp/>idMath::Fabs(<sp/>a<sp/>);</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/><sp/><sp/>bt<sp/>=<sp/>idMath::Fabs(<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>at<sp/>&gt;<sp/>bt<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct<sp/>=<sp/>bt<sp/>/<sp/>at;</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at<sp/>*<sp/>idMath::Sqrt(<sp/>1.0f<sp/>+<sp/>ct<sp/>*<sp/>ct<sp/>);</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bt<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct<sp/>=<sp/>at<sp/>/<sp/>bt;</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bt<sp/>*<sp/>idMath::Sqrt(<sp/>1.0f<sp/>+<sp/>ct<sp/>*<sp/>ct<sp/>);</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0f;</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4886"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"></highlight></codeline>
<codeline lineno="4888"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4889"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4890"><highlight class="comment">idMatX::SVD_BiDiag</highlight></codeline>
<codeline lineno="4891"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4892"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4893"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::SVD_BiDiag(<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;w,<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;rv1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;anorm<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k,<sp/>l;</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f,<sp/>h,<sp/>r,<sp/>g,<sp/>s,<sp/>scale;</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"></highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/><sp/><sp/>anorm<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/><sp/><sp/>g<sp/>=<sp/>s<sp/>=<sp/>scale<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numColumns;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv1[i]<sp/>=<sp/>scale<sp/>*<sp/>g;</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>s<sp/>=<sp/>scale<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&lt;<sp/>numRows<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>i;<sp/>k<sp/>&lt;<sp/>numRows;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>+=<sp/>idMath::Fabs(<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[k][i]<sp/>);</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>scale<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>i;<sp/>k<sp/>&lt;<sp/>numRows;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[k][i]<sp/>/=<sp/>scale;</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>(*this)[k][i]<sp/>*<sp/>(*this)[k][i];</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>idMath::Sqrt(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>f<sp/>&gt;=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>-g;</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>f<sp/>*<sp/>g<sp/>-<sp/>s;</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][i]<sp/>=<sp/>f<sp/>-<sp/>g;</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>!=<sp/>(numColumns-1)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>l;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>s<sp/>=<sp/>0.0f,<sp/>k<sp/>=<sp/>i;<sp/>k<sp/>&lt;<sp/>numRows;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>(*this)[k][i]<sp/>*<sp/>(*this)[k][j];</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>s<sp/>/<sp/>h;</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>i;<sp/>k<sp/>&lt;<sp/>numRows;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[k][j]<sp/>+=<sp/>f<sp/>*<sp/>(*this)[k][i];</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>i;<sp/>k<sp/>&lt;<sp/>numRows;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[k][i]<sp/>*=<sp/>scale;</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w[i]<sp/>=<sp/>scale<sp/>*<sp/>g;</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>s<sp/>=<sp/>scale<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&lt;<sp/>numRows<sp/>&amp;&amp;<sp/>i<sp/>!=<sp/>(numColumns-1)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>l;<sp/>k<sp/>&lt;<sp/>numColumns;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>+=<sp/>idMath::Fabs(<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[i][k]<sp/>);</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>scale<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>l;<sp/>k<sp/>&lt;<sp/>numColumns;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][k]<sp/>/=<sp/>scale;</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>(*this)[i][k]<sp/>*<sp/>(*this)[i][k];</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>(*this)[i][l];</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>idMath::Sqrt(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>f<sp/>&gt;=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>-g;</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>1.0f<sp/>/<sp/>(<sp/>f<sp/>*<sp/>g<sp/>-<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][l]<sp/>=<sp/>f<sp/>-<sp/>g;</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>l;<sp/>k<sp/>&lt;<sp/>numColumns;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv1[k]<sp/>=<sp/>(*this)[i][k]<sp/>*<sp/>h;</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>!=<sp/>(numRows-1)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>l;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>s<sp/>=<sp/>0.0f,<sp/>k<sp/>=<sp/>l;<sp/>k<sp/>&lt;<sp/>numColumns;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>(*this)[j][k]<sp/>*<sp/>(*this)[i][k];</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>l;<sp/>k<sp/>&lt;<sp/>numColumns;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[j][k]<sp/>+=<sp/>s<sp/>*<sp/>rv1[k];</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>l;<sp/>k<sp/>&lt;<sp/>numColumns;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][k]<sp/>*=<sp/>scale;</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>idMath::Fabs(<sp/>w[i]<sp/>)<sp/>+<sp/>idMath::Fabs(<sp/>rv1[i]<sp/>);</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r<sp/>&gt;<sp/>anorm<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anorm<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4976"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"></highlight></codeline>
<codeline lineno="4978"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4979"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4980"><highlight class="comment">idMatX::SVD_InitialWV</highlight></codeline>
<codeline lineno="4981"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4982"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4983"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::SVD_InitialWV(<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;w,<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;V,<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;rv1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k,<sp/>l;</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f,<sp/>g,<sp/>s;</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"></highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><sp/><sp/>g<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>(numColumns-1);<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&lt;<sp/>(<sp/>numColumns<sp/>-<sp/>1<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>l;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V[j][i]<sp/>=<sp/>((*this)[i][j]<sp/>/<sp/>(*this)[i][l])<sp/>/<sp/>g;</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>division<sp/>to<sp/>reduce<sp/>underflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>l;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>s<sp/>=<sp/>0.0f,<sp/>k<sp/>=<sp/>l;<sp/>k<sp/>&lt;<sp/>numColumns;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>(*this)[i][k]<sp/>*<sp/>V[k][j];</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>l;<sp/>k<sp/>&lt;<sp/>numColumns;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V[k][j]<sp/>+=<sp/>s<sp/>*<sp/>V[k][i];</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>l;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V[i][j]<sp/>=<sp/>V[j][i]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V[i][i]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>rv1[i];</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>numColumns<sp/>-<sp/>1<sp/>;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>w[i];</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&lt;<sp/>(numColumns-1)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>l;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][j]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>1.0f<sp/>/<sp/>g;</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>!=<sp/>(numColumns-1)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>l;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>s<sp/>=<sp/>0.0f,<sp/>k<sp/>=<sp/>l;<sp/>k<sp/>&lt;<sp/>numRows;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>(*this)[k][i]<sp/>*<sp/>(*this)[k][j];</highlight></codeline>
<codeline lineno="5026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>(s<sp/>/<sp/>(*this)[i][i])<sp/>*<sp/>g;</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>i;<sp/>k<sp/>&lt;<sp/>numRows;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[k][j]<sp/>+=<sp/>f<sp/>*<sp/>(*this)[k][i];</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[j][i]<sp/>*=<sp/>g;</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[j][i]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][i]<sp/>+=<sp/>1.0f;</highlight></codeline>
<codeline lineno="5043"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5044"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"></highlight></codeline>
<codeline lineno="5046"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5047"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5048"><highlight class="comment">idMatX::SVD_Factor</highlight></codeline>
<codeline lineno="5049"><highlight class="comment"></highlight></codeline>
<codeline lineno="5050"><highlight class="comment"><sp/><sp/>in-place<sp/>factorization:<sp/>U<sp/>*<sp/>Diag(w)<sp/>*<sp/>V.Transpose()</highlight></codeline>
<codeline lineno="5051"><highlight class="comment"><sp/><sp/>known<sp/>as<sp/>the<sp/>Singular<sp/>Value<sp/>Decomposition.</highlight></codeline>
<codeline lineno="5052"><highlight class="comment"><sp/><sp/>U<sp/>is<sp/>a<sp/>column-orthogonal<sp/>matrix<sp/>which<sp/>overwrites<sp/>the<sp/>original<sp/>matrix.</highlight></codeline>
<codeline lineno="5053"><highlight class="comment"><sp/><sp/>w<sp/>is<sp/>a<sp/>diagonal<sp/>matrix<sp/>with<sp/>all<sp/>elements<sp/>&gt;=<sp/>0<sp/>which<sp/>are<sp/>the<sp/>singular<sp/>values.</highlight></codeline>
<codeline lineno="5054"><highlight class="comment"><sp/><sp/>V<sp/>is<sp/>the<sp/>transpose<sp/>of<sp/>an<sp/>orthogonal<sp/>matrix.</highlight></codeline>
<codeline lineno="5055"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5056"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5057"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::SVD_Factor(<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;w,<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;V<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag,<sp/>i,<sp/>its,<sp/>j,<sp/>jj,<sp/>k,<sp/>l,<sp/>nm;</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c,<sp/>f,<sp/>h,<sp/>s,<sp/>x,<sp/>y,<sp/>z,<sp/>r,<sp/>g<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>anorm<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>rv1;</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"></highlight></codeline>
<codeline lineno="5063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numRows<sp/>&lt;<sp/>numColumns<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5066"><highlight class="normal"></highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/><sp/><sp/>rv1.SetData(<sp/>numColumns,<sp/>VECX_ALLOCA(<sp/>numColumns<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/><sp/><sp/>rv1.Zero();</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/><sp/><sp/>w.Zero(<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"><sp/><sp/><sp/><sp/>V.Zero(<sp/>numColumns,<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"></highlight></codeline>
<codeline lineno="5072"><highlight class="normal"><sp/><sp/><sp/><sp/>SVD_BiDiag(<sp/>w,<sp/>rv1,<sp/>anorm<sp/>);</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/><sp/><sp/>SVD_InitialWV(<sp/>w,<sp/>V,<sp/>rv1<sp/>);</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"></highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>numColumns<sp/>-<sp/>1;<sp/>k<sp/>&gt;=<sp/>0;<sp/>k--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>its<sp/>=<sp/>1;<sp/>its<sp/>&lt;=<sp/>30;<sp/>its++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nm<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>l<sp/>=<sp/>k;<sp/>l<sp/>&gt;=<sp/>0;<sp/>l--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nm<sp/>=<sp/>l<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>idMath::Fabs(<sp/>rv1[l]<sp/>)<sp/>+<sp/>anorm<sp/>)<sp/>==<sp/>anorm<sp/></highlight><highlight class="comment">/*<sp/>idMath::Fabs(<sp/>rv1[l]<sp/>)<sp/>&lt;<sp/>idMath::FLT_EPSILON<sp/>*/</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>idMath::Fabs(<sp/>w[nm]<sp/>)<sp/>+<sp/>anorm<sp/>)<sp/>==<sp/>anorm<sp/></highlight><highlight class="comment">/*<sp/>idMath::Fabs(<sp/>w[nm]<sp/>)<sp/>&lt;<sp/>idMath::FLT_EPSILON<sp/>*/</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flag<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="5092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>l;<sp/>i<sp/>&lt;=<sp/>k;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>s<sp/>*<sp/>rv1[i];</highlight></codeline>
<codeline lineno="5094"><highlight class="normal"></highlight></codeline>
<codeline lineno="5095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>idMath::Fabs(<sp/>f<sp/>)<sp/>+<sp/>anorm<sp/>)<sp/>!=<sp/>anorm<sp/></highlight><highlight class="comment">/*<sp/>idMath::Fabs(<sp/>f<sp/>)<sp/>&gt;<sp/>idMath::FLT_EPSILON<sp/>*/</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>w[i];</highlight></codeline>
<codeline lineno="5097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>Pythag(<sp/>f,<sp/>g<sp/>);</highlight></codeline>
<codeline lineno="5098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w[i]<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="5099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>1.0f<sp/>/<sp/>h;</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>g<sp/>*<sp/>h;</highlight></codeline>
<codeline lineno="5101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>-f<sp/>*<sp/>h;</highlight></codeline>
<codeline lineno="5102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>(*this)[j][nm];</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>(*this)[j][i];</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[j][nm]<sp/>=<sp/>y<sp/>*<sp/>c<sp/>+<sp/>z<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[j][i]<sp/>=<sp/>z<sp/>*<sp/>c<sp/>-<sp/>y<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>w[k];</highlight></codeline>
<codeline lineno="5112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>l<sp/>==<sp/>k<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>z<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w[k]<sp/>=<sp/>-z;</highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V[j][k]<sp/>=<sp/>-V[j][k];</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>its<sp/>==<sp/>30<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>convergence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>w[l];</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nm<sp/>=<sp/>k<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>w[nm];</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>rv1[nm];</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>rv1[k];</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>(<sp/>(<sp/>y<sp/>-<sp/>z<sp/>)<sp/>*<sp/>(<sp/>y<sp/>+<sp/>z<sp/>)<sp/>+<sp/>(<sp/>g<sp/>-<sp/>h<sp/>)<sp/>*<sp/>(<sp/>g<sp/>+<sp/>h<sp/>)<sp/>)<sp/>/<sp/>(<sp/>2.0f<sp/>*<sp/>h<sp/>*<sp/>y<sp/>);</highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>Pythag(<sp/>f,<sp/>1.0f<sp/>);</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>(<sp/>f<sp/>&gt;=<sp/>0.0f<sp/>?<sp/>g<sp/>:<sp/>-<sp/>g<sp/>);</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f=<sp/>(<sp/>(<sp/>x<sp/>-<sp/>z<sp/>)<sp/>*<sp/>(<sp/>x<sp/>+<sp/>z<sp/>)<sp/>+<sp/>h<sp/>*<sp/>(<sp/>(<sp/>y<sp/>/<sp/>(<sp/>f<sp/>+<sp/>r<sp/>)<sp/>)<sp/>-<sp/>h<sp/>)<sp/>)<sp/>/<sp/>x;</highlight></codeline>
<codeline lineno="5133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>s<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>l;<sp/>j<sp/>&lt;=<sp/>nm;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>j<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>rv1[i];</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>w[i];</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>s<sp/>*<sp/>g;</highlight></codeline>
<codeline lineno="5139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>c<sp/>*<sp/>g;</highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>Pythag(<sp/>f,<sp/>h<sp/>);</highlight></codeline>
<codeline lineno="5141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv1[j]<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>f<sp/>/<sp/>z;</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>h<sp/>/<sp/>z;</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>x<sp/>*<sp/>c<sp/>+<sp/>g<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="5145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>g<sp/>*<sp/>c<sp/>-<sp/>x<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>y<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>y<sp/>*<sp/>c;</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>jj<sp/>=<sp/>0;<sp/>jj<sp/>&lt;<sp/>numColumns;<sp/>jj++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>V[jj][j];</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>V[jj][i];</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V[jj][j]<sp/>=<sp/>x<sp/>*<sp/>c<sp/>+<sp/>z<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V[jj][i]<sp/>=<sp/>z<sp/>*<sp/>c<sp/>-<sp/>x<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>Pythag(<sp/>f,<sp/>h<sp/>);</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w[j]<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>z<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>1.0f<sp/>/<sp/>z;</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>f<sp/>*<sp/>z;</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>h<sp/>*<sp/>z;</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>(<sp/>c<sp/>*<sp/>g<sp/>)<sp/>+<sp/>(<sp/>s<sp/>*<sp/>y<sp/>);</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(<sp/>c<sp/>*<sp/>y<sp/>)<sp/>-<sp/>(<sp/>s<sp/>*<sp/>g<sp/>);</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>jj<sp/>=<sp/>0;<sp/>jj<sp/>&lt;<sp/>numRows;<sp/>jj++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>(*this)[jj][j];</highlight></codeline>
<codeline lineno="5165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>(*this)[jj][i];</highlight></codeline>
<codeline lineno="5166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[jj][j]<sp/>=<sp/>y<sp/>*<sp/>c<sp/>+<sp/>z<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="5167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[jj][i]<sp/>=<sp/>z<sp/>*<sp/>c<sp/>-<sp/>y<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="5168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv1[l]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv1[k]<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w[k]<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5177"><highlight class="normal"></highlight></codeline>
<codeline lineno="5178"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5179"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5180"><highlight class="comment">idMatX::SVD_Solve</highlight></codeline>
<codeline lineno="5181"><highlight class="comment"></highlight></codeline>
<codeline lineno="5182"><highlight class="comment"><sp/><sp/>Solve<sp/>Ax<sp/>=<sp/>b<sp/>with<sp/>A<sp/>factored<sp/>as:<sp/>U<sp/>*<sp/>Diag(w)<sp/>*<sp/>V.Transpose()</highlight></codeline>
<codeline lineno="5183"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5184"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5185"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::SVD_Solve(<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;V<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"></highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>x.GetSize()<sp/>&gt;=<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="5191"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>b.GetSize()<sp/>&gt;=<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="5192"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>w.GetSize()<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>V.GetNumRows()<sp/>==<sp/>numColumns<sp/>&amp;&amp;<sp/>V.GetNumColumns()<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="5194"><highlight class="normal"></highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.SetData(<sp/>numColumns,<sp/>VECX_ALLOCA(<sp/>numColumns<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"></highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numColumns;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="5199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>w[i]<sp/>&gt;=<sp/>idMath::FLT_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(*this)[j][i]<sp/>*<sp/>b[j];</highlight></codeline>
<codeline lineno="5202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>/=<sp/>w[i];</highlight></codeline>
<codeline lineno="5204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i]<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numColumns;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="5209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>V[i][j]<sp/>*<sp/>tmp[j];</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="5213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"></highlight></codeline>
<codeline lineno="5216"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5217"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5218"><highlight class="comment">idMatX::SVD_Inverse</highlight></codeline>
<codeline lineno="5219"><highlight class="comment"></highlight></codeline>
<codeline lineno="5220"><highlight class="comment"><sp/><sp/>Calculates<sp/>the<sp/>inverse<sp/>of<sp/>the<sp/>matrix<sp/>which<sp/>is<sp/>factored<sp/>in-place<sp/>as:<sp/>U<sp/>*<sp/>Diag(w)<sp/>*<sp/>V.Transpose()</highlight></codeline>
<codeline lineno="5221"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5222"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5223"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::SVD_Inverse(<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;inv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;V<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wi,<sp/>sum;</highlight></codeline>
<codeline lineno="5226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>V2;</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"></highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"></highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/><sp/><sp/>V2<sp/>=<sp/>V;</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"></highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V<sp/>*<sp/>[diag(1/w[i])]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wi<sp/>=<sp/>w[i];</highlight></codeline>
<codeline lineno="5235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wi<sp/>=<sp/>(<sp/>wi<sp/>&lt;<sp/>idMath::FLT_EPSILON<sp/>)<sp/>?<sp/>0.0f<sp/>:<sp/>1.0f<sp/>/<sp/>wi;</highlight></codeline>
<codeline lineno="5236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V2[j][i]<sp/>*=<sp/>wi;</highlight></codeline>
<codeline lineno="5238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5240"><highlight class="normal"></highlight></codeline>
<codeline lineno="5241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V<sp/>*<sp/>[diag(1/w[i])]<sp/>*<sp/>Ut</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>V2[i][0]<sp/>*<sp/>(*this)[j][0];</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;<sp/>numColumns;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>V2[i][k]<sp/>*<sp/>(*this)[j][k];</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inv[i][j]<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5252"><highlight class="normal"></highlight></codeline>
<codeline lineno="5253"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5254"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5255"><highlight class="comment">idMatX::SVD_MultiplyFactors</highlight></codeline>
<codeline lineno="5256"><highlight class="comment"></highlight></codeline>
<codeline lineno="5257"><highlight class="comment"><sp/><sp/>Multiplies<sp/>the<sp/>factors<sp/>of<sp/>the<sp/>in-place<sp/>SVD<sp/>factorization<sp/>to<sp/>form<sp/>the<sp/>original<sp/>matrix.</highlight></codeline>
<codeline lineno="5258"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5259"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5260"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::SVD_MultiplyFactors(<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;V<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="5262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"></highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/><sp/><sp/>m.SetSize(<sp/>numRows,<sp/>V.GetNumRows()<sp/>);</highlight></codeline>
<codeline lineno="5265"><highlight class="normal"></highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>numRows;<sp/>r++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>row<sp/>of<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>w[r]<sp/>&gt;=<sp/>idMath::FLT_EPSILON<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>V.GetNumRows();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(*this)[r][j]<sp/>*<sp/>V[i][j];</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[r][i]<sp/>=<sp/>sum<sp/>*<sp/>w[r];</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>V.GetNumRows();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[r][i]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="5279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5283"><highlight class="normal"></highlight></codeline>
<codeline lineno="5284"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5285"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5286"><highlight class="comment">idMatX::Cholesky_Factor</highlight></codeline>
<codeline lineno="5287"><highlight class="comment"></highlight></codeline>
<codeline lineno="5288"><highlight class="comment"><sp/><sp/>in-place<sp/>Cholesky<sp/>factorization:<sp/>LL&apos;</highlight></codeline>
<codeline lineno="5289"><highlight class="comment"><sp/><sp/>L<sp/>is<sp/>a<sp/>triangular<sp/>matrix<sp/>stored<sp/>in<sp/>the<sp/>lower<sp/>triangle.</highlight></codeline>
<codeline lineno="5290"><highlight class="comment"><sp/><sp/>The<sp/>upper<sp/>triangle<sp/>is<sp/>not<sp/>cleared.</highlight></codeline>
<codeline lineno="5291"><highlight class="comment"><sp/><sp/>The<sp/>initial<sp/>matrix<sp/>has<sp/>to<sp/>be<sp/>symmetric<sp/>positive<sp/>definite.</highlight></codeline>
<codeline lineno="5292"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5293"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5294"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::Cholesky_Factor(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*invSqrt;</highlight></codeline>
<codeline lineno="5297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"></highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="5300"><highlight class="normal"></highlight></codeline>
<codeline lineno="5301"><highlight class="normal"><sp/><sp/><sp/><sp/>invSqrt<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numRows<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5302"><highlight class="normal"></highlight></codeline>
<codeline lineno="5303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5304"><highlight class="normal"></highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"></highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>(*this)[i][j];</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>j;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>(*this)[i][k]<sp/>*<sp/>(*this)[j][k];</highlight></codeline>
<codeline lineno="5310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][j]<sp/>=<sp/>sum<sp/>*<sp/>invSqrt[j];</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5313"><highlight class="normal"></highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>i;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>(*this)[i][k]<sp/>*<sp/>(*this)[i][k];</highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"></highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sum<sp/>&lt;=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"></highlight></codeline>
<codeline lineno="5323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invSqrt[i]<sp/>=<sp/>idMath::InvSqrt(<sp/>sum<sp/>);</highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][i]<sp/>=<sp/>invSqrt[i]<sp/>*<sp/>sum;</highlight></codeline>
<codeline lineno="5325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"></highlight></codeline>
<codeline lineno="5329"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5330"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5331"><highlight class="comment">idMatX::Cholesky_UpdateRankOne</highlight></codeline>
<codeline lineno="5332"><highlight class="comment"></highlight></codeline>
<codeline lineno="5333"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>in-place<sp/>Cholesky<sp/>factorization<sp/>to<sp/>obtain<sp/>the<sp/>factors<sp/>for<sp/>the<sp/>matrix:<sp/>LL&apos;<sp/>+<sp/>alpha<sp/>*<sp/>v<sp/>*<sp/>v&apos;</highlight></codeline>
<codeline lineno="5334"><highlight class="comment"><sp/><sp/>If<sp/>offset<sp/>&gt;<sp/>0<sp/>only<sp/>the<sp/>lower<sp/>right<sp/>corner<sp/>starting<sp/>at<sp/>(offset,<sp/>offset)<sp/>is<sp/>updated.</highlight></codeline>
<codeline lineno="5335"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5336"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5337"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::Cholesky_UpdateRankOne(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>alpha,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="5339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y;</highlight></codeline>
<codeline lineno="5340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diag,<sp/>invDiag,<sp/>diagSqr,<sp/>newDiag,<sp/>newDiagSqr,<sp/>beta,<sp/>p,<sp/>d;</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"></highlight></codeline>
<codeline lineno="5342"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="5343"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>offset<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>offset<sp/>&lt;<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"></highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>v.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(<sp/>y,<sp/>v.ToFloatPtr(),<sp/>v.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5348"><highlight class="normal"></highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>offset;<sp/>i<sp/>&lt;<sp/>numColumns;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>y[i];</highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diag<sp/>=<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invDiag<sp/>=<sp/>1.0f<sp/>/<sp/>diag;</highlight></codeline>
<codeline lineno="5353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diagSqr<sp/>=<sp/>diag<sp/>*<sp/>diag;</highlight></codeline>
<codeline lineno="5354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newDiagSqr<sp/>=<sp/>diagSqr<sp/>+<sp/>alpha<sp/>*<sp/>p<sp/>*<sp/>p;</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"></highlight></codeline>
<codeline lineno="5356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>newDiagSqr<sp/>&lt;=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5359"><highlight class="normal"></highlight></codeline>
<codeline lineno="5360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][i]<sp/>=<sp/>newDiag<sp/>=<sp/>idMath::Sqrt(<sp/>newDiagSqr<sp/>);</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"></highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha<sp/>/=<sp/>newDiagSqr;</highlight></codeline>
<codeline lineno="5363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beta<sp/>=<sp/>p<sp/>*<sp/>alpha;</highlight></codeline>
<codeline lineno="5364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha<sp/>*=<sp/>diagSqr;</highlight></codeline>
<codeline lineno="5365"><highlight class="normal"></highlight></codeline>
<codeline lineno="5366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i+1;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5367"><highlight class="normal"></highlight></codeline>
<codeline lineno="5368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(*this)[j][i]<sp/>*<sp/>invDiag;</highlight></codeline>
<codeline lineno="5369"><highlight class="normal"></highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[j]<sp/>-=<sp/>p<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>+=<sp/>beta<sp/>*<sp/>y[j];</highlight></codeline>
<codeline lineno="5372"><highlight class="normal"></highlight></codeline>
<codeline lineno="5373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[j][i]<sp/>=<sp/>d<sp/>*<sp/>newDiag;</highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5378"><highlight class="normal"></highlight></codeline>
<codeline lineno="5379"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5380"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5381"><highlight class="comment">idMatX::Cholesky_UpdateRowColumn</highlight></codeline>
<codeline lineno="5382"><highlight class="comment"></highlight></codeline>
<codeline lineno="5383"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>in-place<sp/>Cholesky<sp/>factorization<sp/>to<sp/>obtain<sp/>the<sp/>factors<sp/>for<sp/>the<sp/>matrix:</highlight></codeline>
<codeline lineno="5384"><highlight class="comment"></highlight></codeline>
<codeline lineno="5385"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/>0<sp/><sp/>a<sp/><sp/>0<sp/>]</highlight></codeline>
<codeline lineno="5386"><highlight class="comment"><sp/><sp/>LL&apos;<sp/>+<sp/>[<sp/>a<sp/><sp/>b<sp/><sp/>c<sp/>]</highlight></codeline>
<codeline lineno="5387"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/>0<sp/><sp/>c<sp/><sp/>0<sp/>]</highlight></codeline>
<codeline lineno="5388"><highlight class="comment"></highlight></codeline>
<codeline lineno="5389"><highlight class="comment"><sp/><sp/>where:<sp/>a<sp/>=<sp/>v[0,r-1],<sp/>b<sp/>=<sp/>v[r],<sp/>c<sp/>=<sp/>v[r+1,numRows-1]</highlight></codeline>
<codeline lineno="5390"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5391"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5392"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::Cholesky_UpdateRowColumn(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="5394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="5395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*original,<sp/>*y;</highlight></codeline>
<codeline lineno="5396"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>addSub;</highlight></codeline>
<codeline lineno="5397"><highlight class="normal"></highlight></codeline>
<codeline lineno="5398"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="5399"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="5400"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>r<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>r<sp/>&lt;<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="5401"><highlight class="normal"></highlight></codeline>
<codeline lineno="5402"><highlight class="normal"><sp/><sp/><sp/><sp/>addSub.SetData(<sp/>numColumns,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numColumns<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5403"><highlight class="normal"></highlight></codeline>
<codeline lineno="5404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5405"><highlight class="normal"></highlight></codeline>
<codeline lineno="5406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numColumns<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v0<sp/>=<sp/>v[0];</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>(*this)[0][0];</highlight></codeline>
<codeline lineno="5409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>sum<sp/>*<sp/>sum;<sp/></highlight></codeline>
<codeline lineno="5410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>sum<sp/>+<sp/>v0;<sp/></highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sum<sp/>&lt;=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[0][0]<sp/>=<sp/>idMath::Sqrt(<sp/>sum<sp/>);</highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numColumns;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSub[i]<sp/>=<sp/>v[i];</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5420"><highlight class="normal"></highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5422"><highlight class="normal"></highlight></codeline>
<codeline lineno="5423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numColumns<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numColumns<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"></highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>original<sp/>row/column<sp/>of<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;=<sp/>i;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(*this)[r][j]<sp/>*<sp/>(*this)[i][j];</highlight></codeline>
<codeline lineno="5431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original[i]<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="5433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5434"><highlight class="normal"></highlight></codeline>
<codeline lineno="5435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>for<sp/>y<sp/>in<sp/>L<sp/>*<sp/>y<sp/>=<sp/>original<sp/>+<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>r;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>original[i]<sp/>+<sp/>v[i];</highlight></codeline>
<codeline lineno="5438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>(*this)[r][j]<sp/>*<sp/>(*this)[i][j];</highlight></codeline>
<codeline lineno="5440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[r][i]<sp/>=<sp/>sum<sp/>/<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="5442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5443"><highlight class="normal"></highlight></codeline>
<codeline lineno="5444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>last<sp/>row/column<sp/>of<sp/>the<sp/>matrix<sp/>is<sp/>updated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r<sp/>==<sp/>numColumns<sp/>-<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>calculate<sp/>new<sp/>diagonal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>original[r]<sp/>+<sp/>v[r];</highlight></codeline>
<codeline lineno="5448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>r;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="5449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>(*this)[r][j]<sp/>*<sp/>(*this)[r][j];</highlight></codeline>
<codeline lineno="5450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sum<sp/>&lt;=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[r][r]<sp/>=<sp/>idMath::Sqrt(<sp/>sum<sp/>);</highlight></codeline>
<codeline lineno="5455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5457"><highlight class="normal"></highlight></codeline>
<codeline lineno="5458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>the<sp/>row/column<sp/>to<sp/>be<sp/>added<sp/>to<sp/>the<sp/>lower<sp/>right<sp/>sub<sp/>matrix<sp/>starting<sp/>at<sp/>(r,<sp/>r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>r;<sp/>i<sp/>&lt;<sp/>numColumns;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="5461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;=<sp/>r;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(*this)[r][j]<sp/>*<sp/>(*this)[i][j];</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSub[i]<sp/>=<sp/>v[i]<sp/>-<sp/>(<sp/>sum<sp/>-<sp/>original[i]<sp/>);</highlight></codeline>
<codeline lineno="5465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5467"><highlight class="normal"></highlight></codeline>
<codeline lineno="5468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>row/column<sp/>to<sp/>the<sp/>lower<sp/>right<sp/>sub<sp/>matrix<sp/>starting<sp/>at<sp/>(r,<sp/>r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5469"><highlight class="normal"></highlight></codeline>
<codeline lineno="5470"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="5471"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5472"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>v1,<sp/>v2;</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="5474"><highlight class="normal"></highlight></codeline>
<codeline lineno="5475"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.SetData(<sp/>numColumns,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numColumns<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5476"><highlight class="normal"><sp/><sp/><sp/><sp/>v2.SetData(<sp/>numColumns,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numColumns<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5477"><highlight class="normal"></highlight></codeline>
<codeline lineno="5478"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>idMath::SQRT_1OVER2;</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"><sp/><sp/><sp/><sp/>v1[r]<sp/>=<sp/>(<sp/>0.5f<sp/>*<sp/>addSub[r]<sp/>+<sp/>1.0f<sp/>)<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/><sp/><sp/>v2[r]<sp/>=<sp/>(<sp/>0.5f<sp/>*<sp/>addSub[r]<sp/>-<sp/>1.0f<sp/>)<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>r+1;<sp/>i<sp/>&lt;<sp/>numColumns;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1[i]<sp/>=<sp/>v2[i]<sp/>=<sp/>addSub[i]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5484"><highlight class="normal"></highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!Cholesky_UpdateRankOne(<sp/>v1,<sp/>1.0f,<sp/>r<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>downdate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!Cholesky_UpdateRankOne(<sp/>v2,<sp/>-1.0f,<sp/>r<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5493"><highlight class="normal"></highlight></codeline>
<codeline lineno="5494"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="5495"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*v1,<sp/>*v2;</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diag,<sp/>invDiag,<sp/>diagSqr,<sp/>newDiag,<sp/>newDiagSqr;</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alpha1,<sp/>alpha2,<sp/>beta1,<sp/>beta2,<sp/>p1,<sp/>p2,<sp/>d;</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"></highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numColumns<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/><sp/><sp/>v2<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numColumns<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"></highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>idMath::SQRT_1OVER2;</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/><sp/><sp/>v1[r]<sp/>=<sp/>(<sp/>0.5f<sp/>*<sp/>addSub[r]<sp/>+<sp/>1.0f<sp/>)<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="5505"><highlight class="normal"><sp/><sp/><sp/><sp/>v2[r]<sp/>=<sp/>(<sp/>0.5f<sp/>*<sp/>addSub[r]<sp/>-<sp/>1.0f<sp/>)<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>r+1;<sp/>i<sp/>&lt;<sp/>numColumns;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1[i]<sp/>=<sp/>v2[i]<sp/>=<sp/>addSub[i]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="5508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5509"><highlight class="normal"></highlight></codeline>
<codeline lineno="5510"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha1<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="5511"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha2<sp/>=<sp/>-1.0f;</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"></highlight></codeline>
<codeline lineno="5513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>simultaneous<sp/>update/downdate<sp/>of<sp/>the<sp/>sub<sp/>matrix<sp/>starting<sp/>at<sp/>(r,<sp/>r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>r;<sp/>i<sp/>&lt;<sp/>numColumns;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>v1[i];</highlight></codeline>
<codeline lineno="5516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diag<sp/>=<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invDiag<sp/>=<sp/>1.0f<sp/>/<sp/>diag;</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diagSqr<sp/>=<sp/>diag<sp/>*<sp/>diag;</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newDiagSqr<sp/>=<sp/>diagSqr<sp/>+<sp/>alpha1<sp/>*<sp/>p1<sp/>*<sp/>p1;</highlight></codeline>
<codeline lineno="5520"><highlight class="normal"></highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>newDiagSqr<sp/>&lt;=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5524"><highlight class="normal"></highlight></codeline>
<codeline lineno="5525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha1<sp/>/=<sp/>newDiagSqr;</highlight></codeline>
<codeline lineno="5526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beta1<sp/>=<sp/>p1<sp/>*<sp/>alpha1;</highlight></codeline>
<codeline lineno="5527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha1<sp/>*=<sp/>diagSqr;</highlight></codeline>
<codeline lineno="5528"><highlight class="normal"></highlight></codeline>
<codeline lineno="5529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>v2[i];</highlight></codeline>
<codeline lineno="5530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diagSqr<sp/>=<sp/>newDiagSqr;</highlight></codeline>
<codeline lineno="5531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newDiagSqr<sp/>=<sp/>diagSqr<sp/>+<sp/>alpha2<sp/>*<sp/>p2<sp/>*<sp/>p2;</highlight></codeline>
<codeline lineno="5532"><highlight class="normal"></highlight></codeline>
<codeline lineno="5533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>newDiagSqr<sp/>&lt;=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5536"><highlight class="normal"></highlight></codeline>
<codeline lineno="5537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][i]<sp/>=<sp/>newDiag<sp/>=<sp/>idMath::Sqrt(<sp/>newDiagSqr<sp/>);</highlight></codeline>
<codeline lineno="5538"><highlight class="normal"></highlight></codeline>
<codeline lineno="5539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha2<sp/>/=<sp/>newDiagSqr;</highlight></codeline>
<codeline lineno="5540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beta2<sp/>=<sp/>p2<sp/>*<sp/>alpha2;</highlight></codeline>
<codeline lineno="5541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha2<sp/>*=<sp/>diagSqr;</highlight></codeline>
<codeline lineno="5542"><highlight class="normal"></highlight></codeline>
<codeline lineno="5543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i+1;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5544"><highlight class="normal"></highlight></codeline>
<codeline lineno="5545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(*this)[j][i]<sp/>*<sp/>invDiag;</highlight></codeline>
<codeline lineno="5546"><highlight class="normal"></highlight></codeline>
<codeline lineno="5547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1[j]<sp/>-=<sp/>p1<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="5548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>+=<sp/>beta1<sp/>*<sp/>v1[j];</highlight></codeline>
<codeline lineno="5549"><highlight class="normal"></highlight></codeline>
<codeline lineno="5550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v2[j]<sp/>-=<sp/>p2<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>+=<sp/>beta2<sp/>*<sp/>v2[j];</highlight></codeline>
<codeline lineno="5552"><highlight class="normal"></highlight></codeline>
<codeline lineno="5553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[j][i]<sp/>=<sp/>d<sp/>*<sp/>newDiag;</highlight></codeline>
<codeline lineno="5554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5556"><highlight class="normal"></highlight></codeline>
<codeline lineno="5557"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="5558"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5561"><highlight class="normal"></highlight></codeline>
<codeline lineno="5562"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5563"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5564"><highlight class="comment">idMatX::Cholesky_UpdateIncrement</highlight></codeline>
<codeline lineno="5565"><highlight class="comment"></highlight></codeline>
<codeline lineno="5566"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>in-place<sp/>Cholesky<sp/>factorization<sp/>to<sp/>obtain<sp/>the<sp/>factors<sp/>for<sp/>the<sp/>matrix:</highlight></codeline>
<codeline lineno="5567"><highlight class="comment"></highlight></codeline>
<codeline lineno="5568"><highlight class="comment"><sp/><sp/>[<sp/>A<sp/><sp/>a<sp/>]</highlight></codeline>
<codeline lineno="5569"><highlight class="comment"><sp/><sp/>[<sp/>a<sp/><sp/>b<sp/>]</highlight></codeline>
<codeline lineno="5570"><highlight class="comment"></highlight></codeline>
<codeline lineno="5571"><highlight class="comment"><sp/><sp/>where:<sp/>a<sp/>=<sp/>v[0,numRows-1],<sp/>b<sp/>=<sp/>v[numRows]</highlight></codeline>
<codeline lineno="5572"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5573"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5574"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::Cholesky_UpdateIncrement(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="5576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x;</highlight></codeline>
<codeline lineno="5577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"></highlight></codeline>
<codeline lineno="5579"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numRows+1<sp/>);</highlight></codeline>
<codeline lineno="5581"><highlight class="normal"></highlight></codeline>
<codeline lineno="5582"><highlight class="normal"><sp/><sp/><sp/><sp/>ChangeSize(<sp/>numRows+1,<sp/>numColumns+1,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="5583"><highlight class="normal"></highlight></codeline>
<codeline lineno="5584"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numRows<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5585"><highlight class="normal"></highlight></codeline>
<codeline lineno="5586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>for<sp/>x<sp/>in<sp/>L<sp/>*<sp/>x<sp/>=<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows<sp/>-<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>v[i];</highlight></codeline>
<codeline lineno="5589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>(*this)[i][j]<sp/>*<sp/>x[j];</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>sum<sp/>/<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="5593"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"></highlight></codeline>
<codeline lineno="5595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>new<sp/>row<sp/>of<sp/>L<sp/>and<sp/>calculate<sp/>the<sp/>square<sp/>of<sp/>the<sp/>diagonal<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5596"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>v[numRows<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="5597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows<sp/>-<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[numRows<sp/>-<sp/>1][i]<sp/>=<sp/>x[i];</highlight></codeline>
<codeline lineno="5599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>x[i]<sp/>*<sp/>x[i];</highlight></codeline>
<codeline lineno="5600"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5601"><highlight class="normal"></highlight></codeline>
<codeline lineno="5602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sum<sp/>&lt;=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5605"><highlight class="normal"></highlight></codeline>
<codeline lineno="5606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>the<sp/>diagonal<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5607"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)[numRows<sp/>-<sp/>1][numRows<sp/>-<sp/>1]<sp/>=<sp/>idMath::Sqrt(<sp/>sum<sp/>);</highlight></codeline>
<codeline lineno="5608"><highlight class="normal"></highlight></codeline>
<codeline lineno="5609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5611"><highlight class="normal"></highlight></codeline>
<codeline lineno="5612"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5613"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5614"><highlight class="comment">idMatX::Cholesky_UpdateDecrement</highlight></codeline>
<codeline lineno="5615"><highlight class="comment"></highlight></codeline>
<codeline lineno="5616"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>in-place<sp/>Cholesky<sp/>factorization<sp/>to<sp/>obtain<sp/>the<sp/>factors<sp/>for<sp/>the<sp/>matrix<sp/>with<sp/>row<sp/>r<sp/>and<sp/>column<sp/>r<sp/>removed.</highlight></codeline>
<codeline lineno="5617"><highlight class="comment"><sp/><sp/>v<sp/>should<sp/>store<sp/>the<sp/>row<sp/>of<sp/>the<sp/>original<sp/>matrix.</highlight></codeline>
<codeline lineno="5618"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5619"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5620"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::Cholesky_UpdateDecrement(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5621"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>v1;</highlight></codeline>
<codeline lineno="5622"><highlight class="normal"></highlight></codeline>
<codeline lineno="5623"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="5624"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="5625"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>r<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>r<sp/>&lt;<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="5626"><highlight class="normal"></highlight></codeline>
<codeline lineno="5627"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5628"><highlight class="normal"></highlight></codeline>
<codeline lineno="5629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>row<sp/>and<sp/>column<sp/>to<sp/>identity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5630"><highlight class="normal"><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>-v;</highlight></codeline>
<codeline lineno="5631"><highlight class="normal"><sp/><sp/><sp/><sp/>v1[r]<sp/>+=<sp/>1.0f;</highlight></codeline>
<codeline lineno="5632"><highlight class="normal"></highlight></codeline>
<codeline lineno="5633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/><sp/><sp/><sp/>msvc<sp/>compiler<sp/>bug:<sp/>the<sp/>this<sp/>pointer<sp/>stored<sp/>in<sp/>edi<sp/>is<sp/>expected<sp/>to<sp/>stay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>untouched<sp/>when<sp/>calling<sp/>Cholesky_UpdateRowColumn<sp/>in<sp/>the<sp/>if<sp/>statement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5635"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="5636"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!Cholesky_UpdateRowColumn(<sp/>v1,<sp/>r<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5637"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="5638"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>Cholesky_UpdateRowColumn(<sp/>v1,<sp/>r<sp/>);</highlight></codeline>
<codeline lineno="5639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ret<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5640"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="5641"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5642"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5643"><highlight class="normal"></highlight></codeline>
<codeline lineno="5644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>physically<sp/>remove<sp/>the<sp/>row<sp/>and<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5645"><highlight class="normal"><sp/><sp/><sp/><sp/>Update_Decrement(<sp/>r<sp/>);</highlight></codeline>
<codeline lineno="5646"><highlight class="normal"></highlight></codeline>
<codeline lineno="5647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5649"><highlight class="normal"></highlight></codeline>
<codeline lineno="5650"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5651"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5652"><highlight class="comment">idMatX::Cholesky_Solve</highlight></codeline>
<codeline lineno="5653"><highlight class="comment"></highlight></codeline>
<codeline lineno="5654"><highlight class="comment"><sp/><sp/>Solve<sp/>Ax<sp/>=<sp/>b<sp/>with<sp/>A<sp/>factored<sp/>in-place<sp/>as:<sp/>LL&apos;</highlight></codeline>
<codeline lineno="5655"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5656"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5657"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::Cholesky_Solve(<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;b<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="5659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="5660"><highlight class="normal"></highlight></codeline>
<codeline lineno="5661"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="5662"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>x.GetSize()<sp/>&gt;=<sp/>numRows<sp/>&amp;&amp;<sp/>b.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="5663"><highlight class="normal"></highlight></codeline>
<codeline lineno="5664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>b[i];</highlight></codeline>
<codeline lineno="5667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>(*this)[i][j]<sp/>*<sp/>x[j];</highlight></codeline>
<codeline lineno="5669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>sum<sp/>/<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="5671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5672"><highlight class="normal"></highlight></codeline>
<codeline lineno="5673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>Lt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>numRows<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>x[i];</highlight></codeline>
<codeline lineno="5676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>(*this)[j][i]<sp/>*<sp/>x[j];</highlight></codeline>
<codeline lineno="5678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>sum<sp/>/<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="5680"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5682"><highlight class="normal"></highlight></codeline>
<codeline lineno="5683"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5684"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5685"><highlight class="comment">idMatX::Cholesky_Inverse</highlight></codeline>
<codeline lineno="5686"><highlight class="comment"></highlight></codeline>
<codeline lineno="5687"><highlight class="comment"><sp/><sp/>Calculates<sp/>the<sp/>inverse<sp/>of<sp/>the<sp/>matrix<sp/>which<sp/>is<sp/>factored<sp/>in-place<sp/>as:<sp/>LL&apos;</highlight></codeline>
<codeline lineno="5688"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5689"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5690"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::Cholesky_Inverse(<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;inv<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="5692"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>x,<sp/>b;</highlight></codeline>
<codeline lineno="5693"><highlight class="normal"></highlight></codeline>
<codeline lineno="5694"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="5695"><highlight class="normal"></highlight></codeline>
<codeline lineno="5696"><highlight class="normal"><sp/><sp/><sp/><sp/>x.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5697"><highlight class="normal"><sp/><sp/><sp/><sp/>b.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5698"><highlight class="normal"><sp/><sp/><sp/><sp/>b.Zero();</highlight></codeline>
<codeline lineno="5699"><highlight class="normal"><sp/><sp/><sp/><sp/>inv.SetSize(<sp/>numRows,<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="5700"><highlight class="normal"></highlight></codeline>
<codeline lineno="5701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5702"><highlight class="normal"></highlight></codeline>
<codeline lineno="5703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[i]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="5704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Cholesky_Solve(<sp/>x,<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="5705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inv[j][i]<sp/>=<sp/>x[j];</highlight></codeline>
<codeline lineno="5707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[i]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="5709"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5711"><highlight class="normal"></highlight></codeline>
<codeline lineno="5712"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5713"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5714"><highlight class="comment">idMatX::Cholesky_MultiplyFactors</highlight></codeline>
<codeline lineno="5715"><highlight class="comment"></highlight></codeline>
<codeline lineno="5716"><highlight class="comment"><sp/><sp/>Multiplies<sp/>the<sp/>factors<sp/>of<sp/>the<sp/>in-place<sp/>Cholesky<sp/>factorization<sp/>to<sp/>form<sp/>the<sp/>original<sp/>matrix.</highlight></codeline>
<codeline lineno="5717"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5718"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5719"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::Cholesky_MultiplyFactors(<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;m<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="5721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="5722"><highlight class="normal"></highlight></codeline>
<codeline lineno="5723"><highlight class="normal"><sp/><sp/><sp/><sp/>m.SetSize(<sp/>numRows,<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="5724"><highlight class="normal"></highlight></codeline>
<codeline lineno="5725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>numRows;<sp/>r++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5726"><highlight class="normal"></highlight></codeline>
<codeline lineno="5727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>row<sp/>of<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="5730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;=<sp/>i<sp/>&amp;&amp;<sp/>j<sp/>&lt;=<sp/>r;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(*this)[r][j]<sp/>*<sp/>(*this)[i][j];</highlight></codeline>
<codeline lineno="5732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[r][i]<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="5734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5736"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5737"><highlight class="normal"></highlight></codeline>
<codeline lineno="5738"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5739"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5740"><highlight class="comment">idMatX::LDLT_Factor</highlight></codeline>
<codeline lineno="5741"><highlight class="comment"></highlight></codeline>
<codeline lineno="5742"><highlight class="comment"><sp/><sp/>in-place<sp/>factorization:<sp/>LDL&apos;</highlight></codeline>
<codeline lineno="5743"><highlight class="comment"><sp/><sp/>L<sp/>is<sp/>a<sp/>triangular<sp/>matrix<sp/>stored<sp/>in<sp/>the<sp/>lower<sp/>triangle.</highlight></codeline>
<codeline lineno="5744"><highlight class="comment"><sp/><sp/>L<sp/>has<sp/>ones<sp/>on<sp/>the<sp/>diagonal<sp/>that<sp/>are<sp/>not<sp/>stored.</highlight></codeline>
<codeline lineno="5745"><highlight class="comment"><sp/><sp/>D<sp/>is<sp/>a<sp/>diagonal<sp/>matrix<sp/>stored<sp/>on<sp/>the<sp/>diagonal.</highlight></codeline>
<codeline lineno="5746"><highlight class="comment"><sp/><sp/>The<sp/>upper<sp/>triangle<sp/>is<sp/>not<sp/>cleared.</highlight></codeline>
<codeline lineno="5747"><highlight class="comment"><sp/><sp/>The<sp/>initial<sp/>matrix<sp/>has<sp/>to<sp/>be<sp/>symmetric.</highlight></codeline>
<codeline lineno="5748"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5749"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5750"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::LDLT_Factor(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="5752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*v;</highlight></codeline>
<codeline lineno="5753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d,<sp/>sum;</highlight></codeline>
<codeline lineno="5754"><highlight class="normal"></highlight></codeline>
<codeline lineno="5755"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="5756"><highlight class="normal"></highlight></codeline>
<codeline lineno="5757"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numRows<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5758"><highlight class="normal"></highlight></codeline>
<codeline lineno="5759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5760"><highlight class="normal"></highlight></codeline>
<codeline lineno="5761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="5762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(*this)[i][j];</highlight></codeline>
<codeline lineno="5764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[j]<sp/>=<sp/>(*this)[j][j]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="5765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>v[j]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="5766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5767"><highlight class="normal"></highlight></codeline>
<codeline lineno="5768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sum<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5771"><highlight class="normal"></highlight></codeline>
<codeline lineno="5772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][i]<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="5773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>sum;</highlight></codeline>
<codeline lineno="5774"><highlight class="normal"></highlight></codeline>
<codeline lineno="5775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>(*this)[j][i];</highlight></codeline>
<codeline lineno="5777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>i;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>(*this)[j][k]<sp/>*<sp/>v[k];</highlight></codeline>
<codeline lineno="5779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[j][i]<sp/>=<sp/>sum<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="5781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5782"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5783"><highlight class="normal"></highlight></codeline>
<codeline lineno="5784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5786"><highlight class="normal"></highlight></codeline>
<codeline lineno="5787"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5788"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5789"><highlight class="comment">idMatX::LDLT_UpdateRankOne</highlight></codeline>
<codeline lineno="5790"><highlight class="comment"></highlight></codeline>
<codeline lineno="5791"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>in-place<sp/>LDL&apos;<sp/>factorization<sp/>to<sp/>obtain<sp/>the<sp/>factors<sp/>for<sp/>the<sp/>matrix:<sp/>LDL&apos;<sp/>+<sp/>alpha<sp/>*<sp/>v<sp/>*<sp/>v&apos;</highlight></codeline>
<codeline lineno="5792"><highlight class="comment"><sp/><sp/>If<sp/>offset<sp/>&gt;<sp/>0<sp/>only<sp/>the<sp/>lower<sp/>right<sp/>corner<sp/>starting<sp/>at<sp/>(offset,<sp/>offset)<sp/>is<sp/>updated.</highlight></codeline>
<codeline lineno="5793"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5794"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5795"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::LDLT_UpdateRankOne(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>alpha,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="5797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y;</highlight></codeline>
<codeline lineno="5798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diag,<sp/>newDiag,<sp/>beta,<sp/>p,<sp/>d;</highlight></codeline>
<codeline lineno="5799"><highlight class="normal"></highlight></codeline>
<codeline lineno="5800"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="5801"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="5802"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>offset<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>offset<sp/>&lt;<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="5803"><highlight class="normal"></highlight></codeline>
<codeline lineno="5804"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>v.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5805"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(<sp/>y,<sp/>v.ToFloatPtr(),<sp/>v.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5806"><highlight class="normal"></highlight></codeline>
<codeline lineno="5807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>offset;<sp/>i<sp/>&lt;<sp/>numColumns;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>y[i];</highlight></codeline>
<codeline lineno="5809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diag<sp/>=<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="5810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][i]<sp/>=<sp/>newDiag<sp/>=<sp/>diag<sp/>+<sp/>alpha<sp/>*<sp/>p<sp/>*<sp/>p;</highlight></codeline>
<codeline lineno="5811"><highlight class="normal"></highlight></codeline>
<codeline lineno="5812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>newDiag<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5815"><highlight class="normal"></highlight></codeline>
<codeline lineno="5816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha<sp/>/=<sp/>newDiag;</highlight></codeline>
<codeline lineno="5817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beta<sp/>=<sp/>p<sp/>*<sp/>alpha;</highlight></codeline>
<codeline lineno="5818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha<sp/>*=<sp/>diag;</highlight></codeline>
<codeline lineno="5819"><highlight class="normal"></highlight></codeline>
<codeline lineno="5820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i+1;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5821"><highlight class="normal"></highlight></codeline>
<codeline lineno="5822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(*this)[j][i];</highlight></codeline>
<codeline lineno="5823"><highlight class="normal"></highlight></codeline>
<codeline lineno="5824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[j]<sp/>-=<sp/>p<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="5825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>+=<sp/>beta<sp/>*<sp/>y[j];</highlight></codeline>
<codeline lineno="5826"><highlight class="normal"></highlight></codeline>
<codeline lineno="5827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[j][i]<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="5828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5830"><highlight class="normal"></highlight></codeline>
<codeline lineno="5831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5832"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5833"><highlight class="normal"></highlight></codeline>
<codeline lineno="5834"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5835"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5836"><highlight class="comment">idMatX::LDLT_UpdateRowColumn</highlight></codeline>
<codeline lineno="5837"><highlight class="comment"></highlight></codeline>
<codeline lineno="5838"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>in-place<sp/>LDL&apos;<sp/>factorization<sp/>to<sp/>obtain<sp/>the<sp/>factors<sp/>for<sp/>the<sp/>matrix:</highlight></codeline>
<codeline lineno="5839"><highlight class="comment"></highlight></codeline>
<codeline lineno="5840"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/>0<sp/><sp/>a<sp/><sp/>0<sp/>]</highlight></codeline>
<codeline lineno="5841"><highlight class="comment"><sp/><sp/>LDL&apos;<sp/>+<sp/>[<sp/>a<sp/><sp/>b<sp/><sp/>c<sp/>]</highlight></codeline>
<codeline lineno="5842"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/>0<sp/><sp/>c<sp/><sp/>0<sp/>]</highlight></codeline>
<codeline lineno="5843"><highlight class="comment"></highlight></codeline>
<codeline lineno="5844"><highlight class="comment"><sp/><sp/>where:<sp/>a<sp/>=<sp/>v[0,r-1],<sp/>b<sp/>=<sp/>v[r],<sp/>c<sp/>=<sp/>v[r+1,numRows-1]</highlight></codeline>
<codeline lineno="5845"><highlight class="comment">============</highlight></codeline>
<codeline lineno="5846"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5847"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::LDLT_UpdateRowColumn(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="5849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="5850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*original,<sp/>*y;</highlight></codeline>
<codeline lineno="5851"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>addSub;</highlight></codeline>
<codeline lineno="5852"><highlight class="normal"></highlight></codeline>
<codeline lineno="5853"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="5854"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="5855"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>r<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>r<sp/>&lt;<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="5856"><highlight class="normal"></highlight></codeline>
<codeline lineno="5857"><highlight class="normal"><sp/><sp/><sp/><sp/>addSub.SetData(<sp/>numColumns,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numColumns<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5858"><highlight class="normal"></highlight></codeline>
<codeline lineno="5859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5860"><highlight class="normal"></highlight></codeline>
<codeline lineno="5861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numColumns<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[0][0]<sp/>+=<sp/>v[0];</highlight></codeline>
<codeline lineno="5863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numColumns;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSub[i]<sp/>=<sp/>v[i];</highlight></codeline>
<codeline lineno="5867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5868"><highlight class="normal"></highlight></codeline>
<codeline lineno="5869"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5870"><highlight class="normal"></highlight></codeline>
<codeline lineno="5871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numColumns<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numColumns<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5873"><highlight class="normal"></highlight></codeline>
<codeline lineno="5874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>original<sp/>row/column<sp/>of<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>r;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[i]<sp/>=<sp/>(*this)[r][i]<sp/>*<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="5877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numColumns;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&lt;<sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>(*this)[i][i]<sp/>*<sp/>(*this)[r][i];</highlight></codeline>
<codeline lineno="5881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>==<sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>(*this)[r][r];</highlight></codeline>
<codeline lineno="5883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>(*this)[r][r]<sp/>*<sp/>(*this)[i][r];</highlight></codeline>
<codeline lineno="5885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i<sp/>&amp;&amp;<sp/>j<sp/>&lt;<sp/>r;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(*this)[i][j]<sp/>*<sp/>y[j];</highlight></codeline>
<codeline lineno="5888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original[i]<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="5890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5891"><highlight class="normal"></highlight></codeline>
<codeline lineno="5892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>for<sp/>y<sp/>in<sp/>L<sp/>*<sp/>y<sp/>=<sp/>original<sp/>+<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>r;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>original[i]<sp/>+<sp/>v[i];</highlight></codeline>
<codeline lineno="5895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>(*this)[i][j]<sp/>*<sp/>y[j];</highlight></codeline>
<codeline lineno="5897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[i]<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="5899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5900"><highlight class="normal"></highlight></codeline>
<codeline lineno="5901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>new<sp/>row<sp/>of<sp/>L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>r;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[r][i]<sp/>=<sp/>y[i]<sp/>/<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="5904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5905"><highlight class="normal"></highlight></codeline>
<codeline lineno="5906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>last<sp/>row/column<sp/>of<sp/>the<sp/>matrix<sp/>is<sp/>updated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r<sp/>==<sp/>numColumns<sp/>-<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>calculate<sp/>new<sp/>diagonal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>original[r]<sp/>+<sp/>v[r];</highlight></codeline>
<codeline lineno="5910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>r;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>(*this)[r][j]<sp/>*<sp/>y[j];</highlight></codeline>
<codeline lineno="5912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sum<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[r][r]<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="5917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5919"><highlight class="normal"></highlight></codeline>
<codeline lineno="5920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>the<sp/>row/column<sp/>to<sp/>be<sp/>added<sp/>to<sp/>the<sp/>lower<sp/>right<sp/>sub<sp/>matrix<sp/>starting<sp/>at<sp/>(r,<sp/>r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>r;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[i]<sp/>=<sp/>(*this)[r][i]<sp/>*<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="5923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>r;<sp/>i<sp/>&lt;<sp/>numColumns;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>==<sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>(*this)[r][r];</highlight></codeline>
<codeline lineno="5927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>(*this)[r][r]<sp/>*<sp/>(*this)[i][r];</highlight></codeline>
<codeline lineno="5929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>r;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(*this)[i][j]<sp/>*<sp/>y[j];</highlight></codeline>
<codeline lineno="5932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSub[i]<sp/>=<sp/>v[i]<sp/>-<sp/>(<sp/>sum<sp/>-<sp/>original[i]<sp/>);</highlight></codeline>
<codeline lineno="5934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5936"><highlight class="normal"></highlight></codeline>
<codeline lineno="5937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>row/column<sp/>to<sp/>the<sp/>lower<sp/>right<sp/>sub<sp/>matrix<sp/>starting<sp/>at<sp/>(r,<sp/>r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5938"><highlight class="normal"></highlight></codeline>
<codeline lineno="5939"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="5940"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5941"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>v1,<sp/>v2;</highlight></codeline>
<codeline lineno="5942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="5943"><highlight class="normal"></highlight></codeline>
<codeline lineno="5944"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.SetData(<sp/>numColumns,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numColumns<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5945"><highlight class="normal"><sp/><sp/><sp/><sp/>v2.SetData(<sp/>numColumns,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numColumns<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5946"><highlight class="normal"></highlight></codeline>
<codeline lineno="5947"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>idMath::SQRT_1OVER2;</highlight></codeline>
<codeline lineno="5948"><highlight class="normal"><sp/><sp/><sp/><sp/>v1[r]<sp/>=<sp/>(<sp/>0.5f<sp/>*<sp/>addSub[r]<sp/>+<sp/>1.0f<sp/>)<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="5949"><highlight class="normal"><sp/><sp/><sp/><sp/>v2[r]<sp/>=<sp/>(<sp/>0.5f<sp/>*<sp/>addSub[r]<sp/>-<sp/>1.0f<sp/>)<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="5950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>r+1;<sp/>i<sp/>&lt;<sp/>numColumns;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1[i]<sp/>=<sp/>v2[i]<sp/>=<sp/>addSub[i]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="5952"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5953"><highlight class="normal"></highlight></codeline>
<codeline lineno="5954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!LDLT_UpdateRankOne(<sp/>v1,<sp/>1.0f,<sp/>r<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>downdate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!LDLT_UpdateRankOne(<sp/>v2,<sp/>-1.0f,<sp/>r<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5961"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5962"><highlight class="normal"></highlight></codeline>
<codeline lineno="5963"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="5964"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*v1,<sp/>*v2;</highlight></codeline>
<codeline lineno="5966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d,<sp/>diag,<sp/>newDiag,<sp/>p1,<sp/>p2,<sp/>alpha1,<sp/>alpha2,<sp/>beta1,<sp/>beta2;</highlight></codeline>
<codeline lineno="5967"><highlight class="normal"></highlight></codeline>
<codeline lineno="5968"><highlight class="normal"><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numColumns<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5969"><highlight class="normal"><sp/><sp/><sp/><sp/>v2<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numColumns<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5970"><highlight class="normal"></highlight></codeline>
<codeline lineno="5971"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>idMath::SQRT_1OVER2;</highlight></codeline>
<codeline lineno="5972"><highlight class="normal"><sp/><sp/><sp/><sp/>v1[r]<sp/>=<sp/>(<sp/>0.5f<sp/>*<sp/>addSub[r]<sp/>+<sp/>1.0f<sp/>)<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="5973"><highlight class="normal"><sp/><sp/><sp/><sp/>v2[r]<sp/>=<sp/>(<sp/>0.5f<sp/>*<sp/>addSub[r]<sp/>-<sp/>1.0f<sp/>)<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="5974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>r+1;<sp/>i<sp/>&lt;<sp/>numColumns;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1[i]<sp/>=<sp/>v2[i]<sp/>=<sp/>addSub[i]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="5976"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5977"><highlight class="normal"></highlight></codeline>
<codeline lineno="5978"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha1<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="5979"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha2<sp/>=<sp/>-1.0f;</highlight></codeline>
<codeline lineno="5980"><highlight class="normal"></highlight></codeline>
<codeline lineno="5981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>simultaneous<sp/>update/downdate<sp/>of<sp/>the<sp/>sub<sp/>matrix<sp/>starting<sp/>at<sp/>(r,<sp/>r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>r;<sp/>i<sp/>&lt;<sp/>numColumns;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5983"><highlight class="normal"></highlight></codeline>
<codeline lineno="5984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diag<sp/>=<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="5985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>v1[i];</highlight></codeline>
<codeline lineno="5986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newDiag<sp/>=<sp/>diag<sp/>+<sp/>alpha1<sp/>*<sp/>p1<sp/>*<sp/>p1;</highlight></codeline>
<codeline lineno="5987"><highlight class="normal"></highlight></codeline>
<codeline lineno="5988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>newDiag<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5991"><highlight class="normal"></highlight></codeline>
<codeline lineno="5992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha1<sp/>/=<sp/>newDiag;</highlight></codeline>
<codeline lineno="5993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beta1<sp/>=<sp/>p1<sp/>*<sp/>alpha1;</highlight></codeline>
<codeline lineno="5994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha1<sp/>*=<sp/>diag;</highlight></codeline>
<codeline lineno="5995"><highlight class="normal"></highlight></codeline>
<codeline lineno="5996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diag<sp/>=<sp/>newDiag;</highlight></codeline>
<codeline lineno="5997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>v2[i];</highlight></codeline>
<codeline lineno="5998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newDiag<sp/>=<sp/>diag<sp/>+<sp/>alpha2<sp/>*<sp/>p2<sp/>*<sp/>p2;</highlight></codeline>
<codeline lineno="5999"><highlight class="normal"></highlight></codeline>
<codeline lineno="6000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>newDiag<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6003"><highlight class="normal"></highlight></codeline>
<codeline lineno="6004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha2<sp/>/=<sp/>newDiag;</highlight></codeline>
<codeline lineno="6005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beta2<sp/>=<sp/>p2<sp/>*<sp/>alpha2;</highlight></codeline>
<codeline lineno="6006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha2<sp/>*=<sp/>diag;</highlight></codeline>
<codeline lineno="6007"><highlight class="normal"></highlight></codeline>
<codeline lineno="6008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][i]<sp/>=<sp/>newDiag;</highlight></codeline>
<codeline lineno="6009"><highlight class="normal"></highlight></codeline>
<codeline lineno="6010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i+1;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6011"><highlight class="normal"></highlight></codeline>
<codeline lineno="6012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(*this)[j][i];</highlight></codeline>
<codeline lineno="6013"><highlight class="normal"></highlight></codeline>
<codeline lineno="6014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1[j]<sp/>-=<sp/>p1<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="6015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>+=<sp/>beta1<sp/>*<sp/>v1[j];</highlight></codeline>
<codeline lineno="6016"><highlight class="normal"></highlight></codeline>
<codeline lineno="6017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v2[j]<sp/>-=<sp/>p2<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="6018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>+=<sp/>beta2<sp/>*<sp/>v2[j];</highlight></codeline>
<codeline lineno="6019"><highlight class="normal"></highlight></codeline>
<codeline lineno="6020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[j][i]<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="6021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6022"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6023"><highlight class="normal"></highlight></codeline>
<codeline lineno="6024"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="6025"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6027"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6028"><highlight class="normal"></highlight></codeline>
<codeline lineno="6029"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6030"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6031"><highlight class="comment">idMatX::LDLT_UpdateIncrement</highlight></codeline>
<codeline lineno="6032"><highlight class="comment"></highlight></codeline>
<codeline lineno="6033"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>in-place<sp/>LDL&apos;<sp/>factorization<sp/>to<sp/>obtain<sp/>the<sp/>factors<sp/>for<sp/>the<sp/>matrix:</highlight></codeline>
<codeline lineno="6034"><highlight class="comment"></highlight></codeline>
<codeline lineno="6035"><highlight class="comment"><sp/><sp/>[<sp/>A<sp/><sp/>a<sp/>]</highlight></codeline>
<codeline lineno="6036"><highlight class="comment"><sp/><sp/>[<sp/>a<sp/><sp/>b<sp/>]</highlight></codeline>
<codeline lineno="6037"><highlight class="comment"></highlight></codeline>
<codeline lineno="6038"><highlight class="comment"><sp/><sp/>where:<sp/>a<sp/>=<sp/>v[0,numRows-1],<sp/>b<sp/>=<sp/>v[numRows]</highlight></codeline>
<codeline lineno="6039"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6040"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6041"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::LDLT_UpdateIncrement(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="6043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x;</highlight></codeline>
<codeline lineno="6044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum,<sp/>d;</highlight></codeline>
<codeline lineno="6045"><highlight class="normal"></highlight></codeline>
<codeline lineno="6046"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="6047"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numRows+1<sp/>);</highlight></codeline>
<codeline lineno="6048"><highlight class="normal"></highlight></codeline>
<codeline lineno="6049"><highlight class="normal"><sp/><sp/><sp/><sp/>ChangeSize(<sp/>numRows+1,<sp/>numColumns+1,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="6050"><highlight class="normal"></highlight></codeline>
<codeline lineno="6051"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numRows<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="6052"><highlight class="normal"></highlight></codeline>
<codeline lineno="6053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>for<sp/>x<sp/>in<sp/>L<sp/>*<sp/>x<sp/>=<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows<sp/>-<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>v[i];</highlight></codeline>
<codeline lineno="6056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>(*this)[i][j]<sp/>*<sp/>x[j];</highlight></codeline>
<codeline lineno="6058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="6060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6061"><highlight class="normal"></highlight></codeline>
<codeline lineno="6062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>new<sp/>row<sp/>of<sp/>L<sp/>and<sp/>calculate<sp/>the<sp/>diagonal<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6063"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>v[numRows<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="6064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows<sp/>-<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[numRows<sp/>-<sp/>1][i]<sp/>=<sp/>d<sp/>=<sp/>x[i]<sp/>/<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="6066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>d<sp/>*<sp/>x[i];</highlight></codeline>
<codeline lineno="6067"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6068"><highlight class="normal"></highlight></codeline>
<codeline lineno="6069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sum<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6071"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6072"><highlight class="normal"></highlight></codeline>
<codeline lineno="6073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>the<sp/>diagonal<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6074"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)[numRows<sp/>-<sp/>1][numRows<sp/>-<sp/>1]<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="6075"><highlight class="normal"></highlight></codeline>
<codeline lineno="6076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6077"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6078"><highlight class="normal"></highlight></codeline>
<codeline lineno="6079"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6080"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6081"><highlight class="comment">idMatX::LDLT_UpdateDecrement</highlight></codeline>
<codeline lineno="6082"><highlight class="comment"></highlight></codeline>
<codeline lineno="6083"><highlight class="comment"><sp/><sp/>Updates<sp/>the<sp/>in-place<sp/>LDL&apos;<sp/>factorization<sp/>to<sp/>obtain<sp/>the<sp/>factors<sp/>for<sp/>the<sp/>matrix<sp/>with<sp/>row<sp/>r<sp/>and<sp/>column<sp/>r<sp/>removed.</highlight></codeline>
<codeline lineno="6084"><highlight class="comment"><sp/><sp/>v<sp/>should<sp/>store<sp/>the<sp/>row<sp/>of<sp/>the<sp/>original<sp/>matrix.</highlight></codeline>
<codeline lineno="6085"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6086"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6087"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::LDLT_UpdateDecrement(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6088"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>v1;</highlight></codeline>
<codeline lineno="6089"><highlight class="normal"></highlight></codeline>
<codeline lineno="6090"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="6091"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>v.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="6092"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>r<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>r<sp/>&lt;<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="6093"><highlight class="normal"></highlight></codeline>
<codeline lineno="6094"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="6095"><highlight class="normal"></highlight></codeline>
<codeline lineno="6096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>row<sp/>and<sp/>column<sp/>to<sp/>identity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6097"><highlight class="normal"><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>-v;</highlight></codeline>
<codeline lineno="6098"><highlight class="normal"><sp/><sp/><sp/><sp/>v1[r]<sp/>+=<sp/>1.0f;</highlight></codeline>
<codeline lineno="6099"><highlight class="normal"></highlight></codeline>
<codeline lineno="6100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/><sp/><sp/><sp/>msvc<sp/>compiler<sp/>bug:<sp/>the<sp/>this<sp/>pointer<sp/>stored<sp/>in<sp/>edi<sp/>is<sp/>expected<sp/>to<sp/>stay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>untouched<sp/>when<sp/>calling<sp/>LDLT_UpdateRowColumn<sp/>in<sp/>the<sp/>if<sp/>statement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6102"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="6103"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!LDLT_UpdateRowColumn(<sp/>v1,<sp/>r<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6104"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="6105"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>LDLT_UpdateRowColumn(<sp/>v1,<sp/>r<sp/>);</highlight></codeline>
<codeline lineno="6106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ret<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6107"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="6108"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6110"><highlight class="normal"></highlight></codeline>
<codeline lineno="6111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>physically<sp/>remove<sp/>the<sp/>row<sp/>and<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6112"><highlight class="normal"><sp/><sp/><sp/><sp/>Update_Decrement(<sp/>r<sp/>);</highlight></codeline>
<codeline lineno="6113"><highlight class="normal"></highlight></codeline>
<codeline lineno="6114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6116"><highlight class="normal"></highlight></codeline>
<codeline lineno="6117"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6118"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6119"><highlight class="comment">idMatX::LDLT_Solve</highlight></codeline>
<codeline lineno="6120"><highlight class="comment"></highlight></codeline>
<codeline lineno="6121"><highlight class="comment"><sp/><sp/>Solve<sp/>Ax<sp/>=<sp/>b<sp/>with<sp/>A<sp/>factored<sp/>in-place<sp/>as:<sp/>LDL&apos;</highlight></codeline>
<codeline lineno="6122"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6123"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6124"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::LDLT_Solve(<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;b<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="6126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="6127"><highlight class="normal"></highlight></codeline>
<codeline lineno="6128"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="6129"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>x.GetSize()<sp/>&gt;=<sp/>numRows<sp/>&amp;&amp;<sp/>b.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="6130"><highlight class="normal"></highlight></codeline>
<codeline lineno="6131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>b[i];</highlight></codeline>
<codeline lineno="6134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>(*this)[i][j]<sp/>*<sp/>x[j];</highlight></codeline>
<codeline lineno="6136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="6138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6139"><highlight class="normal"></highlight></codeline>
<codeline lineno="6140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>/=<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="6143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6144"><highlight class="normal"></highlight></codeline>
<codeline lineno="6145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>Lt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>numRows<sp/>-<sp/>2;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>x[i];</highlight></codeline>
<codeline lineno="6148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>(*this)[j][i]<sp/>*<sp/>x[j];</highlight></codeline>
<codeline lineno="6150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="6152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6154"><highlight class="normal"></highlight></codeline>
<codeline lineno="6155"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6156"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6157"><highlight class="comment">idMatX::LDLT_Inverse</highlight></codeline>
<codeline lineno="6158"><highlight class="comment"></highlight></codeline>
<codeline lineno="6159"><highlight class="comment"><sp/><sp/>Calculates<sp/>the<sp/>inverse<sp/>of<sp/>the<sp/>matrix<sp/>which<sp/>is<sp/>factored<sp/>in-place<sp/>as:<sp/>LDL&apos;</highlight></codeline>
<codeline lineno="6160"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6161"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6162"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::LDLT_Inverse(<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;inv<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="6164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>x,<sp/>b;</highlight></codeline>
<codeline lineno="6165"><highlight class="normal"></highlight></codeline>
<codeline lineno="6166"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="6167"><highlight class="normal"></highlight></codeline>
<codeline lineno="6168"><highlight class="normal"><sp/><sp/><sp/><sp/>x.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="6169"><highlight class="normal"><sp/><sp/><sp/><sp/>b.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="6170"><highlight class="normal"><sp/><sp/><sp/><sp/>b.Zero();</highlight></codeline>
<codeline lineno="6171"><highlight class="normal"><sp/><sp/><sp/><sp/>inv.SetSize(<sp/>numRows,<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="6172"><highlight class="normal"></highlight></codeline>
<codeline lineno="6173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6174"><highlight class="normal"></highlight></codeline>
<codeline lineno="6175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[i]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="6176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LDLT_Solve(<sp/>x,<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="6177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inv[j][i]<sp/>=<sp/>x[j];</highlight></codeline>
<codeline lineno="6179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[i]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6183"><highlight class="normal"></highlight></codeline>
<codeline lineno="6184"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6185"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6186"><highlight class="comment">idMatX::LDLT_UnpackFactors</highlight></codeline>
<codeline lineno="6187"><highlight class="comment"></highlight></codeline>
<codeline lineno="6188"><highlight class="comment"><sp/><sp/>Unpacks<sp/>the<sp/>in-place<sp/>LDL&apos;<sp/>factorization.</highlight></codeline>
<codeline lineno="6189"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6190"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6191"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::LDLT_UnpackFactors(<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;L,<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;D<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="6193"><highlight class="normal"></highlight></codeline>
<codeline lineno="6194"><highlight class="normal"><sp/><sp/><sp/><sp/>L.Zero(<sp/>numRows,<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="6195"><highlight class="normal"><sp/><sp/><sp/><sp/>D.Zero(<sp/>numRows,<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="6196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L[i][j]<sp/>=<sp/>(*this)[i][j];</highlight></codeline>
<codeline lineno="6199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L[i][i]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="6201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D[i][i]<sp/>=<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="6202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6204"><highlight class="normal"></highlight></codeline>
<codeline lineno="6205"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6206"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6207"><highlight class="comment">idMatX::LDLT_MultiplyFactors</highlight></codeline>
<codeline lineno="6208"><highlight class="comment"></highlight></codeline>
<codeline lineno="6209"><highlight class="comment"><sp/><sp/>Multiplies<sp/>the<sp/>factors<sp/>of<sp/>the<sp/>in-place<sp/>LDL&apos;<sp/>factorization<sp/>to<sp/>form<sp/>the<sp/>original<sp/>matrix.</highlight></codeline>
<codeline lineno="6210"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6211"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6212"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::LDLT_MultiplyFactors(<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;m<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="6214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*v;</highlight></codeline>
<codeline lineno="6215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="6216"><highlight class="normal"></highlight></codeline>
<codeline lineno="6217"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numRows<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="6218"><highlight class="normal"><sp/><sp/><sp/><sp/>m.SetSize(<sp/>numRows,<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="6219"><highlight class="normal"></highlight></codeline>
<codeline lineno="6220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>numRows;<sp/>r++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6221"><highlight class="normal"></highlight></codeline>
<codeline lineno="6222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>row<sp/>of<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>r;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>(*this)[r][i]<sp/>*<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="6225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numColumns;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&lt;<sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>(*this)[i][i]<sp/>*<sp/>(*this)[r][i];</highlight></codeline>
<codeline lineno="6229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>==<sp/>r<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>(*this)[r][r];</highlight></codeline>
<codeline lineno="6231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>(*this)[r][r]<sp/>*<sp/>(*this)[i][r];</highlight></codeline>
<codeline lineno="6233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i<sp/>&amp;&amp;<sp/>j<sp/>&lt;<sp/>r;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(*this)[i][j]<sp/>*<sp/>v[j];</highlight></codeline>
<codeline lineno="6236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m[r][i]<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="6238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6241"><highlight class="normal"></highlight></codeline>
<codeline lineno="6242"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6243"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6244"><highlight class="comment">idMatX::TriDiagonal_ClearTriangles</highlight></codeline>
<codeline lineno="6245"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6246"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6247"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::TriDiagonal_ClearTriangles(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="6249"><highlight class="normal"></highlight></codeline>
<codeline lineno="6250"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="6251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows-2;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i+2;<sp/>j<sp/>&lt;<sp/>numColumns;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][j]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[j][i]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6258"><highlight class="normal"></highlight></codeline>
<codeline lineno="6259"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6260"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6261"><highlight class="comment">idMatX::TriDiagonal_Solve</highlight></codeline>
<codeline lineno="6262"><highlight class="comment"></highlight></codeline>
<codeline lineno="6263"><highlight class="comment"><sp/><sp/>Solve<sp/>Ax<sp/>=<sp/>b<sp/>with<sp/>A<sp/>being<sp/>tridiagonal.</highlight></codeline>
<codeline lineno="6264"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6265"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6266"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::TriDiagonal_Solve(<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;b<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="6269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="6270"><highlight class="normal"></highlight></codeline>
<codeline lineno="6271"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="6272"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>x.GetSize()<sp/>&gt;=<sp/>numRows<sp/>&amp;&amp;<sp/>b.GetSize()<sp/>&gt;=<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="6273"><highlight class="normal"></highlight></codeline>
<codeline lineno="6274"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="6275"><highlight class="normal"></highlight></codeline>
<codeline lineno="6276"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(*this)[0][0];</highlight></codeline>
<codeline lineno="6277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6280"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>d;</highlight></codeline>
<codeline lineno="6281"><highlight class="normal"><sp/><sp/><sp/><sp/>x[0]<sp/>=<sp/>b[0]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="6282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i]<sp/>=<sp/>(*this)[i-1][i]<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="6284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(*this)[i][i]<sp/>-<sp/>(*this)[i][i-1]<sp/>*<sp/>tmp[i];</highlight></codeline>
<codeline lineno="6285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>d<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>1.0f<sp/>/<sp/>d;</highlight></codeline>
<codeline lineno="6289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>(<sp/>b[i]<sp/>-<sp/>(*this)[i][i-1]<sp/>*<sp/>x[i-1]<sp/>)<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="6290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>numRows<sp/>-<sp/>2;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>-=<sp/>tmp[i+1]<sp/>*<sp/>x[i+1];</highlight></codeline>
<codeline lineno="6293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6296"><highlight class="normal"></highlight></codeline>
<codeline lineno="6297"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6298"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6299"><highlight class="comment">idMatX::TriDiagonal_Inverse</highlight></codeline>
<codeline lineno="6300"><highlight class="comment"></highlight></codeline>
<codeline lineno="6301"><highlight class="comment"><sp/><sp/>Calculates<sp/>the<sp/>inverse<sp/>of<sp/>a<sp/>tri-diagonal<sp/>matrix.</highlight></codeline>
<codeline lineno="6302"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6303"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6304"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::TriDiagonal_Inverse(<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;inv<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="6306"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>x,<sp/>b;</highlight></codeline>
<codeline lineno="6307"><highlight class="normal"></highlight></codeline>
<codeline lineno="6308"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="6309"><highlight class="normal"></highlight></codeline>
<codeline lineno="6310"><highlight class="normal"><sp/><sp/><sp/><sp/>x.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="6311"><highlight class="normal"><sp/><sp/><sp/><sp/>b.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="6312"><highlight class="normal"><sp/><sp/><sp/><sp/>b.Zero();</highlight></codeline>
<codeline lineno="6313"><highlight class="normal"><sp/><sp/><sp/><sp/>inv.SetSize(<sp/>numRows,<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="6314"><highlight class="normal"></highlight></codeline>
<codeline lineno="6315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6316"><highlight class="normal"></highlight></codeline>
<codeline lineno="6317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[i]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="6318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TriDiagonal_Solve(<sp/>x,<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="6319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inv[j][i]<sp/>=<sp/>x[j];</highlight></codeline>
<codeline lineno="6321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[i]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6325"><highlight class="normal"></highlight></codeline>
<codeline lineno="6326"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6327"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6328"><highlight class="comment">idMatX::HouseholderReduction</highlight></codeline>
<codeline lineno="6329"><highlight class="comment"></highlight></codeline>
<codeline lineno="6330"><highlight class="comment"><sp/><sp/>Householder<sp/>reduction<sp/>to<sp/>symmetric<sp/>tri-diagonal<sp/>form.</highlight></codeline>
<codeline lineno="6331"><highlight class="comment"><sp/><sp/>The<sp/>original<sp/>matrix<sp/>is<sp/>replaced<sp/>by<sp/>an<sp/>orthogonal<sp/>matrix<sp/>effecting<sp/>the<sp/>accumulated<sp/>householder<sp/>transformations.</highlight></codeline>
<codeline lineno="6332"><highlight class="comment"><sp/><sp/>The<sp/>diagonal<sp/>elements<sp/>of<sp/>the<sp/>diagonal<sp/>matrix<sp/>are<sp/>stored<sp/>in<sp/>diag.</highlight></codeline>
<codeline lineno="6333"><highlight class="comment"><sp/><sp/>The<sp/>off-diagonal<sp/>elements<sp/>of<sp/>the<sp/>diagonal<sp/>matrix<sp/>are<sp/>stored<sp/>in<sp/>subd.</highlight></codeline>
<codeline lineno="6334"><highlight class="comment"><sp/><sp/>The<sp/>initial<sp/>matrix<sp/>has<sp/>to<sp/>be<sp/>symmetric.</highlight></codeline>
<codeline lineno="6335"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6336"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6337"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::HouseholderReduction(<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;diag,<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;subd<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i0,<sp/>i1,<sp/>i2,<sp/>i3;</highlight></codeline>
<codeline lineno="6339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>h,<sp/>f,<sp/>g,<sp/>invH,<sp/>halfFdivH,<sp/>scale,<sp/>invScale,<sp/>sum;</highlight></codeline>
<codeline lineno="6340"><highlight class="normal"></highlight></codeline>
<codeline lineno="6341"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="6342"><highlight class="normal"></highlight></codeline>
<codeline lineno="6343"><highlight class="normal"><sp/><sp/><sp/><sp/>diag.SetSize(<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="6344"><highlight class="normal"><sp/><sp/><sp/><sp/>subd.SetSize(<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="6345"><highlight class="normal"></highlight></codeline>
<codeline lineno="6346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i0<sp/>=<sp/>numRows-1,<sp/>i3<sp/>=<sp/>numRows-2;<sp/>i0<sp/>&gt;=<sp/>1;<sp/>i0--,<sp/>i3--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6349"><highlight class="normal"></highlight></codeline>
<codeline lineno="6350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i3<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;=<sp/>i3;<sp/>i2++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>+=<sp/>idMath::Fabs(<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[i0][i2]<sp/>);</highlight></codeline>
<codeline lineno="6353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>scale<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subd[i0]<sp/>=<sp/>(*this)[i0][i3];</highlight></codeline>
<codeline lineno="6356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invScale<sp/>=<sp/>1.0f<sp/>/<sp/>scale;</highlight></codeline>
<codeline lineno="6358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;=<sp/>i3;<sp/>i2++)</highlight></codeline>
<codeline lineno="6359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i0][i2]<sp/>*=<sp/>invScale;</highlight></codeline>
<codeline lineno="6361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>+=<sp/>(*this)[i0][i2]<sp/>*<sp/>(*this)[i0][i2];</highlight></codeline>
<codeline lineno="6362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>(*this)[i0][i3];</highlight></codeline>
<codeline lineno="6364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>idMath::Sqrt(<sp/>h<sp/>);</highlight></codeline>
<codeline lineno="6365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>f<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>-g;</highlight></codeline>
<codeline lineno="6367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subd[i0]<sp/>=<sp/>scale<sp/>*<sp/>g;</highlight></codeline>
<codeline lineno="6369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>-=<sp/>f<sp/>*<sp/>g;</highlight></codeline>
<codeline lineno="6370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i0][i3]<sp/>=<sp/>f<sp/>-<sp/>g;</highlight></codeline>
<codeline lineno="6371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invH<sp/>=<sp/>1.0f<sp/>/<sp/>h;</highlight></codeline>
<codeline lineno="6373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;=<sp/>i3;<sp/>i1++)<sp/>{</highlight></codeline>
<codeline lineno="6374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i1][i0]<sp/>=<sp/>(*this)[i0][i1]<sp/>*<sp/>invH;</highlight></codeline>
<codeline lineno="6375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;=<sp/>i1;<sp/>i2++)<sp/>{</highlight></codeline>
<codeline lineno="6377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>+=<sp/>(*this)[i1][i2]<sp/>*<sp/>(*this)[i0][i2];</highlight></codeline>
<codeline lineno="6378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>i1+1;<sp/>i2<sp/>&lt;=<sp/>i3;<sp/>i2++)<sp/>{</highlight></codeline>
<codeline lineno="6380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>+=<sp/>(*this)[i2][i1]<sp/>*<sp/>(*this)[i0][i2];</highlight></codeline>
<codeline lineno="6381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subd[i1]<sp/>=<sp/>g<sp/>*<sp/>invH;</highlight></codeline>
<codeline lineno="6383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>+=<sp/>subd[i1]<sp/>*<sp/>(*this)[i0][i1];</highlight></codeline>
<codeline lineno="6384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>halfFdivH<sp/>=<sp/>0.5f<sp/>*<sp/>f<sp/>*<sp/>invH;</highlight></codeline>
<codeline lineno="6386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;=<sp/>i3;<sp/>i1++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>(*this)[i0][i1];</highlight></codeline>
<codeline lineno="6388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>subd[i1]<sp/>-<sp/>halfFdivH<sp/>*<sp/>f;</highlight></codeline>
<codeline lineno="6389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subd[i1]<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="6390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;=<sp/>i1;<sp/>i2++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i1][i2]<sp/>-=<sp/>f<sp/>*<sp/>subd[i2]<sp/>+<sp/>g<sp/>*<sp/>(*this)[i0][i2];</highlight></codeline>
<codeline lineno="6392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subd[i0]<sp/>=<sp/>(*this)[i0][i3];</highlight></codeline>
<codeline lineno="6397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6398"><highlight class="normal"></highlight></codeline>
<codeline lineno="6399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diag[i0]<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="6400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6401"><highlight class="normal"></highlight></codeline>
<codeline lineno="6402"><highlight class="normal"><sp/><sp/><sp/><sp/>diag[0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6403"><highlight class="normal"><sp/><sp/><sp/><sp/>subd[0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i0<sp/>=<sp/>0,<sp/>i3<sp/>=<sp/>-1;<sp/>i0<sp/>&lt;=<sp/>numRows-1;<sp/>i0++,<sp/>i3++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>diag[i0]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;=<sp/>i3;<sp/>i1++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;=<sp/>i3;<sp/>i2++)<sp/>{</highlight></codeline>
<codeline lineno="6409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(*this)[i0][i2]<sp/>*<sp/>(*this)[i2][i1];</highlight></codeline>
<codeline lineno="6410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i2<sp/>=<sp/>0;<sp/>i2<sp/>&lt;=<sp/>i3;<sp/>i2++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i2][i1]<sp/>-=<sp/>sum<sp/>*<sp/>(*this)[i2][i0];</highlight></codeline>
<codeline lineno="6413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diag[i0]<sp/>=<sp/>(*this)[i0][i0];</highlight></codeline>
<codeline lineno="6417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i0][i0]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="6418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;=<sp/>i3;<sp/>i1++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i1][i0]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i0][i1]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6423"><highlight class="normal"></highlight></codeline>
<codeline lineno="6424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>re-order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i0<sp/>=<sp/>1,<sp/>i3<sp/>=<sp/>0;<sp/>i0<sp/>&lt;<sp/>numRows;<sp/>i0++,<sp/>i3++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subd[i3]<sp/>=<sp/>subd[i0];</highlight></codeline>
<codeline lineno="6427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6428"><highlight class="normal"><sp/><sp/><sp/><sp/>subd[numRows-1]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6430"><highlight class="normal"></highlight></codeline>
<codeline lineno="6431"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6432"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6433"><highlight class="comment">idMatX::QL</highlight></codeline>
<codeline lineno="6434"><highlight class="comment"></highlight></codeline>
<codeline lineno="6435"><highlight class="comment"><sp/><sp/>QL<sp/>algorithm<sp/>with<sp/>implicit<sp/>shifts<sp/>to<sp/>determine<sp/>the<sp/>eigenvalues<sp/>and<sp/>eigenvectors<sp/>of<sp/>a<sp/>symmetric<sp/>tri-diagonal<sp/>matrix.</highlight></codeline>
<codeline lineno="6436"><highlight class="comment"><sp/><sp/>diag<sp/>contains<sp/>the<sp/>diagonal<sp/>elements<sp/>of<sp/>the<sp/>symmetric<sp/>tri-diagonal<sp/>matrix<sp/>on<sp/>input<sp/>and<sp/>is<sp/>overwritten<sp/>with<sp/>the<sp/>eigenvalues.</highlight></codeline>
<codeline lineno="6437"><highlight class="comment"><sp/><sp/>subd<sp/>contains<sp/>the<sp/>off-diagonal<sp/>elements<sp/>of<sp/>the<sp/>symmetric<sp/>tri-diagonal<sp/>matrix<sp/>and<sp/>is<sp/>destroyed.</highlight></codeline>
<codeline lineno="6438"><highlight class="comment"><sp/><sp/>This<sp/>matrix<sp/>has<sp/>to<sp/>be<sp/>either<sp/>the<sp/>identity<sp/>matrix<sp/>to<sp/>determine<sp/>the<sp/>eigenvectors<sp/>for<sp/>a<sp/>symmetric<sp/>tri-diagonal<sp/>matrix,</highlight></codeline>
<codeline lineno="6439"><highlight class="comment"><sp/><sp/>or<sp/>the<sp/>matrix<sp/>returned<sp/>by<sp/>the<sp/>Householder<sp/>reduction<sp/>to<sp/>determine<sp/>the<sp/>eigenvalues<sp/>for<sp/>the<sp/>original<sp/>symmetric<sp/>matrix.</highlight></codeline>
<codeline lineno="6440"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6441"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6442"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::QL(<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;diag,<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;subd<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxIter<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="6444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i0,<sp/>i1,<sp/>i2,<sp/>i3;</highlight></codeline>
<codeline lineno="6445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/>b,<sp/>f,<sp/>g,<sp/>r,<sp/>p,<sp/>s,<sp/>c;</highlight></codeline>
<codeline lineno="6446"><highlight class="normal"></highlight></codeline>
<codeline lineno="6447"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="6448"><highlight class="normal"></highlight></codeline>
<codeline lineno="6449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i0<sp/>=<sp/>0;<sp/>i0<sp/>&lt;<sp/>numRows;<sp/>i0++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i1<sp/>=<sp/>0;<sp/>i1<sp/>&lt;<sp/>maxIter;<sp/>i1++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i2<sp/>=<sp/>i0;<sp/>i2<sp/>&lt;=<sp/>numRows<sp/>-<sp/>2;<sp/>i2++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>idMath::Fabs(<sp/>diag[i2]<sp/>)<sp/>+<sp/>idMath::Fabs(<sp/>diag[i2+1]<sp/>);</highlight></codeline>
<codeline lineno="6453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>subd[i2]<sp/>)<sp/>+<sp/>a<sp/>==<sp/>a<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i2<sp/>==<sp/>i0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6460"><highlight class="normal"></highlight></codeline>
<codeline lineno="6461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>(<sp/>diag[i0+1]<sp/>-<sp/>diag[i0]<sp/>)<sp/>/<sp/>(<sp/>2.0f<sp/>*<sp/>subd[i0]<sp/>);</highlight></codeline>
<codeline lineno="6462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>idMath::Sqrt(<sp/>g<sp/>*<sp/>g<sp/>+<sp/>1.0f<sp/>);</highlight></codeline>
<codeline lineno="6463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>diag[i2]<sp/>-<sp/>diag[i0]<sp/>+<sp/>subd[i0]<sp/>/<sp/>(<sp/>g<sp/>-<sp/>r<sp/>);</highlight></codeline>
<codeline lineno="6465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>diag[i2]<sp/>-<sp/>diag[i0]<sp/>+<sp/>subd[i0]<sp/>/<sp/>(<sp/>g<sp/>+<sp/>r<sp/>);</highlight></codeline>
<codeline lineno="6467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="6469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="6470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i3<sp/>=<sp/>i2<sp/>-<sp/>1;<sp/>i3<sp/>&gt;=<sp/>i0;<sp/>i3--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>s<sp/>*<sp/>subd[i3];</highlight></codeline>
<codeline lineno="6473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>c<sp/>*<sp/>subd[i3];</highlight></codeline>
<codeline lineno="6474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>f<sp/>)<sp/>&gt;=<sp/>idMath::Fabs(<sp/>g<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>g<sp/>/<sp/>f;</highlight></codeline>
<codeline lineno="6476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>idMath::Sqrt(<sp/>c<sp/>*<sp/>c<sp/>+<sp/>1.0f<sp/>);</highlight></codeline>
<codeline lineno="6477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subd[i3+1]<sp/>=<sp/>f<sp/>*<sp/>r;</highlight></codeline>
<codeline lineno="6478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>1.0f<sp/>/<sp/>r;</highlight></codeline>
<codeline lineno="6479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>*=<sp/>s;</highlight></codeline>
<codeline lineno="6480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>f<sp/>/<sp/>g;</highlight></codeline>
<codeline lineno="6482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>idMath::Sqrt(<sp/>s<sp/>*<sp/>s<sp/>+<sp/>1.0f<sp/>);</highlight></codeline>
<codeline lineno="6483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subd[i3+1]<sp/>=<sp/>g<sp/>*<sp/>r;</highlight></codeline>
<codeline lineno="6484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>1.0f<sp/>/<sp/>r;</highlight></codeline>
<codeline lineno="6485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>*=<sp/>c;</highlight></codeline>
<codeline lineno="6486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>diag[i3+1]<sp/>-<sp/>p;</highlight></codeline>
<codeline lineno="6488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>(<sp/>diag[i3]<sp/>-<sp/>g<sp/>)<sp/>*<sp/>s<sp/>+<sp/>2.0f<sp/>*<sp/>b<sp/>*<sp/>c;</highlight></codeline>
<codeline lineno="6489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>s<sp/>*<sp/>r;</highlight></codeline>
<codeline lineno="6490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diag[i3+1]<sp/>=<sp/>g<sp/>+<sp/>p;</highlight></codeline>
<codeline lineno="6491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>c<sp/>*<sp/>r<sp/>-<sp/>b;</highlight></codeline>
<codeline lineno="6492"><highlight class="normal"></highlight></codeline>
<codeline lineno="6493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i4<sp/>=<sp/>0;<sp/>i4<sp/>&lt;<sp/>numRows;<sp/>i4++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>(*this)[i4][i3+1];</highlight></codeline>
<codeline lineno="6495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i4][i3+1]<sp/>=<sp/>s<sp/>*<sp/>(*this)[i4][i3]<sp/>+<sp/>c<sp/>*<sp/>f;</highlight></codeline>
<codeline lineno="6496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i4][i3]<sp/>=<sp/>c<sp/>*<sp/>(*this)[i4][i3]<sp/>-<sp/>s<sp/>*<sp/>f;</highlight></codeline>
<codeline lineno="6497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diag[i0]<sp/>-=<sp/>p;</highlight></codeline>
<codeline lineno="6500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subd[i0]<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="6501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subd[i2]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i1<sp/>==<sp/>maxIter<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6509"><highlight class="normal"></highlight></codeline>
<codeline lineno="6510"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6511"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6512"><highlight class="comment">idMatX::Eigen_SolveSymmetricTriDiagonal</highlight></codeline>
<codeline lineno="6513"><highlight class="comment"></highlight></codeline>
<codeline lineno="6514"><highlight class="comment"><sp/><sp/>Determine<sp/>eigen<sp/>values<sp/>and<sp/>eigen<sp/>vectors<sp/>for<sp/>a<sp/>symmetric<sp/>tri-diagonal<sp/>matrix.</highlight></codeline>
<codeline lineno="6515"><highlight class="comment"><sp/><sp/>The<sp/>eigen<sp/>values<sp/>are<sp/>stored<sp/>in<sp/>&apos;eigenValues&apos;.</highlight></codeline>
<codeline lineno="6516"><highlight class="comment"><sp/><sp/>Column<sp/>i<sp/>of<sp/>the<sp/>original<sp/>matrix<sp/>will<sp/>store<sp/>the<sp/>eigen<sp/>vector<sp/>corresponding<sp/>to<sp/>the<sp/>eigenValues[i].</highlight></codeline>
<codeline lineno="6517"><highlight class="comment"><sp/><sp/>The<sp/>initial<sp/>matrix<sp/>has<sp/>to<sp/>be<sp/>symmetric<sp/>tri-diagonal.</highlight></codeline>
<codeline lineno="6518"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6519"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6520"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::Eigen_SolveSymmetricTriDiagonal(<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;eigenValues<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6522"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>subd;</highlight></codeline>
<codeline lineno="6523"><highlight class="normal"></highlight></codeline>
<codeline lineno="6524"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="6525"><highlight class="normal"></highlight></codeline>
<codeline lineno="6526"><highlight class="normal"><sp/><sp/><sp/><sp/>subd.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="6527"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenValues.SetSize(<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="6528"><highlight class="normal"></highlight></codeline>
<codeline lineno="6529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows-1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigenValues[i]<sp/>=<sp/>(*this)[i][i];</highlight></codeline>
<codeline lineno="6531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subd[i]<sp/>=<sp/>(*this)[i+1][i];</highlight></codeline>
<codeline lineno="6532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6533"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenValues[numRows-1]<sp/>=<sp/>(*this)[numRows-1][numRows-1];</highlight></codeline>
<codeline lineno="6534"><highlight class="normal"></highlight></codeline>
<codeline lineno="6535"><highlight class="normal"><sp/><sp/><sp/><sp/>Identity();</highlight></codeline>
<codeline lineno="6536"><highlight class="normal"></highlight></codeline>
<codeline lineno="6537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QL(<sp/>eigenValues,<sp/>subd<sp/>);</highlight></codeline>
<codeline lineno="6538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6539"><highlight class="normal"></highlight></codeline>
<codeline lineno="6540"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6541"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6542"><highlight class="comment">idMatX::Eigen_SolveSymmetric</highlight></codeline>
<codeline lineno="6543"><highlight class="comment"></highlight></codeline>
<codeline lineno="6544"><highlight class="comment"><sp/><sp/>Determine<sp/>eigen<sp/>values<sp/>and<sp/>eigen<sp/>vectors<sp/>for<sp/>a<sp/>symmetric<sp/>matrix.</highlight></codeline>
<codeline lineno="6545"><highlight class="comment"><sp/><sp/>The<sp/>eigen<sp/>values<sp/>are<sp/>stored<sp/>in<sp/>&apos;eigenValues&apos;.</highlight></codeline>
<codeline lineno="6546"><highlight class="comment"><sp/><sp/>Column<sp/>i<sp/>of<sp/>the<sp/>original<sp/>matrix<sp/>will<sp/>store<sp/>the<sp/>eigen<sp/>vector<sp/>corresponding<sp/>to<sp/>the<sp/>eigenValues[i].</highlight></codeline>
<codeline lineno="6547"><highlight class="comment"><sp/><sp/>The<sp/>initial<sp/>matrix<sp/>has<sp/>to<sp/>be<sp/>symmetric.</highlight></codeline>
<codeline lineno="6548"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6549"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6550"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::Eigen_SolveSymmetric(<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;eigenValues<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>subd;</highlight></codeline>
<codeline lineno="6552"><highlight class="normal"></highlight></codeline>
<codeline lineno="6553"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="6554"><highlight class="normal"></highlight></codeline>
<codeline lineno="6555"><highlight class="normal"><sp/><sp/><sp/><sp/>subd.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="6556"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenValues.SetSize(<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="6557"><highlight class="normal"></highlight></codeline>
<codeline lineno="6558"><highlight class="normal"><sp/><sp/><sp/><sp/>HouseholderReduction(<sp/>eigenValues,<sp/>subd<sp/>);</highlight></codeline>
<codeline lineno="6559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QL(<sp/>eigenValues,<sp/>subd<sp/>);</highlight></codeline>
<codeline lineno="6560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6561"><highlight class="normal"></highlight></codeline>
<codeline lineno="6562"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6563"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6564"><highlight class="comment">idMatX::HessenbergReduction</highlight></codeline>
<codeline lineno="6565"><highlight class="comment"></highlight></codeline>
<codeline lineno="6566"><highlight class="comment"><sp/><sp/>Reduction<sp/>to<sp/>Hessenberg<sp/>form.</highlight></codeline>
<codeline lineno="6567"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6568"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6569"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::HessenbergReduction(<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;H<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>m;</highlight></codeline>
<codeline lineno="6571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>low<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>high<sp/>=<sp/>numRows<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="6573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale,<sp/>f,<sp/>g,<sp/>h;</highlight></codeline>
<codeline lineno="6574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>v;</highlight></codeline>
<codeline lineno="6575"><highlight class="normal"></highlight></codeline>
<codeline lineno="6576"><highlight class="normal"><sp/><sp/><sp/><sp/>v.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="6577"><highlight class="normal"></highlight></codeline>
<codeline lineno="6578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>m<sp/>=<sp/>low<sp/>+<sp/>1;<sp/>m<sp/>&lt;=<sp/>high<sp/>-<sp/>1;<sp/>m++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6579"><highlight class="normal"></highlight></codeline>
<codeline lineno="6580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>m;<sp/>i<sp/>&lt;=<sp/>high;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>scale<sp/>+<sp/>idMath::Fabs(<sp/>H[i][m-1]<sp/>);</highlight></codeline>
<codeline lineno="6583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>scale<sp/>!=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6585"><highlight class="normal"></highlight></codeline>
<codeline lineno="6586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>Householder<sp/>transformation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>high;<sp/>i<sp/>&gt;=<sp/>m;<sp/>i--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>H[i][m-1]<sp/>/<sp/>scale;</highlight></codeline>
<codeline lineno="6590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>+=<sp/>v[i]<sp/>*<sp/>v[i];</highlight></codeline>
<codeline lineno="6591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>idMath::Sqrt(<sp/>h<sp/>);</highlight></codeline>
<codeline lineno="6593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>v[m]<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>-g;</highlight></codeline>
<codeline lineno="6595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>h<sp/>-<sp/>v[m]<sp/>*<sp/>g;</highlight></codeline>
<codeline lineno="6597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[m]<sp/>=<sp/>v[m]<sp/>-<sp/>g;</highlight></codeline>
<codeline lineno="6598"><highlight class="normal"></highlight></codeline>
<codeline lineno="6599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>Householder<sp/>similarity<sp/>transformation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>H<sp/>=<sp/>(I-u*u&apos;/h)*H*(I-u*u&apos;)/h)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>m;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="6602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>high;<sp/>i<sp/>&gt;=<sp/>m;<sp/>i--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>+=<sp/>v[i]<sp/>*<sp/>H[i][j];</highlight></codeline>
<codeline lineno="6605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>f<sp/>/<sp/>h;</highlight></codeline>
<codeline lineno="6607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>m;<sp/>i<sp/>&lt;=<sp/>high;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[i][j]<sp/>-=<sp/>f<sp/>*<sp/>v[i];</highlight></codeline>
<codeline lineno="6609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6611"><highlight class="normal"></highlight></codeline>
<codeline lineno="6612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>high;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>high;<sp/>j<sp/>&gt;=<sp/>m;<sp/>j--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>+=<sp/>v[j]<sp/>*<sp/>H[i][j];</highlight></codeline>
<codeline lineno="6616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>f<sp/>/<sp/>h;</highlight></codeline>
<codeline lineno="6618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>m;<sp/>j<sp/>&lt;=<sp/>high;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[i][j]<sp/>-=<sp/>f<sp/>*<sp/>v[j];</highlight></codeline>
<codeline lineno="6620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[m]<sp/>=<sp/>scale<sp/>*<sp/>v[m];</highlight></codeline>
<codeline lineno="6623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[m][m-1]<sp/>=<sp/>scale<sp/>*<sp/>g;</highlight></codeline>
<codeline lineno="6624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6626"><highlight class="normal"></highlight></codeline>
<codeline lineno="6627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>accumulate<sp/>transformations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6628"><highlight class="normal"><sp/><sp/><sp/><sp/>Identity();</highlight></codeline>
<codeline lineno="6629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>high<sp/>-<sp/>1;<sp/>m<sp/>&gt;=<sp/>low<sp/>+<sp/>1;<sp/>m--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>H[m][m-1]<sp/>!=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>m<sp/>+<sp/>1;<sp/>i<sp/>&lt;=<sp/>high;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>H[i][m-1];</highlight></codeline>
<codeline lineno="6633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>m;<sp/>j<sp/>&lt;=<sp/>high;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>m;<sp/>i<sp/>&lt;=<sp/>high;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>+=<sp/>v[i]<sp/>*<sp/>(*this)[i][j];</highlight></codeline>
<codeline lineno="6638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>float<sp/>division<sp/>to<sp/>avoid<sp/>possible<sp/>underflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>(<sp/>g<sp/>/<sp/>v[m]<sp/>)<sp/>/<sp/>H[m][m-1];</highlight></codeline>
<codeline lineno="6641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>m;<sp/>i<sp/>&lt;=<sp/>high;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][j]<sp/>+=<sp/>g<sp/>*<sp/>v[i];</highlight></codeline>
<codeline lineno="6643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6648"><highlight class="normal"></highlight></codeline>
<codeline lineno="6649"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6650"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6651"><highlight class="comment">idMatX::ComplexDivision</highlight></codeline>
<codeline lineno="6652"><highlight class="comment"></highlight></codeline>
<codeline lineno="6653"><highlight class="comment"><sp/><sp/>Complex<sp/>scalar<sp/>division.</highlight></codeline>
<codeline lineno="6654"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6655"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6656"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::ComplexDivision(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xr,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xi,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>yr,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>yi,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;cdivr,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;cdivi<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r,<sp/>d;</highlight></codeline>
<codeline lineno="6658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>yr<sp/>)<sp/>&gt;<sp/>idMath::Fabs(<sp/>yi<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>yi<sp/>/<sp/>yr;</highlight></codeline>
<codeline lineno="6660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>yr<sp/>+<sp/>r<sp/>*<sp/>yi;</highlight></codeline>
<codeline lineno="6661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdivr<sp/>=<sp/>(<sp/>xr<sp/>+<sp/>r<sp/>*<sp/>xi<sp/>)<sp/>/<sp/>d;</highlight></codeline>
<codeline lineno="6662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdivi<sp/>=<sp/>(<sp/>xi<sp/>-<sp/>r<sp/>*<sp/>xr<sp/>)<sp/>/<sp/>d;</highlight></codeline>
<codeline lineno="6663"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>yr<sp/>/<sp/>yi;</highlight></codeline>
<codeline lineno="6665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>yi<sp/>+<sp/>r<sp/>*<sp/>yr;</highlight></codeline>
<codeline lineno="6666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdivr<sp/>=<sp/>(<sp/>r<sp/>*<sp/>xr<sp/>+<sp/>xi<sp/>)<sp/>/<sp/>d;</highlight></codeline>
<codeline lineno="6667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdivi<sp/>=<sp/>(<sp/>r<sp/>*<sp/>xi<sp/>-<sp/>xr<sp/>)<sp/>/<sp/>d;</highlight></codeline>
<codeline lineno="6668"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6670"><highlight class="normal"></highlight></codeline>
<codeline lineno="6671"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6672"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6673"><highlight class="comment">idMatX::HessenbergToRealSchur</highlight></codeline>
<codeline lineno="6674"><highlight class="comment"></highlight></codeline>
<codeline lineno="6675"><highlight class="comment"><sp/><sp/>Reduction<sp/>from<sp/>Hessenberg<sp/>to<sp/>real<sp/>Schur<sp/>form.</highlight></codeline>
<codeline lineno="6676"><highlight class="comment">============</highlight></codeline>
<codeline lineno="6677"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6678"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::HessenbergToRealSchur(<sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>&amp;H,<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;realEigenValues,<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;imaginaryEigenValues<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="6680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>numRows<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="6681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>low<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>high<sp/>=<sp/>numRows<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="6683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>eps<sp/>=<sp/>2e-16f,<sp/>exshift<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>0.0f,<sp/>q<sp/>=<sp/>0.0f,<sp/>r<sp/>=<sp/>0.0f,<sp/>s<sp/>=<sp/>0.0f,<sp/>z<sp/>=<sp/>0.0f,<sp/>t,<sp/>w,<sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="6685"><highlight class="normal"></highlight></codeline>
<codeline lineno="6686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>roots<sp/>isolated<sp/>by<sp/>balanc<sp/>and<sp/>compute<sp/>matrix<sp/>norm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structnorm" kindref="compound">norm</ref><sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&lt;<sp/>low<sp/>||<sp/>i<sp/>&gt;<sp/>high<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>realEigenValues[i]<sp/>=<sp/>H[i][i];</highlight></codeline>
<codeline lineno="6691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imaginaryEigenValues[i]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>Max(<sp/>i<sp/>-<sp/>1,<sp/>0<sp/>);<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>norm<sp/>=<sp/>norm<sp/>+<sp/>idMath::Fabs(<sp/>H[i][j]<sp/>);</highlight></codeline>
<codeline lineno="6695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6697"><highlight class="normal"></highlight></codeline>
<codeline lineno="6698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>n<sp/>&gt;=<sp/>low<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6700"><highlight class="normal"></highlight></codeline>
<codeline lineno="6701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>single<sp/>small<sp/>sub-diagonal<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="6703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>l<sp/>&gt;<sp/>low<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>idMath::Fabs(<sp/>H[l-1][l-1]<sp/>)<sp/>+<sp/>idMath::Fabs(<sp/>H[l][l]<sp/>);</highlight></codeline>
<codeline lineno="6705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>s<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>norm;</highlight></codeline>
<codeline lineno="6707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>H[l][l-1]<sp/>)<sp/>&lt;<sp/>eps<sp/>*<sp/>s<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l--;</highlight></codeline>
<codeline lineno="6712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="6714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>convergence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>l<sp/>==<sp/>n<sp/>)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>root<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[n][n]<sp/>=<sp/>H[n][n]<sp/>+<sp/>exshift;</highlight></codeline>
<codeline lineno="6717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>realEigenValues[n]<sp/>=<sp/>H[n][n];</highlight></codeline>
<codeline lineno="6718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imaginaryEigenValues[n]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n--;</highlight></codeline>
<codeline lineno="6720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>l<sp/>==<sp/>n-1<sp/>)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>two<sp/>roots<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>H[n][n-1]<sp/>*<sp/>H[n-1][n];</highlight></codeline>
<codeline lineno="6723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(<sp/>H[n-1][n-1]<sp/>-<sp/>H[n][n]<sp/>)<sp/>/<sp/>2.0f;</highlight></codeline>
<codeline lineno="6724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>p<sp/>*<sp/>p<sp/>+<sp/>w;</highlight></codeline>
<codeline lineno="6725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>idMath::Sqrt(<sp/>idMath::Fabs(<sp/>q<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="6726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[n][n]<sp/>=<sp/>H[n][n]<sp/>+<sp/>exshift;</highlight></codeline>
<codeline lineno="6727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[n-1][n-1]<sp/>=<sp/>H[n-1][n-1]<sp/>+<sp/>exshift;</highlight></codeline>
<codeline lineno="6728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>H[n][n];</highlight></codeline>
<codeline lineno="6729"><highlight class="normal"></highlight></codeline>
<codeline lineno="6730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>q<sp/>&gt;=<sp/>0.0f<sp/>)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>real<sp/>pair</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>p<sp/>&gt;=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>p<sp/>+<sp/>z;</highlight></codeline>
<codeline lineno="6733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>p<sp/>-<sp/>z;</highlight></codeline>
<codeline lineno="6735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>realEigenValues[n-1]<sp/>=<sp/>x<sp/>+<sp/>z;</highlight></codeline>
<codeline lineno="6737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>realEigenValues[n]<sp/>=<sp/>realEigenValues[n-1];</highlight></codeline>
<codeline lineno="6738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>z<sp/>!=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>realEigenValues[n]<sp/>=<sp/>x<sp/>-<sp/>w<sp/>/<sp/>z;</highlight></codeline>
<codeline lineno="6740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imaginaryEigenValues[n-1]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imaginaryEigenValues[n]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>H[n][n-1];</highlight></codeline>
<codeline lineno="6744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>idMath::Fabs(<sp/>x<sp/>)<sp/>+<sp/>idMath::Fabs(<sp/>z<sp/>);</highlight></codeline>
<codeline lineno="6745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>x<sp/>/<sp/>s;</highlight></codeline>
<codeline lineno="6746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>z<sp/>/<sp/>s;</highlight></codeline>
<codeline lineno="6747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>idMath::Sqrt(<sp/>p<sp/>*<sp/>p<sp/>+<sp/>q<sp/>*<sp/>q<sp/>);</highlight></codeline>
<codeline lineno="6748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>p<sp/>/<sp/>r;</highlight></codeline>
<codeline lineno="6749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>q<sp/>/<sp/>r;</highlight></codeline>
<codeline lineno="6750"><highlight class="normal"></highlight></codeline>
<codeline lineno="6751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>n-1;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>H[n-1][j];</highlight></codeline>
<codeline lineno="6754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[n-1][j]<sp/>=<sp/>q<sp/>*<sp/>z<sp/>+<sp/>p<sp/>*<sp/>H[n][j];</highlight></codeline>
<codeline lineno="6755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[n][j]<sp/>=<sp/>q<sp/>*<sp/>H[n][j]<sp/>-<sp/>p<sp/>*<sp/>z;</highlight></codeline>
<codeline lineno="6756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6757"><highlight class="normal"></highlight></codeline>
<codeline lineno="6758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>n;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>H[i][n-1];</highlight></codeline>
<codeline lineno="6761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[i][n-1]<sp/>=<sp/>q<sp/>*<sp/>z<sp/>+<sp/>p<sp/>*<sp/>H[i][n];</highlight></codeline>
<codeline lineno="6762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[i][n]<sp/>=<sp/>q<sp/>*<sp/>H[i][n]<sp/>-<sp/>p<sp/>*<sp/>z;</highlight></codeline>
<codeline lineno="6763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6764"><highlight class="normal"></highlight></codeline>
<codeline lineno="6765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>accumulate<sp/>transformations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>low;<sp/>i<sp/>&lt;=<sp/>high;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>(*this)[i][n-1];</highlight></codeline>
<codeline lineno="6768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][n-1]<sp/>=<sp/>q<sp/>*<sp/>z<sp/>+<sp/>p<sp/>*<sp/>(*this)[i][n];</highlight></codeline>
<codeline lineno="6769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][n]<sp/>=<sp/>q<sp/>*<sp/>(*this)[i][n]<sp/>-<sp/>p<sp/>*<sp/>z;</highlight></codeline>
<codeline lineno="6770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>complex<sp/>pair</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>realEigenValues[n-1]<sp/>=<sp/>x<sp/>+<sp/>p;</highlight></codeline>
<codeline lineno="6773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>realEigenValues[n]<sp/>=<sp/>x<sp/>+<sp/>p;</highlight></codeline>
<codeline lineno="6774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imaginaryEigenValues[n-1]<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="6775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imaginaryEigenValues[n]<sp/>=<sp/>-z;</highlight></codeline>
<codeline lineno="6776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>n<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="6778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6779"><highlight class="normal"></highlight></codeline>
<codeline lineno="6780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>convergence<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6781"><highlight class="normal"></highlight></codeline>
<codeline lineno="6782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>form<sp/>shift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>H[n][n];</highlight></codeline>
<codeline lineno="6784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>l<sp/>&lt;<sp/>n<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>H[n-1][n-1];</highlight></codeline>
<codeline lineno="6788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>H[n][n-1]<sp/>*<sp/>H[n-1][n];</highlight></codeline>
<codeline lineno="6789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6790"><highlight class="normal"></highlight></codeline>
<codeline lineno="6791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wilkinson&apos;s<sp/>original<sp/>ad<sp/>hoc<sp/>shift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>iter<sp/>==<sp/>10<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exshift<sp/>+=<sp/>x;</highlight></codeline>
<codeline lineno="6794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>low;<sp/>i<sp/>&lt;=<sp/>n;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[i][i]<sp/>-=<sp/>x;</highlight></codeline>
<codeline lineno="6796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>idMath::Fabs(<sp/>H[n][n-1]<sp/>)<sp/>+<sp/>idMath::Fabs(<sp/>H[n-1][n-2]<sp/>);</highlight></codeline>
<codeline lineno="6798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>y<sp/>=<sp/>0.75f<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="6799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>-0.4375f<sp/>*<sp/>s<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="6800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6801"><highlight class="normal"></highlight></codeline>
<codeline lineno="6802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>new<sp/>ad<sp/>hoc<sp/>shift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>iter<sp/>==<sp/>30<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(<sp/>y<sp/>-<sp/>x<sp/>)<sp/>/<sp/>2.0f;</highlight></codeline>
<codeline lineno="6805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>s<sp/>*<sp/>s<sp/>+<sp/>w;</highlight></codeline>
<codeline lineno="6806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>s<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>idMath::Sqrt(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="6808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>y<sp/>&lt;<sp/>x<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>-s;</highlight></codeline>
<codeline lineno="6810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>x<sp/>-<sp/>w<sp/>/<sp/>(<sp/>(<sp/>y<sp/>-<sp/>x<sp/>)<sp/>/<sp/>2.0f<sp/>+<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="6812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>low;<sp/>i<sp/>&lt;=<sp/>n;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[i][i]<sp/>-=<sp/>s;</highlight></codeline>
<codeline lineno="6814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exshift<sp/>+=<sp/>s;</highlight></codeline>
<codeline lineno="6816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>y<sp/>=<sp/>w<sp/>=<sp/>0.964f;</highlight></codeline>
<codeline lineno="6817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6819"><highlight class="normal"></highlight></codeline>
<codeline lineno="6820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/>=<sp/>iter<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="6821"><highlight class="normal"></highlight></codeline>
<codeline lineno="6822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>two<sp/>consecutive<sp/>small<sp/>sub-diagonal<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="6824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>m<sp/>=<sp/>n-2;<sp/>m<sp/>&gt;=<sp/>l;<sp/>m--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>H[m][m];</highlight></codeline>
<codeline lineno="6826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>x<sp/>-<sp/>z;</highlight></codeline>
<codeline lineno="6827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>y<sp/>-<sp/>z;</highlight></codeline>
<codeline lineno="6828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(<sp/>r<sp/>*<sp/>s<sp/>-<sp/>w<sp/>)<sp/>/<sp/>H[m+1][m]<sp/>+<sp/>H[m][m+1];</highlight></codeline>
<codeline lineno="6829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>H[m+1][m+1]<sp/>-<sp/>z<sp/>-<sp/>r<sp/>-<sp/>s;</highlight></codeline>
<codeline lineno="6830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>H[m+2][m+1];</highlight></codeline>
<codeline lineno="6831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>idMath::Fabs(<sp/>p<sp/>)<sp/>+<sp/>idMath::Fabs(<sp/>q<sp/>)<sp/>+<sp/>idMath::Fabs(<sp/>r<sp/>);</highlight></codeline>
<codeline lineno="6832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>p<sp/>/<sp/>s;</highlight></codeline>
<codeline lineno="6833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>q<sp/>/<sp/>s;</highlight></codeline>
<codeline lineno="6834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>r<sp/>/<sp/>s;</highlight></codeline>
<codeline lineno="6835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m<sp/>==<sp/>l<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>H[m][m-1]<sp/>)<sp/>*<sp/>(<sp/>idMath::Fabs(<sp/>q<sp/>)<sp/>+<sp/>idMath::Fabs(<sp/>r<sp/>)<sp/>)<sp/>&lt;</highlight></codeline>
<codeline lineno="6839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eps<sp/>*<sp/>(<sp/>idMath::Fabs(<sp/>p<sp/>)<sp/>*<sp/>(<sp/>idMath::Fabs(<sp/>H[m-1][m-1]<sp/>)<sp/>+<sp/>idMath::Fabs(<sp/>z<sp/>)<sp/>+<sp/>idMath::Fabs(<sp/>H[m+1][m+1]<sp/>)<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6843"><highlight class="normal"></highlight></codeline>
<codeline lineno="6844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>m+2;<sp/>i<sp/>&lt;=<sp/>n;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[i][i-2]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&gt;<sp/>m+2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[i][i-3]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6850"><highlight class="normal"></highlight></codeline>
<codeline lineno="6851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>QR<sp/>step<sp/>involving<sp/>rows<sp/>l:n<sp/>and<sp/>columns<sp/>m:n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>m;<sp/>k<sp/>&lt;=<sp/>n-1;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>notlast<sp/>=<sp/>(<sp/>k<sp/>!=<sp/>n-1<sp/>);</highlight></codeline>
<codeline lineno="6854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>!=<sp/>m<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>H[k][k-1];</highlight></codeline>
<codeline lineno="6856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>H[k+1][k-1];</highlight></codeline>
<codeline lineno="6857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>(<sp/>notlast<sp/>?<sp/>H[k+2][k-1]<sp/>:<sp/>0.0f<sp/>);</highlight></codeline>
<codeline lineno="6858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>idMath::Fabs(<sp/>p<sp/>)<sp/>+<sp/>idMath::Fabs(<sp/>q<sp/>)<sp/>+<sp/>idMath::Fabs(<sp/>r<sp/>);</highlight></codeline>
<codeline lineno="6859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>x<sp/>!=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>p<sp/>/<sp/>x;</highlight></codeline>
<codeline lineno="6861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>q<sp/>/<sp/>x;</highlight></codeline>
<codeline lineno="6862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>r<sp/>/<sp/>x;</highlight></codeline>
<codeline lineno="6863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>x<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>idMath::Sqrt(<sp/>p<sp/>*<sp/>p<sp/>+<sp/>q<sp/>*<sp/>q<sp/>+<sp/>r<sp/>*<sp/>r<sp/>);</highlight></codeline>
<codeline lineno="6869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>p<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>-s;</highlight></codeline>
<codeline lineno="6871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>s<sp/>!=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>!=<sp/>m<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[k][k-1]<sp/>=<sp/>-s<sp/>*<sp/>x;</highlight></codeline>
<codeline lineno="6875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>l<sp/>!=<sp/>m<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[k][k-1]<sp/>=<sp/>-H[k][k-1];</highlight></codeline>
<codeline lineno="6877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>p<sp/>+<sp/>s;</highlight></codeline>
<codeline lineno="6879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>p<sp/>/<sp/>s;</highlight></codeline>
<codeline lineno="6880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>q<sp/>/<sp/>s;</highlight></codeline>
<codeline lineno="6881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>r<sp/>/<sp/>s;</highlight></codeline>
<codeline lineno="6882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>q<sp/>/<sp/>p;</highlight></codeline>
<codeline lineno="6883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>r<sp/>/<sp/>p;</highlight></codeline>
<codeline lineno="6884"><highlight class="normal"></highlight></codeline>
<codeline lineno="6885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>k;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>H[k][j]<sp/>+<sp/>q<sp/>*<sp/>H[k+1][j];</highlight></codeline>
<codeline lineno="6888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>notlast<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>p<sp/>+<sp/>r<sp/>*<sp/>H[k+2][j];</highlight></codeline>
<codeline lineno="6890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[k+2][j]<sp/>=<sp/>H[k+2][j]<sp/>-<sp/>p<sp/>*<sp/>z;</highlight></codeline>
<codeline lineno="6891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[k][j]<sp/>=<sp/>H[k][j]<sp/>-<sp/>p<sp/>*<sp/>x;</highlight></codeline>
<codeline lineno="6893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[k+1][j]<sp/>=<sp/>H[k+1][j]<sp/>-<sp/>p<sp/>*<sp/>y;</highlight></codeline>
<codeline lineno="6894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6895"><highlight class="normal"></highlight></codeline>
<codeline lineno="6896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>Min(<sp/>n,<sp/>k<sp/>+<sp/>3<sp/>);<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>x<sp/>*<sp/>H[i][k]<sp/>+<sp/>y<sp/>*<sp/>H[i][k+1];</highlight></codeline>
<codeline lineno="6899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>notlast<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>p<sp/>+<sp/>z<sp/>*<sp/>H[i][k+2];</highlight></codeline>
<codeline lineno="6901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[i][k+2]<sp/>=<sp/>H[i][k+2]<sp/>-<sp/>p<sp/>*<sp/>r;</highlight></codeline>
<codeline lineno="6902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[i][k]<sp/>=<sp/>H[i][k]<sp/>-<sp/>p;</highlight></codeline>
<codeline lineno="6904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[i][k+1]<sp/>=<sp/>H[i][k+1]<sp/>-<sp/>p<sp/>*<sp/>q;</highlight></codeline>
<codeline lineno="6905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6906"><highlight class="normal"></highlight></codeline>
<codeline lineno="6907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>accumulate<sp/>transformations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>low;<sp/>i<sp/>&lt;=<sp/>high;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>x<sp/>*<sp/>(*this)[i][k]<sp/>+<sp/>y<sp/>*<sp/>(*this)[i][k+1];</highlight></codeline>
<codeline lineno="6910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>notlast<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>p<sp/>+<sp/>z<sp/>*<sp/>(*this)[i][k+2];</highlight></codeline>
<codeline lineno="6912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][k+2]<sp/>=<sp/>(*this)[i][k+2]<sp/>-<sp/>p<sp/>*<sp/>r;</highlight></codeline>
<codeline lineno="6913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][k]<sp/>=<sp/>(*this)[i][k]<sp/>-<sp/>p;</highlight></codeline>
<codeline lineno="6915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][k+1]<sp/>=<sp/>(*this)[i][k+1]<sp/>-<sp/>p<sp/>*<sp/>q;</highlight></codeline>
<codeline lineno="6916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6920"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="6922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>backsubstitute<sp/>to<sp/>find<sp/>vectors<sp/>of<sp/>upper<sp/>triangular<sp/>form</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>norm<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6926"><highlight class="normal"></highlight></codeline>
<codeline lineno="6927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>n<sp/>=<sp/>numRows-1;<sp/>n<sp/>&gt;=<sp/>0;<sp/>n--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>realEigenValues[n];</highlight></codeline>
<codeline lineno="6929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>imaginaryEigenValues[n];</highlight></codeline>
<codeline lineno="6930"><highlight class="normal"></highlight></codeline>
<codeline lineno="6931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>q<sp/>==<sp/>0.0f<sp/>)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>real<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="6933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[n][n]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="6934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>n-1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>H[i][i]<sp/>-<sp/>p;</highlight></codeline>
<codeline lineno="6936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>l;<sp/>j<sp/>&lt;=<sp/>n;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>r<sp/>+<sp/>H[i][j]<sp/>*<sp/>H[j][n];</highlight></codeline>
<codeline lineno="6939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>imaginaryEigenValues[i]<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>w;</highlight></codeline>
<codeline lineno="6942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="6943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="6945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>imaginaryEigenValues[i]<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>w<sp/>!=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[i][n]<sp/>=<sp/>-r<sp/>/<sp/>w;</highlight></codeline>
<codeline lineno="6948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[i][n]<sp/>=<sp/>-r<sp/>/<sp/>(<sp/>eps<sp/>*<sp/>norm<sp/>);</highlight></codeline>
<codeline lineno="6950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>real<sp/>equations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>H[i][i+1];</highlight></codeline>
<codeline lineno="6953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>H[i+1][i];</highlight></codeline>
<codeline lineno="6954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>(<sp/>realEigenValues[i]<sp/>-<sp/>p<sp/>)<sp/>*<sp/>(<sp/>realEigenValues[i]<sp/>-<sp/>p<sp/>)<sp/>+<sp/>imaginaryEigenValues[i]<sp/>*<sp/>imaginaryEigenValues[i];</highlight></codeline>
<codeline lineno="6955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(<sp/>x<sp/>*<sp/>s<sp/>-<sp/>z<sp/>*<sp/>r<sp/>)<sp/>/<sp/>q;</highlight></codeline>
<codeline lineno="6956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[i][n]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="6957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(x)<sp/>&gt;<sp/>idMath::Fabs(<sp/>z<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[i+1][n]<sp/>=<sp/>(<sp/>-r<sp/>-<sp/>w<sp/>*<sp/>t<sp/>)<sp/>/<sp/>x;</highlight></codeline>
<codeline lineno="6959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[i+1][n]<sp/>=<sp/>(<sp/>-s<sp/>-<sp/>y<sp/>*<sp/>t<sp/>)<sp/>/<sp/>z;</highlight></codeline>
<codeline lineno="6961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6963"><highlight class="normal"></highlight></codeline>
<codeline lineno="6964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overflow<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>idMath::Fabs(H[i][n]);</highlight></codeline>
<codeline lineno="6966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>eps<sp/>*<sp/>t<sp/>)<sp/>*<sp/>t<sp/>&gt;<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i;<sp/>j<sp/>&lt;=<sp/>n;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[j][n]<sp/>=<sp/>H[j][n]<sp/>/<sp/>t;</highlight></codeline>
<codeline lineno="6969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>q<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>complex<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>n-1;</highlight></codeline>
<codeline lineno="6975"><highlight class="normal"></highlight></codeline>
<codeline lineno="6976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>vector<sp/>component<sp/>imaginary<sp/>so<sp/>matrix<sp/>is<sp/>triangular</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>H[n][n-1]<sp/>)<sp/>&gt;<sp/>idMath::Fabs(<sp/>H[n-1][n]<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[n-1][n-1]<sp/>=<sp/>q<sp/>/<sp/>H[n][n-1];</highlight></codeline>
<codeline lineno="6979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[n-1][n]<sp/>=<sp/>-(<sp/>H[n][n]<sp/>-<sp/>p<sp/>)<sp/>/<sp/>H[n][n-1];</highlight></codeline>
<codeline lineno="6980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ComplexDivision(<sp/>0.0f,<sp/>-H[n-1][n],<sp/>H[n-1][n-1]-p,<sp/>q,<sp/>H[n-1][n-1],<sp/>H[n-1][n]<sp/>);</highlight></codeline>
<codeline lineno="6982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[n][n-1]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[n][n]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="6985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>n-2;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ra,<sp/>sa,<sp/>vr,<sp/>vi;</highlight></codeline>
<codeline lineno="6987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ra<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="6989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>l;<sp/>j<sp/>&lt;=<sp/>n;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ra<sp/>=<sp/>ra<sp/>+<sp/>H[i][j]<sp/>*<sp/>H[j][n-1];</highlight></codeline>
<codeline lineno="6991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa<sp/>=<sp/>sa<sp/>+<sp/>H[i][j]<sp/>*<sp/>H[j][n];</highlight></codeline>
<codeline lineno="6992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>H[i][i]<sp/>-<sp/>p;</highlight></codeline>
<codeline lineno="6994"><highlight class="normal"></highlight></codeline>
<codeline lineno="6995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>imaginaryEigenValues[i]<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>w;</highlight></codeline>
<codeline lineno="6997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>ra;</highlight></codeline>
<codeline lineno="6998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>sa;</highlight></codeline>
<codeline lineno="6999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="7001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>imaginaryEigenValues[i]<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ComplexDivision(<sp/>-ra,<sp/>-sa,<sp/>w,<sp/>q,<sp/>H[i][n-1],<sp/>H[i][n]<sp/>);</highlight></codeline>
<codeline lineno="7003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>complex<sp/>equations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>H[i][i+1];</highlight></codeline>
<codeline lineno="7006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>H[i+1][i];</highlight></codeline>
<codeline lineno="7007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vr<sp/>=<sp/>(<sp/>realEigenValues[i]<sp/>-<sp/>p<sp/>)<sp/>*<sp/>(<sp/>realEigenValues[i]<sp/>-<sp/>p<sp/>)<sp/>+<sp/>imaginaryEigenValues[i]<sp/>*<sp/>imaginaryEigenValues[i]<sp/>-<sp/>q<sp/>*<sp/>q;</highlight></codeline>
<codeline lineno="7008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vi<sp/>=<sp/>(<sp/>realEigenValues[i]<sp/>-<sp/>p<sp/>)<sp/>*<sp/>2.0f<sp/>*<sp/>q;</highlight></codeline>
<codeline lineno="7009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vr<sp/>==<sp/>0.0f<sp/>&amp;&amp;<sp/>vi<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vr<sp/>=<sp/>eps<sp/>*<sp/>norm<sp/>*<sp/>(<sp/>idMath::Fabs(<sp/>w<sp/>)<sp/>+<sp/>idMath::Fabs(<sp/>q<sp/>)<sp/>+<sp/>idMath::Fabs(<sp/>x<sp/>)<sp/>+<sp/>idMath::Fabs(<sp/>y<sp/>)<sp/>+<sp/>idMath::Fabs(<sp/>z<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="7011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ComplexDivision(<sp/>x<sp/>*<sp/>r<sp/>-<sp/>z<sp/>*<sp/>ra<sp/>+<sp/>q<sp/>*<sp/>sa,<sp/>x<sp/>*<sp/>s<sp/>-<sp/>z<sp/>*<sp/>sa<sp/>-<sp/>q<sp/>*<sp/>ra,<sp/>vr,<sp/>vi,<sp/>H[i][n-1],<sp/>H[i][n]<sp/>);</highlight></codeline>
<codeline lineno="7013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>x<sp/>)<sp/>&gt;<sp/>(<sp/>idMath::Fabs(<sp/>z<sp/>)<sp/>+<sp/>idMath::Fabs(<sp/>q<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[i+1][n-1]<sp/>=<sp/>(<sp/>-ra<sp/>-<sp/>w<sp/>*<sp/>H[i][n-1]<sp/>+<sp/>q<sp/>*<sp/>H[i][n]<sp/>)<sp/>/<sp/>x;</highlight></codeline>
<codeline lineno="7015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[i+1][n]<sp/>=<sp/>(<sp/>-sa<sp/>-<sp/>w<sp/>*<sp/>H[i][n]<sp/>-<sp/>q<sp/>*<sp/>H[i][n-1]<sp/>)<sp/>/<sp/>x;</highlight></codeline>
<codeline lineno="7016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ComplexDivision(<sp/>-r<sp/>-<sp/>y<sp/>*<sp/>H[i][n-1],<sp/>-s<sp/>-<sp/>y<sp/>*<sp/>H[i][n],<sp/>z,<sp/>q,<sp/>H[i+1][n-1],<sp/>H[i+1][n]<sp/>);</highlight></codeline>
<codeline lineno="7018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7020"><highlight class="normal"></highlight></codeline>
<codeline lineno="7021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overflow<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>Max(<sp/>idMath::Fabs(<sp/>H[i][n-1]<sp/>),<sp/>idMath::Fabs(<sp/>H[i][n]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="7023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>eps<sp/>*<sp/>t<sp/>)<sp/>*<sp/>t<sp/>&gt;<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i;<sp/>j<sp/>&lt;=<sp/>n;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[j][n-1]<sp/>=<sp/>H[j][n-1]<sp/>/<sp/>t;</highlight></codeline>
<codeline lineno="7026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[j][n]<sp/>=<sp/>H[j][n]<sp/>/<sp/>t;</highlight></codeline>
<codeline lineno="7027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7032"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7033"><highlight class="normal"></highlight></codeline>
<codeline lineno="7034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vectors<sp/>of<sp/>isolated<sp/>roots</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&lt;<sp/>low<sp/>||<sp/>i<sp/>&gt;<sp/>high<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>i;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][j]<sp/>=<sp/>H[i][j];</highlight></codeline>
<codeline lineno="7039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7041"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7042"><highlight class="normal"></highlight></codeline>
<codeline lineno="7043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>back<sp/>transformation<sp/>to<sp/>get<sp/>eigenvectors<sp/>of<sp/>original<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>numRows<sp/>-<sp/>1;<sp/>j<sp/>&gt;=<sp/>low;<sp/>j--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>low;<sp/>i<sp/>&lt;=<sp/>high;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="7047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>low;<sp/>k<sp/>&lt;=<sp/>Min(<sp/>j,<sp/>high<sp/>);<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>z<sp/>+<sp/>(*this)[i][k]<sp/>*<sp/>H[k][j];</highlight></codeline>
<codeline lineno="7049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][j]<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="7051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7052"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7053"><highlight class="normal"></highlight></codeline>
<codeline lineno="7054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7055"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7056"><highlight class="normal"></highlight></codeline>
<codeline lineno="7057"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7058"><highlight class="comment">============</highlight></codeline>
<codeline lineno="7059"><highlight class="comment">idMatX::Eigen_Solve</highlight></codeline>
<codeline lineno="7060"><highlight class="comment"></highlight></codeline>
<codeline lineno="7061"><highlight class="comment"><sp/><sp/>Determine<sp/>eigen<sp/>values<sp/>and<sp/>eigen<sp/>vectors<sp/>for<sp/>a<sp/>square<sp/>matrix.</highlight></codeline>
<codeline lineno="7062"><highlight class="comment"><sp/><sp/>The<sp/>eigen<sp/>values<sp/>are<sp/>stored<sp/>in<sp/>&apos;realEigenValues&apos;<sp/>and<sp/>&apos;imaginaryEigenValues&apos;.</highlight></codeline>
<codeline lineno="7063"><highlight class="comment"><sp/><sp/>Column<sp/>i<sp/>of<sp/>the<sp/>original<sp/>matrix<sp/>will<sp/>store<sp/>the<sp/>eigen<sp/>vector<sp/>corresponding<sp/>to<sp/>the<sp/>realEigenValues[i]<sp/>and<sp/>imaginaryEigenValues[i].</highlight></codeline>
<codeline lineno="7064"><highlight class="comment">============</highlight></codeline>
<codeline lineno="7065"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7066"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::Eigen_Solve(<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;realEigenValues,<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;imaginaryEigenValues<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7067"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>H;</highlight></codeline>
<codeline lineno="7068"><highlight class="normal"></highlight></codeline>
<codeline lineno="7069"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>numRows<sp/>==<sp/>numColumns<sp/>);</highlight></codeline>
<codeline lineno="7070"><highlight class="normal"></highlight></codeline>
<codeline lineno="7071"><highlight class="normal"><sp/><sp/><sp/><sp/>realEigenValues.SetSize(<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="7072"><highlight class="normal"><sp/><sp/><sp/><sp/>imaginaryEigenValues.SetSize(<sp/>numRows<sp/>);</highlight></codeline>
<codeline lineno="7073"><highlight class="normal"></highlight></codeline>
<codeline lineno="7074"><highlight class="normal"><sp/><sp/><sp/><sp/>H<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7075"><highlight class="normal"></highlight></codeline>
<codeline lineno="7076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reduce<sp/>to<sp/>Hessenberg<sp/>form</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7077"><highlight class="normal"><sp/><sp/><sp/><sp/>HessenbergReduction(<sp/>H<sp/>);</highlight></codeline>
<codeline lineno="7078"><highlight class="normal"></highlight></codeline>
<codeline lineno="7079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reduce<sp/>Hessenberg<sp/>to<sp/>real<sp/>Schur<sp/>form</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HessenbergToRealSchur(<sp/>H,<sp/>realEigenValues,<sp/>imaginaryEigenValues<sp/>);</highlight></codeline>
<codeline lineno="7081"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7082"><highlight class="normal"></highlight></codeline>
<codeline lineno="7083"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7084"><highlight class="comment">============</highlight></codeline>
<codeline lineno="7085"><highlight class="comment">idMatX::Eigen_SortIncreasing</highlight></codeline>
<codeline lineno="7086"><highlight class="comment">============</highlight></codeline>
<codeline lineno="7087"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7088"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::Eigen_SortIncreasing(<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;eigenValues<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="7090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min;</highlight></codeline>
<codeline lineno="7091"><highlight class="normal"></highlight></codeline>
<codeline lineno="7092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0,<sp/>j;<sp/>i<sp/>&lt;=<sp/>numRows<sp/>-<sp/>2;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="7094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min<sp/>=<sp/>eigenValues[j];</highlight></codeline>
<codeline lineno="7095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>k<sp/>&lt;<sp/>numRows;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>eigenValues[k]<sp/>&lt;<sp/>min<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="7098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min<sp/>=<sp/>eigenValues[j];</highlight></codeline>
<codeline lineno="7099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>!=<sp/>i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigenValues.SwapElements(<sp/>i,<sp/>j<sp/>);</highlight></codeline>
<codeline lineno="7103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwapColumns(<sp/>i,<sp/>j<sp/>);</highlight></codeline>
<codeline lineno="7104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7107"><highlight class="normal"></highlight></codeline>
<codeline lineno="7108"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7109"><highlight class="comment">============</highlight></codeline>
<codeline lineno="7110"><highlight class="comment">idMatX::Eigen_SortDecreasing</highlight></codeline>
<codeline lineno="7111"><highlight class="comment">============</highlight></codeline>
<codeline lineno="7112"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::Eigen_SortDecreasing(<sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>&amp;eigenValues<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="7115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="7116"><highlight class="normal"></highlight></codeline>
<codeline lineno="7117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0,<sp/>j;<sp/>i<sp/>&lt;=<sp/>numRows<sp/>-<sp/>2;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="7119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>eigenValues[j];</highlight></codeline>
<codeline lineno="7120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>k<sp/>&lt;<sp/>numRows;<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>eigenValues[k]<sp/>&gt;<sp/>max<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="7123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>eigenValues[j];</highlight></codeline>
<codeline lineno="7124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>!=<sp/>i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigenValues.SwapElements(<sp/>i,<sp/>j<sp/>);</highlight></codeline>
<codeline lineno="7128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwapColumns(<sp/>i,<sp/>j<sp/>);</highlight></codeline>
<codeline lineno="7129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7132"><highlight class="normal"></highlight></codeline>
<codeline lineno="7133"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7134"><highlight class="comment">============</highlight></codeline>
<codeline lineno="7135"><highlight class="comment">idMatX::DeterminantGeneric</highlight></codeline>
<codeline lineno="7136"><highlight class="comment">============</highlight></codeline>
<codeline lineno="7137"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7138"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>idMatX::DeterminantGeneric(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*index;</highlight></codeline>
<codeline lineno="7140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>det;</highlight></codeline>
<codeline lineno="7141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="7142"><highlight class="normal"></highlight></codeline>
<codeline lineno="7143"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numRows<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="7144"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.SetData(<sp/>numRows,<sp/>numColumns,<sp/>MATX_ALLOCA(<sp/>numRows<sp/>*<sp/>numColumns<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="7145"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7146"><highlight class="normal"></highlight></codeline>
<codeline lineno="7147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!tmp.LU_Factor(<sp/>index,<sp/>&amp;det<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0f;</highlight></codeline>
<codeline lineno="7149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7150"><highlight class="normal"></highlight></codeline>
<codeline lineno="7151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>det;</highlight></codeline>
<codeline lineno="7152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7153"><highlight class="normal"></highlight></codeline>
<codeline lineno="7154"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7155"><highlight class="comment">============</highlight></codeline>
<codeline lineno="7156"><highlight class="comment">idMatX::InverseSelfGeneric</highlight></codeline>
<codeline lineno="7157"><highlight class="comment">============</highlight></codeline>
<codeline lineno="7158"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7159"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idMatX::InverseSelfGeneric(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>*index;</highlight></codeline>
<codeline lineno="7161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="7162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>x,<sp/>b;</highlight></codeline>
<codeline lineno="7163"><highlight class="normal"></highlight></codeline>
<codeline lineno="7164"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>numRows<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="7165"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.SetData(<sp/>numRows,<sp/>numColumns,<sp/>MATX_ALLOCA(<sp/>numRows<sp/>*<sp/>numColumns<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="7166"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7167"><highlight class="normal"></highlight></codeline>
<codeline lineno="7168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!tmp.LU_Factor(<sp/>index<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7171"><highlight class="normal"></highlight></codeline>
<codeline lineno="7172"><highlight class="normal"><sp/><sp/><sp/><sp/>x.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="7173"><highlight class="normal"><sp/><sp/><sp/><sp/>b.SetData(<sp/>numRows,<sp/>VECX_ALLOCA(<sp/>numRows<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="7174"><highlight class="normal"><sp/><sp/><sp/><sp/>b.Zero();</highlight></codeline>
<codeline lineno="7175"><highlight class="normal"></highlight></codeline>
<codeline lineno="7176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numRows;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7177"><highlight class="normal"></highlight></codeline>
<codeline lineno="7178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[i]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="7179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp.LU_Solve(<sp/>x,<sp/>b,<sp/>index<sp/>);</highlight></codeline>
<codeline lineno="7180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>numRows;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[j][i]<sp/>=<sp/>x[j];</highlight></codeline>
<codeline lineno="7182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[i]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="7184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7187"><highlight class="normal"></highlight></codeline>
<codeline lineno="7188"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7189"><highlight class="comment">============</highlight></codeline>
<codeline lineno="7190"><highlight class="comment">idMatX::Test</highlight></codeline>
<codeline lineno="7191"><highlight class="comment">============</highlight></codeline>
<codeline lineno="7192"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7193"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idMatX::Test(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat_x" kindref="compound">idMatX</ref><sp/>original,<sp/>m1,<sp/>m2,<sp/>m3,<sp/>q1,<sp/>q2,<sp/>r1,<sp/>r2;</highlight></codeline>
<codeline lineno="7195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec_x" kindref="compound">idVecX</ref><sp/>v,<sp/>w,<sp/>u,<sp/>c,<sp/>d;</highlight></codeline>
<codeline lineno="7196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/>size,<sp/>*index1,<sp/>*index2;</highlight></codeline>
<codeline lineno="7197"><highlight class="normal"></highlight></codeline>
<codeline lineno="7198"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="7199"><highlight class="normal"><sp/><sp/><sp/><sp/>original.Random(<sp/>size,<sp/>size,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7200"><highlight class="normal"><sp/><sp/><sp/><sp/>original<sp/>=<sp/>original<sp/>*<sp/>original.Transpose();</highlight></codeline>
<codeline lineno="7201"><highlight class="normal"></highlight></codeline>
<codeline lineno="7202"><highlight class="normal"><sp/><sp/><sp/><sp/>index1<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>(<sp/>size<sp/>+<sp/>1<sp/>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>index1[0]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="7203"><highlight class="normal"><sp/><sp/><sp/><sp/>index2<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>_alloca16(<sp/>(<sp/>size<sp/>+<sp/>1<sp/>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>index2[0]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="7204"><highlight class="normal"></highlight></codeline>
<codeline lineno="7205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7206"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::LowerTriangularInverse</highlight></codeline>
<codeline lineno="7207"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7208"><highlight class="normal"></highlight></codeline>
<codeline lineno="7209"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7210"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.ClearUpperTriangle();</highlight></codeline>
<codeline lineno="7211"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>m1;</highlight></codeline>
<codeline lineno="7212"><highlight class="normal"></highlight></codeline>
<codeline lineno="7213"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.InverseSelf();</highlight></codeline>
<codeline lineno="7214"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.LowerTriangularInverse();</highlight></codeline>
<codeline lineno="7215"><highlight class="normal"></highlight></codeline>
<codeline lineno="7216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::LowerTriangularInverse<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7219"><highlight class="normal"></highlight></codeline>
<codeline lineno="7220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7221"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::UpperTriangularInverse</highlight></codeline>
<codeline lineno="7222"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7223"><highlight class="normal"></highlight></codeline>
<codeline lineno="7224"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7225"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.ClearLowerTriangle();</highlight></codeline>
<codeline lineno="7226"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>m1;</highlight></codeline>
<codeline lineno="7227"><highlight class="normal"></highlight></codeline>
<codeline lineno="7228"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.InverseSelf();</highlight></codeline>
<codeline lineno="7229"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.UpperTriangularInverse();</highlight></codeline>
<codeline lineno="7230"><highlight class="normal"></highlight></codeline>
<codeline lineno="7231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::UpperTriangularInverse<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7234"><highlight class="normal"></highlight></codeline>
<codeline lineno="7235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::Inverse_GaussJordan</highlight></codeline>
<codeline lineno="7237"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7238"><highlight class="normal"></highlight></codeline>
<codeline lineno="7239"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7240"><highlight class="normal"></highlight></codeline>
<codeline lineno="7241"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.Inverse_GaussJordan();</highlight></codeline>
<codeline lineno="7242"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>*=<sp/>original;</highlight></codeline>
<codeline lineno="7243"><highlight class="normal"></highlight></codeline>
<codeline lineno="7244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.IsIdentity(<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::Inverse_GaussJordan<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7247"><highlight class="normal"></highlight></codeline>
<codeline lineno="7248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::Inverse_UpdateRankOne</highlight></codeline>
<codeline lineno="7250"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7251"><highlight class="normal"></highlight></codeline>
<codeline lineno="7252"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7253"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7254"><highlight class="normal"></highlight></codeline>
<codeline lineno="7255"><highlight class="normal"><sp/><sp/><sp/><sp/>w.Random(<sp/>size,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="7256"><highlight class="normal"><sp/><sp/><sp/><sp/>v.Random(<sp/>size,<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="7257"><highlight class="normal"></highlight></codeline>
<codeline lineno="7258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>invert<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7259"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.Inverse_GaussJordan();</highlight></codeline>
<codeline lineno="7260"><highlight class="normal"></highlight></codeline>
<codeline lineno="7261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>and<sp/>invert<sp/>m2<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7262"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.Update_RankOne(<sp/>v,<sp/>w,<sp/>1.0f<sp/>);</highlight></codeline>
<codeline lineno="7263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m2.Inverse_GaussJordan()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7266"><highlight class="normal"></highlight></codeline>
<codeline lineno="7267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>inverse<sp/>of<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7268"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.Inverse_UpdateRankOne(<sp/>v,<sp/>w,<sp/>1.0f<sp/>);</highlight></codeline>
<codeline lineno="7269"><highlight class="normal"></highlight></codeline>
<codeline lineno="7270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::Inverse_UpdateRankOne<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7273"><highlight class="normal"></highlight></codeline>
<codeline lineno="7274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7275"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::Inverse_UpdateRowColumn</highlight></codeline>
<codeline lineno="7276"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7277"><highlight class="normal"></highlight></codeline>
<codeline lineno="7278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>offset<sp/>=<sp/>0;<sp/>offset<sp/>&lt;<sp/>size;<sp/>offset++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7281"><highlight class="normal"></highlight></codeline>
<codeline lineno="7282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.Random(<sp/>size,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="7283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w.Random(<sp/>size,<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="7284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w[offset]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="7285"><highlight class="normal"></highlight></codeline>
<codeline lineno="7286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>invert<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.Inverse_GaussJordan();</highlight></codeline>
<codeline lineno="7288"><highlight class="normal"></highlight></codeline>
<codeline lineno="7289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>and<sp/>invert<sp/>m2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2.Update_RowColumn(<sp/>v,<sp/>w,<sp/>offset<sp/>);</highlight></codeline>
<codeline lineno="7291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m2.Inverse_GaussJordan()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7294"><highlight class="normal"></highlight></codeline>
<codeline lineno="7295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>inverse<sp/>of<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.Inverse_UpdateRowColumn(<sp/>v,<sp/>w,<sp/>offset<sp/>);</highlight></codeline>
<codeline lineno="7297"><highlight class="normal"></highlight></codeline>
<codeline lineno="7298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-3f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::Inverse_UpdateRowColumn<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7302"><highlight class="normal"></highlight></codeline>
<codeline lineno="7303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7304"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::Inverse_UpdateIncrement</highlight></codeline>
<codeline lineno="7305"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7306"><highlight class="normal"></highlight></codeline>
<codeline lineno="7307"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7308"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7309"><highlight class="normal"></highlight></codeline>
<codeline lineno="7310"><highlight class="normal"><sp/><sp/><sp/><sp/>v.Random(<sp/>size<sp/>+<sp/>1,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="7311"><highlight class="normal"><sp/><sp/><sp/><sp/>w.Random(<sp/>size<sp/>+<sp/>1,<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="7312"><highlight class="normal"><sp/><sp/><sp/><sp/>w[size]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="7313"><highlight class="normal"></highlight></codeline>
<codeline lineno="7314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>invert<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7315"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.Inverse_GaussJordan();</highlight></codeline>
<codeline lineno="7316"><highlight class="normal"></highlight></codeline>
<codeline lineno="7317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>and<sp/>invert<sp/>m2<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7318"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.Update_Increment(<sp/>v,<sp/>w<sp/>);</highlight></codeline>
<codeline lineno="7319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m2.Inverse_GaussJordan()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7322"><highlight class="normal"></highlight></codeline>
<codeline lineno="7323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>inverse<sp/>of<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7324"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.Inverse_UpdateIncrement(<sp/>v,<sp/>w<sp/>);</highlight></codeline>
<codeline lineno="7325"><highlight class="normal"></highlight></codeline>
<codeline lineno="7326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::Inverse_UpdateIncrement<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7329"><highlight class="normal"></highlight></codeline>
<codeline lineno="7330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7331"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::Inverse_UpdateDecrement</highlight></codeline>
<codeline lineno="7332"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7333"><highlight class="normal"></highlight></codeline>
<codeline lineno="7334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>offset<sp/>=<sp/>0;<sp/>offset<sp/>&lt;<sp/>size;<sp/>offset++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7337"><highlight class="normal"></highlight></codeline>
<codeline lineno="7338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.SetSize(<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="7339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w.SetSize(<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="7340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>original[i][offset];</highlight></codeline>
<codeline lineno="7342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w[i]<sp/>=<sp/>original[offset][i];</highlight></codeline>
<codeline lineno="7343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7344"><highlight class="normal"></highlight></codeline>
<codeline lineno="7345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>invert<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.Inverse_GaussJordan();</highlight></codeline>
<codeline lineno="7347"><highlight class="normal"></highlight></codeline>
<codeline lineno="7348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>and<sp/>invert<sp/>m2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2.Update_Decrement(<sp/>offset<sp/>);</highlight></codeline>
<codeline lineno="7350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m2.Inverse_GaussJordan()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7353"><highlight class="normal"></highlight></codeline>
<codeline lineno="7354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>inverse<sp/>of<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.Inverse_UpdateDecrement(<sp/>v,<sp/>w,<sp/>offset<sp/>);</highlight></codeline>
<codeline lineno="7356"><highlight class="normal"></highlight></codeline>
<codeline lineno="7357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-3f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::Inverse_UpdateDecrement<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7361"><highlight class="normal"></highlight></codeline>
<codeline lineno="7362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7363"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::LU_Factor</highlight></codeline>
<codeline lineno="7364"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7365"><highlight class="normal"></highlight></codeline>
<codeline lineno="7366"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7367"><highlight class="normal"></highlight></codeline>
<codeline lineno="7368"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.LU_Factor(<sp/>NULL<sp/>);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>pivoting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7369"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.LU_UnpackFactors(<sp/>m2,<sp/>m3<sp/>);</highlight></codeline>
<codeline lineno="7370"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>m2<sp/>*<sp/>m3;</highlight></codeline>
<codeline lineno="7371"><highlight class="normal"></highlight></codeline>
<codeline lineno="7372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!original.Compare(<sp/>m1,<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::LU_Factor<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7375"><highlight class="normal"></highlight></codeline>
<codeline lineno="7376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7377"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::LU_UpdateRankOne</highlight></codeline>
<codeline lineno="7378"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7379"><highlight class="normal"></highlight></codeline>
<codeline lineno="7380"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7381"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7382"><highlight class="normal"></highlight></codeline>
<codeline lineno="7383"><highlight class="normal"><sp/><sp/><sp/><sp/>w.Random(<sp/>size,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="7384"><highlight class="normal"><sp/><sp/><sp/><sp/>v.Random(<sp/>size,<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="7385"><highlight class="normal"></highlight></codeline>
<codeline lineno="7386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>factor<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7387"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.LU_Factor(<sp/>index1<sp/>);</highlight></codeline>
<codeline lineno="7388"><highlight class="normal"></highlight></codeline>
<codeline lineno="7389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>and<sp/>factor<sp/>m2<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7390"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.Update_RankOne(<sp/>v,<sp/>w,<sp/>1.0f<sp/>);</highlight></codeline>
<codeline lineno="7391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m2.LU_Factor(<sp/>index2<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7394"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.LU_MultiplyFactors(<sp/>m3,<sp/>index2<sp/>);</highlight></codeline>
<codeline lineno="7395"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>m3;</highlight></codeline>
<codeline lineno="7396"><highlight class="normal"></highlight></codeline>
<codeline lineno="7397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>factored<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7398"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.LU_UpdateRankOne(<sp/>v,<sp/>w,<sp/>1.0f,<sp/>index1<sp/>);</highlight></codeline>
<codeline lineno="7399"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.LU_MultiplyFactors(<sp/>m3,<sp/>index1<sp/>);</highlight></codeline>
<codeline lineno="7400"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>m3;</highlight></codeline>
<codeline lineno="7401"><highlight class="normal"></highlight></codeline>
<codeline lineno="7402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::LU_UpdateRankOne<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7405"><highlight class="normal"></highlight></codeline>
<codeline lineno="7406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7407"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::LU_UpdateRowColumn</highlight></codeline>
<codeline lineno="7408"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7409"><highlight class="normal"></highlight></codeline>
<codeline lineno="7410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>offset<sp/>=<sp/>0;<sp/>offset<sp/>&lt;<sp/>size;<sp/>offset++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7413"><highlight class="normal"></highlight></codeline>
<codeline lineno="7414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.Random(<sp/>size,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="7415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w.Random(<sp/>size,<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="7416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w[offset]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="7417"><highlight class="normal"></highlight></codeline>
<codeline lineno="7418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>factor<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.LU_Factor(<sp/>index1<sp/>);</highlight></codeline>
<codeline lineno="7420"><highlight class="normal"></highlight></codeline>
<codeline lineno="7421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>and<sp/>factor<sp/>m2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2.Update_RowColumn(<sp/>v,<sp/>w,<sp/>offset<sp/>);</highlight></codeline>
<codeline lineno="7423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m2.LU_Factor(<sp/>index2<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2.LU_MultiplyFactors(<sp/>m3,<sp/>index2<sp/>);</highlight></codeline>
<codeline lineno="7427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>m3;</highlight></codeline>
<codeline lineno="7428"><highlight class="normal"></highlight></codeline>
<codeline lineno="7429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.LU_UpdateRowColumn(<sp/>v,<sp/>w,<sp/>offset,<sp/>index1<sp/><sp/>);</highlight></codeline>
<codeline lineno="7431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.LU_MultiplyFactors(<sp/>m3,<sp/>index1<sp/>);</highlight></codeline>
<codeline lineno="7432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>m3;</highlight></codeline>
<codeline lineno="7433"><highlight class="normal"></highlight></codeline>
<codeline lineno="7434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-3f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::LU_UpdateRowColumn<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7438"><highlight class="normal"></highlight></codeline>
<codeline lineno="7439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7440"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::LU_UpdateIncrement</highlight></codeline>
<codeline lineno="7441"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7442"><highlight class="normal"></highlight></codeline>
<codeline lineno="7443"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7444"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7445"><highlight class="normal"></highlight></codeline>
<codeline lineno="7446"><highlight class="normal"><sp/><sp/><sp/><sp/>v.Random(<sp/>size<sp/>+<sp/>1,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="7447"><highlight class="normal"><sp/><sp/><sp/><sp/>w.Random(<sp/>size<sp/>+<sp/>1,<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="7448"><highlight class="normal"><sp/><sp/><sp/><sp/>w[size]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="7449"><highlight class="normal"></highlight></codeline>
<codeline lineno="7450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>factor<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7451"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.LU_Factor(<sp/>index1<sp/>);</highlight></codeline>
<codeline lineno="7452"><highlight class="normal"></highlight></codeline>
<codeline lineno="7453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>and<sp/>factor<sp/>m2<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7454"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.Update_Increment(<sp/>v,<sp/>w<sp/>);</highlight></codeline>
<codeline lineno="7455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m2.LU_Factor(<sp/>index2<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7458"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.LU_MultiplyFactors(<sp/>m3,<sp/>index2<sp/>);</highlight></codeline>
<codeline lineno="7459"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>m3;</highlight></codeline>
<codeline lineno="7460"><highlight class="normal"></highlight></codeline>
<codeline lineno="7461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>factored<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7462"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.LU_UpdateIncrement(<sp/>v,<sp/>w,<sp/>index1<sp/>);</highlight></codeline>
<codeline lineno="7463"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.LU_MultiplyFactors(<sp/>m3,<sp/>index1<sp/>);</highlight></codeline>
<codeline lineno="7464"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>m3;</highlight></codeline>
<codeline lineno="7465"><highlight class="normal"></highlight></codeline>
<codeline lineno="7466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::LU_UpdateIncrement<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7469"><highlight class="normal"></highlight></codeline>
<codeline lineno="7470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7471"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::LU_UpdateDecrement</highlight></codeline>
<codeline lineno="7472"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7473"><highlight class="normal"></highlight></codeline>
<codeline lineno="7474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>offset<sp/>=<sp/>0;<sp/>offset<sp/>&lt;<sp/>size;<sp/>offset++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7477"><highlight class="normal"></highlight></codeline>
<codeline lineno="7478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.SetSize(<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="7479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w.SetSize(<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="7480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>original[i][offset];</highlight></codeline>
<codeline lineno="7482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w[i]<sp/>=<sp/>original[offset][i];</highlight></codeline>
<codeline lineno="7483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7484"><highlight class="normal"></highlight></codeline>
<codeline lineno="7485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>factor<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.LU_Factor(<sp/>index1<sp/>);</highlight></codeline>
<codeline lineno="7487"><highlight class="normal"></highlight></codeline>
<codeline lineno="7488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>and<sp/>factor<sp/>m2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2.Update_Decrement(<sp/>offset<sp/>);</highlight></codeline>
<codeline lineno="7490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m2.LU_Factor(<sp/>index2<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2.LU_MultiplyFactors(<sp/>m3,<sp/>index2<sp/>);</highlight></codeline>
<codeline lineno="7494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>m3;</highlight></codeline>
<codeline lineno="7495"><highlight class="normal"></highlight></codeline>
<codeline lineno="7496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u.SetSize(<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="7497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u[i]<sp/>=<sp/>original[index1[offset]][i];</highlight></codeline>
<codeline lineno="7499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7500"><highlight class="normal"></highlight></codeline>
<codeline lineno="7501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>factors<sp/>of<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.LU_UpdateDecrement(<sp/>v,<sp/>w,<sp/>u,<sp/>offset,<sp/>index1<sp/>);</highlight></codeline>
<codeline lineno="7503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.LU_MultiplyFactors(<sp/>m3,<sp/>index1<sp/>);</highlight></codeline>
<codeline lineno="7504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>m3;</highlight></codeline>
<codeline lineno="7505"><highlight class="normal"></highlight></codeline>
<codeline lineno="7506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-3f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::LU_UpdateDecrement<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7510"><highlight class="normal"></highlight></codeline>
<codeline lineno="7511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7512"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::LU_Inverse</highlight></codeline>
<codeline lineno="7513"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7514"><highlight class="normal"></highlight></codeline>
<codeline lineno="7515"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7516"><highlight class="normal"></highlight></codeline>
<codeline lineno="7517"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.LU_Factor(<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="7518"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.LU_Inverse(<sp/>m1,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="7519"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>*=<sp/>original;</highlight></codeline>
<codeline lineno="7520"><highlight class="normal"></highlight></codeline>
<codeline lineno="7521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.IsIdentity(<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::LU_Inverse<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7524"><highlight class="normal"></highlight></codeline>
<codeline lineno="7525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7526"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::QR_Factor</highlight></codeline>
<codeline lineno="7527"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7528"><highlight class="normal"></highlight></codeline>
<codeline lineno="7529"><highlight class="normal"><sp/><sp/><sp/><sp/>c.SetSize(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="7530"><highlight class="normal"><sp/><sp/><sp/><sp/>d.SetSize(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="7531"><highlight class="normal"></highlight></codeline>
<codeline lineno="7532"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7533"><highlight class="normal"></highlight></codeline>
<codeline lineno="7534"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.QR_Factor(<sp/>c,<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="7535"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.QR_UnpackFactors(<sp/>q1,<sp/>r1,<sp/>c,<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="7536"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>q1<sp/>*<sp/>r1;</highlight></codeline>
<codeline lineno="7537"><highlight class="normal"></highlight></codeline>
<codeline lineno="7538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!original.Compare(<sp/>m1,<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::QR_Factor<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7540"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7541"><highlight class="normal"></highlight></codeline>
<codeline lineno="7542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7543"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::QR_UpdateRankOne</highlight></codeline>
<codeline lineno="7544"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7545"><highlight class="normal"></highlight></codeline>
<codeline lineno="7546"><highlight class="normal"><sp/><sp/><sp/><sp/>c.SetSize(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="7547"><highlight class="normal"><sp/><sp/><sp/><sp/>d.SetSize(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="7548"><highlight class="normal"></highlight></codeline>
<codeline lineno="7549"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7550"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7551"><highlight class="normal"></highlight></codeline>
<codeline lineno="7552"><highlight class="normal"><sp/><sp/><sp/><sp/>w.Random(<sp/>size,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7553"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>w;</highlight></codeline>
<codeline lineno="7554"><highlight class="normal"></highlight></codeline>
<codeline lineno="7555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>factor<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7556"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.QR_Factor(<sp/>c,<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="7557"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.QR_UnpackFactors(<sp/>q1,<sp/>r1,<sp/>c,<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="7558"><highlight class="normal"></highlight></codeline>
<codeline lineno="7559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>and<sp/>factor<sp/>m2<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7560"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.Update_RankOne(<sp/>v,<sp/>w,<sp/>1.0f<sp/>);</highlight></codeline>
<codeline lineno="7561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m2.QR_Factor(<sp/>c,<sp/>d<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7564"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.QR_UnpackFactors(<sp/>q2,<sp/>r2,<sp/>c,<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="7565"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>q2<sp/>*<sp/>r2;</highlight></codeline>
<codeline lineno="7566"><highlight class="normal"></highlight></codeline>
<codeline lineno="7567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>factored<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7568"><highlight class="normal"><sp/><sp/><sp/><sp/>q1.QR_UpdateRankOne(<sp/>r1,<sp/>v,<sp/>w,<sp/>1.0f<sp/>);</highlight></codeline>
<codeline lineno="7569"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>q1<sp/>*<sp/>r1;</highlight></codeline>
<codeline lineno="7570"><highlight class="normal"></highlight></codeline>
<codeline lineno="7571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::QR_UpdateRankOne<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7573"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7574"><highlight class="normal"></highlight></codeline>
<codeline lineno="7575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7576"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::QR_UpdateRowColumn</highlight></codeline>
<codeline lineno="7577"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7578"><highlight class="normal"></highlight></codeline>
<codeline lineno="7579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>offset<sp/>=<sp/>0;<sp/>offset<sp/>&lt;<sp/>size;<sp/>offset++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.SetSize(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="7581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.SetSize(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="7582"><highlight class="normal"></highlight></codeline>
<codeline lineno="7583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7585"><highlight class="normal"></highlight></codeline>
<codeline lineno="7586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.Random(<sp/>size,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="7587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w.Random(<sp/>size,<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="7588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w[offset]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="7589"><highlight class="normal"></highlight></codeline>
<codeline lineno="7590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>factor<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.QR_Factor(<sp/>c,<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="7592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.QR_UnpackFactors(<sp/>q1,<sp/>r1,<sp/>c,<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="7593"><highlight class="normal"></highlight></codeline>
<codeline lineno="7594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>and<sp/>factor<sp/>m2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2.Update_RowColumn(<sp/>v,<sp/>w,<sp/>offset<sp/>);</highlight></codeline>
<codeline lineno="7596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m2.QR_Factor(<sp/>c,<sp/>d<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2.QR_UnpackFactors(<sp/>q2,<sp/>r2,<sp/>c,<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="7600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>q2<sp/>*<sp/>r2;</highlight></codeline>
<codeline lineno="7601"><highlight class="normal"></highlight></codeline>
<codeline lineno="7602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q1.QR_UpdateRowColumn(<sp/>r1,<sp/>v,<sp/>w,<sp/>offset<sp/>);</highlight></codeline>
<codeline lineno="7604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>q1<sp/>*<sp/>r1;</highlight></codeline>
<codeline lineno="7605"><highlight class="normal"></highlight></codeline>
<codeline lineno="7606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-3f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::QR_UpdateRowColumn<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7610"><highlight class="normal"></highlight></codeline>
<codeline lineno="7611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7612"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::QR_UpdateIncrement</highlight></codeline>
<codeline lineno="7613"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7614"><highlight class="normal"></highlight></codeline>
<codeline lineno="7615"><highlight class="normal"><sp/><sp/><sp/><sp/>c.SetSize(<sp/>size+1<sp/>);</highlight></codeline>
<codeline lineno="7616"><highlight class="normal"><sp/><sp/><sp/><sp/>d.SetSize(<sp/>size+1<sp/>);</highlight></codeline>
<codeline lineno="7617"><highlight class="normal"></highlight></codeline>
<codeline lineno="7618"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7619"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7620"><highlight class="normal"></highlight></codeline>
<codeline lineno="7621"><highlight class="normal"><sp/><sp/><sp/><sp/>v.Random(<sp/>size<sp/>+<sp/>1,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="7622"><highlight class="normal"><sp/><sp/><sp/><sp/>w.Random(<sp/>size<sp/>+<sp/>1,<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="7623"><highlight class="normal"><sp/><sp/><sp/><sp/>w[size]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="7624"><highlight class="normal"></highlight></codeline>
<codeline lineno="7625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>factor<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7626"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.QR_Factor(<sp/>c,<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="7627"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.QR_UnpackFactors(<sp/>q1,<sp/>r1,<sp/>c,<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="7628"><highlight class="normal"></highlight></codeline>
<codeline lineno="7629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>and<sp/>factor<sp/>m2<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7630"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.Update_Increment(<sp/>v,<sp/>w<sp/>);</highlight></codeline>
<codeline lineno="7631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m2.QR_Factor(<sp/>c,<sp/>d<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7634"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.QR_UnpackFactors(<sp/>q2,<sp/>r2,<sp/>c,<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="7635"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>q2<sp/>*<sp/>r2;</highlight></codeline>
<codeline lineno="7636"><highlight class="normal"></highlight></codeline>
<codeline lineno="7637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>factored<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7638"><highlight class="normal"><sp/><sp/><sp/><sp/>q1.QR_UpdateIncrement(<sp/>r1,<sp/>v,<sp/>w<sp/>);</highlight></codeline>
<codeline lineno="7639"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>q1<sp/>*<sp/>r1;</highlight></codeline>
<codeline lineno="7640"><highlight class="normal"></highlight></codeline>
<codeline lineno="7641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::QR_UpdateIncrement<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7643"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7644"><highlight class="normal"></highlight></codeline>
<codeline lineno="7645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7646"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::QR_UpdateDecrement</highlight></codeline>
<codeline lineno="7647"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7648"><highlight class="normal"></highlight></codeline>
<codeline lineno="7649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>offset<sp/>=<sp/>0;<sp/>offset<sp/>&lt;<sp/>size;<sp/>offset++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.SetSize(<sp/>size+1<sp/>);</highlight></codeline>
<codeline lineno="7651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.SetSize(<sp/>size+1<sp/>);</highlight></codeline>
<codeline lineno="7652"><highlight class="normal"></highlight></codeline>
<codeline lineno="7653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7655"><highlight class="normal"></highlight></codeline>
<codeline lineno="7656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.SetSize(<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="7657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w.SetSize(<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="7658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>original[i][offset];</highlight></codeline>
<codeline lineno="7660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w[i]<sp/>=<sp/>original[offset][i];</highlight></codeline>
<codeline lineno="7661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7662"><highlight class="normal"></highlight></codeline>
<codeline lineno="7663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>factor<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.QR_Factor(<sp/>c,<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="7665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.QR_UnpackFactors(<sp/>q1,<sp/>r1,<sp/>c,<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="7666"><highlight class="normal"></highlight></codeline>
<codeline lineno="7667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>and<sp/>factor<sp/>m2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2.Update_Decrement(<sp/>offset<sp/>);</highlight></codeline>
<codeline lineno="7669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m2.QR_Factor(<sp/>c,<sp/>d<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2.QR_UnpackFactors(<sp/>q2,<sp/>r2,<sp/>c,<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="7673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>q2<sp/>*<sp/>r2;</highlight></codeline>
<codeline lineno="7674"><highlight class="normal"></highlight></codeline>
<codeline lineno="7675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>factors<sp/>of<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q1.QR_UpdateDecrement(<sp/>r1,<sp/>v,<sp/>w,<sp/>offset<sp/>);</highlight></codeline>
<codeline lineno="7677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>q1<sp/>*<sp/>r1;</highlight></codeline>
<codeline lineno="7678"><highlight class="normal"></highlight></codeline>
<codeline lineno="7679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-3f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::QR_UpdateDecrement<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7682"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7683"><highlight class="normal"></highlight></codeline>
<codeline lineno="7684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7685"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::QR_Inverse</highlight></codeline>
<codeline lineno="7686"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7687"><highlight class="normal"></highlight></codeline>
<codeline lineno="7688"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7689"><highlight class="normal"></highlight></codeline>
<codeline lineno="7690"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.QR_Factor(<sp/>c,<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="7691"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.QR_Inverse(<sp/>m1,<sp/>c,<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="7692"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>*=<sp/>original;</highlight></codeline>
<codeline lineno="7693"><highlight class="normal"></highlight></codeline>
<codeline lineno="7694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.IsIdentity(<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::QR_Inverse<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7697"><highlight class="normal"></highlight></codeline>
<codeline lineno="7698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7699"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::SVD_Factor</highlight></codeline>
<codeline lineno="7700"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7701"><highlight class="normal"></highlight></codeline>
<codeline lineno="7702"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7703"><highlight class="normal"><sp/><sp/><sp/><sp/>m3.Zero(<sp/>size,<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="7704"><highlight class="normal"><sp/><sp/><sp/><sp/>w.Zero(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="7705"><highlight class="normal"></highlight></codeline>
<codeline lineno="7706"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.SVD_Factor(<sp/>w,<sp/>m3<sp/>);</highlight></codeline>
<codeline lineno="7707"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.Diag(<sp/>w<sp/>);</highlight></codeline>
<codeline lineno="7708"><highlight class="normal"><sp/><sp/><sp/><sp/>m3.TransposeSelf();</highlight></codeline>
<codeline lineno="7709"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>m1<sp/>*<sp/>m2<sp/>*<sp/>m3;</highlight></codeline>
<codeline lineno="7710"><highlight class="normal"></highlight></codeline>
<codeline lineno="7711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!original.Compare(<sp/>m1,<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::SVD_Factor<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7713"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7714"><highlight class="normal"></highlight></codeline>
<codeline lineno="7715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7716"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::SVD_Inverse</highlight></codeline>
<codeline lineno="7717"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7718"><highlight class="normal"></highlight></codeline>
<codeline lineno="7719"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7720"><highlight class="normal"></highlight></codeline>
<codeline lineno="7721"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.SVD_Factor(<sp/>w,<sp/>m3<sp/>);</highlight></codeline>
<codeline lineno="7722"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.SVD_Inverse(<sp/>m1,<sp/>w,<sp/>m3<sp/>);</highlight></codeline>
<codeline lineno="7723"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>*=<sp/>original;</highlight></codeline>
<codeline lineno="7724"><highlight class="normal"></highlight></codeline>
<codeline lineno="7725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.IsIdentity(<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::SVD_Inverse<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7727"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7728"><highlight class="normal"></highlight></codeline>
<codeline lineno="7729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7730"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::Cholesky_Factor</highlight></codeline>
<codeline lineno="7731"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7732"><highlight class="normal"></highlight></codeline>
<codeline lineno="7733"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7734"><highlight class="normal"></highlight></codeline>
<codeline lineno="7735"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.Cholesky_Factor();</highlight></codeline>
<codeline lineno="7736"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.Cholesky_MultiplyFactors(<sp/>m2<sp/>);</highlight></codeline>
<codeline lineno="7737"><highlight class="normal"></highlight></codeline>
<codeline lineno="7738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!original.Compare(<sp/>m2,<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::Cholesky_Factor<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7740"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7741"><highlight class="normal"></highlight></codeline>
<codeline lineno="7742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7743"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::Cholesky_UpdateRankOne</highlight></codeline>
<codeline lineno="7744"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7745"><highlight class="normal"></highlight></codeline>
<codeline lineno="7746"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7747"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7748"><highlight class="normal"></highlight></codeline>
<codeline lineno="7749"><highlight class="normal"><sp/><sp/><sp/><sp/>w.Random(<sp/>size,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7750"><highlight class="normal"></highlight></codeline>
<codeline lineno="7751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>factor<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7752"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.Cholesky_Factor();</highlight></codeline>
<codeline lineno="7753"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.ClearUpperTriangle();</highlight></codeline>
<codeline lineno="7754"><highlight class="normal"></highlight></codeline>
<codeline lineno="7755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>and<sp/>factor<sp/>m2<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7756"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.Update_RankOneSymmetric(<sp/>w,<sp/>1.0f<sp/>);</highlight></codeline>
<codeline lineno="7757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m2.Cholesky_Factor()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7759"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7760"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.ClearUpperTriangle();</highlight></codeline>
<codeline lineno="7761"><highlight class="normal"></highlight></codeline>
<codeline lineno="7762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>factored<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7763"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.Cholesky_UpdateRankOne(<sp/>w,<sp/>1.0f,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7764"><highlight class="normal"></highlight></codeline>
<codeline lineno="7765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::Cholesky_UpdateRankOne<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7768"><highlight class="normal"></highlight></codeline>
<codeline lineno="7769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7770"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::Cholesky_UpdateRowColumn</highlight></codeline>
<codeline lineno="7771"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7772"><highlight class="normal"></highlight></codeline>
<codeline lineno="7773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>offset<sp/>=<sp/>0;<sp/>offset<sp/>&lt;<sp/>size;<sp/>offset++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7776"><highlight class="normal"></highlight></codeline>
<codeline lineno="7777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>factor<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.Cholesky_Factor();</highlight></codeline>
<codeline lineno="7779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.ClearUpperTriangle();</highlight></codeline>
<codeline lineno="7780"><highlight class="normal"></highlight></codeline>
<codeline lineno="7781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pdtable[]<sp/>=<sp/>{<sp/>1,<sp/>0,<sp/>1,<sp/>0,<sp/>0,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="7782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w.Random(<sp/>size,<sp/>pdtable[offset]<sp/>);</highlight></codeline>
<codeline lineno="7783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>*=<sp/>0.1f;</highlight></codeline>
<codeline lineno="7784"><highlight class="normal"></highlight></codeline>
<codeline lineno="7785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>and<sp/>factor<sp/>m2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2.Update_RowColumnSymmetric(<sp/>w,<sp/>offset<sp/>);</highlight></codeline>
<codeline lineno="7787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m2.Cholesky_Factor()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2.ClearUpperTriangle();</highlight></codeline>
<codeline lineno="7791"><highlight class="normal"></highlight></codeline>
<codeline lineno="7792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.Cholesky_UpdateRowColumn(<sp/>w,<sp/>offset<sp/>);</highlight></codeline>
<codeline lineno="7794"><highlight class="normal"></highlight></codeline>
<codeline lineno="7795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-3f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::Cholesky_UpdateRowColumn<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7798"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7799"><highlight class="normal"></highlight></codeline>
<codeline lineno="7800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7801"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::Cholesky_UpdateIncrement</highlight></codeline>
<codeline lineno="7802"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7803"><highlight class="normal"></highlight></codeline>
<codeline lineno="7804"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.Random(<sp/>size<sp/>+<sp/>1,<sp/>size<sp/>+<sp/>1,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7805"><highlight class="normal"><sp/><sp/><sp/><sp/>m3<sp/>=<sp/>m1<sp/>*<sp/>m1.Transpose();</highlight></codeline>
<codeline lineno="7806"><highlight class="normal"></highlight></codeline>
<codeline lineno="7807"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.SquareSubMatrix(<sp/>m3,<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="7808"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>m1;</highlight></codeline>
<codeline lineno="7809"><highlight class="normal"></highlight></codeline>
<codeline lineno="7810"><highlight class="normal"><sp/><sp/><sp/><sp/>w.SetSize(<sp/>size<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="7811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size<sp/>+<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w[i]<sp/>=<sp/>m3[size][i];</highlight></codeline>
<codeline lineno="7813"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7814"><highlight class="normal"></highlight></codeline>
<codeline lineno="7815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>factor<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7816"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.Cholesky_Factor();</highlight></codeline>
<codeline lineno="7817"><highlight class="normal"></highlight></codeline>
<codeline lineno="7818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>and<sp/>factor<sp/>m2<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7819"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.Update_IncrementSymmetric(<sp/>w<sp/>);</highlight></codeline>
<codeline lineno="7820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m2.Cholesky_Factor()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7822"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7823"><highlight class="normal"></highlight></codeline>
<codeline lineno="7824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>factored<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7825"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.Cholesky_UpdateIncrement(<sp/>w<sp/>);</highlight></codeline>
<codeline lineno="7826"><highlight class="normal"></highlight></codeline>
<codeline lineno="7827"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.ClearUpperTriangle();</highlight></codeline>
<codeline lineno="7828"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.ClearUpperTriangle();</highlight></codeline>
<codeline lineno="7829"><highlight class="normal"></highlight></codeline>
<codeline lineno="7830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::Cholesky_UpdateIncrement<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7832"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7833"><highlight class="normal"></highlight></codeline>
<codeline lineno="7834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7835"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::Cholesky_UpdateDecrement</highlight></codeline>
<codeline lineno="7836"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7837"><highlight class="normal"></highlight></codeline>
<codeline lineno="7838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>offset<sp/>=<sp/>0;<sp/>offset<sp/>&lt;<sp/>size;<sp/>offset<sp/>+=<sp/>size<sp/>-<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7841"><highlight class="normal"></highlight></codeline>
<codeline lineno="7842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.SetSize(<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="7843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>original[i][offset];</highlight></codeline>
<codeline lineno="7845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7846"><highlight class="normal"></highlight></codeline>
<codeline lineno="7847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>factor<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.Cholesky_Factor();</highlight></codeline>
<codeline lineno="7849"><highlight class="normal"></highlight></codeline>
<codeline lineno="7850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>and<sp/>factor<sp/>m2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2.Update_Decrement(<sp/>offset<sp/>);</highlight></codeline>
<codeline lineno="7852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m2.Cholesky_Factor()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7855"><highlight class="normal"></highlight></codeline>
<codeline lineno="7856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>factors<sp/>of<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.Cholesky_UpdateDecrement(<sp/>v,<sp/>offset<sp/>);</highlight></codeline>
<codeline lineno="7858"><highlight class="normal"></highlight></codeline>
<codeline lineno="7859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-3f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::Cholesky_UpdateDecrement<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7862"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7863"><highlight class="normal"></highlight></codeline>
<codeline lineno="7864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7865"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::Cholesky_Inverse</highlight></codeline>
<codeline lineno="7866"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7867"><highlight class="normal"></highlight></codeline>
<codeline lineno="7868"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7869"><highlight class="normal"></highlight></codeline>
<codeline lineno="7870"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.Cholesky_Factor();</highlight></codeline>
<codeline lineno="7871"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.Cholesky_Inverse(<sp/>m1<sp/>);</highlight></codeline>
<codeline lineno="7872"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>*=<sp/>original;</highlight></codeline>
<codeline lineno="7873"><highlight class="normal"></highlight></codeline>
<codeline lineno="7874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.IsIdentity(<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::Cholesky_Inverse<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7876"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7877"><highlight class="normal"></highlight></codeline>
<codeline lineno="7878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7879"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::LDLT_Factor</highlight></codeline>
<codeline lineno="7880"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7881"><highlight class="normal"></highlight></codeline>
<codeline lineno="7882"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7883"><highlight class="normal"></highlight></codeline>
<codeline lineno="7884"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.LDLT_Factor();</highlight></codeline>
<codeline lineno="7885"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.LDLT_MultiplyFactors(<sp/>m2<sp/>);</highlight></codeline>
<codeline lineno="7886"><highlight class="normal"></highlight></codeline>
<codeline lineno="7887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!original.Compare(<sp/>m2,<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::LDLT_Factor<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7889"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7890"><highlight class="normal"></highlight></codeline>
<codeline lineno="7891"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.LDLT_UnpackFactors(<sp/>m2,<sp/>m3<sp/>);</highlight></codeline>
<codeline lineno="7892"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>m2<sp/>*<sp/>m3<sp/>*<sp/>m2.Transpose();</highlight></codeline>
<codeline lineno="7893"><highlight class="normal"></highlight></codeline>
<codeline lineno="7894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!original.Compare(<sp/>m2,<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::LDLT_Factor<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7896"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7897"><highlight class="normal"></highlight></codeline>
<codeline lineno="7898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7899"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::LDLT_UpdateRankOne</highlight></codeline>
<codeline lineno="7900"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7901"><highlight class="normal"></highlight></codeline>
<codeline lineno="7902"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7903"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7904"><highlight class="normal"></highlight></codeline>
<codeline lineno="7905"><highlight class="normal"><sp/><sp/><sp/><sp/>w.Random(<sp/>size,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7906"><highlight class="normal"></highlight></codeline>
<codeline lineno="7907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>factor<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7908"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.LDLT_Factor();</highlight></codeline>
<codeline lineno="7909"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.ClearUpperTriangle();</highlight></codeline>
<codeline lineno="7910"><highlight class="normal"></highlight></codeline>
<codeline lineno="7911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>and<sp/>factor<sp/>m2<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7912"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.Update_RankOneSymmetric(<sp/>w,<sp/>1.0f<sp/>);</highlight></codeline>
<codeline lineno="7913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m2.LDLT_Factor()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7915"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7916"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.ClearUpperTriangle();</highlight></codeline>
<codeline lineno="7917"><highlight class="normal"></highlight></codeline>
<codeline lineno="7918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>factored<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7919"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.LDLT_UpdateRankOne(<sp/>w,<sp/>1.0f,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7920"><highlight class="normal"></highlight></codeline>
<codeline lineno="7921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::LDLT_UpdateRankOne<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7923"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7924"><highlight class="normal"></highlight></codeline>
<codeline lineno="7925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7926"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::LDLT_UpdateRowColumn</highlight></codeline>
<codeline lineno="7927"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7928"><highlight class="normal"></highlight></codeline>
<codeline lineno="7929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>offset<sp/>=<sp/>0;<sp/>offset<sp/>&lt;<sp/>size;<sp/>offset++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7932"><highlight class="normal"></highlight></codeline>
<codeline lineno="7933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w.Random(<sp/>size,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7934"><highlight class="normal"></highlight></codeline>
<codeline lineno="7935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>factor<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.LDLT_Factor();</highlight></codeline>
<codeline lineno="7937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.ClearUpperTriangle();</highlight></codeline>
<codeline lineno="7938"><highlight class="normal"></highlight></codeline>
<codeline lineno="7939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>and<sp/>factor<sp/>m2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2.Update_RowColumnSymmetric(<sp/>w,<sp/>offset<sp/>);</highlight></codeline>
<codeline lineno="7941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m2.LDLT_Factor()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2.ClearUpperTriangle();</highlight></codeline>
<codeline lineno="7945"><highlight class="normal"></highlight></codeline>
<codeline lineno="7946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.LDLT_UpdateRowColumn(<sp/>w,<sp/>offset<sp/>);</highlight></codeline>
<codeline lineno="7948"><highlight class="normal"></highlight></codeline>
<codeline lineno="7949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-3f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::LDLT_UpdateRowColumn<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7952"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7953"><highlight class="normal"></highlight></codeline>
<codeline lineno="7954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7955"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::LDLT_UpdateIncrement</highlight></codeline>
<codeline lineno="7956"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7957"><highlight class="normal"></highlight></codeline>
<codeline lineno="7958"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.Random(<sp/>size<sp/>+<sp/>1,<sp/>size<sp/>+<sp/>1,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7959"><highlight class="normal"><sp/><sp/><sp/><sp/>m3<sp/>=<sp/>m1<sp/>*<sp/>m1.Transpose();</highlight></codeline>
<codeline lineno="7960"><highlight class="normal"></highlight></codeline>
<codeline lineno="7961"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.SquareSubMatrix(<sp/>m3,<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="7962"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>m1;</highlight></codeline>
<codeline lineno="7963"><highlight class="normal"></highlight></codeline>
<codeline lineno="7964"><highlight class="normal"><sp/><sp/><sp/><sp/>w.SetSize(<sp/>size<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="7965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size<sp/>+<sp/>1;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w[i]<sp/>=<sp/>m3[size][i];</highlight></codeline>
<codeline lineno="7967"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7968"><highlight class="normal"></highlight></codeline>
<codeline lineno="7969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>factor<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7970"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.LDLT_Factor();</highlight></codeline>
<codeline lineno="7971"><highlight class="normal"></highlight></codeline>
<codeline lineno="7972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>and<sp/>factor<sp/>m2<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7973"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.Update_IncrementSymmetric(<sp/>w<sp/>);</highlight></codeline>
<codeline lineno="7974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m2.LDLT_Factor()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7976"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7977"><highlight class="normal"></highlight></codeline>
<codeline lineno="7978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>factored<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7979"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.LDLT_UpdateIncrement(<sp/>w<sp/>);</highlight></codeline>
<codeline lineno="7980"><highlight class="normal"></highlight></codeline>
<codeline lineno="7981"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.ClearUpperTriangle();</highlight></codeline>
<codeline lineno="7982"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.ClearUpperTriangle();</highlight></codeline>
<codeline lineno="7983"><highlight class="normal"></highlight></codeline>
<codeline lineno="7984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::LDLT_UpdateIncrement<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="7986"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7987"><highlight class="normal"></highlight></codeline>
<codeline lineno="7988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7989"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::LDLT_UpdateDecrement</highlight></codeline>
<codeline lineno="7990"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7991"><highlight class="normal"></highlight></codeline>
<codeline lineno="7992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>offset<sp/>=<sp/>0;<sp/>offset<sp/>&lt;<sp/>size;<sp/>offset++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="7995"><highlight class="normal"></highlight></codeline>
<codeline lineno="7996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.SetSize(<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="7997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>original[i][offset];</highlight></codeline>
<codeline lineno="7999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8000"><highlight class="normal"></highlight></codeline>
<codeline lineno="8001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>factor<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.LDLT_Factor();</highlight></codeline>
<codeline lineno="8003"><highlight class="normal"></highlight></codeline>
<codeline lineno="8004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modify<sp/>and<sp/>factor<sp/>m2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2.Update_Decrement(<sp/>offset<sp/>);</highlight></codeline>
<codeline lineno="8006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m2.LDLT_Factor()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="8008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8009"><highlight class="normal"></highlight></codeline>
<codeline lineno="8010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>factors<sp/>of<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1.LDLT_UpdateDecrement(<sp/>v,<sp/>offset<sp/>);</highlight></codeline>
<codeline lineno="8012"><highlight class="normal"></highlight></codeline>
<codeline lineno="8013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-3f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::LDLT_UpdateDecrement<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="8015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8016"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8017"><highlight class="normal"></highlight></codeline>
<codeline lineno="8018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="8019"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::LDLT_Inverse</highlight></codeline>
<codeline lineno="8020"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8021"><highlight class="normal"></highlight></codeline>
<codeline lineno="8022"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="8023"><highlight class="normal"></highlight></codeline>
<codeline lineno="8024"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.LDLT_Factor();</highlight></codeline>
<codeline lineno="8025"><highlight class="normal"><sp/><sp/><sp/><sp/>m2.LDLT_Inverse(<sp/>m1<sp/>);</highlight></codeline>
<codeline lineno="8026"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>*=<sp/>original;</highlight></codeline>
<codeline lineno="8027"><highlight class="normal"></highlight></codeline>
<codeline lineno="8028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.IsIdentity(<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::LDLT_Inverse<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="8030"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8031"><highlight class="normal"></highlight></codeline>
<codeline lineno="8032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="8033"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::Eigen_SolveSymmetricTriDiagonal</highlight></codeline>
<codeline lineno="8034"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8035"><highlight class="normal"></highlight></codeline>
<codeline lineno="8036"><highlight class="normal"><sp/><sp/><sp/><sp/>m3<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="8037"><highlight class="normal"><sp/><sp/><sp/><sp/>m3.TriDiagonal_ClearTriangles();</highlight></codeline>
<codeline lineno="8038"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>m3;</highlight></codeline>
<codeline lineno="8039"><highlight class="normal"></highlight></codeline>
<codeline lineno="8040"><highlight class="normal"><sp/><sp/><sp/><sp/>v.SetSize(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="8041"><highlight class="normal"></highlight></codeline>
<codeline lineno="8042"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.Eigen_SolveSymmetricTriDiagonal(<sp/>v<sp/>);</highlight></codeline>
<codeline lineno="8043"><highlight class="normal"></highlight></codeline>
<codeline lineno="8044"><highlight class="normal"><sp/><sp/><sp/><sp/>m3.TransposeMultiply(<sp/>m2,<sp/>m1<sp/>);</highlight></codeline>
<codeline lineno="8045"><highlight class="normal"></highlight></codeline>
<codeline lineno="8046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>size;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1[i][j]<sp/>*=<sp/>v[j];</highlight></codeline>
<codeline lineno="8049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8050"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8051"><highlight class="normal"></highlight></codeline>
<codeline lineno="8052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::Eigen_SolveSymmetricTriDiagonal<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="8054"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8055"><highlight class="normal"></highlight></codeline>
<codeline lineno="8056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="8057"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::Eigen_SolveSymmetric</highlight></codeline>
<codeline lineno="8058"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8059"><highlight class="normal"></highlight></codeline>
<codeline lineno="8060"><highlight class="normal"><sp/><sp/><sp/><sp/>m3<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="8061"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>m3;</highlight></codeline>
<codeline lineno="8062"><highlight class="normal"></highlight></codeline>
<codeline lineno="8063"><highlight class="normal"><sp/><sp/><sp/><sp/>v.SetSize(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="8064"><highlight class="normal"></highlight></codeline>
<codeline lineno="8065"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.Eigen_SolveSymmetric(<sp/>v<sp/>);</highlight></codeline>
<codeline lineno="8066"><highlight class="normal"></highlight></codeline>
<codeline lineno="8067"><highlight class="normal"><sp/><sp/><sp/><sp/>m3.TransposeMultiply(<sp/>m2,<sp/>m1<sp/>);</highlight></codeline>
<codeline lineno="8068"><highlight class="normal"></highlight></codeline>
<codeline lineno="8069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>size;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1[i][j]<sp/>*=<sp/>v[j];</highlight></codeline>
<codeline lineno="8072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8073"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8074"><highlight class="normal"></highlight></codeline>
<codeline lineno="8075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::Eigen_SolveSymmetric<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="8077"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8078"><highlight class="normal"></highlight></codeline>
<codeline lineno="8079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="8080"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idMatX::Eigen_Solve</highlight></codeline>
<codeline lineno="8081"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8082"><highlight class="normal"></highlight></codeline>
<codeline lineno="8083"><highlight class="normal"><sp/><sp/><sp/><sp/>m3<sp/>=<sp/>original;</highlight></codeline>
<codeline lineno="8084"><highlight class="normal"><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>m3;</highlight></codeline>
<codeline lineno="8085"><highlight class="normal"></highlight></codeline>
<codeline lineno="8086"><highlight class="normal"><sp/><sp/><sp/><sp/>v.SetSize(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="8087"><highlight class="normal"><sp/><sp/><sp/><sp/>w.SetSize(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="8088"><highlight class="normal"></highlight></codeline>
<codeline lineno="8089"><highlight class="normal"><sp/><sp/><sp/><sp/>m1.Eigen_Solve(<sp/>v,<sp/>w<sp/>);</highlight></codeline>
<codeline lineno="8090"><highlight class="normal"></highlight></codeline>
<codeline lineno="8091"><highlight class="normal"><sp/><sp/><sp/><sp/>m3.TransposeMultiply(<sp/>m2,<sp/>m1<sp/>);</highlight></codeline>
<codeline lineno="8092"><highlight class="normal"></highlight></codeline>
<codeline lineno="8093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>size;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1[i][j]<sp/>*=<sp/>v[j];</highlight></codeline>
<codeline lineno="8096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8097"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8098"><highlight class="normal"></highlight></codeline>
<codeline lineno="8099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m1.Compare(<sp/>m2,<sp/>1e-4f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idLib::common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;idMatX::Eigen_Solve<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="8101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8102"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp"/>
  </compounddef>
</doxygen>
