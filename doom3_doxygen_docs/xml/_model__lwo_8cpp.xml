<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_model__lwo_8cpp" kind="file">
    <compoundname>Model_lwo.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../idlib/precompiled.h</includes>
    <includes refid="_model__lwo_8h" local="yes">Model_lwo.h</includes>
      <sectiondef kind="define">
      <memberdef kind="define" id="_model__lwo_8cpp_1a8b73600a045e8a13979a2d207f2b001f" prot="public" static="no">
        <name>FLEN_ERROR</name>
        <initializer>-9999</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="998" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="998" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1a42af05a27f51a6e0fa3b29bd4d2a3350" prot="public" static="no">
        <name>ID_SRFS</name>
        <initializer>LWID_(&apos;S&apos;,&apos;R&apos;,&apos;F&apos;,&apos;S&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1655" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1655" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1a45c5676f848f25fc6ea1024579324127" prot="public" static="no">
        <name>ID_FLAG</name>
        <initializer>LWID_(&apos;F&apos;,&apos;L&apos;,&apos;A&apos;,&apos;G&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1656" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1656" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1ac03b599689f5735390917105457ca8bc" prot="public" static="no">
        <name>ID_VLUM</name>
        <initializer>LWID_(&apos;V&apos;,&apos;L&apos;,&apos;U&apos;,&apos;M&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1657" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1657" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1a1c0ef8e3e9b882c08504603cb17fd3c7" prot="public" static="no">
        <name>ID_VDIF</name>
        <initializer>LWID_(&apos;V&apos;,&apos;D&apos;,&apos;I&apos;,&apos;F&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1658" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1658" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1a126fb1dd33d532bb74a4382bd0cc7f18" prot="public" static="no">
        <name>ID_VSPC</name>
        <initializer>LWID_(&apos;V&apos;,&apos;S&apos;,&apos;P&apos;,&apos;C&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1659" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1659" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1abc6fb40169aa30c4dc116eeab001637c" prot="public" static="no">
        <name>ID_RFLT</name>
        <initializer>LWID_(&apos;R&apos;,&apos;F&apos;,&apos;L&apos;,&apos;T&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1660" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1660" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1a1861c8e9c38a214481aaf9b5b0910251" prot="public" static="no">
        <name>ID_BTEX</name>
        <initializer>LWID_(&apos;B&apos;,&apos;T&apos;,&apos;E&apos;,&apos;X&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1661" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1661" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1a9e4ac78039a54a6314d2f327096f4821" prot="public" static="no">
        <name>ID_CTEX</name>
        <initializer>LWID_(&apos;C&apos;,&apos;T&apos;,&apos;E&apos;,&apos;X&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1662" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1662" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1a61ae5b890f6a3dd7fba35292f9dbbb68" prot="public" static="no">
        <name>ID_DTEX</name>
        <initializer>LWID_(&apos;D&apos;,&apos;T&apos;,&apos;E&apos;,&apos;X&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1663" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1663" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1a910340e74c0f09eec07631fe7fe82f7a" prot="public" static="no">
        <name>ID_LTEX</name>
        <initializer>LWID_(&apos;L&apos;,&apos;T&apos;,&apos;E&apos;,&apos;X&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1664" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1664" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1a8fe2ff687c712f59b0b0ef0fd0923c93" prot="public" static="no">
        <name>ID_RTEX</name>
        <initializer>LWID_(&apos;R&apos;,&apos;T&apos;,&apos;E&apos;,&apos;X&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1665" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1665" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1ae024fd35e6125b997f039942cbee24e8" prot="public" static="no">
        <name>ID_STEX</name>
        <initializer>LWID_(&apos;S&apos;,&apos;T&apos;,&apos;E&apos;,&apos;X&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1666" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1666" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1a7fac65fc37d66fe0eb89083c83a1392e" prot="public" static="no">
        <name>ID_TTEX</name>
        <initializer>LWID_(&apos;T&apos;,&apos;T&apos;,&apos;E&apos;,&apos;X&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1667" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1667" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1aed6e4fe847988d9b8e1c71d7ad54b479" prot="public" static="no">
        <name>ID_TFLG</name>
        <initializer>LWID_(&apos;T&apos;,&apos;F&apos;,&apos;L&apos;,&apos;G&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1668" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1668" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1a91f6631a3c55a0a56cb912f88b8eaede" prot="public" static="no">
        <name>ID_TSIZ</name>
        <initializer>LWID_(&apos;T&apos;,&apos;S&apos;,&apos;I&apos;,&apos;Z&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1669" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1669" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1a0db9ead7204d962d24574c21a885ef39" prot="public" static="no">
        <name>ID_TCTR</name>
        <initializer>LWID_(&apos;T&apos;,&apos;C&apos;,&apos;T&apos;,&apos;R&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1670" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1a786f7107f7e054ec940c4f0ee6f02a7f" prot="public" static="no">
        <name>ID_TFAL</name>
        <initializer>LWID_(&apos;T&apos;,&apos;F&apos;,&apos;A&apos;,&apos;L&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1671" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1671" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1a112e12a4de686ea04924ff8f811d0656" prot="public" static="no">
        <name>ID_TVEL</name>
        <initializer>LWID_(&apos;T&apos;,&apos;V&apos;,&apos;E&apos;,&apos;L&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1672" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1672" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1ade99d26f03e826fc23b949db0ab8a738" prot="public" static="no">
        <name>ID_TCLR</name>
        <initializer>LWID_(&apos;T&apos;,&apos;C&apos;,&apos;L&apos;,&apos;R&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1673" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1673" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1abb64c3beb963f0f0c2ebc01a23e3949a" prot="public" static="no">
        <name>ID_TVAL</name>
        <initializer>LWID_(&apos;T&apos;,&apos;V&apos;,&apos;A&apos;,&apos;L&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1674" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1674" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1a3d4735f8055a1a8744b997bf658fdbba" prot="public" static="no">
        <name>ID_TAMP</name>
        <initializer>LWID_(&apos;T&apos;,&apos;A&apos;,&apos;M&apos;,&apos;P&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1675" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1675" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1a0d86588c167e7e709be57ff8c9ef32a5" prot="public" static="no">
        <name>ID_TIMG</name>
        <initializer>LWID_(&apos;T&apos;,&apos;I&apos;,&apos;M&apos;,&apos;G&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1676" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1676" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1a31a5331ff0d2fb952f2b34e5afea21f7" prot="public" static="no">
        <name>ID_TAAS</name>
        <initializer>LWID_(&apos;T&apos;,&apos;A&apos;,&apos;A&apos;,&apos;S&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1677" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1677" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1a317370742f799dcce5a657442fcd8532" prot="public" static="no">
        <name>ID_TREF</name>
        <initializer>LWID_(&apos;T&apos;,&apos;R&apos;,&apos;E&apos;,&apos;F&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1678" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1678" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1a4befde314070ec7e8bcc6fcab5e650a1" prot="public" static="no">
        <name>ID_TOPC</name>
        <initializer>LWID_(&apos;T&apos;,&apos;O&apos;,&apos;P&apos;,&apos;C&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1679" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1679" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1a316ff79e9fe8e9e27adaa809ce58f1d1" prot="public" static="no">
        <name>ID_SDAT</name>
        <initializer>LWID_(&apos;S&apos;,&apos;D&apos;,&apos;A&apos;,&apos;T&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1680" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1680" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1a1eef367c141718c8d266a1bf779d7f0a" prot="public" static="no">
        <name>ID_TFP0</name>
        <initializer>LWID_(&apos;T&apos;,&apos;F&apos;,&apos;P&apos;,&apos;0&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1681" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1681" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_model__lwo_8cpp_1a80c2b1fe4cd671f33b8b1af8945835ab" prot="public" static="no">
        <name>ID_TFP1</name>
        <initializer>LWID_(&apos;T&apos;,&apos;F&apos;,&apos;P&apos;,&apos;1&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1682" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1682" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_model__lwo_8cpp_1af7d2aa98bf2fb62217ee63be3b964c4f" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int flen</definition>
        <argsstring></argsstring>
        <name>flen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1000" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1000" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_model__lwo_8cpp_1a65ca8951f631e1d3f3cb54b4eccd45c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lwFreeClip</definition>
        <argsstring>(lwClip *clip)</argsstring>
        <name>lwFreeClip</name>
        <param>
          <type><ref refid="structst__lw_clip" kindref="compound">lwClip</ref> *</type>
          <declname>clip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="49" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="49" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a251501d9ec251255b922cdc7e2779b68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structst__lw_clip" kindref="compound">lwClip</ref> *</type>
        <definition>lwClip* lwGetClip</definition>
        <argsstring>(idFile *fp, int cksize)</argsstring>
        <name>lwGetClip</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cksize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="90" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="90" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a2a7f26b1a39fbd3c0896b7af433dbc52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structst__lw_clip" kindref="compound">lwClip</ref> *</type>
        <definition>lwClip* lwFindClip</definition>
        <argsstring>(lwClip *list, int index)</argsstring>
        <name>lwFindClip</name>
        <param>
          <type><ref refid="structst__lw_clip" kindref="compound">lwClip</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="290" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="290" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1ab420316e5040329df2e4703e53378883" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lwFree</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>lwFree</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="310" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="310" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a229dfe7cffc5bed1ca0c40808af18a55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lwFreeEnvelope</definition>
        <argsstring>(lwEnvelope *env)</argsstring>
        <name>lwFreeEnvelope</name>
        <param>
          <type><ref refid="structst__lw_envelope" kindref="compound">lwEnvelope</ref> *</type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="314" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="314" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a36902e201bbd892bc79c3ac75e17dc4b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int compare_keys</definition>
        <argsstring>(lwKey *k1, lwKey *k2)</argsstring>
        <name>compare_keys</name>
        <param>
          <type><ref refid="structst__lw_key" kindref="compound">lwKey</ref> *</type>
          <declname>k1</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_key" kindref="compound">lwKey</ref> *</type>
          <declname>k2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="325" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="325" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a2eb9aacf0438e621f1bf46981024733a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structst__lw_envelope" kindref="compound">lwEnvelope</ref> *</type>
        <definition>lwEnvelope* lwGetEnvelope</definition>
        <argsstring>(idFile *fp, int cksize)</argsstring>
        <name>lwGetEnvelope</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cksize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="338" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="338" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a569a1ba388160803c45011445509e25f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structst__lw_envelope" kindref="compound">lwEnvelope</ref> *</type>
        <definition>lwEnvelope* lwFindEnvelope</definition>
        <argsstring>(lwEnvelope *list, int index)</argsstring>
        <name>lwFindEnvelope</name>
        <param>
          <type><ref refid="structst__lw_envelope" kindref="compound">lwEnvelope</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="481" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="481" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a68371b2eea38ee72f0c26673f7d92ce1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>static float range</definition>
        <argsstring>(float v, float lo, float hi, int *i)</argsstring>
        <name>range</name>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <param>
          <type>float</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>float</type>
          <declname>hi</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="507" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="507" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a084f960f8a4fbca3861b1ce95f9f4bbb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void hermite</definition>
        <argsstring>(float t, float *h1, float *h2, float *h3, float *h4)</argsstring>
        <name>hermite</name>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>h2</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>h3</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>h4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="530" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="530" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1aa3a9d741b3f6efd59929688f8cfb410d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>static float bezier</definition>
        <argsstring>(float x0, float x1, float x2, float x3, float t)</argsstring>
        <name>bezier</name>
        <param>
          <type>float</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x3</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="551" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="551" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a3b0831792b654b2cdb5d82059c03bcff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>static float bez2_time</definition>
        <argsstring>(float x0, float x1, float x2, float x3, float time, float *t0, float *t1)</argsstring>
        <name>bez2_time</name>
        <param>
          <type>float</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x3</declname>
        </param>
        <param>
          <type>float</type>
          <declname>time</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>t0</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>t1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="576" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="576" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a642b6eb9f304c310a88e94f4ff07b3ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>static float bez2</definition>
        <argsstring>(lwKey *key0, lwKey *key1, float time)</argsstring>
        <name>bez2</name>
        <param>
          <type><ref refid="structst__lw_key" kindref="compound">lwKey</ref> *</type>
          <declname>key0</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_key" kindref="compound">lwKey</ref> *</type>
          <declname>key1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="602" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="602" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a92a9d6ab584096aba098d54da2e94d28" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>static float outgoing</definition>
        <argsstring>(lwKey *key0, lwKey *key1)</argsstring>
        <name>outgoing</name>
        <param>
          <type><ref refid="structst__lw_key" kindref="compound">lwKey</ref> *</type>
          <declname>key0</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_key" kindref="compound">lwKey</ref> *</type>
          <declname>key1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="632" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="632" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a42757da726220aa2879a1f46545d7723" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>static float incoming</definition>
        <argsstring>(lwKey *key0, lwKey *key1)</argsstring>
        <name>incoming</name>
        <param>
          <type><ref refid="structst__lw_key" kindref="compound">lwKey</ref> *</type>
          <declname>key0</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_key" kindref="compound">lwKey</ref> *</type>
          <declname>key1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="698" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="698" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a2ec363bab0dc3006fad774965c2242b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float evalEnvelope</definition>
        <argsstring>(lwEnvelope *env, float time)</argsstring>
        <name>evalEnvelope</name>
        <param>
          <type><ref refid="structst__lw_envelope" kindref="compound">lwEnvelope</ref> *</type>
          <declname>env</declname>
        </param>
        <param>
          <type>float</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="765" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="765" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1aabf9c6a6f0a7e704f189c4ceb6551aae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lwListFree</definition>
        <argsstring>(void *list, void(*freeNode)(void *))</argsstring>
        <name>lwListFree</name>
        <param>
          <type>void *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>freeNode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="905" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="905" bodyend="915"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1ae37cffd53701e350e491763e9b79a638" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lwListAdd</definition>
        <argsstring>(void **list, void *node)</argsstring>
        <name>lwListAdd</name>
        <param>
          <type>void **</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="925" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="925" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a73d7ee4005301e15f627d22956b5d166" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lwListInsert</definition>
        <argsstring>(void **vlist, void *vitem, int(*compare)(void *, void *))</argsstring>
        <name>lwListInsert</name>
        <param>
          <type>void **</type>
          <declname>vlist</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>vitem</declname>
        </param>
        <param>
          <type>int(*)(void *, void *)</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="950" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="950" bodyend="985"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a433d1b4ea5c2033d21abd32c94f5ed00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_flen</definition>
        <argsstring>(int i)</argsstring>
        <name>set_flen</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1002" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1002" bodyend="1002"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a1012607a4a2fac0938b5724c7735847f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int get_flen</definition>
        <argsstring>(void)</argsstring>
        <name>get_flen</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1004" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1004" bodyend="1004"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1ae732f84588771c1f3509abb1da4d7476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* getbytes</definition>
        <argsstring>(idFile *fp, int size)</argsstring>
        <name>getbytes</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1006" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1006" bodyend="1028"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a28a8b2057785c9695cc38b18b581cd9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void skipbytes</definition>
        <argsstring>(idFile *fp, int n)</argsstring>
        <name>skipbytes</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1031" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1031" bodyend="1038"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1afea66d6e381264cae14bec67189cc615" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getI1</definition>
        <argsstring>(idFile *fp)</argsstring>
        <name>getI1</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1041" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1041" bodyend="1055"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1ab9d60d33064ad01540a4809b6dcee04e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short</type>
        <definition>short getI2</definition>
        <argsstring>(idFile *fp)</argsstring>
        <name>getI2</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1058" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1058" bodyend="1070"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a7c9fc5a1ac5a09f3fa0d349d998866a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getI4</definition>
        <argsstring>(idFile *fp)</argsstring>
        <name>getI4</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1073" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1073" bodyend="1085"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1ab8ddb52bde3fa7671ca597f1f47a8f7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char getU1</definition>
        <argsstring>(idFile *fp)</argsstring>
        <name>getU1</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1088" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1088" bodyend="1101"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a4767b864440984e21449387c3c79aee6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short</type>
        <definition>unsigned short getU2</definition>
        <argsstring>(idFile *fp)</argsstring>
        <name>getU2</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1104" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1104" bodyend="1116"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a5520a327ba997d9edeb32b1d4b678493" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int getU4</definition>
        <argsstring>(idFile *fp)</argsstring>
        <name>getU4</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1119" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1119" bodyend="1131"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a8664f80198f382b82f6b0da3c7e2f65d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getVX</definition>
        <argsstring>(idFile *fp)</argsstring>
        <name>getVX</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1134" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1134" bodyend="1175"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1ac5a187341822b4fe50b46027d134aa22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float getF4</definition>
        <argsstring>(idFile *fp)</argsstring>
        <name>getF4</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1178" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1178" bodyend="1194"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a9614e797b3dcf475faeef730f51aa42c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* getS0</definition>
        <argsstring>(idFile *fp)</argsstring>
        <name>getS0</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1197" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1197" bodyend="1240"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1aa3ae75557bf6f9dd0f80ea792d1afdb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sgetI1</definition>
        <argsstring>(unsigned char **bp)</argsstring>
        <name>sgetI1</name>
        <param>
          <type>unsigned char **</type>
          <declname>bp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1243" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1243" bodyend="1253"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a8bfed31ad647512060c535815de62bf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short</type>
        <definition>short sgetI2</definition>
        <argsstring>(unsigned char **bp)</argsstring>
        <name>sgetI2</name>
        <param>
          <type>unsigned char **</type>
          <declname>bp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1256" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1256" bodyend="1266"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a1f67df42a424ba17cde78f073f4bb01e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sgetI4</definition>
        <argsstring>(unsigned char **bp)</argsstring>
        <name>sgetI4</name>
        <param>
          <type>unsigned char **</type>
          <declname>bp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1269" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1269" bodyend="1279"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1add622d059576d1e2b9fb535be5304f92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char sgetU1</definition>
        <argsstring>(unsigned char **bp)</argsstring>
        <name>sgetU1</name>
        <param>
          <type>unsigned char **</type>
          <declname>bp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1282" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1282" bodyend="1291"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a8a5d83cb29c6babc80b2e2c838314414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short</type>
        <definition>unsigned short sgetU2</definition>
        <argsstring>(unsigned char **bp)</argsstring>
        <name>sgetU2</name>
        <param>
          <type>unsigned char **</type>
          <declname>bp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1294" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1294" bodyend="1304"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a07ebfe26ade6f756b69943ad3b5a52c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int sgetU4</definition>
        <argsstring>(unsigned char **bp)</argsstring>
        <name>sgetU4</name>
        <param>
          <type>unsigned char **</type>
          <declname>bp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1307" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1307" bodyend="1317"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a50b7a59ea61403717877999a6a8419b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sgetVX</definition>
        <argsstring>(unsigned char **bp)</argsstring>
        <name>sgetVX</name>
        <param>
          <type>unsigned char **</type>
          <declname>bp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1320" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1320" bodyend="1338"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1ad51d53f195b9159d956579a34cc6c461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float sgetF4</definition>
        <argsstring>(unsigned char **bp)</argsstring>
        <name>sgetF4</name>
        <param>
          <type>unsigned char **</type>
          <declname>bp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1341" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1341" bodyend="1355"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a20ad2c3bba3ee27a043801847bccc2d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* sgetS0</definition>
        <argsstring>(unsigned char **bp)</argsstring>
        <name>sgetS0</name>
        <param>
          <type>unsigned char **</type>
          <declname>bp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1358" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1358" bodyend="1383"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a4d85fa2c4bfe85e46e0ff0bc1b5e8186" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lwFreeLayer</definition>
        <argsstring>(lwLayer *layer)</argsstring>
        <name>lwFreeLayer</name>
        <param>
          <type><ref refid="structst__lw_layer" kindref="compound">lwLayer</ref> *</type>
          <declname>layer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1392" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1392" bodyend="1401"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1ab149d31fbabf8c06e234cc14fff2ddc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lwFreeObject</definition>
        <argsstring>(lwObject *object)</argsstring>
        <name>lwFreeObject</name>
        <param>
          <type><ref refid="structst__lw_object" kindref="compound">lwObject</ref> *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1411" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1411" bodyend="1421"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a85c024b2401760223017c17a1c293938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structst__lw_object" kindref="compound">lwObject</ref> *</type>
        <definition>lwObject* lwGetObject</definition>
        <argsstring>(const char *filename, unsigned int *failID, int *failpos)</argsstring>
        <name>lwGetObject</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>failID</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>failpos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1445" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1445" bodyend="1648"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a8387beaa8e04ee6c5ad09bdf569d121f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int add_clip</definition>
        <argsstring>(char *s, lwClip **clist, int *nclips)</argsstring>
        <name>add_clip</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_clip" kindref="compound">lwClip</ref> **</type>
          <declname>clist</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nclips</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1693" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1693" bodyend="1723"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a247e66b07d673cd06a3d1818a6cf0f75" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int add_tvel</definition>
        <argsstring>(float pos[], float vel[], lwEnvelope **elist, int *nenvs)</argsstring>
        <name>add_tvel</name>
        <param>
          <type>float</type>
          <declname>pos</declname>
          <array>[]</array>
        </param>
        <param>
          <type>float</type>
          <declname>vel</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="structst__lw_envelope" kindref="compound">lwEnvelope</ref> **</type>
          <declname>elist</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nenvs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1734" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1734" bodyend="1771"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a3b9d4be36e5608b017d1c5fc50e8424e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref> *</type>
        <definition>static lwTexture* get_texture</definition>
        <argsstring>(char *s)</argsstring>
        <name>get_texture</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1781" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1781" bodyend="1811"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a7cf18ad476671c49247efe57984a3794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structst__lw_surface" kindref="compound">lwSurface</ref> *</type>
        <definition>lwSurface* lwGetSurface5</definition>
        <argsstring>(idFile *fp, int cksize, lwObject *obj)</argsstring>
        <name>lwGetSurface5</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cksize</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_object" kindref="compound">lwObject</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="1821" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="1821" bodyend="2117"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a926a9a70aae7f8da59661b6f270f8e87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lwGetPolygons5</definition>
        <argsstring>(idFile *fp, int cksize, lwPolygonList *plist, int ptoffset)</argsstring>
        <name>lwGetPolygons5</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cksize</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_polygon_list" kindref="compound">lwPolygonList</ref> *</type>
          <declname>plist</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ptoffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="2128" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="2128" bodyend="2195"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1ab6fa8245c6d8ca0ccc15a26a7fcadefd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structst__lw_object" kindref="compound">lwObject</ref> *</type>
        <definition>lwObject* lwGetObject5</definition>
        <argsstring>(const char *filename, unsigned int *failID, int *failpos)</argsstring>
        <name>lwGetObject5</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>failID</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>failpos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="2219" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="2219" bodyend="2339"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a352114b0d62a3a42a735342b52ef07b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lwFreePoints</definition>
        <argsstring>(lwPointList *point)</argsstring>
        <name>lwFreePoints</name>
        <param>
          <type><ref refid="structst__lw_point_list" kindref="compound">lwPointList</ref> *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="2348" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="2348" bodyend="2362"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a12f59a75114f9434b2eaa169475fe34a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lwFreePolygons</definition>
        <argsstring>(lwPolygonList *plist)</argsstring>
        <name>lwFreePolygons</name>
        <param>
          <type><ref refid="structst__lw_polygon_list" kindref="compound">lwPolygonList</ref> *</type>
          <declname>plist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="2372" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="2372" bodyend="2391"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a9e52fb76608132d231f860131bf6177e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lwGetPoints</definition>
        <argsstring>(idFile *fp, int cksize, lwPointList *point)</argsstring>
        <name>lwGetPoints</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cksize</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_point_list" kindref="compound">lwPointList</ref> *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="2402" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="2402" bodyend="2439"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a354b09a54ace3a7630976e998b9929b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lwGetBoundingBox</definition>
        <argsstring>(lwPointList *point, float bbox[])</argsstring>
        <name>lwGetBoundingBox</name>
        <param>
          <type><ref refid="structst__lw_point_list" kindref="compound">lwPointList</ref> *</type>
          <declname>point</declname>
        </param>
        <param>
          <type>float</type>
          <declname>bbox</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="2450" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="2450" bodyend="2469"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a08445ebc0f2c99db0fcc41dee2777177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lwAllocPolygons</definition>
        <argsstring>(lwPolygonList *plist, int npols, int nverts)</argsstring>
        <name>lwAllocPolygons</name>
        <param>
          <type><ref refid="structst__lw_polygon_list" kindref="compound">lwPolygonList</ref> *</type>
          <declname>plist</declname>
        </param>
        <param>
          <type>int</type>
          <declname>npols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nverts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="2479" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="2479" bodyend="2511"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1ab13b2e81c7df5727d6fc4795d836806d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lwGetPolygons</definition>
        <argsstring>(idFile *fp, int cksize, lwPolygonList *plist, int ptoffset)</argsstring>
        <name>lwGetPolygons</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cksize</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_polygon_list" kindref="compound">lwPolygonList</ref> *</type>
          <declname>plist</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ptoffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="2522" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="2522" bodyend="2587"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a568cdb1a51d966fc6ebf7bc04240b898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lwGetPolyNormals</definition>
        <argsstring>(lwPointList *point, lwPolygonList *polygon)</argsstring>
        <name>lwGetPolyNormals</name>
        <param>
          <type><ref refid="structst__lw_point_list" kindref="compound">lwPointList</ref> *</type>
          <declname>point</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_polygon_list" kindref="compound">lwPolygonList</ref> *</type>
          <declname>polygon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="2599" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="2599" bodyend="2622"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a63cf59de5d3208370524d6b0479a7953" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lwGetPointPolygons</definition>
        <argsstring>(lwPointList *point, lwPolygonList *polygon)</argsstring>
        <name>lwGetPointPolygons</name>
        <param>
          <type><ref refid="structst__lw_point_list" kindref="compound">lwPointList</ref> *</type>
          <declname>point</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_polygon_list" kindref="compound">lwPolygonList</ref> *</type>
          <declname>polygon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="2634" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="2634" bodyend="2664"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1aefe2e1107f155ce54cb04cffa009f865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lwResolvePolySurfaces</definition>
        <argsstring>(lwPolygonList *polygon, lwTagList *tlist, lwSurface **surf, int *nsurfs)</argsstring>
        <name>lwResolvePolySurfaces</name>
        <param>
          <type><ref refid="structst__lw_polygon_list" kindref="compound">lwPolygonList</ref> *</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_tag_list" kindref="compound">lwTagList</ref> *</type>
          <declname>tlist</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_surface" kindref="compound">lwSurface</ref> **</type>
          <declname>surf</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nsurfs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="2676" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="2676" bodyend="2715"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a8807f8ce518dc85d73f60237ce2ed046" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lwGetVertNormals</definition>
        <argsstring>(lwPointList *point, lwPolygonList *polygon)</argsstring>
        <name>lwGetVertNormals</name>
        <param>
          <type><ref refid="structst__lw_point_list" kindref="compound">lwPointList</ref> *</type>
          <declname>point</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_polygon_list" kindref="compound">lwPolygonList</ref> *</type>
          <declname>polygon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="2733" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="2733" bodyend="2763"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a222023887069cce4d457f6ce5db1afef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lwFreeTags</definition>
        <argsstring>(lwTagList *tlist)</argsstring>
        <name>lwFreeTags</name>
        <param>
          <type><ref refid="structst__lw_tag_list" kindref="compound">lwTagList</ref> *</type>
          <declname>tlist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="2773" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="2773" bodyend="2787"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a77fd9a32bcebec141762ac38138fd543" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lwGetTags</definition>
        <argsstring>(idFile *fp, int cksize, lwTagList *tlist)</argsstring>
        <name>lwGetTags</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cksize</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_tag_list" kindref="compound">lwTagList</ref> *</type>
          <declname>tlist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="2798" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="2798" bodyend="2847"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a80fe86b0e6e05e1cba234d2cdd32bbfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lwGetPolygonTags</definition>
        <argsstring>(idFile *fp, int cksize, lwTagList *tlist, lwPolygonList *plist)</argsstring>
        <name>lwGetPolygonTags</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cksize</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_tag_list" kindref="compound">lwTagList</ref> *</type>
          <declname>tlist</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_polygon_list" kindref="compound">lwPolygonList</ref> *</type>
          <declname>plist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="2857" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="2857" bodyend="2886"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a5d01ad705fd15de72dc61abbeaeb7019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lwFreePlugin</definition>
        <argsstring>(lwPlugin *p)</argsstring>
        <name>lwFreePlugin</name>
        <param>
          <type><ref refid="structst__lw_plugin" kindref="compound">lwPlugin</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="2896" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="2896" bodyend="2904"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1ab41c5b165f99f40acd1d369ab9721c84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lwFreeTexture</definition>
        <argsstring>(lwTexture *t)</argsstring>
        <name>lwFreeTexture</name>
        <param>
          <type><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="2914" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="2914" bodyend="2934"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a0f7e4e4cbc845c801b986fc0d69224fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lwFreeSurface</definition>
        <argsstring>(lwSurface *surf)</argsstring>
        <name>lwFreeSurface</name>
        <param>
          <type><ref refid="structst__lw_surface" kindref="compound">lwSurface</ref> *</type>
          <declname>surf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="2944" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="2944" bodyend="2965"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a259883a6e8251100beccf373445be1fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lwGetTHeader</definition>
        <argsstring>(idFile *fp, int hsz, lwTexture *tex)</argsstring>
        <name>lwGetTHeader</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hsz</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref> *</type>
          <declname>tex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="2977" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="2977" bodyend="3057"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a0c2d38d3397b19a0f81beed7048fde09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lwGetTMap</definition>
        <argsstring>(idFile *fp, int tmapsz, lwTMap *tmap)</argsstring>
        <name>lwGetTMap</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tmapsz</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_t_map" kindref="compound">lwTMap</ref> *</type>
          <declname>tmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="3068" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="3068" bodyend="3146"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a5a928aa724881b361cb42156e095957d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lwGetImageMap</definition>
        <argsstring>(idFile *fp, int rsz, lwTexture *tex)</argsstring>
        <name>lwGetImageMap</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rsz</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref> *</type>
          <declname>tex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="3156" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="3156" bodyend="3255"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1ae539d0ed2c13b19c171b5b964d12d567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lwGetProcedural</definition>
        <argsstring>(idFile *fp, int rsz, lwTexture *tex)</argsstring>
        <name>lwGetProcedural</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rsz</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref> *</type>
          <declname>tex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="3265" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="3265" bodyend="3330"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1aa0988216ad97b4e2d93883e607c403e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lwGetGradient</definition>
        <argsstring>(idFile *fp, int rsz, lwTexture *tex)</argsstring>
        <name>lwGetGradient</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rsz</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref> *</type>
          <declname>tex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="3340" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="3340" bodyend="3428"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a9dfdfeeb3e6305e585c5910d62d6657d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref> *</type>
        <definition>lwTexture* lwGetTexture</definition>
        <argsstring>(idFile *fp, int bloksz, unsigned int type)</argsstring>
        <name>lwGetTexture</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bloksz</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="3438" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="3438" bodyend="3476"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1ae4db3e4bb94fb2114bafbd9b662259c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structst__lw_plugin" kindref="compound">lwPlugin</ref> *</type>
        <definition>lwPlugin* lwGetShader</definition>
        <argsstring>(idFile *fp, int bloksz)</argsstring>
        <name>lwGetShader</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bloksz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="3486" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="3486" bodyend="3566"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a25e185b5da83c6e502e2b6dee9d581af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int compare_textures</definition>
        <argsstring>(lwTexture *a, lwTexture *b)</argsstring>
        <name>compare_textures</name>
        <param>
          <type><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="3578" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="3578" bodyend="3581"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1ae66855bad678441823095b6f5fac7c7d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int compare_shaders</definition>
        <argsstring>(lwPlugin *a, lwPlugin *b)</argsstring>
        <name>compare_shaders</name>
        <param>
          <type><ref refid="structst__lw_plugin" kindref="compound">lwPlugin</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_plugin" kindref="compound">lwPlugin</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="3584" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="3584" bodyend="3587"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1ae1969cc5f86fcd3b0baf561fe6a2888a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int add_texture</definition>
        <argsstring>(lwSurface *surf, lwTexture *tex)</argsstring>
        <name>add_texture</name>
        <param>
          <type><ref refid="structst__lw_surface" kindref="compound">lwSurface</ref> *</type>
          <declname>surf</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref> *</type>
          <declname>tex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="3598" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="3598" bodyend="3618"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a1b6144f748a2826b6bf263e8334c23f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structst__lw_surface" kindref="compound">lwSurface</ref> *</type>
        <definition>lwSurface* lwDefaultSurface</definition>
        <argsstring>(void)</argsstring>
        <name>lwDefaultSurface</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="3628" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="3628" bodyend="3645"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1aae46413f8a5a5bd74211fc85f5f93860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structst__lw_surface" kindref="compound">lwSurface</ref> *</type>
        <definition>lwSurface* lwGetSurface</definition>
        <argsstring>(idFile *fp, int cksize)</argsstring>
        <name>lwGetSurface</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cksize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="3655" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="3655" bodyend="3880"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1afc422ac373df10511d710d9f93eb6bec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float dot</definition>
        <argsstring>(float a[], float b[])</argsstring>
        <name>dot</name>
        <param>
          <type>float</type>
          <declname>a</declname>
          <array>[]</array>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="3883" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="3883" bodyend="3886"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a2fbf97a3f3ecf5a3fca16be27b49d4b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cross</definition>
        <argsstring>(float a[], float b[], float c[])</argsstring>
        <name>cross</name>
        <param>
          <type>float</type>
          <declname>a</declname>
          <array>[]</array>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
          <array>[]</array>
        </param>
        <param>
          <type>float</type>
          <declname>c</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="3889" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="3889" bodyend="3894"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1ad659b8e25b0ca7b76bcff2329b7dadf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void normalize</definition>
        <argsstring>(float v[])</argsstring>
        <name>normalize</name>
        <param>
          <type>float</type>
          <declname>v</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="3897" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="3897" bodyend="3907"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a6c6561b1dc6c57913e201cbcfec11033" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lwFreeVMap</definition>
        <argsstring>(lwVMap *vmap)</argsstring>
        <name>lwFreeVMap</name>
        <param>
          <type><ref refid="structst__lw_v_map" kindref="compound">lwVMap</ref> *</type>
          <declname>vmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="3916" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="3916" bodyend="3928"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a53f5c5ba4aa535e5fcfae0e3a81f19e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structst__lw_v_map" kindref="compound">lwVMap</ref> *</type>
        <definition>lwVMap* lwGetVMap</definition>
        <argsstring>(idFile *fp, int cksize, int ptoffset, int poloffset, int perpoly)</argsstring>
        <name>lwGetVMap</name>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cksize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ptoffset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>poloffset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>perpoly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="3938" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="3938" bodyend="4018"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a5cf4de4564ced5729453562c2e54bdf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lwGetPointVMaps</definition>
        <argsstring>(lwPointList *point, lwVMap *vmap)</argsstring>
        <name>lwGetPointVMaps</name>
        <param>
          <type><ref refid="structst__lw_point_list" kindref="compound">lwPointList</ref> *</type>
          <declname>point</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_v_map" kindref="compound">lwVMap</ref> *</type>
          <declname>vmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="4028" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="4028" bodyend="4070"/>
      </memberdef>
      <memberdef kind="function" id="_model__lwo_8cpp_1a0db1cc7ed2e3f737942a67a02bbbd29d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lwGetPolyVMaps</definition>
        <argsstring>(lwPolygonList *polygon, lwVMap *vmap)</argsstring>
        <name>lwGetPolyVMaps</name>
        <param>
          <type><ref refid="structst__lw_polygon_list" kindref="compound">lwPolygonList</ref> *</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type><ref refid="structst__lw_v_map" kindref="compound">lwVMap</ref> *</type>
          <declname>vmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" line="4080" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp" bodystart="4080" bodyend="4138"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Model_lwo.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="35"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="36"><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/>Converted<sp/>from<sp/>lwobject<sp/>sample<sp/>prog<sp/>from<sp/>LW<sp/>6.5<sp/>SDK.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"></highlight></codeline>
<codeline lineno="39"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="40"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="43"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="44"><highlight class="comment">lwFreeClip()</highlight></codeline>
<codeline lineno="45"><highlight class="comment"></highlight></codeline>
<codeline lineno="46"><highlight class="comment">Free<sp/>memory<sp/>used<sp/>by<sp/>an<sp/>lwClip.</highlight></codeline>
<codeline lineno="47"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lwFreeClip(<sp/><ref refid="structst__lw_clip" kindref="compound">lwClip</ref><sp/>*clip<sp/>)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clip<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lwListFree(<sp/>clip-&gt;ifilter,<sp/>(void<sp/>(__cdecl<sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))lwFreePlugin<sp/>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lwListFree(<sp/>clip-&gt;pfilter,<sp/>(void<sp/>(__cdecl<sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))lwFreePlugin<sp/>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>clip-&gt;type<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_STIL:<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clip-&gt;source.still.name<sp/>)<sp/>Mem_Free(<sp/>clip-&gt;source.still.name<sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_ISEQ:<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clip-&gt;source.seq.suffix<sp/>)<sp/>Mem_Free(<sp/>clip-&gt;source.seq.suffix<sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clip-&gt;source.seq.prefix<sp/>)<sp/>Mem_Free(<sp/>clip-&gt;source.seq.prefix<sp/>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_ANIM:<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clip-&gt;source.anim.server<sp/>)<sp/>Mem_Free(<sp/>clip-&gt;source.anim.server<sp/>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clip-&gt;source.anim.name<sp/>)<sp/>Mem_Free(<sp/>clip-&gt;source.anim.name<sp/>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_XREF:<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clip-&gt;source.xref.string<sp/>)<sp/>Mem_Free(<sp/>clip-&gt;source.xref.string<sp/>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_STCC:<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clip-&gt;source.cycle.name<sp/>)<sp/>Mem_Free(<sp/>clip-&gt;source.cycle.name<sp/>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>clip<sp/>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="84"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="85"><highlight class="comment">lwGetClip()</highlight></codeline>
<codeline lineno="86"><highlight class="comment"></highlight></codeline>
<codeline lineno="87"><highlight class="comment">Read<sp/>image<sp/>references<sp/>from<sp/>a<sp/>CLIP<sp/>chunk<sp/>in<sp/>an<sp/>LWO2<sp/>file.</highlight></codeline>
<codeline lineno="88"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><ref refid="structst__lw_clip" kindref="compound">lwClip</ref><sp/>*lwGetClip(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cksize<sp/>)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_clip" kindref="compound">lwClip</ref><sp/>*clip;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_plugin" kindref="compound">lwPlugin</ref><sp/>*filt;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>sz;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/>rlen;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>the<sp/>Clip<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/>clip<sp/>=<sp/>(<ref refid="structst__lw_clip" kindref="compound">lwClip</ref>*)Mem_ClearedAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_clip" kindref="compound">lwClip</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!clip<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/>clip-&gt;contrast.val<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/>clip-&gt;brightness.val<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/>clip-&gt;saturation.val<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/>clip-&gt;gamma.val<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>remember<sp/>where<sp/>we<sp/>started<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/>pos<sp/>=<sp/>fp-&gt;Tell();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/>clip-&gt;index<sp/>=<sp/>getI4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>subchunk<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/>clip-&gt;type<sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>0<sp/>&gt;<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/>sz<sp/>+=<sp/>sz<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>clip-&gt;type<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_STIL:</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;source.still.name<sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_ISEQ:</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;source.seq.digits<sp/><sp/>=<sp/>getU1(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;source.seq.flags<sp/><sp/><sp/>=<sp/>getU1(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;source.seq.offset<sp/><sp/>=<sp/>getI2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;source.seq.start<sp/><sp/><sp/>=<sp/>getI2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;source.seq.end<sp/><sp/><sp/><sp/><sp/>=<sp/>getI2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;source.seq.prefix<sp/><sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;source.seq.suffix<sp/><sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_ANIM:</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;source.anim.name<sp/><sp/><sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;source.anim.server<sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>get_flen();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;source.anim.data<sp/><sp/><sp/>=<sp/>getbytes(<sp/>fp,<sp/>sz<sp/>-<sp/>rlen<sp/>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_XREF:</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;source.xref.index<sp/><sp/>=<sp/>getI4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;source.xref.string<sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_STCC:</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;source.cycle.lo<sp/><sp/><sp/>=<sp/>getI2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;source.cycle.hi<sp/><sp/><sp/>=<sp/>getI2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;source.cycle.name<sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>while<sp/>reading<sp/>current<sp/>subchunk?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/>rlen<sp/>=<sp/>get_flen();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>0<sp/>||<sp/>rlen<sp/>&gt;<sp/>sz<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>skip<sp/>unread<sp/>parts<sp/>of<sp/>the<sp/>current<sp/>subchunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>sz<sp/>)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fp-&gt;Seek(<sp/>sz<sp/>-<sp/>rlen,<sp/>FS_SEEK_CUR<sp/>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>the<sp/>CLIP<sp/>chunk?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/>rlen<sp/>=<sp/>fp-&gt;Tell()<sp/>-<sp/>pos;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cksize<sp/>&lt;<sp/>rlen<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cksize<sp/>==<sp/>rlen<sp/>)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clip;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>process<sp/>subchunks<sp/>as<sp/>they&apos;re<sp/>encountered<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>0<sp/>&gt;<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>+=<sp/>sz<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TIME:</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;start_time<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;duration<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;frame_rate<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_CONT:</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;contrast.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;contrast.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_BRIT:</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;brightness.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;brightness.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_SATR:</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;saturation.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;saturation.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_HUE:</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;hue.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;hue.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_GAMM:</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;gamma.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;gamma.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_NEGA:</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;negative<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_IFLT:</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_PFLT:</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filt<sp/>=<sp/>(<ref refid="structst__lw_plugin" kindref="compound">lwPlugin</ref>*)Mem_ClearedAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_plugin" kindref="compound">lwPlugin</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!filt<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filt-&gt;name<sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filt-&gt;flags<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>get_flen();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filt-&gt;data<sp/>=<sp/>getbytes(<sp/>fp,<sp/>sz<sp/>-<sp/>rlen<sp/>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>ID_IFLT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListAdd(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;clip-&gt;ifilter,<sp/>filt<sp/>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;nifilters++;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListAdd(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;clip-&gt;pfilter,<sp/>filt<sp/>);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;npfilters++;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>while<sp/>reading<sp/>current<sp/>subchunk?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>get_flen();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>0<sp/>||<sp/>rlen<sp/>&gt;<sp/>sz<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>skip<sp/>unread<sp/>parts<sp/>of<sp/>the<sp/>current<sp/>subchunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>sz<sp/>)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp-&gt;Seek(<sp/>sz<sp/>-<sp/>rlen,<sp/>FS_SEEK_CUR<sp/>);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>the<sp/>CLIP<sp/>chunk?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>fp-&gt;Tell()<sp/>-<sp/>pos;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cksize<sp/>&lt;<sp/>rlen<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cksize<sp/>==<sp/>rlen<sp/>)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>next<sp/>chunk<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>6<sp/>!=<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clip;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal">Fail:</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/>lwFreeClip(<sp/>clip<sp/>);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="284"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="285"><highlight class="comment">lwFindClip()</highlight></codeline>
<codeline lineno="286"><highlight class="comment"></highlight></codeline>
<codeline lineno="287"><highlight class="comment">Returns<sp/>an<sp/>lwClip<sp/>pointer,<sp/>given<sp/>a<sp/>clip<sp/>index.</highlight></codeline>
<codeline lineno="288"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><ref refid="structst__lw_clip" kindref="compound">lwClip</ref><sp/>*lwFindClip(<sp/><ref refid="structst__lw_clip" kindref="compound">lwClip</ref><sp/>*list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)</highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_clip" kindref="compound">lwClip</ref><sp/>*clip;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/>clip<sp/>=<sp/>list;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>clip<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clip-&gt;index<sp/>==<sp/>index<sp/>)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clip<sp/>=<sp/>clip-&gt;next;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clip;</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="304"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="305"><highlight class="comment">lwFreeEnvelope()</highlight></codeline>
<codeline lineno="306"><highlight class="comment"></highlight></codeline>
<codeline lineno="307"><highlight class="comment">Free<sp/>the<sp/>memory<sp/>used<sp/>by<sp/>an<sp/>lwEnvelope.</highlight></codeline>
<codeline lineno="308"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lwFree(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>Mem_Free(<sp/>ptr<sp/>);</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lwFreeEnvelope(<sp/><ref refid="structst__lw_envelope" kindref="compound">lwEnvelope</ref><sp/>*env<sp/>)</highlight></codeline>
<codeline lineno="315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>env<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>env-&gt;name<sp/>)<sp/>Mem_Free(<sp/>env-&gt;name<sp/>);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lwListFree(<sp/>env-&gt;key,<sp/>lwFree<sp/>);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lwListFree(<sp/>env-&gt;cfilter,<sp/>(void<sp/>(__cdecl<sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))lwFreePlugin<sp/>);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>env<sp/>);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compare_keys(<sp/><ref refid="structst__lw_key" kindref="compound">lwKey</ref><sp/>*k1,<sp/><ref refid="structst__lw_key" kindref="compound">lwKey</ref><sp/>*k2<sp/>)</highlight></codeline>
<codeline lineno="326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>k1-&gt;time<sp/>&gt;<sp/>k2-&gt;time<sp/>?<sp/>1<sp/>:<sp/>k1-&gt;time<sp/>&lt;<sp/>k2-&gt;time<sp/>?<sp/>-1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="332"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="333"><highlight class="comment">lwGetEnvelope()</highlight></codeline>
<codeline lineno="334"><highlight class="comment"></highlight></codeline>
<codeline lineno="335"><highlight class="comment">Read<sp/>an<sp/>ENVL<sp/>chunk<sp/>from<sp/>an<sp/>LWO2<sp/>file.</highlight></codeline>
<codeline lineno="336"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><ref refid="structst__lw_envelope" kindref="compound">lwEnvelope</ref><sp/>*lwGetEnvelope(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cksize<sp/>)</highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_envelope" kindref="compound">lwEnvelope</ref><sp/>*env;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_key" kindref="compound">lwKey</ref><sp/>*key;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_plugin" kindref="compound">lwPlugin</ref><sp/>*plug;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>sz;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f[<sp/>4<sp/>];</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>nparams,<sp/>pos,<sp/>rlen;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>the<sp/>Envelope<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/>env<sp/>=<sp/>(<ref refid="structst__lw_envelope" kindref="compound">lwEnvelope</ref>*)Mem_ClearedAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_envelope" kindref="compound">lwEnvelope</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!env<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>remember<sp/>where<sp/>we<sp/>started<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/>pos<sp/>=<sp/>fp-&gt;Tell();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/>env-&gt;index<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>subchunk<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>0<sp/>&gt;<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>process<sp/>subchunks<sp/>as<sp/>they&apos;re<sp/>encountered<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>+=<sp/>sz<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TYPE:</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env-&gt;type<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_NAME:</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env-&gt;name<sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_PRE:</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env-&gt;behavior[<sp/>0<sp/>]<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_POST:</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env-&gt;behavior[<sp/>1<sp/>]<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_KEY:</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>(<ref refid="structst__lw_key" kindref="compound">lwKey</ref>*)Mem_ClearedAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_key" kindref="compound">lwKey</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!key<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key-&gt;time<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key-&gt;value<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListInsert(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;env-&gt;key,<sp/>key,<sp/>(int<sp/>(__cdecl<sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))compare_keys<sp/>);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env-&gt;nkeys++;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_SPAN:</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!key<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key-&gt;shape<sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nparams<sp/>=<sp/>(<sp/>sz<sp/>-<sp/>4<sp/>)<sp/>/<sp/>4;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>nparams<sp/>&gt;<sp/>4<sp/>)<sp/>nparams<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nparams;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f[<sp/>i<sp/>]<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>key-&gt;shape<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TCB:</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key-&gt;tension<sp/>=<sp/>f[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key-&gt;continuity<sp/>=<sp/>f[<sp/>1<sp/>];</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key-&gt;bias<sp/>=<sp/>f[<sp/>2<sp/>];</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_BEZI:</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_HERM:</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_BEZ2:</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nparams;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key-&gt;param[<sp/>i<sp/>]<sp/>=<sp/>f[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_CHAN:</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plug<sp/>=<sp/>(<ref refid="structst__lw_plugin" kindref="compound">lwPlugin</ref>*)Mem_ClearedAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_plugin" kindref="compound">lwPlugin</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!plug<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plug-&gt;name<sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plug-&gt;flags<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plug-&gt;data<sp/>=<sp/>getbytes(<sp/>fp,<sp/>sz<sp/>-<sp/>get_flen()<sp/>);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListAdd(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;env-&gt;cfilter,<sp/>plug<sp/>);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env-&gt;ncfilters++;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>while<sp/>reading<sp/>current<sp/>subchunk?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>get_flen();</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>0<sp/>||<sp/>rlen<sp/>&gt;<sp/>sz<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>skip<sp/>unread<sp/>parts<sp/>of<sp/>the<sp/>current<sp/>subchunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>sz<sp/>)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp-&gt;Seek(<sp/>sz<sp/>-<sp/>rlen,<sp/>FS_SEEK_CUR<sp/>);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>the<sp/>ENVL<sp/>chunk?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>fp-&gt;Tell()<sp/>-<sp/>pos;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cksize<sp/>&lt;<sp/>rlen<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cksize<sp/>==<sp/>rlen<sp/>)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>next<sp/>subchunk<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>6<sp/>!=<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>env;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal">Fail:</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/>lwFreeEnvelope(<sp/>env<sp/>);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="475"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="476"><highlight class="comment">lwFindEnvelope()</highlight></codeline>
<codeline lineno="477"><highlight class="comment"></highlight></codeline>
<codeline lineno="478"><highlight class="comment">Returns<sp/>an<sp/>lwEnvelope<sp/>pointer,<sp/>given<sp/>an<sp/>envelope<sp/>index.</highlight></codeline>
<codeline lineno="479"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><ref refid="structst__lw_envelope" kindref="compound">lwEnvelope</ref><sp/>*lwFindEnvelope(<sp/><ref refid="structst__lw_envelope" kindref="compound">lwEnvelope</ref><sp/>*list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)</highlight></codeline>
<codeline lineno="482"><highlight class="normal">{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_envelope" kindref="compound">lwEnvelope</ref><sp/>*env;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/>env<sp/>=<sp/>list;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>env<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>env-&gt;index<sp/>==<sp/>index<sp/>)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>env<sp/>=<sp/>env-&gt;next;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>env;</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="495"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="496"><highlight class="comment">range()</highlight></codeline>
<codeline lineno="497"><highlight class="comment"></highlight></codeline>
<codeline lineno="498"><highlight class="comment">Given<sp/>the<sp/>value<sp/>v<sp/>of<sp/>a<sp/>periodic<sp/>function,<sp/>returns<sp/>the<sp/>equivalent<sp/>value</highlight></codeline>
<codeline lineno="499"><highlight class="comment">v2<sp/>in<sp/>the<sp/>principal<sp/>interval<sp/>[lo,<sp/>hi].<sp/><sp/>If<sp/>i<sp/>isn&apos;t<sp/>NULL,<sp/>it<sp/>receives</highlight></codeline>
<codeline lineno="500"><highlight class="comment">the<sp/>number<sp/>of<sp/>wavelengths<sp/>between<sp/>v<sp/>and<sp/>v2.</highlight></codeline>
<codeline lineno="501"><highlight class="comment"></highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/><sp/><sp/>v2<sp/>=<sp/>v<sp/>-<sp/>i<sp/>*<sp/>(hi<sp/>-<sp/>lo)</highlight></codeline>
<codeline lineno="503"><highlight class="comment"></highlight></codeline>
<codeline lineno="504"><highlight class="comment">For<sp/>example,<sp/>range(<sp/>3<sp/>pi,<sp/>0,<sp/>2<sp/>pi,<sp/>i<sp/>)<sp/>returns<sp/>pi,<sp/>with<sp/>i<sp/>=<sp/>1.</highlight></codeline>
<codeline lineno="505"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>range(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lo,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>hi,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*i<sp/>)</highlight></codeline>
<codeline lineno="508"><highlight class="normal">{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v2,<sp/>r<sp/>=<sp/>hi<sp/>-<sp/>lo;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r<sp/>==<sp/>0.0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>)<sp/>*i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lo;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/>v2<sp/>=<sp/>lo<sp/>+<sp/>v<sp/>-<sp/>r<sp/>*<sp/>(<sp/>float<sp/>)<sp/>floor((<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>)<sp/>v<sp/>/<sp/>r<sp/>);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/>if<sp/>(<sp/>i<sp/>)<sp/>*i<sp/>=<sp/>-(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>)((<sp/>v2<sp/>-<sp/>v<sp/>)<sp/>/<sp/>r<sp/>+<sp/>(<sp/>v2<sp/>&gt;<sp/>v<sp/>?<sp/>0.5<sp/>:<sp/>-0.5<sp/>));</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/>return<sp/>v2;</highlight></codeline>
<codeline lineno="520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="524"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="525"><highlight class="comment">hermite()</highlight></codeline>
<codeline lineno="526"><highlight class="comment"></highlight></codeline>
<codeline lineno="527"><highlight class="comment">Calculate<sp/>the<sp/>Hermite<sp/>coefficients.</highlight></codeline>
<codeline lineno="528"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal">static<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>hermite(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*h1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*h2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*h3,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*h4<sp/>)</highlight></codeline>
<codeline lineno="531"><highlight class="normal">{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t2,<sp/>t3;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/>t2<sp/>=<sp/>t<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/>t3<sp/>=<sp/>t<sp/>*<sp/>t2;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/>*h2<sp/>=<sp/>3.0f<sp/>*<sp/>t2<sp/>-<sp/>t3<sp/>-<sp/>t3;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/>*h1<sp/>=<sp/>1.0f<sp/>-<sp/>*h2;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/>*h4<sp/>=<sp/>t3<sp/>-<sp/>t2;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/>*h3<sp/>=<sp/>*h4<sp/>-<sp/>t2<sp/>+<sp/>t;</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="545"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="546"><highlight class="comment">bezier()</highlight></codeline>
<codeline lineno="547"><highlight class="comment"></highlight></codeline>
<codeline lineno="548"><highlight class="comment">Interpolate<sp/>the<sp/>value<sp/>of<sp/>a<sp/>1D<sp/>Bezier<sp/>curve.</highlight></codeline>
<codeline lineno="549"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bezier(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x3,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>)</highlight></codeline>
<codeline lineno="552"><highlight class="normal">{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/>b,<sp/>c,<sp/>t2,<sp/>t3;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/>t2<sp/>=<sp/>t<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/>t3<sp/>=<sp/>t2<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/>c<sp/>=<sp/>3.0f<sp/>*<sp/>(<sp/>x1<sp/>-<sp/>x0<sp/>);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/>b<sp/>=<sp/>3.0f<sp/>*<sp/>(<sp/>x2<sp/>-<sp/>x1<sp/>)<sp/>-<sp/>c;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/>a<sp/>=<sp/>x3<sp/>-<sp/>x0<sp/>-<sp/>c<sp/>-<sp/>b;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>*<sp/>t3<sp/>+<sp/>b<sp/>*<sp/>t2<sp/>+<sp/>c<sp/>*<sp/>t<sp/>+<sp/>x0;</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="567"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="568"><highlight class="comment">bez2_time()</highlight></codeline>
<codeline lineno="569"><highlight class="comment"></highlight></codeline>
<codeline lineno="570"><highlight class="comment">Find<sp/>the<sp/>t<sp/>for<sp/>which<sp/>bezier()<sp/>returns<sp/>the<sp/>input<sp/>time.<sp/><sp/>The<sp/>handle</highlight></codeline>
<codeline lineno="571"><highlight class="comment">endpoints<sp/>of<sp/>a<sp/>BEZ2<sp/>curve<sp/>represent<sp/>the<sp/>control<sp/>points,<sp/>and<sp/>these<sp/>have</highlight></codeline>
<codeline lineno="572"><highlight class="comment">(time,<sp/>value)<sp/>coordinates,<sp/>so<sp/>time<sp/>is<sp/>used<sp/>as<sp/>both<sp/>a<sp/>coordinate<sp/>and<sp/>a</highlight></codeline>
<codeline lineno="573"><highlight class="comment">parameter<sp/>for<sp/>this<sp/>curve<sp/>type.</highlight></codeline>
<codeline lineno="574"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bez2_time(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x3,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time,</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*t0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*t1<sp/>)</highlight></codeline>
<codeline lineno="578"><highlight class="normal">{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v,<sp/>t;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/>t<sp/>=<sp/>*t0<sp/>+<sp/>(<sp/>*t1<sp/>-<sp/>*t0<sp/>)<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/>v<sp/>=<sp/>bezier(<sp/>x0,<sp/>x1,<sp/>x2,<sp/>x3,<sp/>t<sp/>);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>time<sp/>-<sp/>v<sp/>)<sp/>&gt;<sp/>.0001f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>v<sp/>&gt;<sp/>time<sp/>)</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*t1<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*t0<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bez2_time(<sp/>x0,<sp/>x1,<sp/>x2,<sp/>x3,<sp/>time,<sp/>t0,<sp/>t1<sp/>);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="596"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="597"><highlight class="comment">bez2()</highlight></codeline>
<codeline lineno="598"><highlight class="comment"></highlight></codeline>
<codeline lineno="599"><highlight class="comment">Interpolate<sp/>the<sp/>value<sp/>of<sp/>a<sp/>BEZ2<sp/>curve.</highlight></codeline>
<codeline lineno="600"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bez2(<sp/><ref refid="structst__lw_key" kindref="compound">lwKey</ref><sp/>*key0,<sp/><ref refid="structst__lw_key" kindref="compound">lwKey</ref><sp/>*key1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight></codeline>
<codeline lineno="603"><highlight class="normal">{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/>y,<sp/>t,<sp/>t0<sp/>=<sp/>0.0f,<sp/>t1<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>key0-&gt;shape<sp/>==<sp/>ID_BEZ2<sp/>)</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>key0-&gt;time<sp/>+<sp/>key0-&gt;param[<sp/>2<sp/>];</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>key0-&gt;time<sp/>+<sp/>(<sp/>key1-&gt;time<sp/>-<sp/>key0-&gt;time<sp/>)<sp/>/<sp/>3.0f;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/>t<sp/>=<sp/>bez2_time(<sp/>key0-&gt;time,<sp/>x,<sp/>key1-&gt;time<sp/>+<sp/>key1-&gt;param[<sp/>0<sp/>],<sp/>key1-&gt;time,</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>time,<sp/>&amp;t0,<sp/>&amp;t1<sp/>);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>key0-&gt;shape<sp/>==<sp/>ID_BEZ2<sp/>)</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>key0-&gt;value<sp/>+<sp/>key0-&gt;param[<sp/>3<sp/>];</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>key0-&gt;value<sp/>+<sp/>key0-&gt;param[<sp/>1<sp/>]<sp/>/<sp/>3.0f;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bezier(<sp/>key0-&gt;value,<sp/>y,<sp/>key1-&gt;param[<sp/>1<sp/>]<sp/>+<sp/>key1-&gt;value,<sp/>key1-&gt;value,<sp/>t<sp/>);</highlight></codeline>
<codeline lineno="620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="624"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="625"><highlight class="comment">outgoing()</highlight></codeline>
<codeline lineno="626"><highlight class="comment"></highlight></codeline>
<codeline lineno="627"><highlight class="comment">Return<sp/>the<sp/>outgoing<sp/>tangent<sp/>to<sp/>the<sp/>curve<sp/>at<sp/>key0.<sp/><sp/>The<sp/>value<sp/>returned</highlight></codeline>
<codeline lineno="628"><highlight class="comment">for<sp/>the<sp/>BEZ2<sp/>case<sp/>is<sp/>used<sp/>when<sp/>extrapolating<sp/>a<sp/>linear<sp/>pre<sp/>behavior<sp/>and</highlight></codeline>
<codeline lineno="629"><highlight class="comment">when<sp/>interpolating<sp/>a<sp/>non-BEZ2<sp/>span.</highlight></codeline>
<codeline lineno="630"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>outgoing(<sp/><ref refid="structst__lw_key" kindref="compound">lwKey</ref><sp/>*key0,<sp/><ref refid="structst__lw_key" kindref="compound">lwKey</ref><sp/>*key1<sp/>)</highlight></codeline>
<codeline lineno="633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/>b,<sp/>d,<sp/>t,<sp/>out;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>key0-&gt;shape<sp/>)</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TCB:</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>(<sp/>1.0f<sp/>-<sp/>key0-&gt;tension<sp/>)</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(<sp/>1.0f<sp/>+<sp/>key0-&gt;continuity<sp/>)</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(<sp/>1.0f<sp/>+<sp/>key0-&gt;bias<sp/>);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>(<sp/>1.0f<sp/>-<sp/>key0-&gt;tension<sp/>)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(<sp/>1.0f<sp/>-<sp/>key0-&gt;continuity<sp/>)</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(<sp/>1.0f<sp/>-<sp/>key0-&gt;bias<sp/>);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>key1-&gt;value<sp/>-<sp/>key0-&gt;value;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>key0-&gt;prev<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(<sp/>key1-&gt;time<sp/>-<sp/>key0-&gt;time<sp/>)<sp/>/<sp/>(<sp/>key1-&gt;time<sp/>-<sp/>key0-&gt;prev-&gt;time<sp/>);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>t<sp/>*<sp/>(<sp/>a<sp/>*<sp/>(<sp/>key0-&gt;value<sp/>-<sp/>key0-&gt;prev-&gt;value<sp/>)<sp/>+<sp/>b<sp/>*<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>b<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_LINE:</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>key1-&gt;value<sp/>-<sp/>key0-&gt;value;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>key0-&gt;prev<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(<sp/>key1-&gt;time<sp/>-<sp/>key0-&gt;time<sp/>)<sp/>/<sp/>(<sp/>key1-&gt;time<sp/>-<sp/>key0-&gt;prev-&gt;time<sp/>);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>t<sp/>*<sp/>(<sp/>key0-&gt;value<sp/>-<sp/>key0-&gt;prev-&gt;value<sp/>+<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_BEZI:</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_HERM:</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>key0-&gt;param[<sp/>1<sp/>];</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>key0-&gt;prev<sp/>)</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>*=<sp/>(<sp/>key1-&gt;time<sp/>-<sp/>key0-&gt;time<sp/>)<sp/>/<sp/>(<sp/>key1-&gt;time<sp/>-<sp/>key0-&gt;prev-&gt;time<sp/>);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_BEZ2:</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>key0-&gt;param[<sp/>3<sp/>]<sp/>*<sp/>(<sp/>key1-&gt;time<sp/>-<sp/>key0-&gt;time<sp/>);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>key0-&gt;param[<sp/>2<sp/>]<sp/>)<sp/>&gt;<sp/>1e-5f<sp/>)</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>/=<sp/>key0-&gt;param[<sp/>2<sp/>];</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>*=<sp/>1e5f;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_STEP:</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="691"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="692"><highlight class="comment">incoming()</highlight></codeline>
<codeline lineno="693"><highlight class="comment"></highlight></codeline>
<codeline lineno="694"><highlight class="comment">Return<sp/>the<sp/>incoming<sp/>tangent<sp/>to<sp/>the<sp/>curve<sp/>at<sp/>key1.<sp/><sp/>The<sp/>value<sp/>returned</highlight></codeline>
<codeline lineno="695"><highlight class="comment">for<sp/>the<sp/>BEZ2<sp/>case<sp/>is<sp/>used<sp/>when<sp/>extrapolating<sp/>a<sp/>linear<sp/>post<sp/>behavior.</highlight></codeline>
<codeline lineno="696"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>incoming(<sp/><ref refid="structst__lw_key" kindref="compound">lwKey</ref><sp/>*key0,<sp/><ref refid="structst__lw_key" kindref="compound">lwKey</ref><sp/>*key1<sp/>)</highlight></codeline>
<codeline lineno="699"><highlight class="normal">{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/>b,<sp/>d,<sp/>t,<sp/>in;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>key1-&gt;shape<sp/>)</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_LINE:</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>key1-&gt;value<sp/>-<sp/>key0-&gt;value;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>key1-&gt;next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(<sp/>key1-&gt;time<sp/>-<sp/>key0-&gt;time<sp/>)<sp/>/<sp/>(<sp/>key1-&gt;next-&gt;time<sp/>-<sp/>key0-&gt;time<sp/>);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>=<sp/>t<sp/>*<sp/>(<sp/>key1-&gt;next-&gt;value<sp/>-<sp/>key1-&gt;value<sp/>+<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TCB:</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>(<sp/>1.0f<sp/>-<sp/>key1-&gt;tension<sp/>)</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(<sp/>1.0f<sp/>-<sp/>key1-&gt;continuity<sp/>)</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(<sp/>1.0f<sp/>+<sp/>key1-&gt;bias<sp/>);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>(<sp/>1.0f<sp/>-<sp/>key1-&gt;tension<sp/>)</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(<sp/>1.0f<sp/>+<sp/>key1-&gt;continuity<sp/>)</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(<sp/>1.0f<sp/>-<sp/>key1-&gt;bias<sp/>);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>key1-&gt;value<sp/>-<sp/>key0-&gt;value;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>key1-&gt;next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(<sp/>key1-&gt;time<sp/>-<sp/>key0-&gt;time<sp/>)<sp/>/<sp/>(<sp/>key1-&gt;next-&gt;time<sp/>-<sp/>key0-&gt;time<sp/>);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>=<sp/>t<sp/>*<sp/>(<sp/>b<sp/>*<sp/>(<sp/>key1-&gt;next-&gt;value<sp/>-<sp/>key1-&gt;value<sp/>)<sp/>+<sp/>a<sp/>*<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>=<sp/>a<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_BEZI:</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_HERM:</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>=<sp/>key1-&gt;param[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>key1-&gt;next<sp/>)</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>*=<sp/>(<sp/>key1-&gt;time<sp/>-<sp/>key0-&gt;time<sp/>)<sp/>/<sp/>(<sp/>key1-&gt;next-&gt;time<sp/>-<sp/>key0-&gt;time<sp/>);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>in;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_BEZ2:</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>=<sp/>key1-&gt;param[<sp/>1<sp/>]<sp/>*<sp/>(<sp/>key1-&gt;time<sp/>-<sp/>key0-&gt;time<sp/>);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idMath::Fabs(<sp/>key1-&gt;param[<sp/>0<sp/>]<sp/>)<sp/>&gt;<sp/>1e-5f<sp/>)</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>/=<sp/>key1-&gt;param[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>*=<sp/>1e5f;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_STEP:</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>in;</highlight></codeline>
<codeline lineno="754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="758"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="759"><highlight class="comment">evalEnvelope()</highlight></codeline>
<codeline lineno="760"><highlight class="comment"></highlight></codeline>
<codeline lineno="761"><highlight class="comment">Given<sp/>a<sp/>list<sp/>of<sp/>keys<sp/>and<sp/>a<sp/>time,<sp/>returns<sp/>the<sp/>interpolated<sp/>value<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="762"><highlight class="comment">envelope<sp/>at<sp/>that<sp/>time.</highlight></codeline>
<codeline lineno="763"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>evalEnvelope(<sp/><ref refid="structst__lw_envelope" kindref="compound">lwEnvelope</ref><sp/>*env,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)</highlight></codeline>
<codeline lineno="766"><highlight class="normal">{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_key" kindref="compound">lwKey</ref><sp/>*key0,<sp/>*key1,<sp/>*skey,<sp/>*ekey;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/>h1,<sp/>h2,<sp/>h3,<sp/>h4,<sp/>in,<sp/>out,<sp/>offset<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>noff;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>there&apos;s<sp/>no<sp/>key,<sp/>the<sp/>value<sp/>is<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>env-&gt;nkeys<sp/>==<sp/>0<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0f;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>there&apos;s<sp/>only<sp/>one<sp/>key,<sp/>the<sp/>value<sp/>is<sp/>constant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>env-&gt;nkeys<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>env-&gt;key-&gt;value;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>find<sp/>the<sp/>first<sp/>and<sp/>last<sp/>keys<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/>skey<sp/>=<sp/>ekey<sp/>=<sp/>env-&gt;key;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>ekey-&gt;next<sp/>)<sp/>ekey<sp/>=<sp/>ekey-&gt;next;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>use<sp/>pre-behavior<sp/>if<sp/>time<sp/>is<sp/>before<sp/>first<sp/>key<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>time<sp/>&lt;<sp/>skey-&gt;time<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>env-&gt;behavior[<sp/>0<sp/>]<sp/>)</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BEH_RESET:</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0f;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BEH_CONSTANT:</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>skey-&gt;value;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BEH_REPEAT:</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>=<sp/>range(<sp/>time,<sp/>skey-&gt;time,<sp/>ekey-&gt;time,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BEH_OSCILLATE:</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>=<sp/>range(<sp/>time,<sp/>skey-&gt;time,<sp/>ekey-&gt;time,<sp/>&amp;noff<sp/>);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>noff<sp/>%<sp/>2<sp/>)</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>=<sp/>ekey-&gt;time<sp/>-<sp/>skey-&gt;time<sp/>-<sp/>time;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BEH_OFFSET:</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>=<sp/>range(<sp/>time,<sp/>skey-&gt;time,<sp/>ekey-&gt;time,<sp/>&amp;noff<sp/>);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>noff<sp/>*<sp/>(<sp/>ekey-&gt;value<sp/>-<sp/>skey-&gt;value<sp/>);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BEH_LINEAR:</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>outgoing(<sp/>skey,<sp/>skey-&gt;next<sp/>)</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(<sp/>skey-&gt;next-&gt;time<sp/>-<sp/>skey-&gt;time<sp/>);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out<sp/>*<sp/>(<sp/>time<sp/>-<sp/>skey-&gt;time<sp/>)<sp/>+<sp/>skey-&gt;value;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>use<sp/>post-behavior<sp/>if<sp/>time<sp/>is<sp/>after<sp/>last<sp/>key<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>time<sp/>&gt;<sp/>ekey-&gt;time<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>env-&gt;behavior[<sp/>1<sp/>]<sp/>)</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BEH_RESET:</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0f;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BEH_CONSTANT:</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ekey-&gt;value;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BEH_REPEAT:</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>=<sp/>range(<sp/>time,<sp/>skey-&gt;time,<sp/>ekey-&gt;time,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BEH_OSCILLATE:</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>=<sp/>range(<sp/>time,<sp/>skey-&gt;time,<sp/>ekey-&gt;time,<sp/>&amp;noff<sp/>);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>noff<sp/>%<sp/>2<sp/>)</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>=<sp/>ekey-&gt;time<sp/>-<sp/>skey-&gt;time<sp/>-<sp/>time;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BEH_OFFSET:</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>=<sp/>range(<sp/>time,<sp/>skey-&gt;time,<sp/>ekey-&gt;time,<sp/>&amp;noff<sp/>);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>noff<sp/>*<sp/>(<sp/>ekey-&gt;value<sp/>-<sp/>skey-&gt;value<sp/>);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BEH_LINEAR:</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>=<sp/>incoming(<sp/>ekey-&gt;prev,<sp/>ekey<sp/>)</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(<sp/>ekey-&gt;time<sp/>-<sp/>ekey-&gt;prev-&gt;time<sp/>);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>in<sp/>*<sp/>(<sp/>time<sp/>-<sp/>ekey-&gt;time<sp/>)<sp/>+<sp/>ekey-&gt;value;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>endpoints<sp/>of<sp/>the<sp/>interval<sp/>being<sp/>evaluated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/>key0<sp/>=<sp/>env-&gt;key;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>time<sp/>&gt;<sp/>key0-&gt;next-&gt;time<sp/>)</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key0<sp/>=<sp/>key0-&gt;next;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/>key1<sp/>=<sp/>key0-&gt;next;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>for<sp/>singularities<sp/>first<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>time<sp/>==<sp/>key0-&gt;time<sp/>)</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key0-&gt;value<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>time<sp/>==<sp/>key1-&gt;time<sp/>)</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key1-&gt;value<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>interval<sp/>length,<sp/>time<sp/>in<sp/>[0,<sp/>1]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/>t<sp/>=<sp/>(<sp/>time<sp/>-<sp/>key0-&gt;time<sp/>)<sp/>/<sp/>(<sp/>key1-&gt;time<sp/>-<sp/>key0-&gt;time<sp/>);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>interpolate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>key1-&gt;shape<sp/>)</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TCB:</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_BEZI:</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_HERM:</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>outgoing(<sp/>key0,<sp/>key1<sp/>);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>=<sp/>incoming(<sp/>key0,<sp/>key1<sp/>);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hermite(<sp/>t,<sp/>&amp;h1,<sp/>&amp;h2,<sp/>&amp;h3,<sp/>&amp;h4<sp/>);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h1<sp/>*<sp/>key0-&gt;value<sp/>+<sp/>h2<sp/>*<sp/>key1-&gt;value<sp/>+<sp/>h3<sp/>*<sp/>out<sp/>+<sp/>h4<sp/>*<sp/>in<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_BEZ2:</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bez2(<sp/>key0,<sp/>key1,<sp/>time<sp/>)<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_LINE:</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key0-&gt;value<sp/>+<sp/>t<sp/>*<sp/>(<sp/>key1-&gt;value<sp/>-<sp/>key0-&gt;value<sp/>)<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_STEP:</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key0-&gt;value<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offset;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="899"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="900"><highlight class="comment">lwListFree()</highlight></codeline>
<codeline lineno="901"><highlight class="comment"></highlight></codeline>
<codeline lineno="902"><highlight class="comment">Free<sp/>the<sp/>items<sp/>in<sp/>a<sp/>list.</highlight></codeline>
<codeline lineno="903"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lwListFree(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*list,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(<sp/>*freeNode<sp/>)(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>))</highlight></codeline>
<codeline lineno="906"><highlight class="normal">{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_node" kindref="compound">lwNode</ref><sp/>*node,<sp/>*next;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/>node<sp/>=<sp/>(<sp/><ref refid="structst__lw_node" kindref="compound">lwNode</ref><sp/>*<sp/>)<sp/>list;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>node<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>node-&gt;next;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>freeNode(<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal">}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="919"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="920"><highlight class="comment">lwListAdd()</highlight></codeline>
<codeline lineno="921"><highlight class="comment"></highlight></codeline>
<codeline lineno="922"><highlight class="comment">Append<sp/>a<sp/>node<sp/>to<sp/>a<sp/>list.</highlight></codeline>
<codeline lineno="923"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lwListAdd(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**list,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*node<sp/>)</highlight></codeline>
<codeline lineno="926"><highlight class="normal">{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_node" kindref="compound">lwNode</ref><sp/>*head,<sp/>*tail;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/>head<sp/>=<sp/>*((<sp/><ref refid="structst__lw_node" kindref="compound">lwNode</ref><sp/>**<sp/>)<sp/>list<sp/>);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!head<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*list<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>head<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tail<sp/>=<sp/>head;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>head<sp/>=<sp/>head-&gt;next;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/>tail-&gt;next<sp/>=<sp/>(<sp/><ref refid="structst__lw_node" kindref="compound">lwNode</ref><sp/>*<sp/>)<sp/>node;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/>((<sp/><ref refid="structst__lw_node" kindref="compound">lwNode</ref><sp/>*<sp/>)<sp/>node<sp/>)-&gt;prev<sp/>=<sp/>tail;</highlight></codeline>
<codeline lineno="940"><highlight class="normal">}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="944"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="945"><highlight class="comment">lwListInsert()</highlight></codeline>
<codeline lineno="946"><highlight class="comment"></highlight></codeline>
<codeline lineno="947"><highlight class="comment">Insert<sp/>a<sp/>node<sp/>into<sp/>a<sp/>list<sp/>in<sp/>sorted<sp/>order.</highlight></codeline>
<codeline lineno="948"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lwListInsert(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**vlist,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*vitem,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(<sp/>*compare<sp/>)(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>))</highlight></codeline>
<codeline lineno="951"><highlight class="normal">{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_node" kindref="compound">lwNode</ref><sp/>**list,<sp/>*item,<sp/>*node,<sp/>*prev;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!*vlist<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*vlist<sp/>=<sp/>vitem;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/>list<sp/>=<sp/>(<sp/><ref refid="structst__lw_node" kindref="compound">lwNode</ref><sp/>**<sp/>)<sp/>vlist;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/>item<sp/>=<sp/>(<sp/><ref refid="structst__lw_node" kindref="compound">lwNode</ref><sp/>*<sp/>)<sp/>vitem;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/>node<sp/>=<sp/>*list;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/>prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>node<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>0<sp/>&lt;<sp/>compare(<sp/>node,<sp/>item<sp/>))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;next;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!prev<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*list<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;prev<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;next<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!node<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prev-&gt;next<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;prev<sp/>=<sp/>prev;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;next<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;prev<sp/>=<sp/>prev;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prev-&gt;next<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;prev<sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal">}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="988"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="989"><highlight class="comment">flen</highlight></codeline>
<codeline lineno="990"><highlight class="comment"></highlight></codeline>
<codeline lineno="991"><highlight class="comment">This<sp/>accumulates<sp/>a<sp/>count<sp/>of<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>read.<sp/><sp/>Callers<sp/>can<sp/>set</highlight></codeline>
<codeline lineno="992"><highlight class="comment">it<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>a<sp/>sequence<sp/>of<sp/>reads<sp/>and<sp/>then<sp/>retrieve<sp/>it<sp/>to<sp/>get</highlight></codeline>
<codeline lineno="993"><highlight class="comment">the<sp/>number<sp/>of<sp/>bytes<sp/>actually<sp/>read.<sp/><sp/>If<sp/>one<sp/>of<sp/>the<sp/>I/O<sp/>functions<sp/>fails,</highlight></codeline>
<codeline lineno="994"><highlight class="comment">flen<sp/>is<sp/>set<sp/>to<sp/>an<sp/>error<sp/>code,<sp/>after<sp/>which<sp/>the<sp/>I/O<sp/>functions<sp/>ignore</highlight></codeline>
<codeline lineno="995"><highlight class="comment">read<sp/>requests<sp/>until<sp/>flen<sp/>is<sp/>reset.</highlight></codeline>
<codeline lineno="996"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLEN_ERROR<sp/>-9999</highlight></codeline>
<codeline lineno="999"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flen;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_flen(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>)<sp/>{<sp/>flen<sp/>=<sp/>i;<sp/>}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_flen(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flen;<sp/>}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*getbytes(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>)</highlight></codeline>
<codeline lineno="1007"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flen<sp/>==<sp/>FLEN_ERROR<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>size<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>=<sp/>FLEN_ERROR;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/>data<sp/>=<sp/>Mem_ClearedAlloc(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!data<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>=<sp/>FLEN_ERROR;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>size<sp/>!=<sp/>fp-&gt;Read(<sp/>data,<sp/>size<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>=<sp/>FLEN_ERROR;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>data<sp/>);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/>flen<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>skipbytes(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>)</highlight></codeline>
<codeline lineno="1032"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flen<sp/>==<sp/>FLEN_ERROR<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fp-&gt;Seek(<sp/>n,<sp/>FS_SEEK_CUR<sp/>))</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>=<sp/>FLEN_ERROR;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getI1(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp<sp/>)</highlight></codeline>
<codeline lineno="1042"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>c;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flen<sp/>==<sp/>FLEN_ERROR<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/>i<sp/>=<sp/>fp-&gt;Read(&amp;c,<sp/>1);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>=<sp/>FLEN_ERROR;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>c<sp/>&gt;<sp/>127<sp/>)<sp/>c<sp/>-=<sp/>256;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/>flen<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>getI2(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp<sp/>)</highlight></codeline>
<codeline lineno="1059"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flen<sp/>==<sp/>FLEN_ERROR<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>2<sp/>!=<sp/>fp-&gt;Read(<sp/>&amp;i,<sp/>2<sp/>))<sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>=<sp/>FLEN_ERROR;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/>BigRevBytes(<sp/>&amp;i,<sp/>2,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/>flen<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getI4(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp<sp/>)</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flen<sp/>==<sp/>FLEN_ERROR<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>4<sp/>!=<sp/>fp-&gt;Read(<sp/>&amp;i,<sp/>4<sp/>))<sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>=<sp/>FLEN_ERROR;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/>BigRevBytes(<sp/>&amp;i,<sp/>4,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/>flen<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>getU1(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp<sp/>)</highlight></codeline>
<codeline lineno="1089"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>c;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flen<sp/>==<sp/>FLEN_ERROR<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/>i<sp/>=<sp/>fp-&gt;Read(&amp;c,<sp/>1);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>=<sp/>FLEN_ERROR;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/>flen<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>getU2(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp<sp/>)</highlight></codeline>
<codeline lineno="1105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flen<sp/>==<sp/>FLEN_ERROR<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>2<sp/>!=<sp/>fp-&gt;Read(<sp/>&amp;i,<sp/>2<sp/>))<sp/>{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>=<sp/>FLEN_ERROR;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/>BigRevBytes(<sp/>&amp;i,<sp/>2,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/>flen<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getU4(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp<sp/>)</highlight></codeline>
<codeline lineno="1120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flen<sp/>==<sp/>FLEN_ERROR<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>4<sp/>!=<sp/>fp-&gt;Read(<sp/>&amp;i,<sp/>4<sp/>))<sp/>{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>=<sp/>FLEN_ERROR;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/>BigRevBytes(<sp/>&amp;i,<sp/>4,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/>flen<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getVX(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp<sp/>)</highlight></codeline>
<codeline lineno="1135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/>c;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flen<sp/>==<sp/>FLEN_ERROR<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp-&gt;Read(&amp;c,<sp/>1)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>c<sp/>!=<sp/>0xFF<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>c<sp/>&lt;&lt;<sp/>8;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp-&gt;Read(&amp;c,<sp/>1)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>|=<sp/>c;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp-&gt;Read(&amp;c,<sp/>1)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>c<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp-&gt;Read(&amp;c,<sp/>1)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>|=<sp/>c<sp/>&lt;&lt;<sp/>8;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp-&gt;Read(&amp;c,<sp/>1)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>|=<sp/>c;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>getF4(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp<sp/>)</highlight></codeline>
<codeline lineno="1179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flen<sp/>==<sp/>FLEN_ERROR<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0f;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>4<sp/>!=<sp/>fp-&gt;Read(<sp/>&amp;f,<sp/>4<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>=<sp/>FLEN_ERROR;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0f;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/>BigRevBytes(<sp/>&amp;f,<sp/>4,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/>flen<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>FLOAT_IS_DENORMAL(<sp/>f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*getS0(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp<sp/>)</highlight></codeline>
<codeline lineno="1198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>c,<sp/>len,<sp/>pos;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flen<sp/>==<sp/>FLEN_ERROR<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/>pos<sp/>=<sp/>fp-&gt;Tell();</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1;<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp-&gt;Read(&amp;c,<sp/>1)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>=<sp/>FLEN_ERROR;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>c<sp/>==<sp/>0<sp/>)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fp-&gt;Seek(<sp/>pos<sp/>+<sp/>2,<sp/>FS_SEEK_SET<sp/>))</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>=<sp/>FLEN_ERROR;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>i<sp/>+<sp/>(<sp/>i<sp/>&amp;<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)Mem_ClearedAlloc(<sp/>len<sp/>);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!s<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>=<sp/>FLEN_ERROR;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fp-&gt;Seek(<sp/>pos,<sp/>FS_SEEK_SET<sp/>))<sp/>{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>=<sp/>FLEN_ERROR;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>len<sp/>!=<sp/>fp-&gt;Read(<sp/>s,<sp/>len<sp/>))<sp/>{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>=<sp/>FLEN_ERROR;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/>flen<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sgetI1(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**bp<sp/>)</highlight></codeline>
<codeline lineno="1244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flen<sp/>==<sp/>FLEN_ERROR<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/>i<sp/>=<sp/>**bp;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&gt;<sp/>127<sp/>)<sp/>i<sp/>-=<sp/>256;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/>flen<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/>*bp++;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>sgetI2(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**bp<sp/>)</highlight></codeline>
<codeline lineno="1257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flen<sp/>==<sp/>FLEN_ERROR<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/>memcpy(<sp/>&amp;i,<sp/>*bp,<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/>BigRevBytes(<sp/>&amp;i,<sp/>2,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/>flen<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/>*bp<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sgetI4(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**bp<sp/>)</highlight></codeline>
<codeline lineno="1270"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flen<sp/>==<sp/>FLEN_ERROR<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/>memcpy(<sp/>&amp;i,<sp/>*bp,<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/>BigRevBytes(<sp/>&amp;i,<sp/>4,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/>flen<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/>*bp<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sgetU1(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**bp<sp/>)</highlight></codeline>
<codeline lineno="1283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flen<sp/>==<sp/>FLEN_ERROR<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/>c<sp/>=<sp/>**bp;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/>flen<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/>*bp++;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>sgetU2(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**bp<sp/>)</highlight></codeline>
<codeline lineno="1295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf<sp/>=<sp/>*bp;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flen<sp/>==<sp/>FLEN_ERROR<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/>i<sp/>=<sp/>(<sp/>buf[<sp/>0<sp/>]<sp/>&lt;&lt;<sp/>8<sp/>)<sp/>|<sp/>buf[<sp/>1<sp/>];</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/>flen<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/>*bp<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sgetU4(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**bp<sp/>)</highlight></codeline>
<codeline lineno="1308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flen<sp/>==<sp/>FLEN_ERROR<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/>memcpy(<sp/>&amp;i,<sp/>*bp,<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/>BigRevBytes(<sp/>&amp;i,<sp/>4,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/>flen<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/>*bp<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sgetVX(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**bp<sp/>)</highlight></codeline>
<codeline lineno="1321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf<sp/>=<sp/>*bp;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flen<sp/>==<sp/>FLEN_ERROR<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>buf[<sp/>0<sp/>]<sp/>!=<sp/>0xFF<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>buf[<sp/>0<sp/>]<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>buf[<sp/>1<sp/>];</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*bp<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>(<sp/>buf[<sp/>1<sp/>]<sp/>&lt;&lt;<sp/>16<sp/>)<sp/>|<sp/>(<sp/>buf[<sp/>2<sp/>]<sp/>&lt;&lt;<sp/>8<sp/>)<sp/>|<sp/>buf[<sp/>3<sp/>];</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*bp<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sgetF4(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**bp<sp/>)</highlight></codeline>
<codeline lineno="1342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flen<sp/>==<sp/>FLEN_ERROR<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0f;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/>memcpy(<sp/>&amp;f,<sp/>*bp,<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/>BigRevBytes(<sp/>&amp;f,<sp/>4,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/>flen<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/>*bp<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>FLOAT_IS_DENORMAL(<sp/>f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sgetS0(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**bp<sp/>)</highlight></codeline>
<codeline lineno="1359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf<sp/>=<sp/>*bp;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flen<sp/>==<sp/>FLEN_ERROR<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>strlen(<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)buf<sp/>)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>len<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*bp<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/>len<sp/>+=<sp/>len<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)Mem_ClearedAlloc(<sp/>len<sp/>);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!s<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flen<sp/>=<sp/>FLEN_ERROR;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/>memcpy(<sp/>s,<sp/>buf,<sp/>len<sp/>);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/>flen<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/>*bp<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1386"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="1387"><highlight class="comment">lwFreeLayer()</highlight></codeline>
<codeline lineno="1388"><highlight class="comment"></highlight></codeline>
<codeline lineno="1389"><highlight class="comment">Free<sp/>memory<sp/>used<sp/>by<sp/>an<sp/>lwLayer.</highlight></codeline>
<codeline lineno="1390"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lwFreeLayer(<sp/><ref refid="structst__lw_layer" kindref="compound">lwLayer</ref><sp/>*layer<sp/>)</highlight></codeline>
<codeline lineno="1393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>layer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>layer-&gt;name<sp/>)<sp/>Mem_Free(<sp/>layer-&gt;name<sp/>);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lwFreePoints(<sp/>&amp;layer-&gt;point<sp/>);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lwFreePolygons(<sp/>&amp;layer-&gt;polygon<sp/>);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lwListFree(<sp/>layer-&gt;vmap,<sp/>(void<sp/>(__cdecl<sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))lwFreeVMap<sp/>);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>layer<sp/>);</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1405"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="1406"><highlight class="comment">lwFreeObject()</highlight></codeline>
<codeline lineno="1407"><highlight class="comment"></highlight></codeline>
<codeline lineno="1408"><highlight class="comment">Free<sp/>memory<sp/>used<sp/>by<sp/>an<sp/>lwObject.</highlight></codeline>
<codeline lineno="1409"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lwFreeObject(<sp/><ref refid="structst__lw_object" kindref="compound">lwObject</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="1412"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lwListFree(<sp/>object-&gt;layer,<sp/>(void<sp/>(__cdecl<sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))lwFreeLayer<sp/>);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lwListFree(<sp/>object-&gt;env,<sp/>(void<sp/>(__cdecl<sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))lwFreeEnvelope<sp/>);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lwListFree(<sp/>object-&gt;clip,<sp/>(void<sp/>(__cdecl<sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))lwFreeClip<sp/>);</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lwListFree(<sp/>object-&gt;surf,<sp/>(void<sp/>(__cdecl<sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))lwFreeSurface<sp/>);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lwFreeTags(<sp/>&amp;object-&gt;taglist<sp/>);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1425"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="1426"><highlight class="comment">lwGetObject()</highlight></codeline>
<codeline lineno="1427"><highlight class="comment"></highlight></codeline>
<codeline lineno="1428"><highlight class="comment">Returns<sp/>the<sp/>contents<sp/>of<sp/>a<sp/>LightWave<sp/>object,<sp/>given<sp/>its<sp/>filename,<sp/>or</highlight></codeline>
<codeline lineno="1429"><highlight class="comment">NULL<sp/>if<sp/>the<sp/>file<sp/>couldn&apos;t<sp/>be<sp/>loaded.<sp/><sp/>On<sp/>failure,<sp/>failID<sp/>and<sp/>failpos</highlight></codeline>
<codeline lineno="1430"><highlight class="comment">can<sp/>be<sp/>used<sp/>to<sp/>diagnose<sp/>the<sp/>cause.</highlight></codeline>
<codeline lineno="1431"><highlight class="comment"></highlight></codeline>
<codeline lineno="1432"><highlight class="comment">1.<sp/><sp/>If<sp/>the<sp/>file<sp/>isn&apos;t<sp/>an<sp/>LWO2<sp/>or<sp/>an<sp/>LWOB,<sp/>failpos<sp/>will<sp/>contain<sp/>12<sp/>and</highlight></codeline>
<codeline lineno="1433"><highlight class="comment"><sp/><sp/><sp/><sp/>failID<sp/>will<sp/>be<sp/>unchanged.</highlight></codeline>
<codeline lineno="1434"><highlight class="comment"></highlight></codeline>
<codeline lineno="1435"><highlight class="comment">2.<sp/><sp/>If<sp/>an<sp/>error<sp/>occurs<sp/>while<sp/>reading,<sp/>failID<sp/>will<sp/>contain<sp/>the<sp/>most</highlight></codeline>
<codeline lineno="1436"><highlight class="comment"><sp/><sp/><sp/><sp/>recently<sp/>read<sp/>IFF<sp/>chunk<sp/>ID,<sp/>and<sp/>failpos<sp/>will<sp/>contain<sp/>the<sp/>value</highlight></codeline>
<codeline lineno="1437"><highlight class="comment"><sp/><sp/><sp/><sp/>returned<sp/>by<sp/>fp-&gt;Tell()<sp/>at<sp/>the<sp/>time<sp/>of<sp/>the<sp/>failure.</highlight></codeline>
<codeline lineno="1438"><highlight class="comment"></highlight></codeline>
<codeline lineno="1439"><highlight class="comment">3.<sp/><sp/>If<sp/>the<sp/>file<sp/>couldn&apos;t<sp/>be<sp/>opened,<sp/>or<sp/>an<sp/>error<sp/>occurs<sp/>while<sp/>reading</highlight></codeline>
<codeline lineno="1440"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>first<sp/>12<sp/>bytes,<sp/>both<sp/>failID<sp/>and<sp/>failpos<sp/>will<sp/>be<sp/>unchanged.</highlight></codeline>
<codeline lineno="1441"><highlight class="comment"></highlight></codeline>
<codeline lineno="1442"><highlight class="comment">If<sp/>you<sp/>don&apos;t<sp/>need<sp/>this<sp/>information,<sp/>failID<sp/>and<sp/>failpos<sp/>can<sp/>be<sp/>NULL.</highlight></codeline>
<codeline lineno="1443"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><ref refid="structst__lw_object" kindref="compound">lwObject</ref><sp/>*lwGetObject(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*failID,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*failpos<sp/>)</highlight></codeline>
<codeline lineno="1446"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_object" kindref="compound">lwObject</ref><sp/>*object;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_layer" kindref="compound">lwLayer</ref><sp/>*layer;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_node" kindref="compound">lwNode</ref><sp/>*node;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id,<sp/>formsize,<sp/>type,<sp/>cksize;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>rlen;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/>fp<sp/>=<sp/>fileSystem-&gt;OpenFileRead(<sp/>filename<sp/>);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!fp<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>the<sp/>first<sp/>12<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/>formsize<sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/>type<sp/><sp/><sp/><sp/><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>12<sp/>!=<sp/>get_flen()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fileSystem-&gt;CloseFile(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>is<sp/>this<sp/>a<sp/>LW<sp/>object?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>!=<sp/>ID_FORM<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fileSystem-&gt;CloseFile(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>failpos<sp/>)<sp/>*failpos<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>type<sp/>!=<sp/>ID_LWO2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fileSystem-&gt;CloseFile(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>type<sp/>==<sp/>ID_LWOB<sp/>)</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lwGetObject5(<sp/>filename,<sp/>failID,<sp/>failpos<sp/>);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>failpos<sp/>)<sp/>*failpos<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>an<sp/>object<sp/>and<sp/>a<sp/>default<sp/>layer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>(<ref refid="structst__lw_object" kindref="compound">lwObject</ref>*)Mem_ClearedAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_object" kindref="compound">lwObject</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/>layer<sp/>=<sp/>(<ref refid="structst__lw_layer" kindref="compound">lwLayer</ref>*)Mem_ClearedAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_layer" kindref="compound">lwLayer</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!layer<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">-&gt;layer<sp/>=<sp/>layer;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">-&gt;timeStamp<sp/>=<sp/>fp-&gt;Timestamp();</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>first<sp/>chunk<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/>cksize<sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>0<sp/>&gt;<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>process<sp/>chunks<sp/>as<sp/>they&apos;re<sp/>encountered<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cksize<sp/>+=<sp/>cksize<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_LAYR:</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>object-&gt;nlayers<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layer<sp/>=<sp/>(<ref refid="structst__lw_layer" kindref="compound">lwLayer</ref>*)Mem_ClearedAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_layer" kindref="compound">lwLayer</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!layer<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListAdd(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;object-&gt;layer,<sp/>layer<sp/>);</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">-&gt;nlayers++;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layer-&gt;index<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layer-&gt;flags<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layer-&gt;pivot[<sp/>0<sp/>]<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layer-&gt;pivot[<sp/>1<sp/>]<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layer-&gt;pivot[<sp/>2<sp/>]<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layer-&gt;name<sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>get_flen();</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>0<sp/>||<sp/>rlen<sp/>&gt;<sp/>cksize<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;=<sp/>cksize<sp/>-<sp/>2<sp/>)</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layer-&gt;parent<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>get_flen();</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>cksize<sp/>)</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp-&gt;Seek(<sp/>cksize<sp/>-<sp/>rlen,<sp/>FS_SEEK_CUR<sp/>);</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_PNTS:</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!lwGetPoints(<sp/>fp,<sp/>cksize,<sp/>&amp;layer-&gt;point<sp/>))</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_POLS:</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!lwGetPolygons(<sp/>fp,<sp/>cksize,<sp/>&amp;layer-&gt;polygon,</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layer-&gt;point.offset<sp/>))</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_VMAP:</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_VMAD:</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>(<sp/><ref refid="structst__lw_node" kindref="compound">lwNode</ref><sp/>*<sp/>)<sp/>lwGetVMap(<sp/>fp,<sp/>cksize,<sp/>layer-&gt;point.offset,</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layer-&gt;polygon.offset,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>ID_VMAD<sp/>);</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!node<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListAdd(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;layer-&gt;vmap,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layer-&gt;nvmaps++;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_PTAG:</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!lwGetPolygonTags(<sp/>fp,<sp/>cksize,<sp/>&amp;object-&gt;taglist,</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;layer-&gt;polygon<sp/>))</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_BBOX:</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layer-&gt;bbox[<sp/>i<sp/>]<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>get_flen();</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>0<sp/>||<sp/>rlen<sp/>&gt;<sp/>cksize<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>cksize<sp/>)</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp-&gt;Seek(<sp/>cksize<sp/>-<sp/>rlen,<sp/>FS_SEEK_CUR<sp/>);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TAGS:</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!lwGetTags(<sp/>fp,<sp/>cksize,<sp/>&amp;object-&gt;taglist<sp/>))</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_ENVL:</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>(<sp/><ref refid="structst__lw_node" kindref="compound">lwNode</ref><sp/>*<sp/>)<sp/>lwGetEnvelope(<sp/>fp,<sp/>cksize<sp/>);</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!node<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListAdd(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;object-&gt;env,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">-&gt;nenvs++;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_CLIP:</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>(<sp/><ref refid="structst__lw_node" kindref="compound">lwNode</ref><sp/>*<sp/>)<sp/>lwGetClip(<sp/>fp,<sp/>cksize<sp/>);</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!node<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListAdd(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;object-&gt;clip,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">-&gt;nclips++;</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_SURF:</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>(<sp/><ref refid="structst__lw_node" kindref="compound">lwNode</ref><sp/>*<sp/>)<sp/>lwGetSurface(<sp/>fp,<sp/>cksize<sp/>);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!node<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListAdd(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;object-&gt;surf,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">-&gt;nsurfs++;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_DESC:</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TEXT:</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_ICON:</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp-&gt;Seek(<sp/>cksize,<sp/>FS_SEEK_CUR<sp/>);</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>the<sp/>file?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>formsize<sp/>&lt;=<sp/>fp-&gt;Tell()<sp/>-<sp/>8<sp/>)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>next<sp/>chunk<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cksize<sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>8<sp/>!=<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/>fileSystem-&gt;CloseFile(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/>fp<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>object-&gt;nlayers<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">-&gt;nlayers<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/>layer<sp/>=<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">-&gt;layer;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>layer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lwGetBoundingBox(<sp/>&amp;layer-&gt;point,<sp/>layer-&gt;bbox<sp/>);</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lwGetPolyNormals(<sp/>&amp;layer-&gt;point,<sp/>&amp;layer-&gt;polygon<sp/>);</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!lwGetPointPolygons(<sp/>&amp;layer-&gt;point,<sp/>&amp;layer-&gt;polygon<sp/>))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!lwResolvePolySurfaces(<sp/>&amp;layer-&gt;polygon,<sp/>&amp;object-&gt;taglist,</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;object-&gt;surf,<sp/>&amp;object-&gt;nsurfs<sp/>))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lwGetVertNormals(<sp/>&amp;layer-&gt;point,<sp/>&amp;layer-&gt;polygon<sp/>);</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!lwGetPointVMaps(<sp/>&amp;layer-&gt;point,<sp/>layer-&gt;vmap<sp/>))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!lwGetPolyVMaps(<sp/>&amp;layer-&gt;polygon,<sp/>layer-&gt;vmap<sp/>))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>layer<sp/>=<sp/>layer-&gt;next;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>object;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal">Fail:</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>failID<sp/>)<sp/>*failID<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fp<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>failpos<sp/>)<sp/>*failpos<sp/>=<sp/>fp-&gt;Tell();</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fileSystem-&gt;CloseFile(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/>lwFreeObject(<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>IDs<sp/>specific<sp/>to<sp/>LWOB<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ID_SRFS<sp/><sp/>LWID_(&apos;S&apos;,&apos;R&apos;,&apos;F&apos;,&apos;S&apos;)</highlight></codeline>
<codeline lineno="1656"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_FLAG<sp/><sp/>LWID_(&apos;F&apos;,&apos;L&apos;,&apos;A&apos;,&apos;G&apos;)</highlight></codeline>
<codeline lineno="1657"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_VLUM<sp/><sp/>LWID_(&apos;V&apos;,&apos;L&apos;,&apos;U&apos;,&apos;M&apos;)</highlight></codeline>
<codeline lineno="1658"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_VDIF<sp/><sp/>LWID_(&apos;V&apos;,&apos;D&apos;,&apos;I&apos;,&apos;F&apos;)</highlight></codeline>
<codeline lineno="1659"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_VSPC<sp/><sp/>LWID_(&apos;V&apos;,&apos;S&apos;,&apos;P&apos;,&apos;C&apos;)</highlight></codeline>
<codeline lineno="1660"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_RFLT<sp/><sp/>LWID_(&apos;R&apos;,&apos;F&apos;,&apos;L&apos;,&apos;T&apos;)</highlight></codeline>
<codeline lineno="1661"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_BTEX<sp/><sp/>LWID_(&apos;B&apos;,&apos;T&apos;,&apos;E&apos;,&apos;X&apos;)</highlight></codeline>
<codeline lineno="1662"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_CTEX<sp/><sp/>LWID_(&apos;C&apos;,&apos;T&apos;,&apos;E&apos;,&apos;X&apos;)</highlight></codeline>
<codeline lineno="1663"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_DTEX<sp/><sp/>LWID_(&apos;D&apos;,&apos;T&apos;,&apos;E&apos;,&apos;X&apos;)</highlight></codeline>
<codeline lineno="1664"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_LTEX<sp/><sp/>LWID_(&apos;L&apos;,&apos;T&apos;,&apos;E&apos;,&apos;X&apos;)</highlight></codeline>
<codeline lineno="1665"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_RTEX<sp/><sp/>LWID_(&apos;R&apos;,&apos;T&apos;,&apos;E&apos;,&apos;X&apos;)</highlight></codeline>
<codeline lineno="1666"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_STEX<sp/><sp/>LWID_(&apos;S&apos;,&apos;T&apos;,&apos;E&apos;,&apos;X&apos;)</highlight></codeline>
<codeline lineno="1667"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_TTEX<sp/><sp/>LWID_(&apos;T&apos;,&apos;T&apos;,&apos;E&apos;,&apos;X&apos;)</highlight></codeline>
<codeline lineno="1668"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_TFLG<sp/><sp/>LWID_(&apos;T&apos;,&apos;F&apos;,&apos;L&apos;,&apos;G&apos;)</highlight></codeline>
<codeline lineno="1669"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_TSIZ<sp/><sp/>LWID_(&apos;T&apos;,&apos;S&apos;,&apos;I&apos;,&apos;Z&apos;)</highlight></codeline>
<codeline lineno="1670"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_TCTR<sp/><sp/>LWID_(&apos;T&apos;,&apos;C&apos;,&apos;T&apos;,&apos;R&apos;)</highlight></codeline>
<codeline lineno="1671"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_TFAL<sp/><sp/>LWID_(&apos;T&apos;,&apos;F&apos;,&apos;A&apos;,&apos;L&apos;)</highlight></codeline>
<codeline lineno="1672"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_TVEL<sp/><sp/>LWID_(&apos;T&apos;,&apos;V&apos;,&apos;E&apos;,&apos;L&apos;)</highlight></codeline>
<codeline lineno="1673"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_TCLR<sp/><sp/>LWID_(&apos;T&apos;,&apos;C&apos;,&apos;L&apos;,&apos;R&apos;)</highlight></codeline>
<codeline lineno="1674"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_TVAL<sp/><sp/>LWID_(&apos;T&apos;,&apos;V&apos;,&apos;A&apos;,&apos;L&apos;)</highlight></codeline>
<codeline lineno="1675"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_TAMP<sp/><sp/>LWID_(&apos;T&apos;,&apos;A&apos;,&apos;M&apos;,&apos;P&apos;)</highlight></codeline>
<codeline lineno="1676"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_TIMG<sp/><sp/>LWID_(&apos;T&apos;,&apos;I&apos;,&apos;M&apos;,&apos;G&apos;)</highlight></codeline>
<codeline lineno="1677"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_TAAS<sp/><sp/>LWID_(&apos;T&apos;,&apos;A&apos;,&apos;A&apos;,&apos;S&apos;)</highlight></codeline>
<codeline lineno="1678"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_TREF<sp/><sp/>LWID_(&apos;T&apos;,&apos;R&apos;,&apos;E&apos;,&apos;F&apos;)</highlight></codeline>
<codeline lineno="1679"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_TOPC<sp/><sp/>LWID_(&apos;T&apos;,&apos;O&apos;,&apos;P&apos;,&apos;C&apos;)</highlight></codeline>
<codeline lineno="1680"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_SDAT<sp/><sp/>LWID_(&apos;S&apos;,&apos;D&apos;,&apos;A&apos;,&apos;T&apos;)</highlight></codeline>
<codeline lineno="1681"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_TFP0<sp/><sp/>LWID_(&apos;T&apos;,&apos;F&apos;,&apos;P&apos;,&apos;0&apos;)</highlight></codeline>
<codeline lineno="1682"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ID_TFP1<sp/><sp/>LWID_(&apos;T&apos;,&apos;F&apos;,&apos;P&apos;,&apos;1&apos;)</highlight></codeline>
<codeline lineno="1683"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1686"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="1687"><highlight class="comment">add_clip()</highlight></codeline>
<codeline lineno="1688"><highlight class="comment"></highlight></codeline>
<codeline lineno="1689"><highlight class="comment">Add<sp/>a<sp/>clip<sp/>to<sp/>the<sp/>clip<sp/>list.<sp/><sp/>Used<sp/>to<sp/>store<sp/>the<sp/>contents<sp/>of<sp/>an<sp/>RIMG<sp/>or</highlight></codeline>
<codeline lineno="1690"><highlight class="comment">TIMG<sp/>surface<sp/>subchunk.</highlight></codeline>
<codeline lineno="1691"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>add_clip(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/><ref refid="structst__lw_clip" kindref="compound">lwClip</ref><sp/>**clist,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*nclips<sp/>)</highlight></codeline>
<codeline lineno="1694"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_clip" kindref="compound">lwClip</ref><sp/>*clip;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/>clip<sp/>=<sp/>(<ref refid="structst__lw_clip" kindref="compound">lwClip</ref>*)Mem_ClearedAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_clip" kindref="compound">lwClip</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!clip<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/>clip-&gt;contrast.val<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/>clip-&gt;brightness.val<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/>clip-&gt;saturation.val<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/>clip-&gt;gamma.val<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>p<sp/>=<sp/>strstr(<sp/>s,<sp/></highlight><highlight class="stringliteral">&quot;(sequence)&quot;</highlight><highlight class="normal"><sp/>))<sp/>{</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[<sp/>-1<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;type<sp/>=<sp/>ID_ISEQ;</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;source.seq.prefix<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;source.seq.digits<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;type<sp/>=<sp/>ID_STIL;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;source.still.name<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/>*nclips++;</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/>clip-&gt;index<sp/>=<sp/>*nclips;</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/>lwListAdd(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)clist,<sp/>clip<sp/>);</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clip-&gt;index;</highlight></codeline>
<codeline lineno="1723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1727"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="1728"><highlight class="comment">add_tvel()</highlight></codeline>
<codeline lineno="1729"><highlight class="comment"></highlight></codeline>
<codeline lineno="1730"><highlight class="comment">Add<sp/>a<sp/>triple<sp/>of<sp/>envelopes<sp/>to<sp/>simulate<sp/>the<sp/>old<sp/>texture<sp/>velocity</highlight></codeline>
<codeline lineno="1731"><highlight class="comment">parameters.</highlight></codeline>
<codeline lineno="1732"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>add_tvel(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pos[],<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>vel[],<sp/><ref refid="structst__lw_envelope" kindref="compound">lwEnvelope</ref><sp/>**elist,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*nenvs<sp/>)</highlight></codeline>
<codeline lineno="1735"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_envelope" kindref="compound">lwEnvelope</ref><sp/>*env;</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_key" kindref="compound">lwKey</ref><sp/>*key0,<sp/>*key1;</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>env<sp/>=<sp/>(<ref refid="structst__lw_envelope" kindref="compound">lwEnvelope</ref>*)Mem_ClearedAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_envelope" kindref="compound">lwEnvelope</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key0<sp/>=<sp/>(<ref refid="structst__lw_key" kindref="compound">lwKey</ref>*)Mem_ClearedAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_key" kindref="compound">lwKey</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key1<sp/>=<sp/>(<ref refid="structst__lw_key" kindref="compound">lwKey</ref>*)Mem_ClearedAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_key" kindref="compound">lwKey</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!env<sp/>||<sp/>!key0<sp/>||<sp/>!key1<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key0-&gt;next<sp/>=<sp/>key1;</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key0-&gt;value<sp/>=<sp/>pos[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key0-&gt;time<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key1-&gt;prev<sp/>=<sp/>key0;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key1-&gt;value<sp/>=<sp/>pos[<sp/>i<sp/>]<sp/>+<sp/>vel[<sp/>i<sp/>]<sp/>*<sp/>30.0f;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key1-&gt;time<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key0-&gt;shape<sp/>=<sp/>key1-&gt;shape<sp/>=<sp/>ID_LINE;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>env-&gt;index<sp/>=<sp/>*nenvs<sp/>+<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>env-&gt;type<sp/>=<sp/>0x0301<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>env-&gt;name<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)Mem_ClearedAlloc(<sp/>11<sp/>);</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>env-&gt;name<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(<sp/>env-&gt;name,<sp/></highlight><highlight class="stringliteral">&quot;Position.X&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env-&gt;name[<sp/>9<sp/>]<sp/>+=<sp/>i;</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>env-&gt;key<sp/>=<sp/>key0;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>env-&gt;nkeys<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>env-&gt;behavior[<sp/>0<sp/>]<sp/>=<sp/>BEH_LINEAR;</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>env-&gt;behavior[<sp/>1<sp/>]<sp/>=<sp/>BEH_LINEAR;</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lwListAdd(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)elist,<sp/>env<sp/>);</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/>*nenvs<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>env-&gt;index<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="1771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1775"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="1776"><highlight class="comment">get_texture()</highlight></codeline>
<codeline lineno="1777"><highlight class="comment"></highlight></codeline>
<codeline lineno="1778"><highlight class="comment">Create<sp/>a<sp/>new<sp/>texture<sp/>for<sp/>BTEX,<sp/>CTEX,<sp/>etc.<sp/>subchunks.</highlight></codeline>
<codeline lineno="1779"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref><sp/>*get_texture(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s<sp/>)</highlight></codeline>
<codeline lineno="1782"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref><sp/>*tex;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/>tex<sp/>=<sp/>(<ref refid="structst__lw_texture" kindref="compound">lwTexture</ref>*)Mem_ClearedAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!tex<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/>tex-&gt;tmap.size.val[<sp/>0<sp/>]<sp/>=</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/>tex-&gt;tmap.size.val[<sp/>1<sp/>]<sp/>=</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/>tex-&gt;tmap.size.val[<sp/>2<sp/>]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/>tex-&gt;opacity.val<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/>tex-&gt;enabled<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>strstr(<sp/>s,<sp/></highlight><highlight class="stringliteral">&quot;Image<sp/>Map&quot;</highlight><highlight class="normal"><sp/>))<sp/>{</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;type<sp/>=<sp/>ID_IMAP;</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>strstr(<sp/>s,<sp/></highlight><highlight class="stringliteral">&quot;Planar&quot;</highlight><highlight class="normal"><sp/>))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.projection<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>if<sp/>(<sp/>strstr(<sp/>s,<sp/></highlight><highlight class="stringliteral">&quot;Cylindrical&quot;</highlight><highlight class="normal"><sp/>))<sp/>tex-&gt;param.imap.projection<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>if<sp/>(<sp/>strstr(<sp/>s,<sp/></highlight><highlight class="stringliteral">&quot;Spherical&quot;</highlight><highlight class="normal"><sp/>))<sp/><sp/><sp/>tex-&gt;param.imap.projection<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>if<sp/>(<sp/>strstr(<sp/>s,<sp/></highlight><highlight class="stringliteral">&quot;Cubic&quot;</highlight><highlight class="normal"><sp/>))<sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.projection<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>if<sp/>(<sp/>strstr(<sp/>s,<sp/></highlight><highlight class="stringliteral">&quot;Front&quot;</highlight><highlight class="normal"><sp/>))<sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.projection<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.aa_strength<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.amplitude.val<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;type<sp/>=<sp/>ID_PROC;</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.proc.name<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tex;</highlight></codeline>
<codeline lineno="1811"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1815"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="1816"><highlight class="comment">lwGetSurface5()</highlight></codeline>
<codeline lineno="1817"><highlight class="comment"></highlight></codeline>
<codeline lineno="1818"><highlight class="comment">Read<sp/>an<sp/>lwSurface<sp/>from<sp/>an<sp/>LWOB<sp/>file.</highlight></codeline>
<codeline lineno="1819"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><ref refid="structst__lw_surface" kindref="compound">lwSurface</ref><sp/>*lwGetSurface5(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cksize,<sp/><ref refid="structst__lw_object" kindref="compound">lwObject</ref><sp/>*obj<sp/>)</highlight></codeline>
<codeline lineno="1822"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_surface" kindref="compound">lwSurface</ref><sp/>*surf;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref><sp/>*tex;</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_plugin" kindref="compound">lwPlugin</ref><sp/>*shdr;</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v[<sp/>3<sp/>];</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id,<sp/>flags;</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>sz;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/>rlen,<sp/>i;</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>the<sp/>Surface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/>surf<sp/>=<sp/>(<ref refid="structst__lw_surface" kindref="compound">lwSurface</ref>*)Mem_ClearedAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_surface" kindref="compound">lwSurface</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!surf<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>non-zero<sp/>defaults<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;color.rgb[<sp/>0<sp/>]<sp/>=<sp/>0.78431f;</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;color.rgb[<sp/>1<sp/>]<sp/>=<sp/>0.78431f;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;color.rgb[<sp/>2<sp/>]<sp/>=<sp/>0.78431f;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;diffuse.val<sp/><sp/><sp/><sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;glossiness.val<sp/>=<sp/>0.4f;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;bump.val<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;eta.val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;sideflags<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>remember<sp/>where<sp/>we<sp/>started<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/>pos<sp/>=<sp/>fp-&gt;Tell();</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;name<sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>subchunk<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>0<sp/>&gt;<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>process<sp/>subchunks<sp/>as<sp/>they&apos;re<sp/>encountered<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>+=<sp/>sz<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_COLR:</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;color.rgb[<sp/>0<sp/>]<sp/>=<sp/>getU1(<sp/>fp<sp/>)<sp/>/<sp/>255.0f;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;color.rgb[<sp/>1<sp/>]<sp/>=<sp/>getU1(<sp/>fp<sp/>)<sp/>/<sp/>255.0f;</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;color.rgb[<sp/>2<sp/>]<sp/>=<sp/>getU1(<sp/>fp<sp/>)<sp/>/<sp/>255.0f;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_FLAG:</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flags<sp/>&amp;<sp/><sp/><sp/>4<sp/>)<sp/>surf-&gt;smooth<sp/>=<sp/>1.56207f;</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flags<sp/>&amp;<sp/><sp/><sp/>8<sp/>)<sp/>surf-&gt;color_hilite.val<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flags<sp/>&amp;<sp/><sp/>16<sp/>)<sp/>surf-&gt;color_filter.val<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flags<sp/>&amp;<sp/>128<sp/>)<sp/>surf-&gt;dif_sharp.val<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flags<sp/>&amp;<sp/>256<sp/>)<sp/>surf-&gt;sideflags<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flags<sp/>&amp;<sp/>512<sp/>)<sp/>surf-&gt;add_trans.val<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_LUMI:</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;luminosity.val<sp/>=<sp/>getI2(<sp/>fp<sp/>)<sp/>/<sp/>256.0f;</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_VLUM:</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;luminosity.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_DIFF:</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;diffuse.val<sp/>=<sp/>getI2(<sp/>fp<sp/>)<sp/>/<sp/>256.0f;</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_VDIF:</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;diffuse.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_SPEC:</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;specularity.val<sp/>=<sp/>getI2(<sp/>fp<sp/>)<sp/>/<sp/>256.0f;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_VSPC:</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;specularity.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"></highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_GLOS:</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;glossiness.val<sp/>=<sp/>(<sp/>float<sp/>)<sp/>logf(<sp/>(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>getU2(<sp/>fp<sp/>))<sp/>/<sp/>20.7944f;</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_SMAN:</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;smooth<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_REFL:</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;reflection.val.val<sp/>=<sp/>getI2(<sp/>fp<sp/>)<sp/>/<sp/>256.0f;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_RFLT:</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;reflection.options<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_RIMG:</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;reflection.cindex<sp/>=<sp/>add_clip(<sp/>s,<sp/>&amp;obj-&gt;clip,<sp/>&amp;obj-&gt;nclips<sp/>);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;reflection.options<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_RSAN:</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;reflection.seam_angle<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TRAN:</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;transparency.val.val<sp/>=<sp/>getI2(<sp/>fp<sp/>)<sp/>/<sp/>256.0f;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_RIND:</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;eta.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_BTEX:</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)getbytes(<sp/>fp,<sp/>sz<sp/>);</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex<sp/>=<sp/>get_texture(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListAdd(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;surf-&gt;bump.tex,<sp/>tex<sp/>);</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_CTEX:</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)getbytes(<sp/>fp,<sp/>sz<sp/>);</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex<sp/>=<sp/>get_texture(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListAdd(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;surf-&gt;color.tex,<sp/>tex<sp/>);</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_DTEX:</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)getbytes(<sp/>fp,<sp/>sz<sp/>);</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex<sp/>=<sp/>get_texture(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListAdd(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;surf-&gt;diffuse.tex,<sp/>tex<sp/>);</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_LTEX:</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)getbytes(<sp/>fp,<sp/>sz<sp/>);</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex<sp/>=<sp/>get_texture(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListAdd(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;surf-&gt;luminosity.tex,<sp/>tex<sp/>);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_RTEX:</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)getbytes(<sp/>fp,<sp/>sz<sp/>);</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex<sp/>=<sp/>get_texture(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListAdd(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;surf-&gt;reflection.val.tex,<sp/>tex<sp/>);</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_STEX:</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)getbytes(<sp/>fp,<sp/>sz<sp/>);</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex<sp/>=<sp/>get_texture(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListAdd(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;surf-&gt;specularity.tex,<sp/>tex<sp/>);</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TTEX:</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)getbytes(<sp/>fp,<sp/>sz<sp/>);</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex<sp/>=<sp/>get_texture(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListAdd(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;surf-&gt;transparency.val.tex,<sp/>tex<sp/>);</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TFLG:</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flags<sp/>&amp;<sp/>1<sp/>)<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flags<sp/>&amp;<sp/>2<sp/>)<sp/>i<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flags<sp/>&amp;<sp/>4<sp/>)<sp/>i<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;axis<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tex-&gt;type<sp/>==<sp/>ID_IMAP<sp/>)</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.axis<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.proc.axis<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flags<sp/>&amp;<sp/><sp/>8<sp/>)<sp/>tex-&gt;tmap.coord_sys<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flags<sp/>&amp;<sp/>16<sp/>)<sp/>tex-&gt;negative<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flags<sp/>&amp;<sp/>32<sp/>)<sp/>tex-&gt;param.imap.pblend<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>flags<sp/>&amp;<sp/>64<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.aa_strength<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.aas_flags<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TSIZ:</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;tmap.size.val[<sp/>i<sp/>]<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TCTR:</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;tmap.center.val[<sp/>i<sp/>]<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TFAL:</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;tmap.falloff.val[<sp/>i<sp/>]<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TVEL:</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[<sp/>i<sp/>]<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;tmap.center.eindex<sp/>=<sp/>add_tvel(<sp/>tex-&gt;tmap.center.val,<sp/>v,</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;obj-&gt;env,<sp/>&amp;obj-&gt;nenvs<sp/>);</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TCLR:</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tex-&gt;type<sp/>==<sp/>ID_PROC<sp/>)</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.proc.value[<sp/>i<sp/>]<sp/>=<sp/>getU1(<sp/>fp<sp/>)<sp/>/<sp/>255.0f;</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TVAL:</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.proc.value[<sp/>0<sp/>]<sp/>=<sp/>getI2(<sp/>fp<sp/>)<sp/>/<sp/>256.0f;</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TAMP:</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tex-&gt;type<sp/>==<sp/>ID_IMAP<sp/>)</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.amplitude.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TIMG:</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.cindex<sp/>=<sp/>add_clip(<sp/>s,<sp/>&amp;obj-&gt;clip,<sp/>&amp;obj-&gt;nclips<sp/>);</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TAAS:</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.aa_strength<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.aas_flags<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TREF:</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;tmap.ref_object<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)getbytes(<sp/>fp,<sp/>sz<sp/>);</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TOPC:</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;opacity.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TFP0:</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tex-&gt;type<sp/>==<sp/>ID_IMAP<sp/>)</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.wrapw.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TFP1:</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tex-&gt;type<sp/>==<sp/>ID_IMAP<sp/>)</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.wraph.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_SHDR:</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shdr<sp/>=<sp/>(<ref refid="structst__lw_plugin" kindref="compound">lwPlugin</ref>*)Mem_ClearedAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_plugin" kindref="compound">lwPlugin</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!shdr<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shdr-&gt;name<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)getbytes(<sp/>fp,<sp/>sz<sp/>);</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListAdd(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;surf-&gt;shader,<sp/>shdr<sp/>);</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;nshaders++;</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_SDAT:</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shdr-&gt;data<sp/>=<sp/>getbytes(<sp/>fp,<sp/>sz<sp/>);</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>while<sp/>reading<sp/>current<sp/>subchunk?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>get_flen();</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>0<sp/>||<sp/>rlen<sp/>&gt;<sp/>sz<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>skip<sp/>unread<sp/>parts<sp/>of<sp/>the<sp/>current<sp/>subchunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2095"><highlight class="normal"></highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>sz<sp/>)</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp-&gt;Seek(<sp/>sz<sp/>-<sp/>rlen,<sp/>FS_SEEK_CUR<sp/>);</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>the<sp/>SURF<sp/>chunk?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cksize<sp/>&lt;=<sp/>fp-&gt;Tell()<sp/>-<sp/>pos<sp/>)</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>next<sp/>subchunk<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"></highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>6<sp/>!=<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>surf;</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal">Fail:</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>surf<sp/>)<sp/>lwFreeSurface(<sp/>surf<sp/>);</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2121"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="2122"><highlight class="comment">lwGetPolygons5()</highlight></codeline>
<codeline lineno="2123"><highlight class="comment"></highlight></codeline>
<codeline lineno="2124"><highlight class="comment">Read<sp/>polygon<sp/>records<sp/>from<sp/>a<sp/>POLS<sp/>chunk<sp/>in<sp/>an<sp/>LWOB<sp/>file.<sp/><sp/>The<sp/>polygons</highlight></codeline>
<codeline lineno="2125"><highlight class="comment">are<sp/>added<sp/>to<sp/>the<sp/>array<sp/>in<sp/>the<sp/>lwPolygonList.</highlight></codeline>
<codeline lineno="2126"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lwGetPolygons5(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cksize,<sp/><ref refid="structst__lw_polygon_list" kindref="compound">lwPolygonList</ref><sp/>*plist,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ptoffset<sp/>)</highlight></codeline>
<codeline lineno="2129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_polygon" kindref="compound">lwPolygon</ref><sp/>*pp;</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_pol_vert" kindref="compound">lwPolVert</ref><sp/>*pv;</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/>*bp;</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>nv,<sp/>nverts,<sp/>npols;</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cksize<sp/>==<sp/>0<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"></highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>the<sp/>whole<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2139"><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/>buf<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)getbytes(<sp/>fp,<sp/>cksize<sp/>);</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!buf<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>count<sp/>the<sp/>polygons<sp/>and<sp/>vertices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal"></highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/>nverts<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/>npols<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/>bp<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>bp<sp/>&lt;<sp/>buf<sp/>+<sp/>cksize<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nv<sp/>=<sp/>sgetU2(<sp/>&amp;bp<sp/>);</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nverts<sp/>+=<sp/>nv;</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>npols++;</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bp<sp/>+=<sp/>2<sp/>*<sp/>nv;</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>sgetI2(<sp/>&amp;bp<sp/>);</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&lt;<sp/>0<sp/>)<sp/>bp<sp/>+=<sp/>2;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>detail<sp/>polygons<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!lwAllocPolygons(<sp/>plist,<sp/>npols,<sp/>nverts<sp/>))</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fill<sp/>in<sp/>the<sp/>new<sp/>polygons<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"></highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/>bp<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/>pp<sp/>=<sp/>plist-&gt;pol<sp/>+<sp/>plist-&gt;offset;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/>pv<sp/>=<sp/>plist-&gt;pol[<sp/>0<sp/>].v<sp/>+<sp/>plist-&gt;voffset;</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>npols;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nv<sp/>=<sp/>sgetU2(<sp/>&amp;bp<sp/>);</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;nverts<sp/>=<sp/>nv;</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;type<sp/>=<sp/>ID_FACE;</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!pp-&gt;v<sp/>)<sp/>pp-&gt;v<sp/>=<sp/>pv;</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nv;<sp/>j++<sp/>)</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pv[<sp/>j<sp/>].index<sp/>=<sp/>sgetU2(<sp/>&amp;bp<sp/>)<sp/>+<sp/>ptoffset;</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>sgetI2(<sp/>&amp;bp<sp/>);</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>-j;</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;surf<sp/>=<sp/>(<sp/><ref refid="structst__lw_surface" kindref="compound">lwSurface</ref><sp/>*<sp/>)<sp/>j;</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pp++;</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pv<sp/>+=<sp/>nv;</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/>Mem_Free(<sp/>buf<sp/>);</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal">Fail:</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>buf<sp/>)<sp/>Mem_Free(<sp/>buf<sp/>);</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/>lwFreePolygons(<sp/>plist<sp/>);</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2199"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="2200"><highlight class="comment">getLWObject5()</highlight></codeline>
<codeline lineno="2201"><highlight class="comment"></highlight></codeline>
<codeline lineno="2202"><highlight class="comment">Returns<sp/>the<sp/>contents<sp/>of<sp/>an<sp/>LWOB,<sp/>given<sp/>its<sp/>filename,<sp/>or<sp/>NULL<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="2203"><highlight class="comment">file<sp/>couldn&apos;t<sp/>be<sp/>loaded.<sp/><sp/>On<sp/>failure,<sp/>failID<sp/>and<sp/>failpos<sp/>can<sp/>be<sp/>used</highlight></codeline>
<codeline lineno="2204"><highlight class="comment">to<sp/>diagnose<sp/>the<sp/>cause.</highlight></codeline>
<codeline lineno="2205"><highlight class="comment"></highlight></codeline>
<codeline lineno="2206"><highlight class="comment">1.<sp/><sp/>If<sp/>the<sp/>file<sp/>isn&apos;t<sp/>an<sp/>LWOB,<sp/>failpos<sp/>will<sp/>contain<sp/>12<sp/>and<sp/>failID<sp/>will</highlight></codeline>
<codeline lineno="2207"><highlight class="comment"><sp/><sp/><sp/><sp/>be<sp/>unchanged.</highlight></codeline>
<codeline lineno="2208"><highlight class="comment"></highlight></codeline>
<codeline lineno="2209"><highlight class="comment">2.<sp/><sp/>If<sp/>an<sp/>error<sp/>occurs<sp/>while<sp/>reading<sp/>an<sp/>LWOB,<sp/>failID<sp/>will<sp/>contain<sp/>the</highlight></codeline>
<codeline lineno="2210"><highlight class="comment"><sp/><sp/><sp/><sp/>most<sp/>recently<sp/>read<sp/>IFF<sp/>chunk<sp/>ID,<sp/>and<sp/>failpos<sp/>will<sp/>contain<sp/>the</highlight></codeline>
<codeline lineno="2211"><highlight class="comment"><sp/><sp/><sp/><sp/>value<sp/>returned<sp/>by<sp/>fp-&gt;Tell()<sp/>at<sp/>the<sp/>time<sp/>of<sp/>the<sp/>failure.</highlight></codeline>
<codeline lineno="2212"><highlight class="comment"></highlight></codeline>
<codeline lineno="2213"><highlight class="comment">3.<sp/><sp/>If<sp/>the<sp/>file<sp/>couldn&apos;t<sp/>be<sp/>opened,<sp/>or<sp/>an<sp/>error<sp/>occurs<sp/>while<sp/>reading</highlight></codeline>
<codeline lineno="2214"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>first<sp/>12<sp/>bytes,<sp/>both<sp/>failID<sp/>and<sp/>failpos<sp/>will<sp/>be<sp/>unchanged.</highlight></codeline>
<codeline lineno="2215"><highlight class="comment"></highlight></codeline>
<codeline lineno="2216"><highlight class="comment">If<sp/>you<sp/>don&apos;t<sp/>need<sp/>this<sp/>information,<sp/>failID<sp/>and<sp/>failpos<sp/>can<sp/>be<sp/>NULL.</highlight></codeline>
<codeline lineno="2217"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><ref refid="structst__lw_object" kindref="compound">lwObject</ref><sp/>*lwGetObject5(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*failID,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*failpos<sp/>)</highlight></codeline>
<codeline lineno="2220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_object" kindref="compound">lwObject</ref><sp/>*object;</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_layer" kindref="compound">lwLayer</ref><sp/>*layer;</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_node" kindref="compound">lwNode</ref><sp/>*node;</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id,<sp/>formsize,<sp/>type,<sp/>cksize;</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>open<sp/>the<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//fp<sp/>=<sp/>fopen(<sp/>filename,<sp/>&quot;rb&quot;<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(<sp/>!fp<sp/>)<sp/>return<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>the<sp/>first<sp/>12<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/>fp<sp/>=<sp/>fileSystem-&gt;OpenFileRead(<sp/>filename<sp/>);</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!fp<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/>formsize<sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/>type<sp/><sp/><sp/><sp/><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>12<sp/>!=<sp/>get_flen()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fileSystem-&gt;CloseFile(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>LWOB?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>!=<sp/>ID_FORM<sp/>||<sp/>type<sp/>!=<sp/>ID_LWOB<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fileSystem-&gt;CloseFile(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>failpos<sp/>)<sp/>*failpos<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>an<sp/>object<sp/>and<sp/>a<sp/>default<sp/>layer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>(<ref refid="structst__lw_object" kindref="compound">lwObject</ref>*)Mem_ClearedAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_object" kindref="compound">lwObject</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail2;</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"></highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/>layer<sp/>=<sp/>(<ref refid="structst__lw_layer" kindref="compound">lwLayer</ref>*)Mem_ClearedAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_layer" kindref="compound">lwLayer</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!layer<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail2;</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">-&gt;layer<sp/>=<sp/>layer;</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">-&gt;nlayers<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>first<sp/>chunk<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/>cksize<sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>0<sp/>&gt;<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail2;</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>process<sp/>chunks<sp/>as<sp/>they&apos;re<sp/>encountered<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cksize<sp/>+=<sp/>cksize<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_PNTS:</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!lwGetPoints(<sp/>fp,<sp/>cksize,<sp/>&amp;layer-&gt;point<sp/>))</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail2;</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_POLS:</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!lwGetPolygons5(<sp/>fp,<sp/>cksize,<sp/>&amp;layer-&gt;polygon,</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layer-&gt;point.offset<sp/>))</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail2;</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_SRFS:</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!lwGetTags(<sp/>fp,<sp/>cksize,<sp/>&amp;object-&gt;taglist<sp/>))</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail2;</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_SURF:</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>(<sp/><ref refid="structst__lw_node" kindref="compound">lwNode</ref><sp/>*<sp/>)<sp/>lwGetSurface5(<sp/>fp,<sp/>cksize,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!node<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail2;</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListAdd(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;object-&gt;surf,<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">-&gt;nsurfs++;</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp-&gt;Seek(<sp/>cksize,<sp/>FS_SEEK_CUR<sp/>);</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>the<sp/>file?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>formsize<sp/>&lt;=<sp/>fp-&gt;Tell()<sp/>-<sp/>8<sp/>)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>next<sp/>chunk<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal"></highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cksize<sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>8<sp/>!=<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail2;</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"></highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/>fileSystem-&gt;CloseFile(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/>fp<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/>lwGetBoundingBox(<sp/>&amp;layer-&gt;point,<sp/>layer-&gt;bbox<sp/>);</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/>lwGetPolyNormals(<sp/>&amp;layer-&gt;point,<sp/>&amp;layer-&gt;polygon<sp/>);</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!lwGetPointPolygons(<sp/>&amp;layer-&gt;point,<sp/>&amp;layer-&gt;polygon<sp/>))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail2;</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!lwResolvePolySurfaces(<sp/>&amp;layer-&gt;polygon,<sp/>&amp;object-&gt;taglist,</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;object-&gt;surf,<sp/>&amp;object-&gt;nsurfs<sp/>))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail2;</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/>lwGetVertNormals(<sp/>&amp;layer-&gt;point,<sp/>&amp;layer-&gt;polygon<sp/>);</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>object;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"></highlight></codeline>
<codeline lineno="2331"><highlight class="normal">Fail2:</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>failID<sp/>)<sp/>*failID<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fp<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>failpos<sp/>)<sp/>*failpos<sp/>=<sp/>fp-&gt;Tell();</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fileSystem-&gt;CloseFile(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/>lwFreeObject(<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2342"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="2343"><highlight class="comment">lwFreePoints()</highlight></codeline>
<codeline lineno="2344"><highlight class="comment"></highlight></codeline>
<codeline lineno="2345"><highlight class="comment">Free<sp/>the<sp/>memory<sp/>used<sp/>by<sp/>an<sp/>lwPointList.</highlight></codeline>
<codeline lineno="2346"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2347"><highlight class="normal"></highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lwFreePoints(<sp/><ref refid="structst__lw_point_list" kindref="compound">lwPointList</ref><sp/>*point<sp/>)</highlight></codeline>
<codeline lineno="2349"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"></highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>point<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>point-&gt;pt<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>point-&gt;count;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>point-&gt;pt[<sp/>i<sp/>].pol<sp/>)<sp/>Mem_Free(<sp/>point-&gt;pt[<sp/>i<sp/>].pol<sp/>);</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>point-&gt;pt[<sp/>i<sp/>].vm<sp/>)<sp/>Mem_Free(<sp/>point-&gt;pt[<sp/>i<sp/>].vm<sp/>);</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>point-&gt;pt<sp/>);</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset(<sp/>point,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_point_list" kindref="compound">lwPointList</ref><sp/>));</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"></highlight></codeline>
<codeline lineno="2364"><highlight class="normal"></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2366"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="2367"><highlight class="comment">lwFreePolygons()</highlight></codeline>
<codeline lineno="2368"><highlight class="comment"></highlight></codeline>
<codeline lineno="2369"><highlight class="comment">Free<sp/>the<sp/>memory<sp/>used<sp/>by<sp/>an<sp/>lwPolygonList.</highlight></codeline>
<codeline lineno="2370"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lwFreePolygons(<sp/><ref refid="structst__lw_polygon_list" kindref="compound">lwPolygonList</ref><sp/>*plist<sp/>)</highlight></codeline>
<codeline lineno="2373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"></highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>plist<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>plist-&gt;pol<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>plist-&gt;count;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>plist-&gt;pol[<sp/>i<sp/>].v<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>plist-&gt;pol[<sp/>i<sp/>].nverts;<sp/>j++<sp/>)</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>plist-&gt;pol[<sp/>i<sp/>].v[<sp/>j<sp/>].vm<sp/>)</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>plist-&gt;pol[<sp/>i<sp/>].v[<sp/>j<sp/>].vm<sp/>);</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>plist-&gt;pol[<sp/>0<sp/>].v<sp/>)</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>plist-&gt;pol[<sp/>0<sp/>].v<sp/>);</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>plist-&gt;pol<sp/>);</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset(<sp/>plist,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_polygon_list" kindref="compound">lwPolygonList</ref><sp/>));</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2395"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="2396"><highlight class="comment">lwGetPoints()</highlight></codeline>
<codeline lineno="2397"><highlight class="comment"></highlight></codeline>
<codeline lineno="2398"><highlight class="comment">Read<sp/>point<sp/>records<sp/>from<sp/>a<sp/>PNTS<sp/>chunk<sp/>in<sp/>an<sp/>LWO2<sp/>file.<sp/><sp/>The<sp/>points<sp/>are</highlight></codeline>
<codeline lineno="2399"><highlight class="comment">added<sp/>to<sp/>the<sp/>array<sp/>in<sp/>the<sp/>lwPointList.</highlight></codeline>
<codeline lineno="2400"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lwGetPoints(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cksize,<sp/><ref refid="structst__lw_point_list" kindref="compound">lwPointList</ref><sp/>*point<sp/>)</highlight></codeline>
<codeline lineno="2403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*f;</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>np,<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cksize<sp/>==<sp/>1<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>extend<sp/>the<sp/>point<sp/>array<sp/>to<sp/>hold<sp/>the<sp/>new<sp/>points<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2410"><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/>np<sp/>=<sp/>cksize<sp/>/<sp/>12;</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/>point-&gt;offset<sp/>=<sp/>point-&gt;count;</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/>point-&gt;count<sp/>+=<sp/>np;</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__lw_point" kindref="compound">lwPoint</ref><sp/>*oldpt<sp/>=<sp/>point-&gt;pt;</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/>point-&gt;pt<sp/>=<sp/>(<ref refid="structst__lw_point" kindref="compound">lwPoint</ref>*)Mem_Alloc(<sp/>point-&gt;count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_point" kindref="compound">lwPoint</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!point-&gt;pt<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>oldpt<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>point-&gt;pt,<sp/>oldpt,<sp/>point-&gt;offset<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_point" kindref="compound">lwPoint</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>oldpt<sp/>);</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>&amp;point-&gt;pt[<sp/>point-&gt;offset<sp/>],<sp/>0,<sp/>np<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_point" kindref="compound">lwPoint</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>the<sp/>whole<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2424"><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>getbytes(<sp/>fp,<sp/>cksize<sp/>);</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!f<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/>BigRevBytes(<sp/>f,<sp/>4,<sp/>np<sp/>*<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>assign<sp/>position<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0,<sp/>j<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>np;<sp/>i++,<sp/>j<sp/>+=<sp/>3<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point-&gt;pt[<sp/>i<sp/>].pos[<sp/>0<sp/>]<sp/>=<sp/>f[<sp/>j<sp/>];</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point-&gt;pt[<sp/>i<sp/>].pos[<sp/>1<sp/>]<sp/>=<sp/>f[<sp/>j<sp/>+<sp/>1<sp/>];</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point-&gt;pt[<sp/>i<sp/>].pos[<sp/>2<sp/>]<sp/>=<sp/>f[<sp/>j<sp/>+<sp/>2<sp/>];</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/>Mem_Free(<sp/>f<sp/>);</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2443"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="2444"><highlight class="comment">lwGetBoundingBox()</highlight></codeline>
<codeline lineno="2445"><highlight class="comment"></highlight></codeline>
<codeline lineno="2446"><highlight class="comment">Calculate<sp/>the<sp/>bounding<sp/>box<sp/>for<sp/>a<sp/>point<sp/>list,<sp/>but<sp/>only<sp/>if<sp/>the<sp/>bounding</highlight></codeline>
<codeline lineno="2447"><highlight class="comment">box<sp/>hasn&apos;t<sp/>already<sp/>been<sp/>initialized.</highlight></codeline>
<codeline lineno="2448"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lwGetBoundingBox(<sp/><ref refid="structst__lw_point_list" kindref="compound">lwPointList</ref><sp/>*point,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bbox[]<sp/>)</highlight></codeline>
<codeline lineno="2451"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>point-&gt;count<sp/>==<sp/>0<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"></highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bbox[<sp/>i<sp/>]<sp/>!=<sp/>0.0f<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"></highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/>bbox[<sp/>0<sp/>]<sp/>=<sp/>bbox[<sp/>1<sp/>]<sp/>=<sp/>bbox[<sp/>2<sp/>]<sp/>=<sp/>1e20f;</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/>bbox[<sp/>3<sp/>]<sp/>=<sp/>bbox[<sp/>4<sp/>]<sp/>=<sp/>bbox[<sp/>5<sp/>]<sp/>=<sp/>-1e20f;</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>point-&gt;count;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>3;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bbox[<sp/>j<sp/>]<sp/>&gt;<sp/>point-&gt;pt[<sp/>i<sp/>].pos[<sp/>j<sp/>]<sp/>)</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbox[<sp/>j<sp/>]<sp/>=<sp/>point-&gt;pt[<sp/>i<sp/>].pos[<sp/>j<sp/>];</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bbox[<sp/>j<sp/>+<sp/>3<sp/>]<sp/>&lt;<sp/>point-&gt;pt[<sp/>i<sp/>].pos[<sp/>j<sp/>]<sp/>)</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbox[<sp/>j<sp/>+<sp/>3<sp/>]<sp/>=<sp/>point-&gt;pt[<sp/>i<sp/>].pos[<sp/>j<sp/>];</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"></highlight></codeline>
<codeline lineno="2471"><highlight class="normal"></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2473"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="2474"><highlight class="comment">lwAllocPolygons()</highlight></codeline>
<codeline lineno="2475"><highlight class="comment"></highlight></codeline>
<codeline lineno="2476"><highlight class="comment">Allocate<sp/>or<sp/>extend<sp/>the<sp/>polygon<sp/>arrays<sp/>to<sp/>hold<sp/>new<sp/>records.</highlight></codeline>
<codeline lineno="2477"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lwAllocPolygons(<sp/><ref refid="structst__lw_polygon_list" kindref="compound">lwPolygonList</ref><sp/>*plist,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>npols,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nverts<sp/>)</highlight></codeline>
<codeline lineno="2480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/>plist-&gt;offset<sp/>=<sp/>plist-&gt;count;</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/>plist-&gt;count<sp/>+=<sp/>npols;</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__lw_polygon" kindref="compound">lwPolygon</ref><sp/>*oldpol<sp/>=<sp/>plist-&gt;pol;</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/>plist-&gt;pol<sp/>=<sp/>(<ref refid="structst__lw_polygon" kindref="compound">lwPolygon</ref>*)Mem_Alloc(<sp/>plist-&gt;count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_polygon" kindref="compound">lwPolygon</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!plist-&gt;pol<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>oldpol<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>plist-&gt;pol,<sp/>oldpol,<sp/>plist-&gt;offset<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_polygon" kindref="compound">lwPolygon</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>oldpol<sp/>);</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>plist-&gt;pol<sp/>+<sp/>plist-&gt;offset,<sp/>0,<sp/>npols<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_polygon" kindref="compound">lwPolygon</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/>plist-&gt;voffset<sp/>=<sp/>plist-&gt;vcount;</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/>plist-&gt;vcount<sp/>+=<sp/>nverts;</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structst__lw_pol_vert" kindref="compound">lwPolVert</ref><sp/>*oldpolv<sp/>=<sp/>plist-&gt;pol[0].v;</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/>plist-&gt;pol[0].v<sp/>=<sp/>(<ref refid="structst__lw_pol_vert" kindref="compound">lwPolVert</ref>*)Mem_Alloc(<sp/>plist-&gt;vcount<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_pol_vert" kindref="compound">lwPolVert</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!plist-&gt;pol[<sp/>0<sp/>].v<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>oldpolv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>plist-&gt;pol[0].v,<sp/>oldpolv,<sp/>plist-&gt;voffset<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_pol_vert" kindref="compound">lwPolVert</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>oldpolv<sp/>);</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>plist-&gt;pol[<sp/>0<sp/>].v<sp/>+<sp/>plist-&gt;voffset,<sp/>0,<sp/>nverts<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_pol_vert" kindref="compound">lwPolVert</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"></highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fix<sp/>up<sp/>the<sp/>old<sp/>vertex<sp/>pointers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2506"><highlight class="normal"></highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>plist-&gt;offset;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plist-&gt;pol[<sp/>i<sp/>].v<sp/>=<sp/>plist-&gt;pol[<sp/>i<sp/>-<sp/>1<sp/>].v<sp/>+<sp/>plist-&gt;pol[<sp/>i<sp/>-<sp/>1<sp/>].nverts;</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"></highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"></highlight></codeline>
<codeline lineno="2513"><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2515"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="2516"><highlight class="comment">lwGetPolygons()</highlight></codeline>
<codeline lineno="2517"><highlight class="comment"></highlight></codeline>
<codeline lineno="2518"><highlight class="comment">Read<sp/>polygon<sp/>records<sp/>from<sp/>a<sp/>POLS<sp/>chunk<sp/>in<sp/>an<sp/>LWO2<sp/>file.<sp/><sp/>The<sp/>polygons</highlight></codeline>
<codeline lineno="2519"><highlight class="comment">are<sp/>added<sp/>to<sp/>the<sp/>array<sp/>in<sp/>the<sp/>lwPolygonList.</highlight></codeline>
<codeline lineno="2520"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lwGetPolygons(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cksize,<sp/><ref refid="structst__lw_polygon_list" kindref="compound">lwPolygonList</ref><sp/>*plist,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ptoffset<sp/>)</highlight></codeline>
<codeline lineno="2523"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_polygon" kindref="compound">lwPolygon</ref><sp/>*pp;</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_pol_vert" kindref="compound">lwPolVert</ref><sp/>*pv;</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/>*bp;</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>flags,<sp/>nv,<sp/>nverts,<sp/>npols;</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type;</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cksize<sp/>==<sp/>0<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>the<sp/>whole<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/>type<sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/>buf<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)getbytes(<sp/>fp,<sp/>cksize<sp/>-<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cksize<sp/>!=<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"></highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>count<sp/>the<sp/>polygons<sp/>and<sp/>vertices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/>nverts<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/>npols<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/>bp<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"></highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>bp<sp/>&lt;<sp/>buf<sp/>+<sp/>cksize<sp/>-<sp/>4<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nv<sp/>=<sp/>sgetU2(<sp/>&amp;bp<sp/>);</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nv<sp/>&amp;=<sp/>0x03FF;</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nverts<sp/>+=<sp/>nv;</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>npols++;</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nv;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>sgetVX(<sp/>&amp;bp<sp/>);</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"></highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!lwAllocPolygons(<sp/>plist,<sp/>npols,<sp/>nverts<sp/>))</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"></highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fill<sp/>in<sp/>the<sp/>new<sp/>polygons<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2559"><highlight class="normal"></highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/>bp<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/>pp<sp/>=<sp/>plist-&gt;pol<sp/>+<sp/>plist-&gt;offset;</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/>pv<sp/>=<sp/>plist-&gt;pol[<sp/>0<sp/>].v<sp/>+<sp/>plist-&gt;voffset;</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>npols;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nv<sp/>=<sp/>sgetU2(<sp/>&amp;bp<sp/>);</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>=<sp/>nv<sp/>&amp;<sp/>0xFC00;</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nv<sp/>&amp;=<sp/>0x03FF;</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;nverts<sp/>=<sp/>nv;</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;flags<sp/>=<sp/>flags;</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;type<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!pp-&gt;v<sp/>)<sp/>pp-&gt;v<sp/>=<sp/>pv;</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nv;<sp/>j++<sp/>)</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;v[<sp/>j<sp/>].index<sp/>=<sp/>sgetVX(<sp/>&amp;bp<sp/>)<sp/>+<sp/>ptoffset;</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"></highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pp++;</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pv<sp/>+=<sp/>nv;</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/>Mem_Free(<sp/>buf<sp/>);</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal">Fail:</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>buf<sp/>)<sp/>Mem_Free(<sp/>buf<sp/>);</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/>lwFreePolygons(<sp/>plist<sp/>);</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2591"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="2592"><highlight class="comment">lwGetPolyNormals()</highlight></codeline>
<codeline lineno="2593"><highlight class="comment"></highlight></codeline>
<codeline lineno="2594"><highlight class="comment">Calculate<sp/>the<sp/>polygon<sp/>normals.<sp/><sp/>By<sp/>convention,<sp/>LW&apos;s<sp/>polygon<sp/>normals</highlight></codeline>
<codeline lineno="2595"><highlight class="comment">are<sp/>found<sp/>as<sp/>the<sp/>cross<sp/>product<sp/>of<sp/>the<sp/>first<sp/>and<sp/>last<sp/>edges.<sp/><sp/>It&apos;s</highlight></codeline>
<codeline lineno="2596"><highlight class="comment">undefined<sp/>for<sp/>one-<sp/>and<sp/>two-point<sp/>polygons.</highlight></codeline>
<codeline lineno="2597"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2598"><highlight class="normal"></highlight></codeline>
<codeline lineno="2599"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lwGetPolyNormals(<sp/><ref refid="structst__lw_point_list" kindref="compound">lwPointList</ref><sp/>*point,<sp/><ref refid="structst__lw_polygon_list" kindref="compound">lwPolygonList</ref><sp/>*polygon<sp/>)</highlight></codeline>
<codeline lineno="2600"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>p1[<sp/>3<sp/>],<sp/>p2[<sp/>3<sp/>],<sp/>pn[<sp/>3<sp/>],<sp/>v1[<sp/>3<sp/>],<sp/>v2[<sp/>3<sp/>];</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"></highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>polygon-&gt;count;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>polygon-&gt;pol[<sp/>i<sp/>].nverts<sp/>&lt;<sp/>3<sp/>)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>3;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"></highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>track<sp/>down<sp/>why<sp/>indexes<sp/>are<sp/>way<sp/>out<sp/>of<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1[<sp/>j<sp/>]<sp/>=<sp/>point-&gt;pt[<sp/>polygon-&gt;pol[<sp/>i<sp/>].v[<sp/>0<sp/>].index<sp/>].pos[<sp/>j<sp/>];</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2[<sp/>j<sp/>]<sp/>=<sp/>point-&gt;pt[<sp/>polygon-&gt;pol[<sp/>i<sp/>].v[<sp/>1<sp/>].index<sp/>].pos[<sp/>j<sp/>];</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pn[<sp/>j<sp/>]<sp/>=<sp/>point-&gt;pt[<sp/>polygon-&gt;pol[<sp/>i<sp/>].v[<sp/>polygon-&gt;pol[<sp/>i<sp/>].nverts<sp/>-<sp/>1<sp/>].index<sp/>].pos[<sp/>j<sp/>];</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>3;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1[<sp/>j<sp/>]<sp/>=<sp/>p2[<sp/>j<sp/>]<sp/>-<sp/>p1[<sp/>j<sp/>];</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v2[<sp/>j<sp/>]<sp/>=<sp/>pn[<sp/>j<sp/>]<sp/>-<sp/>p1[<sp/>j<sp/>];</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"></highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cross(<sp/>v1,<sp/>v2,<sp/>polygon-&gt;pol[<sp/>i<sp/>].norm<sp/>);</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>normalize(<sp/>polygon-&gt;pol[<sp/>i<sp/>].norm<sp/>);</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"></highlight></codeline>
<codeline lineno="2624"><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2626"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="2627"><highlight class="comment">lwGetPointPolygons()</highlight></codeline>
<codeline lineno="2628"><highlight class="comment"></highlight></codeline>
<codeline lineno="2629"><highlight class="comment">For<sp/>each<sp/>point,<sp/>fill<sp/>in<sp/>the<sp/>indexes<sp/>of<sp/>the<sp/>polygons<sp/>that<sp/>share<sp/>the</highlight></codeline>
<codeline lineno="2630"><highlight class="comment">point.<sp/><sp/>Returns<sp/>0<sp/>if<sp/>any<sp/>of<sp/>the<sp/>memory<sp/>allocations<sp/>fail,<sp/>otherwise</highlight></codeline>
<codeline lineno="2631"><highlight class="comment">returns<sp/>1.</highlight></codeline>
<codeline lineno="2632"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2633"><highlight class="normal"></highlight></codeline>
<codeline lineno="2634"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lwGetPointPolygons(<sp/><ref refid="structst__lw_point_list" kindref="compound">lwPointList</ref><sp/>*point,<sp/><ref refid="structst__lw_polygon_list" kindref="compound">lwPolygonList</ref><sp/>*polygon<sp/>)</highlight></codeline>
<codeline lineno="2635"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"></highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>count<sp/>the<sp/>number<sp/>of<sp/>polygons<sp/>per<sp/>point<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="normal"></highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>polygon-&gt;count;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>polygon-&gt;pol[<sp/>i<sp/>].nverts;<sp/>j++<sp/>)</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++point-&gt;pt[<sp/>polygon-&gt;pol[<sp/>i<sp/>].v[<sp/>j<sp/>].index<sp/>].npols;</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"></highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>alloc<sp/>per-point<sp/>polygon<sp/>arrays<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2645"><highlight class="normal"></highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/>for<sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>point-&gt;count;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>point-&gt;pt[<sp/>i<sp/>].npols<sp/>==<sp/>0<sp/>)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>point-&gt;pt[<sp/>i<sp/>].pol<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)Mem_ClearedAlloc(<sp/>point-&gt;pt[<sp/>i<sp/>].npols<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!point-&gt;pt[<sp/>i<sp/>].pol<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>point-&gt;pt[<sp/>i<sp/>].npols<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fill<sp/>in<sp/>polygon<sp/>array<sp/>for<sp/>each<sp/>point<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>polygon-&gt;count;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>polygon-&gt;pol[<sp/>i<sp/>].nverts;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>polygon-&gt;pol[<sp/>i<sp/>].v[<sp/>j<sp/>].index;</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point-&gt;pt[<sp/>k<sp/>].pol[<sp/>point-&gt;pt[<sp/>k<sp/>].npols<sp/>]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++point-&gt;pt[<sp/>k<sp/>].npols;</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"></highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"></highlight></codeline>
<codeline lineno="2666"><highlight class="normal"></highlight></codeline>
<codeline lineno="2667"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2668"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="2669"><highlight class="comment">lwResolvePolySurfaces()</highlight></codeline>
<codeline lineno="2670"><highlight class="comment"></highlight></codeline>
<codeline lineno="2671"><highlight class="comment">Convert<sp/>tag<sp/>indexes<sp/>into<sp/>actual<sp/>lwSurface<sp/>pointers.<sp/><sp/>If<sp/>any<sp/>polygons</highlight></codeline>
<codeline lineno="2672"><highlight class="comment">point<sp/>to<sp/>tags<sp/>for<sp/>which<sp/>no<sp/>corresponding<sp/>surface<sp/>can<sp/>be<sp/>found,<sp/>a</highlight></codeline>
<codeline lineno="2673"><highlight class="comment">default<sp/>surface<sp/>is<sp/>created.</highlight></codeline>
<codeline lineno="2674"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2675"><highlight class="normal"></highlight></codeline>
<codeline lineno="2676"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lwResolvePolySurfaces(<sp/><ref refid="structst__lw_polygon_list" kindref="compound">lwPolygonList</ref><sp/>*polygon,<sp/><ref refid="structst__lw_tag_list" kindref="compound">lwTagList</ref><sp/>*tlist,</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_surface" kindref="compound">lwSurface</ref><sp/>**surf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*nsurfs<sp/>)</highlight></codeline>
<codeline lineno="2678"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_surface" kindref="compound">lwSurface</ref><sp/>**s,<sp/>*st;</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>index;</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"></highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tlist-&gt;count<sp/>==<sp/>0<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"></highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>(<ref refid="structst__lw_surface" kindref="compound">lwSurface</ref>**)Mem_ClearedAlloc(<sp/>tlist-&gt;count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_surface" kindref="compound">lwSurface</ref><sp/>*<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!s<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"></highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tlist-&gt;count;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>st<sp/>=<sp/>*surf;</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>st<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!strcmp(<sp/>st-&gt;name,<sp/>tlist-&gt;tag[<sp/>i<sp/>]<sp/>))<sp/>{</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[<sp/>i<sp/>]<sp/>=<sp/>st;</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>st<sp/>=<sp/>st-&gt;next;</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>polygon-&gt;count;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>(<sp/>int<sp/>)<sp/>polygon-&gt;pol[<sp/>i<sp/>].surf;</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(<sp/>index<sp/>&lt;<sp/>0<sp/>||<sp/>index<sp/>&gt;<sp/>tlist-&gt;count<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!s[<sp/>index<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[<sp/>index<sp/>]<sp/>=<sp/>lwDefaultSurface();</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!s[<sp/>index<sp/>]<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[<sp/>index<sp/>]-&gt;name<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)Mem_ClearedAlloc(<sp/>strlen(<sp/>tlist-&gt;tag[<sp/>index<sp/>]<sp/>)<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!s[<sp/>index<sp/>]-&gt;name<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(<sp/>s[<sp/>index<sp/>]-&gt;name,<sp/>tlist-&gt;tag[<sp/>index<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListAdd(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)surf,<sp/>s[<sp/>index<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*nsurfs<sp/>=<sp/>*nsurfs<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>polygon-&gt;pol[<sp/>i<sp/>].surf<sp/>=<sp/>s[<sp/>index<sp/>];</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"></highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/>Mem_Free(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"></highlight></codeline>
<codeline lineno="2717"><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2719"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="2720"><highlight class="comment">lwGetVertNormals()</highlight></codeline>
<codeline lineno="2721"><highlight class="comment"></highlight></codeline>
<codeline lineno="2722"><highlight class="comment">Calculate<sp/>the<sp/>vertex<sp/>normals.<sp/><sp/>For<sp/>each<sp/>polygon<sp/>vertex,<sp/>sum<sp/>the</highlight></codeline>
<codeline lineno="2723"><highlight class="comment">normals<sp/>of<sp/>the<sp/>polygons<sp/>that<sp/>share<sp/>the<sp/>point.<sp/><sp/>If<sp/>the<sp/>normals<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="2724"><highlight class="comment">current<sp/>and<sp/>adjacent<sp/>polygons<sp/>form<sp/>an<sp/>angle<sp/>greater<sp/>than<sp/>the<sp/>max</highlight></codeline>
<codeline lineno="2725"><highlight class="comment">smoothing<sp/>angle<sp/>for<sp/>the<sp/>current<sp/>polygon&apos;s<sp/>surface,<sp/>the<sp/>normal<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="2726"><highlight class="comment">adjacent<sp/>polygon<sp/>is<sp/>excluded<sp/>from<sp/>the<sp/>sum.<sp/><sp/>It&apos;s<sp/>also<sp/>excluded<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="2727"><highlight class="comment">polygons<sp/>aren&apos;t<sp/>in<sp/>the<sp/>same<sp/>smoothing<sp/>group.</highlight></codeline>
<codeline lineno="2728"><highlight class="comment"></highlight></codeline>
<codeline lineno="2729"><highlight class="comment">Assumes<sp/>that<sp/>lwGetPointPolygons(),<sp/>lwGetPolyNormals()<sp/>and</highlight></codeline>
<codeline lineno="2730"><highlight class="comment">lwResolvePolySurfaces()<sp/>have<sp/>already<sp/>been<sp/>called.</highlight></codeline>
<codeline lineno="2731"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2732"><highlight class="normal"></highlight></codeline>
<codeline lineno="2733"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lwGetVertNormals(<sp/><ref refid="structst__lw_point_list" kindref="compound">lwPointList</ref><sp/>*point,<sp/><ref refid="structst__lw_polygon_list" kindref="compound">lwPolygonList</ref><sp/>*polygon<sp/>)</highlight></codeline>
<codeline lineno="2734"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,<sp/>k,<sp/>n,<sp/>g,<sp/>h,<sp/>p;</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"></highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>polygon-&gt;count;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>polygon-&gt;pol[<sp/>j<sp/>].nverts;<sp/>n++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>3;<sp/>k++<sp/>)</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polygon-&gt;pol[<sp/>j<sp/>].v[<sp/>n<sp/>].norm[<sp/>k<sp/>]<sp/>=<sp/>polygon-&gt;pol[<sp/>j<sp/>].norm[<sp/>k<sp/>];</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"></highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(<sp/>polygon-&gt;pol[<sp/>j<sp/>].surf-&gt;smooth<sp/>&lt;=<sp/>0<sp/>)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"></highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>polygon-&gt;pol[<sp/>j<sp/>].v[<sp/>n<sp/>].index;</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"></highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>g<sp/>=<sp/>0;<sp/>g<sp/>&lt;<sp/>point-&gt;pt[<sp/>p<sp/>].npols;<sp/>g++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>point-&gt;pt[<sp/>p<sp/>].pol[<sp/>g<sp/>];</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>h<sp/>==<sp/>j<sp/>)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"></highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>polygon-&gt;pol[<sp/>j<sp/>].smoothgrp<sp/>!=<sp/>polygon-&gt;pol[<sp/>h<sp/>].smoothgrp<sp/>)</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>vecangle(<sp/>polygon-&gt;pol[<sp/>j<sp/>].norm,<sp/>polygon-&gt;pol[<sp/>h<sp/>].norm<sp/>);</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>a<sp/>&gt;<sp/>polygon-&gt;pol[<sp/>j<sp/>].surf-&gt;smooth<sp/>)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"></highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>3;<sp/>k++<sp/>)</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polygon-&gt;pol[<sp/>j<sp/>].v[<sp/>n<sp/>].norm[<sp/>k<sp/>]<sp/>+=<sp/>polygon-&gt;pol[<sp/>h<sp/>].norm[<sp/>k<sp/>];</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"></highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalize(<sp/>polygon-&gt;pol[<sp/>j<sp/>].v[<sp/>n<sp/>].norm<sp/>);</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"></highlight></codeline>
<codeline lineno="2765"><highlight class="normal"></highlight></codeline>
<codeline lineno="2766"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2767"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="2768"><highlight class="comment">lwFreeTags()</highlight></codeline>
<codeline lineno="2769"><highlight class="comment"></highlight></codeline>
<codeline lineno="2770"><highlight class="comment">Free<sp/>memory<sp/>used<sp/>by<sp/>an<sp/>lwTagList.</highlight></codeline>
<codeline lineno="2771"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal"></highlight></codeline>
<codeline lineno="2773"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lwFreeTags(<sp/><ref refid="structst__lw_tag_list" kindref="compound">lwTagList</ref><sp/>*tlist<sp/>)</highlight></codeline>
<codeline lineno="2774"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"></highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tlist<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tlist-&gt;tag<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tlist-&gt;count;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tlist-&gt;tag[<sp/>i<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>tlist-&gt;tag[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>tlist-&gt;tag<sp/>);</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(<sp/>tlist,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_tag_list" kindref="compound">lwTagList</ref><sp/>));</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2787"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"></highlight></codeline>
<codeline lineno="2789"><highlight class="normal"></highlight></codeline>
<codeline lineno="2790"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2791"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="2792"><highlight class="comment">lwGetTags()</highlight></codeline>
<codeline lineno="2793"><highlight class="comment"></highlight></codeline>
<codeline lineno="2794"><highlight class="comment">Read<sp/>tag<sp/>strings<sp/>from<sp/>a<sp/>TAGS<sp/>chunk<sp/>in<sp/>an<sp/>LWO2<sp/>file.<sp/><sp/>The<sp/>tags<sp/>are</highlight></codeline>
<codeline lineno="2795"><highlight class="comment">added<sp/>to<sp/>the<sp/>lwTagList<sp/>array.</highlight></codeline>
<codeline lineno="2796"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2797"><highlight class="normal"></highlight></codeline>
<codeline lineno="2798"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lwGetTags(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cksize,<sp/><ref refid="structst__lw_tag_list" kindref="compound">lwTagList</ref><sp/>*tlist<sp/>)</highlight></codeline>
<codeline lineno="2799"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/>*bp;</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>len,<sp/>ntags;</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"></highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cksize<sp/>==<sp/>0<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"></highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>the<sp/>whole<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2806"><highlight class="normal"></highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)getbytes(<sp/>fp,<sp/>cksize<sp/>);</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!buf<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"></highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>count<sp/>the<sp/>strings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2812"><highlight class="normal"></highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/>ntags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/>bp<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>bp<sp/>&lt;<sp/>buf<sp/>+<sp/>cksize<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>strlen(<sp/>bp<sp/>)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>+=<sp/>len<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++ntags;</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>expand<sp/>the<sp/>string<sp/>array<sp/>to<sp/>hold<sp/>the<sp/>new<sp/>tags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2823"><highlight class="normal"></highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/>tlist-&gt;offset<sp/>=<sp/>tlist-&gt;count;</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/>tlist-&gt;count<sp/>+=<sp/>ntags;</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**oldtag<sp/>=<sp/>tlist-&gt;tag;</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/>tlist-&gt;tag<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)Mem_Alloc(<sp/>tlist-&gt;count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!tlist-&gt;tag<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>oldtag<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>tlist-&gt;tag,<sp/>oldtag,<sp/>tlist-&gt;offset<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>oldtag<sp/>);</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>&amp;tlist-&gt;tag[<sp/>tlist-&gt;offset<sp/>],<sp/>0,<sp/>ntags<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"></highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>the<sp/>new<sp/>tags<sp/>to<sp/>the<sp/>tag<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2836"><highlight class="normal"></highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/>bp<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ntags;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tlist-&gt;tag[<sp/>i<sp/>+<sp/>tlist-&gt;offset<sp/>]<sp/>=<sp/>sgetS0(<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)&amp;bp<sp/>);</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"></highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/>Mem_Free(<sp/>buf<sp/>);</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"></highlight></codeline>
<codeline lineno="2844"><highlight class="normal">Fail:</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>buf<sp/>)<sp/>Mem_Free(<sp/>buf<sp/>);</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"></highlight></codeline>
<codeline lineno="2849"><highlight class="normal"></highlight></codeline>
<codeline lineno="2850"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2851"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="2852"><highlight class="comment">lwGetPolygonTags()</highlight></codeline>
<codeline lineno="2853"><highlight class="comment"></highlight></codeline>
<codeline lineno="2854"><highlight class="comment">Read<sp/>polygon<sp/>tags<sp/>from<sp/>a<sp/>PTAG<sp/>chunk<sp/>in<sp/>an<sp/>LWO2<sp/>file.</highlight></codeline>
<codeline lineno="2855"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2856"><highlight class="normal"></highlight></codeline>
<codeline lineno="2857"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lwGetPolygonTags(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cksize,<sp/><ref refid="structst__lw_tag_list" kindref="compound">lwTagList</ref><sp/>*tlist,<sp/><ref refid="structst__lw_polygon_list" kindref="compound">lwPolygonList</ref><sp/>*plist<sp/>)</highlight></codeline>
<codeline lineno="2858"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type;</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rlen<sp/>=<sp/>0,<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"></highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>get_flen();</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>0<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"></highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>type<sp/>!=<sp/>ID_SURF<sp/>&amp;&amp;<sp/>type<sp/>!=<sp/>ID_PART<sp/>&amp;&amp;<sp/>type<sp/>!=<sp/>ID_SMGP<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp-&gt;Seek(<sp/>cksize<sp/>-<sp/>4,<sp/>FS_SEEK_CUR<sp/>);</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"></highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>cksize<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>getVX(<sp/>fp<sp/>)<sp/>+<sp/>plist-&gt;offset;</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>getVX(<sp/>fp<sp/>)<sp/>+<sp/>tlist-&gt;offset;</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>get_flen();</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>0<sp/>||<sp/>rlen<sp/>&gt;<sp/>cksize<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"></highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>type<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_SURF:<sp/><sp/>plist-&gt;pol[<sp/>i<sp/>].surf<sp/>=<sp/>(<sp/><ref refid="structst__lw_surface" kindref="compound">lwSurface</ref><sp/>*<sp/>)<sp/>j;<sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_PART:<sp/><sp/>plist-&gt;pol[<sp/>i<sp/>].part<sp/>=<sp/>j;<sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_SMGP:<sp/><sp/>plist-&gt;pol[<sp/>i<sp/>].smoothgrp<sp/>=<sp/>j;<sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"></highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2886"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"></highlight></codeline>
<codeline lineno="2888"><highlight class="normal"></highlight></codeline>
<codeline lineno="2889"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2890"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="2891"><highlight class="comment">lwFreePlugin()</highlight></codeline>
<codeline lineno="2892"><highlight class="comment"></highlight></codeline>
<codeline lineno="2893"><highlight class="comment">Free<sp/>the<sp/>memory<sp/>used<sp/>by<sp/>an<sp/>lwPlugin.</highlight></codeline>
<codeline lineno="2894"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2895"><highlight class="normal"></highlight></codeline>
<codeline lineno="2896"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lwFreePlugin(<sp/><ref refid="structst__lw_plugin" kindref="compound">lwPlugin</ref><sp/>*p<sp/>)</highlight></codeline>
<codeline lineno="2897"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>p<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>p-&gt;ord<sp/>)<sp/>Mem_Free(<sp/>p-&gt;ord<sp/>);</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>p-&gt;name<sp/>)<sp/>Mem_Free(<sp/>p-&gt;name<sp/>);</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>p-&gt;data<sp/>)<sp/>Mem_Free(<sp/>p-&gt;data<sp/>);</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>p<sp/>);</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2904"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"></highlight></codeline>
<codeline lineno="2906"><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2908"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="2909"><highlight class="comment">lwFreeTexture()</highlight></codeline>
<codeline lineno="2910"><highlight class="comment"></highlight></codeline>
<codeline lineno="2911"><highlight class="comment">Free<sp/>the<sp/>memory<sp/>used<sp/>by<sp/>an<sp/>lwTexture.</highlight></codeline>
<codeline lineno="2912"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2913"><highlight class="normal"></highlight></codeline>
<codeline lineno="2914"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lwFreeTexture(<sp/><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref><sp/>*t<sp/>)</highlight></codeline>
<codeline lineno="2915"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>t<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>t-&gt;ord<sp/>)<sp/>Mem_Free(<sp/>t-&gt;ord<sp/>);</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>t-&gt;type<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_IMAP:</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>t-&gt;param.imap.vmap_name<sp/>)<sp/>Mem_Free(<sp/>t-&gt;param.imap.vmap_name<sp/>);</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_PROC:</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>t-&gt;param.proc.name<sp/>)<sp/>Mem_Free(<sp/>t-&gt;param.proc.name<sp/>);</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>t-&gt;param.proc.data<sp/>)<sp/>Mem_Free(<sp/>t-&gt;param.proc.data<sp/>);</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_GRAD:</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>t-&gt;param.grad.key<sp/>)<sp/>Mem_Free(<sp/>t-&gt;param.grad.key<sp/>);</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>t-&gt;param.grad.ikey<sp/>)<sp/>Mem_Free(<sp/>t-&gt;param.grad.ikey<sp/>);</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>t-&gt;tmap.ref_object<sp/>)<sp/>Mem_Free(<sp/>t-&gt;tmap.ref_object<sp/>);</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>t<sp/>);</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2934"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"></highlight></codeline>
<codeline lineno="2936"><highlight class="normal"></highlight></codeline>
<codeline lineno="2937"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2938"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="2939"><highlight class="comment">lwFreeSurface()</highlight></codeline>
<codeline lineno="2940"><highlight class="comment"></highlight></codeline>
<codeline lineno="2941"><highlight class="comment">Free<sp/>the<sp/>memory<sp/>used<sp/>by<sp/>an<sp/>lwSurface.</highlight></codeline>
<codeline lineno="2942"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2943"><highlight class="normal"></highlight></codeline>
<codeline lineno="2944"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lwFreeSurface(<sp/><ref refid="structst__lw_surface" kindref="compound">lwSurface</ref><sp/>*surf<sp/>)</highlight></codeline>
<codeline lineno="2945"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>surf<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>surf-&gt;name<sp/>)<sp/>Mem_Free(<sp/>surf-&gt;name<sp/>);</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>surf-&gt;srcname<sp/>)<sp/>Mem_Free(<sp/>surf-&gt;srcname<sp/>);</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"></highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListFree(<sp/>surf-&gt;shader,<sp/>(void<sp/>(__cdecl<sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))lwFreePlugin<sp/>);</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"></highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListFree(<sp/>surf-&gt;color.tex,<sp/>(void<sp/>(__cdecl<sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))lwFreeTexture<sp/>);</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListFree(<sp/>surf-&gt;luminosity.tex,<sp/>(void<sp/>(__cdecl<sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))lwFreeTexture<sp/>);</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListFree(<sp/>surf-&gt;diffuse.tex,<sp/>(void<sp/>(__cdecl<sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))lwFreeTexture<sp/>);</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListFree(<sp/>surf-&gt;specularity.tex,<sp/>(void<sp/>(__cdecl<sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))lwFreeTexture<sp/>);</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListFree(<sp/>surf-&gt;glossiness.tex,<sp/>(void<sp/>(__cdecl<sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))lwFreeTexture<sp/>);</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListFree(<sp/>surf-&gt;reflection.val.tex,<sp/>(void<sp/>(__cdecl<sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))lwFreeTexture<sp/>);</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListFree(<sp/>surf-&gt;transparency.val.tex,<sp/>(void<sp/>(__cdecl<sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))lwFreeTexture<sp/>);</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListFree(<sp/>surf-&gt;eta.tex,<sp/>(void<sp/>(__cdecl<sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))lwFreeTexture<sp/>);</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListFree(<sp/>surf-&gt;translucency.tex,<sp/>(void<sp/>(__cdecl<sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))lwFreeTexture<sp/>);</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListFree(<sp/>surf-&gt;bump.tex,<sp/>(void<sp/>(__cdecl<sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))lwFreeTexture<sp/>);</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"></highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>surf<sp/>);</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2965"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"></highlight></codeline>
<codeline lineno="2967"><highlight class="normal"></highlight></codeline>
<codeline lineno="2968"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2969"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="2970"><highlight class="comment">lwGetTHeader()</highlight></codeline>
<codeline lineno="2971"><highlight class="comment"></highlight></codeline>
<codeline lineno="2972"><highlight class="comment">Read<sp/>a<sp/>texture<sp/>map<sp/>header<sp/>from<sp/>a<sp/>SURF.BLOK<sp/>in<sp/>an<sp/>LWO2<sp/>file.<sp/><sp/>This<sp/>is</highlight></codeline>
<codeline lineno="2973"><highlight class="comment">the<sp/>first<sp/>subchunk<sp/>in<sp/>a<sp/>BLOK,<sp/>and<sp/>its<sp/>contents<sp/>are<sp/>common<sp/>to<sp/>all<sp/>three</highlight></codeline>
<codeline lineno="2974"><highlight class="comment">texture<sp/>types.</highlight></codeline>
<codeline lineno="2975"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2976"><highlight class="normal"></highlight></codeline>
<codeline lineno="2977"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lwGetTHeader(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hsz,<sp/><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref><sp/>*tex<sp/>)</highlight></codeline>
<codeline lineno="2978"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>sz;</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/>rlen;</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"></highlight></codeline>
<codeline lineno="2983"><highlight class="normal"></highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>remember<sp/>where<sp/>we<sp/>started<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2985"><highlight class="normal"></highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>fp-&gt;Tell();</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"></highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ordinal<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2990"><highlight class="normal"></highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/>tex-&gt;ord<sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"></highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>subchunk<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2994"><highlight class="normal"></highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>0<sp/>&gt;<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"></highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>process<sp/>subchunks<sp/>as<sp/>they&apos;re<sp/>encountered<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3000"><highlight class="normal"></highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>+=<sp/>sz<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"></highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_CHAN:</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;chan<sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"></highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_OPAC:</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;opac_type<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;opacity.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;opacity.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"></highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_ENAB:</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;enabled<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"></highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_NEGA:</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;negative<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"></highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_AXIS:</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;axis<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"></highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"></highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>while<sp/>reading<sp/>current<sp/>subchunk?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3033"><highlight class="normal"></highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>get_flen();</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>0<sp/>||<sp/>rlen<sp/>&gt;<sp/>sz<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"></highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>skip<sp/>unread<sp/>parts<sp/>of<sp/>the<sp/>current<sp/>subchunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3038"><highlight class="normal"></highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>sz<sp/>)</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp-&gt;Seek(<sp/>sz<sp/>-<sp/>rlen,<sp/>FS_SEEK_CUR<sp/>);</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"></highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>the<sp/>texture<sp/>header<sp/>subchunk?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3043"><highlight class="normal"></highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>hsz<sp/>&lt;=<sp/>fp-&gt;Tell()<sp/>-<sp/>pos<sp/>)</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"></highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>next<sp/>subchunk<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3048"><highlight class="normal"></highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>6<sp/>!=<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"></highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/>set_flen(<sp/>fp-&gt;Tell()<sp/>-<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="3057"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"></highlight></codeline>
<codeline lineno="3059"><highlight class="normal"></highlight></codeline>
<codeline lineno="3060"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3061"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="3062"><highlight class="comment">lwGetTMap()</highlight></codeline>
<codeline lineno="3063"><highlight class="comment"></highlight></codeline>
<codeline lineno="3064"><highlight class="comment">Read<sp/>a<sp/>texture<sp/>map<sp/>from<sp/>a<sp/>SURF.BLOK<sp/>in<sp/>an<sp/>LWO2<sp/>file.<sp/><sp/>The<sp/>TMAP</highlight></codeline>
<codeline lineno="3065"><highlight class="comment">defines<sp/>the<sp/>mapping<sp/>from<sp/>texture<sp/>to<sp/>world<sp/>or<sp/>object<sp/>coordinates.</highlight></codeline>
<codeline lineno="3066"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3067"><highlight class="normal"></highlight></codeline>
<codeline lineno="3068"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lwGetTMap(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmapsz,<sp/><ref refid="structst__lw_t_map" kindref="compound">lwTMap</ref><sp/>*tmap<sp/>)</highlight></codeline>
<codeline lineno="3069"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>sz;</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rlen,<sp/>pos,<sp/>i;</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"></highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>fp-&gt;Tell();</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>0<sp/>&gt;<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"></highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>+=<sp/>sz<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"></highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_SIZE:</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmap-&gt;size.val[<sp/>i<sp/>]<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmap-&gt;size.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"></highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_CNTR:</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmap-&gt;center.val[<sp/>i<sp/>]<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmap-&gt;center.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"></highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_ROTA:</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmap-&gt;rotate.val[<sp/>i<sp/>]<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmap-&gt;rotate.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"></highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_FALL:</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmap-&gt;fall_type<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmap-&gt;falloff.val[<sp/>i<sp/>]<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmap-&gt;falloff.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"></highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_OREF:</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmap-&gt;ref_object<sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"></highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_CSYS:</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmap-&gt;coord_sys<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"></highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"></highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>while<sp/>reading<sp/>the<sp/>current<sp/>subchunk?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3122"><highlight class="normal"></highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>get_flen();</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>0<sp/>||<sp/>rlen<sp/>&gt;<sp/>sz<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"></highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>skip<sp/>unread<sp/>parts<sp/>of<sp/>the<sp/>current<sp/>subchunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3127"><highlight class="normal"></highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>sz<sp/>)</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp-&gt;Seek(<sp/>sz<sp/>-<sp/>rlen,<sp/>FS_SEEK_CUR<sp/>);</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"></highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>the<sp/>TMAP<sp/>subchunk?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3132"><highlight class="normal"></highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tmapsz<sp/>&lt;=<sp/>fp-&gt;Tell()<sp/>-<sp/>pos<sp/>)</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"></highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>next<sp/>subchunk<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3137"><highlight class="normal"></highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>6<sp/>!=<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"></highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/>set_flen(<sp/>fp-&gt;Tell()<sp/>-<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="3146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"></highlight></codeline>
<codeline lineno="3148"><highlight class="normal"></highlight></codeline>
<codeline lineno="3149"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3150"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="3151"><highlight class="comment">lwGetImageMap()</highlight></codeline>
<codeline lineno="3152"><highlight class="comment"></highlight></codeline>
<codeline lineno="3153"><highlight class="comment">Read<sp/>an<sp/>lwImageMap<sp/>from<sp/>a<sp/>SURF.BLOK<sp/>in<sp/>an<sp/>LWO2<sp/>file.</highlight></codeline>
<codeline lineno="3154"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3155"><highlight class="normal"></highlight></codeline>
<codeline lineno="3156"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lwGetImageMap(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rsz,<sp/><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref><sp/>*tex<sp/>)</highlight></codeline>
<codeline lineno="3157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>sz;</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rlen,<sp/>pos;</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"></highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>fp-&gt;Tell();</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>0<sp/>&gt;<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"></highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>+=<sp/>sz<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"></highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TMAP:</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!lwGetTMap(<sp/>fp,<sp/>sz,<sp/>&amp;tex-&gt;tmap<sp/>))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"></highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_PROJ:</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.projection<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"></highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_VMAP:</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.vmap_name<sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"></highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_AXIS:</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.axis<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"></highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_IMAG:</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.cindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"></highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_WRAP:</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.wrapw_type<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.wraph_type<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"></highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_WRPW:</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.wrapw.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.wrapw.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"></highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_WRPH:</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.wraph.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.wraph.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"></highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_AAST:</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.aas_flags<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.aa_strength<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"></highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_PIXB:</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.pblend<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"></highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_STCK:</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.stck.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.stck.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"></highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TAMP:</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.amplitude.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.imap.amplitude.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"></highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"></highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>while<sp/>reading<sp/>the<sp/>current<sp/>subchunk?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3231"><highlight class="normal"></highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>get_flen();</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>0<sp/>||<sp/>rlen<sp/>&gt;<sp/>sz<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"></highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>skip<sp/>unread<sp/>parts<sp/>of<sp/>the<sp/>current<sp/>subchunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3236"><highlight class="normal"></highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>sz<sp/>)</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp-&gt;Seek(<sp/>sz<sp/>-<sp/>rlen,<sp/>FS_SEEK_CUR<sp/>);</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"></highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>the<sp/>image<sp/>map?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3241"><highlight class="normal"></highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rsz<sp/>&lt;=<sp/>fp-&gt;Tell()<sp/>-<sp/>pos<sp/>)</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"></highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>next<sp/>subchunk<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3246"><highlight class="normal"></highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>6<sp/>!=<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"></highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/>set_flen(<sp/>fp-&gt;Tell()<sp/>-<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="3255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"></highlight></codeline>
<codeline lineno="3257"><highlight class="normal"></highlight></codeline>
<codeline lineno="3258"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3259"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="3260"><highlight class="comment">lwGetProcedural()</highlight></codeline>
<codeline lineno="3261"><highlight class="comment"></highlight></codeline>
<codeline lineno="3262"><highlight class="comment">Read<sp/>an<sp/>lwProcedural<sp/>from<sp/>a<sp/>SURF.BLOK<sp/>in<sp/>an<sp/>LWO2<sp/>file.</highlight></codeline>
<codeline lineno="3263"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3264"><highlight class="normal"></highlight></codeline>
<codeline lineno="3265"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lwGetProcedural(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rsz,<sp/><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref><sp/>*tex<sp/>)</highlight></codeline>
<codeline lineno="3266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>sz;</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rlen,<sp/>pos;</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"></highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><sp/>pos<sp/>=<sp/>fp-&gt;Tell();</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>0<sp/>&gt;<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"></highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>+=<sp/>sz<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"></highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TMAP:</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!lwGetTMap(<sp/>fp,<sp/>sz,<sp/>&amp;tex-&gt;tmap<sp/>))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"></highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_AXIS:</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.proc.axis<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_VALU:</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.proc.value[<sp/>0<sp/>]<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sz<sp/>&gt;=<sp/>8<sp/>)<sp/>tex-&gt;param.proc.value[<sp/>1<sp/>]<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sz<sp/>&gt;=<sp/>12<sp/>)<sp/>tex-&gt;param.proc.value[<sp/>2<sp/>]<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"></highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_FUNC:</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.proc.name<sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>get_flen();</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.proc.data<sp/>=<sp/>getbytes(<sp/>fp,<sp/>sz<sp/>-<sp/>rlen<sp/>);</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"></highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"></highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>while<sp/>reading<sp/>the<sp/>current<sp/>subchunk?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3306"><highlight class="normal"></highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>get_flen();</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>0<sp/>||<sp/>rlen<sp/>&gt;<sp/>sz<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"></highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>skip<sp/>unread<sp/>parts<sp/>of<sp/>the<sp/>current<sp/>subchunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3311"><highlight class="normal"></highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>sz<sp/>)</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp-&gt;Seek(<sp/>sz<sp/>-<sp/>rlen,<sp/>FS_SEEK_CUR<sp/>);</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"></highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>the<sp/>procedural<sp/>block?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3316"><highlight class="normal"></highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rsz<sp/>&lt;=<sp/>fp-&gt;Tell()<sp/>-<sp/>pos<sp/>)</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"></highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>next<sp/>subchunk<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3321"><highlight class="normal"></highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>6<sp/>!=<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"></highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/>set_flen(<sp/>fp-&gt;Tell()<sp/>-<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="3330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"></highlight></codeline>
<codeline lineno="3332"><highlight class="normal"></highlight></codeline>
<codeline lineno="3333"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3334"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="3335"><highlight class="comment">lwGetGradient()</highlight></codeline>
<codeline lineno="3336"><highlight class="comment"></highlight></codeline>
<codeline lineno="3337"><highlight class="comment">Read<sp/>an<sp/>lwGradient<sp/>from<sp/>a<sp/>SURF.BLOK<sp/>in<sp/>an<sp/>LWO2<sp/>file.</highlight></codeline>
<codeline lineno="3338"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3339"><highlight class="normal"></highlight></codeline>
<codeline lineno="3340"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lwGetGradient(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rsz,<sp/><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref><sp/>*tex<sp/>)</highlight></codeline>
<codeline lineno="3341"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>sz;</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rlen,<sp/>pos,<sp/>i,<sp/>j,<sp/>nkeys;</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"></highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/>pos<sp/>=<sp/>fp-&gt;Tell();</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>0<sp/>&gt;<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"></highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>+=<sp/>sz<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"></highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TMAP:</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!lwGetTMap(<sp/>fp,<sp/>sz,<sp/>&amp;tex-&gt;tmap<sp/>))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"></highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_PNAM:</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.grad.paramname<sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"></highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_INAM:</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.grad.itemname<sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"></highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_GRST:</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.grad.start<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"></highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_GREN:</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.grad.end<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"></highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_GRPT:</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.grad.repeat<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"></highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_FKEY:</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nkeys<sp/>=<sp/>sz<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_grad_key" kindref="compound">lwGradKey</ref><sp/>);</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.grad.key<sp/>=<sp/>(<ref refid="structst__lw_grad_key" kindref="compound">lwGradKey</ref>*)Mem_ClearedAlloc(<sp/>nkeys<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_grad_key" kindref="compound">lwGradKey</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!tex-&gt;param.grad.key<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nkeys;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.grad.key[<sp/>i<sp/>].value<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>j++<sp/>)</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.grad.key[<sp/>i<sp/>].rgba[<sp/>j<sp/>]<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"></highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_IKEY:</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nkeys<sp/>=<sp/>sz<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.grad.ikey<sp/>=<sp/>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*)Mem_ClearedAlloc(<sp/>nkeys<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!tex-&gt;param.grad.ikey<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nkeys;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex-&gt;param.grad.ikey[<sp/>i<sp/>]<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"></highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"></highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>while<sp/>reading<sp/>the<sp/>current<sp/>subchunk?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3404"><highlight class="normal"></highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>get_flen();</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>0<sp/>||<sp/>rlen<sp/>&gt;<sp/>sz<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"></highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>skip<sp/>unread<sp/>parts<sp/>of<sp/>the<sp/>current<sp/>subchunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3409"><highlight class="normal"></highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>sz<sp/>)</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp-&gt;Seek(<sp/>sz<sp/>-<sp/>rlen,<sp/>FS_SEEK_CUR<sp/>);</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"></highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>the<sp/>gradient?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3414"><highlight class="normal"></highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rsz<sp/>&lt;=<sp/>fp-&gt;Tell()<sp/>-<sp/>pos<sp/>)</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"></highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>next<sp/>subchunk<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3419"><highlight class="normal"></highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>6<sp/>!=<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"></highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/>set_flen(<sp/>fp-&gt;Tell()<sp/>-<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="3428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"></highlight></codeline>
<codeline lineno="3430"><highlight class="normal"></highlight></codeline>
<codeline lineno="3431"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3432"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="3433"><highlight class="comment">lwGetTexture()</highlight></codeline>
<codeline lineno="3434"><highlight class="comment"></highlight></codeline>
<codeline lineno="3435"><highlight class="comment">Read<sp/>an<sp/>lwTexture<sp/>from<sp/>a<sp/>SURF.BLOK<sp/>in<sp/>an<sp/>LWO2<sp/>file.</highlight></codeline>
<codeline lineno="3436"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3437"><highlight class="normal"></highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref><sp/>*lwGetTexture(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bloksz,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type<sp/>)</highlight></codeline>
<codeline lineno="3439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref><sp/>*tex;</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>sz;</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ok;</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"></highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/>tex<sp/>=<sp/>(<ref refid="structst__lw_texture" kindref="compound">lwTexture</ref>*)Mem_ClearedAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!tex<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"></highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/>tex-&gt;type<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/>tex-&gt;tmap.size.val[<sp/>0<sp/>]<sp/>=</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/>tex-&gt;tmap.size.val[<sp/>1<sp/>]<sp/>=</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/>tex-&gt;tmap.size.val[<sp/>2<sp/>]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/>tex-&gt;opacity.val<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/>tex-&gt;enabled<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"></highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!lwGetTHeader(<sp/>fp,<sp/>sz,<sp/>tex<sp/>))<sp/>{</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>tex<sp/>);</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"></highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/>sz<sp/>=<sp/>bloksz<sp/>-<sp/>sz<sp/>-<sp/>6;</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>type<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_IMAP:<sp/><sp/>ok<sp/>=<sp/>lwGetImageMap(<sp/>fp,<sp/>sz,<sp/>tex<sp/>);<sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_PROC:<sp/><sp/>ok<sp/>=<sp/>lwGetProcedural(<sp/>fp,<sp/>sz,<sp/>tex<sp/>);<sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_GRAD:<sp/><sp/>ok<sp/>=<sp/>lwGetGradient(<sp/>fp,<sp/>sz,<sp/>tex<sp/>);<sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>!fp-&gt;Seek(<sp/>sz,<sp/>FS_SEEK_CUR<sp/>);</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"></highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ok<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lwFreeTexture(<sp/>tex<sp/>);</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"></highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/>set_flen(<sp/>bloksz<sp/>);</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tex;</highlight></codeline>
<codeline lineno="3476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"></highlight></codeline>
<codeline lineno="3478"><highlight class="normal"></highlight></codeline>
<codeline lineno="3479"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3480"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="3481"><highlight class="comment">lwGetShader()</highlight></codeline>
<codeline lineno="3482"><highlight class="comment"></highlight></codeline>
<codeline lineno="3483"><highlight class="comment">Read<sp/>a<sp/>shader<sp/>record<sp/>from<sp/>a<sp/>SURF.BLOK<sp/>in<sp/>an<sp/>LWO2<sp/>file.</highlight></codeline>
<codeline lineno="3484"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3485"><highlight class="normal"></highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><ref refid="structst__lw_plugin" kindref="compound">lwPlugin</ref><sp/>*lwGetShader(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bloksz<sp/>)</highlight></codeline>
<codeline lineno="3487"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_plugin" kindref="compound">lwPlugin</ref><sp/>*shdr;</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>sz;</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hsz,<sp/>rlen,<sp/>pos;</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"></highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/>shdr<sp/>=<sp/>(<ref refid="structst__lw_plugin" kindref="compound">lwPlugin</ref>*)Mem_ClearedAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_plugin" kindref="compound">lwPlugin</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!shdr<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"></highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/>pos<sp/>=<sp/>fp-&gt;Tell();</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/>hsz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/>shdr-&gt;ord<sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>0<sp/>&gt;<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"></highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>hsz<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>+=<sp/>sz<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hsz<sp/>-=<sp/>sz;</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>ID_ENAB<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shdr-&gt;flags<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp-&gt;Seek(<sp/>sz,<sp/>FS_SEEK_CUR<sp/>);</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"></highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>0<sp/>&gt;<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"></highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>+=<sp/>sz<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"></highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_FUNC:</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shdr-&gt;name<sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>get_flen();</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shdr-&gt;data<sp/>=<sp/>getbytes(<sp/>fp,<sp/>sz<sp/>-<sp/>rlen<sp/>);</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"></highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"></highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>while<sp/>reading<sp/>the<sp/>current<sp/>subchunk?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3538"><highlight class="normal"></highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>get_flen();</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>0<sp/>||<sp/>rlen<sp/>&gt;<sp/>sz<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"></highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>skip<sp/>unread<sp/>parts<sp/>of<sp/>the<sp/>current<sp/>subchunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3543"><highlight class="normal"></highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>sz<sp/>)</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp-&gt;Seek(<sp/>sz<sp/>-<sp/>rlen,<sp/>FS_SEEK_CUR<sp/>);</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"></highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>the<sp/>shader<sp/>block?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3548"><highlight class="normal"></highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bloksz<sp/>&lt;=<sp/>fp-&gt;Tell()<sp/>-<sp/>pos<sp/>)</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"></highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>next<sp/>subchunk<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3553"><highlight class="normal"></highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>6<sp/>!=<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"></highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/>set_flen(<sp/>fp-&gt;Tell()<sp/>-<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shdr;</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"></highlight></codeline>
<codeline lineno="3563"><highlight class="normal">Fail:</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/>lwFreePlugin(<sp/>shdr<sp/>);</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"></highlight></codeline>
<codeline lineno="3568"><highlight class="normal"></highlight></codeline>
<codeline lineno="3569"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3570"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="3571"><highlight class="comment">compare_textures()</highlight></codeline>
<codeline lineno="3572"><highlight class="comment">compare_shaders()</highlight></codeline>
<codeline lineno="3573"><highlight class="comment"></highlight></codeline>
<codeline lineno="3574"><highlight class="comment">Callbacks<sp/>for<sp/>the<sp/>lwListInsert()<sp/>function,<sp/>which<sp/>is<sp/>called<sp/>to<sp/>add</highlight></codeline>
<codeline lineno="3575"><highlight class="comment">textures<sp/>to<sp/>surface<sp/>channels<sp/>and<sp/>shaders<sp/>to<sp/>surfaces.</highlight></codeline>
<codeline lineno="3576"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3577"><highlight class="normal"></highlight></codeline>
<codeline lineno="3578"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compare_textures(<sp/><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref><sp/>*a,<sp/><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref><sp/>*b<sp/>)</highlight></codeline>
<codeline lineno="3579"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strcmp(<sp/>a-&gt;ord,<sp/>b-&gt;ord<sp/>);</highlight></codeline>
<codeline lineno="3581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"></highlight></codeline>
<codeline lineno="3583"><highlight class="normal"></highlight></codeline>
<codeline lineno="3584"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compare_shaders(<sp/><ref refid="structst__lw_plugin" kindref="compound">lwPlugin</ref><sp/>*a,<sp/><ref refid="structst__lw_plugin" kindref="compound">lwPlugin</ref><sp/>*b<sp/>)</highlight></codeline>
<codeline lineno="3585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strcmp(<sp/>a-&gt;ord,<sp/>b-&gt;ord<sp/>);</highlight></codeline>
<codeline lineno="3587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"></highlight></codeline>
<codeline lineno="3589"><highlight class="normal"></highlight></codeline>
<codeline lineno="3590"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3591"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="3592"><highlight class="comment">add_texture()</highlight></codeline>
<codeline lineno="3593"><highlight class="comment"></highlight></codeline>
<codeline lineno="3594"><highlight class="comment">Finds<sp/>the<sp/>surface<sp/>channel<sp/>(lwTParam<sp/>or<sp/>lwCParam)<sp/>to<sp/>which<sp/>a<sp/>texture<sp/>is</highlight></codeline>
<codeline lineno="3595"><highlight class="comment">applied,<sp/>then<sp/>calls<sp/>lwListInsert().</highlight></codeline>
<codeline lineno="3596"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3597"><highlight class="normal"></highlight></codeline>
<codeline lineno="3598"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>add_texture(<sp/><ref refid="structst__lw_surface" kindref="compound">lwSurface</ref><sp/>*surf,<sp/><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref><sp/>*tex<sp/>)</highlight></codeline>
<codeline lineno="3599"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref><sp/>**list;</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"></highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>tex-&gt;chan<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_COLR:<sp/><sp/>list<sp/>=<sp/>&amp;surf-&gt;color.tex;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_LUMI:<sp/><sp/>list<sp/>=<sp/>&amp;surf-&gt;luminosity.tex;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_DIFF:<sp/><sp/>list<sp/>=<sp/>&amp;surf-&gt;diffuse.tex;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_SPEC:<sp/><sp/>list<sp/>=<sp/>&amp;surf-&gt;specularity.tex;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_GLOS:<sp/><sp/>list<sp/>=<sp/>&amp;surf-&gt;glossiness.tex;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_REFL:<sp/><sp/>list<sp/>=<sp/>&amp;surf-&gt;reflection.val.tex;<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TRAN:<sp/><sp/>list<sp/>=<sp/>&amp;surf-&gt;transparency.val.tex;<sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_RIND:<sp/><sp/>list<sp/>=<sp/>&amp;surf-&gt;eta.tex;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TRNL:<sp/><sp/>list<sp/>=<sp/>&amp;surf-&gt;translucency.tex;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_BUMP:<sp/><sp/>list<sp/>=<sp/>&amp;surf-&gt;bump.tex;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"></highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/>lwListInsert(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)list,<sp/>tex,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(__cdecl<sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))compare_textures<sp/>);</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="3618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"></highlight></codeline>
<codeline lineno="3620"><highlight class="normal"></highlight></codeline>
<codeline lineno="3621"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3622"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="3623"><highlight class="comment">lwDefaultSurface()</highlight></codeline>
<codeline lineno="3624"><highlight class="comment"></highlight></codeline>
<codeline lineno="3625"><highlight class="comment">Allocate<sp/>and<sp/>initialize<sp/>a<sp/>surface.</highlight></codeline>
<codeline lineno="3626"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3627"><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><ref refid="structst__lw_surface" kindref="compound">lwSurface</ref><sp/>*lwDefaultSurface(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="3629"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_surface" kindref="compound">lwSurface</ref><sp/>*surf;</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"></highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/>surf<sp/>=<sp/>(<ref refid="structst__lw_surface" kindref="compound">lwSurface</ref>*)Mem_ClearedAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_surface" kindref="compound">lwSurface</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!surf<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"></highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;color.rgb[<sp/>0<sp/>]<sp/>=<sp/>0.78431f;</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;color.rgb[<sp/>1<sp/>]<sp/>=<sp/>0.78431f;</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;color.rgb[<sp/>2<sp/>]<sp/>=<sp/>0.78431f;</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;diffuse.val<sp/><sp/><sp/><sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;glossiness.val<sp/>=<sp/>0.4f;</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;bump.val<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;eta.val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;sideflags<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"></highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>surf;</highlight></codeline>
<codeline lineno="3645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"></highlight></codeline>
<codeline lineno="3647"><highlight class="normal"></highlight></codeline>
<codeline lineno="3648"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3649"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="3650"><highlight class="comment">lwGetSurface()</highlight></codeline>
<codeline lineno="3651"><highlight class="comment"></highlight></codeline>
<codeline lineno="3652"><highlight class="comment">Read<sp/>an<sp/>lwSurface<sp/>from<sp/>an<sp/>LWO2<sp/>file.</highlight></codeline>
<codeline lineno="3653"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3654"><highlight class="normal"></highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><ref refid="structst__lw_surface" kindref="compound">lwSurface</ref><sp/>*lwGetSurface(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cksize<sp/>)</highlight></codeline>
<codeline lineno="3656"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_surface" kindref="compound">lwSurface</ref><sp/>*surf;</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_texture" kindref="compound">lwTexture</ref><sp/>*tex;</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_plugin" kindref="compound">lwPlugin</ref><sp/>*shdr;</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id,<sp/>type;</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>sz;</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/>rlen;</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"></highlight></codeline>
<codeline lineno="3664"><highlight class="normal"></highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>the<sp/>Surface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3666"><highlight class="normal"></highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/>surf<sp/>=<sp/>(<ref refid="structst__lw_surface" kindref="compound">lwSurface</ref>*)Mem_ClearedAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_surface" kindref="compound">lwSurface</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!surf<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"></highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>non-zero<sp/>defaults<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3671"><highlight class="normal"></highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;color.rgb[<sp/>0<sp/>]<sp/>=<sp/>0.78431f;</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;color.rgb[<sp/>1<sp/>]<sp/>=<sp/>0.78431f;</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;color.rgb[<sp/>2<sp/>]<sp/>=<sp/>0.78431f;</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;diffuse.val<sp/><sp/><sp/><sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;glossiness.val<sp/>=<sp/>0.4f;</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;bump.val<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;eta.val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;sideflags<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"></highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>remember<sp/>where<sp/>we<sp/>started<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3682"><highlight class="normal"></highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/>pos<sp/>=<sp/>fp-&gt;Tell();</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"></highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>names<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3687"><highlight class="normal"></highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;name<sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/>surf-&gt;srcname<sp/>=<sp/>getS0(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"></highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>subchunk<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3692"><highlight class="normal"></highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>0<sp/>&gt;<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"></highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>process<sp/>subchunks<sp/>as<sp/>they&apos;re<sp/>encountered<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3698"><highlight class="normal"></highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>+=<sp/>sz<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"></highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_COLR:</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;color.rgb[<sp/>0<sp/>]<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;color.rgb[<sp/>1<sp/>]<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;color.rgb[<sp/>2<sp/>]<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;color.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"></highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_LUMI:</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;luminosity.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;luminosity.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"></highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_DIFF:</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;diffuse.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;diffuse.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"></highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_SPEC:</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;specularity.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;specularity.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"></highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_GLOS:</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;glossiness.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;glossiness.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"></highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_REFL:</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;reflection.val.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;reflection.val.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"></highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_RFOP:</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;reflection.options<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"></highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_RIMG:</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;reflection.cindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"></highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_RSAN:</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;reflection.seam_angle<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"></highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TRAN:</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;transparency.val.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;transparency.val.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"></highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TROP:</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;transparency.options<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"></highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TIMG:</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;transparency.cindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"></highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_RIND:</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;eta.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;eta.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"></highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_TRNL:</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;translucency.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;translucency.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"></highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_BUMP:</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;bump.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;bump.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"></highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_SMAN:</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;smooth<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"></highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_SIDE:</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;sideflags<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"></highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_CLRH:</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;color_hilite.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;color_hilite.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"></highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_CLRF:</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;color_filter.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;color_filter.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"></highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_ADTR:</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;add_trans.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;add_trans.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"></highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_SHRP:</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;dif_sharp.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;dif_sharp.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"></highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_GVAL:</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;glow.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;glow.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"></highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_LINE:</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;line.enabled<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sz<sp/>&gt;=<sp/>2<sp/>)<sp/>surf-&gt;line.flags<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sz<sp/>&gt;=<sp/>6<sp/>)<sp/>surf-&gt;line.size.val<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sz<sp/>&gt;=<sp/>8<sp/>)<sp/>surf-&gt;line.size.eindex<sp/>=<sp/>getVX(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"></highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_ALPH:</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;alpha_mode<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;alpha<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"></highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_AVAL:</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surf-&gt;alpha<sp/>=<sp/>getF4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"></highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_BLOK:</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"></highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>type<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_IMAP:</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_PROC:</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_GRAD:</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex<sp/>=<sp/>lwGetTexture(<sp/>fp,<sp/>sz<sp/>-<sp/>4,<sp/>type<sp/>);</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!tex<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!add_texture(<sp/>surf,<sp/>tex<sp/>))</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwFreeTexture(<sp/>tex<sp/>);</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>4<sp/>+<sp/>get_flen()<sp/>);</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ID_SHDR:</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shdr<sp/>=<sp/>lwGetShader(<sp/>fp,<sp/>sz<sp/>-<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!shdr<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwListInsert(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;surf-&gt;shader,<sp/>shdr,<sp/>(int<sp/>(__cdecl<sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))compare_shaders<sp/>);</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++surf-&gt;nshaders;</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>4<sp/>+<sp/>get_flen()<sp/>);</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"></highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"></highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>while<sp/>reading<sp/>current<sp/>subchunk?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3853"><highlight class="normal"></highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>get_flen();</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>0<sp/>||<sp/>rlen<sp/>&gt;<sp/>sz<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"></highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>skip<sp/>unread<sp/>parts<sp/>of<sp/>the<sp/>current<sp/>subchunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3858"><highlight class="normal"></highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rlen<sp/>&lt;<sp/>sz<sp/>)</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp-&gt;Seek(<sp/>sz<sp/>-<sp/>rlen,<sp/>FS_SEEK_CUR<sp/>);</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"></highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>the<sp/>SURF<sp/>chunk?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3863"><highlight class="normal"></highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cksize<sp/>&lt;=<sp/>fp-&gt;Tell()<sp/>-<sp/>pos<sp/>)</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"></highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>next<sp/>subchunk<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3868"><highlight class="normal"></highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>getU4(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>=<sp/>getU2(<sp/>fp<sp/>);</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>6<sp/>!=<sp/>get_flen()<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"></highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>surf;</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"></highlight></codeline>
<codeline lineno="3877"><highlight class="normal">Fail:</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>surf<sp/>)<sp/>lwFreeSurface(<sp/>surf<sp/>);</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"></highlight></codeline>
<codeline lineno="3882"><highlight class="normal"></highlight></codeline>
<codeline lineno="3883"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dot(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a[],<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b[]<sp/>)</highlight></codeline>
<codeline lineno="3884"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a[<sp/>0<sp/>]<sp/>*<sp/>b[<sp/>0<sp/>]<sp/>+<sp/>a[<sp/>1<sp/>]<sp/>*<sp/>b[<sp/>1<sp/>]<sp/>+<sp/>a[<sp/>2<sp/>]<sp/>*<sp/>b[<sp/>2<sp/>];</highlight></codeline>
<codeline lineno="3886"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"></highlight></codeline>
<codeline lineno="3888"><highlight class="normal"></highlight></codeline>
<codeline lineno="3889"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cross(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a[],<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b[],<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>c[]<sp/>)</highlight></codeline>
<codeline lineno="3890"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/>c[<sp/>0<sp/>]<sp/>=<sp/>a[<sp/>1<sp/>]<sp/>*<sp/>b[<sp/>2<sp/>]<sp/>-<sp/>a[<sp/>2<sp/>]<sp/>*<sp/>b[<sp/>1<sp/>];</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/>c[<sp/>1<sp/>]<sp/>=<sp/>a[<sp/>2<sp/>]<sp/>*<sp/>b[<sp/>0<sp/>]<sp/>-<sp/>a[<sp/>0<sp/>]<sp/>*<sp/>b[<sp/>2<sp/>];</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/>c[<sp/>2<sp/>]<sp/>=<sp/>a[<sp/>0<sp/>]<sp/>*<sp/>b[<sp/>1<sp/>]<sp/>-<sp/>a[<sp/>1<sp/>]<sp/>*<sp/>b[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="3894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"></highlight></codeline>
<codeline lineno="3896"><highlight class="normal"></highlight></codeline>
<codeline lineno="3897"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>normalize(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v[]<sp/>)</highlight></codeline>
<codeline lineno="3898"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"></highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/>r<sp/>=<sp/>(<sp/>float<sp/>)<sp/>idMath::Sqrt(<sp/>dot(<sp/>v,<sp/>v<sp/>));</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[<sp/>0<sp/>]<sp/>/=<sp/>r;</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[<sp/>1<sp/>]<sp/>/=<sp/>r;</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[<sp/>2<sp/>]<sp/>/=<sp/>r;</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"></highlight></codeline>
<codeline lineno="3909"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3910"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="3911"><highlight class="comment">lwFreeVMap()</highlight></codeline>
<codeline lineno="3912"><highlight class="comment"></highlight></codeline>
<codeline lineno="3913"><highlight class="comment">Free<sp/>memory<sp/>used<sp/>by<sp/>an<sp/>lwVMap.</highlight></codeline>
<codeline lineno="3914"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3915"><highlight class="normal"></highlight></codeline>
<codeline lineno="3916"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lwFreeVMap(<sp/><ref refid="structst__lw_v_map" kindref="compound">lwVMap</ref><sp/>*vmap<sp/>)</highlight></codeline>
<codeline lineno="3917"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vmap<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vmap-&gt;name<sp/>)<sp/>Mem_Free(<sp/>vmap-&gt;name<sp/>);</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vmap-&gt;vindex<sp/>)<sp/>Mem_Free(<sp/>vmap-&gt;vindex<sp/>);</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vmap-&gt;pindex<sp/>)<sp/>Mem_Free(<sp/>vmap-&gt;pindex<sp/>);</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vmap-&gt;val<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vmap-&gt;val[<sp/>0<sp/>]<sp/>)<sp/>Mem_Free(<sp/>vmap-&gt;val[<sp/>0<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>vmap-&gt;val<sp/>);</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>vmap<sp/>);</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3928"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"></highlight></codeline>
<codeline lineno="3930"><highlight class="normal"></highlight></codeline>
<codeline lineno="3931"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3932"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="3933"><highlight class="comment">lwGetVMap()</highlight></codeline>
<codeline lineno="3934"><highlight class="comment"></highlight></codeline>
<codeline lineno="3935"><highlight class="comment">Read<sp/>an<sp/>lwVMap<sp/>from<sp/>a<sp/>VMAP<sp/>or<sp/>VMAD<sp/>chunk<sp/>in<sp/>an<sp/>LWO2.</highlight></codeline>
<codeline lineno="3936"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3937"><highlight class="normal"></highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><ref refid="structst__lw_v_map" kindref="compound">lwVMap</ref><sp/>*lwGetVMap(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*fp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cksize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ptoffset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>poloffset,</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>perpoly<sp/>)</highlight></codeline>
<codeline lineno="3940"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/>*bp;</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_v_map" kindref="compound">lwVMap</ref><sp/>*vmap;</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*f;</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>npts,<sp/>rlen;</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"></highlight></codeline>
<codeline lineno="3946"><highlight class="normal"></highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>the<sp/>whole<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3948"><highlight class="normal"></highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/><sp/>buf<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)getbytes(<sp/>fp,<sp/>cksize<sp/>);</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!buf<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"></highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/>vmap<sp/>=<sp/>(<ref refid="structst__lw_v_map" kindref="compound">lwVMap</ref>*)Mem_ClearedAlloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_v_map" kindref="compound">lwVMap</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!vmap<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>buf<sp/>);</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"></highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>the<sp/>vmap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3960"><highlight class="normal"></highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/>vmap-&gt;perpoly<sp/>=<sp/>perpoly;</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"></highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/>bp<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/>set_flen(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/>vmap-&gt;type<sp/>=<sp/>sgetU4(<sp/>&amp;bp<sp/>);</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/>vmap-&gt;dim<sp/><sp/>=<sp/>sgetU2(<sp/>&amp;bp<sp/>);</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/>vmap-&gt;name<sp/>=<sp/>sgetS0(<sp/>&amp;bp<sp/>);</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/>rlen<sp/>=<sp/>get_flen();</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"></highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>count<sp/>the<sp/>vmap<sp/>records<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3971"><highlight class="normal"></highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/>npts<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>bp<sp/>&lt;<sp/>buf<sp/>+<sp/>cksize<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>sgetVX(<sp/>&amp;bp<sp/>);</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>perpoly<sp/>)</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>sgetVX(<sp/>&amp;bp<sp/>);</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bp<sp/>+=<sp/>vmap-&gt;dim<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>float<sp/>);</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++npts;</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"></highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>the<sp/>vmap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3982"><highlight class="normal"></highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/><sp/>vmap-&gt;nverts<sp/>=<sp/>npts;</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/><sp/>vmap-&gt;vindex<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)Mem_ClearedAlloc(<sp/>npts<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!vmap-&gt;vindex<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>perpoly<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vmap-&gt;pindex<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)Mem_ClearedAlloc(<sp/>npts<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!vmap-&gt;pindex<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"></highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vmap-&gt;dim<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vmap-&gt;val<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">**)Mem_ClearedAlloc(<sp/>npts<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!vmap-&gt;val<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)Mem_ClearedAlloc(<sp/>npts<sp/>*<sp/>vmap-&gt;dim<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!f<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Fail;</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>npts;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vmap-&gt;val[<sp/>i<sp/>]<sp/>=<sp/>f<sp/>+<sp/>i<sp/>*<sp/>vmap-&gt;dim;</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"></highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fill<sp/>in<sp/>the<sp/>vmap<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4001"><highlight class="normal"></highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/>bp<sp/>=<sp/>buf<sp/>+<sp/>rlen;</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>npts;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vmap-&gt;vindex[<sp/>i<sp/>]<sp/>=<sp/>sgetVX(<sp/>&amp;bp<sp/>);</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>perpoly<sp/>)</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vmap-&gt;pindex[<sp/>i<sp/>]<sp/>=<sp/>sgetVX(<sp/>&amp;bp<sp/>);</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>vmap-&gt;dim;<sp/>j++<sp/>)</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vmap-&gt;val[<sp/>i<sp/>][<sp/>j<sp/>]<sp/>=<sp/>sgetF4(<sp/>&amp;bp<sp/>);</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"></highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/><sp/>Mem_Free(<sp/>buf<sp/>);</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vmap;</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"></highlight></codeline>
<codeline lineno="4014"><highlight class="normal">Fail:</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>buf<sp/>)<sp/>Mem_Free(<sp/>buf<sp/>);</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/>lwFreeVMap(<sp/>vmap<sp/>);</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4018"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"></highlight></codeline>
<codeline lineno="4020"><highlight class="normal"></highlight></codeline>
<codeline lineno="4021"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4022"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="4023"><highlight class="comment">lwGetPointVMaps()</highlight></codeline>
<codeline lineno="4024"><highlight class="comment"></highlight></codeline>
<codeline lineno="4025"><highlight class="comment">Fill<sp/>in<sp/>the<sp/>lwVMapPt<sp/>structure<sp/>for<sp/>each<sp/>point.</highlight></codeline>
<codeline lineno="4026"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4027"><highlight class="normal"></highlight></codeline>
<codeline lineno="4028"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lwGetPointVMaps(<sp/><ref refid="structst__lw_point_list" kindref="compound">lwPointList</ref><sp/>*point,<sp/><ref refid="structst__lw_v_map" kindref="compound">lwVMap</ref><sp/>*vmap<sp/>)</highlight></codeline>
<codeline lineno="4029"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_v_map" kindref="compound">lwVMap</ref><sp/>*vm;</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>n;</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"></highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>count<sp/>the<sp/>number<sp/>of<sp/>vmap<sp/>values<sp/>for<sp/>each<sp/>point<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4034"><highlight class="normal"></highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/><sp/>vm<sp/>=<sp/>vmap;</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>vm<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!vm-&gt;perpoly<sp/>)</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vm-&gt;nverts;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++point-&gt;pt[<sp/>vm-&gt;vindex[<sp/>i<sp/>]].nvmaps;</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vm<sp/>=<sp/>vm-&gt;next;</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"></highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>vmap<sp/>references<sp/>for<sp/>each<sp/>mapped<sp/>point<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4044"><highlight class="normal"></highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>point-&gt;count;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>point-&gt;pt[<sp/>i<sp/>].nvmaps<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point-&gt;pt[<sp/>i<sp/>].vm<sp/>=<sp/>(<ref refid="structst__lw_v_map_pt" kindref="compound">lwVMapPt</ref>*)Mem_ClearedAlloc(<sp/>point-&gt;pt[<sp/>i<sp/>].nvmaps<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_v_map_pt" kindref="compound">lwVMapPt</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!point-&gt;pt[<sp/>i<sp/>].vm<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point-&gt;pt[<sp/>i<sp/>].nvmaps<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"></highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fill<sp/>in<sp/>vmap<sp/>references<sp/>for<sp/>each<sp/>mapped<sp/>point<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4054"><highlight class="normal"></highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/>vm<sp/>=<sp/>vmap;</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>vm<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!vm-&gt;perpoly<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vm-&gt;nverts;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>vm-&gt;vindex[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>point-&gt;pt[<sp/>j<sp/>].nvmaps;</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point-&gt;pt[<sp/>j<sp/>].vm[<sp/>n<sp/>].vmap<sp/>=<sp/>vm;</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point-&gt;pt[<sp/>j<sp/>].vm[<sp/>n<sp/>].index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++point-&gt;pt[<sp/>j<sp/>].nvmaps;</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vm<sp/>=<sp/>vm-&gt;next;</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"></highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4070"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"></highlight></codeline>
<codeline lineno="4072"><highlight class="normal"></highlight></codeline>
<codeline lineno="4073"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4074"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="4075"><highlight class="comment">lwGetPolyVMaps()</highlight></codeline>
<codeline lineno="4076"><highlight class="comment"></highlight></codeline>
<codeline lineno="4077"><highlight class="comment">Fill<sp/>in<sp/>the<sp/>lwVMapPt<sp/>structure<sp/>for<sp/>each<sp/>polygon<sp/>vertex.</highlight></codeline>
<codeline lineno="4078"><highlight class="comment">======================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4079"><highlight class="normal"></highlight></codeline>
<codeline lineno="4080"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lwGetPolyVMaps(<sp/><ref refid="structst__lw_polygon_list" kindref="compound">lwPolygonList</ref><sp/>*polygon,<sp/><ref refid="structst__lw_v_map" kindref="compound">lwVMap</ref><sp/>*vmap<sp/>)</highlight></codeline>
<codeline lineno="4081"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_v_map" kindref="compound">lwVMap</ref><sp/>*vm;</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/><ref refid="structst__lw_pol_vert" kindref="compound">lwPolVert</ref><sp/>*pv;</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"></highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>count<sp/>the<sp/>number<sp/>of<sp/>vmap<sp/>values<sp/>for<sp/>each<sp/>polygon<sp/>vertex<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4087"><highlight class="normal"></highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/>vm<sp/>=<sp/>vmap;</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>vm<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vm-&gt;perpoly<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vm-&gt;nverts;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>polygon-&gt;pol[<sp/>vm-&gt;pindex[<sp/>i<sp/>]].nverts;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pv<sp/>=<sp/>&amp;polygon-&gt;pol[<sp/>vm-&gt;pindex[<sp/>i<sp/>]].v[<sp/>j<sp/>];</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vm-&gt;vindex[<sp/>i<sp/>]<sp/>==<sp/>pv-&gt;index<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++pv-&gt;nvmaps;</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vm<sp/>=<sp/>vm-&gt;next;</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"></highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>vmap<sp/>references<sp/>for<sp/>each<sp/>mapped<sp/>vertex<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4105"><highlight class="normal"></highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>polygon-&gt;count;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>polygon-&gt;pol[<sp/>i<sp/>].nverts;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pv<sp/>=<sp/>&amp;polygon-&gt;pol[<sp/>i<sp/>].v[<sp/>j<sp/>];</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pv-&gt;nvmaps<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pv-&gt;vm<sp/>=<sp/>(<ref refid="structst__lw_v_map_pt" kindref="compound">lwVMapPt</ref>*)Mem_ClearedAlloc(<sp/>pv-&gt;nvmaps<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structst__lw_v_map_pt" kindref="compound">lwVMapPt</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!pv-&gt;vm<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pv-&gt;nvmaps<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"></highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fill<sp/>in<sp/>vmap<sp/>references<sp/>for<sp/>each<sp/>mapped<sp/>point<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4118"><highlight class="normal"></highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/>vm<sp/>=<sp/>vmap;</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>vm<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vm-&gt;perpoly<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vm-&gt;nverts;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>polygon-&gt;pol[<sp/>vm-&gt;pindex[<sp/>i<sp/>]].nverts;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pv<sp/>=<sp/>&amp;polygon-&gt;pol[<sp/>vm-&gt;pindex[<sp/>i<sp/>]].v[<sp/>j<sp/>];</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vm-&gt;vindex[<sp/>i<sp/>]<sp/>==<sp/>pv-&gt;index<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pv-&gt;vm[<sp/>pv-&gt;nvmaps<sp/>].vmap<sp/>=<sp/>vm;</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pv-&gt;vm[<sp/>pv-&gt;nvmaps<sp/>].index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++pv-&gt;nvmaps;</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vm<sp/>=<sp/>vm-&gt;next;</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"></highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4138"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/renderer/Model_lwo.cpp"/>
  </compounddef>
</doxygen>
