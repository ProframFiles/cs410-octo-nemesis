<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_static_list_8h" kind="file">
    <compoundname>StaticList.h</compoundname>
    <includedby refid="_lib_8h" local="yes">E:/sources/3rd_party/DOOM/neo/idlib/Lib.h</includedby>
    <innerclass refid="classid_static_list" prot="public">idStaticList</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__STATICLIST_H__</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__STATICLIST_H__</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="33"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="34"><highlight class="comment"></highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/>Static<sp/>list<sp/>template</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/>A<sp/>non-growing,<sp/>memset-able<sp/>list<sp/>using<sp/>no<sp/>memory<sp/>allocation.</highlight></codeline>
<codeline lineno="37"><highlight class="comment"></highlight></codeline>
<codeline lineno="38"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="39"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="42" refid="classid_static_list" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classid_static_list" kindref="compound">idStaticList</ref><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_static_list" kindref="compound">idStaticList</ref>();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_static_list" kindref="compound">idStaticList</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;</ref><sp/>&amp;other<sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;</ref>(<sp/>void<sp/>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Clear(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>marks<sp/>the<sp/>list<sp/>as<sp/>empty.<sp/><sp/>does<sp/>not<sp/>deallocate<sp/>or<sp/>intialize<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Num(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Max(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetNum(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newnum<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Allocated(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>total<sp/>size<sp/>of<sp/>allocated<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Size(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>total<sp/>size<sp/>of<sp/>allocated<sp/>memory<sp/>including<sp/>size<sp/>of<sp/>list<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemoryUsed(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>size<sp/>of<sp/>the<sp/>used<sp/>elements<sp/>in<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator[](<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator[](<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ptr(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ptr(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Alloc(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>reference<sp/>to<sp/>a<sp/>new<sp/>data<sp/>element<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>list.<sp/><sp/>returns<sp/>NULL<sp/>when<sp/>full.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Append(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>&amp;<sp/>obj<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>append<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Append(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;</ref><sp/>&amp;other<sp/>);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>append<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddUnique(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>&amp;<sp/>obj<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>unique<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Insert(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>&amp;<sp/>obj,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>the<sp/>element<sp/>at<sp/>the<sp/>given<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FindIndex(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>&amp;<sp/>obj<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>index<sp/>for<sp/>the<sp/>given<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Find(<sp/>type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>obj<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>pointer<sp/>to<sp/>the<sp/>given<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FindNull(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>index<sp/>for<sp/>the<sp/>first<sp/>NULL<sp/>pointer<sp/>in<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexOf(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>*obj<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>the<sp/>index<sp/>for<sp/>the<sp/>pointer<sp/>to<sp/>an<sp/>element<sp/>in<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RemoveIndex(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>the<sp/>element<sp/>at<sp/>the<sp/>given<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Remove(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>&amp;<sp/>obj<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>the<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Swap(<sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;</ref><sp/>&amp;other<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>swap<sp/>the<sp/>contents<sp/>of<sp/>the<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeleteContents(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clear<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>the<sp/>contents<sp/>of<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list[<sp/>size<sp/>];</highlight></codeline>
<codeline lineno="80"><highlight class="normal">};</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="83"><highlight class="comment">================</highlight></codeline>
<codeline lineno="84"><highlight class="comment">idStaticList&lt;type,size&gt;::idStaticList()</highlight></codeline>
<codeline lineno="85"><highlight class="comment">================</highlight></codeline>
<codeline lineno="86"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">ID_INLINE<sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::idStaticList</ref>()<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="93"><highlight class="comment">================</highlight></codeline>
<codeline lineno="94"><highlight class="comment">idStaticList&lt;type,size&gt;::idStaticList(<sp/>const<sp/>idStaticList&lt;type,size&gt;<sp/>&amp;other<sp/>)</highlight></codeline>
<codeline lineno="95"><highlight class="comment">================</highlight></codeline>
<codeline lineno="96"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">ID_INLINE<sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::idStaticList</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;</ref><sp/>&amp;other<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="103"><highlight class="comment">================</highlight></codeline>
<codeline lineno="104"><highlight class="comment">idStaticList&lt;type,size&gt;::~idStaticList&lt;type,size&gt;</highlight></codeline>
<codeline lineno="105"><highlight class="comment">================</highlight></codeline>
<codeline lineno="106"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">ID_INLINE<sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::~idStaticList</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="112"><highlight class="comment">================</highlight></codeline>
<codeline lineno="113"><highlight class="comment">idStaticList&lt;type,size&gt;::Clear</highlight></codeline>
<codeline lineno="114"><highlight class="comment"></highlight></codeline>
<codeline lineno="115"><highlight class="comment">Sets<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>list<sp/>to<sp/>0.<sp/><sp/>Assumes<sp/>that<sp/>type<sp/>automatically<sp/>handles<sp/>freeing<sp/>up<sp/>memory.</highlight></codeline>
<codeline lineno="116"><highlight class="comment">================</highlight></codeline>
<codeline lineno="117"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::Clear</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="124"><highlight class="comment">================</highlight></codeline>
<codeline lineno="125"><highlight class="comment">idStaticList&lt;type,size&gt;::DeleteContents</highlight></codeline>
<codeline lineno="126"><highlight class="comment"></highlight></codeline>
<codeline lineno="127"><highlight class="comment">Calls<sp/>the<sp/>destructor<sp/>of<sp/>all<sp/>elements<sp/>in<sp/>the<sp/>list.<sp/><sp/>Conditionally<sp/>frees<sp/>up<sp/>memory<sp/>used<sp/>by<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="128"><highlight class="comment">Note<sp/>that<sp/>this<sp/>only<sp/>works<sp/>on<sp/>lists<sp/>containing<sp/>pointers<sp/>to<sp/>objects<sp/>and<sp/>will<sp/>cause<sp/>a<sp/>compiler<sp/>error</highlight></codeline>
<codeline lineno="129"><highlight class="comment">if<sp/>called<sp/>with<sp/>non-pointers.<sp/><sp/>Since<sp/>the<sp/>list<sp/>was<sp/>not<sp/>responsible<sp/>for<sp/>allocating<sp/>the<sp/>object,<sp/>it<sp/>has</highlight></codeline>
<codeline lineno="130"><highlight class="comment">no<sp/>information<sp/>on<sp/>whether<sp/>the<sp/>object<sp/>still<sp/>exists<sp/>or<sp/>not,<sp/>so<sp/>care<sp/>must<sp/>be<sp/>taken<sp/>to<sp/>ensure<sp/>that</highlight></codeline>
<codeline lineno="131"><highlight class="comment">the<sp/>pointers<sp/>are<sp/>still<sp/>valid<sp/>when<sp/>this<sp/>function<sp/>is<sp/>called.<sp/><sp/>Function<sp/>will<sp/>set<sp/>all<sp/>pointers<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="132"><highlight class="comment">list<sp/>to<sp/>NULL.</highlight></codeline>
<codeline lineno="133"><highlight class="comment">================</highlight></codeline>
<codeline lineno="134"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::DeleteContents</ref>(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clear<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>list[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list[<sp/>i<sp/>]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clear<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Clear();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(<sp/>list,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>list<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="152"><highlight class="comment">================</highlight></codeline>
<codeline lineno="153"><highlight class="comment">idStaticList&lt;type,size&gt;::Num</highlight></codeline>
<codeline lineno="154"><highlight class="comment"></highlight></codeline>
<codeline lineno="155"><highlight class="comment">Returns<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>currently<sp/>contained<sp/>in<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="156"><highlight class="comment">================</highlight></codeline>
<codeline lineno="157"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="159"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::Num</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="164"><highlight class="comment">================</highlight></codeline>
<codeline lineno="165"><highlight class="comment">idStaticList&lt;type,size&gt;::Num</highlight></codeline>
<codeline lineno="166"><highlight class="comment"></highlight></codeline>
<codeline lineno="167"><highlight class="comment">Returns<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="168"><highlight class="comment">================</highlight></codeline>
<codeline lineno="169"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="171"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::Max</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="176"><highlight class="comment">================</highlight></codeline>
<codeline lineno="177"><highlight class="comment">idStaticList&lt;type&gt;::Allocated</highlight></codeline>
<codeline lineno="178"><highlight class="comment">================</highlight></codeline>
<codeline lineno="179"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="181"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::Allocated</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>type<sp/>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="186"><highlight class="comment">================</highlight></codeline>
<codeline lineno="187"><highlight class="comment">idStaticList&lt;type&gt;::Size</highlight></codeline>
<codeline lineno="188"><highlight class="comment">================</highlight></codeline>
<codeline lineno="189"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="191"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::Size</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;</ref><sp/>)<sp/>+<sp/>Allocated();</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="196"><highlight class="comment">================</highlight></codeline>
<codeline lineno="197"><highlight class="comment">idStaticList&lt;type,size&gt;::Num</highlight></codeline>
<codeline lineno="198"><highlight class="comment">================</highlight></codeline>
<codeline lineno="199"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="201"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::MemoryUsed</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>list[<sp/>0<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="206"><highlight class="comment">================</highlight></codeline>
<codeline lineno="207"><highlight class="comment">idStaticList&lt;type,size&gt;::SetNum</highlight></codeline>
<codeline lineno="208"><highlight class="comment"></highlight></codeline>
<codeline lineno="209"><highlight class="comment">Set<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>list.</highlight></codeline>
<codeline lineno="210"><highlight class="comment">================</highlight></codeline>
<codeline lineno="211"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="213"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::SetNum</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newnum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>newnum<sp/>&gt;=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>newnum<sp/>&lt;=<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>newnum;</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="220"><highlight class="comment">================</highlight></codeline>
<codeline lineno="221"><highlight class="comment">idStaticList&lt;type,size&gt;::operator[]<sp/>const</highlight></codeline>
<codeline lineno="222"><highlight class="comment"></highlight></codeline>
<codeline lineno="223"><highlight class="comment">Access<sp/>operator.<sp/><sp/>Index<sp/>must<sp/>be<sp/>within<sp/>range<sp/>or<sp/>an<sp/>assert<sp/>will<sp/>be<sp/>issued<sp/>in<sp/>debug<sp/>builds.</highlight></codeline>
<codeline lineno="224"><highlight class="comment">Release<sp/>builds<sp/>do<sp/>no<sp/>range<sp/>checking.</highlight></codeline>
<codeline lineno="225"><highlight class="comment">================</highlight></codeline>
<codeline lineno="226"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="228"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>&amp;<ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::operator[]</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>index<sp/>&gt;=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>index<sp/>&lt;<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list[<sp/>index<sp/>];</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="236"><highlight class="comment">================</highlight></codeline>
<codeline lineno="237"><highlight class="comment">idStaticList&lt;type,size&gt;::operator[]</highlight></codeline>
<codeline lineno="238"><highlight class="comment"></highlight></codeline>
<codeline lineno="239"><highlight class="comment">Access<sp/>operator.<sp/><sp/>Index<sp/>must<sp/>be<sp/>within<sp/>range<sp/>or<sp/>an<sp/>assert<sp/>will<sp/>be<sp/>issued<sp/>in<sp/>debug<sp/>builds.</highlight></codeline>
<codeline lineno="240"><highlight class="comment">Release<sp/>builds<sp/>do<sp/>no<sp/>range<sp/>checking.</highlight></codeline>
<codeline lineno="241"><highlight class="comment">================</highlight></codeline>
<codeline lineno="242"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">ID_INLINE<sp/>type<sp/>&amp;<ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::operator[]</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>index<sp/>&gt;=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>index<sp/>&lt;<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list[<sp/>index<sp/>];</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="252"><highlight class="comment">================</highlight></codeline>
<codeline lineno="253"><highlight class="comment">idStaticList&lt;type,size&gt;::Ptr</highlight></codeline>
<codeline lineno="254"><highlight class="comment"></highlight></codeline>
<codeline lineno="255"><highlight class="comment">Returns<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>begining<sp/>of<sp/>the<sp/>array.<sp/><sp/>Useful<sp/>for<sp/>iterating<sp/>through<sp/>the<sp/>list<sp/>in<sp/>loops.</highlight></codeline>
<codeline lineno="256"><highlight class="comment"></highlight></codeline>
<codeline lineno="257"><highlight class="comment">Note:<sp/>may<sp/>return<sp/>NULL<sp/>if<sp/>the<sp/>list<sp/>is<sp/>empty.</highlight></codeline>
<codeline lineno="258"><highlight class="comment"></highlight></codeline>
<codeline lineno="259"><highlight class="comment">FIXME:<sp/>Create<sp/>an<sp/>iterator<sp/>template<sp/>for<sp/>this<sp/>kind<sp/>of<sp/>thing.</highlight></codeline>
<codeline lineno="260"><highlight class="comment">================</highlight></codeline>
<codeline lineno="261"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="263"><highlight class="normal">ID_INLINE<sp/>type<sp/>*<ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::Ptr</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;list[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="268"><highlight class="comment">================</highlight></codeline>
<codeline lineno="269"><highlight class="comment">idStaticList&lt;type,size&gt;::Ptr</highlight></codeline>
<codeline lineno="270"><highlight class="comment"></highlight></codeline>
<codeline lineno="271"><highlight class="comment">Returns<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>begining<sp/>of<sp/>the<sp/>array.<sp/><sp/>Useful<sp/>for<sp/>iterating<sp/>through<sp/>the<sp/>list<sp/>in<sp/>loops.</highlight></codeline>
<codeline lineno="272"><highlight class="comment"></highlight></codeline>
<codeline lineno="273"><highlight class="comment">Note:<sp/>may<sp/>return<sp/>NULL<sp/>if<sp/>the<sp/>list<sp/>is<sp/>empty.</highlight></codeline>
<codeline lineno="274"><highlight class="comment"></highlight></codeline>
<codeline lineno="275"><highlight class="comment">FIXME:<sp/>Create<sp/>an<sp/>iterator<sp/>template<sp/>for<sp/>this<sp/>kind<sp/>of<sp/>thing.</highlight></codeline>
<codeline lineno="276"><highlight class="comment">================</highlight></codeline>
<codeline lineno="277"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/>*<ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::Ptr</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;list[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="284"><highlight class="comment">================</highlight></codeline>
<codeline lineno="285"><highlight class="comment">idStaticList&lt;type,size&gt;::Alloc</highlight></codeline>
<codeline lineno="286"><highlight class="comment"></highlight></codeline>
<codeline lineno="287"><highlight class="comment">Returns<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>new<sp/>data<sp/>element<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="288"><highlight class="comment">================</highlight></codeline>
<codeline lineno="289"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">ID_INLINE<sp/>type<sp/>*<ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::Alloc</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>num<sp/>&gt;=<sp/>size<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;list[<sp/>num++<sp/>];</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="300"><highlight class="comment">================</highlight></codeline>
<codeline lineno="301"><highlight class="comment">idStaticList&lt;type,size&gt;::Append</highlight></codeline>
<codeline lineno="302"><highlight class="comment"></highlight></codeline>
<codeline lineno="303"><highlight class="comment">Increases<sp/>the<sp/>size<sp/>of<sp/>the<sp/>list<sp/>by<sp/>one<sp/>element<sp/>and<sp/>copies<sp/>the<sp/>supplied<sp/>data<sp/>into<sp/>it.</highlight></codeline>
<codeline lineno="304"><highlight class="comment"></highlight></codeline>
<codeline lineno="305"><highlight class="comment">Returns<sp/>the<sp/>index<sp/>of<sp/>the<sp/>new<sp/>element,<sp/>or<sp/>-1<sp/>when<sp/>list<sp/>is<sp/>full.</highlight></codeline>
<codeline lineno="306"><highlight class="comment">================</highlight></codeline>
<codeline lineno="307"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="309"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::Append</ref>(<sp/>type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>obj<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>num<sp/>&lt;<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>num<sp/>&lt;<sp/>size<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list[<sp/>num<sp/>]<sp/>=<sp/>obj;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="322"><highlight class="comment">================</highlight></codeline>
<codeline lineno="323"><highlight class="comment">idStaticList&lt;type,size&gt;::Insert</highlight></codeline>
<codeline lineno="324"><highlight class="comment"></highlight></codeline>
<codeline lineno="325"><highlight class="comment">Increases<sp/>the<sp/>size<sp/>of<sp/>the<sp/>list<sp/>by<sp/>at<sp/>leat<sp/>one<sp/>element<sp/>if<sp/>necessary<sp/></highlight></codeline>
<codeline lineno="326"><highlight class="comment">and<sp/>inserts<sp/>the<sp/>supplied<sp/>data<sp/>into<sp/>it.</highlight></codeline>
<codeline lineno="327"><highlight class="comment"></highlight></codeline>
<codeline lineno="328"><highlight class="comment">Returns<sp/>the<sp/>index<sp/>of<sp/>the<sp/>new<sp/>element,<sp/>or<sp/>-1<sp/>when<sp/>list<sp/>is<sp/>full.</highlight></codeline>
<codeline lineno="329"><highlight class="comment">================</highlight></codeline>
<codeline lineno="330"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::Insert</ref>(<sp/>type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>obj,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>num<sp/>&lt;<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>num<sp/>&gt;=<sp/>size<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>index<sp/>&gt;=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>&gt;<sp/>num<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>num;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>num;<sp/>i<sp/>&gt;<sp/>index;<sp/>--i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list[i]<sp/>=<sp/>list[i-1];</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>list[index]<sp/>=<sp/>obj;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="357"><highlight class="comment">================</highlight></codeline>
<codeline lineno="358"><highlight class="comment">idStaticList&lt;type,size&gt;::Append</highlight></codeline>
<codeline lineno="359"><highlight class="comment"></highlight></codeline>
<codeline lineno="360"><highlight class="comment">adds<sp/>the<sp/>other<sp/>list<sp/>to<sp/>this<sp/>one</highlight></codeline>
<codeline lineno="361"><highlight class="comment"></highlight></codeline>
<codeline lineno="362"><highlight class="comment">Returns<sp/>the<sp/>size<sp/>of<sp/>the<sp/>new<sp/>combined<sp/>list</highlight></codeline>
<codeline lineno="363"><highlight class="comment">================</highlight></codeline>
<codeline lineno="364"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="366"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::Append</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;</ref><sp/>&amp;other<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>other.Num();</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>num<sp/>+<sp/>n<sp/>&gt;<sp/>size<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>size<sp/>-<sp/>num;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list[i<sp/>+<sp/>num]<sp/>=<sp/>other.list[i];</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Num();</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="381"><highlight class="comment">================</highlight></codeline>
<codeline lineno="382"><highlight class="comment">idStaticList&lt;type,size&gt;::AddUnique</highlight></codeline>
<codeline lineno="383"><highlight class="comment"></highlight></codeline>
<codeline lineno="384"><highlight class="comment">Adds<sp/>the<sp/>data<sp/>to<sp/>the<sp/>list<sp/>if<sp/>it<sp/>doesn&apos;t<sp/>already<sp/>exist.<sp/><sp/>Returns<sp/>the<sp/>index<sp/>of<sp/>the<sp/>data<sp/>in<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="385"><highlight class="comment">================</highlight></codeline>
<codeline lineno="386"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="388"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::AddUnique</ref>(<sp/>type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>obj<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>FindIndex(<sp/>obj<sp/>);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>Append(<sp/>obj<sp/>);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="400"><highlight class="comment">================</highlight></codeline>
<codeline lineno="401"><highlight class="comment">idStaticList&lt;type,size&gt;::FindIndex</highlight></codeline>
<codeline lineno="402"><highlight class="comment"></highlight></codeline>
<codeline lineno="403"><highlight class="comment">Searches<sp/>for<sp/>the<sp/>specified<sp/>data<sp/>in<sp/>the<sp/>list<sp/>and<sp/>returns<sp/>it&apos;s<sp/>index.<sp/><sp/>Returns<sp/>-1<sp/>if<sp/>the<sp/>data<sp/>is<sp/>not<sp/>found.</highlight></codeline>
<codeline lineno="404"><highlight class="comment">================</highlight></codeline>
<codeline lineno="405"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="407"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::FindIndex</ref>(<sp/>type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>obj<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>list[<sp/>i<sp/>]<sp/>==<sp/>obj<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="421"><highlight class="comment">================</highlight></codeline>
<codeline lineno="422"><highlight class="comment">idStaticList&lt;type,size&gt;::Find</highlight></codeline>
<codeline lineno="423"><highlight class="comment"></highlight></codeline>
<codeline lineno="424"><highlight class="comment">Searches<sp/>for<sp/>the<sp/>specified<sp/>data<sp/>in<sp/>the<sp/>list<sp/>and<sp/>returns<sp/>it&apos;s<sp/>address.<sp/>Returns<sp/>NULL<sp/>if<sp/>the<sp/>data<sp/>is<sp/>not<sp/>found.</highlight></codeline>
<codeline lineno="425"><highlight class="comment">================</highlight></codeline>
<codeline lineno="426"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="428"><highlight class="normal">ID_INLINE<sp/>type<sp/>*<ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::Find</ref>(<sp/>type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>obj<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>FindIndex(<sp/>obj<sp/>);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&gt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;list[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="440"><highlight class="comment">================</highlight></codeline>
<codeline lineno="441"><highlight class="comment">idStaticList&lt;type,size&gt;::FindNull</highlight></codeline>
<codeline lineno="442"><highlight class="comment"></highlight></codeline>
<codeline lineno="443"><highlight class="comment">Searches<sp/>for<sp/>a<sp/>NULL<sp/>pointer<sp/>in<sp/>the<sp/>list.<sp/><sp/>Returns<sp/>-1<sp/>if<sp/>NULL<sp/>is<sp/>not<sp/>found.</highlight></codeline>
<codeline lineno="444"><highlight class="comment"></highlight></codeline>
<codeline lineno="445"><highlight class="comment">NOTE:<sp/>This<sp/>function<sp/>can<sp/>only<sp/>be<sp/>called<sp/>on<sp/>lists<sp/>containing<sp/>pointers.<sp/>Calling<sp/>it</highlight></codeline>
<codeline lineno="446"><highlight class="comment">on<sp/>non-pointer<sp/>lists<sp/>will<sp/>cause<sp/>a<sp/>compiler<sp/>error.</highlight></codeline>
<codeline lineno="447"><highlight class="comment">================</highlight></codeline>
<codeline lineno="448"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="450"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::FindNull</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>list[<sp/>i<sp/>]<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="464"><highlight class="comment">================</highlight></codeline>
<codeline lineno="465"><highlight class="comment">idStaticList&lt;type,size&gt;::IndexOf</highlight></codeline>
<codeline lineno="466"><highlight class="comment"></highlight></codeline>
<codeline lineno="467"><highlight class="comment">Takes<sp/>a<sp/>pointer<sp/>to<sp/>an<sp/>element<sp/>in<sp/>the<sp/>list<sp/>and<sp/>returns<sp/>the<sp/>index<sp/>of<sp/>the<sp/>element.</highlight></codeline>
<codeline lineno="468"><highlight class="comment">This<sp/>is<sp/>NOT<sp/>a<sp/>guarantee<sp/>that<sp/>the<sp/>object<sp/>is<sp/>really<sp/>in<sp/>the<sp/>list.<sp/></highlight></codeline>
<codeline lineno="469"><highlight class="comment">Function<sp/>will<sp/>assert<sp/>in<sp/>debug<sp/>builds<sp/>if<sp/>pointer<sp/>is<sp/>outside<sp/>the<sp/>bounds<sp/>of<sp/>the<sp/>list,</highlight></codeline>
<codeline lineno="470"><highlight class="comment">but<sp/>remains<sp/>silent<sp/>in<sp/>release<sp/>builds.</highlight></codeline>
<codeline lineno="471"><highlight class="comment">================</highlight></codeline>
<codeline lineno="472"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="474"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::IndexOf</ref>(<sp/>type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*objptr<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>objptr<sp/>-<sp/>list;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>index<sp/>&gt;=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>index<sp/>&lt;<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="486"><highlight class="comment">================</highlight></codeline>
<codeline lineno="487"><highlight class="comment">idStaticList&lt;type,size&gt;::RemoveIndex</highlight></codeline>
<codeline lineno="488"><highlight class="comment"></highlight></codeline>
<codeline lineno="489"><highlight class="comment">Removes<sp/>the<sp/>element<sp/>at<sp/>the<sp/>specified<sp/>index<sp/>and<sp/>moves<sp/>all<sp/>data<sp/>following<sp/>the<sp/>element<sp/>down<sp/>to<sp/>fill<sp/>in<sp/>the<sp/>gap.</highlight></codeline>
<codeline lineno="490"><highlight class="comment">The<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>list<sp/>is<sp/>reduced<sp/>by<sp/>one.<sp/><sp/>Returns<sp/>false<sp/>if<sp/>the<sp/>index<sp/>is<sp/>outside<sp/>the<sp/>bounds<sp/>of<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="491"><highlight class="comment">Note<sp/>that<sp/>the<sp/>element<sp/>is<sp/>not<sp/>destroyed,<sp/>so<sp/>any<sp/>memory<sp/>used<sp/>by<sp/>it<sp/>may<sp/>not<sp/>be<sp/>freed<sp/>until<sp/>the<sp/>destruction<sp/>of<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="492"><highlight class="comment">================</highlight></codeline>
<codeline lineno="493"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="495"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::RemoveIndex</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>index<sp/>&gt;=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>index<sp/>&lt;<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>index<sp/>&lt;<sp/>0<sp/>)<sp/>||<sp/>(<sp/>index<sp/>&gt;=<sp/>num<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>num--;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>index;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list[<sp/>i<sp/>]<sp/>=<sp/>list[<sp/>i<sp/>+<sp/>1<sp/>];</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="514"><highlight class="comment">================</highlight></codeline>
<codeline lineno="515"><highlight class="comment">idStaticList&lt;type,size&gt;::Remove</highlight></codeline>
<codeline lineno="516"><highlight class="comment"></highlight></codeline>
<codeline lineno="517"><highlight class="comment">Removes<sp/>the<sp/>element<sp/>if<sp/>it<sp/>is<sp/>found<sp/>within<sp/>the<sp/>list<sp/>and<sp/>moves<sp/>all<sp/>data<sp/>following<sp/>the<sp/>element<sp/>down<sp/>to<sp/>fill<sp/>in<sp/>the<sp/>gap.</highlight></codeline>
<codeline lineno="518"><highlight class="comment">The<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>list<sp/>is<sp/>reduced<sp/>by<sp/>one.<sp/><sp/>Returns<sp/>false<sp/>if<sp/>the<sp/>data<sp/>is<sp/>not<sp/>found<sp/>in<sp/>the<sp/>list.<sp/><sp/>Note<sp/>that</highlight></codeline>
<codeline lineno="519"><highlight class="comment">the<sp/>element<sp/>is<sp/>not<sp/>destroyed,<sp/>so<sp/>any<sp/>memory<sp/>used<sp/>by<sp/>it<sp/>may<sp/>not<sp/>be<sp/>freed<sp/>until<sp/>the<sp/>destruction<sp/>of<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="520"><highlight class="comment">================</highlight></codeline>
<codeline lineno="521"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="523"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::Remove</ref>(<sp/>type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>obj<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>FindIndex(<sp/>obj<sp/>);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>&gt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RemoveIndex(<sp/>index<sp/>);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="535"><highlight class="comment">================</highlight></codeline>
<codeline lineno="536"><highlight class="comment">idStaticList&lt;type,size&gt;::Swap</highlight></codeline>
<codeline lineno="537"><highlight class="comment"></highlight></codeline>
<codeline lineno="538"><highlight class="comment">Swaps<sp/>the<sp/>contents<sp/>of<sp/>two<sp/>lists</highlight></codeline>
<codeline lineno="539"><highlight class="comment">================</highlight></codeline>
<codeline lineno="540"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size&gt;</highlight></codeline>
<codeline lineno="542"><highlight class="normal">ID_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;::Swap</ref>(<sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;</ref><sp/>&amp;other<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_static_list" kindref="compound">idStaticList&lt;type,size&gt;</ref><sp/>temp<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>other<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!__STATICLIST_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/idlib/containers/StaticList.h"/>
  </compounddef>
</doxygen>
