<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_texture_bar_8cpp" kind="file">
    <compoundname>TextureBar.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../../idlib/precompiled.h</includes>
    <includes refid="_q_e3_8_h" local="yes">qe3.h</includes>
    <includes refid="_radiant_8h" local="yes">Radiant.h</includes>
    <includes refid="_texture_bar_8h" local="yes">TextureBar.h</includes>
      <sectiondef kind="func">
      <memberdef kind="function" id="_texture_bar_8cpp_1a9655c98bf27200ddd82c96fe725ae63b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BEGIN_MESSAGE_MAP</definition>
        <argsstring>(CTextureBar, CDialogBar) ON_NOTIFY(UDN_DELTAPOS</argsstring>
        <name>BEGIN_MESSAGE_MAP</name>
        <param>
          <type><ref refid="class_c_texture_bar" kindref="compound">CTextureBar</ref></type>
        </param>
        <param>
          <type>CDialogBar</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/TextureBar.cpp" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_texture_bar_8cpp_1ac49fdbd4533dd41738d92167045df0ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OnDeltaposSpinHshift</type>
        <definition>OnDeltaposSpinHshift ON_NOTIFY</definition>
        <argsstring>(UDN_DELTAPOS, 10361, OnDeltaposSpinVshift) ON_NOTIFY(UDN_DELTAPOS</argsstring>
        <name>ON_NOTIFY</name>
        <param>
          <type>UDN_DELTAPOS</type>
        </param>
        <param>
          <type>10361</type>
        </param>
        <param>
          <type>OnDeltaposSpinVshift</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/TextureBar.cpp" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_texture_bar_8cpp_1a90b28cfa59bac405b90fbf10c7966453" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OnDeltaposSpinHshift OnDeltaposSpinHScale</type>
        <definition>OnDeltaposSpinHshift OnDeltaposSpinHScale ON_NOTIFY</definition>
        <argsstring>(UDN_DELTAPOS, 10364, OnDeltaposSpinVScale) ON_NOTIFY(UDN_DELTAPOS</argsstring>
        <name>ON_NOTIFY</name>
        <param>
          <type>UDN_DELTAPOS</type>
        </param>
        <param>
          <type>10364</type>
        </param>
        <param>
          <type>OnDeltaposSpinVScale</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/TextureBar.cpp" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_texture_bar_8cpp_1a853cd4bcb8abed3d72fc7a1fc6da0c78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OnDeltaposSpinHshift OnDeltaposSpinHScale OnDeltaposSpinRotate</type>
        <definition>OnDeltaposSpinHshift OnDeltaposSpinHScale OnDeltaposSpinRotate ON_COMMAND</definition>
        <argsstring>(30358, OnSelectionPrint) ON_WM_CREATE() ON_BN_CLICKED(10251</argsstring>
        <name>ON_COMMAND</name>
        <param>
          <type>30358</type>
        </param>
        <param>
          <type>OnSelectionPrint</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/TextureBar.cpp" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_texture_bar_8cpp_1aaedfd6a6a7c88647ba1236fe4a394534" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OnDeltaposSpinHshift OnDeltaposSpinHScale OnDeltaposSpinRotate OnBtnApplytexturestuff</type>
        <definition>OnDeltaposSpinHshift OnDeltaposSpinHScale OnDeltaposSpinRotate OnBtnApplytexturestuff END_MESSAGE_MAP</definition>
        <argsstring>() void CTextureBar</argsstring>
        <name>END_MESSAGE_MAP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor for <ref refid="class_material_prop_tree_view" kindref="compound">MaterialPropTreeView</ref>.</para><para>Protected constructor used by dynamic creation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/TextureBar.cpp" line="92" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/TextureBar.cpp" bodystart="92" bodyend="107"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;qe3.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Radiant.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TextureBar.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//++timo<sp/>TODO<sp/>:<sp/>the<sp/>whole<sp/>CTextureBar<sp/>has<sp/>to<sp/>be<sp/>modified<sp/>for<sp/>the<sp/>new<sp/>texture<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>new<sp/>DEBUG_NEW</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>THIS_FILE</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>THIS_FILE[]<sp/>=<sp/>__FILE__;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="44"><highlight class="comment">/////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="45"><highlight class="comment"></highlight><highlight class="comment">//<sp/>CTextureBar<sp/>dialog</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">CTextureBar::CTextureBar()</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>CDialogBar()</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{{AFX_DATA_INIT(CTextureBar)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nHShift<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nHScale<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nRotate<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nVShift<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nVScale<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nRotateAmt<sp/>=<sp/>45;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}}AFX_DATA_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CTextureBar::DoDataExchange(CDataExchange*<sp/>pDX)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>CDialogBar::DoDataExchange(pDX);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{{AFX_DATA_MAP(CTextureBar)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>DDX_Control(pDX,<sp/>IDC_SPIN_ROTATE,<sp/>m_spinRotate);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>DDX_Control(pDX,<sp/>IDC_SPIN_VSCALE,<sp/>m_spinVScale);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>DDX_Control(pDX,<sp/>IDC_SPIN_VSHIFT,<sp/>m_spinVShift);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>DDX_Control(pDX,<sp/>IDC_SPIN_HSCALE,<sp/>m_spinHScale);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>DDX_Control(pDX,<sp/>IDC_SPIN_HSHIFT,<sp/>m_spinHShift);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>DDX_Text(pDX,<sp/>IDC_HSHIFT,<sp/>m_nHShift);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>DDX_Text(pDX,<sp/>IDC_HSCALE,<sp/>m_nHScale);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>DDX_Text(pDX,<sp/>IDC_ROTATE,<sp/>m_nRotate);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>DDX_Text(pDX,<sp/>IDC_VSHIFT,<sp/>m_nVShift);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>DDX_Text(pDX,<sp/>IDC_VSCALE,<sp/>m_nVScale);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>DDX_Text(pDX,<sp/>IDC_EDIT_ROTATEAMT,<sp/>m_nRotateAmt);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}}AFX_DATA_MAP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">BEGIN_MESSAGE_MAP(<ref refid="class_c_texture_bar" kindref="compound">CTextureBar</ref>,<sp/>CDialogBar)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{{AFX_MSG_MAP(CTextureBar)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>ON_NOTIFY(UDN_DELTAPOS,<sp/>IDC_SPIN_HSHIFT,<sp/>OnDeltaposSpinHshift)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>ON_NOTIFY(UDN_DELTAPOS,<sp/>IDC_SPIN_VSHIFT,<sp/>OnDeltaposSpinVshift)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>ON_NOTIFY(UDN_DELTAPOS,<sp/>IDC_SPIN_HSCALE,<sp/>OnDeltaposSpinHScale)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>ON_NOTIFY(UDN_DELTAPOS,<sp/>IDC_SPIN_VSCALE,<sp/>OnDeltaposSpinVScale)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>ON_NOTIFY(UDN_DELTAPOS,<sp/>IDC_SPIN_ROTATE,<sp/>OnDeltaposSpinRotate)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>ON_COMMAND(ID_SELECTION_PRINT,<sp/>OnSelectionPrint)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>ON_WM_CREATE()</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>ON_BN_CLICKED(IDC_BTN_APPLYTEXTURESTUFF,<sp/>OnBtnApplytexturestuff)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}}AFX_MSG_MAP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">END_MESSAGE_MAP()</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="94"><highlight class="comment">/////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="95"><highlight class="comment"></highlight><highlight class="comment">//<sp/>CTextureBar<sp/>message<sp/>handlers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_texture_bar" kindref="compound">CTextureBar</ref>::OnDeltaposSpinHshift(NMHDR*<sp/>pNMHDR,<sp/>LRESULT*<sp/>pResult)<sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>NM_UPDOWN*<sp/>pNMUpDown<sp/>=<sp/>(NM_UPDOWN*)pNMHDR;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>*pResult<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pNMUpDown-&gt;iDelta<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>Select_ShiftTexture(abs(g_qeglobals.d_savedinfo.m_nTextureTweak),<sp/>0);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>Select_ShiftTexture(-abs(g_qeglobals.d_savedinfo.m_nTextureTweak),<sp/>0);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>GetSurfaceAttributes();</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CTextureBar::OnDeltaposSpinVshift(NMHDR*<sp/>pNMHDR,<sp/>LRESULT*<sp/>pResult)<sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>NM_UPDOWN*<sp/>pNMUpDown<sp/>=<sp/>(NM_UPDOWN*)pNMHDR;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Add<sp/>your<sp/>control<sp/>notification<sp/>handler<sp/>code<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>*pResult<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pNMUpDown-&gt;iDelta<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>Select_ShiftTexture(0,<sp/>abs(g_qeglobals.d_savedinfo.m_nTextureTweak));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>Select_ShiftTexture(0,<sp/>-abs(g_qeglobals.d_savedinfo.m_nTextureTweak));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>GetSurfaceAttributes();</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CTextureBar::OnDeltaposSpinHScale(NMHDR*<sp/>pNMHDR,<sp/>LRESULT*<sp/>pResult)<sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>NM_UPDOWN*<sp/>pNMUpDown<sp/>=<sp/>(NM_UPDOWN*)pNMHDR;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Add<sp/>your<sp/>control<sp/>notification<sp/>handler<sp/>code<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>*pResult<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pNMUpDown-&gt;iDelta<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Select_ScaleTexture((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)abs(g_qeglobals.d_savedinfo.m_nTextureTweak),0);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Select_ScaleTexture((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)-abs(g_qeglobals.d_savedinfo.m_nTextureTweak),0);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>GetSurfaceAttributes();</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CTextureBar::OnDeltaposSpinVScale(NMHDR*<sp/>pNMHDR,<sp/>LRESULT*<sp/>pResult)<sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>NM_UPDOWN*<sp/>pNMUpDown<sp/>=<sp/>(NM_UPDOWN*)pNMHDR;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Add<sp/>your<sp/>control<sp/>notification<sp/>handler<sp/>code<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>*pResult<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pNMUpDown-&gt;iDelta<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Select_ScaleTexture(0,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)abs(g_qeglobals.d_savedinfo.m_nTextureTweak));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Select_ScaleTexture(0,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)-abs(g_qeglobals.d_savedinfo.m_nTextureTweak));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>GetSurfaceAttributes();</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CTextureBar::OnDeltaposSpinRotate(NMHDR*<sp/>pNMHDR,<sp/>LRESULT*<sp/>pResult)<sp/></highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>NM_UPDOWN*<sp/>pNMUpDown<sp/>=<sp/>(NM_UPDOWN*)pNMHDR;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>*pResult<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>UpdateData(TRUE);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pNMUpDown-&gt;iDelta<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>Select_RotateTexture(abs(m_nRotateAmt));</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>Select_RotateTexture(-abs(m_nRotateAmt));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>GetSurfaceAttributes();</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CTextureBar::OnSelectionPrint()<sp/></highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Add<sp/>your<sp/>command<sp/>handler<sp/>code<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CTextureBar::OnCreate(LPCREATESTRUCT<sp/>lpCreateStruct)<sp/></highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CDialogBar::OnCreate(lpCreateStruct)<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CTextureBar::OnBtnApplytexturestuff()<sp/></highlight></codeline>
<codeline lineno="176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>SetSurfaceAttributes();</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CTextureBar::GetSurfaceAttributes()</highlight></codeline>
<codeline lineno="181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><ref refid="classtexdef__t" kindref="compound">texdef_t</ref>*<sp/>pt<sp/>=<sp/>(g_ptrSelectedFaces.GetSize()<sp/>&gt;<sp/>0)<sp/>?<sp/>&amp;(reinterpret_cast&lt;face_t*&gt;(g_ptrSelectedFaces.GetAt(0)))-&gt;texdef<sp/>:<sp/>&amp;g_qeglobals.d_texturewin.texdef;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pt)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nHShift<sp/>=<sp/>pt-&gt;shift[0];</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nVShift<sp/>=<sp/>pt-&gt;shift[1];</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nHScale<sp/>=<sp/>pt-&gt;scale[0];</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nVScale<sp/>=<sp/>pt-&gt;scale[1];</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nRotate<sp/>=<sp/>pt-&gt;rotate;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateData(FALSE);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//++timo<sp/>implement<sp/>brush<sp/>primitive<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CTextureBar::SetSurfaceAttributes()</highlight></codeline>
<codeline lineno="197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_ptrSelectedFaces.GetSize()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_qeglobals.m_bBrushPrimitMode)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(</highlight><highlight class="stringliteral">&quot;Warning<sp/>:<sp/>brush<sp/>primitive<sp/>mode<sp/>not<sp/>implemented<sp/>in<sp/>CTextureBar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structface__s" kindref="compound">face_t</ref><sp/>*selFace<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="structface__s" kindref="compound">face_t</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(g_ptrSelectedFaces.GetAt(0));</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtexdef__t" kindref="compound">texdef_t</ref>*<sp/>pt<sp/>=<sp/>&amp;selFace-&gt;texdef;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateData(TRUE);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>pt-&gt;shift[0]<sp/>=<sp/>m_nHShift;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>pt-&gt;shift[1]<sp/>=<sp/>m_nVShift;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>pt-&gt;scale[0]<sp/>=<sp/>m_nHScale;<sp/></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>pt-&gt;scale[1]<sp/>=<sp/>m_nVScale;<sp/></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>pt-&gt;rotate<sp/>=<sp/>m_nRotate;<sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>Sys_UpdateWindows(W_CAMERA);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/TextureBar.cpp"/>
  </compounddef>
</doxygen>
