<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_textures_8h" kind="file">
    <compoundname>Textures.h</compoundname>
    <includedby refid="_q_e3_8_h" local="yes">E:/sources/3rd_party/DOOM/neo/tools/radiant/QE3.H</includedby>
      <sectiondef kind="func">
      <memberdef kind="function" id="_textures_8h_1a99f059ae3ae78066d6538f160d015a86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Texture_Init</definition>
        <argsstring>(bool bHardInit=true)</argsstring>
        <name>Texture_Init</name>
        <param>
          <type>bool</type>
          <declname>bHardInit</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/Textures.h" line="32" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_textures_8h_1ab92efe8dc2ab4299687d965526580a5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Texture_FlushUnused</definition>
        <argsstring>()</argsstring>
        <name>Texture_FlushUnused</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/Textures.h" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_textures_8h_1ab714debc9195337018962d89d67a8dd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Texture_Flush</definition>
        <argsstring>(bool bReload=false)</argsstring>
        <name>Texture_Flush</name>
        <param>
          <type>bool</type>
          <declname>bReload</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/Textures.h" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_textures_8h_1abe75e757ed5d725bc6ceef5c6f691a2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Texture_ClearInuse</definition>
        <argsstring>(void)</argsstring>
        <name>Texture_ClearInuse</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/Textures.h" line="35" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/NewTexWnd.cpp" bodystart="673" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="_textures_8h_1a2a8a9fd044d4f74a477c05bcaa77d82b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Texture_ShowInuse</definition>
        <argsstring>(void)</argsstring>
        <name>Texture_ShowInuse</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/Textures.h" line="36" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/NewTexWnd.cpp" bodystart="710" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="_textures_8h_1a559c2034e3797c582790679b5974cf2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Texture_ShowDirectory</definition>
        <argsstring>(int menunum, bool bLinked=false)</argsstring>
        <name>Texture_ShowDirectory</name>
        <param>
          <type>int</type>
          <declname>menunum</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bLinked</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/Textures.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_textures_8h_1ae98fa18f945a530332ac6445a5bcd828" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Texture_ShowAll</definition>
        <argsstring>()</argsstring>
        <name>Texture_ShowAll</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/Textures.h" line="38" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/NewTexWnd.cpp" bodystart="676" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="_textures_8h_1a02d6502fdce889819058ef282625d42d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Texture_HideAll</definition>
        <argsstring>()</argsstring>
        <name>Texture_HideAll</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/Textures.h" line="39" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/NewTexWnd.cpp" bodystart="688" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="_textures_8h_1a31938dc5f7b63f13019b70d88724c61c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Texture_Cleanup</definition>
        <argsstring>(CStringList *pList=NULL)</argsstring>
        <name>Texture_Cleanup</name>
        <param>
          <type>CStringList *</type>
          <declname>pList</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/Textures.h" line="40" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/NewTexWnd.cpp" bodystart="739" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="_textures_8h_1a2f0266fbe0d866737f5239deef97ef58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classid_material" kindref="compound">idMaterial</ref> *</type>
        <definition>const idMaterial* Texture_ForName</definition>
        <argsstring>(const char *name)</argsstring>
        <name>Texture_ForName</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/Textures.h" line="46" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/NewTexWnd.cpp" bodystart="700" bodyend="708"/>
      </memberdef>
      <memberdef kind="function" id="_textures_8h_1ac28ae9282385322d379eaae8270020db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Texture_Init</definition>
        <argsstring>(void)</argsstring>
        <name>Texture_Init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/Textures.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_textures_8h_1a164df114379aa56f825c2f043761c666" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Texture_SetTexture</definition>
        <argsstring>(texdef_t *texdef, brushprimit_texdef_t *brushprimit_texdef, bool bFitScale=false, bool bSetSelection=true)</argsstring>
        <name>Texture_SetTexture</name>
        <param>
          <type><ref refid="classtexdef__t" kindref="compound">texdef_t</ref> *</type>
          <declname>texdef</declname>
        </param>
        <param>
          <type><ref refid="classbrushprimit__texdef__t" kindref="compound">brushprimit_texdef_t</ref> *</type>
          <declname>brushprimit_texdef</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bFitScale</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>bSetSelection</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/Textures.h" line="49" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/NewTexWnd.cpp" bodystart="625" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="_textures_8h_1ac989077d9e4e096842c440f16b88c9a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Texture_SetMode</definition>
        <argsstring>(int iMenu)</argsstring>
        <name>Texture_SetMode</name>
        <param>
          <type>int</type>
          <declname>iMenu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/Textures.h" line="51" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/NewTexWnd.cpp" bodystart="751" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="_textures_8h_1a88c00c0f25d7f169f320dfaf109423dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Texture_ResetPosition</definition>
        <argsstring>()</argsstring>
        <name>Texture_ResetPosition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/Textures.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_textures_8h_1a5bd3051369e3dccf6c157ece93a366f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FreeShaders</definition>
        <argsstring>()</argsstring>
        <name>FreeShaders</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/Textures.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_textures_8h_1a75c5008c4b54b61d87d908c440dbd1c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LoadShaders</definition>
        <argsstring>()</argsstring>
        <name>LoadShaders</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/Textures.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_textures_8h_1ad8767eb3102c0a2bc1837503c6374d3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ReloadShaders</definition>
        <argsstring>()</argsstring>
        <name>ReloadShaders</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/Textures.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_textures_8h_1adfd18832313144d8dcc6e2ad58f65cee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int WINAPI</type>
        <definition>int WINAPI Texture_LoadSkin</definition>
        <argsstring>(char *pName, int *pnWidth, int *pnHeight)</argsstring>
        <name>Texture_LoadSkin</name>
        <param>
          <type>char *</type>
          <declname>pName</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>pnWidth</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>pnHeight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/Textures.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_textures_8h_1a47fb2da71781f073d01f6463772403be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Texture_StartPos</definition>
        <argsstring>(void)</argsstring>
        <name>Texture_StartPos</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/Textures.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_textures_8h_1a6df68a042939f84c3983582c2488dbd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structqtexture__s" kindref="compound">qtexture_t</ref> *</type>
        <definition>qtexture_t* Texture_NextPos</definition>
        <argsstring>(int *x, int *y)</argsstring>
        <name>Texture_NextPos</name>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/Textures.h" line="59" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>texturename<sp/>of<sp/>the<sp/>form<sp/>(0<sp/>0<sp/>0)<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>solid<sp/>color<sp/>texture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Texture_Init<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bHardInit<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Texture_FlushUnused<sp/>();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Texture_Flush<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bReload<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Texture_ClearInuse<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Texture_ShowInuse<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Texture_ShowDirectory<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>menunum,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bLinked<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Texture_ShowAll();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Texture_HideAll();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Texture_Cleanup(CStringList<sp/>*pList<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TTimo:<sp/>added<sp/>bNoAlpha<sp/>flag<sp/>to<sp/>ignore<sp/>alpha<sp/>channel<sp/>when<sp/>parsing<sp/>a<sp/>.TGA<sp/>file,<sp/>transparency<sp/>is<sp/>usually<sp/>achieved<sp/>through<sp/>qer_trans<sp/>keyword<sp/>in<sp/>shaders</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>some<sp/>cases<sp/>loading<sp/>an<sp/>empty<sp/>alpha<sp/>channel<sp/>causes<sp/>display<sp/>bugs<sp/>(brushes<sp/>not<sp/>seen)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//qtexture_t<sp/>*Texture_ForName<sp/>(const<sp/>char<sp/>*name,<sp/>bool<sp/>bReplace<sp/>=<sp/>false,<sp/>bool<sp/>bShader<sp/>=<sp/>false,<sp/>bool<sp/>bNoAlpha<sp/>=<sp/>false,<sp/>bool<sp/>bReload<sp/>=<sp/>false,<sp/>bool<sp/>makeShader<sp/>=<sp/>true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_material" kindref="compound">idMaterial</ref><sp/>*Texture_ForName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Texture_Init<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Texture_SetTexture<sp/>(<ref refid="classtexdef__t" kindref="compound">texdef_t</ref><sp/>*texdef,<sp/><ref refid="classbrushprimit__texdef__t" kindref="compound">brushprimit_texdef_t</ref><sp/>*brushprimit_texdef,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bFitScale<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bSetSelection<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Texture_SetMode(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iMenu);<sp/></highlight><highlight class="comment">//<sp/>GL_TEXTURE_NEAREST,<sp/>etc..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Texture_ResetPosition();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FreeShaders();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LoadShaders();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReloadShaders();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WINAPI<sp/>Texture_LoadSkin(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pnWidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pnHeight);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Texture_StartPos<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><ref refid="structqtexture__s" kindref="compound">qtexture_t</ref><sp/>*Texture_NextPos<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y);</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/Textures.h"/>
  </compounddef>
</doxygen>
