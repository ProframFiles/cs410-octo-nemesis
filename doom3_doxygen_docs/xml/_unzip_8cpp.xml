<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_unzip_8cpp" kind="file">
    <compoundname>Unzip.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../idlib/precompiled.h</includes>
    <includes refid="_unzip_8h" local="yes">Unzip.h</includes>
    <innerclass refid="structinflate__huft__s" prot="public">inflate_huft_s</innerclass>
    <innerclass refid="structinflate__blocks__state" prot="public">inflate_blocks_state</innerclass>
    <innerclass refid="structinflate__codes__state" prot="public">inflate_codes_state</innerclass>
    <innerclass refid="structinternal__state" prot="public">internal_state</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_unzip_8cpp_1a96c1faa16a2de0783d2829dfa57b0847" prot="public" static="no">
        <name>_ZCONF_H</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="84" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a8e9fefb3d20386851ca693946127ab2e" prot="public" static="no">
        <name>MAX_MEM_LEVEL</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="91" column="16" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1abd2f406ac1f9c49236376115d78ccb5b" prot="public" static="no">
        <name>MAX_WBITS</name>
        <initializer>15 /* 32K LZ77 window */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="101" column="11" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1aa6c3c093d0900e1d96d07c91b53c1b5d" prot="public" static="no">
        <name>OF</name>
        <param><defname>args</defname></param>
        <initializer>args</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="120" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a0d112bae8fd35be772185b6ec6bcbe64" prot="public" static="no">
        <name>SEEK_SET</name>
        <initializer>0       /* Seek from beginning of file.  */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="129" column="11" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a4c8d0b76b470ba65a43ca46a88320f39" prot="public" static="no">
        <name>SEEK_CUR</name>
        <initializer>1       /* Seek from current position.  */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="130" column="11" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1ad2a2e6c114780c3071efd24f16c7f7d8" prot="public" static="no">
        <name>SEEK_END</name>
        <initializer>2       /* Set file pointer to EOF plus &quot;offset&quot; */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="131" column="11" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a51dc9dc65e483b3222c1f0f6a87eb76e" prot="public" static="no">
        <name>ZLIB_VERSION</name>
        <initializer>&quot;1.1.3&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="136" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1ac3b62e37b9922d9496014515acd6083a" prot="public" static="no">
        <name>Z_NO_FLUSH</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="193" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1adbd49089a5611593f05ac80c9e12cc7f" prot="public" static="no">
        <name>Z_PARTIAL_FLUSH</name>
        <initializer>1 /* will be removed, use Z_SYNC_FLUSH instead */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="194" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1aa32ca175522e0ef314f4dc0b0196bada" prot="public" static="no">
        <name>Z_SYNC_FLUSH</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="195" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1aed4fbb038c3973aacf52fccffbc44b53" prot="public" static="no">
        <name>Z_FULL_FLUSH</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="196" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a876a626ba14eb12eea4bbf6823b6ca50" prot="public" static="no">
        <name>Z_FINISH</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="197" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a8cb802b6a11e926478dc6547c514c65c" prot="public" static="no">
        <name>Z_OK</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="200" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a7d94a4a852228a899864a0053162e7a8" prot="public" static="no">
        <name>Z_STREAM_END</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="201" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a32916ba675b2d06463da2576b6a49d64" prot="public" static="no">
        <name>Z_NEED_DICT</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="202" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a3c66d64c427c0337c64e578537478737" prot="public" static="no">
        <name>Z_ERRNO</name>
        <initializer>(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="203" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1aad97cde83a9a4bb77f5c3b03bb68e483" prot="public" static="no">
        <name>Z_STREAM_ERROR</name>
        <initializer>(-2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="204" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a9eda83d428a71752d148f38b5dbe04f2" prot="public" static="no">
        <name>Z_DATA_ERROR</name>
        <initializer>(-3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="205" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1ae2be6be871e377c6e2c25a7296ce320c" prot="public" static="no">
        <name>Z_MEM_ERROR</name>
        <initializer>(-4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="206" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a425e2f0664e1b1f75bf2bffab88d353d" prot="public" static="no">
        <name>Z_BUF_ERROR</name>
        <initializer>(-5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="207" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a7634cdd55f955ee1be99c065c6977371" prot="public" static="no">
        <name>Z_VERSION_ERROR</name>
        <initializer>(-6)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="208" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a496a4523776bcfa14568cd083b59f24c" prot="public" static="no">
        <name>Z_NO_COMPRESSION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="213" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1ad5222ae19b77c6e83815d07ca5d03fd8" prot="public" static="no">
        <name>Z_BEST_SPEED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="214" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a8db83edd9dea51f8cf0afd1727838b95" prot="public" static="no">
        <name>Z_BEST_COMPRESSION</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="215" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1af5387baee05124298e431ebe6fe96b17" prot="public" static="no">
        <name>Z_DEFAULT_COMPRESSION</name>
        <initializer>(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="216" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1af01ccb5a9db8d415cde987d9553ad200" prot="public" static="no">
        <name>Z_FILTERED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="219" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a1eec3d3720ba91fd54fa08d2757c1785" prot="public" static="no">
        <name>Z_HUFFMAN_ONLY</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="220" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a580d7c2527e653ddd783109271750849" prot="public" static="no">
        <name>Z_DEFAULT_STRATEGY</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="221" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a2bfe22ed89d3553335d18a4c3cab67af" prot="public" static="no">
        <name>Z_BINARY</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="224" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a9a852d9163cdb10687403d4e79dda06e" prot="public" static="no">
        <name>Z_ASCII</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="225" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a4be54d9d68d40adb73f87492284cc290" prot="public" static="no">
        <name>Z_UNKNOWN</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="226" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a27a96226f3dc88e4743131c632adf32f" prot="public" static="no">
        <name>Z_DEFLATED</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="229" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1ad15afa2776b41b2f4d8582dd152bd736" prot="public" static="no">
        <name>Z_NULL</name>
        <initializer>0  /* for initializing zalloc, zfree, opaque */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="232" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a1f228220c3e6935eb171761c61487059" prot="public" static="no">
        <name>zlib_version</name>
        <initializer>zlibVersion()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="234" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1ae7440c1c5a8becba6dbf410275dc0a5c" prot="public" static="no">
        <name>deflateInit</name>
        <param><defname>strm</defname></param>
        <param><defname>level</defname></param>
        <initializer>deflateInit_((strm), (level),       ZLIB_VERSION, sizeof(<ref refid="structz__stream__s" kindref="compound">z_stream</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="938" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="938" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1ad7c6797b618699f70f61323c5184f26e" prot="public" static="no">
        <name>inflateInit</name>
        <param><defname>strm</defname></param>
        <initializer>inflateInit_((strm),                ZLIB_VERSION, sizeof(<ref refid="structz__stream__s" kindref="compound">z_stream</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="940" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="940" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a59b575a521efe7ea0d3b9dd3c8d315c1" prot="public" static="no">
        <name>deflateInit2</name>
        <param><defname>strm</defname></param>
        <param><defname>level</defname></param>
        <param><defname>method</defname></param>
        <param><defname>windowBits</defname></param>
        <param><defname>memLevel</defname></param>
        <param><defname>strategy</defname></param>
        <initializer>deflateInit2_((strm),(level),(method),(windowBits),(memLevel),\
                      (strategy),           ZLIB_VERSION, sizeof(<ref refid="structz__stream__s" kindref="compound">z_stream</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="942" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="942" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a611fc206e69f34e812ca8b590982fdd5" prot="public" static="no">
        <name>inflateInit2</name>
        <param><defname>strm</defname></param>
        <param><defname>windowBits</defname></param>
        <initializer>inflateInit2_((strm), (windowBits), ZLIB_VERSION, sizeof(<ref refid="structz__stream__s" kindref="compound">z_stream</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="945" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="945" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a66466516a4a71f3c78ccc40d203c92e5" prot="public" static="no">
        <name>ERR_MSG</name>
        <param><defname>err</defname></param>
        <initializer>z_errmsg[Z_NEED_DICT-(err)]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="960" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="960" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a0fcc2fe26110263e812ce50919b6a5c1" prot="public" static="no">
        <name>ERR_RETURN</name>
        <param><defname>strm</defname></param>
        <param><defname>err</defname></param>
        <initializer>return (strm-&gt;msg = (char*)ERR_MSG(err), (err))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="962" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="962" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1aef084f32d9ca8b9273a1c826b89b979a" prot="public" static="no">
        <name>DEF_WBITS</name>
        <initializer>MAX_WBITS</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="969" column="11" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="969" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a19c8e60fa32d4ddf303ce988ba97af61" prot="public" static="no">
        <name>DEF_MEM_LEVEL</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="974" column="11" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="974" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a9f650bc9c1fbd9499098e3a70d295b8a" prot="public" static="no">
        <name>STORED_BLOCK</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="980" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="980" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a0f63a9090acfe4f653f117b638b289d1" prot="public" static="no">
        <name>STATIC_TREES</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="981" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="981" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a40a71de753262f20a0bcacc2304e7b19" prot="public" static="no">
        <name>DYN_TREES</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="982" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="982" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a7984ceb1ff48ac91172976b91ed43f60" prot="public" static="no">
        <name>MIN_MATCH</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="985" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="985" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1ab7a9188dce25dac8d3a970c01b89b0c6" prot="public" static="no">
        <name>MAX_MATCH</name>
        <initializer>258</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="986" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="986" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a1156d73d88538d122acfa852b95492bd" prot="public" static="no">
        <name>PRESET_DICT</name>
        <initializer>0x20 /* preset dictionary flag in zlib header */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="989" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="989" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a919da7d9b61966c3af796ab42e618bef" prot="public" static="no">
        <name>OS_CODE</name>
        <initializer>0x03  /* assume Unix */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="996" column="11" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="996" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a7d40e22cfc0ad4087bf371d61290a0f5" prot="public" static="no">
        <name>F_OPEN</name>
        <param><defname>name</defname></param>
        <param><defname>mode</defname></param>
        <initializer>fopen((name), (mode))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1000" column="11" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1000" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a62122f710fb754b114c1ce12ff0bd191" prot="public" static="no">
        <name>zstrerror</name>
        <param><defname>errnum</defname></param>
        <initializer>&quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1009" column="12" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1009" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a2ecddd4735cdee0a7242d3634f937076" prot="public" static="no">
        <name>zmemcpy</name>
        <initializer>memcpy</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1012" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1012" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a26c535076e61961e17b7892c96a8cbd2" prot="public" static="no">
        <name>zmemcmp</name>
        <initializer>memcmp</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1013" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1013" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a2db071324ae18f71be0fa155ec99281c" prot="public" static="no">
        <name>zmemzero</name>
        <param><defname>dest</defname></param>
        <param><defname>len</defname></param>
        <initializer>memset(dest, 0, len)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1014" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1014" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a5c8d8d889189d1461d10df831f3cd40e" prot="public" static="no">
        <name>Assert</name>
        <param><defname>cond</defname></param>
        <param><defname>msg</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1027" column="12" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1027" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a93bbe97269cf8304b452a4d472dba191" prot="public" static="no">
        <name>Trace</name>
        <param><defname>x</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1028" column="11" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1028" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a67eab10382e740297e8a59d69f85464e" prot="public" static="no">
        <name>Tracev</name>
        <param><defname>x</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1029" column="11" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1029" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1ae65182ff511f0b12345c20b6533f32d9" prot="public" static="no">
        <name>Tracevv</name>
        <param><defname>x</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1030" column="11" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1030" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a15ce9096835263938f62694aee7a0a99" prot="public" static="no">
        <name>Tracec</name>
        <param><defname>c</defname></param>
        <param><defname>x</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1031" column="11" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1031" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a54a66ee51c61d67607b64678b055af6b" prot="public" static="no">
        <name>Tracecv</name>
        <param><defname>c</defname></param>
        <param><defname>x</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1032" column="11" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1032" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a39679d03501d691bdfc62a3324cb9548" prot="public" static="no">
        <name>ZALLOC</name>
        <param><defname>strm</defname></param>
        <param><defname>items</defname></param>
        <param><defname>size</defname></param>
        <initializer>(*((strm)-&gt;zalloc))((strm)-&gt;opaque, (items), (size))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1040" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1040" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a71d7c4f186ae3a055367c92db5a8ab18" prot="public" static="no">
        <name>ZFREE</name>
        <param><defname>strm</defname></param>
        <param><defname>addr</defname></param>
        <initializer>(*((strm)-&gt;zfree))((strm)-&gt;opaque, (voidp)(addr))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1042" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1042" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a8a5cef3599266dcaa129ed959a42bcf6" prot="public" static="no">
        <name>TRY_FREE</name>
        <param><defname>s</defname></param>
        <param><defname>p</defname></param>
        <initializer>{if (p) ZFREE(s, p);}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1043" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1043" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1ac01c3d5519b2ebeb874e4db73b09fd6f" prot="public" static="no">
        <name>CASESENSITIVITYDEFAULT_NO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1048" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1048" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1ac88907609a3408a8ee6544287b6c9880" prot="public" static="no">
        <name>UNZ_BUFSIZE</name>
        <initializer>(65536)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1053" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1053" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a97ef86322b25dcc3d0fc5eb50d386b54" prot="public" static="no">
        <name>UNZ_MAXFILENAMEINZIP</name>
        <initializer>(256)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1057" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1057" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1ac5c822e3692a95451e8f70a5916f05a3" prot="public" static="no">
        <name>ALLOC</name>
        <param><defname>size</defname></param>
        <initializer>(Mem_Alloc(size))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1061" column="10" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1061" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a5fb23c00a00f3856832e660edc2ab03d" prot="public" static="no">
        <name>TRYFREE</name>
        <param><defname>p</defname></param>
        <initializer>{if (p) Mem_Free(p);}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1064" column="10" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1064" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1ad43fed5cb489b2075313779a757e5c03" prot="public" static="no">
        <name>SIZECENTRALDIRITEM</name>
        <initializer>(0x2e)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1067" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1067" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a3c43e42371a71abc3db1b5a013382e77" prot="public" static="no">
        <name>SIZEZIPLOCALHEADER</name>
        <initializer>(0x1e)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1068" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1068" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a211c212a9634c4a42e21d04861c0bdd5" prot="public" static="no">
        <name>CASESENSITIVITYDEFAULTVALUE</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1192" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a245d2af04dc8b6d6617f21d34635b033" prot="public" static="no">
        <name>STRCMPCASENOSENTIVEFUNCTION</name>
        <initializer>strcmpcasenosensitive_internal</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1198" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a11acfc377461094b27681612f0bd277d" prot="public" static="no">
        <name>BUFREADCOMMENT</name>
        <initializer>(0x400)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1221" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a6d5587d9c0724d87e000dec844eb48aa" prot="public" static="no">
        <name>DO1</name>
        <param><defname>buf</defname></param>
        <initializer>crc = crc_table[((int)crc ^ (*buf++)) &amp; 0xff] ^ (crc &gt;&gt; 8);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2371" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4046" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a075b45261620b7f357f8dc54fd365f85" prot="public" static="no">
        <name>DO2</name>
        <param><defname>buf</defname></param>
        <initializer>DO1(buf); DO1(buf);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2372" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4047" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1aa6d6c63201e33bb8a064ae16954d1862" prot="public" static="no">
        <name>DO4</name>
        <param><defname>buf</defname></param>
        <initializer>DO2(buf); DO2(buf);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2373" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4048" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a0a4c30f665eefffb860606b683278bfe" prot="public" static="no">
        <name>DO8</name>
        <param><defname>buf</defname></param>
        <initializer>DO4(buf); DO4(buf);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2374" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4049" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a098010dbad826dfe2d7baf4ab8c2e834" prot="public" static="no">
        <name>exop</name>
        <initializer>word.what.Exop</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2437" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3796" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a5a8bfbb66d29fa73601b7d47438dec06" prot="public" static="no">
        <name>bits</name>
        <initializer>word.what.Bits</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2438" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3797" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1ab60949993ea9f8038abf523a1cbd6e21" prot="public" static="no">
        <name>MANY</name>
        <initializer>1440</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2476" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2476" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a8b8fb91ccfc99edad109810c98ae97a9" prot="public" static="no">
        <name>_INFUTIL_H</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2542" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2542" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a8e3944c8b5bb40c63d786fc7564171a8" prot="public" static="no">
        <name>UPDBITS</name>
        <initializer>{s-&gt;bitb=b;s-&gt;bitk=k;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2596" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2596" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1ae0f0a98923eb962e3e3d7cd35aafb4c6" prot="public" static="no">
        <name>UPDIN</name>
        <initializer>{z-&gt;avail_in=n;z-&gt;total_in+=p-z-&gt;next_in;z-&gt;next_in=p;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2597" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2597" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a9bfc17bd4788bf91cf596b51cf93739f" prot="public" static="no">
        <name>UPDOUT</name>
        <initializer>{s-&gt;write=q;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2598" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2598" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1ac2558c32fa879d85fe59f8c5f8dfbc04" prot="public" static="no">
        <name>UPDATE</name>
        <initializer>{UPDBITS UPDIN UPDOUT}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2599" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2599" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a19983eeff85c5681e77c3396b9fabd3a" prot="public" static="no">
        <name>LEAVE</name>
        <initializer>{UPDATE return inflate_flush(s,z,r);}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2600" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2600" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a3bdd515dcfd1f6eadbc7bed12e0995ca" prot="public" static="no">
        <name>LOADIN</name>
        <initializer>{p=z-&gt;next_in;n=z-&gt;avail_in;b=s-&gt;bitb;k=s-&gt;bitk;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2602" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2602" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a94d1f1effc0da983e806779147c6cdc3" prot="public" static="no">
        <name>NEEDBYTE</name>
        <initializer>{if(n)r=Z_OK;else LEAVE}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2603" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2603" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1ab757e29ce18ed03f73c4b81a869e4b9a" prot="public" static="no">
        <name>NEXTBYTE</name>
        <initializer>(n--,*p++)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2604" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2604" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a726d29126a5456447bbaa7374af15777" prot="public" static="no">
        <name>NEEDBITS</name>
        <param><defname>j</defname></param>
        <initializer>{while(k&lt;(j)){NEEDBYTE;b|=((uLong)NEXTBYTE)&lt;&lt;k;k+=8;}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2605" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2605" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a807cc22e8d8b812438c23e623b1aa56e" prot="public" static="no">
        <name>DUMPBITS</name>
        <param><defname>j</defname></param>
        <initializer>{b&gt;&gt;=(j);k-=(j);}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2606" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2606" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1aa36bd5b8497a0221851738c732349a85" prot="public" static="no">
        <name>WAVAIL</name>
        <initializer>(uInt)(q&lt;s-&gt;read?s-&gt;read-q-1:s-&gt;end-q)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2608" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2608" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1aa3c996c9d8f737f061b28fcff1e90972" prot="public" static="no">
        <name>LOADOUT</name>
        <initializer>{q=s-&gt;write;m=(uInt)WAVAIL;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2609" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2609" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a43c1de45dbd91827a260224c9c40221b" prot="public" static="no">
        <name>WRAP</name>
        <initializer>{if(q==s-&gt;end&amp;&amp;s-&gt;read!=s-&gt;window){q=s-&gt;window;m=(uInt)WAVAIL;}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2610" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2610" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a263ccab0461d1643cb62c6625b788a7f" prot="public" static="no">
        <name>FLUSH</name>
        <initializer>{UPDOUT r=inflate_flush(s,z,r); LOADOUT}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2611" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2611" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a5ef47b00141b9704dc9d477ed2b0cfff" prot="public" static="no">
        <name>NEEDOUT</name>
        <initializer>{if(m==0){WRAP if(m==0){FLUSH WRAP if(m==0) LEAVE}}r=Z_OK;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2612" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2612" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1ab6b4e37dafd723b23911aabdccadf6e5" prot="public" static="no">
        <name>OUTBYTE</name>
        <param><defname>a</defname></param>
        <initializer>{*q++=(Byte)(a);m--;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2613" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2613" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a0b674752cca6d434a1a69f40877eb2be" prot="public" static="no">
        <name>LOAD</name>
        <initializer>{LOADIN LOADOUT}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2615" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2615" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a098010dbad826dfe2d7baf4ab8c2e834" prot="public" static="no">
        <name>exop</name>
        <initializer>word.what.Exop</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3112" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3796" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a5a8bfbb66d29fa73601b7d47438dec06" prot="public" static="no">
        <name>bits</name>
        <initializer>word.what.Bits</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3113" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3797" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a04cd58bc28249a2827ecb52e0ff15ac3" prot="public" static="no">
        <name>BMAX</name>
        <initializer>15         /* maximum bit length of any code */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3179" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1ac539c7fe47611738d5320760d4453602" prot="public" static="no">
        <name>C0</name>
        <initializer>*p++ = 0;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3222" column="9"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1ad6fc13322a4f1c314332ff34aa8b3fa0" prot="public" static="no">
        <name>C2</name>
        <initializer>C0 C0 C0 C0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3223" column="9"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1acc39015f57b2efb8810b603f188bdf15" prot="public" static="no">
        <name>C4</name>
        <initializer>C2 C2 C2 C2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3224" column="9"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a098010dbad826dfe2d7baf4ab8c2e834" prot="public" static="no">
        <name>exop</name>
        <initializer>word.what.Exop</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3639" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3796" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a5a8bfbb66d29fa73601b7d47438dec06" prot="public" static="no">
        <name>bits</name>
        <initializer>word.what.Bits</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3640" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3797" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a8c58efe59f87176546402042b9ffe34f" prot="public" static="no">
        <name>GRABBITS</name>
        <param><defname>j</defname></param>
        <initializer>{while(k&lt;(j)){b|=((uLong)NEXTBYTE)&lt;&lt;k;k+=8;}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3643" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3643" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1ab8cea3b851763a1cfa1dac289c5f0bd7" prot="public" static="no">
        <name>UNGRAB</name>
        <initializer>{c=z-&gt;avail_in-n;c=(k&gt;&gt;3)&lt;c?k&gt;&gt;3:c;n+=c;p-=c;k-=c&lt;&lt;3;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3644" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3644" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a098010dbad826dfe2d7baf4ab8c2e834" prot="public" static="no">
        <name>exop</name>
        <initializer>word.what.Exop</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3796" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3796" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a5a8bfbb66d29fa73601b7d47438dec06" prot="public" static="no">
        <name>bits</name>
        <initializer>word.what.Bits</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3797" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3797" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a79bcfb6bde984f42d1124b068a509af7" prot="public" static="no">
        <name>BASE</name>
        <initializer>65521L /* largest prime smaller than 65536 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="4037" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4037" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a5de5d183f9a6a8d53316f743e1ca6dc2" prot="public" static="no">
        <name>NMAX</name>
        <initializer>5552</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="4038" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4038" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a465ff70ce96dfc2e84b0e87548b4ecb4" prot="public" static="no">
        <name>DO1</name>
        <param><defname>buf</defname></param>
        <param><defname>i</defname></param>
        <initializer>{s1 += buf[i]; s2 += s1;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="4046" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4046" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a3d7044f8ea7e75164fe5108048fd87eb" prot="public" static="no">
        <name>DO2</name>
        <param><defname>buf</defname></param>
        <param><defname>i</defname></param>
        <initializer>DO1(buf,i); DO1(buf,i+1);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="4047" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4047" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1aef9bafc8b3d89e98b6e26320f99b9e31" prot="public" static="no">
        <name>DO4</name>
        <param><defname>buf</defname></param>
        <param><defname>i</defname></param>
        <initializer>DO2(buf,i); DO2(buf,i+2);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="4048" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4048" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a9aafc447614bf5c4dc0d484aba9edb89" prot="public" static="no">
        <name>DO8</name>
        <param><defname>buf</defname></param>
        <param><defname>i</defname></param>
        <initializer>DO4(buf,i); DO4(buf,i+4);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="4049" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4049" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a6912c3e78e2b797f42f214d1b508aa0c" prot="public" static="no">
        <name>DO16</name>
        <param><defname>buf</defname></param>
        <initializer>DO8(buf,0); DO8(buf,8);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="4050" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4050" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1a23a73ba4151358e9dcd9b305d44547d4" prot="public" static="no">
        <name>iNEEDBYTE</name>
        <initializer>{if(z-&gt;avail_in==0)return r;r=f;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="4246" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_unzip_8cpp_1aa4fe8a6813c67225af6b092b2d65444a" prot="public" static="no">
        <name>iNEXTBYTE</name>
        <initializer>(z-&gt;avail_in--,z-&gt;total_in++,*z-&gt;next_in++)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="4247" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4247" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_unzip_8cpp_1a4e90a9976f0c3319ed0e4cb518eb8df1" prot="public" static="no">
        <name>inflate_block_mode</name>
        <enumvalue id="_unzip_8cpp_1a4e90a9976f0c3319ed0e4cb518eb8df1ab47ea8bb955afd0adc0ef98517dd6084" prot="public">
          <name>TYPE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1a4e90a9976f0c3319ed0e4cb518eb8df1a86b0f8050ddd8ae0b99e2f9323ad00a1" prot="public">
          <name>LENS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1a4e90a9976f0c3319ed0e4cb518eb8df1a77647f28a49007bb2c1f10fa36f33b55" prot="public">
          <name>STORED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1a4e90a9976f0c3319ed0e4cb518eb8df1a2e160f29fc076de5496a2b9968be9cc1" prot="public">
          <name>TABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1a4e90a9976f0c3319ed0e4cb518eb8df1a19457fc25f14bccab07ebb738bc09dc3" prot="public">
          <name>BTREE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1a4e90a9976f0c3319ed0e4cb518eb8df1a9cd890b553121284cd90edc45e4d2f25" prot="public">
          <name>DTREE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1a4e90a9976f0c3319ed0e4cb518eb8df1a4f2ec4135d8cf82c6c35780e470cac28" prot="public">
          <name>CODES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1a4e90a9976f0c3319ed0e4cb518eb8df1aac846926be1306ef258549902ab00a25" prot="public">
          <name>DRY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1a4e90a9976f0c3319ed0e4cb518eb8df1a9c954bcf443428c80b0f107b3bc48749" prot="public">
          <name>DONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1a4e90a9976f0c3319ed0e4cb518eb8df1afe29bdbfb6e2165eec29bf28af429856" prot="public">
          <name>BAD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2544" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2544" bodyend="2554"/>
      </memberdef>
      <memberdef kind="enum" id="_unzip_8cpp_1ad72be0c41574ec81315d59618904e781" prot="public" static="no">
        <name>inflate_codes_mode</name>
        <enumvalue id="_unzip_8cpp_1ad72be0c41574ec81315d59618904e781a13d000b4d7dc70d90239b7430d1eb6b2" prot="public">
          <name>START</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1ad72be0c41574ec81315d59618904e781aff15d001decc8890fb72cc6065a1abba" prot="public">
          <name>LEN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1ad72be0c41574ec81315d59618904e781ad604a1d898344e0470e0f68968c41d1c" prot="public">
          <name>LENEXT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1ad72be0c41574ec81315d59618904e781ac04fbbdf0d80a4ad25e565541deeebd7" prot="public">
          <name>DIST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1ad72be0c41574ec81315d59618904e781afca1908d584fa781bde4cf8905c3bcab" prot="public">
          <name>DISTEXT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1ad72be0c41574ec81315d59618904e781aba6788019f0f871f0aefcd5644635785" prot="public">
          <name>COPY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1ad72be0c41574ec81315d59618904e781a3b759690471ed29ecd243a8f36b93f60" prot="public">
          <name>LIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1ad72be0c41574ec81315d59618904e781a32c6462b34f3175e35d5450682b3decb" prot="public">
          <name>WASH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1ad72be0c41574ec81315d59618904e781adc6f24fd6915a3f2786a1b7045406924" prot="public">
          <name>END</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1ad72be0c41574ec81315d59618904e781a0970b5bfe4010c839effe81ab3fae49b" prot="public">
          <name>BADCODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3799" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3799" bodyend="3809"/>
      </memberdef>
      <memberdef kind="enum" id="_unzip_8cpp_1a164ea0159d5f0b5f12a646f25f99ecea" prot="public" static="no">
        <name>inflate_mode</name>
        <enumvalue id="_unzip_8cpp_1a164ea0159d5f0b5f12a646f25f99eceaa058dba705e3b9387ea37d1f027c338c1" prot="public">
          <name>imMETHOD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1a164ea0159d5f0b5f12a646f25f99eceaab3da4d56d3fae5cdc74afbc1660fc9bf" prot="public">
          <name>imFLAG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1a164ea0159d5f0b5f12a646f25f99eceaa106aaed356584278d67c638bca481e96" prot="public">
          <name>imDICT4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1a164ea0159d5f0b5f12a646f25f99eceaaea9daac1449cab4ba02fcd1c4aabb374" prot="public">
          <name>imDICT3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1a164ea0159d5f0b5f12a646f25f99eceaab3609bdfa6653757b5842f934f869627" prot="public">
          <name>imDICT2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1a164ea0159d5f0b5f12a646f25f99eceaaa594adedce3d91020efcd97d28e24e4f" prot="public">
          <name>imDICT1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1a164ea0159d5f0b5f12a646f25f99eceaa3fc2f02dddd8308cd734be09de7166b9" prot="public">
          <name>imDICT0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1a164ea0159d5f0b5f12a646f25f99eceaaede1c6d3042cfd80a4ab6643e9f96781" prot="public">
          <name>imBLOCKS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1a164ea0159d5f0b5f12a646f25f99eceaa6c0405974218e8cdc9463bc7f30fbc99" prot="public">
          <name>imCHECK4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1a164ea0159d5f0b5f12a646f25f99eceaaf39f8102a8677d4db58afa10dd0be045" prot="public">
          <name>imCHECK3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1a164ea0159d5f0b5f12a646f25f99eceaaaec1a78e984dc113f04748c0bd2ce08b" prot="public">
          <name>imCHECK2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1a164ea0159d5f0b5f12a646f25f99eceaa7bae004c8730db890f2cd499aaf1a83b" prot="public">
          <name>imCHECK1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1a164ea0159d5f0b5f12a646f25f99eceaab9e68336da944152cc7e751d3af611b4" prot="public">
          <name>imDONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_unzip_8cpp_1a164ea0159d5f0b5f12a646f25f99eceaa237366eec069480fb46dab099716d2c9" prot="public">
          <name>imBAD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="4118" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4118" bodyend="4132"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_unzip_8cpp_1ae3a497195d617519e5353ea7b417940f" prot="public" static="no">
        <type>unsigned char</type>
        <definition>typedef unsigned char Byte</definition>
        <argsstring></argsstring>
        <name>Byte</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="123" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_unzip_8cpp_1a87d141052bcd5ec8a80812a565c70369" prot="public" static="no">
        <type>unsigned int</type>
        <definition>typedef unsigned int uInt</definition>
        <argsstring></argsstring>
        <name>uInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="124" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_unzip_8cpp_1acd2a5701a3aecf6700d2c66c606ecb40" prot="public" static="no">
        <type>unsigned long</type>
        <definition>typedef unsigned long uLong</definition>
        <argsstring></argsstring>
        <name>uLong</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="125" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_unzip_8cpp_1aa3397ff439b5e076528b04bc9b8b086a" prot="public" static="no">
        <type>Byte *</type>
        <definition>typedef Byte* voidp</definition>
        <argsstring></argsstring>
        <name>voidp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="126" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_unzip_8cpp_1acd0143ddd532551631ecc7093fd7adfc" prot="public" static="no">
        <type>voidp</type>
        <definition>typedef voidp gzFile</definition>
        <argsstring></argsstring>
        <name>gzFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="725" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="725" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_unzip_8cpp_1af3307af5922c72924a837559c801a8a4" prot="public" static="no">
        <type>unsigned char</type>
        <definition>typedef unsigned char uch</definition>
        <argsstring></argsstring>
        <name>uch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="953" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="953" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_unzip_8cpp_1a3754180d606d4ed15468d15d9665aa2e" prot="public" static="no">
        <type>unsigned short</type>
        <definition>typedef unsigned short ush</definition>
        <argsstring></argsstring>
        <name>ush</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="954" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="954" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_unzip_8cpp_1abd6f60bf9450af2ecb94097a32c19a64" prot="public" static="no">
        <type>unsigned long</type>
        <definition>typedef unsigned long ulg</definition>
        <argsstring></argsstring>
        <name>ulg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="955" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="955" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_unzip_8cpp_1a6d4adb09c6c3df2cdf9302875609513d" prot="public" static="no">
        <type>uLong(*</type>
        <definition>typedef uLong(* check_func)(uLong check, const Byte *buf, uInt len)</definition>
        <argsstring>)(uLong check, const Byte *buf, uInt len)</argsstring>
        <name>check_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1036" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1036" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_unzip_8cpp_1a7ebcbc401fa4d270b0d4c1486e69861c" prot="public" static="no">
        <type>struct <ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_state</ref></type>
        <definition>typedef struct inflate_blocks_state inflate_blocks_statef</definition>
        <argsstring></argsstring>
        <name>inflate_blocks_statef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2377" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_unzip_8cpp_1aaf0ca28a9d3f01550b631a946e513fe4" prot="public" static="no">
        <type>struct <ref refid="structinflate__huft__s" kindref="compound">inflate_huft_s</ref></type>
        <definition>typedef struct inflate_huft_s inflate_huft</definition>
        <argsstring></argsstring>
        <name>inflate_huft</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2441" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2457" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_unzip_8cpp_1ad6069e9ddd2395aa4d2c5f0f60461e4a" prot="public" static="no">
        <type>struct <ref refid="structinflate__codes__state" kindref="compound">inflate_codes_state</ref></type>
        <definition>typedef struct inflate_codes_state inflate_codes_statef</definition>
        <argsstring></argsstring>
        <name>inflate_codes_statef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2496" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2515" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_unzip_8cpp_1aaaeb7e95ebbadc1a1d11e460f5add9eb" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* z_errmsg[10]</definition>
        <argsstring>[10]</argsstring>
        <name>z_errmsg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="957" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="_unzip_8cpp_1a2237bef4f77c347a6aa2672a35b4b733" prot="public" static="yes" mutable="no">
        <type>const uLong</type>
        <definition>const uLong crc_table[256]</definition>
        <argsstring>[256]</argsstring>
        <name>crc_table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2303" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_unzip_8cpp_1af342ceebc1d3b8b92f15a5cc7732e223" prot="public" static="yes" mutable="no">
        <type>const uInt</type>
        <definition>const uInt border[]</definition>
        <argsstring>[]</argsstring>
        <name>border</name>
        <initializer>= { 
        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2441" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2441" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_unzip_8cpp_1ae4a479dea3f5f74ecf1af08d29132964" prot="public" static="yes" mutable="no">
        <type>uInt</type>
        <definition>uInt inflate_mask[17]</definition>
        <argsstring>[17]</argsstring>
        <name>inflate_mask</name>
        <initializer>= {
    0x0000,
    0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f, 0x00ff,
    0x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff, 0xffff
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2619" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2619" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_unzip_8cpp_1a01f427c9f5e8158ec52760a1c896e8be" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char inflate_copyright[]</definition>
        <argsstring>[]</argsstring>
        <name>inflate_copyright</name>
        <initializer>=
   &quot; inflate 1.1.3 Copyright 1995-1998 Mark Adler &quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3102" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_unzip_8cpp_1a5df19835b08868d7a583edd6787d8712" prot="public" static="yes" mutable="no">
        <type>const uInt</type>
        <definition>const uInt cplens[31]</definition>
        <argsstring>[31]</argsstring>
        <name>cplens</name>
        <initializer>= { 
        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3129" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_unzip_8cpp_1a3839f28a11e488fd5d0a77d6bb9a1ca4" prot="public" static="yes" mutable="no">
        <type>const uInt</type>
        <definition>const uInt cplext[31]</definition>
        <argsstring>[31]</argsstring>
        <name>cplext</name>
        <initializer>= { 
        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3133" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_unzip_8cpp_1a1d0cc170d58c8edfc7793cbfa80fa2b8" prot="public" static="yes" mutable="no">
        <type>const uInt</type>
        <definition>const uInt cpdist[30]</definition>
        <argsstring>[30]</argsstring>
        <name>cpdist</name>
        <initializer>= { 
        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
        8193, 12289, 16385, 24577}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3136" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_unzip_8cpp_1a78c03c9db26e32d2b7eb4bef45997405" prot="public" static="yes" mutable="no">
        <type>const uInt</type>
        <definition>const uInt cpdext[30]</definition>
        <argsstring>[30]</argsstring>
        <name>cpdext</name>
        <initializer>= { 
        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
        7, 7, 8, 8, 9, 9, 10, 10, 11, 11,
        12, 12, 13, 13}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3140" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_unzip_8cpp_1a2ae3519befbed2e66158ff88106d4fa6" prot="public" static="yes" mutable="no">
        <type>uInt</type>
        <definition>uInt fixed_bl</definition>
        <argsstring></argsstring>
        <name>fixed_bl</name>
        <initializer>= 9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3481" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3481" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_unzip_8cpp_1a0f4069fc21b1e410a9bc6c04b8b4868f" prot="public" static="yes" mutable="no">
        <type>uInt</type>
        <definition>uInt fixed_bd</definition>
        <argsstring></argsstring>
        <name>fixed_bd</name>
        <initializer>= 5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3482" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3482" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_unzip_8cpp_1ad63a174b2f281ca00426e086c8f0e23a" prot="public" static="yes" mutable="no">
        <type><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref></type>
        <definition>inflate_huft fixed_tl[]</definition>
        <argsstring>[]</argsstring>
        <name>fixed_tl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3483" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3483" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_unzip_8cpp_1a3e09a3c39b56270a99bcbeea77a33968" prot="public" static="yes" mutable="no">
        <type><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref></type>
        <definition>inflate_huft fixed_td[]</definition>
        <argsstring>[]</argsstring>
        <name>fixed_td</name>
        <initializer>= {
    {{{80,5}},1}, {{{87,5}},257}, {{{83,5}},17}, {{{91,5}},4097},
    {{{81,5}},5}, {{{89,5}},1025}, {{{85,5}},65}, {{{93,5}},16385},
    {{{80,5}},3}, {{{88,5}},513}, {{{84,5}},33}, {{{92,5}},8193},
    {{{82,5}},9}, {{{90,5}},2049}, {{{86,5}},129}, {{{192,5}},24577},
    {{{80,5}},2}, {{{87,5}},385}, {{{83,5}},25}, {{{91,5}},6145},
    {{{81,5}},7}, {{{89,5}},1537}, {{{85,5}},97}, {{{93,5}},24577},
    {{{80,5}},4}, {{{88,5}},769}, {{{84,5}},49}, {{{92,5}},12289},
    {{{82,5}},13}, {{{90,5}},3073}, {{{86,5}},193}, {{{192,5}},24577}
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3613" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3613" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_unzip_8cpp_1a4c727183b1fb0896f6a49c60eca86b76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* zlibVersion</definition>
        <argsstring>(void)</argsstring>
        <name>zlibVersion</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a020eb25653da3ef0f1f4f59a82c1e8ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflate</definition>
        <argsstring>(z_streamp strm, int flush)</argsstring>
        <name>deflate</name>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a6b32d6d4fa68d8aea22445f97048cf67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateEnd</definition>
        <argsstring>(z_streamp strm)</argsstring>
        <name>deflateEnd</name>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a79b92a0a5ce8f5dcdfe65d301e6c12a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflate</definition>
        <argsstring>(z_streamp strm, int flush)</argsstring>
        <name>inflate</name>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="382" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4249" bodyend="4372"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1abc6f3c66e6691b5007ecc9e1cb570fa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateEnd</definition>
        <argsstring>(z_streamp strm)</argsstring>
        <name>inflateEnd</name>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="451" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4173" bodyend="4183"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1aa6eda530b5bff21f04a3f50dcf767c88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateSetDictionary</definition>
        <argsstring>(z_streamp strm, const Byte *dictionary, uInt dictLength)</argsstring>
        <name>deflateSetDictionary</name>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <param>
          <type>const Byte *</type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>uInt</type>
          <declname>dictLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="512" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1aa38b4c952efce070b3dbb6fdc41d9cf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateCopy</definition>
        <argsstring>(z_streamp dest, z_streamp source)</argsstring>
        <name>deflateCopy</name>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="548" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a1678e92d49418699a3caa1fb88b8ab52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateReset</definition>
        <argsstring>(z_streamp strm)</argsstring>
        <name>deflateReset</name>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="566" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1adb08871bcd410fb9d8d221a1ae378fa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateParams</definition>
        <argsstring>(z_streamp strm, int level, int strategy)</argsstring>
        <name>deflateParams</name>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>strategy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="577" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1abd97b3b7d37afa75778daf3146608f3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateSetDictionary</definition>
        <argsstring>(z_streamp strm, const Byte *dictionary, uInt dictLength)</argsstring>
        <name>inflateSetDictionary</name>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <param>
          <type>const Byte *</type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>uInt</type>
          <declname>dictLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="621" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4375" bodyend="4393"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a6311fc784f0bf21d96cb58962359ea61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateSync</definition>
        <argsstring>(z_streamp strm)</argsstring>
        <name>inflateSync</name>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="640" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4396" bodyend="4443"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a9990ecfeb0e3b82bcfe07920cef7b1c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateReset</definition>
        <argsstring>(z_streamp strm)</argsstring>
        <name>inflateReset</name>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="655" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4160" bodyend="4170"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1abe4cfbfd37ca788c73728ae0eb3d2442" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compress</definition>
        <argsstring>(Byte *dest, uLong *destLen, const Byte *source, uLong sourceLen)</argsstring>
        <name>compress</name>
        <param>
          <type>Byte *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>uLong *</type>
          <declname>destLen</declname>
        </param>
        <param>
          <type>const Byte *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>uLong</type>
          <declname>sourceLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="676" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a43db9a3f719ee71f086b9e0f60a9bb8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compress2</definition>
        <argsstring>(Byte *dest, uLong *destLen, const Byte *source, uLong sourceLen, int level)</argsstring>
        <name>compress2</name>
        <param>
          <type>Byte *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>uLong *</type>
          <declname>destLen</declname>
        </param>
        <param>
          <type>const Byte *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>uLong</type>
          <declname>sourceLen</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="691" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1ad024489f041f2ca42cd0802963dffb34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int uncompress</definition>
        <argsstring>(Byte *dest, uLong *destLen, const Byte *source, uLong sourceLen)</argsstring>
        <name>uncompress</name>
        <param>
          <type>Byte *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>uLong *</type>
          <declname>destLen</declname>
        </param>
        <param>
          <type>const Byte *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>uLong</type>
          <declname>sourceLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="706" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a2229d8720435faa92272a3d5d2dca89c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>gzFile</type>
        <definition>gzFile gzopen</definition>
        <argsstring>(const char *path, const char *mode)</argsstring>
        <name>gzopen</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="727" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1ac19dc3c66e2b6e08547a5a7dd6c0a19f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>gzFile</type>
        <definition>gzFile gzdopen</definition>
        <argsstring>(int fd, const char *mode)</argsstring>
        <name>gzdopen</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="743" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a850e65d487ab7a343dc14f2b6dcb848b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzsetparams</definition>
        <argsstring>(gzFile file, int level, int strategy)</argsstring>
        <name>gzsetparams</name>
        <param>
          <type>gzFile</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>strategy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="756" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1aeb5f1523b1ce06c7ae51572189309c58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzread</definition>
        <argsstring>(gzFile file, voidp buf, unsigned len)</argsstring>
        <name>gzread</name>
        <param>
          <type>gzFile</type>
          <declname>file</declname>
        </param>
        <param>
          <type>voidp</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="764" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a0f9a110c7651e8a67633055ce03819fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzwrite</definition>
        <argsstring>(gzFile file, const voidp buf, unsigned len)</argsstring>
        <name>gzwrite</name>
        <param>
          <type>gzFile</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const voidp</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="772" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a7f059de15f1b3d2c06ba95eb879e7517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzprintf</definition>
        <argsstring>(gzFile file, const char *format,...)</argsstring>
        <name>gzprintf</name>
        <param>
          <type>gzFile</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="780" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1aa57974f345fa876f7acf3262f954962b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzputs</definition>
        <argsstring>(gzFile file, const char *s)</argsstring>
        <name>gzputs</name>
        <param>
          <type>gzFile</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="787" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a738bd0bcf30ad415cf349fae078bbc8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* gzgets</definition>
        <argsstring>(gzFile file, char *buf, int len)</argsstring>
        <name>gzgets</name>
        <param>
          <type>gzFile</type>
          <declname>file</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="794" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1af7b867ccccdcd23e890f251b7401460b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzputc</definition>
        <argsstring>(gzFile file, int c)</argsstring>
        <name>gzputc</name>
        <param>
          <type>gzFile</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="803" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a6f5fd19b9e89fca4fecac2d7160d7a26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzgetc</definition>
        <argsstring>(gzFile file)</argsstring>
        <name>gzgetc</name>
        <param>
          <type>gzFile</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="809" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1abb73400f6b2ca1885c2877855970e718" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzflush</definition>
        <argsstring>(gzFile file, int flush)</argsstring>
        <name>gzflush</name>
        <param>
          <type>gzFile</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="815" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a9b421973bdd9fa227020145d10c6d78d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long gzseek</definition>
        <argsstring>(gzFile file, long offset, int whence)</argsstring>
        <name>gzseek</name>
        <param>
          <type>gzFile</type>
          <declname>file</declname>
        </param>
        <param>
          <type>long</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>whence</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="825" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a79497e3839ee0454866aabf2e2acb95e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzrewind</definition>
        <argsstring>(gzFile file)</argsstring>
        <name>gzrewind</name>
        <param>
          <type>gzFile</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="843" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1ad5712d13d9cb4bedf6189327a8a38924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long gztell</definition>
        <argsstring>(gzFile file)</argsstring>
        <name>gztell</name>
        <param>
          <type>gzFile</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="850" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a7077c052be2ef0341f9c8d9939874b30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzeof</definition>
        <argsstring>(gzFile file)</argsstring>
        <name>gzeof</name>
        <param>
          <type>gzFile</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="859" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1af9106d601241664b76b24fba210bdc2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gzclose</definition>
        <argsstring>(gzFile file)</argsstring>
        <name>gzclose</name>
        <param>
          <type>gzFile</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="865" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a0fb11889a4ba144600b7692721f548a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* gzerror</definition>
        <argsstring>(gzFile file, int *errnum)</argsstring>
        <name>gzerror</name>
        <param>
          <type>gzFile</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>errnum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="872" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1aafa88bb0a29472ac54b3c0cc2a968b56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uLong</type>
        <definition>uLong adler32</definition>
        <argsstring>(uLong adler, const Byte *buf, uInt len)</argsstring>
        <name>adler32</name>
        <param>
          <type>uLong</type>
          <declname>adler</declname>
        </param>
        <param>
          <type>const Byte *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uInt</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="889" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4053" bodyend="4077"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1aed8a022c3a25e8606d4d0b8ad3c2c097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uLong</type>
        <definition>uLong crc32</definition>
        <argsstring>(uLong crc, const Byte *buf, uInt len)</argsstring>
        <name>crc32</name>
        <param>
          <type>uLong</type>
          <declname>crc</declname>
        </param>
        <param>
          <type>const Byte *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uInt</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="906" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2377" bodyend="2394"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a888b145dc985e2b399ea57d0b084dca9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateInit_</definition>
        <argsstring>(z_streamp strm, int level, const char *version, int stream_size)</argsstring>
        <name>deflateInit_</name>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>version</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stream_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="928" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a5330cb61747082757334fe6db572c8e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateInit_</definition>
        <argsstring>(z_streamp strm, const char *version, int stream_size)</argsstring>
        <name>inflateInit_</name>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>version</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stream_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="930" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4240" bodyend="4243"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1ab80827030b8f3cbb6a816c69563c07f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int deflateInit2_</definition>
        <argsstring>(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)</argsstring>
        <name>deflateInit2_</name>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>method</declname>
        </param>
        <param>
          <type>int</type>
          <declname>windowBits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>memLevel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>strategy</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>version</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stream_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="932" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1aaec1926a435479372ac114500a599c2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateInit2_</definition>
        <argsstring>(z_streamp strm, int windowBits, const char *version, int stream_size)</argsstring>
        <name>inflateInit2_</name>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <declname>strm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>windowBits</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>version</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stream_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="936" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4187" bodyend="4237"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1ae66bca40a33b4201be9ff4120aaa9073" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* zError</definition>
        <argsstring>(int err)</argsstring>
        <name>zError</name>
        <param>
          <type>int</type>
          <declname>err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="949" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a2d28f8c54c0ffc175eb74ed9ba89ccb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflateSyncPoint</definition>
        <argsstring>(z_streamp z)</argsstring>
        <name>inflateSyncPoint</name>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="950" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4453" bodyend="4458"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a0526d51557d3bb9349de7d54e1cf76fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const uLong *</type>
        <definition>const uLong * get_crc_table</definition>
        <argsstring>(void)</argsstring>
        <name>get_crc_table</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="951" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2362" bodyend="2368"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a163b7bba85c8fe296f0d7a8c816a3deb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>voidp</type>
        <definition>voidp zcalloc</definition>
        <argsstring>(voidp opaque, unsigned items, unsigned size)</argsstring>
        <name>zcalloc</name>
        <param>
          <type>voidp</type>
          <declname>opaque</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>items</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1037" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4460" bodyend="4464"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a3d595169270ed5af5c2e57dcb52c7d77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zcfree</definition>
        <argsstring>(voidp opaque, voidp ptr)</argsstring>
        <name>zcfree</name>
        <param>
          <type>voidp</type>
          <declname>opaque</declname>
        </param>
        <param>
          <type>voidp</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1038" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4466" bodyend="4470"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a9d0c03ff0b054deef58fca23e8ad1551" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int unzlocal_getShort</definition>
        <argsstring>(FILE *fin, uLong *pX)</argsstring>
        <name>unzlocal_getShort</name>
        <param>
          <type>FILE *</type>
          <declname>fin</declname>
        </param>
        <param>
          <type>uLong *</type>
          <declname>pX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1101" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1101" bodyend="1128"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a959b47a39831cf4f02ed440c0ca12fb5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int unzlocal_getLong</definition>
        <argsstring>(FILE *fin, uLong *pX)</argsstring>
        <name>unzlocal_getLong</name>
        <param>
          <type>FILE *</type>
          <declname>fin</declname>
        </param>
        <param>
          <type>uLong *</type>
          <declname>pX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1130" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1130" bodyend="1165"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a288a3f6631ba13a17f99c4e0aaf98d92" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int strcmpcasenosensitive_internal</definition>
        <argsstring>(const char *fileName1, const char *fileName2)</argsstring>
        <name>strcmpcasenosensitive_internal</name>
        <param>
          <type>const char *</type>
          <declname>fileName1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fileName2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1169" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1169" bodyend="1188"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a25ab56dfff2fc51889ba3cd66324fe5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int unzStringFileNameCompare</definition>
        <argsstring>(const char *fileName1, const char *fileName2, int iCaseSensitivity)</argsstring>
        <name>unzStringFileNameCompare</name>
        <param>
          <type>const char *</type>
          <declname>fileName1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fileName2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iCaseSensitivity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1210" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1210" bodyend="1219"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a67f18bc201b2887a0a2590920a04bfaf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uLong</type>
        <definition>static uLong unzlocal_SearchCentralDir</definition>
        <argsstring>(FILE *fin)</argsstring>
        <name>unzlocal_SearchCentralDir</name>
        <param>
          <type>FILE *</type>
          <declname>fin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1227" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1227" bodyend="1280"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a529e5f10327593d452940360ce8453aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unzFile</type>
        <definition>unzFile unzReOpen</definition>
        <argsstring>(const char *path, unzFile file)</argsstring>
        <name>unzReOpen</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>unzFile</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1282" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1282" bodyend="1298"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1acf9933071f5e89971684791f5358001e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unzFile</type>
        <definition>unzFile unzOpen</definition>
        <argsstring>(const char *path)</argsstring>
        <name>unzOpen</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1309" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1309" bodyend="1396"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1aef0dc5c24f1bed75f42a8ad3c49ac161" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int unzClose</definition>
        <argsstring>(unzFile file)</argsstring>
        <name>unzClose</name>
        <param>
          <type>unzFile</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1404" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1404" bodyend="1417"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1adece24d0178f61ef2d69e6ee5e6af464" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int unzGetGlobalInfo</definition>
        <argsstring>(unzFile file, unz_global_info *pglobal_info)</argsstring>
        <name>unzGetGlobalInfo</name>
        <param>
          <type>unzFile</type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="structunz__global__info__s" kindref="compound">unz_global_info</ref> *</type>
          <declname>pglobal_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1424" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1424" bodyend="1432"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a938e7260ed36455f6afac359fb7e5ce4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void unzlocal_DosDateToTmuDate</definition>
        <argsstring>(uLong ulDosDate, tm_unz *ptm)</argsstring>
        <name>unzlocal_DosDateToTmuDate</name>
        <param>
          <type>uLong</type>
          <declname>ulDosDate</declname>
        </param>
        <param>
          <type><ref refid="structtm__unz__s" kindref="compound">tm_unz</ref> *</type>
          <declname>ptm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1438" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1438" bodyend="1449"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a2ba398a81d10dd2744693d5f6f7d17fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int unzlocal_GetCurrentFileInfoInternal</definition>
        <argsstring>(unzFile file, unz_file_info *pfile_info, unz_file_info_internal *pfile_info_internal, char *szFileName, uLong fileNameBufferSize, void *extraField, uLong extraFieldBufferSize, char *szComment, uLong commentBufferSize)</argsstring>
        <name>unzlocal_GetCurrentFileInfoInternal</name>
        <param>
          <type>unzFile</type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="structunz__file__info__s" kindref="compound">unz_file_info</ref> *</type>
          <declname>pfile_info</declname>
        </param>
        <param>
          <type><ref refid="structunz__file__info__internal__s" kindref="compound">unz_file_info_internal</ref> *</type>
          <declname>pfile_info_internal</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>szFileName</declname>
        </param>
        <param>
          <type>uLong</type>
          <declname>fileNameBufferSize</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>extraField</declname>
        </param>
        <param>
          <type>uLong</type>
          <declname>extraFieldBufferSize</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>szComment</declname>
        </param>
        <param>
          <type>uLong</type>
          <declname>commentBufferSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1454" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1454" bodyend="1605"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1aee62ab31d5b5d343e6ba2b2598377e70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int unzGetCurrentFileInfo</definition>
        <argsstring>(unzFile file, unz_file_info *pfile_info, char *szFileName, uLong fileNameBufferSize, void *extraField, uLong extraFieldBufferSize, char *szComment, uLong commentBufferSize)</argsstring>
        <name>unzGetCurrentFileInfo</name>
        <param>
          <type>unzFile</type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="structunz__file__info__s" kindref="compound">unz_file_info</ref> *</type>
          <declname>pfile_info</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>szFileName</declname>
        </param>
        <param>
          <type>uLong</type>
          <declname>fileNameBufferSize</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>extraField</declname>
        </param>
        <param>
          <type>uLong</type>
          <declname>extraFieldBufferSize</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>szComment</declname>
        </param>
        <param>
          <type>uLong</type>
          <declname>commentBufferSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1612" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1612" bodyend="1621"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1aede62e436e4e64d5090f880e52c60d35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int unzGoToFirstFile</definition>
        <argsstring>(unzFile file)</argsstring>
        <name>unzGoToFirstFile</name>
        <param>
          <type>unzFile</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1627" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1627" bodyend="1641"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1ae8566a19fc6c613a3fc627320748000e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int unzGoToNextFile</definition>
        <argsstring>(unzFile file)</argsstring>
        <name>unzGoToNextFile</name>
        <param>
          <type>unzFile</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1648" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1648" bodyend="1669"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a32302c9ce1c4ccb24cab814d652e8f46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int unzGetCurrentFileInfoPosition</definition>
        <argsstring>(unzFile file, unsigned long *pos)</argsstring>
        <name>unzGetCurrentFileInfoPosition</name>
        <param>
          <type>unzFile</type>
          <declname>file</declname>
        </param>
        <param>
          <type>unsigned long *</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1675" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1675" bodyend="1685"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a727fa33f6caf8c6701686e7691dd262f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int unzSetCurrentFileInfoPosition</definition>
        <argsstring>(unzFile file, unsigned long pos)</argsstring>
        <name>unzSetCurrentFileInfoPosition</name>
        <param>
          <type>unzFile</type>
          <declname>file</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1691" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1691" bodyend="1706"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a0780f16e0d227f7bc0be70897a4968ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int unzLocateFile</definition>
        <argsstring>(unzFile file, const char *szFileName, int iCaseSensitivity)</argsstring>
        <name>unzLocateFile</name>
        <param>
          <type>unzFile</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>szFileName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iCaseSensitivity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1716" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1716" bodyend="1756"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1ac1c7b6335f7d7048079918d6de3e70c7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int unzlocal_CheckCurrentFileCoherencyHeader</definition>
        <argsstring>(unz_s *s, uInt *piSizeVar, uLong *poffset_local_extrafield, uInt *psize_local_extrafield)</argsstring>
        <name>unzlocal_CheckCurrentFileCoherencyHeader</name>
        <param>
          <type><ref refid="structunz__s" kindref="compound">unz_s</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>uInt *</type>
          <declname>piSizeVar</declname>
        </param>
        <param>
          <type>uLong *</type>
          <declname>poffset_local_extrafield</declname>
        </param>
        <param>
          <type>uInt *</type>
          <declname>psize_local_extrafield</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1766" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1766" bodyend="1846"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1ab66d71fcdfc031e645ed9c1dec5e31fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int unzOpenCurrentFile</definition>
        <argsstring>(unzFile file)</argsstring>
        <name>unzOpenCurrentFile</name>
        <param>
          <type>unzFile</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1852" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1852" bodyend="1939"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a2f9afaa00c7985a22826539160e71018" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int unzReadCurrentFile</definition>
        <argsstring>(unzFile file, void *buf, unsigned len)</argsstring>
        <name>unzReadCurrentFile</name>
        <param>
          <type>unzFile</type>
          <declname>file</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="1952" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="1952" bodyend="2071"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1ab17efcbbe249a835e0d2e41170541e9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long unztell</definition>
        <argsstring>(unzFile file)</argsstring>
        <name>unztell</name>
        <param>
          <type>unzFile</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2077" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2077" bodyend="2090"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a88eda7d72ebcefc3509ef28d0faa6a6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int unzeof</definition>
        <argsstring>(unzFile file)</argsstring>
        <name>unzeof</name>
        <param>
          <type>unzFile</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2096" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2096" bodyend="2112"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1ae782b18b4958a44c3c50fcb2cccf539e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int unzGetLocalExtrafield</definition>
        <argsstring>(unzFile file, void *buf, unsigned len)</argsstring>
        <name>unzGetLocalExtrafield</name>
        <param>
          <type>unzFile</type>
          <declname>file</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2128" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2128" bodyend="2166"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a6cc787ca951b3f0ecc782f32aa1cf8e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int unzCloseCurrentFile</definition>
        <argsstring>(unzFile file)</argsstring>
        <name>unzCloseCurrentFile</name>
        <param>
          <type>unzFile</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2172" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2172" bodyend="2205"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1ac78fe36af54ac64ca398daf3e266236f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int unzGetGlobalComment</definition>
        <argsstring>(unzFile file, char *szComment, uLong uSizeBuf)</argsstring>
        <name>unzGetGlobalComment</name>
        <param>
          <type>unzFile</type>
          <declname>file</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>szComment</declname>
        </param>
        <param>
          <type>uLong</type>
          <declname>uSizeBuf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2213" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2213" bodyend="2238"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1ac23759083ee23eec37e37cbb738d329e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref> *</type>
        <definition>inflate_blocks_statef * inflate_blocks_new</definition>
        <argsstring>(z_streamp z, check_func c, uInt w)</argsstring>
        <name>inflate_blocks_new</name>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type>check_func</type>
          <declname>c</declname>
        </param>
        <param>
          <type>uInt</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2409" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2698" bodyend="2723"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a68b082d1f3f485989b5d7bcea7c9eedc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflate_blocks</definition>
        <argsstring>(inflate_blocks_statef *, z_streamp, int)</argsstring>
        <name>inflate_blocks</name>
        <param>
          <type><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref> *</type>
          <defname>s</defname>
        </param>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <defname>z</defname>
        </param>
        <param>
          <type>int</type>
          <defname>r</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2414" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2726" bodyend="2979"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a08123228ec06ae3cbeec332f22598cf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void inflate_blocks_reset</definition>
        <argsstring>(inflate_blocks_statef *, z_streamp, uLong *)</argsstring>
        <name>inflate_blocks_reset</name>
        <param>
          <type><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref> *</type>
          <defname>s</defname>
        </param>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <defname>z</defname>
        </param>
        <param>
          <type>uLong *</type>
          <defname>c</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2419" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2680" bodyend="2695"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1ae96e4477d606dff360857c6c619d8e1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflate_blocks_free</definition>
        <argsstring>(inflate_blocks_statef *, z_streamp)</argsstring>
        <name>inflate_blocks_free</name>
        <param>
          <type><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref> *</type>
          <defname>s</defname>
        </param>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <defname>z</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2424" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2982" bodyend="2990"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a5f22c629458be3489bd41368f37048b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void inflate_set_dictionary</definition>
        <argsstring>(inflate_blocks_statef *s, const Byte *d, uInt n)</argsstring>
        <name>inflate_set_dictionary</name>
        <param>
          <type><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const Byte *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>uInt</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2428" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="2993" bodyend="2997"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1adee4af305035ad1254d4137c2d8ee1ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflate_blocks_sync_point</definition>
        <argsstring>(inflate_blocks_statef *s)</argsstring>
        <name>inflate_blocks_sync_point</name>
        <param>
          <type><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2433" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3004" bodyend="3007"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a827004a92d68263ee39040a1fc0863a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflate_trees_bits</definition>
        <argsstring>(uInt *, uInt *, inflate_huft **, inflate_huft *, z_streamp)</argsstring>
        <name>inflate_trees_bits</name>
        <param>
          <type>uInt *</type>
          <defname>c</defname>
        </param>
        <param>
          <type>uInt *</type>
          <defname>bb</defname>
        </param>
        <param>
          <type><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref> **</type>
          <defname>tb</defname>
        </param>
        <param>
          <type><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref> *</type>
          <defname>hp</defname>
        </param>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <defname>z</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2478" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3382" bodyend="3406"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a7d41a81122add2e5e9099ed4be40c86d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflate_trees_dynamic</definition>
        <argsstring>(uInt, uInt, uInt *, uInt *, uInt *, inflate_huft **, inflate_huft **, inflate_huft *, z_streamp)</argsstring>
        <name>inflate_trees_dynamic</name>
        <param>
          <type>uInt</type>
          <defname>nl</defname>
        </param>
        <param>
          <type>uInt</type>
          <defname>nd</defname>
        </param>
        <param>
          <type>uInt *</type>
          <defname>c</defname>
        </param>
        <param>
          <type>uInt *</type>
          <defname>bl</defname>
        </param>
        <param>
          <type>uInt *</type>
          <defname>bd</defname>
        </param>
        <param>
          <type><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref> **</type>
          <defname>tl</defname>
        </param>
        <param>
          <type><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref> **</type>
          <defname>td</defname>
        </param>
        <param>
          <type><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref> *</type>
          <defname>hp</defname>
        </param>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <defname>z</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2485" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3409" bodyend="3470"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a7ba66740bb93b4020f3f4f3738849a83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflate_trees_fixed</definition>
        <argsstring>(uInt *, uInt *, inflate_huft **, inflate_huft **, z_streamp)</argsstring>
        <name>inflate_trees_fixed</name>
        <param>
          <type>uInt *</type>
          <defname>bl</defname>
        </param>
        <param>
          <type>uInt *</type>
          <defname>bd</defname>
        </param>
        <param>
          <type><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref> **</type>
          <defname>tl</defname>
        </param>
        <param>
          <type><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref> **</type>
          <defname>td</defname>
        </param>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <defname>z</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2496" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3624" bodyend="3636"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a0b2324a7cd92f33dc8af0e20ffb39a27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structinflate__codes__state" kindref="compound">inflate_codes_statef</ref> *</type>
        <definition>inflate_codes_statef * inflate_codes_new</definition>
        <argsstring>(uInt, uInt, inflate_huft *, inflate_huft *, z_streamp)</argsstring>
        <name>inflate_codes_new</name>
        <param>
          <type>uInt</type>
          <defname>bl</defname>
        </param>
        <param>
          <type>uInt</type>
          <defname>bd</defname>
        </param>
        <param>
          <type><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref> *</type>
          <defname>tl</defname>
        </param>
        <param>
          <type><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref> *</type>
          <defname>td</defname>
        </param>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <defname>z</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2517" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3841" bodyend="3856"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a0396af347aa6d9fae7badc90612ebc76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflate_codes</definition>
        <argsstring>(inflate_blocks_statef *, z_streamp, int)</argsstring>
        <name>inflate_codes</name>
        <param>
          <type><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref> *</type>
          <defname>s</defname>
        </param>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <defname>z</defname>
        </param>
        <param>
          <type>int</type>
          <defname>r</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2522" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3859" bodyend="4023"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1aef00f2846144a717e55e3e28438f2eae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void inflate_codes_free</definition>
        <argsstring>(inflate_codes_statef *, z_streamp)</argsstring>
        <name>inflate_codes_free</name>
        <param>
          <type><ref refid="structinflate__codes__state" kindref="compound">inflate_codes_statef</ref> *</type>
          <defname>c</defname>
        </param>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <defname>z</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2527" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="4026" bodyend="4030"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a13f28772301ac0bf5d7178af24966595" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflate_flush</definition>
        <argsstring>(inflate_blocks_statef *, z_streamp, int)</argsstring>
        <name>inflate_flush</name>
        <param>
          <type><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref> *</type>
          <defname>s</defname>
        </param>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <defname>z</defname>
        </param>
        <param>
          <type>int</type>
          <defname>r</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="2626" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3010" bodyend="3095"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1ab0b7ae7fc70f8dc4b72236611a025b60" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int huft_build</definition>
        <argsstring>(uInt *, uInt, uInt, const uInt *, const uInt *, inflate_huft **, uInt *, inflate_huft *, uInt *, uInt *)</argsstring>
        <name>huft_build</name>
        <param>
          <type>uInt *</type>
          <defname>b</defname>
        </param>
        <param>
          <type>uInt</type>
          <defname>n</defname>
        </param>
        <param>
          <type>uInt</type>
          <defname>s</defname>
        </param>
        <param>
          <type>const uInt *</type>
          <defname>d</defname>
        </param>
        <param>
          <type>const uInt *</type>
          <defname>e</defname>
        </param>
        <param>
          <type><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref> **</type>
          <defname>t</defname>
        </param>
        <param>
          <type>uInt *</type>
          <defname>m</defname>
        </param>
        <param>
          <type><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref> *</type>
          <defname>hp</defname>
        </param>
        <param>
          <type>uInt *</type>
          <defname>hn</defname>
        </param>
        <param>
          <type>uInt *</type>
          <defname>v</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3116" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3181" bodyend="3379"/>
      </memberdef>
      <memberdef kind="function" id="_unzip_8cpp_1a2b53032e336b78fa10ac9c1e8e3b6c65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inflate_fast</definition>
        <argsstring>(uInt bl, uInt bd, inflate_huft *tl, inflate_huft *td, inflate_blocks_statef *s, z_streamp z)</argsstring>
        <name>inflate_fast</name>
        <param>
          <type>uInt</type>
          <declname>bl</declname>
        </param>
        <param>
          <type>uInt</type>
          <declname>bd</declname>
        </param>
        <param>
          <type><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref> *</type>
          <declname>tl</declname>
        </param>
        <param>
          <type><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref> *</type>
          <declname>td</declname>
        </param>
        <param>
          <type><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structz__stream__s" kindref="compound">z_streamp</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" line="3651" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp" bodystart="3651" bodyend="3788"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Unzip.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>unzip.h<sp/>--<sp/>IO<sp/>for<sp/>uncompress<sp/>.zip<sp/>files<sp/>using<sp/>zlib<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/>Version<sp/>0.15<sp/>beta,<sp/>Mar<sp/>19th,<sp/>1998,</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/>Copyright<sp/>(C)<sp/>1998<sp/>Gilles<sp/>Vollant</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/>This<sp/>unzip<sp/>package<sp/>allow<sp/>extract<sp/>file<sp/>from<sp/>.ZIP<sp/>file,<sp/>compatible<sp/>with<sp/>PKZip<sp/>2.04g</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>WinZip,<sp/>InfoZip<sp/>tools<sp/>and<sp/>compatible.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/>Encryption<sp/>and<sp/>multi<sp/>volume<sp/>ZipFile<sp/>(span)<sp/>are<sp/>not<sp/>supported.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/>Old<sp/>compressions<sp/>used<sp/>by<sp/>old<sp/>PKZip<sp/>1.x<sp/>are<sp/>not<sp/>supported</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/>THIS<sp/>IS<sp/>AN<sp/>ALPHA<sp/>VERSION.<sp/>AT<sp/>THIS<sp/>STAGE<sp/>OF<sp/>DEVELOPPEMENT,<sp/>SOMES<sp/>API<sp/>OR<sp/>STRUCTURE</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/>CAN<sp/>CHANGE<sp/>IN<sp/>FUTURE<sp/>VERSION<sp/>!!</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/>I<sp/>WAIT<sp/>FEEDBACK<sp/>at<sp/>mail<sp/>info@winimage.com</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/>Visit<sp/>also<sp/>http://www.winimage.com/zLibDll/unzip.htm<sp/>for<sp/>evolution</highlight></codeline>
<codeline lineno="20"><highlight class="comment"></highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/>Condition<sp/>of<sp/>use<sp/>and<sp/>distribution<sp/>are<sp/>the<sp/>same<sp/>than<sp/>zlib<sp/>:</highlight></codeline>
<codeline lineno="22"><highlight class="comment"></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/>This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/>warranty.<sp/><sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/>arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/>Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/>including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/>freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight></codeline>
<codeline lineno="30"><highlight class="comment"></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source<sp/>distribution.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"></highlight></codeline>
<codeline lineno="39"><highlight class="comment"></highlight></codeline>
<codeline lineno="40"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>for<sp/>more<sp/>info<sp/>about<sp/>.ZIP<sp/>format,<sp/>see<sp/></highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>ftp://ftp.cdrom.com/pub/infozip/doc/appnote-970311-iz.zip</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/>PkWare<sp/>has<sp/>also<sp/>a<sp/>specification<sp/>at<sp/>:</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>ftp://ftp.pkware.com/probdesc.zip<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>zlib.h<sp/>--<sp/>interface<sp/>of<sp/>the<sp/>&apos;zlib&apos;<sp/>general<sp/>purpose<sp/>compression<sp/>library</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/>version<sp/>1.1.3,<sp/>July<sp/>9th,<sp/>1998</highlight></codeline>
<codeline lineno="48"><highlight class="comment"></highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/>Copyright<sp/>(C)<sp/>1995-1998<sp/>Jean-loup<sp/>Gailly<sp/>and<sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="50"><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/>This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/>warranty.<sp/><sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/>arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/>Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/>including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/>freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight></codeline>
<codeline lineno="58"><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source<sp/>distribution.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/>Jean-loup<sp/>Gailly<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/>jloup@gzip.org<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>madler@alumni.caltech.edu</highlight></codeline>
<codeline lineno="69"><highlight class="comment"></highlight></codeline>
<codeline lineno="70"><highlight class="comment"></highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/>The<sp/>data<sp/>format<sp/>used<sp/>by<sp/>the<sp/>zlib<sp/>library<sp/>is<sp/>described<sp/>by<sp/>RFCs<sp/>(Request<sp/>for</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/>Comments)<sp/>1950<sp/>to<sp/>1952<sp/>in<sp/>the<sp/>files<sp/>ftp://ds.internic.net/rfc/rfc1950.txt</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/>(zlib<sp/>format),<sp/>rfc1951.txt<sp/>(deflate<sp/>format)<sp/>and<sp/>rfc1952.txt<sp/>(gzip<sp/>format).</highlight></codeline>
<codeline lineno="74"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>zconf.h<sp/>--<sp/>configuration<sp/>of<sp/>the<sp/>zlib<sp/>compression<sp/>library</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-1998<sp/>Jean-loup<sp/>Gailly.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h<sp/></highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@(#)<sp/>$Id:<sp/>unzip.c,v<sp/>1.2<sp/>1999/09/07<sp/>20:51:25<sp/>zoid<sp/>Exp<sp/>$<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_ZCONF_H</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_ZCONF_H</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Maximum<sp/>value<sp/>for<sp/>memLevel<sp/>in<sp/>deflateInit2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MAX_MEM_LEVEL</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>MAXSEG_64K</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>MAX_MEM_LEVEL<sp/>8</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>MAX_MEM_LEVEL<sp/>9</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Maximum<sp/>value<sp/>for<sp/>windowBits<sp/>in<sp/>deflateInit2<sp/>and<sp/>inflateInit2.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>WARNING:<sp/>reducing<sp/>MAX_WBITS<sp/>makes<sp/>minigzip<sp/>unable<sp/>to<sp/>extract<sp/>.gz<sp/>files</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>created<sp/>by<sp/>gzip.<sp/>(Files<sp/>created<sp/>by<sp/>minigzip<sp/>can<sp/>still<sp/>be<sp/>extracted<sp/>by</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>gzip.)</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MAX_WBITS</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAX_WBITS<sp/><sp/><sp/>15<sp/></highlight><highlight class="comment">/*<sp/>32K<sp/>LZ77<sp/>window<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>memory<sp/>requirements<sp/>for<sp/>deflate<sp/>are<sp/>(in<sp/>bytes):</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>(windowBits+2))<sp/>+<sp/><sp/>(1<sp/>&lt;&lt;<sp/>(memLevel+9))</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>that<sp/>is:<sp/>128K<sp/>for<sp/>windowBits=15<sp/><sp/>+<sp/><sp/>128K<sp/>for<sp/>memLevel<sp/>=<sp/>8<sp/><sp/>(default<sp/>values)</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>plus<sp/>a<sp/>few<sp/>kilobytes<sp/>for<sp/>small<sp/>objects.<sp/>For<sp/>example,<sp/>if<sp/>you<sp/>want<sp/>to<sp/>reduce</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>the<sp/>default<sp/>memory<sp/>requirements<sp/>from<sp/>256K<sp/>to<sp/>128K,<sp/>compile<sp/>with</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>make<sp/>CFLAGS=&quot;-O<sp/>-DMAX_WBITS=14<sp/>-DMAX_MEM_LEVEL=7&quot;</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>Of<sp/>course<sp/>this<sp/>will<sp/>generally<sp/>degrade<sp/>compression<sp/>(there&apos;s<sp/>no<sp/>free<sp/>lunch).</highlight></codeline>
<codeline lineno="111"><highlight class="comment"></highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/>The<sp/>memory<sp/>requirements<sp/>for<sp/>inflate<sp/>are<sp/>(in<sp/>bytes)<sp/>1<sp/>&lt;&lt;<sp/>windowBits</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>that<sp/>is,<sp/>32K<sp/>for<sp/>windowBits=15<sp/>(default<sp/>value)<sp/>plus<sp/>a<sp/>few<sp/>kilobytes</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>for<sp/>small<sp/>objects.</highlight></codeline>
<codeline lineno="115"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Type<sp/>declarations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OF<sp/></highlight><highlight class="comment">/*<sp/>function<sp/>prototypes<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>OF(args)<sp/><sp/>args</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>Byte;<sp/><sp/></highlight><highlight class="comment">/*<sp/>8<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>uInt;<sp/><sp/></highlight><highlight class="comment">/*<sp/>16<sp/>bits<sp/>or<sp/>more<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/>uLong;<sp/></highlight><highlight class="comment">/*<sp/>32<sp/>bits<sp/>or<sp/>more<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Byte<sp/><sp/><sp/><sp/>*voidp;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SEEK_SET</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>SEEK_SET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Seek<sp/>from<sp/>beginning<sp/>of<sp/>file.<sp/><sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>SEEK_CUR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Seek<sp/>from<sp/>current<sp/>position.<sp/><sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>SEEK_END<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>file<sp/>pointer<sp/>to<sp/>EOF<sp/>plus<sp/>&quot;offset&quot;<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_ZCONF_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZLIB_VERSION<sp/>&quot;1.1.3&quot;</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>&apos;zlib&apos;<sp/>compression<sp/>library<sp/>provides<sp/>in-memory<sp/>compression<sp/>and</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/>decompression<sp/>functions,<sp/>including<sp/>integrity<sp/>checks<sp/>of<sp/>the<sp/>uncompressed</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/>data.<sp/><sp/>This<sp/>version<sp/>of<sp/>the<sp/>library<sp/>supports<sp/>only<sp/>one<sp/>compression<sp/>method</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/>(deflation)<sp/>but<sp/>other<sp/>algorithms<sp/>will<sp/>be<sp/>added<sp/>later<sp/>and<sp/>will<sp/>have<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/>stream<sp/>interface.</highlight></codeline>
<codeline lineno="144"><highlight class="comment"></highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Compression<sp/>can<sp/>be<sp/>done<sp/>in<sp/>a<sp/>single<sp/>step<sp/>if<sp/>the<sp/>buffers<sp/>are<sp/>large</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/>enough<sp/>(for<sp/>example<sp/>if<sp/>an<sp/>input<sp/>file<sp/>is<sp/>mmap&apos;ed),<sp/>or<sp/>can<sp/>be<sp/>done<sp/>by</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/>repeated<sp/>calls<sp/>of<sp/>the<sp/>compression<sp/>function.<sp/><sp/>In<sp/>the<sp/>latter<sp/>case,<sp/>the</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/>application<sp/>must<sp/>provide<sp/>more<sp/>input<sp/>and/or<sp/>consume<sp/>the<sp/>output</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/>(providing<sp/>more<sp/>output<sp/>space)<sp/>before<sp/>each<sp/>call.</highlight></codeline>
<codeline lineno="150"><highlight class="comment"></highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>library<sp/>also<sp/>supports<sp/>reading<sp/>and<sp/>writing<sp/>files<sp/>in<sp/>gzip<sp/>(.gz)<sp/>format</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/>with<sp/>an<sp/>interface<sp/>similar<sp/>to<sp/>that<sp/>of<sp/>stdio.</highlight></codeline>
<codeline lineno="153"><highlight class="comment"></highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>library<sp/>does<sp/>not<sp/>install<sp/>any<sp/>signal<sp/>handler.<sp/>The<sp/>decoder<sp/>checks</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/>the<sp/>consistency<sp/>of<sp/>the<sp/>compressed<sp/>data,<sp/>so<sp/>the<sp/>library<sp/>should<sp/>never</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/>crash<sp/>even<sp/>in<sp/>case<sp/>of<sp/>corrupted<sp/>input.</highlight></codeline>
<codeline lineno="157"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/>The<sp/>application<sp/>must<sp/>update<sp/>next_in<sp/>and<sp/>avail_in<sp/>when<sp/>avail_in<sp/>has</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/>dropped<sp/>to<sp/>zero.<sp/>It<sp/>must<sp/>update<sp/>next_out<sp/>and<sp/>avail_out<sp/>when<sp/>avail_out</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/>has<sp/>dropped<sp/>to<sp/>zero.<sp/>The<sp/>application<sp/>must<sp/>initialize<sp/>zalloc,<sp/>zfree<sp/>and</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/>opaque<sp/>before<sp/>calling<sp/>the<sp/>init<sp/>function.<sp/>All<sp/>other<sp/>fields<sp/>are<sp/>set<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/>compression<sp/>library<sp/>and<sp/>must<sp/>not<sp/>be<sp/>updated<sp/>by<sp/>the<sp/>application.</highlight></codeline>
<codeline lineno="165"><highlight class="comment"></highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/>The<sp/>opaque<sp/>value<sp/>provided<sp/>by<sp/>the<sp/>application<sp/>will<sp/>be<sp/>passed<sp/>as<sp/>the<sp/>first</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/>parameter<sp/>for<sp/>calls<sp/>of<sp/>zalloc<sp/>and<sp/>zfree.<sp/>This<sp/>can<sp/>be<sp/>useful<sp/>for<sp/>custom</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/>memory<sp/>management.<sp/>The<sp/>compression<sp/>library<sp/>attaches<sp/>no<sp/>meaning<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/>opaque<sp/>value.</highlight></codeline>
<codeline lineno="170"><highlight class="comment"></highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/>zalloc<sp/>must<sp/>return<sp/>Z_NULL<sp/>if<sp/>there<sp/>is<sp/>not<sp/>enough<sp/>memory<sp/>for<sp/>the<sp/>object.</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/>If<sp/>zlib<sp/>is<sp/>used<sp/>in<sp/>a<sp/>multi-threaded<sp/>application,<sp/>zalloc<sp/>and<sp/>zfree<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/>thread<sp/>safe.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"></highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/>On<sp/>16-bit<sp/>systems,<sp/>the<sp/>functions<sp/>zalloc<sp/>and<sp/>zfree<sp/>must<sp/>be<sp/>able<sp/>to<sp/>allocate</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/>exactly<sp/>65536<sp/>bytes,<sp/>but<sp/>will<sp/>not<sp/>be<sp/>required<sp/>to<sp/>allocate<sp/>more<sp/>than<sp/>this</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/>if<sp/>the<sp/>symbol<sp/>MAXSEG_64K<sp/>is<sp/>defined<sp/>(see<sp/>zconf.h).<sp/>WARNING:<sp/>On<sp/>MSDOS,</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/>pointers<sp/>returned<sp/>by<sp/>zalloc<sp/>for<sp/>objects<sp/>of<sp/>exactly<sp/>65536<sp/>bytes<sp/>*must*</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/>have<sp/>their<sp/>offset<sp/>normalized<sp/>to<sp/>zero.<sp/>The<sp/>default<sp/>allocation<sp/>function</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/>provided<sp/>by<sp/>this<sp/>library<sp/>ensures<sp/>this<sp/>(see<sp/>zutil.c).<sp/>To<sp/>reduce<sp/>memory</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/>requirements<sp/>and<sp/>avoid<sp/>any<sp/>allocation<sp/>of<sp/>64K<sp/>objects,<sp/>at<sp/>the<sp/>expense<sp/>of</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/>compression<sp/>ratio,<sp/>compile<sp/>the<sp/>library<sp/>with<sp/>-DMAX_WBITS=14<sp/>(see<sp/>zconf.h).</highlight></codeline>
<codeline lineno="183"><highlight class="comment"></highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/>The<sp/>fields<sp/>total_in<sp/>and<sp/>total_out<sp/>can<sp/>be<sp/>used<sp/>for<sp/>statistics<sp/>or</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/>progress<sp/>reports.<sp/>After<sp/>compression,<sp/>total_in<sp/>holds<sp/>the<sp/>total<sp/>size<sp/>of</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/>the<sp/>uncompressed<sp/>data<sp/>and<sp/>may<sp/>be<sp/>saved<sp/>for<sp/>use<sp/>in<sp/>the<sp/>decompressor</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/>(particularly<sp/>if<sp/>the<sp/>decompressor<sp/>wants<sp/>to<sp/>decompress<sp/>everything<sp/>in</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/>a<sp/>single<sp/>step).</highlight></codeline>
<codeline lineno="189"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>constants<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_NO_FLUSH<sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_PARTIAL_FLUSH<sp/>1<sp/></highlight><highlight class="comment">/*<sp/>will<sp/>be<sp/>removed,<sp/>use<sp/>Z_SYNC_FLUSH<sp/>instead<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_SYNC_FLUSH<sp/><sp/><sp/><sp/>2</highlight></codeline>
<codeline lineno="196"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_FULL_FLUSH<sp/><sp/><sp/><sp/>3</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_FINISH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Allowed<sp/>flush<sp/>values;<sp/>see<sp/>deflate()<sp/>below<sp/>for<sp/>details<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_OK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_STREAM_END<sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_NEED_DICT<sp/><sp/><sp/><sp/><sp/>2</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_ERRNO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_STREAM_ERROR<sp/>(-2)</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_DATA_ERROR<sp/><sp/><sp/>(-3)</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_MEM_ERROR<sp/><sp/><sp/><sp/>(-4)</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_BUF_ERROR<sp/><sp/><sp/><sp/>(-5)</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_VERSION_ERROR<sp/>(-6)</highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Return<sp/>codes<sp/>for<sp/>the<sp/>compression/decompression<sp/>functions.<sp/>Negative</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>values<sp/>are<sp/>errors,<sp/>positive<sp/>values<sp/>are<sp/>used<sp/>for<sp/>special<sp/>but<sp/>normal<sp/>events.</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_NO_COMPRESSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="214"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_BEST_SPEED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="215"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_BEST_COMPRESSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/>9</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_DEFAULT_COMPRESSION<sp/><sp/>(-1)</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>compression<sp/>levels<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_FILTERED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_HUFFMAN_ONLY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_DEFAULT_STRATEGY<sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>compression<sp/>strategy;<sp/>see<sp/>deflateInit2()<sp/>below<sp/>for<sp/>details<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_BINARY<sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_ASCII<sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="226"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Z_UNKNOWN<sp/><sp/>2</highlight></codeline>
<codeline lineno="227"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Possible<sp/>values<sp/>of<sp/>the<sp/>data_type<sp/>field<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_DEFLATED<sp/><sp/><sp/>8</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>The<sp/>deflate<sp/>compression<sp/>method<sp/>(the<sp/>only<sp/>one<sp/>supported<sp/>in<sp/>this<sp/>version)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Z_NULL<sp/><sp/>0<sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>initializing<sp/>zalloc,<sp/>zfree,<sp/>opaque<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="233"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>zlib_version<sp/>zlibVersion()</highlight></codeline>
<codeline lineno="235"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>for<sp/>compatibility<sp/>with<sp/>versions<sp/>&lt;<sp/>1.0.2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>basic<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>zlibVersion<sp/>OF((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>application<sp/>can<sp/>compare<sp/>zlibVersion<sp/>and<sp/>ZLIB_VERSION<sp/>for<sp/>consistency.</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/>If<sp/>the<sp/>first<sp/>character<sp/>differs,<sp/>the<sp/>library<sp/>code<sp/>actually<sp/>used<sp/>is</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/>not<sp/>compatible<sp/>with<sp/>the<sp/>zlib.h<sp/>header<sp/>file<sp/>used<sp/>by<sp/>the<sp/>application.</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/>This<sp/>check<sp/>is<sp/>automatically<sp/>made<sp/>by<sp/>deflateInit<sp/>and<sp/>inflateInit.</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="247"><highlight class="comment">int<sp/>deflateInit<sp/>OF((z_streamp<sp/>strm,<sp/>int<sp/>level));</highlight></codeline>
<codeline lineno="248"><highlight class="comment"></highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Initializes<sp/>the<sp/>internal<sp/>stream<sp/>state<sp/>for<sp/>compression.<sp/>The<sp/>fields</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/>zalloc,<sp/>zfree<sp/>and<sp/>opaque<sp/>must<sp/>be<sp/>initialized<sp/>before<sp/>by<sp/>the<sp/>caller.</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/>If<sp/>zalloc<sp/>and<sp/>zfree<sp/>are<sp/>set<sp/>to<sp/>Z_NULL,<sp/>deflateInit<sp/>updates<sp/>them<sp/>to</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/>use<sp/>default<sp/>allocation<sp/>functions.</highlight></codeline>
<codeline lineno="253"><highlight class="comment"></highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>compression<sp/>level<sp/>must<sp/>be<sp/>Z_DEFAULT_COMPRESSION,<sp/>or<sp/>between<sp/>0<sp/>and<sp/>9:</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/>1<sp/>gives<sp/>best<sp/>speed,<sp/>9<sp/>gives<sp/>best<sp/>compression,<sp/>0<sp/>gives<sp/>no<sp/>compression<sp/>at</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/>all<sp/>(the<sp/>input<sp/>data<sp/>is<sp/>simply<sp/>copied<sp/>a<sp/>block<sp/>at<sp/>a<sp/>time).</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/>Z_DEFAULT_COMPRESSION<sp/>requests<sp/>a<sp/>default<sp/>compromise<sp/>between<sp/>speed<sp/>and</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/>compression<sp/>(currently<sp/>equivalent<sp/>to<sp/>level<sp/>6).</highlight></codeline>
<codeline lineno="259"><highlight class="comment"></highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>deflateInit<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/>enough<sp/>memory,<sp/>Z_STREAM_ERROR<sp/>if<sp/>level<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>compression<sp/>level,</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/>Z_VERSION_ERROR<sp/>if<sp/>the<sp/>zlib<sp/>library<sp/>version<sp/>(zlib_version)<sp/>is<sp/>incompatible</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/>with<sp/>the<sp/>version<sp/>assumed<sp/>by<sp/>the<sp/>caller<sp/>(ZLIB_VERSION).</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/>msg<sp/>is<sp/>set<sp/>to<sp/>null<sp/>if<sp/>there<sp/>is<sp/>no<sp/>error<sp/>message.<sp/><sp/>deflateInit<sp/>does<sp/>not</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/>perform<sp/>any<sp/>compression:<sp/>this<sp/>will<sp/>be<sp/>done<sp/>by<sp/>deflate().</highlight></codeline>
<codeline lineno="266"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deflate<sp/>OF((<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/><sp/><sp/>deflate<sp/>compresses<sp/>as<sp/>much<sp/>data<sp/>as<sp/>possible,<sp/>and<sp/>stops<sp/>when<sp/>the<sp/>input</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/>buffer<sp/>becomes<sp/>empty<sp/>or<sp/>the<sp/>output<sp/>buffer<sp/>becomes<sp/>full.<sp/>It<sp/>may<sp/>introduce<sp/>some</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/>output<sp/>latency<sp/>(reading<sp/>input<sp/>without<sp/>producing<sp/>any<sp/>output)<sp/>except<sp/>when</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/>forced<sp/>to<sp/>flush.</highlight></codeline>
<codeline lineno="275"><highlight class="comment"></highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>detailed<sp/>semantics<sp/>are<sp/>as<sp/>follows.<sp/>deflate<sp/>performs<sp/>one<sp/>or<sp/>both<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/><sp/>following<sp/>actions:</highlight></codeline>
<codeline lineno="278"><highlight class="comment"></highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/><sp/>-<sp/>Compress<sp/>more<sp/>input<sp/>starting<sp/>at<sp/>next_in<sp/>and<sp/>update<sp/>next_in<sp/>and<sp/>avail_in</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/><sp/><sp/><sp/>accordingly.<sp/>If<sp/>not<sp/>all<sp/>input<sp/>can<sp/>be<sp/>processed<sp/>(because<sp/>there<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/><sp/><sp/>enough<sp/>room<sp/>in<sp/>the<sp/>output<sp/>buffer),<sp/>next_in<sp/>and<sp/>avail_in<sp/>are<sp/>updated<sp/>and</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/><sp/><sp/><sp/>processing<sp/>will<sp/>resume<sp/>at<sp/>this<sp/>point<sp/>for<sp/>the<sp/>next<sp/>call<sp/>of<sp/>deflate().</highlight></codeline>
<codeline lineno="283"><highlight class="comment"></highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/>-<sp/>Provide<sp/>more<sp/>output<sp/>starting<sp/>at<sp/>next_out<sp/>and<sp/>update<sp/>next_out<sp/>and<sp/>avail_out</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/><sp/>accordingly.<sp/>This<sp/>action<sp/>is<sp/>forced<sp/>if<sp/>the<sp/>parameter<sp/>flush<sp/>is<sp/>non<sp/>zero.</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/><sp/>Forcing<sp/>flush<sp/>frequently<sp/>degrades<sp/>the<sp/>compression<sp/>ratio,<sp/>so<sp/>this<sp/>parameter</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/><sp/>should<sp/>be<sp/>set<sp/>only<sp/>when<sp/>necessary<sp/>(in<sp/>interactive<sp/>applications).</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/><sp/><sp/>Some<sp/>output<sp/>may<sp/>be<sp/>provided<sp/>even<sp/>if<sp/>flush<sp/>is<sp/>not<sp/>set.</highlight></codeline>
<codeline lineno="289"><highlight class="comment"></highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/>Before<sp/>the<sp/>call<sp/>of<sp/>deflate(),<sp/>the<sp/>application<sp/>should<sp/>ensure<sp/>that<sp/>at<sp/>least</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/>one<sp/>of<sp/>the<sp/>actions<sp/>is<sp/>possible,<sp/>by<sp/>providing<sp/>more<sp/>input<sp/>and/or<sp/>consuming</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/><sp/>more<sp/>output,<sp/>and<sp/>updating<sp/>avail_in<sp/>or<sp/>avail_out<sp/>accordingly;<sp/>avail_out</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/>should<sp/>never<sp/>be<sp/>zero<sp/>before<sp/>the<sp/>call.<sp/>The<sp/>application<sp/>can<sp/>consume<sp/>the</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/>compressed<sp/>output<sp/>when<sp/>it<sp/>wants,<sp/>for<sp/>example<sp/>when<sp/>the<sp/>output<sp/>buffer<sp/>is<sp/>full</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/>(avail_out<sp/>==<sp/>0),<sp/>or<sp/>after<sp/>each<sp/>call<sp/>of<sp/>deflate().<sp/>If<sp/>deflate<sp/>returns<sp/>Z_OK</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/>and<sp/>with<sp/>zero<sp/>avail_out,<sp/>it<sp/>must<sp/>be<sp/>called<sp/>again<sp/>after<sp/>making<sp/>room<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/>output<sp/>buffer<sp/>because<sp/>there<sp/>might<sp/>be<sp/>more<sp/>output<sp/>pending.</highlight></codeline>
<codeline lineno="298"><highlight class="comment"></highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>the<sp/>parameter<sp/>flush<sp/>is<sp/>set<sp/>to<sp/>Z_SYNC_FLUSH,<sp/>all<sp/>pending<sp/>output<sp/>is</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/>flushed<sp/>to<sp/>the<sp/>output<sp/>buffer<sp/>and<sp/>the<sp/>output<sp/>is<sp/>aligned<sp/>on<sp/>a<sp/>byte<sp/>boundary,<sp/>so</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/>that<sp/>the<sp/>decompressor<sp/>can<sp/>get<sp/>all<sp/>input<sp/>data<sp/>available<sp/>so<sp/>far.<sp/>(In<sp/>particular</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/>avail_in<sp/>is<sp/>zero<sp/>after<sp/>the<sp/>call<sp/>if<sp/>enough<sp/>output<sp/>space<sp/>has<sp/>been<sp/>provided</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/>before<sp/>the<sp/>call.)<sp/><sp/>Flushing<sp/>may<sp/>degrade<sp/>compression<sp/>for<sp/>some<sp/>compression</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/><sp/>algorithms<sp/>and<sp/>so<sp/>it<sp/>should<sp/>be<sp/>used<sp/>only<sp/>when<sp/>necessary.</highlight></codeline>
<codeline lineno="305"><highlight class="comment"></highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>flush<sp/>is<sp/>set<sp/>to<sp/>Z_FULL_FLUSH,<sp/>all<sp/>output<sp/>is<sp/>flushed<sp/>as<sp/>with</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/><sp/>Z_SYNC_FLUSH,<sp/>and<sp/>the<sp/>compression<sp/>state<sp/>is<sp/>reset<sp/>so<sp/>that<sp/>decompression<sp/>can</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/><sp/>restart<sp/>from<sp/>this<sp/>point<sp/>if<sp/>previous<sp/>compressed<sp/>data<sp/>has<sp/>been<sp/>damaged<sp/>or<sp/>if</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/>random<sp/>access<sp/>is<sp/>desired.<sp/>Using<sp/>Z_FULL_FLUSH<sp/>too<sp/>often<sp/>can<sp/>seriously<sp/>degrade</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/><sp/>the<sp/>compression.</highlight></codeline>
<codeline lineno="311"><highlight class="comment"></highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>deflate<sp/>returns<sp/>with<sp/>avail_out<sp/>==<sp/>0,<sp/>this<sp/>function<sp/>must<sp/>be<sp/>called<sp/>again</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/>with<sp/>the<sp/>same<sp/>value<sp/>of<sp/>the<sp/>flush<sp/>parameter<sp/>and<sp/>more<sp/>output<sp/>space<sp/>(updated</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/>avail_out),<sp/>until<sp/>the<sp/>flush<sp/>is<sp/>complete<sp/>(deflate<sp/>returns<sp/>with<sp/>non-zero</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/>avail_out).</highlight></codeline>
<codeline lineno="316"><highlight class="comment"></highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>the<sp/>parameter<sp/>flush<sp/>is<sp/>set<sp/>to<sp/>Z_FINISH,<sp/>pending<sp/>input<sp/>is<sp/>processed,</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/><sp/>pending<sp/>output<sp/>is<sp/>flushed<sp/>and<sp/>deflate<sp/>returns<sp/>with<sp/>Z_STREAM_END<sp/>if<sp/>there</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/>was<sp/>enough<sp/>output<sp/>space;<sp/>if<sp/>deflate<sp/>returns<sp/>with<sp/>Z_OK,<sp/>this<sp/>function<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/><sp/>called<sp/>again<sp/>with<sp/>Z_FINISH<sp/>and<sp/>more<sp/>output<sp/>space<sp/>(updated<sp/>avail_out)<sp/>but<sp/>no</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/>more<sp/>input<sp/>data,<sp/>until<sp/>it<sp/>returns<sp/>with<sp/>Z_STREAM_END<sp/>or<sp/>an<sp/>error.<sp/>After</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/>deflate<sp/>has<sp/>returned<sp/>Z_STREAM_END,<sp/>the<sp/>only<sp/>possible<sp/>operations<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/>stream<sp/>are<sp/>deflateReset<sp/>or<sp/>deflateEnd.</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/><sp/>Z_FINISH<sp/>can<sp/>be<sp/>used<sp/>immediately<sp/>after<sp/>deflateInit<sp/>if<sp/>all<sp/>the<sp/>compression</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/>is<sp/>to<sp/>be<sp/>done<sp/>in<sp/>a<sp/>single<sp/>step.<sp/>In<sp/>this<sp/>case,<sp/>avail_out<sp/>must<sp/>be<sp/>at<sp/>least</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/><sp/>0.1%<sp/>larger<sp/>than<sp/>avail_in<sp/>plus<sp/>12<sp/>bytes.<sp/><sp/>If<sp/>deflate<sp/>does<sp/>not<sp/>return</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/><sp/>Z_STREAM_END,<sp/>then<sp/>it<sp/>must<sp/>be<sp/>called<sp/>again<sp/>as<sp/>described<sp/>above.</highlight></codeline>
<codeline lineno="329"><highlight class="comment"></highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/><sp/><sp/>deflate()<sp/>sets<sp/>strm-&gt;adler<sp/>to<sp/>the<sp/>adler32<sp/>checksum<sp/>of<sp/>all<sp/>input<sp/>read</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/><sp/>so<sp/>(that<sp/>is,<sp/>total_in<sp/>bytes).</highlight></codeline>
<codeline lineno="332"><highlight class="comment"></highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/><sp/><sp/><sp/>deflate()<sp/>may<sp/>update<sp/>data_type<sp/>if<sp/>it<sp/>can<sp/>make<sp/>a<sp/>good<sp/>guess<sp/>about</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/><sp/>the<sp/>input<sp/>data<sp/>type<sp/>(Z_ASCII<sp/>or<sp/>Z_BINARY).<sp/>In<sp/>doubt,<sp/>the<sp/>data<sp/>is<sp/>considered</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/><sp/>binary.<sp/>This<sp/>field<sp/>is<sp/>only<sp/>for<sp/>information<sp/>purposes<sp/>and<sp/>does<sp/>not<sp/>affect</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/><sp/>the<sp/>compression<sp/>algorithm<sp/>in<sp/>any<sp/>manner.</highlight></codeline>
<codeline lineno="337"><highlight class="comment"></highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/><sp/><sp/>deflate()<sp/>returns<sp/>Z_OK<sp/>if<sp/>some<sp/>progress<sp/>has<sp/>been<sp/>made<sp/>(more<sp/>input</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/><sp/>processed<sp/>or<sp/>more<sp/>output<sp/>produced),<sp/>Z_STREAM_END<sp/>if<sp/>all<sp/>input<sp/>has<sp/>been</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/><sp/>consumed<sp/>and<sp/>all<sp/>output<sp/>has<sp/>been<sp/>produced<sp/>(only<sp/>when<sp/>flush<sp/>is<sp/>set<sp/>to</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/>Z_FINISH),<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>stream<sp/>state<sp/>was<sp/>inconsistent<sp/>(for<sp/>example</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/>if<sp/>next_in<sp/>or<sp/>next_out<sp/>was<sp/>NULL),<sp/>Z_BUF_ERROR<sp/>if<sp/>no<sp/>progress<sp/>is<sp/>possible</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/>(for<sp/>example<sp/>avail_in<sp/>or<sp/>avail_out<sp/>was<sp/>zero).</highlight></codeline>
<codeline lineno="344"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deflateEnd<sp/>OF((<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm));</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>All<sp/>dynamically<sp/>allocated<sp/>data<sp/>structures<sp/>for<sp/>this<sp/>stream<sp/>are<sp/>freed.</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/><sp/><sp/>This<sp/>function<sp/>discards<sp/>any<sp/>unprocessed<sp/>input<sp/>and<sp/>does<sp/>not<sp/>flush<sp/>any</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/><sp/><sp/>pending<sp/>output.</highlight></codeline>
<codeline lineno="352"><highlight class="comment"></highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>deflateEnd<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_STREAM_ERROR<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/><sp/><sp/>stream<sp/>state<sp/>was<sp/>inconsistent,<sp/>Z_DATA_ERROR<sp/>if<sp/>the<sp/>stream<sp/>was<sp/>freed</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/><sp/><sp/>prematurely<sp/>(some<sp/>input<sp/>or<sp/>output<sp/>was<sp/>discarded).<sp/>In<sp/>the<sp/>error<sp/>case,</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/><sp/>msg<sp/>may<sp/>be<sp/>set<sp/>but<sp/>then<sp/>points<sp/>to<sp/>a<sp/>static<sp/>string<sp/>(which<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/><sp/><sp/>deallocated).</highlight></codeline>
<codeline lineno="358"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="362"><highlight class="comment">int<sp/>inflateInit<sp/>OF((z_streamp<sp/>strm));</highlight></codeline>
<codeline lineno="363"><highlight class="comment"></highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Initializes<sp/>the<sp/>internal<sp/>stream<sp/>state<sp/>for<sp/>decompression.<sp/>The<sp/>fields</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/><sp/>next_in,<sp/>avail_in,<sp/>zalloc,<sp/>zfree<sp/>and<sp/>opaque<sp/>must<sp/>be<sp/>initialized<sp/>before<sp/>by</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/><sp/><sp/>the<sp/>caller.<sp/>If<sp/>next_in<sp/>is<sp/>not<sp/>Z_NULL<sp/>and<sp/>avail_in<sp/>is<sp/>large<sp/>enough<sp/>(the<sp/>exact</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/><sp/>value<sp/>depends<sp/>on<sp/>the<sp/>compression<sp/>method),<sp/>inflateInit<sp/>determines<sp/>the</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/><sp/>compression<sp/>method<sp/>from<sp/>the<sp/>zlib<sp/>header<sp/>and<sp/>allocates<sp/>all<sp/>data<sp/>structures</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/><sp/>accordingly;<sp/>otherwise<sp/>the<sp/>allocation<sp/>will<sp/>be<sp/>deferred<sp/>to<sp/>the<sp/>first<sp/>call<sp/>of</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/><sp/>inflate.<sp/><sp/>If<sp/>zalloc<sp/>and<sp/>zfree<sp/>are<sp/>set<sp/>to<sp/>Z_NULL,<sp/>inflateInit<sp/>updates<sp/>them<sp/>to</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/>use<sp/>default<sp/>allocation<sp/>functions.</highlight></codeline>
<codeline lineno="372"><highlight class="comment"></highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflateInit<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/><sp/><sp/>memory,<sp/>Z_VERSION_ERROR<sp/>if<sp/>the<sp/>zlib<sp/>library<sp/>version<sp/>is<sp/>incompatible<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/><sp/><sp/>version<sp/>assumed<sp/>by<sp/>the<sp/>caller.<sp/><sp/>msg<sp/>is<sp/>set<sp/>to<sp/>null<sp/>if<sp/>there<sp/>is<sp/>no<sp/>error</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/><sp/><sp/>message.<sp/>inflateInit<sp/>does<sp/>not<sp/>perform<sp/>any<sp/>decompression<sp/>apart<sp/>from<sp/>reading</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/><sp/><sp/>the<sp/>zlib<sp/>header<sp/>if<sp/>present:<sp/>this<sp/>will<sp/>be<sp/>done<sp/>by<sp/>inflate().<sp/><sp/>(So<sp/>next_in<sp/>and</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/><sp/>avail_in<sp/>may<sp/>be<sp/>modified,<sp/>but<sp/>next_out<sp/>and<sp/>avail_out<sp/>are<sp/>unchanged.)</highlight></codeline>
<codeline lineno="379"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate<sp/>OF((<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush));</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/><sp/><sp/>inflate<sp/>decompresses<sp/>as<sp/>much<sp/>data<sp/>as<sp/>possible,<sp/>and<sp/>stops<sp/>when<sp/>the<sp/>input</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/>buffer<sp/>becomes<sp/>empty<sp/>or<sp/>the<sp/>output<sp/>buffer<sp/>becomes<sp/>full.<sp/>It<sp/>may<sp/>some</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/>introduce<sp/>some<sp/>output<sp/>latency<sp/>(reading<sp/>input<sp/>without<sp/>producing<sp/>any<sp/>output)</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/><sp/>except<sp/>when<sp/>forced<sp/>to<sp/>flush.</highlight></codeline>
<codeline lineno="388"><highlight class="comment"></highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/><sp/>The<sp/>detailed<sp/>semantics<sp/>are<sp/>as<sp/>follows.<sp/>inflate<sp/>performs<sp/>one<sp/>or<sp/>both<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/><sp/>following<sp/>actions:</highlight></codeline>
<codeline lineno="391"><highlight class="comment"></highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/><sp/>-<sp/>Decompress<sp/>more<sp/>input<sp/>starting<sp/>at<sp/>next_in<sp/>and<sp/>update<sp/>next_in<sp/>and<sp/>avail_in</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/><sp/><sp/><sp/>accordingly.<sp/>If<sp/>not<sp/>all<sp/>input<sp/>can<sp/>be<sp/>processed<sp/>(because<sp/>there<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/><sp/><sp/><sp/>enough<sp/>room<sp/>in<sp/>the<sp/>output<sp/>buffer),<sp/>next_in<sp/>is<sp/>updated<sp/>and<sp/>processing</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/><sp/><sp/><sp/>will<sp/>resume<sp/>at<sp/>this<sp/>point<sp/>for<sp/>the<sp/>next<sp/>call<sp/>of<sp/>inflate().</highlight></codeline>
<codeline lineno="396"><highlight class="comment"></highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/><sp/>-<sp/>Provide<sp/>more<sp/>output<sp/>starting<sp/>at<sp/>next_out<sp/>and<sp/>update<sp/>next_out<sp/>and<sp/>avail_out</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/><sp/><sp/><sp/>accordingly.<sp/><sp/>inflate()<sp/>provides<sp/>as<sp/>much<sp/>output<sp/>as<sp/>possible,<sp/>until<sp/>there</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>no<sp/>more<sp/>input<sp/>data<sp/>or<sp/>no<sp/>more<sp/>space<sp/>in<sp/>the<sp/>output<sp/>buffer<sp/>(see<sp/>below</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/><sp/><sp/><sp/>about<sp/>the<sp/>flush<sp/>parameter).</highlight></codeline>
<codeline lineno="401"><highlight class="comment"></highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/><sp/>Before<sp/>the<sp/>call<sp/>of<sp/>inflate(),<sp/>the<sp/>application<sp/>should<sp/>ensure<sp/>that<sp/>at<sp/>least</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/><sp/>one<sp/>of<sp/>the<sp/>actions<sp/>is<sp/>possible,<sp/>by<sp/>providing<sp/>more<sp/>input<sp/>and/or<sp/>consuming</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/>more<sp/>output,<sp/>and<sp/>updating<sp/>the<sp/>next_*<sp/>and<sp/>avail_*<sp/>values<sp/>accordingly.</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/><sp/>The<sp/>application<sp/>can<sp/>consume<sp/>the<sp/>uncompressed<sp/>output<sp/>when<sp/>it<sp/>wants,<sp/>for</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/><sp/>example<sp/>when<sp/>the<sp/>output<sp/>buffer<sp/>is<sp/>full<sp/>(avail_out<sp/>==<sp/>0),<sp/>or<sp/>after<sp/>each</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/><sp/>call<sp/>of<sp/>inflate().<sp/>If<sp/>inflate<sp/>returns<sp/>Z_OK<sp/>and<sp/>with<sp/>zero<sp/>avail_out,<sp/>it</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/><sp/>must<sp/>be<sp/>called<sp/>again<sp/>after<sp/>making<sp/>room<sp/>in<sp/>the<sp/>output<sp/>buffer<sp/>because<sp/>there</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/><sp/>might<sp/>be<sp/>more<sp/>output<sp/>pending.</highlight></codeline>
<codeline lineno="410"><highlight class="comment"></highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>the<sp/>parameter<sp/>flush<sp/>is<sp/>set<sp/>to<sp/>Z_SYNC_FLUSH,<sp/>inflate<sp/>flushes<sp/>as<sp/>much</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/>output<sp/>as<sp/>possible<sp/>to<sp/>the<sp/>output<sp/>buffer.<sp/>The<sp/>flushing<sp/>behavior<sp/>of<sp/>inflate<sp/>is</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/>not<sp/>specified<sp/>for<sp/>values<sp/>of<sp/>the<sp/>flush<sp/>parameter<sp/>other<sp/>than<sp/>Z_SYNC_FLUSH</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/><sp/>and<sp/>Z_FINISH,<sp/>but<sp/>the<sp/>current<sp/>implementation<sp/>actually<sp/>flushes<sp/>as<sp/>much<sp/>output</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/><sp/>as<sp/>possible<sp/>anyway.</highlight></codeline>
<codeline lineno="416"><highlight class="comment"></highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/><sp/><sp/><sp/>inflate()<sp/>should<sp/>normally<sp/>be<sp/>called<sp/>until<sp/>it<sp/>returns<sp/>Z_STREAM_END<sp/>or<sp/>an</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/><sp/>error.<sp/>However<sp/>if<sp/>all<sp/>decompression<sp/>is<sp/>to<sp/>be<sp/>performed<sp/>in<sp/>a<sp/>single<sp/>step</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/><sp/>(a<sp/>single<sp/>call<sp/>of<sp/>inflate),<sp/>the<sp/>parameter<sp/>flush<sp/>should<sp/>be<sp/>set<sp/>to</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/><sp/>Z_FINISH.<sp/>In<sp/>this<sp/>case<sp/>all<sp/>pending<sp/>input<sp/>is<sp/>processed<sp/>and<sp/>all<sp/>pending</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/><sp/>output<sp/>is<sp/>flushed;<sp/>avail_out<sp/>must<sp/>be<sp/>large<sp/>enough<sp/>to<sp/>hold<sp/>all<sp/>the</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/><sp/>uncompressed<sp/>data.<sp/>(The<sp/>size<sp/>of<sp/>the<sp/>uncompressed<sp/>data<sp/>may<sp/>have<sp/>been<sp/>saved</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/><sp/>by<sp/>the<sp/>compressor<sp/>for<sp/>this<sp/>purpose.)<sp/>The<sp/>next<sp/>operation<sp/>on<sp/>this<sp/>stream<sp/>must</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/><sp/>be<sp/>inflateEnd<sp/>to<sp/>deallocate<sp/>the<sp/>decompression<sp/>state.<sp/>The<sp/>use<sp/>of<sp/>Z_FINISH</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/><sp/>is<sp/>never<sp/>required,<sp/>but<sp/>can<sp/>be<sp/>used<sp/>to<sp/>inform<sp/>inflate<sp/>that<sp/>a<sp/>faster<sp/>routine</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/><sp/>may<sp/>be<sp/>used<sp/>for<sp/>the<sp/>single<sp/>inflate()<sp/>call.</highlight></codeline>
<codeline lineno="427"><highlight class="comment"></highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>If<sp/>a<sp/>preset<sp/>dictionary<sp/>is<sp/>needed<sp/>at<sp/>this<sp/>point<sp/>(see<sp/>inflateSetDictionary</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/><sp/>below),<sp/>inflate<sp/>sets<sp/>strm-adler<sp/>to<sp/>the<sp/>adler32<sp/>checksum<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/><sp/>dictionary<sp/>chosen<sp/>by<sp/>the<sp/>compressor<sp/>and<sp/>returns<sp/>Z_NEED_DICT;<sp/>otherwise<sp/></highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/><sp/>it<sp/>sets<sp/>strm-&gt;adler<sp/>to<sp/>the<sp/>adler32<sp/>checksum<sp/>of<sp/>all<sp/>output<sp/>produced</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/><sp/>so<sp/>(that<sp/>is,<sp/>total_out<sp/>bytes)<sp/>and<sp/>returns<sp/>Z_OK,<sp/>Z_STREAM_END<sp/>or</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/><sp/>an<sp/>error<sp/>code<sp/>as<sp/>described<sp/>below.<sp/>At<sp/>the<sp/>end<sp/>of<sp/>the<sp/>stream,<sp/>inflate()</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/><sp/>checks<sp/>that<sp/>its<sp/>computed<sp/>adler32<sp/>checksum<sp/>is<sp/>equal<sp/>to<sp/>that<sp/>saved<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/><sp/>compressor<sp/>and<sp/>returns<sp/>Z_STREAM_END<sp/>only<sp/>if<sp/>the<sp/>checksum<sp/>is<sp/>correct.</highlight></codeline>
<codeline lineno="436"><highlight class="comment"></highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/><sp/><sp/><sp/>inflate()<sp/>returns<sp/>Z_OK<sp/>if<sp/>some<sp/>progress<sp/>has<sp/>been<sp/>made<sp/>(more<sp/>input<sp/>processed</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/>or<sp/>more<sp/>output<sp/>produced),<sp/>Z_STREAM_END<sp/>if<sp/>the<sp/>end<sp/>of<sp/>the<sp/>compressed<sp/>data<sp/>has</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/><sp/>been<sp/>reached<sp/>and<sp/>all<sp/>uncompressed<sp/>output<sp/>has<sp/>been<sp/>produced,<sp/>Z_NEED_DICT<sp/>if<sp/>a</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/><sp/>preset<sp/>dictionary<sp/>is<sp/>needed<sp/>at<sp/>this<sp/>point,<sp/>Z_DATA_ERROR<sp/>if<sp/>the<sp/>input<sp/>data<sp/>was</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/><sp/>corrupted<sp/>(input<sp/>stream<sp/>not<sp/>conforming<sp/>to<sp/>the<sp/>zlib<sp/>format<sp/>or<sp/>incorrect</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/><sp/>adler32<sp/>checksum),<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>stream<sp/>structure<sp/>was<sp/>inconsistent</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/><sp/>(for<sp/>example<sp/>if<sp/>next_in<sp/>or<sp/>next_out<sp/>was<sp/>NULL),<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/><sp/>enough<sp/>memory,<sp/>Z_BUF_ERROR<sp/>if<sp/>no<sp/>progress<sp/>is<sp/>possible<sp/>or<sp/>if<sp/>there<sp/>was<sp/>not</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/><sp/>enough<sp/>room<sp/>in<sp/>the<sp/>output<sp/>buffer<sp/>when<sp/>Z_FINISH<sp/>is<sp/>used.<sp/>In<sp/>the<sp/>Z_DATA_ERROR</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/><sp/>case,<sp/>the<sp/>application<sp/>may<sp/>then<sp/>call<sp/>inflateSync<sp/>to<sp/>look<sp/>for<sp/>a<sp/>good</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/><sp/>compression<sp/>block.</highlight></codeline>
<codeline lineno="448"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflateEnd<sp/>OF((<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm));</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>All<sp/>dynamically<sp/>allocated<sp/>data<sp/>structures<sp/>for<sp/>this<sp/>stream<sp/>are<sp/>freed.</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/><sp/><sp/>This<sp/>function<sp/>discards<sp/>any<sp/>unprocessed<sp/>input<sp/>and<sp/>does<sp/>not<sp/>flush<sp/>any</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/><sp/><sp/>pending<sp/>output.</highlight></codeline>
<codeline lineno="456"><highlight class="comment"></highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflateEnd<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>stream<sp/>state</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/><sp/><sp/>was<sp/>inconsistent.<sp/>In<sp/>the<sp/>error<sp/>case,<sp/>msg<sp/>may<sp/>be<sp/>set<sp/>but<sp/>then<sp/>points<sp/>to<sp/>a</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/><sp/><sp/>static<sp/>string<sp/>(which<sp/>must<sp/>not<sp/>be<sp/>deallocated).</highlight></codeline>
<codeline lineno="460"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Advanced<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>following<sp/>functions<sp/>are<sp/>needed<sp/>only<sp/>in<sp/>some<sp/>special<sp/>applications.</highlight></codeline>
<codeline lineno="466"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="469"><highlight class="comment">int<sp/>deflateInit2<sp/>OF((z_streamp<sp/>strm,</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/><sp/>level,</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/><sp/>method,</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/><sp/>windowBits,</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/><sp/>memLevel,</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/><sp/>strategy));</highlight></codeline>
<codeline lineno="475"><highlight class="comment"></highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>another<sp/>version<sp/>of<sp/>deflateInit<sp/>with<sp/>more<sp/>compression<sp/>options.<sp/>The</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/><sp/><sp/>fields<sp/>next_in,<sp/>zalloc,<sp/>zfree<sp/>and<sp/>opaque<sp/>must<sp/>be<sp/>initialized<sp/>before<sp/>by</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/><sp/>the<sp/>caller.</highlight></codeline>
<codeline lineno="479"><highlight class="comment"></highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>method<sp/>parameter<sp/>is<sp/>the<sp/>compression<sp/>method.<sp/>It<sp/>must<sp/>be<sp/>Z_DEFLATED<sp/>in</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/><sp/><sp/>this<sp/>version<sp/>of<sp/>the<sp/>library.</highlight></codeline>
<codeline lineno="482"><highlight class="comment"></highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>windowBits<sp/>parameter<sp/>is<sp/>the<sp/>base<sp/>two<sp/>logarithm<sp/>of<sp/>the<sp/>window<sp/>size</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/><sp/><sp/>(the<sp/>size<sp/>of<sp/>the<sp/>history<sp/>buffer).<sp/><sp/>It<sp/>should<sp/>be<sp/>in<sp/>the<sp/>range<sp/>8..15<sp/>for<sp/>this</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/><sp/><sp/>version<sp/>of<sp/>the<sp/>library.<sp/>Larger<sp/>values<sp/>of<sp/>this<sp/>parameter<sp/>result<sp/>in<sp/>better</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/><sp/><sp/>compression<sp/>at<sp/>the<sp/>expense<sp/>of<sp/>memory<sp/>usage.<sp/>The<sp/>default<sp/>value<sp/>is<sp/>15<sp/>if</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/><sp/><sp/>deflateInit<sp/>is<sp/>used<sp/>instead.</highlight></codeline>
<codeline lineno="488"><highlight class="comment"></highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>memLevel<sp/>parameter<sp/>specifies<sp/>how<sp/>much<sp/>memory<sp/>should<sp/>be<sp/>allocated</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/><sp/><sp/>for<sp/>the<sp/>internal<sp/>compression<sp/>state.<sp/>memLevel=1<sp/>uses<sp/>minimum<sp/>memory<sp/>but</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/><sp/><sp/>is<sp/>slow<sp/>and<sp/>reduces<sp/>compression<sp/>ratio;<sp/>memLevel=9<sp/>uses<sp/>maximum<sp/>memory</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/><sp/><sp/>for<sp/>optimal<sp/>speed.<sp/>The<sp/>default<sp/>value<sp/>is<sp/>8.<sp/>See<sp/>zconf.h<sp/>for<sp/>total<sp/>memory</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/><sp/><sp/>usage<sp/>as<sp/>a<sp/>function<sp/>of<sp/>windowBits<sp/>and<sp/>memLevel.</highlight></codeline>
<codeline lineno="494"><highlight class="comment"></highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>strategy<sp/>parameter<sp/>is<sp/>used<sp/>to<sp/>tune<sp/>the<sp/>compression<sp/>algorithm.<sp/>Use<sp/>the</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/><sp/><sp/>value<sp/>Z_DEFAULT_STRATEGY<sp/>for<sp/>normal<sp/>data,<sp/>Z_FILTERED<sp/>for<sp/>data<sp/>produced<sp/>by<sp/>a</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/><sp/><sp/>filter<sp/>(or<sp/>predictor),<sp/>or<sp/>Z_HUFFMAN_ONLY<sp/>to<sp/>force<sp/>Huffman<sp/>encoding<sp/>only<sp/>(no</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/><sp/><sp/>string<sp/>match).<sp/><sp/>Filtered<sp/>data<sp/>consists<sp/>mostly<sp/>of<sp/>small<sp/>values<sp/>with<sp/>a</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/><sp/><sp/>somewhat<sp/>random<sp/>distribution.<sp/>In<sp/>this<sp/>case,<sp/>the<sp/>compression<sp/>algorithm<sp/>is</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/><sp/><sp/>tuned<sp/>to<sp/>compress<sp/>them<sp/>better.<sp/>The<sp/>effect<sp/>of<sp/>Z_FILTERED<sp/>is<sp/>to<sp/>force<sp/>more</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/><sp/><sp/>Huffman<sp/>coding<sp/>and<sp/>less<sp/>string<sp/>matching;<sp/>it<sp/>is<sp/>somewhat<sp/>intermediate</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/><sp/><sp/>between<sp/>Z_DEFAULT<sp/>and<sp/>Z_HUFFMAN_ONLY.<sp/>The<sp/>strategy<sp/>parameter<sp/>only<sp/>affects</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/><sp/><sp/>the<sp/>compression<sp/>ratio<sp/>but<sp/>not<sp/>the<sp/>correctness<sp/>of<sp/>the<sp/>compressed<sp/>output<sp/>even</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/><sp/><sp/>if<sp/>it<sp/>is<sp/>not<sp/>set<sp/>appropriately.</highlight></codeline>
<codeline lineno="505"><highlight class="comment"></highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>deflateInit2<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/><sp/><sp/>memory,<sp/>Z_STREAM_ERROR<sp/>if<sp/>a<sp/>parameter<sp/>is<sp/>invalid<sp/>(such<sp/>as<sp/>an<sp/>invalid</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/><sp/><sp/>method).<sp/>msg<sp/>is<sp/>set<sp/>to<sp/>null<sp/>if<sp/>there<sp/>is<sp/>no<sp/>error<sp/>message.<sp/><sp/>deflateInit2<sp/>does</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/><sp/><sp/>not<sp/>perform<sp/>any<sp/>compression:<sp/>this<sp/>will<sp/>be<sp/>done<sp/>by<sp/>deflate().</highlight></codeline>
<codeline lineno="510"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deflateSetDictionary<sp/>OF((<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Byte<sp/>*dictionary,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uInt<sp/><sp/>dictLength));</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Initializes<sp/>the<sp/>compression<sp/>dictionary<sp/>from<sp/>the<sp/>given<sp/>byte<sp/>sequence</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/><sp/><sp/>without<sp/>producing<sp/>any<sp/>compressed<sp/>output.<sp/>This<sp/>function<sp/>must<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/><sp/><sp/>immediately<sp/>after<sp/>deflateInit,<sp/>deflateInit2<sp/>or<sp/>deflateReset,<sp/>before<sp/>any</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/><sp/><sp/>call<sp/>of<sp/>deflate.<sp/>The<sp/>compressor<sp/>and<sp/>decompressor<sp/>must<sp/>use<sp/>exactly<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/><sp/><sp/>dictionary<sp/>(see<sp/>inflateSetDictionary).</highlight></codeline>
<codeline lineno="521"><highlight class="comment"></highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>dictionary<sp/>should<sp/>consist<sp/>of<sp/>strings<sp/>(byte<sp/>sequences)<sp/>that<sp/>are<sp/>likely</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/><sp/><sp/>to<sp/>be<sp/>encountered<sp/>later<sp/>in<sp/>the<sp/>data<sp/>to<sp/>be<sp/>compressed,<sp/>with<sp/>the<sp/>most<sp/>commonly</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/><sp/><sp/>used<sp/>strings<sp/>preferably<sp/>put<sp/>towards<sp/>the<sp/>end<sp/>of<sp/>the<sp/>dictionary.<sp/>Using<sp/>a</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/><sp/><sp/>dictionary<sp/>is<sp/>most<sp/>useful<sp/>when<sp/>the<sp/>data<sp/>to<sp/>be<sp/>compressed<sp/>is<sp/>short<sp/>and<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/><sp/><sp/>predicted<sp/>with<sp/>good<sp/>accuracy;<sp/>the<sp/>data<sp/>can<sp/>then<sp/>be<sp/>compressed<sp/>better<sp/>than</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/><sp/><sp/>with<sp/>the<sp/>default<sp/>empty<sp/>dictionary.</highlight></codeline>
<codeline lineno="528"><highlight class="comment"></highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Depending<sp/>on<sp/>the<sp/>size<sp/>of<sp/>the<sp/>compression<sp/>data<sp/>structures<sp/>selected<sp/>by</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/><sp/><sp/>deflateInit<sp/>or<sp/>deflateInit2,<sp/>a<sp/>part<sp/>of<sp/>the<sp/>dictionary<sp/>may<sp/>in<sp/>effect<sp/>be</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/><sp/><sp/>discarded,<sp/>for<sp/>example<sp/>if<sp/>the<sp/>dictionary<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>window<sp/>size<sp/>in</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/><sp/><sp/>deflate<sp/>or<sp/>deflate2.<sp/>Thus<sp/>the<sp/>strings<sp/>most<sp/>likely<sp/>to<sp/>be<sp/>useful<sp/>should<sp/>be</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/><sp/><sp/>put<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>dictionary,<sp/>not<sp/>at<sp/>the<sp/>front.</highlight></codeline>
<codeline lineno="534"><highlight class="comment"></highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Upon<sp/>return<sp/>of<sp/>this<sp/>function,<sp/>strm-&gt;adler<sp/>is<sp/>set<sp/>to<sp/>the<sp/>Adler32<sp/>value</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/><sp/><sp/>of<sp/>the<sp/>dictionary;<sp/>the<sp/>decompressor<sp/>may<sp/>later<sp/>use<sp/>this<sp/>value<sp/>to<sp/>determine</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/><sp/><sp/>which<sp/>dictionary<sp/>has<sp/>been<sp/>used<sp/>by<sp/>the<sp/>compressor.<sp/>(The<sp/>Adler32<sp/>value</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/><sp/><sp/>applies<sp/>to<sp/>the<sp/>whole<sp/>dictionary<sp/>even<sp/>if<sp/>only<sp/>a<sp/>subset<sp/>of<sp/>the<sp/>dictionary<sp/>is</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/><sp/><sp/>actually<sp/>used<sp/>by<sp/>the<sp/>compressor.)</highlight></codeline>
<codeline lineno="540"><highlight class="comment"></highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>deflateSetDictionary<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>a</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/><sp/><sp/>parameter<sp/>is<sp/>invalid<sp/>(such<sp/>as<sp/>NULL<sp/>dictionary)<sp/>or<sp/>the<sp/>stream<sp/>state<sp/>is</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/><sp/><sp/>inconsistent<sp/>(for<sp/>example<sp/>if<sp/>deflate<sp/>has<sp/>already<sp/>been<sp/>called<sp/>for<sp/>this<sp/>stream</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/><sp/><sp/>or<sp/>if<sp/>the<sp/>compression<sp/>method<sp/>is<sp/>bsort).<sp/>deflateSetDictionary<sp/>does<sp/>not</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/><sp/><sp/>perform<sp/>any<sp/>compression:<sp/>this<sp/>will<sp/>be<sp/>done<sp/>by<sp/>deflate().</highlight></codeline>
<codeline lineno="546"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deflateCopy<sp/>OF((<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>dest,</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>source));</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Sets<sp/>the<sp/>destination<sp/>stream<sp/>as<sp/>a<sp/>complete<sp/>copy<sp/>of<sp/>the<sp/>source<sp/>stream.</highlight></codeline>
<codeline lineno="552"><highlight class="comment"></highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>can<sp/>be<sp/>useful<sp/>when<sp/>several<sp/>compression<sp/>strategies<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/><sp/><sp/>tried,<sp/>for<sp/>example<sp/>when<sp/>there<sp/>are<sp/>several<sp/>ways<sp/>of<sp/>pre-processing<sp/>the<sp/>input</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/><sp/><sp/>data<sp/>with<sp/>a<sp/>filter.<sp/>The<sp/>streams<sp/>that<sp/>will<sp/>be<sp/>discarded<sp/>should<sp/>then<sp/>be<sp/>freed</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/><sp/><sp/>by<sp/>calling<sp/>deflateEnd.<sp/><sp/>Note<sp/>that<sp/>deflateCopy<sp/>duplicates<sp/>the<sp/>internal</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/><sp/><sp/>compression<sp/>state<sp/>which<sp/>can<sp/>be<sp/>quite<sp/>large,<sp/>so<sp/>this<sp/>strategy<sp/>is<sp/>slow<sp/>and</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/><sp/><sp/>can<sp/>consume<sp/>lots<sp/>of<sp/>memory.</highlight></codeline>
<codeline lineno="559"><highlight class="comment"></highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>deflateCopy<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/><sp/><sp/>enough<sp/>memory,<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>source<sp/>stream<sp/>state<sp/>was<sp/>inconsistent</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/><sp/><sp/>(such<sp/>as<sp/>zalloc<sp/>being<sp/>NULL).<sp/>msg<sp/>is<sp/>left<sp/>unchanged<sp/>in<sp/>both<sp/>source<sp/>and</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/><sp/><sp/>destination.</highlight></codeline>
<codeline lineno="564"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deflateReset<sp/>OF((<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm));</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>is<sp/>equivalent<sp/>to<sp/>deflateEnd<sp/>followed<sp/>by<sp/>deflateInit,</highlight></codeline>
<codeline lineno="569"><highlight class="comment"><sp/><sp/><sp/>but<sp/>does<sp/>not<sp/>free<sp/>and<sp/>reallocate<sp/>all<sp/>the<sp/>internal<sp/>compression<sp/>state.</highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/><sp/><sp/>The<sp/>stream<sp/>will<sp/>keep<sp/>the<sp/>same<sp/>compression<sp/>level<sp/>and<sp/>any<sp/>other<sp/>attributes</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/><sp/><sp/>that<sp/>may<sp/>have<sp/>been<sp/>set<sp/>by<sp/>deflateInit2.</highlight></codeline>
<codeline lineno="572"><highlight class="comment"></highlight></codeline>
<codeline lineno="573"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>deflateReset<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>source</highlight></codeline>
<codeline lineno="574"><highlight class="comment"><sp/><sp/><sp/>stream<sp/>state<sp/>was<sp/>inconsistent<sp/>(such<sp/>as<sp/>zalloc<sp/>or<sp/>state<sp/>being<sp/>NULL).</highlight></codeline>
<codeline lineno="575"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deflateParams<sp/>OF((<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm,</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strategy));</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Dynamically<sp/>update<sp/>the<sp/>compression<sp/>level<sp/>and<sp/>compression<sp/>strategy.<sp/><sp/>The</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/><sp/><sp/>interpretation<sp/>of<sp/>level<sp/>and<sp/>strategy<sp/>is<sp/>as<sp/>in<sp/>deflateInit2.<sp/><sp/>This<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/><sp/><sp/>used<sp/>to<sp/>switch<sp/>between<sp/>compression<sp/>and<sp/>straight<sp/>copy<sp/>of<sp/>the<sp/>input<sp/>data,<sp/>or</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/><sp/><sp/>to<sp/>switch<sp/>to<sp/>a<sp/>different<sp/>kind<sp/>of<sp/>input<sp/>data<sp/>requiring<sp/>a<sp/>different</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/><sp/><sp/>strategy.<sp/>If<sp/>the<sp/>compression<sp/>level<sp/>is<sp/>changed,<sp/>the<sp/>input<sp/>available<sp/>so<sp/>far</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/><sp/><sp/>is<sp/>compressed<sp/>with<sp/>the<sp/>old<sp/>level<sp/>(and<sp/>may<sp/>be<sp/>flushed);<sp/>the<sp/>new<sp/>level<sp/>will</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/><sp/><sp/>take<sp/>effect<sp/>only<sp/>at<sp/>the<sp/>next<sp/>call<sp/>of<sp/>deflate().</highlight></codeline>
<codeline lineno="588"><highlight class="comment"></highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Before<sp/>the<sp/>call<sp/>of<sp/>deflateParams,<sp/>the<sp/>stream<sp/>state<sp/>must<sp/>be<sp/>set<sp/>as<sp/>for</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/><sp/><sp/>a<sp/>call<sp/>of<sp/>deflate(),<sp/>since<sp/>the<sp/>currently<sp/>available<sp/>input<sp/>may<sp/>have<sp/>to</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/><sp/><sp/>be<sp/>compressed<sp/>and<sp/>flushed.<sp/>In<sp/>particular,<sp/>strm-&gt;avail_out<sp/>must<sp/>be<sp/>non-zero.</highlight></codeline>
<codeline lineno="592"><highlight class="comment"></highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>deflateParams<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>source</highlight></codeline>
<codeline lineno="594"><highlight class="comment"><sp/><sp/><sp/>stream<sp/>state<sp/>was<sp/>inconsistent<sp/>or<sp/>if<sp/>a<sp/>parameter<sp/>was<sp/>invalid,<sp/>Z_BUF_ERROR</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/><sp/><sp/>if<sp/>strm-&gt;avail_out<sp/>was<sp/>zero.</highlight></codeline>
<codeline lineno="596"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="599"><highlight class="comment">int<sp/>inflateInit2<sp/>OF((z_streamp<sp/>strm,</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/><sp/>windowBits));</highlight></codeline>
<codeline lineno="601"><highlight class="comment"></highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>another<sp/>version<sp/>of<sp/>inflateInit<sp/>with<sp/>an<sp/>extra<sp/>parameter.<sp/>The</highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/><sp/><sp/>fields<sp/>next_in,<sp/>avail_in,<sp/>zalloc,<sp/>zfree<sp/>and<sp/>opaque<sp/>must<sp/>be<sp/>initialized</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/><sp/><sp/>before<sp/>by<sp/>the<sp/>caller.</highlight></codeline>
<codeline lineno="605"><highlight class="comment"></highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>windowBits<sp/>parameter<sp/>is<sp/>the<sp/>base<sp/>two<sp/>logarithm<sp/>of<sp/>the<sp/>maximum<sp/>window</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/><sp/><sp/>size<sp/>(the<sp/>size<sp/>of<sp/>the<sp/>history<sp/>buffer).<sp/><sp/>It<sp/>should<sp/>be<sp/>in<sp/>the<sp/>range<sp/>8..15<sp/>for</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/><sp/><sp/>this<sp/>version<sp/>of<sp/>the<sp/>library.<sp/>The<sp/>default<sp/>value<sp/>is<sp/>15<sp/>if<sp/>inflateInit<sp/>is<sp/>used</highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/><sp/><sp/>instead.<sp/>If<sp/>a<sp/>compressed<sp/>stream<sp/>with<sp/>a<sp/>larger<sp/>window<sp/>size<sp/>is<sp/>given<sp/>as</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/><sp/><sp/>input,<sp/>inflate()<sp/>will<sp/>return<sp/>with<sp/>the<sp/>error<sp/>code<sp/>Z_DATA_ERROR<sp/>instead<sp/>of</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/><sp/><sp/>trying<sp/>to<sp/>allocate<sp/>a<sp/>larger<sp/>window.</highlight></codeline>
<codeline lineno="612"><highlight class="comment"></highlight></codeline>
<codeline lineno="613"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>inflateInit2<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough</highlight></codeline>
<codeline lineno="614"><highlight class="comment"><sp/><sp/><sp/>memory,<sp/>Z_STREAM_ERROR<sp/>if<sp/>a<sp/>parameter<sp/>is<sp/>invalid<sp/>(such<sp/>as<sp/>a<sp/>negative</highlight></codeline>
<codeline lineno="615"><highlight class="comment"><sp/><sp/><sp/>memLevel).<sp/>msg<sp/>is<sp/>set<sp/>to<sp/>null<sp/>if<sp/>there<sp/>is<sp/>no<sp/>error<sp/>message.<sp/><sp/>inflateInit2</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/><sp/><sp/>does<sp/>not<sp/>perform<sp/>any<sp/>decompression<sp/>apart<sp/>from<sp/>reading<sp/>the<sp/>zlib<sp/>header<sp/>if</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/><sp/><sp/>present:<sp/>this<sp/>will<sp/>be<sp/>done<sp/>by<sp/>inflate().<sp/>(So<sp/>next_in<sp/>and<sp/>avail_in<sp/>may<sp/>be</highlight></codeline>
<codeline lineno="618"><highlight class="comment"><sp/><sp/><sp/>modified,<sp/>but<sp/>next_out<sp/>and<sp/>avail_out<sp/>are<sp/>unchanged.)</highlight></codeline>
<codeline lineno="619"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflateSetDictionary<sp/>OF((<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm,</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Byte<sp/>*dictionary,</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uInt<sp/><sp/>dictLength));</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Initializes<sp/>the<sp/>decompression<sp/>dictionary<sp/>from<sp/>the<sp/>given<sp/>uncompressed<sp/>byte</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/><sp/><sp/>sequence.<sp/>This<sp/>function<sp/>must<sp/>be<sp/>called<sp/>immediately<sp/>after<sp/>a<sp/>call<sp/>of<sp/>inflate</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/><sp/><sp/>if<sp/>this<sp/>call<sp/>returned<sp/>Z_NEED_DICT.<sp/>The<sp/>dictionary<sp/>chosen<sp/>by<sp/>the<sp/>compressor</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/><sp/><sp/>can<sp/>be<sp/>determined<sp/>from<sp/>the<sp/>Adler32<sp/>value<sp/>returned<sp/>by<sp/>this<sp/>call<sp/>of</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/><sp/><sp/>inflate.<sp/>The<sp/>compressor<sp/>and<sp/>decompressor<sp/>must<sp/>use<sp/>exactly<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/><sp/><sp/>dictionary<sp/>(see<sp/>deflateSetDictionary).</highlight></codeline>
<codeline lineno="631"><highlight class="comment"></highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>inflateSetDictionary<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_STREAM_ERROR<sp/>if<sp/>a</highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/><sp/><sp/>parameter<sp/>is<sp/>invalid<sp/>(such<sp/>as<sp/>NULL<sp/>dictionary)<sp/>or<sp/>the<sp/>stream<sp/>state<sp/>is</highlight></codeline>
<codeline lineno="634"><highlight class="comment"><sp/><sp/><sp/>inconsistent,<sp/>Z_DATA_ERROR<sp/>if<sp/>the<sp/>given<sp/>dictionary<sp/>doesn&apos;t<sp/>match<sp/>the</highlight></codeline>
<codeline lineno="635"><highlight class="comment"><sp/><sp/><sp/>expected<sp/>one<sp/>(incorrect<sp/>Adler32<sp/>value).<sp/>inflateSetDictionary<sp/>does<sp/>not</highlight></codeline>
<codeline lineno="636"><highlight class="comment"><sp/><sp/><sp/>perform<sp/>any<sp/>decompression:<sp/>this<sp/>will<sp/>be<sp/>done<sp/>by<sp/>subsequent<sp/>calls<sp/>of</highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/><sp/><sp/>inflate().</highlight></codeline>
<codeline lineno="638"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflateSync<sp/>OF((<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm));</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/><sp/><sp/><sp/>Skips<sp/>invalid<sp/>compressed<sp/>data<sp/>until<sp/>a<sp/>full<sp/>flush<sp/>point<sp/>(see<sp/>above<sp/>the</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/><sp/>description<sp/>of<sp/>deflate<sp/>with<sp/>Z_FULL_FLUSH)<sp/>can<sp/>be<sp/>found,<sp/>or<sp/>until<sp/>all</highlight></codeline>
<codeline lineno="644"><highlight class="comment"><sp/><sp/>available<sp/>input<sp/>is<sp/>skipped.<sp/>No<sp/>output<sp/>is<sp/>provided.</highlight></codeline>
<codeline lineno="645"><highlight class="comment"></highlight></codeline>
<codeline lineno="646"><highlight class="comment"><sp/><sp/><sp/><sp/>inflateSync<sp/>returns<sp/>Z_OK<sp/>if<sp/>a<sp/>full<sp/>flush<sp/>point<sp/>has<sp/>been<sp/>found,<sp/>Z_BUF_ERROR</highlight></codeline>
<codeline lineno="647"><highlight class="comment"><sp/><sp/>if<sp/>no<sp/>more<sp/>input<sp/>was<sp/>provided,<sp/>Z_DATA_ERROR<sp/>if<sp/>no<sp/>flush<sp/>point<sp/>has<sp/>been<sp/>found,</highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/><sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>stream<sp/>structure<sp/>was<sp/>inconsistent.<sp/>In<sp/>the<sp/>success</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/><sp/>case,<sp/>the<sp/>application<sp/>may<sp/>save<sp/>the<sp/>current<sp/>current<sp/>value<sp/>of<sp/>total_in<sp/>which</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/><sp/>indicates<sp/>where<sp/>valid<sp/>compressed<sp/>data<sp/>was<sp/>found.<sp/>In<sp/>the<sp/>error<sp/>case,<sp/>the</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/><sp/>application<sp/>may<sp/>repeatedly<sp/>call<sp/>inflateSync,<sp/>providing<sp/>more<sp/>input<sp/>each<sp/>time,</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/><sp/>until<sp/>success<sp/>or<sp/>end<sp/>of<sp/>the<sp/>input<sp/>data.</highlight></codeline>
<codeline lineno="653"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflateReset<sp/>OF((<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm));</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="657"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>is<sp/>equivalent<sp/>to<sp/>inflateEnd<sp/>followed<sp/>by<sp/>inflateInit,</highlight></codeline>
<codeline lineno="658"><highlight class="comment"><sp/><sp/><sp/>but<sp/>does<sp/>not<sp/>free<sp/>and<sp/>reallocate<sp/>all<sp/>the<sp/>internal<sp/>decompression<sp/>state.</highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/><sp/><sp/>The<sp/>stream<sp/>will<sp/>keep<sp/>attributes<sp/>that<sp/>may<sp/>have<sp/>been<sp/>set<sp/>by<sp/>inflateInit2.</highlight></codeline>
<codeline lineno="660"><highlight class="comment"></highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>inflateReset<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>source</highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/><sp/><sp/>stream<sp/>state<sp/>was<sp/>inconsistent<sp/>(such<sp/>as<sp/>zalloc<sp/>or<sp/>state<sp/>being<sp/>NULL).</highlight></codeline>
<codeline lineno="663"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>utility<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>following<sp/>utility<sp/>functions<sp/>are<sp/>implemented<sp/>on<sp/>top<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/><sp/><sp/>basic<sp/>stream-oriented<sp/>functions.<sp/>To<sp/>simplify<sp/>the<sp/>interface,<sp/>some</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/><sp/><sp/>default<sp/>options<sp/>are<sp/>assumed<sp/>(compression<sp/>level<sp/>and<sp/>memory<sp/>usage,</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/><sp/><sp/>standard<sp/>memory<sp/>allocation<sp/>functions).<sp/>The<sp/>source<sp/>code<sp/>of<sp/>these</highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/><sp/><sp/>utility<sp/>functions<sp/>can<sp/>easily<sp/>be<sp/>modified<sp/>if<sp/>you<sp/>need<sp/>special<sp/>options.</highlight></codeline>
<codeline lineno="674"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compress<sp/>OF((Byte<sp/>*dest,<sp/><sp/><sp/>uLong<sp/>*destLen,</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Byte<sp/>*source,<sp/>uLong<sp/>sourceLen));</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Compresses<sp/>the<sp/>source<sp/>buffer<sp/>into<sp/>the<sp/>destination<sp/>buffer.<sp/><sp/>sourceLen<sp/>is</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/><sp/><sp/>the<sp/>byte<sp/>length<sp/>of<sp/>the<sp/>source<sp/>buffer.<sp/>Upon<sp/>entry,<sp/>destLen<sp/>is<sp/>the<sp/>total</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/><sp/><sp/>size<sp/>of<sp/>the<sp/>destination<sp/>buffer,<sp/>which<sp/>must<sp/>be<sp/>at<sp/>least<sp/>0.1%<sp/>larger<sp/>than</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/><sp/><sp/>sourceLen<sp/>plus<sp/>12<sp/>bytes.<sp/>Upon<sp/>exit,<sp/>destLen<sp/>is<sp/>the<sp/>actual<sp/>size<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="683"><highlight class="comment"><sp/><sp/><sp/>compressed<sp/>buffer.</highlight></codeline>
<codeline lineno="684"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>can<sp/>be<sp/>used<sp/>to<sp/>compress<sp/>a<sp/>whole<sp/>file<sp/>at<sp/>once<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/><sp/><sp/>input<sp/>file<sp/>is<sp/>mmap&apos;ed.</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>compress<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/><sp/><sp/>enough<sp/>memory,<sp/>Z_BUF_ERROR<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough<sp/>room<sp/>in<sp/>the<sp/>output</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/><sp/><sp/>buffer.</highlight></codeline>
<codeline lineno="689"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compress2<sp/>OF((Byte<sp/>*dest,<sp/><sp/><sp/>uLong<sp/>*destLen,</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Byte<sp/>*source,<sp/>uLong<sp/>sourceLen,</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level));</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Compresses<sp/>the<sp/>source<sp/>buffer<sp/>into<sp/>the<sp/>destination<sp/>buffer.<sp/>The<sp/>level</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/><sp/><sp/>parameter<sp/>has<sp/>the<sp/>same<sp/>meaning<sp/>as<sp/>in<sp/>deflateInit.<sp/><sp/>sourceLen<sp/>is<sp/>the<sp/>byte</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/><sp/><sp/>length<sp/>of<sp/>the<sp/>source<sp/>buffer.<sp/>Upon<sp/>entry,<sp/>destLen<sp/>is<sp/>the<sp/>total<sp/>size<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/><sp/><sp/>destination<sp/>buffer,<sp/>which<sp/>must<sp/>be<sp/>at<sp/>least<sp/>0.1%<sp/>larger<sp/>than<sp/>sourceLen<sp/>plus</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/><sp/><sp/>12<sp/>bytes.<sp/>Upon<sp/>exit,<sp/>destLen<sp/>is<sp/>the<sp/>actual<sp/>size<sp/>of<sp/>the<sp/>compressed<sp/>buffer.</highlight></codeline>
<codeline lineno="700"><highlight class="comment"></highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>compress2<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/><sp/><sp/>memory,<sp/>Z_BUF_ERROR<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough<sp/>room<sp/>in<sp/>the<sp/>output<sp/>buffer,</highlight></codeline>
<codeline lineno="703"><highlight class="comment"><sp/><sp/><sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>level<sp/>parameter<sp/>is<sp/>invalid.</highlight></codeline>
<codeline lineno="704"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uncompress<sp/>OF((Byte<sp/>*dest,<sp/><sp/><sp/>uLong<sp/>*destLen,</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Byte<sp/>*source,<sp/>uLong<sp/>sourceLen));</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Decompresses<sp/>the<sp/>source<sp/>buffer<sp/>into<sp/>the<sp/>destination<sp/>buffer.<sp/><sp/>sourceLen<sp/>is</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/><sp/><sp/>the<sp/>byte<sp/>length<sp/>of<sp/>the<sp/>source<sp/>buffer.<sp/>Upon<sp/>entry,<sp/>destLen<sp/>is<sp/>the<sp/>total</highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/><sp/><sp/>size<sp/>of<sp/>the<sp/>destination<sp/>buffer,<sp/>which<sp/>must<sp/>be<sp/>large<sp/>enough<sp/>to<sp/>hold<sp/>the</highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/><sp/><sp/>entire<sp/>uncompressed<sp/>data.<sp/>(The<sp/>size<sp/>of<sp/>the<sp/>uncompressed<sp/>data<sp/>must<sp/>have</highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/><sp/><sp/>been<sp/>saved<sp/>previously<sp/>by<sp/>the<sp/>compressor<sp/>and<sp/>transmitted<sp/>to<sp/>the<sp/>decompressor</highlight></codeline>
<codeline lineno="714"><highlight class="comment"><sp/><sp/><sp/>by<sp/>some<sp/>mechanism<sp/>outside<sp/>the<sp/>scope<sp/>of<sp/>this<sp/>compression<sp/>library.)</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/><sp/><sp/>Upon<sp/>exit,<sp/>destLen<sp/>is<sp/>the<sp/>actual<sp/>size<sp/>of<sp/>the<sp/>compressed<sp/>buffer.</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>can<sp/>be<sp/>used<sp/>to<sp/>decompress<sp/>a<sp/>whole<sp/>file<sp/>at<sp/>once<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/><sp/><sp/>input<sp/>file<sp/>is<sp/>mmap&apos;ed.</highlight></codeline>
<codeline lineno="718"><highlight class="comment"></highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>uncompress<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>Z_MEM_ERROR<sp/>if<sp/>there<sp/>was<sp/>not</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/><sp/><sp/>enough<sp/>memory,<sp/>Z_BUF_ERROR<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough<sp/>room<sp/>in<sp/>the<sp/>output</highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/><sp/><sp/>buffer,<sp/>or<sp/>Z_DATA_ERROR<sp/>if<sp/>the<sp/>input<sp/>data<sp/>was<sp/>corrupted.</highlight></codeline>
<codeline lineno="722"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>voidp<sp/>gzFile;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal">gzFile<sp/>gzopen<sp/><sp/>OF((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode));</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Opens<sp/>a<sp/>gzip<sp/>(.gz)<sp/>file<sp/>for<sp/>reading<sp/>or<sp/>writing.<sp/>The<sp/>mode<sp/>parameter</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/><sp/><sp/>is<sp/>as<sp/>in<sp/>fopen<sp/>(&quot;rb&quot;<sp/>or<sp/>&quot;wb&quot;)<sp/>but<sp/>can<sp/>also<sp/>include<sp/>a<sp/>compression<sp/>level</highlight></codeline>
<codeline lineno="731"><highlight class="comment"><sp/><sp/><sp/>(&quot;wb9&quot;)<sp/>or<sp/>a<sp/>strategy:<sp/>&apos;f&apos;<sp/>for<sp/>filtered<sp/>data<sp/>as<sp/>in<sp/>&quot;wb6f&quot;,<sp/>&apos;h&apos;<sp/>for</highlight></codeline>
<codeline lineno="732"><highlight class="comment"><sp/><sp/><sp/>Huffman<sp/>only<sp/>compression<sp/>as<sp/>in<sp/>&quot;wb1h&quot;.<sp/>(See<sp/>the<sp/>description</highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/><sp/><sp/>of<sp/>deflateInit2<sp/>for<sp/>more<sp/>information<sp/>about<sp/>the<sp/>strategy<sp/>parameter.)</highlight></codeline>
<codeline lineno="734"><highlight class="comment"></highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzopen<sp/>can<sp/>be<sp/>used<sp/>to<sp/>read<sp/>a<sp/>file<sp/>which<sp/>is<sp/>not<sp/>in<sp/>gzip<sp/>format;<sp/>in<sp/>this</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/><sp/><sp/>case<sp/>gzread<sp/>will<sp/>directly<sp/>read<sp/>from<sp/>the<sp/>file<sp/>without<sp/>decompression.</highlight></codeline>
<codeline lineno="737"><highlight class="comment"></highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzopen<sp/>returns<sp/>NULL<sp/>if<sp/>the<sp/>file<sp/>could<sp/>not<sp/>be<sp/>opened<sp/>or<sp/>if<sp/>there<sp/>was</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/><sp/><sp/>insufficient<sp/>memory<sp/>to<sp/>allocate<sp/>the<sp/>(de)compression<sp/>state;<sp/>errno</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/><sp/><sp/>can<sp/>be<sp/>checked<sp/>to<sp/>distinguish<sp/>the<sp/>two<sp/>cases<sp/>(if<sp/>errno<sp/>is<sp/>zero,<sp/>the</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/><sp/><sp/>zlib<sp/>error<sp/>is<sp/>Z_MEM_ERROR).<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal">gzFile<sp/>gzdopen<sp/><sp/>OF((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode));</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzdopen()<sp/>associates<sp/>a<sp/>gzFile<sp/>with<sp/>the<sp/>file<sp/>descriptor<sp/>fd.<sp/><sp/>File</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/><sp/><sp/>descriptors<sp/>are<sp/>obtained<sp/>from<sp/>calls<sp/>like<sp/>open,<sp/>dup,<sp/>creat,<sp/>pipe<sp/>or</highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/><sp/><sp/>fileno<sp/>(in<sp/>the<sp/>file<sp/>has<sp/>been<sp/>previously<sp/>opened<sp/>with<sp/>fopen).</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/><sp/><sp/>The<sp/>mode<sp/>parameter<sp/>is<sp/>as<sp/>in<sp/>gzopen.</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>next<sp/>call<sp/>of<sp/>gzclose<sp/>on<sp/>the<sp/>returned<sp/>gzFile<sp/>will<sp/>also<sp/>close<sp/>the</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/><sp/><sp/>file<sp/>descriptor<sp/>fd,<sp/>just<sp/>like<sp/>fclose(fdopen(fd),<sp/>mode)<sp/>closes<sp/>the<sp/>file</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/><sp/><sp/>descriptor<sp/>fd.<sp/>If<sp/>you<sp/>want<sp/>to<sp/>keep<sp/>fd<sp/>open,<sp/>use<sp/>gzdopen(dup(fd),<sp/>mode).</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzdopen<sp/>returns<sp/>NULL<sp/>if<sp/>there<sp/>was<sp/>insufficient<sp/>memory<sp/>to<sp/>allocate</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/><sp/><sp/>the<sp/>(de)compression<sp/>state.</highlight></codeline>
<codeline lineno="754"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gzsetparams<sp/>OF((gzFile<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strategy));</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Dynamically<sp/>update<sp/>the<sp/>compression<sp/>level<sp/>or<sp/>strategy.<sp/>See<sp/>the<sp/>description</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/><sp/><sp/>of<sp/>deflateInit2<sp/>for<sp/>the<sp/>meaning<sp/>of<sp/>these<sp/>parameters.</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzsetparams<sp/>returns<sp/>Z_OK<sp/>if<sp/>success,<sp/>or<sp/>Z_STREAM_ERROR<sp/>if<sp/>the<sp/>file<sp/>was<sp/>not</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/><sp/><sp/>opened<sp/>for<sp/>writing.</highlight></codeline>
<codeline lineno="762"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>gzread<sp/><sp/>OF((gzFile<sp/>file,<sp/>voidp<sp/>buf,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>len));</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Reads<sp/>the<sp/>given<sp/>number<sp/>of<sp/>uncompressed<sp/>bytes<sp/>from<sp/>the<sp/>compressed<sp/>file.</highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/><sp/><sp/>If<sp/>the<sp/>input<sp/>file<sp/>was<sp/>not<sp/>in<sp/>gzip<sp/>format,<sp/>gzread<sp/>copies<sp/>the<sp/>given<sp/>number</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/><sp/><sp/>of<sp/>bytes<sp/>into<sp/>the<sp/>buffer.</highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzread<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>uncompressed<sp/>bytes<sp/>actually<sp/>read<sp/>(0<sp/>for</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/><sp/><sp/>end<sp/>of<sp/>file,<sp/>-1<sp/>for<sp/>error).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>gzwrite<sp/>OF((gzFile<sp/>file,<sp/></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>voidp<sp/>buf,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>len));</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="775"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Writes<sp/>the<sp/>given<sp/>number<sp/>of<sp/>uncompressed<sp/>bytes<sp/>into<sp/>the<sp/>compressed<sp/>file.</highlight></codeline>
<codeline lineno="776"><highlight class="comment"><sp/><sp/><sp/>gzwrite<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>uncompressed<sp/>bytes<sp/>actually<sp/>written</highlight></codeline>
<codeline lineno="777"><highlight class="comment"><sp/><sp/><sp/>(0<sp/>in<sp/>case<sp/>of<sp/>error).</highlight></codeline>
<codeline lineno="778"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>gzprintf<sp/>OF((gzFile<sp/>file,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...));</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Converts,<sp/>formats,<sp/>and<sp/>writes<sp/>the<sp/>args<sp/>to<sp/>the<sp/>compressed<sp/>file<sp/>under</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/><sp/><sp/>control<sp/>of<sp/>the<sp/>format<sp/>string,<sp/>as<sp/>in<sp/>fprintf.<sp/>gzprintf<sp/>returns<sp/>the<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/><sp/><sp/>uncompressed<sp/>bytes<sp/>actually<sp/>written<sp/>(0<sp/>in<sp/>case<sp/>of<sp/>error).</highlight></codeline>
<codeline lineno="785"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gzputs<sp/>OF((gzFile<sp/>file,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s));</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Writes<sp/>the<sp/>given<sp/>null-terminated<sp/>string<sp/>to<sp/>the<sp/>compressed<sp/>file,<sp/>excluding</highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/><sp/><sp/>the<sp/>terminating<sp/>null<sp/>character.</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gzputs<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>characters<sp/>written,<sp/>or<sp/>-1<sp/>in<sp/>case<sp/>of<sp/>error.</highlight></codeline>
<codeline lineno="792"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>gzgets<sp/>OF((gzFile<sp/>file,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len));</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Reads<sp/>bytes<sp/>from<sp/>the<sp/>compressed<sp/>file<sp/>until<sp/>len-1<sp/>characters<sp/>are<sp/>read,<sp/>or</highlight></codeline>
<codeline lineno="797"><highlight class="comment"><sp/><sp/><sp/>a<sp/>newline<sp/>character<sp/>is<sp/>read<sp/>and<sp/>transferred<sp/>to<sp/>buf,<sp/>or<sp/>an<sp/>end-of-file</highlight></codeline>
<codeline lineno="798"><highlight class="comment"><sp/><sp/><sp/>condition<sp/>is<sp/>encountered.<sp/><sp/>The<sp/>string<sp/>is<sp/>then<sp/>terminated<sp/>with<sp/>a<sp/>null</highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/><sp/><sp/>character.</highlight></codeline>
<codeline lineno="800"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gzgets<sp/>returns<sp/>buf,<sp/>or<sp/>Z_NULL<sp/>in<sp/>case<sp/>of<sp/>error.</highlight></codeline>
<codeline lineno="801"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>gzputc<sp/>OF((gzFile<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c));</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Writes<sp/>c,<sp/>converted<sp/>to<sp/>an<sp/>unsigned<sp/>char,<sp/>into<sp/>the<sp/>compressed<sp/>file.</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/><sp/><sp/>gzputc<sp/>returns<sp/>the<sp/>value<sp/>that<sp/>was<sp/>written,<sp/>or<sp/>-1<sp/>in<sp/>case<sp/>of<sp/>error.</highlight></codeline>
<codeline lineno="807"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>gzgetc<sp/>OF((gzFile<sp/>file));</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="811"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Reads<sp/>one<sp/>byte<sp/>from<sp/>the<sp/>compressed<sp/>file.<sp/>gzgetc<sp/>returns<sp/>this<sp/>byte</highlight></codeline>
<codeline lineno="812"><highlight class="comment"><sp/><sp/><sp/>or<sp/>-1<sp/>in<sp/>case<sp/>of<sp/>end<sp/>of<sp/>file<sp/>or<sp/>error.</highlight></codeline>
<codeline lineno="813"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>gzflush<sp/>OF((gzFile<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush));</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Flushes<sp/>all<sp/>pending<sp/>output<sp/>into<sp/>the<sp/>compressed<sp/>file.<sp/>The<sp/>parameter</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/><sp/><sp/>flush<sp/>is<sp/>as<sp/>in<sp/>the<sp/>deflate()<sp/>function.<sp/>The<sp/>return<sp/>value<sp/>is<sp/>the<sp/>zlib</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/><sp/><sp/>error<sp/>number<sp/>(see<sp/>function<sp/>gzerror<sp/>below).<sp/>gzflush<sp/>returns<sp/>Z_OK<sp/>if</highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/><sp/><sp/>the<sp/>flush<sp/>parameter<sp/>is<sp/>Z_FINISH<sp/>and<sp/>all<sp/>output<sp/>could<sp/>be<sp/>flushed.</highlight></codeline>
<codeline lineno="821"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>gzflush<sp/>should<sp/>be<sp/>called<sp/>only<sp/>when<sp/>strictly<sp/>necessary<sp/>because<sp/>it<sp/>can</highlight></codeline>
<codeline lineno="822"><highlight class="comment"><sp/><sp/><sp/>degrade<sp/>compression.</highlight></codeline>
<codeline lineno="823"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>gzseek<sp/>OF((gzFile<sp/>file,</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>whence));</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Sets<sp/>the<sp/>starting<sp/>position<sp/>for<sp/>the<sp/>next<sp/>gzread<sp/>or<sp/>gzwrite<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/><sp/><sp/>given<sp/>compressed<sp/>file.<sp/>The<sp/>offset<sp/>represents<sp/>a<sp/>number<sp/>of<sp/>bytes<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/><sp/><sp/>uncompressed<sp/>data<sp/>stream.<sp/>The<sp/>whence<sp/>parameter<sp/>is<sp/>defined<sp/>as<sp/>in<sp/>lseek(2);</highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/><sp/><sp/>the<sp/>value<sp/>SEEK_END<sp/>is<sp/>not<sp/>supported.</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>file<sp/>is<sp/>opened<sp/>for<sp/>reading,<sp/>this<sp/>function<sp/>is<sp/>emulated<sp/>but<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/><sp/><sp/>extremely<sp/>slow.<sp/>If<sp/>the<sp/>file<sp/>is<sp/>opened<sp/>for<sp/>writing,<sp/>only<sp/>forward<sp/>seeks<sp/>are</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/><sp/><sp/>supported;<sp/>gzseek<sp/>then<sp/>compresses<sp/>a<sp/>sequence<sp/>of<sp/>zeroes<sp/>up<sp/>to<sp/>the<sp/>new</highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/><sp/><sp/>starting<sp/>position.</highlight></codeline>
<codeline lineno="836"><highlight class="comment"></highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gzseek<sp/>returns<sp/>the<sp/>resulting<sp/>offset<sp/>location<sp/>as<sp/>measured<sp/>in<sp/>bytes<sp/>from</highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/><sp/><sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>uncompressed<sp/>stream,<sp/>or<sp/>-1<sp/>in<sp/>case<sp/>of<sp/>error,<sp/>in</highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/><sp/><sp/>particular<sp/>if<sp/>the<sp/>file<sp/>is<sp/>opened<sp/>for<sp/>writing<sp/>and<sp/>the<sp/>new<sp/>starting<sp/>position</highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/><sp/><sp/>would<sp/>be<sp/>before<sp/>the<sp/>current<sp/>position.</highlight></codeline>
<codeline lineno="841"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>gzrewind<sp/>OF((gzFile<sp/>file));</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="845"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Rewinds<sp/>the<sp/>given<sp/>file.<sp/>This<sp/>function<sp/>is<sp/>supported<sp/>only<sp/>for<sp/>reading.</highlight></codeline>
<codeline lineno="846"><highlight class="comment"></highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/><sp/><sp/>gzrewind(file)<sp/>is<sp/>equivalent<sp/>to<sp/>(int)gzseek(file,<sp/>0L,<sp/>SEEK_SET)</highlight></codeline>
<codeline lineno="848"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>gztell<sp/>OF((gzFile<sp/>file));</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="852"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>starting<sp/>position<sp/>for<sp/>the<sp/>next<sp/>gzread<sp/>or<sp/>gzwrite<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="853"><highlight class="comment"><sp/><sp/><sp/>given<sp/>compressed<sp/>file.<sp/>This<sp/>position<sp/>represents<sp/>a<sp/>number<sp/>of<sp/>bytes<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/><sp/><sp/>uncompressed<sp/>data<sp/>stream.</highlight></codeline>
<codeline lineno="855"><highlight class="comment"></highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/><sp/><sp/>gztell(file)<sp/>is<sp/>equivalent<sp/>to<sp/>gzseek(file,<sp/>0L,<sp/>SEEK_CUR)</highlight></codeline>
<codeline lineno="857"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gzeof<sp/>OF((gzFile<sp/>file));</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>1<sp/>when<sp/>EOF<sp/>has<sp/>previously<sp/>been<sp/>detected<sp/>reading<sp/>the<sp/>given</highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/><sp/><sp/>input<sp/>stream,<sp/>otherwise<sp/>zero.</highlight></codeline>
<codeline lineno="863"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>gzclose<sp/>OF((gzFile<sp/>file));</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="867"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Flushes<sp/>all<sp/>pending<sp/>output<sp/>if<sp/>necessary,<sp/>closes<sp/>the<sp/>compressed<sp/>file</highlight></codeline>
<codeline lineno="868"><highlight class="comment"><sp/><sp/><sp/>and<sp/>deallocates<sp/>all<sp/>the<sp/>(de)compression<sp/>state.<sp/>The<sp/>return<sp/>value<sp/>is<sp/>the<sp/>zlib</highlight></codeline>
<codeline lineno="869"><highlight class="comment"><sp/><sp/><sp/>error<sp/>number<sp/>(see<sp/>function<sp/>gzerror<sp/>below).</highlight></codeline>
<codeline lineno="870"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>gzerror<sp/>OF((gzFile<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*errnum));</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>error<sp/>message<sp/>for<sp/>the<sp/>last<sp/>error<sp/>which<sp/>occurred<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="875"><highlight class="comment"><sp/><sp/><sp/>given<sp/>compressed<sp/>file.<sp/>errnum<sp/>is<sp/>set<sp/>to<sp/>zlib<sp/>error<sp/>number.<sp/>If<sp/>an</highlight></codeline>
<codeline lineno="876"><highlight class="comment"><sp/><sp/><sp/>error<sp/>occurred<sp/>in<sp/>the<sp/>file<sp/>system<sp/>and<sp/>not<sp/>in<sp/>the<sp/>compression<sp/>library,</highlight></codeline>
<codeline lineno="877"><highlight class="comment"><sp/><sp/><sp/>errnum<sp/>is<sp/>set<sp/>to<sp/>Z_ERRNO<sp/>and<sp/>the<sp/>application<sp/>may<sp/>consult<sp/>errno</highlight></codeline>
<codeline lineno="878"><highlight class="comment"><sp/><sp/><sp/>to<sp/>get<sp/>the<sp/>exact<sp/>error<sp/>code.</highlight></codeline>
<codeline lineno="879"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>checksum<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="884"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>These<sp/>functions<sp/>are<sp/>not<sp/>related<sp/>to<sp/>compression<sp/>but<sp/>are<sp/>exported</highlight></codeline>
<codeline lineno="885"><highlight class="comment"><sp/><sp/><sp/>anyway<sp/>because<sp/>they<sp/>might<sp/>be<sp/>useful<sp/>in<sp/>applications<sp/>using<sp/>the</highlight></codeline>
<codeline lineno="886"><highlight class="comment"><sp/><sp/><sp/>compression<sp/>library.</highlight></codeline>
<codeline lineno="887"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal">uLong<sp/>adler32<sp/>OF((uLong<sp/>adler,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Byte<sp/>*buf,<sp/>uInt<sp/>len));</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="892"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Update<sp/>a<sp/>running<sp/>Adler-32<sp/>checksum<sp/>with<sp/>the<sp/>bytes<sp/>buf[0..len-1]<sp/>and</highlight></codeline>
<codeline lineno="893"><highlight class="comment"><sp/><sp/><sp/>return<sp/>the<sp/>updated<sp/>checksum.<sp/>If<sp/>buf<sp/>is<sp/>NULL,<sp/>this<sp/>function<sp/>returns</highlight></codeline>
<codeline lineno="894"><highlight class="comment"><sp/><sp/><sp/>the<sp/>required<sp/>initial<sp/>value<sp/>for<sp/>the<sp/>checksum.</highlight></codeline>
<codeline lineno="895"><highlight class="comment"><sp/><sp/><sp/>An<sp/>Adler-32<sp/>checksum<sp/>is<sp/>almost<sp/>as<sp/>reliable<sp/>as<sp/>a<sp/>CRC32<sp/>but<sp/>can<sp/>be<sp/>computed</highlight></codeline>
<codeline lineno="896"><highlight class="comment"><sp/><sp/><sp/>much<sp/>faster.<sp/>Usage<sp/>example:</highlight></codeline>
<codeline lineno="897"><highlight class="comment"></highlight></codeline>
<codeline lineno="898"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>uLong<sp/>adler<sp/>=<sp/>adler32(0L,<sp/>Z_NULL,<sp/>0);</highlight></codeline>
<codeline lineno="899"><highlight class="comment"></highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>while<sp/>(read_buffer(buffer,<sp/>length)<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adler<sp/>=<sp/>adler32(adler,<sp/>buffer,<sp/>length);</highlight></codeline>
<codeline lineno="902"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if<sp/>(adler<sp/>!=<sp/>original_adler)<sp/>error();</highlight></codeline>
<codeline lineno="904"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal">uLong<sp/>crc32<sp/><sp/><sp/>OF((uLong<sp/>crc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Byte<sp/>*buf,<sp/>uInt<sp/>len));</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="908"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Update<sp/>a<sp/>running<sp/>crc<sp/>with<sp/>the<sp/>bytes<sp/>buf[0..len-1]<sp/>and<sp/>return<sp/>the<sp/>updated</highlight></codeline>
<codeline lineno="909"><highlight class="comment"><sp/><sp/><sp/>crc.<sp/>If<sp/>buf<sp/>is<sp/>NULL,<sp/>this<sp/>function<sp/>returns<sp/>the<sp/>required<sp/>initial<sp/>value</highlight></codeline>
<codeline lineno="910"><highlight class="comment"><sp/><sp/><sp/>for<sp/>the<sp/>crc.<sp/>Pre-<sp/>and<sp/>post-conditioning<sp/>(one&apos;s<sp/>complement)<sp/>is<sp/>performed</highlight></codeline>
<codeline lineno="911"><highlight class="comment"><sp/><sp/><sp/>within<sp/>this<sp/>function<sp/>so<sp/>it<sp/>shouldn&apos;t<sp/>be<sp/>done<sp/>by<sp/>the<sp/>application.</highlight></codeline>
<codeline lineno="912"><highlight class="comment"><sp/><sp/><sp/>Usage<sp/>example:</highlight></codeline>
<codeline lineno="913"><highlight class="comment"></highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>uLong<sp/>crc<sp/>=<sp/>crc32(0L,<sp/>Z_NULL,<sp/>0);</highlight></codeline>
<codeline lineno="915"><highlight class="comment"></highlight></codeline>
<codeline lineno="916"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>while<sp/>(read_buffer(buffer,<sp/>length)<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>crc32(crc,<sp/>buffer,<sp/>length);</highlight></codeline>
<codeline lineno="918"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if<sp/>(crc<sp/>!=<sp/>original_crc)<sp/>error();</highlight></codeline>
<codeline lineno="920"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>various<sp/>hacks,<sp/>don&apos;t<sp/>look<sp/>:)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>deflateInit<sp/>and<sp/>inflateInit<sp/>are<sp/>macros<sp/>to<sp/>allow<sp/>checking<sp/>the<sp/>zlib<sp/>version</highlight></codeline>
<codeline lineno="926"><highlight class="comment"><sp/>*<sp/>and<sp/>the<sp/>compiler&apos;s<sp/>view<sp/>of<sp/>z_stream:</highlight></codeline>
<codeline lineno="927"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deflateInit_<sp/>OF((<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*version,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_size));</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflateInit_<sp/>OF((<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm,</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*version,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_size));</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deflateInit2_<sp/>OF((<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>level,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>method,</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>windowBits,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>memLevel,</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strategy,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*version,</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_size));</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflateInit2_<sp/>OF((<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>strm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>windowBits,</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*version,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_size));</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>deflateInit(strm,<sp/>level)<sp/>\</highlight></codeline>
<codeline lineno="939"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deflateInit_((strm),<sp/>(level),<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZLIB_VERSION,<sp/>sizeof(z_stream))</highlight></codeline>
<codeline lineno="940"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>inflateInit(strm)<sp/>\</highlight></codeline>
<codeline lineno="941"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inflateInit_((strm),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZLIB_VERSION,<sp/>sizeof(z_stream))</highlight></codeline>
<codeline lineno="942"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>deflateInit2(strm,<sp/>level,<sp/>method,<sp/>windowBits,<sp/>memLevel,<sp/>strategy)<sp/>\</highlight></codeline>
<codeline lineno="943"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deflateInit2_((strm),(level),(method),(windowBits),(memLevel),\</highlight></codeline>
<codeline lineno="944"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(strategy),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZLIB_VERSION,<sp/>sizeof(z_stream))</highlight></codeline>
<codeline lineno="945"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>inflateInit2(strm,<sp/>windowBits)<sp/>\</highlight></codeline>
<codeline lineno="946"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inflateInit2_((strm),<sp/>(windowBits),<sp/>ZLIB_VERSION,<sp/>sizeof(z_stream))</highlight></codeline>
<codeline lineno="947"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/>*<sp/>zError<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OF((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err));</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inflateSyncPoint<sp/>OF((<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>z));</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uLong<sp/>*<sp/>get_crc_table<sp/><sp/><sp/><sp/>OF((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>uch;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>ush;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/>ulg;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*z_errmsg[10];<sp/></highlight><highlight class="comment">/*<sp/>indexed<sp/>by<sp/>2-zlib_error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(size<sp/>given<sp/>to<sp/>avoid<sp/>silly<sp/>warnings<sp/>with<sp/>Visual<sp/>C++)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ERR_MSG(err)<sp/>z_errmsg[Z_NEED_DICT-(err)]</highlight></codeline>
<codeline lineno="961"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ERR_RETURN(strm,err)<sp/>\</highlight></codeline>
<codeline lineno="963"><highlight class="preprocessor"><sp/><sp/>return<sp/>(strm-&gt;msg<sp/>=<sp/>(char*)ERR_MSG(err),<sp/>(err))</highlight></codeline>
<codeline lineno="964"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>To<sp/>be<sp/>used<sp/>only<sp/>when<sp/>the<sp/>state<sp/>is<sp/>known<sp/>to<sp/>be<sp/>valid<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>common<sp/>constants<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DEF_WBITS</highlight></codeline>
<codeline lineno="969"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEF_WBITS<sp/>MAX_WBITS</highlight></codeline>
<codeline lineno="970"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="971"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>default<sp/>windowBits<sp/>for<sp/>decompression.<sp/>MAX_WBITS<sp/>is<sp/>for<sp/>compression<sp/>only<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MAX_MEM_LEVEL<sp/>&gt;=<sp/>8</highlight></codeline>
<codeline lineno="974"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEF_MEM_LEVEL<sp/>8</highlight></codeline>
<codeline lineno="975"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="976"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEF_MEM_LEVEL<sp/><sp/>MAX_MEM_LEVEL</highlight></codeline>
<codeline lineno="977"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="978"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>default<sp/>memLevel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STORED_BLOCK<sp/>0</highlight></codeline>
<codeline lineno="981"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>STATIC_TREES<sp/>1</highlight></codeline>
<codeline lineno="982"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DYN_TREES<sp/><sp/><sp/><sp/>2</highlight></codeline>
<codeline lineno="983"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>The<sp/>three<sp/>kinds<sp/>of<sp/>block<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIN_MATCH<sp/><sp/>3</highlight></codeline>
<codeline lineno="986"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MAX_MATCH<sp/><sp/>258</highlight></codeline>
<codeline lineno="987"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>The<sp/>minimum<sp/>and<sp/>maximum<sp/>match<sp/>lengths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PRESET_DICT<sp/>0x20<sp/></highlight><highlight class="comment">/*<sp/>preset<sp/>dictionary<sp/>flag<sp/>in<sp/>zlib<sp/>header<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="990"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>target<sp/>dependencies<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Common<sp/>defaults<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OS_CODE</highlight></codeline>
<codeline lineno="996"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>OS_CODE<sp/><sp/>0x03<sp/><sp/></highlight><highlight class="comment">/*<sp/>assume<sp/>Unix<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="997"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="998"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>F_OPEN</highlight></codeline>
<codeline lineno="1000"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>F_OPEN(name,<sp/>mode)<sp/>fopen((name),<sp/>(mode))</highlight></codeline>
<codeline lineno="1001"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1002"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_STRERROR</highlight></codeline>
<codeline lineno="1006"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*strerror<sp/>OF((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>zstrerror(errnum)<sp/>strerror(errnum)</highlight></codeline>
<codeline lineno="1008"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1009"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>zstrerror(errnum)<sp/>&quot;&quot;</highlight></codeline>
<codeline lineno="1010"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1011"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>zmemcpy<sp/>memcpy</highlight></codeline>
<codeline lineno="1013"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>zmemcmp<sp/>memcmp</highlight></codeline>
<codeline lineno="1014"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>zmemzero(dest,<sp/>len)<sp/>memset(dest,<sp/>0,<sp/>len)</highlight></codeline>
<codeline lineno="1015"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Diagnostic<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_ZIP_DEBUG_</highlight></codeline>
<codeline lineno="1018"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_verbose<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Assert(cond,msg)<sp/>assert(cond);</highlight></codeline>
<codeline lineno="1020"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//{if(!(cond))<sp/>Sys_Error(msg);}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Trace(x)<sp/>{if<sp/>(z_verbose&gt;=0)<sp/>Sys_Error<sp/>x<sp/>;}</highlight></codeline>
<codeline lineno="1022"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Tracev(x)<sp/>{if<sp/>(z_verbose&gt;0)<sp/>Sys_Error<sp/>x<sp/>;}</highlight></codeline>
<codeline lineno="1023"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Tracevv(x)<sp/>{if<sp/>(z_verbose&gt;1)<sp/>Sys_Error<sp/>x<sp/>;}</highlight></codeline>
<codeline lineno="1024"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Tracec(c,x)<sp/>{if<sp/>(z_verbose&gt;0<sp/>&amp;&amp;<sp/>(c))<sp/>Sys_Error<sp/>x<sp/>;}</highlight></codeline>
<codeline lineno="1025"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Tracecv(c,x)<sp/>{if<sp/>(z_verbose&gt;1<sp/>&amp;&amp;<sp/>(c))<sp/>Sys_Error<sp/>x<sp/>;}</highlight></codeline>
<codeline lineno="1026"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1027"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Assert(cond,msg)</highlight></codeline>
<codeline lineno="1028"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Trace(x)</highlight></codeline>
<codeline lineno="1029"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Tracev(x)</highlight></codeline>
<codeline lineno="1030"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Tracevv(x)</highlight></codeline>
<codeline lineno="1031"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Tracec(c,x)</highlight></codeline>
<codeline lineno="1032"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>Tracecv(c,x)</highlight></codeline>
<codeline lineno="1033"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1034"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uLong<sp/>(*check_func)<sp/>OF((uLong<sp/>check,<sp/>const<sp/>Byte<sp/>*buf,<sp/>uInt<sp/>len));</highlight></codeline>
<codeline lineno="1037"><highlight class="normal">voidp<sp/>zcalloc<sp/>OF((voidp<sp/>opaque,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>items,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size));</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>zcfree<sp/><sp/>OF((voidp<sp/>opaque,<sp/>voidp<sp/>ptr));</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZALLOC(strm,<sp/>items,<sp/>size)<sp/>\</highlight></codeline>
<codeline lineno="1041"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*((strm)-&gt;zalloc))((strm)-&gt;opaque,<sp/>(items),<sp/>(size))</highlight></codeline>
<codeline lineno="1042"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ZFREE(strm,<sp/>addr)<sp/><sp/>(*((strm)-&gt;zfree))((strm)-&gt;opaque,<sp/>(voidp)(addr))</highlight></codeline>
<codeline lineno="1043"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TRY_FREE(s,<sp/>p)<sp/>{if<sp/>(p)<sp/>ZFREE(s,<sp/>p);}</highlight></codeline>
<codeline lineno="1044"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(unix)<sp/>&amp;&amp;<sp/>!defined(CASESENSITIVITYDEFAULT_YES)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="1047"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!defined(CASESENSITIVITYDEFAULT_NO)</highlight></codeline>
<codeline lineno="1048"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CASESENSITIVITYDEFAULT_NO</highlight></codeline>
<codeline lineno="1049"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1050"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>UNZ_BUFSIZE</highlight></codeline>
<codeline lineno="1053"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>UNZ_BUFSIZE<sp/>(65536)</highlight></codeline>
<codeline lineno="1054"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1055"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>UNZ_MAXFILENAMEINZIP</highlight></codeline>
<codeline lineno="1057"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>UNZ_MAXFILENAMEINZIP<sp/>(256)</highlight></codeline>
<codeline lineno="1058"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1059"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ALLOC</highlight></codeline>
<codeline lineno="1061"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>ALLOC(size)<sp/>(Mem_Alloc(size))</highlight></codeline>
<codeline lineno="1062"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1063"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>TRYFREE</highlight></codeline>
<codeline lineno="1064"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>TRYFREE(p)<sp/>{if<sp/>(p)<sp/>Mem_Free(p);}</highlight></codeline>
<codeline lineno="1065"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1066"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SIZECENTRALDIRITEM<sp/>(0x2e)</highlight></codeline>
<codeline lineno="1068"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SIZEZIPLOCALHEADER<sp/>(0x1e)</highlight></codeline>
<codeline lineno="1069"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="1073"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Read<sp/>a<sp/>byte<sp/>from<sp/>a<sp/>gz_stream;<sp/>update<sp/>next_in<sp/>and<sp/>avail_in.<sp/>Return<sp/>EOF</highlight></codeline>
<codeline lineno="1074"><highlight class="comment"><sp/><sp/><sp/>for<sp/>end<sp/>of<sp/>file.</highlight></codeline>
<codeline lineno="1075"><highlight class="comment"><sp/><sp/><sp/>IN<sp/>assertion:<sp/>the<sp/>stream<sp/>s<sp/>has<sp/>been<sp/>sucessfully<sp/>opened<sp/>for<sp/>reading.</highlight></codeline>
<codeline lineno="1076"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1079"><highlight class="comment">static<sp/>int<sp/>unzlocal_getByte(FILE<sp/>*fin,int<sp/>*pi)</highlight></codeline>
<codeline lineno="1080"><highlight class="comment">{</highlight></codeline>
<codeline lineno="1081"><highlight class="comment"><sp/><sp/><sp/><sp/>unsigned<sp/>char<sp/>c;</highlight></codeline>
<codeline lineno="1082"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>err<sp/>=<sp/>fread(&amp;c,<sp/>1,<sp/>1,<sp/>fin);</highlight></codeline>
<codeline lineno="1083"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(err==1)</highlight></codeline>
<codeline lineno="1084"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1085"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pi<sp/>=<sp/>(int)c;</highlight></codeline>
<codeline lineno="1086"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>UNZ_OK;</highlight></codeline>
<codeline lineno="1087"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1088"><highlight class="comment"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1089"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1090"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ferror(fin))<sp/></highlight></codeline>
<codeline lineno="1091"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1092"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1093"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>UNZ_EOF;</highlight></codeline>
<codeline lineno="1094"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1095"><highlight class="comment">}</highlight></codeline>
<codeline lineno="1096"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================================================================</highlight></codeline>
<codeline lineno="1099"><highlight class="comment"><sp/><sp/><sp/>Reads<sp/>a<sp/>long<sp/>in<sp/>LSB<sp/>order<sp/>from<sp/>the<sp/>given<sp/>gz_stream.<sp/>Sets<sp/></highlight></codeline>
<codeline lineno="1100"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unzlocal_getShort<sp/>(FILE*<sp/>fin,<sp/>uLong<sp/>*pX)</highlight></codeline>
<codeline lineno="1102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/>v;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>fread(<sp/>&amp;v,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(v),<sp/>1,<sp/>fin<sp/>);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>*pX<sp/>=<sp/>LittleShort(<sp/>v);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_OK;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1111"><highlight class="comment"><sp/><sp/><sp/><sp/>uLong<sp/>x<sp/>;</highlight></codeline>
<codeline lineno="1112"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline lineno="1113"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>err;</highlight></codeline>
<codeline lineno="1114"><highlight class="comment"></highlight></codeline>
<codeline lineno="1115"><highlight class="comment"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>unzlocal_getByte(fin,&amp;i);</highlight></codeline>
<codeline lineno="1116"><highlight class="comment"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(uLong)i;</highlight></codeline>
<codeline lineno="1117"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1118"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(err==UNZ_OK)</highlight></codeline>
<codeline lineno="1119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>unzlocal_getByte(fin,&amp;i);</highlight></codeline>
<codeline lineno="1120"><highlight class="comment"><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>((uLong)i)&lt;&lt;8;</highlight></codeline>
<codeline lineno="1121"><highlight class="comment"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1122"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(err==UNZ_OK)</highlight></codeline>
<codeline lineno="1123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pX<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="1124"><highlight class="comment"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pX<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1126"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>err;</highlight></codeline>
<codeline lineno="1127"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unzlocal_getLong<sp/>(FILE<sp/>*fin,<sp/>uLong<sp/>*pX)</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>fread(<sp/>&amp;v,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(v),<sp/>1,<sp/>fin<sp/>);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>*pX<sp/>=<sp/>LittleLong(<sp/>v);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_OK;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1140"><highlight class="comment"><sp/><sp/><sp/><sp/>uLong<sp/>x<sp/>;</highlight></codeline>
<codeline lineno="1141"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline lineno="1142"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>err;</highlight></codeline>
<codeline lineno="1143"><highlight class="comment"></highlight></codeline>
<codeline lineno="1144"><highlight class="comment"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>unzlocal_getByte(fin,&amp;i);</highlight></codeline>
<codeline lineno="1145"><highlight class="comment"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(uLong)i;</highlight></codeline>
<codeline lineno="1146"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1147"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(err==UNZ_OK)</highlight></codeline>
<codeline lineno="1148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>unzlocal_getByte(fin,&amp;i);</highlight></codeline>
<codeline lineno="1149"><highlight class="comment"><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>((uLong)i)&lt;&lt;8;</highlight></codeline>
<codeline lineno="1150"><highlight class="comment"></highlight></codeline>
<codeline lineno="1151"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(err==UNZ_OK)</highlight></codeline>
<codeline lineno="1152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>unzlocal_getByte(fin,&amp;i);</highlight></codeline>
<codeline lineno="1153"><highlight class="comment"><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>((uLong)i)&lt;&lt;16;</highlight></codeline>
<codeline lineno="1154"><highlight class="comment"></highlight></codeline>
<codeline lineno="1155"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(err==UNZ_OK)</highlight></codeline>
<codeline lineno="1156"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>unzlocal_getByte(fin,&amp;i);</highlight></codeline>
<codeline lineno="1157"><highlight class="comment"><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>((uLong)i)&lt;&lt;24;</highlight></codeline>
<codeline lineno="1158"><highlight class="comment"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1159"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(err==UNZ_OK)</highlight></codeline>
<codeline lineno="1160"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pX<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="1161"><highlight class="comment"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pX<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1163"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>err;</highlight></codeline>
<codeline lineno="1164"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>My<sp/>own<sp/>strcmpi<sp/>/<sp/>strcasecmp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strcmpcasenosensitive_internal<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fileName1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fileName2)</highlight></codeline>
<codeline lineno="1170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c1=*(fileName1++);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c2=*(fileName2++);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c1&gt;=</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(c1&lt;=</highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1<sp/>-=<sp/>0x20;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c2&gt;=</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(c2&lt;=</highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2<sp/>-=<sp/>0x20;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c1==</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((c2==</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>?<sp/>0<sp/>:<sp/>-1);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c2==</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c1&lt;c2)</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c1&gt;c2)</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>CASESENSITIVITYDEFAULT_NO</highlight></codeline>
<codeline lineno="1192"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CASESENSITIVITYDEFAULTVALUE<sp/>2</highlight></codeline>
<codeline lineno="1193"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1194"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CASESENSITIVITYDEFAULTVALUE<sp/>1</highlight></codeline>
<codeline lineno="1195"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1196"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STRCMPCASENOSENTIVEFUNCTION</highlight></codeline>
<codeline lineno="1198"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>STRCMPCASENOSENTIVEFUNCTION<sp/>strcmpcasenosensitive_internal</highlight></codeline>
<codeline lineno="1199"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1200"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="1202"><highlight class="comment"><sp/><sp/><sp/>Compare<sp/>two<sp/>filename<sp/>(fileName1,fileName2).</highlight></codeline>
<codeline lineno="1203"><highlight class="comment"><sp/><sp/><sp/>If<sp/>iCaseSenisivity<sp/>=<sp/>1,<sp/>comparision<sp/>is<sp/>case<sp/>sensitivity<sp/>(like<sp/>strcmp)</highlight></codeline>
<codeline lineno="1204"><highlight class="comment"><sp/><sp/><sp/>If<sp/>iCaseSenisivity<sp/>=<sp/>2,<sp/>comparision<sp/>is<sp/>not<sp/>case<sp/>sensitivity<sp/>(like<sp/>strcmpi</highlight></codeline>
<codeline lineno="1205"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>strcasecmp)</highlight></codeline>
<codeline lineno="1206"><highlight class="comment"><sp/><sp/><sp/>If<sp/>iCaseSenisivity<sp/>=<sp/>0,<sp/>case<sp/>sensitivity<sp/>is<sp/>defaut<sp/>of<sp/>your<sp/>operating<sp/>system</highlight></codeline>
<codeline lineno="1207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(like<sp/>1<sp/>on<sp/>Unix,<sp/>2<sp/>on<sp/>Windows)</highlight></codeline>
<codeline lineno="1208"><highlight class="comment"></highlight></codeline>
<codeline lineno="1209"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unzStringFileNameCompare<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fileName1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fileName2,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iCaseSensitivity)</highlight></codeline>
<codeline lineno="1211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iCaseSensitivity==0)</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iCaseSensitivity=CASESENSITIVITYDEFAULTVALUE;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iCaseSensitivity==1)</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strcmp(fileName1,fileName2);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STRCMPCASENOSENTIVEFUNCTION(fileName1,fileName2);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BUFREADCOMMENT<sp/>(0x400)</highlight></codeline>
<codeline lineno="1222"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1224"><highlight class="comment"><sp/><sp/>Locate<sp/>the<sp/>Central<sp/>directory<sp/>of<sp/>a<sp/>zipfile<sp/>(at<sp/>the<sp/>end,<sp/>just<sp/>before</highlight></codeline>
<codeline lineno="1225"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>global<sp/>comment)</highlight></codeline>
<codeline lineno="1226"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uLong<sp/>unzlocal_SearchCentralDir(FILE<sp/>*fin)</highlight></codeline>
<codeline lineno="1228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buf;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/>uSizeFile;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/>uBackRead;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/>uMaxBack=0xffff;<sp/></highlight><highlight class="comment">/*<sp/>maximum<sp/>size<sp/>of<sp/>global<sp/>comment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/>uPosFound=0;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fseek(fin,0,SEEK_END)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>uSizeFile<sp/>=<sp/>ftell(<sp/>fin<sp/>);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uMaxBack&gt;uSizeFile)</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uMaxBack<sp/>=<sp/>uSizeFile;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)ALLOC(BUFREADCOMMENT+4);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf==NULL)</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/>uBackRead<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(uBackRead&lt;uMaxBack)</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uLong<sp/>uReadSize,uReadPos<sp/>;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uBackRead+BUFREADCOMMENT&gt;uMaxBack)<sp/></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uBackRead<sp/>=<sp/>uMaxBack;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uBackRead+=BUFREADCOMMENT;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uReadPos<sp/>=<sp/>uSizeFile-uBackRead<sp/>;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uReadSize<sp/>=<sp/>((BUFREADCOMMENT+4)<sp/>&lt;<sp/>(uSizeFile-uReadPos))<sp/>?<sp/></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(BUFREADCOMMENT+4)<sp/>:<sp/>(uSizeFile-uReadPos);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fseek(fin,uReadPos,SEEK_SET)!=0)</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(buf,(uInt)uReadSize,1,fin)!=1)</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)uReadSize-3;<sp/>(i--)&gt;0;)</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((*(buf+i))==0x50)<sp/>&amp;&amp;<sp/>((*(buf+i+1))==0x4b)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((*(buf+i+2))==0x05)<sp/>&amp;&amp;<sp/>((*(buf+i+3))==0x06))</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uPosFound<sp/>=<sp/>uReadPos+i;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uPosFound!=0)</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>TRYFREE(buf);</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uPosFound;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>unzFile<sp/>unzReOpen<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/>unzFile<sp/>file)</highlight></codeline>
<codeline lineno="1283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunz__s" kindref="compound">unz_s</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*<sp/>fin;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>fin=fopen(path,</highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fin==NULL)</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>s=(<ref refid="structunz__s" kindref="compound">unz_s</ref>*)ALLOC(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structunz__s" kindref="compound">unz_s</ref>));</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(s,<sp/>(<ref refid="structunz__s" kindref="compound">unz_s</ref>*)file,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structunz__s" kindref="compound">unz_s</ref>));</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;file<sp/>=<sp/>fin;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;pfile_in_zip_read<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(unzFile)s;<sp/><sp/></highlight></codeline>
<codeline lineno="1298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1301"><highlight class="comment"><sp/><sp/>Open<sp/>a<sp/>Zip<sp/>file.<sp/>path<sp/>contain<sp/>the<sp/>full<sp/>pathname<sp/>(by<sp/>example,</highlight></codeline>
<codeline lineno="1302"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>on<sp/>a<sp/>Windows<sp/>NT<sp/>computer<sp/>&quot;c:\\test\\zlib109.zip&quot;<sp/>or<sp/>on<sp/>an<sp/>Unix<sp/>computer</highlight></codeline>
<codeline lineno="1303"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>&quot;zlib/zlib109.zip&quot;.</highlight></codeline>
<codeline lineno="1304"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>zipfile<sp/>cannot<sp/>be<sp/>opened<sp/>(file<sp/>don&apos;t<sp/>exist<sp/>or<sp/>in<sp/>not<sp/>valid),<sp/>the</highlight></codeline>
<codeline lineno="1305"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>value<sp/>is<sp/>NULL.</highlight></codeline>
<codeline lineno="1306"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Else,<sp/>the<sp/>return<sp/>value<sp/>is<sp/>a<sp/>unzFile<sp/>Handle,<sp/>usable<sp/>with<sp/>other<sp/>function</highlight></codeline>
<codeline lineno="1307"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>this<sp/>unzip<sp/>package.</highlight></codeline>
<codeline lineno="1308"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>unzFile<sp/>unzOpen<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path)</highlight></codeline>
<codeline lineno="1310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunz__s" kindref="compound">unz_s</ref><sp/>us;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunz__s" kindref="compound">unz_s</ref><sp/>*s;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/>central_pos,uL;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*<sp/>fin<sp/>;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/>number_disk;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>the<sp/>current<sp/>dist,<sp/>used<sp/>for<sp/></highlight></codeline>
<codeline lineno="1317"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spaning<sp/>ZIP,<sp/>unsupported,<sp/>always<sp/>0*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/>number_disk_with_CD;<sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>the<sp/>the<sp/>disk<sp/>with<sp/>central<sp/>dir,<sp/>used</highlight></codeline>
<codeline lineno="1319"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>spaning<sp/>ZIP,<sp/>unsupported,<sp/>always<sp/>0*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/>number_entry_CD;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>total<sp/>number<sp/>of<sp/>entries<sp/>in</highlight></codeline>
<codeline lineno="1321"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>central<sp/>dir<sp/></highlight></codeline>
<codeline lineno="1322"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(same<sp/>than<sp/>number_entry<sp/>on<sp/>nospan)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err=UNZ_OK;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>fin=fopen(path,</highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fin==NULL)</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>central_pos<sp/>=<sp/>unzlocal_SearchCentralDir(fin);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(central_pos==0)</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fseek(fin,central_pos,SEEK_SET)!=0)</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>signature,<sp/>already<sp/>checked<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getLong(fin,&amp;uL)!=UNZ_OK)</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>this<sp/>disk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getShort(fin,&amp;number_disk)!=UNZ_OK)</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>the<sp/>disk<sp/>with<sp/>the<sp/>start<sp/>of<sp/>the<sp/>central<sp/>directory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getShort(fin,&amp;number_disk_with_CD)!=UNZ_OK)</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>total<sp/>number<sp/>of<sp/>entries<sp/>in<sp/>the<sp/>central<sp/>dir<sp/>on<sp/>this<sp/>disk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getShort(fin,&amp;us.gi.number_entry)!=UNZ_OK)</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>total<sp/>number<sp/>of<sp/>entries<sp/>in<sp/>the<sp/>central<sp/>dir<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getShort(fin,&amp;number_entry_CD)!=UNZ_OK)</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((number_entry_CD!=us.gi.number_entry)<sp/>||</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(number_disk_with_CD!=0)<sp/>||</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(number_disk!=0))</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_BADZIPFILE;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>the<sp/>central<sp/>directory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getLong(fin,&amp;us.size_central_dir)!=UNZ_OK)</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>offset<sp/>of<sp/>start<sp/>of<sp/>central<sp/>directory<sp/>with<sp/>respect<sp/>to<sp/>the<sp/></highlight></codeline>
<codeline lineno="1367"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>starting<sp/>disk<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getLong(fin,&amp;us.offset_central_dir)!=UNZ_OK)</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>zipfile<sp/>comment<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getShort(fin,&amp;us.gi.size_comment)!=UNZ_OK)</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((central_pos&lt;us.offset_central_dir+us.size_central_dir)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(err==UNZ_OK))</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_BADZIPFILE;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err!=UNZ_OK)</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fin);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/>us.file=fin;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>us.byte_before_the_zipfile<sp/>=<sp/>central_pos<sp/>-</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(us.offset_central_dir+us.size_central_dir);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/>us.central_pos<sp/>=<sp/>central_pos;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/>us.pfile_in_zip_read<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>s=(<ref refid="structunz__s" kindref="compound">unz_s</ref>*)ALLOC(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structunz__s" kindref="compound">unz_s</ref>));</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/>*s=us;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>unzGoToFirstFile((unzFile)s);<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(unzFile)s;<sp/><sp/></highlight></codeline>
<codeline lineno="1396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1400"><highlight class="comment"><sp/><sp/>Close<sp/>a<sp/>ZipFile<sp/>opened<sp/>with<sp/>unzipOpen.</highlight></codeline>
<codeline lineno="1401"><highlight class="comment"><sp/><sp/>If<sp/>there<sp/>is<sp/>files<sp/>inside<sp/>the<sp/>.Zip<sp/>opened<sp/>with<sp/>unzipOpenCurrentFile<sp/>(see<sp/>later),</highlight></codeline>
<codeline lineno="1402"><highlight class="comment"><sp/><sp/><sp/><sp/>these<sp/>files<sp/>MUST<sp/>be<sp/>closed<sp/>with<sp/>unzipCloseCurrentFile<sp/>before<sp/>call<sp/>unzipClose.</highlight></codeline>
<codeline lineno="1403"><highlight class="comment"><sp/><sp/>return<sp/>UNZ_OK<sp/>if<sp/>there<sp/>is<sp/>no<sp/>problem.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unzClose<sp/>(unzFile<sp/>file)</highlight></codeline>
<codeline lineno="1405"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunz__s" kindref="compound">unz_s</ref>*<sp/>s;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file==NULL)</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_PARAMERROR;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>s=(<ref refid="structunz__s" kindref="compound">unz_s</ref>*)file;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;pfile_in_zip_read!=NULL)</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unzCloseCurrentFile(file);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(s-&gt;file);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>TRYFREE(s);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_OK;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1421"><highlight class="comment"><sp/><sp/>Write<sp/>info<sp/>about<sp/>the<sp/>ZipFile<sp/>in<sp/>the<sp/>*pglobal_info<sp/>structure.</highlight></codeline>
<codeline lineno="1422"><highlight class="comment"><sp/><sp/>No<sp/>preparation<sp/>of<sp/>the<sp/>structure<sp/>is<sp/>needed</highlight></codeline>
<codeline lineno="1423"><highlight class="comment"><sp/><sp/>return<sp/>UNZ_OK<sp/>if<sp/>there<sp/>is<sp/>no<sp/>problem.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unzGetGlobalInfo<sp/>(unzFile<sp/>file,<ref refid="structunz__global__info__s" kindref="compound">unz_global_info</ref><sp/>*pglobal_info)</highlight></codeline>
<codeline lineno="1425"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunz__s" kindref="compound">unz_s</ref>*<sp/>s;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file==NULL)</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_PARAMERROR;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>s=(<ref refid="structunz__s" kindref="compound">unz_s</ref>*)file;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>*pglobal_info=s-&gt;gi;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_OK;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1436"><highlight class="comment"><sp/><sp/><sp/>Translate<sp/>date/time<sp/>from<sp/>Dos<sp/>format<sp/>to<sp/>tm_unz<sp/>(readable<sp/>more<sp/>easilty)</highlight></codeline>
<codeline lineno="1437"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unzlocal_DosDateToTmuDate<sp/>(uLong<sp/>ulDosDate,<sp/><ref refid="structtm__unz__s" kindref="compound">tm_unz</ref>*<sp/>ptm)</highlight></codeline>
<codeline lineno="1439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/>uDate;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>uDate<sp/>=<sp/>(uLong)(ulDosDate&gt;&gt;16);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>ptm-&gt;tm_mday<sp/>=<sp/>(uInt)(uDate&amp;0x1f)<sp/>;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>ptm-&gt;tm_mon<sp/>=<sp/><sp/>(uInt)((((uDate)&amp;0x1E0)/0x20)-1)<sp/>;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>ptm-&gt;tm_year<sp/>=<sp/>(uInt)(((uDate&amp;0x0FE00)/0x0200)+1980)<sp/>;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/>ptm-&gt;tm_hour<sp/>=<sp/>(uInt)<sp/>((ulDosDate<sp/>&amp;0xF800)/0x800);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>ptm-&gt;tm_min<sp/>=<sp/><sp/>(uInt)<sp/>((ulDosDate&amp;0x7E0)/0x20)<sp/>;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/>ptm-&gt;tm_sec<sp/>=<sp/><sp/>(uInt)<sp/>(2*(ulDosDate&amp;0x1f))<sp/>;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1452"><highlight class="comment"><sp/><sp/>Get<sp/>Info<sp/>about<sp/>the<sp/>current<sp/>file<sp/>in<sp/>the<sp/>zipfile,<sp/>with<sp/>internal<sp/>only<sp/>info</highlight></codeline>
<codeline lineno="1453"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unzlocal_GetCurrentFileInfoInternal<sp/>(unzFile<sp/>file,</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structunz__file__info__s" kindref="compound">unz_file_info</ref><sp/>*pfile_info,</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structunz__file__info__internal__s" kindref="compound">unz_file_info_internal</ref><sp/></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pfile_info_internal,</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*szFileName,</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uLong<sp/>fileNameBufferSize,</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*extraField,</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uLong<sp/>extraFieldBufferSize,</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*szComment,</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uLong<sp/>commentBufferSize)</highlight></codeline>
<codeline lineno="1464"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunz__s" kindref="compound">unz_s</ref>*<sp/>s;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunz__file__info__s" kindref="compound">unz_file_info</ref><sp/>file_info;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunz__file__info__internal__s" kindref="compound">unz_file_info_internal</ref><sp/>file_info_internal;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err=UNZ_OK;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/>uMagic;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lSeek=0;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file==NULL)</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_PARAMERROR;</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>s=(<ref refid="structunz__s" kindref="compound">unz_s</ref>*)file;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fseek(s-&gt;file,s-&gt;pos_in_central_dir+s-&gt;byte_before_the_zipfile,SEEK_SET)!=0)</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>check<sp/>the<sp/>magic<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err==UNZ_OK)</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getLong(s-&gt;file,&amp;uMagic)<sp/>!=<sp/>UNZ_OK)</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uMagic!=0x02014b50)</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_BADZIPFILE;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getShort(s-&gt;file,&amp;file_info.version)<sp/>!=<sp/>UNZ_OK)</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getShort(s-&gt;file,&amp;file_info.version_needed)<sp/>!=<sp/>UNZ_OK)</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getShort(s-&gt;file,&amp;file_info.flag)<sp/>!=<sp/>UNZ_OK)</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getShort(s-&gt;file,&amp;file_info.compression_method)<sp/>!=<sp/>UNZ_OK)</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getLong(s-&gt;file,&amp;file_info.dosDate)<sp/>!=<sp/>UNZ_OK)</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/>unzlocal_DosDateToTmuDate(file_info.dosDate,&amp;file_info.tmu_date);</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getLong(s-&gt;file,&amp;file_info.crc)<sp/>!=<sp/>UNZ_OK)</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getLong(s-&gt;file,&amp;file_info.compressed_size)<sp/>!=<sp/>UNZ_OK)</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getLong(s-&gt;file,&amp;file_info.uncompressed_size)<sp/>!=<sp/>UNZ_OK)</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getShort(s-&gt;file,&amp;file_info.size_filename)<sp/>!=<sp/>UNZ_OK)</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getShort(s-&gt;file,&amp;file_info.size_file_extra)<sp/>!=<sp/>UNZ_OK)</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getShort(s-&gt;file,&amp;file_info.size_file_comment)<sp/>!=<sp/>UNZ_OK)</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getShort(s-&gt;file,&amp;file_info.disk_num_start)<sp/>!=<sp/>UNZ_OK)</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getShort(s-&gt;file,&amp;file_info.internal_fa)<sp/>!=<sp/>UNZ_OK)</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getLong(s-&gt;file,&amp;file_info.external_fa)<sp/>!=<sp/>UNZ_OK)</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getLong(s-&gt;file,&amp;file_info_internal.offset_curfile)<sp/>!=<sp/>UNZ_OK)</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>lSeek+=file_info.size_filename;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((err==UNZ_OK)<sp/>&amp;&amp;<sp/>(szFileName!=NULL))</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uLong<sp/>uSizeRead<sp/>;</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file_info.size_filename&lt;fileNameBufferSize)</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(szFileName+file_info.size_filename)=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uSizeRead<sp/>=<sp/>file_info.size_filename;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uSizeRead<sp/>=<sp/>fileNameBufferSize;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((file_info.size_filename&gt;0)<sp/>&amp;&amp;<sp/>(fileNameBufferSize&gt;0))</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(szFileName,(uInt)uSizeRead,1,s-&gt;file)!=1)</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lSeek<sp/>-=<sp/>uSizeRead;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((err==UNZ_OK)<sp/>&amp;&amp;<sp/>(extraField!=NULL))</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uLong<sp/>uSizeRead<sp/>;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file_info.size_file_extra&lt;extraFieldBufferSize)</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uSizeRead<sp/>=<sp/>file_info.size_file_extra;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uSizeRead<sp/>=<sp/>extraFieldBufferSize;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lSeek!=0)</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fseek(s-&gt;file,lSeek,SEEK_CUR)==0)</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lSeek=0;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((file_info.size_file_extra&gt;0)<sp/>&amp;&amp;<sp/>(extraFieldBufferSize&gt;0))</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(extraField,(uInt)uSizeRead,1,s-&gt;file)!=1)</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lSeek<sp/>+=<sp/>file_info.size_file_extra<sp/>-<sp/>uSizeRead;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lSeek+=file_info.size_file_extra;<sp/></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((err==UNZ_OK)<sp/>&amp;&amp;<sp/>(szComment!=NULL))</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uLong<sp/>uSizeRead<sp/>;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file_info.size_file_comment&lt;commentBufferSize)</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(szComment+file_info.size_file_comment)=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uSizeRead<sp/>=<sp/>file_info.size_file_comment;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uSizeRead<sp/>=<sp/>commentBufferSize;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lSeek!=0)</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fseek(s-&gt;file,lSeek,SEEK_CUR)==0)</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lSeek=0;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((file_info.size_file_comment&gt;0)<sp/>&amp;&amp;<sp/>(commentBufferSize&gt;0))</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(szComment,(uInt)uSizeRead,1,s-&gt;file)!=1)</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lSeek+=file_info.size_file_comment<sp/>-<sp/>uSizeRead;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lSeek+=file_info.size_file_comment;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((err==UNZ_OK)<sp/>&amp;&amp;<sp/>(pfile_info!=NULL))</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pfile_info=file_info;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((err==UNZ_OK)<sp/>&amp;&amp;<sp/>(pfile_info_internal!=NULL))</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pfile_info_internal=file_info_internal;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1608"><highlight class="comment"><sp/><sp/>Write<sp/>info<sp/>about<sp/>the<sp/>ZipFile<sp/>in<sp/>the<sp/>*pglobal_info<sp/>structure.</highlight></codeline>
<codeline lineno="1609"><highlight class="comment"><sp/><sp/>No<sp/>preparation<sp/>of<sp/>the<sp/>structure<sp/>is<sp/>needed</highlight></codeline>
<codeline lineno="1610"><highlight class="comment"><sp/><sp/>return<sp/>UNZ_OK<sp/>if<sp/>there<sp/>is<sp/>no<sp/>problem.</highlight></codeline>
<codeline lineno="1611"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unzGetCurrentFileInfo<sp/>(<sp/><sp/>unzFile<sp/>file,<sp/><ref refid="structunz__file__info__s" kindref="compound">unz_file_info</ref><sp/>*pfile_info,</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*szFileName,<sp/>uLong<sp/>fileNameBufferSize,</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*extraField,<sp/>uLong<sp/>extraFieldBufferSize,</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*szComment,<sp/>uLong<sp/>commentBufferSize)</highlight></codeline>
<codeline lineno="1616"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unzlocal_GetCurrentFileInfoInternal(file,pfile_info,NULL,</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>szFileName,fileNameBufferSize,</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extraField,extraFieldBufferSize,</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>szComment,commentBufferSize);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1624"><highlight class="comment"><sp/><sp/>Set<sp/>the<sp/>current<sp/>file<sp/>of<sp/>the<sp/>zipfile<sp/>to<sp/>the<sp/>first<sp/>file.</highlight></codeline>
<codeline lineno="1625"><highlight class="comment"><sp/><sp/>return<sp/>UNZ_OK<sp/>if<sp/>there<sp/>is<sp/>no<sp/>problem</highlight></codeline>
<codeline lineno="1626"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unzGoToFirstFile<sp/>(unzFile<sp/>file)</highlight></codeline>
<codeline lineno="1628"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err=UNZ_OK;</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunz__s" kindref="compound">unz_s</ref>*<sp/>s;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file==NULL)</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_PARAMERROR;</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/>s=(<ref refid="structunz__s" kindref="compound">unz_s</ref>*)file;</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;pos_in_central_dir=s-&gt;offset_central_dir;</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;num_file=0;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/>err=unzlocal_GetCurrentFileInfoInternal(file,&amp;s-&gt;cur_file_info,</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;s-&gt;cur_file_info_internal,</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,0,NULL,0,NULL,0);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;current_file_ok<sp/>=<sp/>(err<sp/>==<sp/>UNZ_OK);</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1644"><highlight class="comment"><sp/><sp/>Set<sp/>the<sp/>current<sp/>file<sp/>of<sp/>the<sp/>zipfile<sp/>to<sp/>the<sp/>next<sp/>file.</highlight></codeline>
<codeline lineno="1645"><highlight class="comment"><sp/><sp/>return<sp/>UNZ_OK<sp/>if<sp/>there<sp/>is<sp/>no<sp/>problem</highlight></codeline>
<codeline lineno="1646"><highlight class="comment"><sp/><sp/>return<sp/>UNZ_END_OF_LIST_OF_FILE<sp/>if<sp/>the<sp/>actual<sp/>file<sp/>was<sp/>the<sp/>latest.</highlight></codeline>
<codeline lineno="1647"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unzGoToNextFile<sp/>(unzFile<sp/>file)</highlight></codeline>
<codeline lineno="1649"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunz__s" kindref="compound">unz_s</ref>*<sp/>s;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file==NULL)</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_PARAMERROR;</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/>s=(<ref refid="structunz__s" kindref="compound">unz_s</ref>*)file;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s-&gt;current_file_ok)</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_END_OF_LIST_OF_FILE;</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;num_file+1==s-&gt;gi.number_entry)</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_END_OF_LIST_OF_FILE;</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;pos_in_central_dir<sp/>+=<sp/>SIZECENTRALDIRITEM<sp/>+<sp/>s-&gt;cur_file_info.size_filename<sp/>+</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;cur_file_info.size_file_extra<sp/>+<sp/>s-&gt;cur_file_info.size_file_comment<sp/>;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;num_file++;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>unzlocal_GetCurrentFileInfoInternal(file,&amp;s-&gt;cur_file_info,</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;s-&gt;cur_file_info_internal,</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,0,NULL,0,NULL,0);</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;current_file_ok<sp/>=<sp/>(err<sp/>==<sp/>UNZ_OK);</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1672"><highlight class="comment"><sp/><sp/>Get<sp/>the<sp/>position<sp/>of<sp/>the<sp/>info<sp/>of<sp/>the<sp/>current<sp/>file<sp/>in<sp/>the<sp/>zip.</highlight></codeline>
<codeline lineno="1673"><highlight class="comment"><sp/><sp/>return<sp/>UNZ_OK<sp/>if<sp/>there<sp/>is<sp/>no<sp/>problem</highlight></codeline>
<codeline lineno="1674"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unzGetCurrentFileInfoPosition<sp/>(unzFile<sp/>file,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*pos<sp/>)</highlight></codeline>
<codeline lineno="1676"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunz__s" kindref="compound">unz_s</ref>*<sp/>s;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file==NULL)</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_PARAMERROR;</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>s=(<ref refid="structunz__s" kindref="compound">unz_s</ref>*)file;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/>*pos<sp/>=<sp/>s-&gt;pos_in_central_dir;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_OK;</highlight></codeline>
<codeline lineno="1685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1688"><highlight class="comment"><sp/><sp/>Set<sp/>the<sp/>position<sp/>of<sp/>the<sp/>info<sp/>of<sp/>the<sp/>current<sp/>file<sp/>in<sp/>the<sp/>zip.</highlight></codeline>
<codeline lineno="1689"><highlight class="comment"><sp/><sp/>return<sp/>UNZ_OK<sp/>if<sp/>there<sp/>is<sp/>no<sp/>problem</highlight></codeline>
<codeline lineno="1690"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unzSetCurrentFileInfoPosition<sp/>(unzFile<sp/>file,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>pos<sp/>)</highlight></codeline>
<codeline lineno="1692"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunz__s" kindref="compound">unz_s</ref>*<sp/>s;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file==NULL)</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_PARAMERROR;</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>s=(<ref refid="structunz__s" kindref="compound">unz_s</ref>*)file;</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;pos_in_central_dir<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>unzlocal_GetCurrentFileInfoInternal(file,&amp;s-&gt;cur_file_info,</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;s-&gt;cur_file_info_internal,</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,0,NULL,0,NULL,0);</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;current_file_ok<sp/>=<sp/>(err<sp/>==<sp/>UNZ_OK);</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_OK;</highlight></codeline>
<codeline lineno="1706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1709"><highlight class="comment"><sp/><sp/>Try<sp/>locate<sp/>the<sp/>file<sp/>szFileName<sp/>in<sp/>the<sp/>zipfile.</highlight></codeline>
<codeline lineno="1710"><highlight class="comment"><sp/><sp/>For<sp/>the<sp/>iCaseSensitivity<sp/>signification,<sp/>see<sp/>unzipStringFileNameCompare</highlight></codeline>
<codeline lineno="1711"><highlight class="comment"></highlight></codeline>
<codeline lineno="1712"><highlight class="comment"><sp/><sp/>return<sp/>value<sp/>:</highlight></codeline>
<codeline lineno="1713"><highlight class="comment"><sp/><sp/>UNZ_OK<sp/>if<sp/>the<sp/>file<sp/>is<sp/>found.<sp/>It<sp/>becomes<sp/>the<sp/>current<sp/>file.</highlight></codeline>
<codeline lineno="1714"><highlight class="comment"><sp/><sp/>UNZ_END_OF_LIST_OF_FILE<sp/>if<sp/>the<sp/>file<sp/>is<sp/>not<sp/>found</highlight></codeline>
<codeline lineno="1715"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unzLocateFile<sp/>(unzFile<sp/>file,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*szFileName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iCaseSensitivity)</highlight></codeline>
<codeline lineno="1717"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunz__s" kindref="compound">unz_s</ref>*<sp/>s;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/>num_fileSaved;</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/>pos_in_central_dirSaved;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file==NULL)</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_PARAMERROR;</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strlen(szFileName)&gt;=UNZ_MAXFILENAMEINZIP)</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_PARAMERROR;</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/>s=(<ref refid="structunz__s" kindref="compound">unz_s</ref>*)file;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s-&gt;current_file_ok)</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_END_OF_LIST_OF_FILE;</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/>num_fileSaved<sp/>=<sp/>s-&gt;num_file;</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/>pos_in_central_dirSaved<sp/>=<sp/>s-&gt;pos_in_central_dir;</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>unzGoToFirstFile(file);</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(err<sp/>==<sp/>UNZ_OK)</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>szCurrentFileName[UNZ_MAXFILENAMEINZIP+1];</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unzGetCurrentFileInfo(file,NULL,</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>szCurrentFileName,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(szCurrentFileName)-1,</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,0,NULL,0);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzStringFileNameCompare(szCurrentFileName,</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>szFileName,iCaseSensitivity)==0)</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_OK;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>unzGoToNextFile(file);</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;num_file<sp/>=<sp/>num_fileSaved<sp/>;</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;pos_in_central_dir<sp/>=<sp/>pos_in_central_dirSaved<sp/>;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1760"><highlight class="comment"><sp/><sp/>Read<sp/>the<sp/>static<sp/>header<sp/>of<sp/>the<sp/>current<sp/>zipfile</highlight></codeline>
<codeline lineno="1761"><highlight class="comment"><sp/><sp/>Check<sp/>the<sp/>coherency<sp/>of<sp/>the<sp/>static<sp/>header<sp/>and<sp/>info<sp/>in<sp/>the<sp/>end<sp/>of<sp/>central</highlight></codeline>
<codeline lineno="1762"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>directory<sp/>about<sp/>this<sp/>file</highlight></codeline>
<codeline lineno="1763"><highlight class="comment"><sp/><sp/>store<sp/>in<sp/>*piSizeVar<sp/>the<sp/>size<sp/>of<sp/>extra<sp/>info<sp/>in<sp/>static<sp/>header</highlight></codeline>
<codeline lineno="1764"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(filename<sp/>and<sp/>size<sp/>of<sp/>extra<sp/>field<sp/>data)</highlight></codeline>
<codeline lineno="1765"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unzlocal_CheckCurrentFileCoherencyHeader<sp/>(<ref refid="structunz__s" kindref="compound">unz_s</ref>*<sp/>s,<sp/>uInt*<sp/>piSizeVar,</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uLong<sp/>*poffset_local_extrafield,</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uInt<sp/>*psize_local_extrafield)</highlight></codeline>
<codeline lineno="1769"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/>uMagic,uData,uFlags;</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/>size_filename;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/>size_extra_field;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err=UNZ_OK;</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/>*piSizeVar<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/>*poffset_local_extrafield<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/>*psize_local_extrafield<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fseek(s-&gt;file,s-&gt;cur_file_info_internal.offset_curfile<sp/>+</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;byte_before_the_zipfile,SEEK_SET)!=0)</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err==UNZ_OK)</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getLong(s-&gt;file,&amp;uMagic)<sp/>!=<sp/>UNZ_OK)</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uMagic!=0x04034b50)</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_BADZIPFILE;</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getShort(s-&gt;file,&amp;uData)<sp/>!=<sp/>UNZ_OK)</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1793"><highlight class="comment"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>((err==UNZ_OK)<sp/>&amp;&amp;<sp/>(uData!=s-&gt;cur_file_info.wVersion))</highlight></codeline>
<codeline lineno="1794"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_BADZIPFILE;</highlight></codeline>
<codeline lineno="1795"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getShort(s-&gt;file,&amp;uFlags)<sp/>!=<sp/>UNZ_OK)</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getShort(s-&gt;file,&amp;uData)<sp/>!=<sp/>UNZ_OK)</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((err==UNZ_OK)<sp/>&amp;&amp;<sp/>(uData!=s-&gt;cur_file_info.compression_method))</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_BADZIPFILE;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((err==UNZ_OK)<sp/>&amp;&amp;<sp/>(s-&gt;cur_file_info.compression_method!=0)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(s-&gt;cur_file_info.compression_method!=Z_DEFLATED))</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_BADZIPFILE;</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getLong(s-&gt;file,&amp;uData)<sp/>!=<sp/>UNZ_OK)<sp/></highlight><highlight class="comment">/*<sp/>date/time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getLong(s-&gt;file,&amp;uData)<sp/>!=<sp/>UNZ_OK)<sp/></highlight><highlight class="comment">/*<sp/>crc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((err==UNZ_OK)<sp/>&amp;&amp;<sp/>(uData!=s-&gt;cur_file_info.crc)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uFlags<sp/>&amp;<sp/>8)==0))</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_BADZIPFILE;</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getLong(s-&gt;file,&amp;uData)<sp/>!=<sp/>UNZ_OK)<sp/></highlight><highlight class="comment">/*<sp/>size<sp/>compr<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((err==UNZ_OK)<sp/>&amp;&amp;<sp/>(uData!=s-&gt;cur_file_info.compressed_size)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uFlags<sp/>&amp;<sp/>8)==0))</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_BADZIPFILE;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getLong(s-&gt;file,&amp;uData)<sp/>!=<sp/>UNZ_OK)<sp/></highlight><highlight class="comment">/*<sp/>size<sp/>uncompr<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((err==UNZ_OK)<sp/>&amp;&amp;<sp/>(uData!=s-&gt;cur_file_info.uncompressed_size)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uFlags<sp/>&amp;<sp/>8)==0))</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_BADZIPFILE;</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getShort(s-&gt;file,&amp;size_filename)<sp/>!=<sp/>UNZ_OK)</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((err==UNZ_OK)<sp/>&amp;&amp;<sp/>(size_filename!=s-&gt;cur_file_info.size_filename))</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_BADZIPFILE;</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/>*piSizeVar<sp/>+=<sp/>(uInt)size_filename;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_getShort(s-&gt;file,&amp;size_extra_field)<sp/>!=<sp/>UNZ_OK)</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>*poffset_local_extrafield=<sp/>s-&gt;cur_file_info_internal.offset_curfile<sp/>+</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZEZIPLOCALHEADER<sp/>+<sp/>size_filename;</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/>*psize_local_extrafield<sp/>=<sp/>(uInt)size_extra_field;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/>*piSizeVar<sp/>+=<sp/>(uInt)size_extra_field;</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1849"><highlight class="comment"><sp/><sp/>Open<sp/>for<sp/>reading<sp/>data<sp/>the<sp/>current<sp/>file<sp/>in<sp/>the<sp/>zipfile.</highlight></codeline>
<codeline lineno="1850"><highlight class="comment"><sp/><sp/>If<sp/>there<sp/>is<sp/>no<sp/>error<sp/>and<sp/>the<sp/>file<sp/>is<sp/>opened,<sp/>the<sp/>return<sp/>value<sp/>is<sp/>UNZ_OK.</highlight></codeline>
<codeline lineno="1851"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unzOpenCurrentFile<sp/>(unzFile<sp/>file)</highlight></codeline>
<codeline lineno="1853"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err=UNZ_OK;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Store;</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>iSizeVar;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunz__s" kindref="compound">unz_s</ref>*<sp/>s;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfile__in__zip__read__info__s" kindref="compound">file_in_zip_read_info_s</ref>*<sp/>pfile_in_zip_read_info;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/>offset_local_extrafield;<sp/><sp/></highlight><highlight class="comment">/*<sp/>offset<sp/>of<sp/>the<sp/>static<sp/>extra<sp/>field<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/><sp/>size_local_extrafield;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>the<sp/>static<sp/>extra<sp/>field<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file==NULL)</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_PARAMERROR;</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/>s=(<ref refid="structunz__s" kindref="compound">unz_s</ref>*)file;</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s-&gt;current_file_ok)</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_PARAMERROR;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;pfile_in_zip_read<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unzCloseCurrentFile(file);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unzlocal_CheckCurrentFileCoherencyHeader(s,&amp;iSizeVar,</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;offset_local_extrafield,&amp;size_local_extrafield)!=UNZ_OK)</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_BADZIPFILE;</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info<sp/>=<sp/>(<ref refid="structfile__in__zip__read__info__s" kindref="compound">file_in_zip_read_info_s</ref>*)</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ALLOC(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structfile__in__zip__read__info__s" kindref="compound">file_in_zip_read_info_s</ref>));</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfile_in_zip_read_info==NULL)</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_INTERNALERROR;</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;read_buffer=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)ALLOC(UNZ_BUFSIZE);</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;offset_local_extrafield<sp/>=<sp/>offset_local_extrafield;</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;size_local_extrafield<sp/>=<sp/>size_local_extrafield;</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;pos_local_extrafield=0;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfile_in_zip_read_info-&gt;read_buffer==NULL)</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRYFREE(pfile_in_zip_read_info);</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_INTERNALERROR;</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;stream_initialised=0;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s-&gt;cur_file_info.compression_method!=0)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(s-&gt;cur_file_info.compression_method!=Z_DEFLATED))</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_BADZIPFILE;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/>Store<sp/>=<sp/>s-&gt;cur_file_info.compression_method==0;</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;crc32_wait=s-&gt;cur_file_info.crc;</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;crc32=0;</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;compression_method<sp/>=</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;cur_file_info.compression_method;</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;file=s-&gt;file;</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;byte_before_the_zipfile=s-&gt;byte_before_the_zipfile;</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;stream.total_out<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Store)</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;stream.zalloc<sp/>=<sp/>(alloc_func)0;</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;stream.zfree<sp/>=<sp/>(free_func)0;</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;stream.opaque<sp/>=<sp/>(voidp)0;<sp/></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err=inflateInit2(&amp;pfile_in_zip_read_info-&gt;stream,<sp/>-MAX_WBITS);</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>==<sp/>Z_OK)</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;stream_initialised=1;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>windowBits<sp/>is<sp/>passed<sp/>&lt;<sp/>0<sp/>to<sp/>tell<sp/>that<sp/>there<sp/>is<sp/>no<sp/>zlib<sp/>header.</highlight></codeline>
<codeline lineno="1917"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>in<sp/>this<sp/>case<sp/>inflate<sp/>*requires*<sp/>an<sp/>extra<sp/>&quot;dummy&quot;<sp/>byte</highlight></codeline>
<codeline lineno="1918"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>after<sp/>the<sp/>compressed<sp/>stream<sp/>in<sp/>order<sp/>to<sp/>complete<sp/>decompression<sp/>and</highlight></codeline>
<codeline lineno="1919"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>return<sp/>Z_STREAM_END.<sp/></highlight></codeline>
<codeline lineno="1920"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>In<sp/>unzip,<sp/>i<sp/>don&apos;t<sp/>wait<sp/>absolutely<sp/>Z_STREAM_END<sp/>because<sp/>I<sp/>known<sp/>the<sp/></highlight></codeline>
<codeline lineno="1921"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>size<sp/>of<sp/>both<sp/>compressed<sp/>and<sp/>uncompressed<sp/>data</highlight></codeline>
<codeline lineno="1922"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;rest_read_compressed<sp/>=<sp/></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;cur_file_info.compressed_size<sp/>;</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;rest_read_uncompressed<sp/>=<sp/></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;cur_file_info.uncompressed_size<sp/>;</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;pos_in_zipfile<sp/>=<sp/></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;cur_file_info_internal.offset_curfile<sp/>+<sp/>SIZEZIPLOCALHEADER<sp/>+<sp/></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iSizeVar;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;stream.avail_in<sp/>=<sp/>(uInt)0;</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;pfile_in_zip_read<sp/>=<sp/>pfile_in_zip_read_info;</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_OK;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1943"><highlight class="comment"><sp/><sp/>Read<sp/>bytes<sp/>from<sp/>the<sp/>current<sp/>file.</highlight></codeline>
<codeline lineno="1944"><highlight class="comment"><sp/><sp/>buf<sp/>contain<sp/>buffer<sp/>where<sp/>data<sp/>must<sp/>be<sp/>copied</highlight></codeline>
<codeline lineno="1945"><highlight class="comment"><sp/><sp/>len<sp/>the<sp/>size<sp/>of<sp/>buf.</highlight></codeline>
<codeline lineno="1946"><highlight class="comment"></highlight></codeline>
<codeline lineno="1947"><highlight class="comment"><sp/><sp/>return<sp/>the<sp/>number<sp/>of<sp/>byte<sp/>copied<sp/>if<sp/>somes<sp/>bytes<sp/>are<sp/>copied</highlight></codeline>
<codeline lineno="1948"><highlight class="comment"><sp/><sp/>return<sp/>0<sp/>if<sp/>the<sp/>end<sp/>of<sp/>file<sp/>was<sp/>reached</highlight></codeline>
<codeline lineno="1949"><highlight class="comment"><sp/><sp/>return<sp/>&lt;0<sp/>with<sp/>error<sp/>code<sp/>if<sp/>there<sp/>is<sp/>an<sp/>error</highlight></codeline>
<codeline lineno="1950"><highlight class="comment"><sp/><sp/><sp/><sp/>(UNZ_ERRNO<sp/>for<sp/>IO<sp/>error,<sp/>or<sp/>zLib<sp/>error<sp/>for<sp/>uncompress<sp/>error)</highlight></codeline>
<codeline lineno="1951"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unzReadCurrentFile<sp/><sp/>(unzFile<sp/>file,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="1953"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err=UNZ_OK;</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>iRead<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunz__s" kindref="compound">unz_s</ref>*<sp/>s;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfile__in__zip__read__info__s" kindref="compound">file_in_zip_read_info_s</ref>*<sp/>pfile_in_zip_read_info;</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file==NULL)</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_PARAMERROR;</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/>s=(<ref refid="structunz__s" kindref="compound">unz_s</ref>*)file;</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info=s-&gt;pfile_in_zip_read;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfile_in_zip_read_info==NULL)</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_PARAMERROR;</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pfile_in_zip_read_info-&gt;read_buffer<sp/>==<sp/>NULL))</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_END_OF_LIST_OF_FILE;</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len==0)</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;stream.next_out<sp/>=<sp/>(Byte*)buf;</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;stream.avail_out<sp/>=<sp/>(uInt)len;</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len&gt;pfile_in_zip_read_info-&gt;rest_read_uncompressed)</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;stream.avail_out<sp/>=<sp/></highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uInt)pfile_in_zip_read_info-&gt;rest_read_uncompressed;</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(pfile_in_zip_read_info-&gt;stream.avail_out&gt;0)</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pfile_in_zip_read_info-&gt;stream.avail_in==0)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pfile_in_zip_read_info-&gt;rest_read_compressed&gt;0))</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uInt<sp/>uReadThis<sp/>=<sp/>UNZ_BUFSIZE;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfile_in_zip_read_info-&gt;rest_read_compressed&lt;uReadThis)</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uReadThis<sp/>=<sp/>(uInt)pfile_in_zip_read_info-&gt;rest_read_compressed;</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(uReadThis<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_EOF;</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;cur_file_info.compressed_size<sp/>==<sp/>pfile_in_zip_read_info-&gt;rest_read_compressed)</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fseek(pfile_in_zip_read_info-&gt;file,</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;pos_in_zipfile<sp/>+<sp/></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;byte_before_the_zipfile,SEEK_SET)!=0)</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(pfile_in_zip_read_info-&gt;read_buffer,uReadThis,1,</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;file)!=1)</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_ERRNO;</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;pos_in_zipfile<sp/>+=<sp/>uReadThis;</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;rest_read_compressed-=uReadThis;</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;stream.next_in<sp/>=<sp/></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Byte*)pfile_in_zip_read_info-&gt;read_buffer;</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;stream.avail_in<sp/>=<sp/>(uInt)uReadThis;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfile_in_zip_read_info-&gt;compression_method==0)</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uInt<sp/>uDoCopy,i<sp/>;</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfile_in_zip_read_info-&gt;stream.avail_out<sp/>&lt;<sp/></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;stream.avail_in)</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uDoCopy<sp/>=<sp/>pfile_in_zip_read_info-&gt;stream.avail_out<sp/>;</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uDoCopy<sp/>=<sp/>pfile_in_zip_read_info-&gt;stream.avail_in<sp/>;</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;uDoCopy;i++)</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(pfile_in_zip_read_info-&gt;stream.next_out+i)<sp/>=</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(pfile_in_zip_read_info-&gt;stream.next_in+i);</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;crc32<sp/>=<sp/>crc32(pfile_in_zip_read_info-&gt;crc32,</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;stream.next_out,</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uDoCopy);</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;rest_read_uncompressed-=uDoCopy;</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;stream.avail_in<sp/>-=<sp/>uDoCopy;</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;stream.avail_out<sp/>-=<sp/>uDoCopy;</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;stream.next_out<sp/>+=<sp/>uDoCopy;</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;stream.next_in<sp/>+=<sp/>uDoCopy;</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;stream.total_out<sp/>+=<sp/>uDoCopy;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iRead<sp/>+=<sp/>uDoCopy;</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uLong<sp/>uTotalOutBefore,uTotalOutAfter;</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Byte<sp/>*bufBefore;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uLong<sp/>uOutThis;</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush=Z_SYNC_FLUSH;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uTotalOutBefore<sp/>=<sp/>pfile_in_zip_read_info-&gt;stream.total_out;</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bufBefore<sp/>=<sp/>pfile_in_zip_read_info-&gt;stream.next_out;</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2042"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((pfile_in_zip_read_info-&gt;rest_read_uncompressed<sp/>==</highlight></codeline>
<codeline lineno="2043"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;stream.avail_out)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2044"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pfile_in_zip_read_info-&gt;rest_read_compressed<sp/>==<sp/>0))</highlight></codeline>
<codeline lineno="2045"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flush<sp/>=<sp/>Z_FINISH;</highlight></codeline>
<codeline lineno="2046"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=inflate(&amp;pfile_in_zip_read_info-&gt;stream,flush);</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uTotalOutAfter<sp/>=<sp/>pfile_in_zip_read_info-&gt;stream.total_out;</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uOutThis<sp/>=<sp/>uTotalOutAfter-uTotalOutBefore;</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;crc32<sp/>=<sp/></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc32(pfile_in_zip_read_info-&gt;crc32,bufBefore,</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uInt)(uOutThis));</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;rest_read_uncompressed<sp/>-=</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uOutThis;</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iRead<sp/>+=<sp/>(uInt)(uTotalOutAfter<sp/>-<sp/>uTotalOutBefore);</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err==Z_STREAM_END)</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(iRead==0)<sp/>?<sp/>UNZ_EOF<sp/>:<sp/>iRead;</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err!=Z_OK)<sp/></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err==Z_OK)</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iRead;</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="2071"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2075"><highlight class="comment"><sp/><sp/>Give<sp/>the<sp/>current<sp/>position<sp/>in<sp/>uncompressed<sp/>data</highlight></codeline>
<codeline lineno="2076"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>unztell<sp/>(unzFile<sp/>file)</highlight></codeline>
<codeline lineno="2078"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunz__s" kindref="compound">unz_s</ref>*<sp/>s;</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfile__in__zip__read__info__s" kindref="compound">file_in_zip_read_info_s</ref>*<sp/>pfile_in_zip_read_info;</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file==NULL)</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_PARAMERROR;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/>s=(<ref refid="structunz__s" kindref="compound">unz_s</ref>*)file;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info=s-&gt;pfile_in_zip_read;</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfile_in_zip_read_info==NULL)</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_PARAMERROR;</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)pfile_in_zip_read_info-&gt;stream.total_out;</highlight></codeline>
<codeline lineno="2090"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2094"><highlight class="comment"><sp/><sp/>return<sp/>1<sp/>if<sp/>the<sp/>end<sp/>of<sp/>file<sp/>was<sp/>reached,<sp/>0<sp/>elsewhere<sp/></highlight></codeline>
<codeline lineno="2095"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unzeof<sp/>(unzFile<sp/>file)</highlight></codeline>
<codeline lineno="2097"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunz__s" kindref="compound">unz_s</ref>*<sp/>s;</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfile__in__zip__read__info__s" kindref="compound">file_in_zip_read_info_s</ref>*<sp/>pfile_in_zip_read_info;</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file==NULL)</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_PARAMERROR;</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/>s=(<ref refid="structunz__s" kindref="compound">unz_s</ref>*)file;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info=s-&gt;pfile_in_zip_read;</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfile_in_zip_read_info==NULL)</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_PARAMERROR;</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfile_in_zip_read_info-&gt;rest_read_uncompressed<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2117"><highlight class="comment"><sp/><sp/>Read<sp/>extra<sp/>field<sp/>from<sp/>the<sp/>current<sp/>file<sp/>(opened<sp/>by<sp/>unzOpenCurrentFile)</highlight></codeline>
<codeline lineno="2118"><highlight class="comment"><sp/><sp/>This<sp/>is<sp/>the<sp/>static-header<sp/>version<sp/>of<sp/>the<sp/>extra<sp/>field<sp/>(sometimes,<sp/>there<sp/>is</highlight></codeline>
<codeline lineno="2119"><highlight class="comment"><sp/><sp/><sp/><sp/>more<sp/>info<sp/>in<sp/>the<sp/>static-header<sp/>version<sp/>than<sp/>in<sp/>the<sp/>central-header)</highlight></codeline>
<codeline lineno="2120"><highlight class="comment"></highlight></codeline>
<codeline lineno="2121"><highlight class="comment"><sp/><sp/>if<sp/>buf==NULL,<sp/>it<sp/>return<sp/>the<sp/>size<sp/>of<sp/>the<sp/>static<sp/>extra<sp/>field<sp/>that<sp/>can<sp/>be<sp/>read</highlight></codeline>
<codeline lineno="2122"><highlight class="comment"></highlight></codeline>
<codeline lineno="2123"><highlight class="comment"><sp/><sp/>if<sp/>buf!=NULL,<sp/>len<sp/>is<sp/>the<sp/>size<sp/>of<sp/>the<sp/>buffer,<sp/>the<sp/>extra<sp/>header<sp/>is<sp/>copied<sp/>in</highlight></codeline>
<codeline lineno="2124"><highlight class="comment"><sp/><sp/><sp/><sp/>buf.</highlight></codeline>
<codeline lineno="2125"><highlight class="comment"><sp/><sp/>the<sp/>return<sp/>value<sp/>is<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>copied<sp/>in<sp/>buf,<sp/>or<sp/>(if<sp/>&lt;0)<sp/></highlight></codeline>
<codeline lineno="2126"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>error<sp/>code</highlight></codeline>
<codeline lineno="2127"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unzGetLocalExtrafield<sp/>(unzFile<sp/>file,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="2129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunz__s" kindref="compound">unz_s</ref>*<sp/>s;</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfile__in__zip__read__info__s" kindref="compound">file_in_zip_read_info_s</ref>*<sp/>pfile_in_zip_read_info;</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>read_now;</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/>size_to_read;</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file==NULL)</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_PARAMERROR;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/>s=(<ref refid="structunz__s" kindref="compound">unz_s</ref>*)file;</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info=s-&gt;pfile_in_zip_read;</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfile_in_zip_read_info==NULL)</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_PARAMERROR;</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/>size_to_read<sp/>=<sp/>(pfile_in_zip_read_info-&gt;size_local_extrafield<sp/>-<sp/></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;pos_local_extrafield);</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"></highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf==NULL)</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)size_to_read;</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len&gt;size_to_read)</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_now<sp/>=<sp/>(uInt)size_to_read;</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_now<sp/>=<sp/>(uInt)len<sp/>;</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read_now==0)</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fseek(pfile_in_zip_read_info-&gt;file,</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;offset_local_extrafield<sp/>+<sp/></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;pos_local_extrafield,SEEK_SET)!=0)</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_ERRNO;</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(buf,(uInt)size_to_read,1,pfile_in_zip_read_info-&gt;file)!=1)</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_ERRNO;</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)read_now;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2169"><highlight class="comment"><sp/><sp/>Close<sp/>the<sp/>file<sp/>in<sp/>zip<sp/>opened<sp/>with<sp/>unzipOpenCurrentFile</highlight></codeline>
<codeline lineno="2170"><highlight class="comment"><sp/><sp/>Return<sp/>UNZ_CRCERROR<sp/>if<sp/>all<sp/>the<sp/>file<sp/>was<sp/>read<sp/>but<sp/>the<sp/>CRC<sp/>is<sp/>not<sp/>good</highlight></codeline>
<codeline lineno="2171"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unzCloseCurrentFile<sp/>(unzFile<sp/>file)</highlight></codeline>
<codeline lineno="2173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err=UNZ_OK;</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunz__s" kindref="compound">unz_s</ref>*<sp/>s;</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfile__in__zip__read__info__s" kindref="compound">file_in_zip_read_info_s</ref>*<sp/>pfile_in_zip_read_info;</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file==NULL)</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_PARAMERROR;</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/>s=(<ref refid="structunz__s" kindref="compound">unz_s</ref>*)file;</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info=s-&gt;pfile_in_zip_read;</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfile_in_zip_read_info==NULL)</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_PARAMERROR;</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"></highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfile_in_zip_read_info-&gt;rest_read_uncompressed<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfile_in_zip_read_info-&gt;crc32<sp/>!=<sp/>pfile_in_zip_read_info-&gt;crc32_wait)</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err=UNZ_CRCERROR;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/>TRYFREE(pfile_in_zip_read_info-&gt;read_buffer);</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;read_buffer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfile_in_zip_read_info-&gt;stream_initialised)</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inflateEnd(&amp;pfile_in_zip_read_info-&gt;stream);</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/>pfile_in_zip_read_info-&gt;stream_initialised<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/>TRYFREE(pfile_in_zip_read_info);</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;pfile_in_zip_read=NULL;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="2205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2209"><highlight class="comment"><sp/><sp/>Get<sp/>the<sp/>global<sp/>comment<sp/>string<sp/>of<sp/>the<sp/>ZipFile,<sp/>in<sp/>the<sp/>szComment<sp/>buffer.</highlight></codeline>
<codeline lineno="2210"><highlight class="comment"><sp/><sp/>uSizeBuf<sp/>is<sp/>the<sp/>size<sp/>of<sp/>the<sp/>szComment<sp/>buffer.</highlight></codeline>
<codeline lineno="2211"><highlight class="comment"><sp/><sp/>return<sp/>the<sp/>number<sp/>of<sp/>byte<sp/>copied<sp/>or<sp/>an<sp/>error<sp/>code<sp/>&lt;0</highlight></codeline>
<codeline lineno="2212"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2213"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unzGetGlobalComment<sp/>(unzFile<sp/>file,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*szComment,<sp/>uLong<sp/>uSizeBuf)</highlight></codeline>
<codeline lineno="2214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunz__s" kindref="compound">unz_s</ref>*<sp/>s;</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/>uReadThis<sp/>;</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file==NULL)</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_PARAMERROR;</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/>s=(<ref refid="structunz__s" kindref="compound">unz_s</ref>*)file;</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/>uReadThis<sp/>=<sp/>uSizeBuf;</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uReadThis&gt;s-&gt;gi.size_comment)</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uReadThis<sp/>=<sp/>s-&gt;gi.size_comment;</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fseek(s-&gt;file,s-&gt;central_pos+22,SEEK_SET)!=0)</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_ERRNO;</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uReadThis&gt;0)</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*szComment=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(szComment,(uInt)uReadThis,1,s-&gt;file)!=1)</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNZ_ERRNO;</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((szComment<sp/>!=<sp/>NULL)<sp/>&amp;&amp;<sp/>(uSizeBuf<sp/>&gt;<sp/>s-&gt;gi.size_comment))</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(szComment+s-&gt;gi.size_comment)=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)uReadThis;</highlight></codeline>
<codeline lineno="2238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>crc32.c<sp/>--<sp/>compute<sp/>the<sp/>CRC-32<sp/>of<sp/>a<sp/>data<sp/>stream</highlight></codeline>
<codeline lineno="2241"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-1998<sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="2242"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h<sp/></highlight></codeline>
<codeline lineno="2243"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@(#)<sp/>$Id:<sp/>unzip.c,v<sp/>1.2<sp/>1999/09/07<sp/>20:51:25<sp/>zoid<sp/>Exp<sp/>$<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DYNAMIC_CRC_TABLE</highlight></codeline>
<codeline lineno="2248"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>crc_table_empty<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uLong<sp/>crc_table[256];</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>make_crc_table<sp/>OF((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2254"><highlight class="comment"><sp/><sp/>Generate<sp/>a<sp/>table<sp/>for<sp/>a<sp/>byte-wise<sp/>32-bit<sp/>CRC<sp/>calculation<sp/>on<sp/>the<sp/>polynomial:</highlight></codeline>
<codeline lineno="2255"><highlight class="comment"><sp/><sp/>x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.</highlight></codeline>
<codeline lineno="2256"><highlight class="comment"></highlight></codeline>
<codeline lineno="2257"><highlight class="comment"><sp/><sp/>Polynomials<sp/>over<sp/>GF(2)<sp/>are<sp/>represented<sp/>in<sp/>binary,<sp/>one<sp/>bit<sp/>per<sp/>coefficient,</highlight></codeline>
<codeline lineno="2258"><highlight class="comment"><sp/><sp/>with<sp/>the<sp/>lowest<sp/>powers<sp/>in<sp/>the<sp/>most<sp/>significant<sp/>bit.<sp/><sp/>Then<sp/>adding<sp/>polynomials</highlight></codeline>
<codeline lineno="2259"><highlight class="comment"><sp/><sp/>is<sp/>just<sp/>exclusive-or,<sp/>and<sp/>multiplying<sp/>a<sp/>polynomial<sp/>by<sp/>x<sp/>is<sp/>a<sp/>right<sp/>shift<sp/>by</highlight></codeline>
<codeline lineno="2260"><highlight class="comment"><sp/><sp/>one.<sp/><sp/>If<sp/>we<sp/>call<sp/>the<sp/>above<sp/>polynomial<sp/>p,<sp/>and<sp/>represent<sp/>a<sp/>byte<sp/>as<sp/>the</highlight></codeline>
<codeline lineno="2261"><highlight class="comment"><sp/><sp/>polynomial<sp/>q,<sp/>also<sp/>with<sp/>the<sp/>lowest<sp/>power<sp/>in<sp/>the<sp/>most<sp/>significant<sp/>bit<sp/>(so<sp/>the</highlight></codeline>
<codeline lineno="2262"><highlight class="comment"><sp/><sp/>byte<sp/>0xb1<sp/>is<sp/>the<sp/>polynomial<sp/>x^7+x^3+x+1),<sp/>then<sp/>the<sp/>CRC<sp/>is<sp/>(q*x^32)<sp/>mod<sp/>p,</highlight></codeline>
<codeline lineno="2263"><highlight class="comment"><sp/><sp/>where<sp/>a<sp/>mod<sp/>b<sp/>means<sp/>the<sp/>remainder<sp/>after<sp/>dividing<sp/>a<sp/>by<sp/>b.</highlight></codeline>
<codeline lineno="2264"><highlight class="comment"></highlight></codeline>
<codeline lineno="2265"><highlight class="comment"><sp/><sp/>This<sp/>calculation<sp/>is<sp/>done<sp/>using<sp/>the<sp/>shift-register<sp/>method<sp/>of<sp/>multiplying<sp/>and</highlight></codeline>
<codeline lineno="2266"><highlight class="comment"><sp/><sp/>taking<sp/>the<sp/>remainder.<sp/><sp/>The<sp/>register<sp/>is<sp/>initialized<sp/>to<sp/>zero,<sp/>and<sp/>for<sp/>each</highlight></codeline>
<codeline lineno="2267"><highlight class="comment"><sp/><sp/>incoming<sp/>bit,<sp/>x^32<sp/>is<sp/>added<sp/>mod<sp/>p<sp/>to<sp/>the<sp/>register<sp/>if<sp/>the<sp/>bit<sp/>is<sp/>a<sp/>one<sp/>(where</highlight></codeline>
<codeline lineno="2268"><highlight class="comment"><sp/><sp/>x^32<sp/>mod<sp/>p<sp/>is<sp/>p+x^32<sp/>=<sp/>x^26+...+1),<sp/>and<sp/>the<sp/>register<sp/>is<sp/>multiplied<sp/>mod<sp/>p<sp/>by</highlight></codeline>
<codeline lineno="2269"><highlight class="comment"><sp/><sp/>x<sp/>(which<sp/>is<sp/>shifting<sp/>right<sp/>by<sp/>one<sp/>and<sp/>adding<sp/>x^32<sp/>mod<sp/>p<sp/>if<sp/>the<sp/>bit<sp/>shifted</highlight></codeline>
<codeline lineno="2270"><highlight class="comment"><sp/><sp/>out<sp/>is<sp/>a<sp/>one).<sp/><sp/>We<sp/>start<sp/>with<sp/>the<sp/>highest<sp/>power<sp/>(least<sp/>significant<sp/>bit)<sp/>of</highlight></codeline>
<codeline lineno="2271"><highlight class="comment"><sp/><sp/>q<sp/>and<sp/>repeat<sp/>for<sp/>all<sp/>eight<sp/>bits<sp/>of<sp/>q.</highlight></codeline>
<codeline lineno="2272"><highlight class="comment"></highlight></codeline>
<codeline lineno="2273"><highlight class="comment"><sp/><sp/>The<sp/>table<sp/>is<sp/>simply<sp/>the<sp/>CRC<sp/>of<sp/>all<sp/>possible<sp/>eight<sp/>bit<sp/>values.<sp/><sp/>This<sp/>is<sp/>all</highlight></codeline>
<codeline lineno="2274"><highlight class="comment"><sp/><sp/>the<sp/>information<sp/>needed<sp/>to<sp/>generate<sp/>CRC&apos;s<sp/>on<sp/>data<sp/>a<sp/>byte<sp/>at<sp/>a<sp/>time<sp/>for<sp/>all</highlight></codeline>
<codeline lineno="2275"><highlight class="comment"><sp/><sp/>combinations<sp/>of<sp/>CRC<sp/>register<sp/>values<sp/>and<sp/>incoming<sp/>bytes.</highlight></codeline>
<codeline lineno="2276"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>make_crc_table()</highlight></codeline>
<codeline lineno="2278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/>uLong<sp/>c;</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>k;</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/>uLong<sp/><ref refid="structpoly" kindref="compound">poly</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>polynomial<sp/>exclusive-or<sp/>pattern<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>terms<sp/>of<sp/>polynomial<sp/>defining<sp/>this<sp/>crc<sp/>(except<sp/>x^32):<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Byte<sp/>p[]<sp/>=<sp/>{0,1,2,4,5,7,8,10,11,12,16,22,23,26};</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>make<sp/>exclusive-or<sp/>pattern<sp/>from<sp/>polynomial<sp/>(0xedb88320L)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/>poly<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(p)/</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Byte);<sp/>n++)</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/>poly<sp/>|=<sp/>1L<sp/>&lt;&lt;<sp/>(31<sp/>-<sp/>p[n]);</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>256;<sp/>n++)</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(uLong)n;</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>8;<sp/>k++)</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>c<sp/>&amp;<sp/>1<sp/>?<sp/>poly<sp/>^<sp/>(c<sp/>&gt;&gt;<sp/>1)<sp/>:<sp/>c<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/>crc_table[n]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/>crc_table_empty<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="2300"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>========================================================================</highlight></codeline>
<codeline lineno="2301"><highlight class="comment"><sp/>*<sp/>Table<sp/>of<sp/>CRC-32&apos;s<sp/>of<sp/>all<sp/>single-byte<sp/>values<sp/>(made<sp/>by<sp/>make_crc_table)</highlight></codeline>
<codeline lineno="2302"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uLong<sp/>crc_table[256]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/>0x00000000L,<sp/>0x77073096L,<sp/>0xee0e612cL,<sp/>0x990951baL,<sp/>0x076dc419L,</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/>0x706af48fL,<sp/>0xe963a535L,<sp/>0x9e6495a3L,<sp/>0x0edb8832L,<sp/>0x79dcb8a4L,</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/>0xe0d5e91eL,<sp/>0x97d2d988L,<sp/>0x09b64c2bL,<sp/>0x7eb17cbdL,<sp/>0xe7b82d07L,</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/>0x90bf1d91L,<sp/>0x1db71064L,<sp/>0x6ab020f2L,<sp/>0xf3b97148L,<sp/>0x84be41deL,</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/>0x1adad47dL,<sp/>0x6ddde4ebL,<sp/>0xf4d4b551L,<sp/>0x83d385c7L,<sp/>0x136c9856L,</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/>0x646ba8c0L,<sp/>0xfd62f97aL,<sp/>0x8a65c9ecL,<sp/>0x14015c4fL,<sp/>0x63066cd9L,</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/>0xfa0f3d63L,<sp/>0x8d080df5L,<sp/>0x3b6e20c8L,<sp/>0x4c69105eL,<sp/>0xd56041e4L,</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/>0xa2677172L,<sp/>0x3c03e4d1L,<sp/>0x4b04d447L,<sp/>0xd20d85fdL,<sp/>0xa50ab56bL,</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/>0x35b5a8faL,<sp/>0x42b2986cL,<sp/>0xdbbbc9d6L,<sp/>0xacbcf940L,<sp/>0x32d86ce3L,</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/>0x45df5c75L,<sp/>0xdcd60dcfL,<sp/>0xabd13d59L,<sp/>0x26d930acL,<sp/>0x51de003aL,</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/>0xc8d75180L,<sp/>0xbfd06116L,<sp/>0x21b4f4b5L,<sp/>0x56b3c423L,<sp/>0xcfba9599L,</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/>0xb8bda50fL,<sp/>0x2802b89eL,<sp/>0x5f058808L,<sp/>0xc60cd9b2L,<sp/>0xb10be924L,</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/>0x2f6f7c87L,<sp/>0x58684c11L,<sp/>0xc1611dabL,<sp/>0xb6662d3dL,<sp/>0x76dc4190L,</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/>0x01db7106L,<sp/>0x98d220bcL,<sp/>0xefd5102aL,<sp/>0x71b18589L,<sp/>0x06b6b51fL,</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/>0x9fbfe4a5L,<sp/>0xe8b8d433L,<sp/>0x7807c9a2L,<sp/>0x0f00f934L,<sp/>0x9609a88eL,</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/>0xe10e9818L,<sp/>0x7f6a0dbbL,<sp/>0x086d3d2dL,<sp/>0x91646c97L,<sp/>0xe6635c01L,</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/>0x6b6b51f4L,<sp/>0x1c6c6162L,<sp/>0x856530d8L,<sp/>0xf262004eL,<sp/>0x6c0695edL,</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/>0x1b01a57bL,<sp/>0x8208f4c1L,<sp/>0xf50fc457L,<sp/>0x65b0d9c6L,<sp/>0x12b7e950L,</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/>0x8bbeb8eaL,<sp/>0xfcb9887cL,<sp/>0x62dd1ddfL,<sp/>0x15da2d49L,<sp/>0x8cd37cf3L,</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/>0xfbd44c65L,<sp/>0x4db26158L,<sp/>0x3ab551ceL,<sp/>0xa3bc0074L,<sp/>0xd4bb30e2L,</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/>0x4adfa541L,<sp/>0x3dd895d7L,<sp/>0xa4d1c46dL,<sp/>0xd3d6f4fbL,<sp/>0x4369e96aL,</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/>0x346ed9fcL,<sp/>0xad678846L,<sp/>0xda60b8d0L,<sp/>0x44042d73L,<sp/>0x33031de5L,</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/>0xaa0a4c5fL,<sp/>0xdd0d7cc9L,<sp/>0x5005713cL,<sp/>0x270241aaL,<sp/>0xbe0b1010L,</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/>0xc90c2086L,<sp/>0x5768b525L,<sp/>0x206f85b3L,<sp/>0xb966d409L,<sp/>0xce61e49fL,</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/>0x5edef90eL,<sp/>0x29d9c998L,<sp/>0xb0d09822L,<sp/>0xc7d7a8b4L,<sp/>0x59b33d17L,</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/>0x2eb40d81L,<sp/>0xb7bd5c3bL,<sp/>0xc0ba6cadL,<sp/>0xedb88320L,<sp/>0x9abfb3b6L,</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/>0x03b6e20cL,<sp/>0x74b1d29aL,<sp/>0xead54739L,<sp/>0x9dd277afL,<sp/>0x04db2615L,</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/>0x73dc1683L,<sp/>0xe3630b12L,<sp/>0x94643b84L,<sp/>0x0d6d6a3eL,<sp/>0x7a6a5aa8L,</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/>0xe40ecf0bL,<sp/>0x9309ff9dL,<sp/>0x0a00ae27L,<sp/>0x7d079eb1L,<sp/>0xf00f9344L,</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/>0x8708a3d2L,<sp/>0x1e01f268L,<sp/>0x6906c2feL,<sp/>0xf762575dL,<sp/>0x806567cbL,</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/>0x196c3671L,<sp/>0x6e6b06e7L,<sp/>0xfed41b76L,<sp/>0x89d32be0L,<sp/>0x10da7a5aL,</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/>0x67dd4accL,<sp/>0xf9b9df6fL,<sp/>0x8ebeeff9L,<sp/>0x17b7be43L,<sp/>0x60b08ed5L,</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/>0xd6d6a3e8L,<sp/>0xa1d1937eL,<sp/>0x38d8c2c4L,<sp/>0x4fdff252L,<sp/>0xd1bb67f1L,</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/>0xa6bc5767L,<sp/>0x3fb506ddL,<sp/>0x48b2364bL,<sp/>0xd80d2bdaL,<sp/>0xaf0a1b4cL,</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/>0x36034af6L,<sp/>0x41047a60L,<sp/>0xdf60efc3L,<sp/>0xa867df55L,<sp/>0x316e8eefL,</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/>0x4669be79L,<sp/>0xcb61b38cL,<sp/>0xbc66831aL,<sp/>0x256fd2a0L,<sp/>0x5268e236L,</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/>0xcc0c7795L,<sp/>0xbb0b4703L,<sp/>0x220216b9L,<sp/>0x5505262fL,<sp/>0xc5ba3bbeL,</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/>0xb2bd0b28L,<sp/>0x2bb45a92L,<sp/>0x5cb36a04L,<sp/>0xc2d7ffa7L,<sp/>0xb5d0cf31L,</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/>0x2cd99e8bL,<sp/>0x5bdeae1dL,<sp/>0x9b64c2b0L,<sp/>0xec63f226L,<sp/>0x756aa39cL,</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/>0x026d930aL,<sp/>0x9c0906a9L,<sp/>0xeb0e363fL,<sp/>0x72076785L,<sp/>0x05005713L,</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/>0x95bf4a82L,<sp/>0xe2b87a14L,<sp/>0x7bb12baeL,<sp/>0x0cb61b38L,<sp/>0x92d28e9bL,</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/>0xe5d5be0dL,<sp/>0x7cdcefb7L,<sp/>0x0bdbdf21L,<sp/>0x86d3d2d4L,<sp/>0xf1d4e242L,</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/>0x68ddb3f8L,<sp/>0x1fda836eL,<sp/>0x81be16cdL,<sp/>0xf6b9265bL,<sp/>0x6fb077e1L,</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/>0x18b74777L,<sp/>0x88085ae6L,<sp/>0xff0f6a70L,<sp/>0x66063bcaL,<sp/>0x11010b5cL,</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/>0x8f659effL,<sp/>0xf862ae69L,<sp/>0x616bffd3L,<sp/>0x166ccf45L,<sp/>0xa00ae278L,</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/>0xd70dd2eeL,<sp/>0x4e048354L,<sp/>0x3903b3c2L,<sp/>0xa7672661L,<sp/>0xd06016f7L,</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/>0x4969474dL,<sp/>0x3e6e77dbL,<sp/>0xaed16a4aL,<sp/>0xd9d65adcL,<sp/>0x40df0b66L,</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/>0x37d83bf0L,<sp/>0xa9bcae53L,<sp/>0xdebb9ec5L,<sp/>0x47b2cf7fL,<sp/>0x30b5ffe9L,</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/>0xbdbdf21cL,<sp/>0xcabac28aL,<sp/>0x53b39330L,<sp/>0x24b4a3a6L,<sp/>0xbad03605L,</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/>0xcdd70693L,<sp/>0x54de5729L,<sp/>0x23d967bfL,<sp/>0xb3667a2eL,<sp/>0xc4614ab8L,</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/>0x5d681b02L,<sp/>0x2a6f2b94L,<sp/>0xb40bbe37L,<sp/>0xc30c8ea1L,<sp/>0x5a05df1bL,</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/>0x2d02ef8dL</highlight></codeline>
<codeline lineno="2356"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2358"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================</highlight></codeline>
<codeline lineno="2360"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>can<sp/>be<sp/>used<sp/>by<sp/>asm<sp/>versions<sp/>of<sp/>crc32()</highlight></codeline>
<codeline lineno="2361"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uLong<sp/>*<sp/>get_crc_table()</highlight></codeline>
<codeline lineno="2363"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DYNAMIC_CRC_TABLE</highlight></codeline>
<codeline lineno="2365"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(crc_table_empty)<sp/>make_crc_table();</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2367"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uLong<sp/>*)crc_table;</highlight></codeline>
<codeline lineno="2368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DO1(buf)<sp/>crc<sp/>=<sp/>crc_table[((int)crc<sp/>^<sp/>(*buf++))<sp/>&amp;<sp/>0xff]<sp/>^<sp/>(crc<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="2372"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DO2(buf)<sp/><sp/>DO1(buf);<sp/>DO1(buf);</highlight></codeline>
<codeline lineno="2373"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DO4(buf)<sp/><sp/>DO2(buf);<sp/>DO2(buf);</highlight></codeline>
<codeline lineno="2374"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DO8(buf)<sp/><sp/>DO4(buf);<sp/>DO4(buf);</highlight></codeline>
<codeline lineno="2375"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2376"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2377"><highlight class="normal">uLong<sp/>crc32(uLong<sp/>crc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Byte<sp/>*buf,<sp/>uInt<sp/>len)</highlight></codeline>
<codeline lineno="2378"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf<sp/>==<sp/>Z_NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0L;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DYNAMIC_CRC_TABLE</highlight></codeline>
<codeline lineno="2381"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(crc_table_empty)</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>make_crc_table();</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2384"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>crc<sp/>^<sp/>0xffffffffL;</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len<sp/>&gt;=<sp/>8)</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DO8(buf);</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len)<sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DO1(buf);</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--len);</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>crc<sp/>^<sp/>0xffffffffL;</highlight></codeline>
<codeline lineno="2394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"></highlight></codeline>
<codeline lineno="2396"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>infblock.h<sp/>--<sp/>header<sp/>to<sp/>use<sp/>infblock.c</highlight></codeline>
<codeline lineno="2397"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-1998<sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="2398"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h<sp/></highlight></codeline>
<codeline lineno="2399"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2400"><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>WARNING:<sp/>this<sp/>file<sp/>should<sp/>*not*<sp/>be<sp/>used<sp/>by<sp/>applications.<sp/>It<sp/>is</highlight></codeline>
<codeline lineno="2402"><highlight class="comment"><sp/><sp/><sp/>part<sp/>of<sp/>the<sp/>implementation<sp/>of<sp/>the<sp/>compression<sp/>library<sp/>and<sp/>is</highlight></codeline>
<codeline lineno="2403"><highlight class="comment"><sp/><sp/><sp/>subject<sp/>to<sp/>change.<sp/>Applications<sp/>should<sp/>only<sp/>use<sp/>zlib.h.</highlight></codeline>
<codeline lineno="2404"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_state</ref>;</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_state</ref><sp/><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref>;</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*<sp/>inflate_blocks_new<sp/>OF((</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>z,</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/>check_func<sp/>c,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>w));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>window<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_blocks<sp/>OF((</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*,</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>,</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initial<sp/>return<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inflate_blocks_reset<sp/>OF((</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*,</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>,</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/>*));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>value<sp/>on<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"></highlight></codeline>
<codeline lineno="2424"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_blocks_free<sp/>OF((</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*,</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref>));</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inflate_set_dictionary<sp/>OF((</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*s,</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Byte<sp/>*d,<sp/><sp/></highlight><highlight class="comment">/*<sp/>dictionary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/><sp/>n));<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>dictionary<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"></highlight></codeline>
<codeline lineno="2433"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_blocks_sync_point<sp/>OF((</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*s));</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>simplify<sp/>the<sp/>use<sp/>of<sp/>the<sp/>inflate_huft<sp/>type<sp/>with<sp/>some<sp/>defines<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>exop<sp/>word.what.Exop</highlight></codeline>
<codeline lineno="2438"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>bits<sp/>word.what.Bits</highlight></codeline>
<codeline lineno="2439"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2440"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Table<sp/>for<sp/>deflate<sp/>from<sp/>PKZIP&apos;s<sp/>appnote.txt.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uInt<sp/>border[]<sp/>=<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Order<sp/>of<sp/>the<sp/>bit<sp/>length<sp/>code<sp/>lengths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>16,<sp/>17,<sp/>18,<sp/>0,<sp/>8,<sp/>7,<sp/>9,<sp/>6,<sp/>10,<sp/>5,<sp/>11,<sp/>4,<sp/>12,<sp/>3,<sp/>13,<sp/>2,<sp/>14,<sp/>1,<sp/>15};</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"></highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>inftrees.h<sp/>--<sp/>header<sp/>to<sp/>use<sp/>inftrees.c</highlight></codeline>
<codeline lineno="2445"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-1998<sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="2446"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h<sp/></highlight></codeline>
<codeline lineno="2447"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>WARNING:<sp/>this<sp/>file<sp/>should<sp/>*not*<sp/>be<sp/>used<sp/>by<sp/>applications.<sp/>It<sp/>is</highlight></codeline>
<codeline lineno="2450"><highlight class="comment"><sp/><sp/><sp/>part<sp/>of<sp/>the<sp/>implementation<sp/>of<sp/>the<sp/>compression<sp/>library<sp/>and<sp/>is</highlight></codeline>
<codeline lineno="2451"><highlight class="comment"><sp/><sp/><sp/>subject<sp/>to<sp/>change.<sp/>Applications<sp/>should<sp/>only<sp/>use<sp/>zlib.h.</highlight></codeline>
<codeline lineno="2452"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2453"><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Huffman<sp/>code<sp/>lookup<sp/>table<sp/>entry--this<sp/>entry<sp/>is<sp/>four<sp/>bytes<sp/>for<sp/>machines</highlight></codeline>
<codeline lineno="2455"><highlight class="comment"><sp/><sp/><sp/>that<sp/>have<sp/>16-bit<sp/>pointers<sp/>(e.g.<sp/>PC&apos;s<sp/>in<sp/>the<sp/>small<sp/>or<sp/>medium<sp/>model).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2456"><highlight class="normal"></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinflate__huft__s" kindref="compound">inflate_huft_s</ref><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref>;</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"></highlight></codeline>
<codeline lineno="2459" refid="structinflate__huft__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinflate__huft__s" kindref="compound">inflate_huft_s</ref><sp/>{</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Byte<sp/>Exop;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>extra<sp/>bits<sp/>or<sp/>operation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Byte<sp/>Bits;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>bits<sp/>in<sp/>this<sp/>code<sp/>or<sp/>subcode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>what;</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>pad;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pad<sp/>structure<sp/>to<sp/>a<sp/>power<sp/>of<sp/>2<sp/>(4<sp/>bytes<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/>}<sp/>word;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>16-bit,<sp/>8<sp/>bytes<sp/>for<sp/>32-bit<sp/>int&apos;s)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/>uInt<sp/>base;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>literal,<sp/>length<sp/>base,<sp/>distance<sp/>base,</highlight></codeline>
<codeline lineno="2468"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>table<sp/>offset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"></highlight></codeline>
<codeline lineno="2471"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Maximum<sp/>size<sp/>of<sp/>dynamic<sp/>tree.<sp/><sp/>The<sp/>maximum<sp/>found<sp/>in<sp/>a<sp/>long<sp/>but<sp/>non-</highlight></codeline>
<codeline lineno="2472"><highlight class="comment"><sp/><sp/><sp/>exhaustive<sp/>search<sp/>was<sp/>1004<sp/>huft<sp/>structures<sp/>(850<sp/>for<sp/>length/literals</highlight></codeline>
<codeline lineno="2473"><highlight class="comment"><sp/><sp/><sp/>and<sp/>154<sp/>for<sp/>distances,<sp/>the<sp/>latter<sp/>actually<sp/>the<sp/>result<sp/>of<sp/>an</highlight></codeline>
<codeline lineno="2474"><highlight class="comment"><sp/><sp/><sp/>exhaustive<sp/>search).<sp/><sp/>The<sp/>actual<sp/>maximum<sp/>is<sp/>not<sp/>known,<sp/>but<sp/>the</highlight></codeline>
<codeline lineno="2475"><highlight class="comment"><sp/><sp/><sp/>value<sp/>below<sp/>is<sp/>more<sp/>than<sp/>safe.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MANY<sp/>1440</highlight></codeline>
<codeline lineno="2477"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_trees_bits<sp/>OF((</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>19<sp/>code<sp/>lengths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>tree<sp/>desired/actual<sp/>depth<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*<sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>tree<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>space<sp/>for<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref>));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>messages<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_trees_dynamic<sp/>OF((</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>literal/length<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>distance<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>that<sp/>many<sp/>(total)<sp/>code<sp/>lengths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>literal<sp/>desired/actual<sp/>bit<sp/>depth<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>distance<sp/>desired/actual<sp/>bit<sp/>depth<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*<sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>literal/length<sp/>tree<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*<sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>distance<sp/>tree<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>space<sp/>for<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref>));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>messages<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight></codeline>
<codeline lineno="2496"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_trees_fixed<sp/>OF((</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>literal<sp/>desired/actual<sp/>bit<sp/>depth<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>distance<sp/>desired/actual<sp/>bit<sp/>depth<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*<sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>literal/length<sp/>tree<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*<sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>distance<sp/>tree<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref>));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>memory<sp/>allocation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2502"><highlight class="normal"></highlight></codeline>
<codeline lineno="2503"><highlight class="normal"></highlight></codeline>
<codeline lineno="2504"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>infcodes.h<sp/>--<sp/>header<sp/>to<sp/>use<sp/>infcodes.c</highlight></codeline>
<codeline lineno="2505"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-1998<sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="2506"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h<sp/></highlight></codeline>
<codeline lineno="2507"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2508"><highlight class="normal"></highlight></codeline>
<codeline lineno="2509"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>WARNING:<sp/>this<sp/>file<sp/>should<sp/>*not*<sp/>be<sp/>used<sp/>by<sp/>applications.<sp/>It<sp/>is</highlight></codeline>
<codeline lineno="2510"><highlight class="comment"><sp/><sp/><sp/>part<sp/>of<sp/>the<sp/>implementation<sp/>of<sp/>the<sp/>compression<sp/>library<sp/>and<sp/>is</highlight></codeline>
<codeline lineno="2511"><highlight class="comment"><sp/><sp/><sp/>subject<sp/>to<sp/>change.<sp/>Applications<sp/>should<sp/>only<sp/>use<sp/>zlib.h.</highlight></codeline>
<codeline lineno="2512"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2513"><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinflate__codes__state" kindref="compound">inflate_codes_state</ref>;</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinflate__codes__state" kindref="compound">inflate_codes_state</ref><sp/><ref refid="structinflate__codes__state" kindref="compound">inflate_codes_statef</ref>;</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structinflate__codes__state" kindref="compound">inflate_codes_statef</ref><sp/>*inflate_codes_new<sp/>OF((</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt,<sp/>uInt,</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*,<sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*,</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>));</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_codes<sp/>OF((</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*,</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>,</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inflate_codes_free<sp/>OF((</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinflate__codes__state" kindref="compound">inflate_codes_statef</ref><sp/>*,</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>));</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>infutil.h<sp/>--<sp/>types<sp/>and<sp/>macros<sp/>common<sp/>to<sp/>blocks<sp/>and<sp/>codes</highlight></codeline>
<codeline lineno="2532"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-1998<sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="2533"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h<sp/></highlight></codeline>
<codeline lineno="2534"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>WARNING:<sp/>this<sp/>file<sp/>should<sp/>*not*<sp/>be<sp/>used<sp/>by<sp/>applications.<sp/>It<sp/>is</highlight></codeline>
<codeline lineno="2537"><highlight class="comment"><sp/><sp/><sp/>part<sp/>of<sp/>the<sp/>implementation<sp/>of<sp/>the<sp/>compression<sp/>library<sp/>and<sp/>is</highlight></codeline>
<codeline lineno="2538"><highlight class="comment"><sp/><sp/><sp/>subject<sp/>to<sp/>change.<sp/>Applications<sp/>should<sp/>only<sp/>use<sp/>zlib.h.</highlight></codeline>
<codeline lineno="2539"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2540"><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_INFUTIL_H</highlight></codeline>
<codeline lineno="2542"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_INFUTIL_H</highlight></codeline>
<codeline lineno="2543"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2544"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TYPE,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>type<sp/>bits<sp/>(3,<sp/>including<sp/>end<sp/>bit)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LENS,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>lengths<sp/>for<sp/>stored<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>STORED,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>processing<sp/>stored<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___t_a_b_l_e" kindref="compound">TABLE</ref>,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>table<sp/>lengths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BTREE,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>bit<sp/>lengths<sp/>tree<sp/>for<sp/>a<sp/>dynamic<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DTREE,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>length,<sp/>distance<sp/>trees<sp/>for<sp/>a<sp/>dynamic<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CODES,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>processing<sp/>fixed<sp/>or<sp/>dynamic<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DRY,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>output<sp/>remaining<sp/>window<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DONE,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>finished<sp/>last<sp/>block,<sp/>done<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BAD}<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>got<sp/>a<sp/>data<sp/>error--stuck<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2555"><highlight class="normal">inflate_block_mode;</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"></highlight></codeline>
<codeline lineno="2557"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>inflate<sp/>blocks<sp/>semi-private<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2558" refid="structinflate__blocks__state" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_state</ref><sp/>{</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"></highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/>inflate_block_mode<sp/><sp/>mode;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>current<sp/>inflate_block<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>mode<sp/>dependent<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>left;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>STORED,<sp/>bytes<sp/>left<sp/>to<sp/>copy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uInt<sp/>table;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>table<sp/>lengths<sp/>(14<sp/>bits)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uInt<sp/>index;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>index<sp/>into<sp/>blens<sp/>(or<sp/>border)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uInt<sp/>*blens;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>lengths<sp/>of<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uInt<sp/>bb;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>length<sp/>tree<sp/>depth<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*tb;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>length<sp/>decoding<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>trees;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>DTREE,<sp/>decoding<sp/>info<sp/>for<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinflate__codes__state" kindref="compound">inflate_codes_statef</ref><sp/></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*codes;</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>decode;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>CODES,<sp/>current<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/>}<sp/>sub;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>submode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/>uInt<sp/>last;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>true<sp/>if<sp/>this<sp/>block<sp/>is<sp/>the<sp/>last<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>mode<sp/>independent<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/>uInt<sp/>bitk;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>in<sp/>bit<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/>uLong<sp/>bitb;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*hufts;<sp/><sp/></highlight><highlight class="comment">/*<sp/>single<sp/>malloc<sp/>for<sp/>tree<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/>Byte<sp/>*window;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>sliding<sp/>window<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/>Byte<sp/>*end;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>one<sp/>byte<sp/>after<sp/>sliding<sp/>window<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/>Byte<sp/>*read;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>window<sp/>read<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/>Byte<sp/>*write;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>window<sp/>write<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/>check_func<sp/>checkfn;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/>uLong<sp/>check;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>on<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal"></highlight></codeline>
<codeline lineno="2591"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"></highlight></codeline>
<codeline lineno="2593"><highlight class="normal"></highlight></codeline>
<codeline lineno="2594"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>defines<sp/>for<sp/>inflate<sp/>input/output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>update<sp/>pointers<sp/>and<sp/>return<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UPDBITS<sp/>{s-&gt;bitb=b;s-&gt;bitk=k;}</highlight></codeline>
<codeline lineno="2597"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>UPDIN<sp/>{z-&gt;avail_in=n;z-&gt;total_in+=p-z-&gt;next_in;z-&gt;next_in=p;}</highlight></codeline>
<codeline lineno="2598"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>UPDOUT<sp/>{s-&gt;write=q;}</highlight></codeline>
<codeline lineno="2599"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>UPDATE<sp/>{UPDBITS<sp/>UPDIN<sp/>UPDOUT}</highlight></codeline>
<codeline lineno="2600"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LEAVE<sp/>{UPDATE<sp/>return<sp/>inflate_flush(s,z,r);}</highlight></codeline>
<codeline lineno="2601"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/><sp/><sp/>get<sp/>bytes<sp/>and<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOADIN<sp/>{p=z-&gt;next_in;n=z-&gt;avail_in;b=s-&gt;bitb;k=s-&gt;bitk;}</highlight></codeline>
<codeline lineno="2603"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>NEEDBYTE<sp/>{if(n)r=Z_OK;else<sp/>LEAVE}</highlight></codeline>
<codeline lineno="2604"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>NEXTBYTE<sp/>(n--,*p++)</highlight></codeline>
<codeline lineno="2605"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>NEEDBITS(j)<sp/>{while(k&lt;(j)){NEEDBYTE;b|=((uLong)NEXTBYTE)&lt;&lt;k;k+=8;}}</highlight></codeline>
<codeline lineno="2606"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DUMPBITS(j)<sp/>{b&gt;&gt;=(j);k-=(j);}</highlight></codeline>
<codeline lineno="2607"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/><sp/><sp/>output<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2608"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WAVAIL<sp/>(uInt)(q&lt;s-&gt;read?s-&gt;read-q-1:s-&gt;end-q)</highlight></codeline>
<codeline lineno="2609"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LOADOUT<sp/>{q=s-&gt;write;m=(uInt)WAVAIL;}</highlight></codeline>
<codeline lineno="2610"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>WRAP<sp/>{if(q==s-&gt;end&amp;&amp;s-&gt;read!=s-&gt;window){q=s-&gt;window;m=(uInt)WAVAIL;}}</highlight></codeline>
<codeline lineno="2611"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FLUSH<sp/>{UPDOUT<sp/>r=inflate_flush(s,z,r);<sp/>LOADOUT}</highlight></codeline>
<codeline lineno="2612"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>NEEDOUT<sp/>{if(m==0){WRAP<sp/>if(m==0){FLUSH<sp/>WRAP<sp/>if(m==0)<sp/>LEAVE}}r=Z_OK;}</highlight></codeline>
<codeline lineno="2613"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>OUTBYTE(a)<sp/>{*q++=(Byte)(a);m--;}</highlight></codeline>
<codeline lineno="2614"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/><sp/><sp/>load<sp/>static<sp/>pointers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOAD<sp/>{LOADIN<sp/>LOADOUT}</highlight></codeline>
<codeline lineno="2616"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>masks<sp/>for<sp/>lower<sp/>bits<sp/>(size<sp/>given<sp/>to<sp/>avoid<sp/>silly<sp/>warnings<sp/>with<sp/>Visual<sp/>C++)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2618"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>And&apos;ing<sp/>with<sp/>mask[n]<sp/>masks<sp/>the<sp/>lower<sp/>n<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2619"><highlight class="normal">uInt<sp/>inflate_mask[17]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0000,</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0001,<sp/>0x0003,<sp/>0x0007,<sp/>0x000f,<sp/>0x001f,<sp/>0x003f,<sp/>0x007f,<sp/>0x00ff,</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/>0x01ff,<sp/>0x03ff,<sp/>0x07ff,<sp/>0x0fff,<sp/>0x1fff,<sp/>0x3fff,<sp/>0x7fff,<sp/>0xffff</highlight></codeline>
<codeline lineno="2623"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>copy<sp/>as<sp/>much<sp/>as<sp/>possible<sp/>from<sp/>the<sp/>sliding<sp/>window<sp/>to<sp/>the<sp/>output<sp/>area<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2626"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_flush<sp/>OF((</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*,</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>,</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"></highlight></codeline>
<codeline lineno="2631"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2632"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2634"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2635"><highlight class="comment"><sp/><sp/><sp/>Notes<sp/>beyond<sp/>the<sp/>1.93a<sp/>appnote.txt:</highlight></codeline>
<codeline lineno="2636"><highlight class="comment"></highlight></codeline>
<codeline lineno="2637"><highlight class="comment"><sp/><sp/><sp/>1.<sp/>Distance<sp/>pointers<sp/>never<sp/>point<sp/>before<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>output</highlight></codeline>
<codeline lineno="2638"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>stream.</highlight></codeline>
<codeline lineno="2639"><highlight class="comment"><sp/><sp/><sp/>2.<sp/>Distance<sp/>pointers<sp/>can<sp/>point<sp/>back<sp/>across<sp/>blocks,<sp/>up<sp/>to<sp/>32k<sp/>away.</highlight></codeline>
<codeline lineno="2640"><highlight class="comment"><sp/><sp/><sp/>3.<sp/>There<sp/>is<sp/>an<sp/>implied<sp/>maximum<sp/>of<sp/>7<sp/>bits<sp/>for<sp/>the<sp/>bit<sp/>length<sp/>table<sp/>and</highlight></codeline>
<codeline lineno="2641"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>15<sp/>bits<sp/>for<sp/>the<sp/>actual<sp/>data.</highlight></codeline>
<codeline lineno="2642"><highlight class="comment"><sp/><sp/><sp/>4.<sp/>If<sp/>only<sp/>one<sp/>code<sp/>exists,<sp/>then<sp/>it<sp/>is<sp/>encoded<sp/>using<sp/>one<sp/>bit.<sp/><sp/>(Zero</highlight></codeline>
<codeline lineno="2643"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>would<sp/>be<sp/>more<sp/>efficient,<sp/>but<sp/>perhaps<sp/>a<sp/>little<sp/>confusing.)<sp/><sp/>If<sp/>two</highlight></codeline>
<codeline lineno="2644"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>codes<sp/>exist,<sp/>they<sp/>are<sp/>coded<sp/>using<sp/>one<sp/>bit<sp/>each<sp/>(0<sp/>and<sp/>1).</highlight></codeline>
<codeline lineno="2645"><highlight class="comment"><sp/><sp/><sp/>5.<sp/>There<sp/>is<sp/>no<sp/>way<sp/>of<sp/>sending<sp/>zero<sp/>distance<sp/>codes--a<sp/>dummy<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="2646"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>sent<sp/>if<sp/>there<sp/>are<sp/>none.<sp/><sp/>(History:<sp/>a<sp/>pre<sp/>2.0<sp/>version<sp/>of<sp/>PKZIP<sp/>would</highlight></codeline>
<codeline lineno="2647"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>store<sp/>blocks<sp/>with<sp/>no<sp/>distance<sp/>codes,<sp/>but<sp/>this<sp/>was<sp/>discovered<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="2648"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>too<sp/>harsh<sp/>a<sp/>criterion.)<sp/><sp/>Valid<sp/>only<sp/>for<sp/>1.93a.<sp/><sp/>2.04c<sp/>does<sp/>allow</highlight></codeline>
<codeline lineno="2649"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>zero<sp/>distance<sp/>codes,<sp/>which<sp/>is<sp/>sent<sp/>as<sp/>one<sp/>code<sp/>of<sp/>zero<sp/>bits<sp/>in</highlight></codeline>
<codeline lineno="2650"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>length.</highlight></codeline>
<codeline lineno="2651"><highlight class="comment"><sp/><sp/><sp/>6.<sp/>There<sp/>are<sp/>up<sp/>to<sp/>286<sp/>literal/length<sp/>codes.<sp/><sp/>Code<sp/>256<sp/>represents<sp/>the</highlight></codeline>
<codeline lineno="2652"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>end-of-block.<sp/><sp/>Note<sp/>however<sp/>that<sp/>the<sp/>static<sp/>length<sp/>tree<sp/>defines</highlight></codeline>
<codeline lineno="2653"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>288<sp/>codes<sp/>just<sp/>to<sp/>fill<sp/>out<sp/>the<sp/>Huffman<sp/>codes.<sp/><sp/>Codes<sp/>286<sp/>and<sp/>287</highlight></codeline>
<codeline lineno="2654"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>cannot<sp/>be<sp/>used<sp/>though,<sp/>since<sp/>there<sp/>is<sp/>no<sp/>length<sp/>base<sp/>or<sp/>extra<sp/>bits</highlight></codeline>
<codeline lineno="2655"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>defined<sp/>for<sp/>them.<sp/><sp/>Similarily,<sp/>there<sp/>are<sp/>up<sp/>to<sp/>30<sp/>distance<sp/>codes.</highlight></codeline>
<codeline lineno="2656"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>However,<sp/>static<sp/>trees<sp/>define<sp/>32<sp/>codes<sp/>(all<sp/>5<sp/>bits)<sp/>to<sp/>fill<sp/>out<sp/>the</highlight></codeline>
<codeline lineno="2657"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Huffman<sp/>codes,<sp/>but<sp/>the<sp/>last<sp/>two<sp/>had<sp/>better<sp/>not<sp/>show<sp/>up<sp/>in<sp/>the<sp/>data.</highlight></codeline>
<codeline lineno="2658"><highlight class="comment"><sp/><sp/><sp/>7.<sp/>Unzip<sp/>can<sp/>check<sp/>dynamic<sp/>Huffman<sp/>blocks<sp/>for<sp/>complete<sp/>code<sp/>sets.</highlight></codeline>
<codeline lineno="2659"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>exception<sp/>is<sp/>that<sp/>a<sp/>single<sp/>code<sp/>would<sp/>not<sp/>be<sp/>complete<sp/>(see<sp/>#4).</highlight></codeline>
<codeline lineno="2660"><highlight class="comment"><sp/><sp/><sp/>8.<sp/>The<sp/>five<sp/>bits<sp/>following<sp/>the<sp/>block<sp/>type<sp/>is<sp/>really<sp/>the<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="2661"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>literal<sp/>codes<sp/>sent<sp/>minus<sp/>257.</highlight></codeline>
<codeline lineno="2662"><highlight class="comment"><sp/><sp/><sp/>9.<sp/>Length<sp/>codes<sp/>8,16,16<sp/>are<sp/>interpreted<sp/>as<sp/>13<sp/>length<sp/>codes<sp/>of<sp/>8<sp/>bits</highlight></codeline>
<codeline lineno="2663"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>(1+6+6).<sp/><sp/>Therefore,<sp/>to<sp/>output<sp/>three<sp/>times<sp/>the<sp/>length,<sp/>you<sp/>output</highlight></codeline>
<codeline lineno="2664"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>three<sp/>codes<sp/>(1+1+1),<sp/>whereas<sp/>to<sp/>output<sp/>four<sp/>times<sp/>the<sp/>same<sp/>length,</highlight></codeline>
<codeline lineno="2665"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>you<sp/>only<sp/>need<sp/>two<sp/>codes<sp/>(1+3).<sp/><sp/>Hmm.</highlight></codeline>
<codeline lineno="2666"><highlight class="comment"><sp/><sp/>10.<sp/>In<sp/>the<sp/>tree<sp/>reconstruction<sp/>algorithm,<sp/>Code<sp/>=<sp/>Code<sp/>+<sp/>Increment</highlight></codeline>
<codeline lineno="2667"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>only<sp/>if<sp/>BitLength(i)<sp/>is<sp/>not<sp/>zero.<sp/><sp/>(Pretty<sp/>obvious.)</highlight></codeline>
<codeline lineno="2668"><highlight class="comment"><sp/><sp/>11.<sp/>Correction:<sp/>4<sp/>Bits:<sp/>#<sp/>of<sp/>Bit<sp/>Length<sp/>codes<sp/>-<sp/>4<sp/><sp/><sp/><sp/><sp/>(4<sp/>-<sp/>19)</highlight></codeline>
<codeline lineno="2669"><highlight class="comment"><sp/><sp/>12.<sp/>Note:<sp/>length<sp/>code<sp/>284<sp/>can<sp/>represent<sp/>227-258,<sp/>but<sp/>length<sp/>code<sp/>285</highlight></codeline>
<codeline lineno="2670"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>really<sp/>is<sp/>258.<sp/><sp/>The<sp/>last<sp/>length<sp/>deserves<sp/>its<sp/>own,<sp/>short<sp/>code</highlight></codeline>
<codeline lineno="2671"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>since<sp/>it<sp/>gets<sp/>used<sp/>a<sp/>lot<sp/>in<sp/>very<sp/>redundant<sp/>files.<sp/><sp/>The<sp/>length</highlight></codeline>
<codeline lineno="2672"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>258<sp/>is<sp/>special<sp/>since<sp/>258<sp/>-<sp/>3<sp/>(the<sp/>min<sp/>match<sp/>length)<sp/>is<sp/>255.</highlight></codeline>
<codeline lineno="2673"><highlight class="comment"><sp/><sp/>13.<sp/>The<sp/>literal/length<sp/>and<sp/>distance<sp/>code<sp/>bit<sp/>lengths<sp/>are<sp/>read<sp/>as<sp/>a</highlight></codeline>
<codeline lineno="2674"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>single<sp/>stream<sp/>of<sp/>lengths.<sp/><sp/>It<sp/>is<sp/>possible<sp/>(and<sp/>advantageous)<sp/>for</highlight></codeline>
<codeline lineno="2675"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>repeat<sp/>code<sp/>(16,<sp/>17,<sp/>or<sp/>18)<sp/>to<sp/>go<sp/>across<sp/>the<sp/>boundary<sp/>between</highlight></codeline>
<codeline lineno="2676"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>two<sp/>sets<sp/>of<sp/>lengths.</highlight></codeline>
<codeline lineno="2677"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2678"><highlight class="normal"></highlight></codeline>
<codeline lineno="2679"><highlight class="normal"></highlight></codeline>
<codeline lineno="2680"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inflate_blocks_reset(<ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*s,<sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>z,<sp/>uLong<sp/>*c)</highlight></codeline>
<codeline lineno="2681"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/>*c<sp/>=<sp/>s-&gt;check;</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;mode<sp/>==<sp/>BTREE<sp/>||<sp/>s-&gt;mode<sp/>==<sp/>DTREE)</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/>ZFREE(z,<sp/>s-&gt;sub.trees.blens);</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;mode<sp/>==<sp/>CODES)</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/>inflate_codes_free(s-&gt;sub.decode.codes,<sp/>z);</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/>s-&gt;mode<sp/>=<sp/>TYPE;</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/>s-&gt;bitk<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/>s-&gt;bitb<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/>s-&gt;read<sp/>=<sp/>s-&gt;write<sp/>=<sp/>s-&gt;window;</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;checkfn<sp/>!=<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/>z-&gt;adler<sp/>=<sp/>s-&gt;check<sp/>=<sp/>(*s-&gt;checkfn)(0L,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Byte<sp/>*)Z_NULL,<sp/>0);</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/>Tracev((</highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/>blocks<sp/>reset\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2695"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"></highlight></codeline>
<codeline lineno="2697"><highlight class="normal"></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*inflate_blocks_new(<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>z,<sp/>check_func<sp/>c,<sp/>uInt<sp/>w)</highlight></codeline>
<codeline lineno="2699"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*s;</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"></highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s<sp/>=<sp/>(<ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*)ZALLOC</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(z,1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_state</ref>)))<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s-&gt;hufts<sp/>=</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*)ZALLOC(z,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref>),<sp/>MANY))<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/>ZFREE(z,<sp/>s);</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_NULL;</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s-&gt;window<sp/>=<sp/>(Byte<sp/>*)ZALLOC(z,<sp/>1,<sp/>w))<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/>ZFREE(z,<sp/>s-&gt;hufts);</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/>ZFREE(z,<sp/>s);</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_NULL;</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/>s-&gt;end<sp/>=<sp/>s-&gt;window<sp/>+<sp/>w;</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/>s-&gt;checkfn<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/>s-&gt;mode<sp/>=<sp/>TYPE;</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/>Tracev((</highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/>blocks<sp/>allocated\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/>inflate_blocks_reset(s,<sp/>z,<sp/>Z_NULL);</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="2723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"></highlight></codeline>
<codeline lineno="2725"><highlight class="normal"></highlight></codeline>
<codeline lineno="2726"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_blocks(<ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*s,<sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>z,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r)</highlight></codeline>
<codeline lineno="2727"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/>uInt<sp/>t;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>temporary<sp/>storage<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/>uLong<sp/>b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/>uInt<sp/>k;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>in<sp/>bit<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/>Byte<sp/>*p;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>input<sp/>data<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/>uInt<sp/>n;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bytes<sp/>available<sp/>there<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/>Byte<sp/>*q;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>output<sp/>window<sp/>write<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/>uInt<sp/>m;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bytes<sp/>to<sp/>end<sp/>of<sp/>window<sp/>or<sp/>read<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2735"><highlight class="normal"></highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>input/output<sp/>information<sp/>to<sp/>locals<sp/>(UPDATE<sp/>macro<sp/>restores)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/>LOAD</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"></highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>process<sp/>input<sp/>based<sp/>on<sp/>current<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(s-&gt;mode)</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TYPE:</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NEEDBITS(3)</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(uInt)b<sp/>&amp;<sp/>7;</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;last<sp/>=<sp/>t<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(t<sp/>&gt;&gt;<sp/>1)</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>stored<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tracev((</highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/>stored<sp/>block%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;last<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(last)&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(3)</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>k<sp/>&amp;<sp/>7;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>go<sp/>to<sp/>byte<sp/>boundary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(t)</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>LENS;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>length<sp/>of<sp/>stored<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>1:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fixed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tracev((&quot;inflate:<sp/><sp/><sp/><sp/><sp/>fixed<sp/>codes<sp/>block%s\n&quot;,</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;last<sp/>?<sp/>&quot;<sp/>(last)&quot;<sp/>:<sp/>&quot;&quot;));</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uInt<sp/>bl,<sp/>bd;</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*tl,<sp/>*td;</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"></highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inflate_trees_fixed(&amp;bl,<sp/>&amp;bd,<sp/>&amp;tl,<sp/>&amp;td,<sp/>z);</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.decode.codes<sp/>=<sp/>inflate_codes_new(bl,<sp/>bd,<sp/>tl,<sp/>td,<sp/>z);</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;sub.decode.codes<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_MEM_ERROR;</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(3)</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>CODES;</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>2:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>dynamic<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tracev((&quot;inflate:<sp/><sp/><sp/><sp/><sp/>dynamic<sp/>codes<sp/>block%s\n&quot;,</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;last<sp/>?<sp/>&quot;<sp/>(last)&quot;<sp/>:<sp/>&quot;&quot;));</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(3)</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/><ref refid="struct___t_a_b_l_e" kindref="compound">TABLE</ref>;</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>3:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>illegal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(3)</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>BAD;</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&quot;invalid<sp/>block<sp/>type&quot;;</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>LENS:</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NEEDBITS(32)</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((((~b)<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xffff)<sp/>!=<sp/>(b<sp/>&amp;<sp/>0xffff))</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>BAD;</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;invalid<sp/>stored<sp/>block<sp/>lengths&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.left<sp/>=<sp/>(uInt)b<sp/>&amp;<sp/>0xffff;</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>k<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>dump<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Tracev((</highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>stored<sp/>length<sp/>%u\n&quot;</highlight><highlight class="normal">,<sp/>s-&gt;sub.left));</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>s-&gt;sub.left<sp/>?<sp/>STORED<sp/>:<sp/>(s-&gt;last<sp/>?<sp/>DRY<sp/>:<sp/>TYPE);</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STORED:</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NEEDOUT</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>s-&gt;sub.left;</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&gt;<sp/>n)<sp/>t<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&gt;<sp/>m)<sp/>t<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS_X<sp/>//<sp/>Optimization</highlight></codeline>
<codeline lineno="2810"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t&gt;64)<sp/>{</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zmemcpy(q,<sp/>p,<sp/>t);</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t1;</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(t1=0;<sp/>t1&lt;t;<sp/>t1++)<sp/>{</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q[t1]<sp/>=<sp/>p[t1];</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="2820"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zmemcpy(q,<sp/>p,<sp/>t);</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2822"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>t;<sp/><sp/>n<sp/>-=<sp/>t;</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>+=<sp/>t;<sp/><sp/>m<sp/>-=<sp/>t;</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s-&gt;sub.left<sp/>-=<sp/>t)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Tracev((</highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>stored<sp/>end,<sp/>%lu<sp/>total<sp/>out\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;total_out<sp/>+<sp/>(q<sp/>&gt;=<sp/>s-&gt;read<sp/>?<sp/>q<sp/>-<sp/>s-&gt;read<sp/>:</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(s-&gt;end<sp/>-<sp/>s-&gt;read)<sp/>+<sp/>(q<sp/>-<sp/>s-&gt;window))));</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>s-&gt;last<sp/>?<sp/>DRY<sp/>:<sp/>TYPE;</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="struct___t_a_b_l_e" kindref="compound">TABLE</ref>:</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NEEDBITS(14)</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.table<sp/>=<sp/>t<sp/>=<sp/>(uInt)b<sp/>&amp;<sp/>0x3fff;</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PKZIP_BUG_WORKAROUND</highlight></codeline>
<codeline lineno="2835"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((t<sp/>&amp;<sp/>0x1f)<sp/>&gt;<sp/>29<sp/>||<sp/>((t<sp/>&gt;&gt;<sp/>5)<sp/>&amp;<sp/>0x1f)<sp/>&gt;<sp/>29)</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>BAD;</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;too<sp/>many<sp/>length<sp/>or<sp/>distance<sp/>symbols&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2843"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>258<sp/>+<sp/>(t<sp/>&amp;<sp/>0x1f)<sp/>+<sp/>((t<sp/>&gt;&gt;<sp/>5)<sp/>&amp;<sp/>0x1f);</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s-&gt;sub.trees.blens<sp/>=<sp/>(uInt*)ZALLOC(z,<sp/>t,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uInt)))<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_MEM_ERROR;</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(14)</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Tracev((&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>table<sp/>sizes<sp/>ok\n&quot;));</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>BTREE;</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>BTREE:</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(s-&gt;sub.trees.index<sp/>&lt;<sp/>4<sp/>+<sp/>(s-&gt;sub.trees.table<sp/>&gt;&gt;<sp/>10))</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NEEDBITS(3)</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.blens[border[s-&gt;sub.trees.index++]]<sp/>=<sp/>(uInt)b<sp/>&amp;<sp/>7;</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(3)</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(s-&gt;sub.trees.index<sp/>&lt;<sp/>19)</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.blens[border[s-&gt;sub.trees.index++]]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.bb<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>inflate_trees_bits(s-&gt;sub.trees.blens,<sp/>&amp;s-&gt;sub.trees.bb,</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;s-&gt;sub.trees.tb,<sp/>s-&gt;hufts,<sp/>z);</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(t<sp/>!=<sp/>Z_OK)</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZFREE(z,<sp/>s-&gt;sub.trees.blens);</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>Z_DATA_ERROR)</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>BAD;</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Tracev((</highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>tree<sp/>ok\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>DTREE;</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DTREE:</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(t<sp/>=<sp/>s-&gt;sub.trees.table,</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.index<sp/>&lt;<sp/>258<sp/>+<sp/>(t<sp/>&amp;<sp/>0x1f)<sp/>+<sp/>((t<sp/>&gt;&gt;<sp/>5)<sp/>&amp;<sp/>0x1f))</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*h;</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uInt<sp/>i,<sp/>j,<sp/>c;</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"></highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>s-&gt;sub.trees.bb;</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NEEDBITS(t)</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>s-&gt;sub.trees.tb<sp/>+<sp/>((uInt)b<sp/>&amp;<sp/>inflate_mask[t]);</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>h-&gt;bits;</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>h-&gt;base;</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(c<sp/>&lt;<sp/>16)</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(t)</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.blens[s-&gt;sub.trees.index++]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/></highlight><highlight class="comment">/*<sp/>c<sp/>==<sp/>16..18<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>c<sp/>==<sp/>18<sp/>?<sp/>7<sp/>:<sp/>c<sp/>-<sp/>14;</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>c<sp/>==<sp/>18<sp/>?<sp/>11<sp/>:<sp/>3;</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NEEDBITS(t<sp/>+<sp/>i)</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(t)</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>+=<sp/>(uInt)b<sp/>&amp;<sp/>inflate_mask[i];</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(i)</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>s-&gt;sub.trees.index;</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>s-&gt;sub.trees.table;</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(i<sp/>+<sp/>j<sp/>&gt;<sp/>258<sp/>+<sp/>(t<sp/>&amp;<sp/>0x1f)<sp/>+<sp/>((t<sp/>&gt;&gt;<sp/>5)<sp/>&amp;<sp/>0x1f)<sp/>||</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(c<sp/>==<sp/>16<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>1))</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZFREE(z,<sp/>s-&gt;sub.trees.blens);</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>BAD;</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;invalid<sp/>bit<sp/>length<sp/>repeat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>c<sp/>==<sp/>16<sp/>?<sp/>s-&gt;sub.trees.blens[i<sp/>-<sp/>1]<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.blens[i++]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--j);</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.tb<sp/>=<sp/>Z_NULL;</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uInt<sp/>bl,<sp/>bd;</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*tl,<sp/>*td;</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinflate__codes__state" kindref="compound">inflate_codes_statef</ref><sp/>*c;</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"></highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bl<sp/>=<sp/>9;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>must<sp/>be<sp/>&lt;=<sp/>9<sp/>for<sp/>lookahead<sp/>assumptions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bd<sp/>=<sp/>6;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>must<sp/>be<sp/>&lt;=<sp/>9<sp/>for<sp/>lookahead<sp/>assumptions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>s-&gt;sub.trees.table;</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>inflate_trees_dynamic(257<sp/>+<sp/>(t<sp/>&amp;<sp/>0x1f),<sp/>1<sp/>+<sp/>((t<sp/>&gt;&gt;<sp/>5)<sp/>&amp;<sp/>0x1f),</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.trees.blens,<sp/>&amp;bl,<sp/>&amp;bd,<sp/>&amp;tl,<sp/>&amp;td,</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;hufts,<sp/>z);</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZFREE(z,<sp/>s-&gt;sub.trees.blens);</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>!=<sp/>Z_OK)</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>(uInt)Z_DATA_ERROR)</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>BAD;</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tracev((</highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>trees<sp/>ok\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>inflate_codes_new(bl,<sp/>bd,<sp/>tl,<sp/>td,<sp/>z))<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_MEM_ERROR;</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;sub.decode.codes<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>CODES;</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CODES:</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UPDATE</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((r<sp/>=<sp/>inflate_codes(s,<sp/>z,<sp/>r))<sp/>!=<sp/>Z_STREAM_END)</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inflate_flush(s,<sp/>z,<sp/>r);</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_OK;</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inflate_codes_free(s-&gt;sub.decode.codes,<sp/>z);</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOAD</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Tracev((</highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>codes<sp/>end,<sp/>%lu<sp/>total<sp/>out\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;total_out<sp/>+<sp/>(q<sp/>&gt;=<sp/>s-&gt;read<sp/>?<sp/>q<sp/>-<sp/>s-&gt;read<sp/>:</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(s-&gt;end<sp/>-<sp/>s-&gt;read)<sp/>+<sp/>(q<sp/>-<sp/>s-&gt;window))));</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s-&gt;last)</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>TYPE;</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>DRY;</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DRY:</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;read<sp/>!=<sp/>s-&gt;write)</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>DONE;</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DONE:</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_STREAM_END;</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BAD:</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_STREAM_ERROR;</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2979"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"></highlight></codeline>
<codeline lineno="2981"><highlight class="normal"></highlight></codeline>
<codeline lineno="2982"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_blocks_free(<ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*s,<sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>z)</highlight></codeline>
<codeline lineno="2983"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/>inflate_blocks_reset(s,<sp/>z,<sp/>Z_NULL);</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/>ZFREE(z,<sp/>s-&gt;window);</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/>ZFREE(z,<sp/>s-&gt;hufts);</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/>ZFREE(z,<sp/>s);</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/>Tracev((</highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/>blocks<sp/>freed\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_OK;</highlight></codeline>
<codeline lineno="2990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"></highlight></codeline>
<codeline lineno="2992"><highlight class="normal"></highlight></codeline>
<codeline lineno="2993"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inflate_set_dictionary(<ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Byte<sp/>*d,<sp/>uInt<sp/>n)</highlight></codeline>
<codeline lineno="2994"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/>zmemcpy(s-&gt;window,<sp/>d,<sp/>n);</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/>s-&gt;read<sp/>=<sp/>s-&gt;write<sp/>=<sp/>s-&gt;window<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="2997"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"></highlight></codeline>
<codeline lineno="2999"><highlight class="normal"></highlight></codeline>
<codeline lineno="3000"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>true<sp/>if<sp/>inflate<sp/>is<sp/>currently<sp/>at<sp/>the<sp/>end<sp/>of<sp/>a<sp/>block<sp/>generated</highlight></codeline>
<codeline lineno="3001"><highlight class="comment"><sp/>*<sp/>by<sp/>Z_SYNC_FLUSH<sp/>or<sp/>Z_FULL_FLUSH.<sp/></highlight></codeline>
<codeline lineno="3002"><highlight class="comment"><sp/>*<sp/>IN<sp/>assertion:<sp/>s<sp/>!=<sp/>Z_NULL</highlight></codeline>
<codeline lineno="3003"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3004"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_blocks_sync_point(<ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*s)</highlight></codeline>
<codeline lineno="3005"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s-&gt;mode<sp/>==<sp/>LENS;</highlight></codeline>
<codeline lineno="3007"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"></highlight></codeline>
<codeline lineno="3009"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>copy<sp/>as<sp/>much<sp/>as<sp/>possible<sp/>from<sp/>the<sp/>sliding<sp/>window<sp/>to<sp/>the<sp/>output<sp/>area<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3010"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_flush(<ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*s,<sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>z,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r)</highlight></codeline>
<codeline lineno="3011"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/>uInt<sp/>n;</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/>Byte<sp/>*p;</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/>Byte<sp/>*q;</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"></highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>static<sp/>copies<sp/>of<sp/>source<sp/>and<sp/>destination<sp/>pointers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>z-&gt;next_out;</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/>q<sp/>=<sp/>s-&gt;read;</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"></highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>number<sp/>of<sp/>bytes<sp/>to<sp/>copy<sp/>as<sp/>as<sp/>end<sp/>of<sp/>window<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>(uInt)((q<sp/>&lt;=<sp/>s-&gt;write<sp/>?<sp/>s-&gt;write<sp/>:<sp/>s-&gt;end)<sp/>-<sp/>q);</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>z-&gt;avail_out)<sp/>n<sp/>=<sp/>z-&gt;avail_out;</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&amp;&amp;<sp/>r<sp/>==<sp/>Z_BUF_ERROR)<sp/>r<sp/>=<sp/>Z_OK;</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"></highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>counters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/>z-&gt;avail_out<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/>z-&gt;total_out<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"></highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>check<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;checkfn<sp/>!=<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/>z-&gt;adler<sp/>=<sp/>s-&gt;check<sp/>=<sp/>(*s-&gt;checkfn)(s-&gt;check,<sp/>q,<sp/>n);</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"></highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>as<sp/>as<sp/>end<sp/>of<sp/>window<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3034"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS_X<sp/>//<sp/>Optimization</highlight></codeline>
<codeline lineno="3035"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n&gt;64)<sp/>{</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/>zmemcpy(p,<sp/>q,<sp/>n);</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t1;</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(t1=0;<sp/>t1&lt;n;<sp/>t1++)<sp/>{</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[t1]<sp/>=<sp/>q[t1];</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="3045"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>zmemcpy(p,<sp/>q,<sp/>n);</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3047"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>p<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/>q<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"></highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>see<sp/>if<sp/>more<sp/>to<sp/>copy<sp/>at<sp/>beginning<sp/>of<sp/>window<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q<sp/>==<sp/>s-&gt;end)</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>wrap<sp/>pointers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/>q<sp/>=<sp/>s-&gt;window;</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;write<sp/>==<sp/>s-&gt;end)</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;write<sp/>=<sp/>s-&gt;window;</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"></highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>bytes<sp/>to<sp/>copy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(uInt)(s-&gt;write<sp/>-<sp/>q);</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>z-&gt;avail_out)<sp/>n<sp/>=<sp/>z-&gt;avail_out;</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&amp;&amp;<sp/>r<sp/>==<sp/>Z_BUF_ERROR)<sp/>r<sp/>=<sp/>Z_OK;</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"></highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>counters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/>z-&gt;avail_out<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/>z-&gt;total_out<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"></highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>check<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;checkfn<sp/>!=<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;adler<sp/>=<sp/>s-&gt;check<sp/>=<sp/>(*s-&gt;checkfn)(s-&gt;check,<sp/>q,<sp/>n);</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"></highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3072"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS_X<sp/>//<sp/>Optimization</highlight></codeline>
<codeline lineno="3073"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n&gt;64)<sp/>{</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zmemcpy(p,<sp/>q,<sp/>n);</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t1;</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(t1=0;<sp/>t1&lt;n;<sp/>t1++)<sp/>{</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[t1]<sp/>=<sp/>q[t1];</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="3083"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>zmemcpy(p,<sp/>q,<sp/>n);</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3085"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/>q<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"></highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>pointers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/>z-&gt;next_out<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/>s-&gt;read<sp/>=<sp/>q;</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"></highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>done<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="3095"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"></highlight></codeline>
<codeline lineno="3097"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>inftrees.c<sp/>--<sp/>generate<sp/>Huffman<sp/>trees<sp/>for<sp/>efficient<sp/>decoding</highlight></codeline>
<codeline lineno="3098"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-1998<sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="3099"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h<sp/></highlight></codeline>
<codeline lineno="3100"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3101"><highlight class="normal"></highlight></codeline>
<codeline lineno="3102"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>inflate_copyright[]<sp/>=</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>inflate<sp/>1.1.3<sp/>Copyright<sp/>1995-1998<sp/>Mark<sp/>Adler<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3105"><highlight class="comment"><sp/><sp/>If<sp/>you<sp/>use<sp/>the<sp/>zlib<sp/>library<sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>is<sp/>welcome</highlight></codeline>
<codeline lineno="3106"><highlight class="comment"><sp/><sp/>in<sp/>the<sp/>documentation<sp/>of<sp/>your<sp/>product.<sp/>If<sp/>for<sp/>some<sp/>reason<sp/>you<sp/>cannot</highlight></codeline>
<codeline lineno="3107"><highlight class="comment"><sp/><sp/>include<sp/>such<sp/>an<sp/>acknowledgment,<sp/>I<sp/>would<sp/>appreciate<sp/>that<sp/>you<sp/>keep<sp/>this</highlight></codeline>
<codeline lineno="3108"><highlight class="comment"><sp/><sp/>copyright<sp/>string<sp/>in<sp/>the<sp/>executable<sp/>of<sp/>your<sp/>product.</highlight></codeline>
<codeline lineno="3109"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3110"><highlight class="normal"></highlight></codeline>
<codeline lineno="3111"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>simplify<sp/>the<sp/>use<sp/>of<sp/>the<sp/>inflate_huft<sp/>type<sp/>with<sp/>some<sp/>defines<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3112"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>exop<sp/>word.what.Exop</highlight></codeline>
<codeline lineno="3113"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>bits<sp/>word.what.Bits</highlight></codeline>
<codeline lineno="3114"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3115"><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>huft_build<sp/>OF((</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>code<sp/>lengths<sp/>in<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>&quot;simple&quot;<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uInt<sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>list<sp/>of<sp/>base<sp/>values<sp/>for<sp/>non-simple<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uInt<sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>list<sp/>of<sp/>extra<sp/>bits<sp/>for<sp/>non-simple<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>**,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>result:<sp/>starting<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>maximum<sp/>lookup<sp/>bits<sp/>(returns<sp/>actual)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>space<sp/>for<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>*,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>hufts<sp/>used<sp/>in<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>*<sp/>));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>space<sp/>for<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3127"><highlight class="normal"></highlight></codeline>
<codeline lineno="3128"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Tables<sp/>for<sp/>deflate<sp/>from<sp/>PKZIP&apos;s<sp/>appnote.txt.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3129"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uInt<sp/>cplens[31]<sp/>=<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>lengths<sp/>for<sp/>literal<sp/>codes<sp/>257..285<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10,<sp/>11,<sp/>13,<sp/>15,<sp/>17,<sp/>19,<sp/>23,<sp/>27,<sp/>31,</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>35,<sp/>43,<sp/>51,<sp/>59,<sp/>67,<sp/>83,<sp/>99,<sp/>115,<sp/>131,<sp/>163,<sp/>195,<sp/>227,<sp/>258,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>see<sp/>note<sp/>#13<sp/>above<sp/>about<sp/>258<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3133"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uInt<sp/>cplext[31]<sp/>=<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Extra<sp/>bits<sp/>for<sp/>literal<sp/>codes<sp/>257..285<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>1,<sp/>1,<sp/>2,<sp/>2,<sp/>2,<sp/>2,</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>4,<sp/>4,<sp/>4,<sp/>4,<sp/>5,<sp/>5,<sp/>5,<sp/>5,<sp/>0,<sp/>112,<sp/>112};<sp/></highlight><highlight class="comment">/*<sp/>112==invalid<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3136"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uInt<sp/>cpdist[30]<sp/>=<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>offsets<sp/>for<sp/>distance<sp/>codes<sp/>0..29<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>7,<sp/>9,<sp/>13,<sp/>17,<sp/>25,<sp/>33,<sp/>49,<sp/>65,<sp/>97,<sp/>129,<sp/>193,</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>257,<sp/>385,<sp/>513,<sp/>769,<sp/>1025,<sp/>1537,<sp/>2049,<sp/>3073,<sp/>4097,<sp/>6145,</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8193,<sp/>12289,<sp/>16385,<sp/>24577};</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uInt<sp/>cpdext[30]<sp/>=<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Extra<sp/>bits<sp/>for<sp/>distance<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>1,<sp/>2,<sp/>2,<sp/>3,<sp/>3,<sp/>4,<sp/>4,<sp/>5,<sp/>5,<sp/>6,<sp/>6,</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7,<sp/>7,<sp/>8,<sp/>8,<sp/>9,<sp/>9,<sp/>10,<sp/>10,<sp/>11,<sp/>11,</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>12,<sp/>12,<sp/>13,<sp/>13};</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"></highlight></codeline>
<codeline lineno="3145"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3146"><highlight class="comment"><sp/><sp/><sp/>Huffman<sp/>code<sp/>decoding<sp/>is<sp/>performed<sp/>using<sp/>a<sp/>multi-level<sp/>table<sp/>lookup.</highlight></codeline>
<codeline lineno="3147"><highlight class="comment"><sp/><sp/><sp/>The<sp/>fastest<sp/>way<sp/>to<sp/>decode<sp/>is<sp/>to<sp/>simply<sp/>build<sp/>a<sp/>lookup<sp/>table<sp/>whose</highlight></codeline>
<codeline lineno="3148"><highlight class="comment"><sp/><sp/><sp/>size<sp/>is<sp/>determined<sp/>by<sp/>the<sp/>longest<sp/>code.<sp/><sp/>However,<sp/>the<sp/>time<sp/>it<sp/>takes</highlight></codeline>
<codeline lineno="3149"><highlight class="comment"><sp/><sp/><sp/>to<sp/>build<sp/>this<sp/>table<sp/>can<sp/>also<sp/>be<sp/>a<sp/>factor<sp/>if<sp/>the<sp/>data<sp/>being<sp/>decoded</highlight></codeline>
<codeline lineno="3150"><highlight class="comment"><sp/><sp/><sp/>is<sp/>not<sp/>very<sp/>long.<sp/><sp/>The<sp/>most<sp/>common<sp/>codes<sp/>are<sp/>necessarily<sp/>the</highlight></codeline>
<codeline lineno="3151"><highlight class="comment"><sp/><sp/><sp/>shortest<sp/>codes,<sp/>so<sp/>those<sp/>codes<sp/>dominate<sp/>the<sp/>decoding<sp/>time,<sp/>and<sp/>hence</highlight></codeline>
<codeline lineno="3152"><highlight class="comment"><sp/><sp/><sp/>the<sp/>speed.<sp/><sp/>The<sp/>idea<sp/>is<sp/>you<sp/>can<sp/>have<sp/>a<sp/>shorter<sp/>table<sp/>that<sp/>decodes<sp/>the</highlight></codeline>
<codeline lineno="3153"><highlight class="comment"><sp/><sp/><sp/>shorter,<sp/>more<sp/>probable<sp/>codes,<sp/>and<sp/>then<sp/>point<sp/>to<sp/>subsidiary<sp/>tables<sp/>for</highlight></codeline>
<codeline lineno="3154"><highlight class="comment"><sp/><sp/><sp/>the<sp/>longer<sp/>codes.<sp/><sp/>The<sp/>time<sp/>it<sp/>costs<sp/>to<sp/>decode<sp/>the<sp/>longer<sp/>codes<sp/>is</highlight></codeline>
<codeline lineno="3155"><highlight class="comment"><sp/><sp/><sp/>then<sp/>traded<sp/>against<sp/>the<sp/>time<sp/>it<sp/>takes<sp/>to<sp/>make<sp/>longer<sp/>tables.</highlight></codeline>
<codeline lineno="3156"><highlight class="comment"></highlight></codeline>
<codeline lineno="3157"><highlight class="comment"><sp/><sp/><sp/>This<sp/>results<sp/>of<sp/>this<sp/>trade<sp/>are<sp/>in<sp/>the<sp/>variables<sp/>lbits<sp/>and<sp/>dbits</highlight></codeline>
<codeline lineno="3158"><highlight class="comment"><sp/><sp/><sp/>below.<sp/><sp/>lbits<sp/>is<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>the<sp/>first<sp/>level<sp/>table<sp/>for<sp/>literal/</highlight></codeline>
<codeline lineno="3159"><highlight class="comment"><sp/><sp/><sp/>length<sp/>codes<sp/>can<sp/>decode<sp/>in<sp/>one<sp/>step,<sp/>and<sp/>dbits<sp/>is<sp/>the<sp/>same<sp/>thing<sp/>for</highlight></codeline>
<codeline lineno="3160"><highlight class="comment"><sp/><sp/><sp/>the<sp/>distance<sp/>codes.<sp/><sp/>Subsequent<sp/>tables<sp/>are<sp/>also<sp/>less<sp/>than<sp/>or<sp/>equal<sp/>to</highlight></codeline>
<codeline lineno="3161"><highlight class="comment"><sp/><sp/><sp/>those<sp/>sizes.<sp/><sp/>These<sp/>values<sp/>may<sp/>be<sp/>adjusted<sp/>either<sp/>when<sp/>all<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="3162"><highlight class="comment"><sp/><sp/><sp/>codes<sp/>are<sp/>shorter<sp/>than<sp/>that,<sp/>in<sp/>which<sp/>case<sp/>the<sp/>longest<sp/>code<sp/>length<sp/>in</highlight></codeline>
<codeline lineno="3163"><highlight class="comment"><sp/><sp/><sp/>bits<sp/>is<sp/>used,<sp/>or<sp/>when<sp/>the<sp/>shortest<sp/>code<sp/>is<sp/>*longer*<sp/>than<sp/>the<sp/>requested</highlight></codeline>
<codeline lineno="3164"><highlight class="comment"><sp/><sp/><sp/>table<sp/>size,<sp/>in<sp/>which<sp/>case<sp/>the<sp/>length<sp/>of<sp/>the<sp/>shortest<sp/>code<sp/>in<sp/>bits<sp/>is</highlight></codeline>
<codeline lineno="3165"><highlight class="comment"><sp/><sp/><sp/>used.</highlight></codeline>
<codeline lineno="3166"><highlight class="comment"></highlight></codeline>
<codeline lineno="3167"><highlight class="comment"><sp/><sp/><sp/>There<sp/>are<sp/>two<sp/>different<sp/>values<sp/>for<sp/>the<sp/>two<sp/>tables,<sp/>since<sp/>they<sp/>code<sp/>a</highlight></codeline>
<codeline lineno="3168"><highlight class="comment"><sp/><sp/><sp/>different<sp/>number<sp/>of<sp/>possibilities<sp/>each.<sp/><sp/>The<sp/>literal/length<sp/>table</highlight></codeline>
<codeline lineno="3169"><highlight class="comment"><sp/><sp/><sp/>codes<sp/>286<sp/>possible<sp/>values,<sp/>or<sp/>in<sp/>a<sp/>flat<sp/>code,<sp/>a<sp/>little<sp/>over<sp/>eight</highlight></codeline>
<codeline lineno="3170"><highlight class="comment"><sp/><sp/><sp/>bits.<sp/><sp/>The<sp/>distance<sp/>table<sp/>codes<sp/>30<sp/>possible<sp/>values,<sp/>or<sp/>a<sp/>little<sp/>less</highlight></codeline>
<codeline lineno="3171"><highlight class="comment"><sp/><sp/><sp/>than<sp/>five<sp/>bits,<sp/>flat.<sp/><sp/>The<sp/>optimum<sp/>values<sp/>for<sp/>speed<sp/>end<sp/>up<sp/>being</highlight></codeline>
<codeline lineno="3172"><highlight class="comment"><sp/><sp/><sp/>about<sp/>one<sp/>bit<sp/>more<sp/>than<sp/>those,<sp/>so<sp/>lbits<sp/>is<sp/>8+1<sp/>and<sp/>dbits<sp/>is<sp/>5+1.</highlight></codeline>
<codeline lineno="3173"><highlight class="comment"><sp/><sp/><sp/>The<sp/>optimum<sp/>values<sp/>may<sp/>differ<sp/>though<sp/>from<sp/>machine<sp/>to<sp/>machine,<sp/>and</highlight></codeline>
<codeline lineno="3174"><highlight class="comment"><sp/><sp/><sp/>possibly<sp/>even<sp/>between<sp/>compilers.<sp/><sp/>Your<sp/>mileage<sp/>may<sp/>vary.</highlight></codeline>
<codeline lineno="3175"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3176"><highlight class="normal"></highlight></codeline>
<codeline lineno="3177"><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>BMAX<sp/>needs<sp/>to<sp/>be<sp/>larger<sp/>than<sp/>16,<sp/>then<sp/>h<sp/>and<sp/>x[]<sp/>should<sp/>be<sp/>uLong.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3179"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMAX<sp/>15<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>maximum<sp/>bit<sp/>length<sp/>of<sp/>any<sp/>code<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3180"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3181"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>huft_build(uInt<sp/>*b,<sp/>uInt<sp/>n,<sp/>uInt<sp/>s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uInt<sp/>*d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uInt<sp/>*e,<sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>**<sp/>t,<sp/>uInt<sp/>*m,<sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*hp,<sp/>uInt<sp/>*hn,<sp/>uInt<sp/>*v)</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"></highlight><highlight class="comment">//uInt<sp/>*b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>code<sp/>lengths<sp/>in<sp/>bits<sp/>(all<sp/>assumed<sp/>&lt;=<sp/>BMAX)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3183"><highlight class="normal"></highlight><highlight class="comment">//uInt<sp/>n;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>number<sp/>of<sp/>codes<sp/>(assumed<sp/>&lt;=<sp/>288)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3184"><highlight class="normal"></highlight><highlight class="comment">//uInt<sp/>s;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>number<sp/>of<sp/>simple-valued<sp/>codes<sp/>(0..s-1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3185"><highlight class="normal"></highlight><highlight class="comment">//const<sp/>uInt<sp/>*d;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>list<sp/>of<sp/>base<sp/>values<sp/>for<sp/>non-simple<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3186"><highlight class="normal"></highlight><highlight class="comment">//const<sp/>uInt<sp/>*e;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>list<sp/>of<sp/>extra<sp/>bits<sp/>for<sp/>non-simple<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3187"><highlight class="normal"></highlight><highlight class="comment">//inflate_huft<sp/>**<sp/>t;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>result:<sp/>starting<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3188"><highlight class="normal"></highlight><highlight class="comment">//uInt<sp/>*m;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>maximum<sp/>lookup<sp/>bits,<sp/>returns<sp/>actual<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3189"><highlight class="normal"></highlight><highlight class="comment">//inflate_huft<sp/>*hp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>space<sp/>for<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3190"><highlight class="normal"></highlight><highlight class="comment">//uInt<sp/>*hn;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>hufts<sp/>used<sp/>in<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3191"><highlight class="normal"></highlight><highlight class="comment">//uInt<sp/>*v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>working<sp/>area:<sp/>values<sp/>in<sp/>order<sp/>of<sp/>bit<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3192"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Given<sp/>a<sp/>list<sp/>of<sp/>code<sp/>lengths<sp/>and<sp/>a<sp/>maximum<sp/>table<sp/>size,<sp/>make<sp/>a<sp/>set<sp/>of</highlight></codeline>
<codeline lineno="3193"><highlight class="comment"><sp/><sp/><sp/>tables<sp/>to<sp/>decode<sp/>that<sp/>set<sp/>of<sp/>codes.<sp/><sp/>Return<sp/>Z_OK<sp/>on<sp/>success,<sp/>Z_BUF_ERROR</highlight></codeline>
<codeline lineno="3194"><highlight class="comment"><sp/><sp/><sp/>if<sp/>the<sp/>given<sp/>code<sp/>set<sp/>is<sp/>incomplete<sp/>(the<sp/>tables<sp/>are<sp/>still<sp/>built<sp/>in<sp/>this</highlight></codeline>
<codeline lineno="3195"><highlight class="comment"><sp/><sp/><sp/>case),<sp/>Z_DATA_ERROR<sp/>if<sp/>the<sp/>input<sp/>is<sp/>invalid<sp/>(an<sp/>over-subscribed<sp/>set<sp/>of</highlight></codeline>
<codeline lineno="3196"><highlight class="comment"><sp/><sp/><sp/>lengths),<sp/>or<sp/>Z_MEM_ERROR<sp/>if<sp/>not<sp/>enough<sp/>memory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"></highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/>uInt<sp/>a;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>counter<sp/>for<sp/>codes<sp/>of<sp/>length<sp/>k<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/>uInt<sp/>c[BMAX+1];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>length<sp/>count<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/>uInt<sp/>f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>i<sp/>repeats<sp/>in<sp/>table<sp/>every<sp/>f<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>maximum<sp/>code<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>table<sp/>level<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uInt<sp/>i;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>counter,<sp/>current<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uInt<sp/>j;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>counter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>bits<sp/>in<sp/>current<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>per<sp/>table<sp/>(returned<sp/>in<sp/>m)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/>uInt<sp/>mask;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(1<sp/>&lt;&lt;<sp/>w)<sp/>-<sp/>1,<sp/>to<sp/>avoid<sp/>cc<sp/>-O<sp/>bug<sp/>on<sp/>HP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uInt<sp/>*p;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>into<sp/>c[],<sp/>b[],<sp/>or<sp/>v[]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*q;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>points<sp/>to<sp/>current<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinflate__huft__s" kindref="compound">inflate_huft_s</ref><sp/>r;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>table<sp/>entry<sp/>for<sp/>structure<sp/>assignment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*u[BMAX];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>table<sp/>stack<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>before<sp/>this<sp/>table<sp/>==<sp/>(l<sp/>*<sp/>h)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/>uInt<sp/>x[BMAX+1];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>offsets,<sp/>then<sp/>code<sp/>stack<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/>uInt<sp/>*xp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>into<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>dummy<sp/>codes<sp/>added<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/>uInt<sp/>z;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>entries<sp/>in<sp/>current<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3218"><highlight class="normal"></highlight></codeline>
<codeline lineno="3219"><highlight class="normal"></highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Generate<sp/>counts<sp/>for<sp/>each<sp/>bit<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>C0<sp/>*p++<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3223"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>C2<sp/>C0<sp/>C0<sp/>C0<sp/>C0</highlight></codeline>
<codeline lineno="3224"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>C4<sp/>C2<sp/>C2<sp/>C2<sp/>C2</highlight></codeline>
<codeline lineno="3225"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>C4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>clear<sp/>c[]--assume<sp/>BMAX+1<sp/>is<sp/>16<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>b;<sp/><sp/>i<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/>c[*p++]++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>assume<sp/>all<sp/>entries<sp/>&lt;=<sp/>BMAX<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--i);</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c[0]<sp/>==<sp/>n)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>null<sp/>input--all<sp/>zero<sp/>length<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/>*t<sp/>=<sp/>(<ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*)Z_NULL;</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/>*m<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_OK;</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"></highlight></codeline>
<codeline lineno="3237"><highlight class="normal"></highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>minimum<sp/>and<sp/>maximum<sp/>length,<sp/>bound<sp/>*m<sp/>by<sp/>those<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/>l<sp/>=<sp/>*m;</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>1;<sp/>j<sp/>&lt;=<sp/>BMAX;<sp/>j++)</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c[j])</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/>k<sp/>=<sp/>j;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>minimum<sp/>code<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((uInt)l<sp/>&lt;<sp/>j)</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/>l<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>BMAX;<sp/>i;<sp/>i--)</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c[i])</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/>g<sp/>=<sp/>i;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>maximum<sp/>code<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((uInt)l<sp/>&gt;<sp/>i)</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/>l<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/>*m<sp/>=<sp/>l;</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"></highlight></codeline>
<codeline lineno="3254"><highlight class="normal"></highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Adjust<sp/>last<sp/>length<sp/>count<sp/>to<sp/>fill<sp/>out<sp/>codes,<sp/>if<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>j;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++,<sp/>y<sp/>&lt;&lt;=<sp/>1)</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y<sp/>-=<sp/>c[j])<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y<sp/>-=<sp/>c[i])<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/>c[i]<sp/>+=<sp/>y;</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"></highlight></codeline>
<codeline lineno="3263"><highlight class="normal"></highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Generate<sp/>starting<sp/>offsets<sp/>into<sp/>the<sp/>value<sp/>table<sp/>for<sp/>each<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/>x[1]<sp/>=<sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>c<sp/>+<sp/>1;<sp/><sp/>xp<sp/>=<sp/>x<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--i)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>note<sp/>that<sp/>i<sp/>==<sp/>g<sp/>from<sp/>above<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/>*xp++<sp/>=<sp/>(j<sp/>+=<sp/>*p++);</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"></highlight></codeline>
<codeline lineno="3271"><highlight class="normal"></highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>a<sp/>table<sp/>of<sp/>values<sp/>in<sp/>order<sp/>of<sp/>bit<sp/>lengths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>b;<sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((j<sp/>=<sp/>*p++)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[x[j]++]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(++i<sp/>&lt;<sp/>n);</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>x[g];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>n<sp/>to<sp/>length<sp/>of<sp/>v<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3279"><highlight class="normal"></highlight></codeline>
<codeline lineno="3280"><highlight class="normal"></highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Generate<sp/>the<sp/>Huffman<sp/>codes<sp/>and<sp/>for<sp/>each,<sp/>make<sp/>the<sp/>table<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/>x[0]<sp/>=<sp/>i<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>Huffman<sp/>code<sp/>is<sp/>zero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>grab<sp/>values<sp/>in<sp/>bit<sp/>order<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/>h<sp/>=<sp/>-1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>tables<sp/>yet--level<sp/>-1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/>w<sp/>=<sp/>-l;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>decoded<sp/>==<sp/>(l<sp/>*<sp/>h)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/>u[0]<sp/>=<sp/>(<ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*)Z_NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>just<sp/>to<sp/>keep<sp/>compilers<sp/>happy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/>q<sp/>=<sp/>(<ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*)Z_NULL;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ditto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ditto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"></highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>go<sp/>through<sp/>the<sp/>bit<sp/>lengths<sp/>(k<sp/>already<sp/>is<sp/>bits<sp/>in<sp/>shortest<sp/>code)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>k<sp/>&lt;=<sp/>g;<sp/>k++)</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>c[k];</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(a--)</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>here<sp/>i<sp/>is<sp/>the<sp/>Huffman<sp/>code<sp/>of<sp/>length<sp/>k<sp/>bits<sp/>for<sp/>value<sp/>*p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>make<sp/>tables<sp/>up<sp/>to<sp/>required<sp/>level<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(k<sp/>&gt;<sp/>w<sp/>+<sp/>l)</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h++;</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>+=<sp/>l;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>previous<sp/>table<sp/>always<sp/>l<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3302"><highlight class="normal"></highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>minimum<sp/>size<sp/>table<sp/>less<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>l<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>g<sp/>-<sp/>w;</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>z<sp/>&gt;<sp/>(uInt)l<sp/>?<sp/>l<sp/>:<sp/>z;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>table<sp/>size<sp/>upper<sp/>limit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((f<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(j<sp/>=<sp/>k<sp/>-<sp/>w))<sp/>&gt;<sp/>a<sp/>+<sp/>1)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>try<sp/>a<sp/>k-w<sp/>bit<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>too<sp/>few<sp/>codes<sp/>for<sp/>k-w<sp/>bit<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>-=<sp/>a<sp/>+<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>deduct<sp/>codes<sp/>from<sp/>patterns<sp/>left<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xp<sp/>=<sp/>c<sp/>+<sp/>k;</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>z)</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(++j<sp/>&lt;<sp/>z)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>try<sp/>smaller<sp/>tables<sp/>up<sp/>to<sp/>z<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((f<sp/>&lt;&lt;=<sp/>1)<sp/>&lt;=<sp/>*++xp)</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>enough<sp/>codes<sp/>to<sp/>use<sp/>up<sp/>j<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>-=<sp/>*xp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>else<sp/>deduct<sp/>codes<sp/>from<sp/>patterns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>j;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>table<sp/>entries<sp/>for<sp/>j-bit<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3319"><highlight class="normal"></highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>new<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*hn<sp/>+<sp/>z<sp/>&gt;<sp/>MANY)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(note:<sp/>doesn&apos;t<sp/>matter<sp/>for<sp/>fixed)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_MEM_ERROR;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>not<sp/>enough<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u[h]<sp/>=<sp/>q<sp/>=<sp/>hp<sp/>+<sp/>*hn;</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*hn<sp/>+=<sp/>z;</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"></highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>connect<sp/>to<sp/>last<sp/>table,<sp/>if<sp/>there<sp/>is<sp/>one<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h)</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[h]<sp/>=<sp/>i;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>save<sp/>pattern<sp/>for<sp/>backing<sp/>up<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.bits<sp/>=<sp/>(Byte)l;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>to<sp/>dump<sp/>before<sp/>this<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.exop<sp/>=<sp/>(Byte)j;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>in<sp/>this<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>i<sp/>&gt;&gt;<sp/>(w<sp/>-<sp/>l);</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.base<sp/>=<sp/>(uInt)(q<sp/>-<sp/>u[h-1]<sp/>-<sp/>j);<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>offset<sp/>to<sp/>this<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u[h-1][j]<sp/>=<sp/>r;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>connect<sp/>to<sp/>last<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*t<sp/>=<sp/>q;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>table<sp/>is<sp/>returned<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"></highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>up<sp/>table<sp/>entry<sp/>in<sp/>r<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r.bits<sp/>=<sp/>(Byte)(k<sp/>-<sp/>w);</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&gt;=<sp/>v<sp/>+<sp/>n)</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.exop<sp/>=<sp/>128<sp/>+<sp/>64;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>out<sp/>of<sp/>values--invalid<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p<sp/>&lt;<sp/>s)</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.exop<sp/>=<sp/>(Byte)(*p<sp/>&lt;<sp/>256<sp/>?<sp/>0<sp/>:<sp/>32<sp/>+<sp/>64);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>256<sp/>is<sp/>end-of-block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.base<sp/>=<sp/>*p++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>simple<sp/>code<sp/>is<sp/>just<sp/>the<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.exop<sp/>=<sp/>(Byte)(e[*p<sp/>-<sp/>s]<sp/>+<sp/>16<sp/>+<sp/>64);</highlight><highlight class="comment">/*<sp/>non-simple--look<sp/>up<sp/>in<sp/>lists<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.base<sp/>=<sp/>d[*p++<sp/>-<sp/>s];</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"></highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fill<sp/>code-like<sp/>entries<sp/>with<sp/>r<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(k<sp/>-<sp/>w);</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>i<sp/>&gt;&gt;<sp/>w;<sp/>j<sp/>&lt;<sp/>z;<sp/>j<sp/>+=<sp/>f)</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q[j]<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"></highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>backwards<sp/>increment<sp/>the<sp/>k-bit<sp/>code<sp/>i<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(k<sp/>-<sp/>1);<sp/>i<sp/>&amp;<sp/>j;<sp/>j<sp/>&gt;&gt;=<sp/>1)</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>^=<sp/>j;</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>^=<sp/>j;</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"></highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>backup<sp/>over<sp/>finished<sp/>tables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>w)<sp/>-<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>needed<sp/>on<sp/>HP,<sp/>cc<sp/>-O<sp/>bug<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i<sp/>&amp;<sp/>mask)<sp/>!=<sp/>x[h])</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h--;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>don&apos;t<sp/>need<sp/>to<sp/>update<sp/>q<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>-=<sp/>l;</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>w)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"></highlight></codeline>
<codeline lineno="3376"><highlight class="normal"></highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>Z_BUF_ERROR<sp/>if<sp/>we<sp/>were<sp/>given<sp/>an<sp/>incomplete<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>g<sp/>!=<sp/>1<sp/>?<sp/>Z_BUF_ERROR<sp/>:<sp/>Z_OK;</highlight></codeline>
<codeline lineno="3379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"></highlight></codeline>
<codeline lineno="3381"><highlight class="normal"></highlight></codeline>
<codeline lineno="3382"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_trees_bits(uInt<sp/>*c,<sp/>uInt<sp/>*bb,<sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*<sp/>*tb,<sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*hp,<sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>z)</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"></highlight><highlight class="comment">//uInt<sp/>*c;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>19<sp/>code<sp/>lengths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3384"><highlight class="normal"></highlight><highlight class="comment">//uInt<sp/>*bb;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>bits<sp/>tree<sp/>desired/actual<sp/>depth<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3385"><highlight class="normal"></highlight><highlight class="comment">//inflate_huft<sp/>*<sp/>*tb;<sp/>/*<sp/>bits<sp/>tree<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3386"><highlight class="normal"></highlight><highlight class="comment">//inflate_huft<sp/>*hp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>space<sp/>for<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3387"><highlight class="normal"></highlight><highlight class="comment">//z_streamp<sp/>z;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>for<sp/>messages<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3388"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/>uInt<sp/>hn<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>hufts<sp/>used<sp/>in<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/>uInt<sp/>*v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>work<sp/>area<sp/>for<sp/>huft_build<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3392"><highlight class="normal"></highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((v<sp/>=<sp/>(uInt*)ZALLOC(z,<sp/>19,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uInt)))<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_MEM_ERROR;</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/>r<sp/>=<sp/>huft_build(c,<sp/>19,<sp/>19,<sp/>(uInt*)Z_NULL,<sp/>(uInt*)Z_NULL,</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tb,<sp/>bb,<sp/>hp,<sp/>&amp;hn,<sp/>v);</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>Z_DATA_ERROR)</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;oversubscribed<sp/>dynamic<sp/>bit<sp/>lengths<sp/>tree&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>Z_BUF_ERROR<sp/>||<sp/>*bb<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;incomplete<sp/>dynamic<sp/>bit<sp/>lengths<sp/>tree&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/>ZFREE(z,<sp/>v);</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="3406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"></highlight></codeline>
<codeline lineno="3408"><highlight class="normal"></highlight></codeline>
<codeline lineno="3409"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_trees_dynamic(uInt<sp/>nl,<sp/>uInt<sp/>nd,<sp/>uInt<sp/>*c,<sp/>uInt<sp/>*bl,<sp/>uInt<sp/>*bd,<sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*<sp/>*tl,<sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*<sp/>*td,<sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*hp,<sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>z)</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"></highlight><highlight class="comment">//uInt<sp/>nl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>number<sp/>of<sp/>literal/length<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3411"><highlight class="normal"></highlight><highlight class="comment">//uInt<sp/>nd;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>number<sp/>of<sp/>distance<sp/>codes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3412"><highlight class="normal"></highlight><highlight class="comment">//uInt<sp/>*c;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>that<sp/>many<sp/>(total)<sp/>code<sp/>lengths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3413"><highlight class="normal"></highlight><highlight class="comment">//uInt<sp/>*bl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>literal<sp/>desired/actual<sp/>bit<sp/>depth<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3414"><highlight class="normal"></highlight><highlight class="comment">//uInt<sp/>*bd;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>distance<sp/>desired/actual<sp/>bit<sp/>depth<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3415"><highlight class="normal"></highlight><highlight class="comment">//inflate_huft<sp/>*<sp/>*tl;<sp/>/*<sp/>literal/length<sp/>tree<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3416"><highlight class="normal"></highlight><highlight class="comment">//inflate_huft<sp/>*<sp/>*td;<sp/>/*<sp/>distance<sp/>tree<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3417"><highlight class="normal"></highlight><highlight class="comment">//inflate_huft<sp/>*hp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>space<sp/>for<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3418"><highlight class="normal"></highlight><highlight class="comment">//z_streamp<sp/>z;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>for<sp/>messages<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/>uInt<sp/>hn<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>hufts<sp/>used<sp/>in<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/>uInt<sp/>*v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>work<sp/>area<sp/>for<sp/>huft_build<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3423"><highlight class="normal"></highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>work<sp/>area<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((v<sp/>=<sp/>(uInt*)ZALLOC(z,<sp/>288,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uInt)))<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_MEM_ERROR;</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"></highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>build<sp/>literal/length<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/>r<sp/>=<sp/>huft_build(c,<sp/>nl,<sp/>257,<sp/>cplens,<sp/>cplext,<sp/>tl,<sp/>bl,<sp/>hp,<sp/>&amp;hn,<sp/>v);</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>!=<sp/>Z_OK<sp/>||<sp/>*bl<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>Z_DATA_ERROR)</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;oversubscribed<sp/>literal/length<sp/>tree&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>!=<sp/>Z_MEM_ERROR)</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;incomplete<sp/>literal/length<sp/>tree&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/>ZFREE(z,<sp/>v);</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"></highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>build<sp/>distance<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/>r<sp/>=<sp/>huft_build(c<sp/>+<sp/>nl,<sp/>nd,<sp/>0,<sp/>cpdist,<sp/>cpdext,<sp/>td,<sp/>bd,<sp/>hp,<sp/>&amp;hn,<sp/>v);</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>!=<sp/>Z_OK<sp/>||<sp/>(*bd<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>nl<sp/>&gt;<sp/>257))</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>Z_DATA_ERROR)</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;oversubscribed<sp/>distance<sp/>tree&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>Z_BUF_ERROR)<sp/>{</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PKZIP_BUG_WORKAROUND</highlight></codeline>
<codeline lineno="3451"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_OK;</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="3454"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;incomplete<sp/>distance<sp/>tree&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>!=<sp/>Z_MEM_ERROR)</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;empty<sp/>distance<sp/>tree<sp/>with<sp/>lengths&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/>ZFREE(z,<sp/>v);</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3465"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"></highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>done<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/>ZFREE(z,<sp/>v);</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_OK;</highlight></codeline>
<codeline lineno="3470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"></highlight></codeline>
<codeline lineno="3472"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>inffixed.h<sp/>--<sp/>table<sp/>for<sp/>decoding<sp/>fixed<sp/>codes</highlight></codeline>
<codeline lineno="3473"><highlight class="comment"><sp/>*<sp/>Generated<sp/>automatically<sp/>by<sp/>the<sp/>maketree.c<sp/>program</highlight></codeline>
<codeline lineno="3474"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3475"><highlight class="normal"></highlight></codeline>
<codeline lineno="3476"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>WARNING:<sp/>this<sp/>file<sp/>should<sp/>*not*<sp/>be<sp/>used<sp/>by<sp/>applications.<sp/>It<sp/>is</highlight></codeline>
<codeline lineno="3477"><highlight class="comment"><sp/><sp/><sp/>part<sp/>of<sp/>the<sp/>implementation<sp/>of<sp/>the<sp/>compression<sp/>library<sp/>and<sp/>is</highlight></codeline>
<codeline lineno="3478"><highlight class="comment"><sp/><sp/><sp/>subject<sp/>to<sp/>change.<sp/>Applications<sp/>should<sp/>only<sp/>use<sp/>zlib.h.</highlight></codeline>
<codeline lineno="3479"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3480"><highlight class="normal"></highlight></codeline>
<codeline lineno="3481"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uInt<sp/>fixed_bl<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uInt<sp/>fixed_bd<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>fixed_tl[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{96,7}},256},<sp/>{{{0,8}},80},<sp/>{{{0,8}},16},<sp/>{{{84,8}},115},</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{82,7}},31},<sp/>{{{0,8}},112},<sp/>{{{0,8}},48},<sp/>{{{0,9}},192},</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},10},<sp/>{{{0,8}},96},<sp/>{{{0,8}},32},<sp/>{{{0,9}},160},</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},0},<sp/>{{{0,8}},128},<sp/>{{{0,8}},64},<sp/>{{{0,9}},224},</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},6},<sp/>{{{0,8}},88},<sp/>{{{0,8}},24},<sp/>{{{0,9}},144},</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{83,7}},59},<sp/>{{{0,8}},120},<sp/>{{{0,8}},56},<sp/>{{{0,9}},208},</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{81,7}},17},<sp/>{{{0,8}},104},<sp/>{{{0,8}},40},<sp/>{{{0,9}},176},</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},8},<sp/>{{{0,8}},136},<sp/>{{{0,8}},72},<sp/>{{{0,9}},240},</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},4},<sp/>{{{0,8}},84},<sp/>{{{0,8}},20},<sp/>{{{85,8}},227},</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{83,7}},43},<sp/>{{{0,8}},116},<sp/>{{{0,8}},52},<sp/>{{{0,9}},200},</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{81,7}},13},<sp/>{{{0,8}},100},<sp/>{{{0,8}},36},<sp/>{{{0,9}},168},</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},4},<sp/>{{{0,8}},132},<sp/>{{{0,8}},68},<sp/>{{{0,9}},232},</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},8},<sp/>{{{0,8}},92},<sp/>{{{0,8}},28},<sp/>{{{0,9}},152},</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{84,7}},83},<sp/>{{{0,8}},124},<sp/>{{{0,8}},60},<sp/>{{{0,9}},216},</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{82,7}},23},<sp/>{{{0,8}},108},<sp/>{{{0,8}},44},<sp/>{{{0,9}},184},</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},12},<sp/>{{{0,8}},140},<sp/>{{{0,8}},76},<sp/>{{{0,9}},248},</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},3},<sp/>{{{0,8}},82},<sp/>{{{0,8}},18},<sp/>{{{85,8}},163},</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{83,7}},35},<sp/>{{{0,8}},114},<sp/>{{{0,8}},50},<sp/>{{{0,9}},196},</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{81,7}},11},<sp/>{{{0,8}},98},<sp/>{{{0,8}},34},<sp/>{{{0,9}},164},</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},2},<sp/>{{{0,8}},130},<sp/>{{{0,8}},66},<sp/>{{{0,9}},228},</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},7},<sp/>{{{0,8}},90},<sp/>{{{0,8}},26},<sp/>{{{0,9}},148},</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{84,7}},67},<sp/>{{{0,8}},122},<sp/>{{{0,8}},58},<sp/>{{{0,9}},212},</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{82,7}},19},<sp/>{{{0,8}},106},<sp/>{{{0,8}},42},<sp/>{{{0,9}},180},</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},10},<sp/>{{{0,8}},138},<sp/>{{{0,8}},74},<sp/>{{{0,9}},244},</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},5},<sp/>{{{0,8}},86},<sp/>{{{0,8}},22},<sp/>{{{192,8}},0},</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{83,7}},51},<sp/>{{{0,8}},118},<sp/>{{{0,8}},54},<sp/>{{{0,9}},204},</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{81,7}},15},<sp/>{{{0,8}},102},<sp/>{{{0,8}},38},<sp/>{{{0,9}},172},</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},6},<sp/>{{{0,8}},134},<sp/>{{{0,8}},70},<sp/>{{{0,9}},236},</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},9},<sp/>{{{0,8}},94},<sp/>{{{0,8}},30},<sp/>{{{0,9}},156},</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{84,7}},99},<sp/>{{{0,8}},126},<sp/>{{{0,8}},62},<sp/>{{{0,9}},220},</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{82,7}},27},<sp/>{{{0,8}},110},<sp/>{{{0,8}},46},<sp/>{{{0,9}},188},</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},14},<sp/>{{{0,8}},142},<sp/>{{{0,8}},78},<sp/>{{{0,9}},252},</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{96,7}},256},<sp/>{{{0,8}},81},<sp/>{{{0,8}},17},<sp/>{{{85,8}},131},</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{82,7}},31},<sp/>{{{0,8}},113},<sp/>{{{0,8}},49},<sp/>{{{0,9}},194},</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},10},<sp/>{{{0,8}},97},<sp/>{{{0,8}},33},<sp/>{{{0,9}},162},</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},1},<sp/>{{{0,8}},129},<sp/>{{{0,8}},65},<sp/>{{{0,9}},226},</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},6},<sp/>{{{0,8}},89},<sp/>{{{0,8}},25},<sp/>{{{0,9}},146},</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{83,7}},59},<sp/>{{{0,8}},121},<sp/>{{{0,8}},57},<sp/>{{{0,9}},210},</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{81,7}},17},<sp/>{{{0,8}},105},<sp/>{{{0,8}},41},<sp/>{{{0,9}},178},</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},9},<sp/>{{{0,8}},137},<sp/>{{{0,8}},73},<sp/>{{{0,9}},242},</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},4},<sp/>{{{0,8}},85},<sp/>{{{0,8}},21},<sp/>{{{80,8}},258},</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{83,7}},43},<sp/>{{{0,8}},117},<sp/>{{{0,8}},53},<sp/>{{{0,9}},202},</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{81,7}},13},<sp/>{{{0,8}},101},<sp/>{{{0,8}},37},<sp/>{{{0,9}},170},</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},5},<sp/>{{{0,8}},133},<sp/>{{{0,8}},69},<sp/>{{{0,9}},234},</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},8},<sp/>{{{0,8}},93},<sp/>{{{0,8}},29},<sp/>{{{0,9}},154},</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{84,7}},83},<sp/>{{{0,8}},125},<sp/>{{{0,8}},61},<sp/>{{{0,9}},218},</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{82,7}},23},<sp/>{{{0,8}},109},<sp/>{{{0,8}},45},<sp/>{{{0,9}},186},</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},13},<sp/>{{{0,8}},141},<sp/>{{{0,8}},77},<sp/>{{{0,9}},250},</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},3},<sp/>{{{0,8}},83},<sp/>{{{0,8}},19},<sp/>{{{85,8}},195},</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{83,7}},35},<sp/>{{{0,8}},115},<sp/>{{{0,8}},51},<sp/>{{{0,9}},198},</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{81,7}},11},<sp/>{{{0,8}},99},<sp/>{{{0,8}},35},<sp/>{{{0,9}},166},</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},3},<sp/>{{{0,8}},131},<sp/>{{{0,8}},67},<sp/>{{{0,9}},230},</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},7},<sp/>{{{0,8}},91},<sp/>{{{0,8}},27},<sp/>{{{0,9}},150},</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{84,7}},67},<sp/>{{{0,8}},123},<sp/>{{{0,8}},59},<sp/>{{{0,9}},214},</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{82,7}},19},<sp/>{{{0,8}},107},<sp/>{{{0,8}},43},<sp/>{{{0,9}},182},</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},11},<sp/>{{{0,8}},139},<sp/>{{{0,8}},75},<sp/>{{{0,9}},246},</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},5},<sp/>{{{0,8}},87},<sp/>{{{0,8}},23},<sp/>{{{192,8}},0},</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{83,7}},51},<sp/>{{{0,8}},119},<sp/>{{{0,8}},55},<sp/>{{{0,9}},206},</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{81,7}},15},<sp/>{{{0,8}},103},<sp/>{{{0,8}},39},<sp/>{{{0,9}},174},</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},7},<sp/>{{{0,8}},135},<sp/>{{{0,8}},71},<sp/>{{{0,9}},238},</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},9},<sp/>{{{0,8}},95},<sp/>{{{0,8}},31},<sp/>{{{0,9}},158},</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{84,7}},99},<sp/>{{{0,8}},127},<sp/>{{{0,8}},63},<sp/>{{{0,9}},222},</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{82,7}},27},<sp/>{{{0,8}},111},<sp/>{{{0,8}},47},<sp/>{{{0,9}},190},</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},15},<sp/>{{{0,8}},143},<sp/>{{{0,8}},79},<sp/>{{{0,9}},254},</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{96,7}},256},<sp/>{{{0,8}},80},<sp/>{{{0,8}},16},<sp/>{{{84,8}},115},</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{82,7}},31},<sp/>{{{0,8}},112},<sp/>{{{0,8}},48},<sp/>{{{0,9}},193},</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},10},<sp/>{{{0,8}},96},<sp/>{{{0,8}},32},<sp/>{{{0,9}},161},</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},0},<sp/>{{{0,8}},128},<sp/>{{{0,8}},64},<sp/>{{{0,9}},225},</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},6},<sp/>{{{0,8}},88},<sp/>{{{0,8}},24},<sp/>{{{0,9}},145},</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{83,7}},59},<sp/>{{{0,8}},120},<sp/>{{{0,8}},56},<sp/>{{{0,9}},209},</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{81,7}},17},<sp/>{{{0,8}},104},<sp/>{{{0,8}},40},<sp/>{{{0,9}},177},</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},8},<sp/>{{{0,8}},136},<sp/>{{{0,8}},72},<sp/>{{{0,9}},241},</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},4},<sp/>{{{0,8}},84},<sp/>{{{0,8}},20},<sp/>{{{85,8}},227},</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{83,7}},43},<sp/>{{{0,8}},116},<sp/>{{{0,8}},52},<sp/>{{{0,9}},201},</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{81,7}},13},<sp/>{{{0,8}},100},<sp/>{{{0,8}},36},<sp/>{{{0,9}},169},</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},4},<sp/>{{{0,8}},132},<sp/>{{{0,8}},68},<sp/>{{{0,9}},233},</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},8},<sp/>{{{0,8}},92},<sp/>{{{0,8}},28},<sp/>{{{0,9}},153},</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{84,7}},83},<sp/>{{{0,8}},124},<sp/>{{{0,8}},60},<sp/>{{{0,9}},217},</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{82,7}},23},<sp/>{{{0,8}},108},<sp/>{{{0,8}},44},<sp/>{{{0,9}},185},</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},12},<sp/>{{{0,8}},140},<sp/>{{{0,8}},76},<sp/>{{{0,9}},249},</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},3},<sp/>{{{0,8}},82},<sp/>{{{0,8}},18},<sp/>{{{85,8}},163},</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{83,7}},35},<sp/>{{{0,8}},114},<sp/>{{{0,8}},50},<sp/>{{{0,9}},197},</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{81,7}},11},<sp/>{{{0,8}},98},<sp/>{{{0,8}},34},<sp/>{{{0,9}},165},</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},2},<sp/>{{{0,8}},130},<sp/>{{{0,8}},66},<sp/>{{{0,9}},229},</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},7},<sp/>{{{0,8}},90},<sp/>{{{0,8}},26},<sp/>{{{0,9}},149},</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{84,7}},67},<sp/>{{{0,8}},122},<sp/>{{{0,8}},58},<sp/>{{{0,9}},213},</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{82,7}},19},<sp/>{{{0,8}},106},<sp/>{{{0,8}},42},<sp/>{{{0,9}},181},</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},10},<sp/>{{{0,8}},138},<sp/>{{{0,8}},74},<sp/>{{{0,9}},245},</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},5},<sp/>{{{0,8}},86},<sp/>{{{0,8}},22},<sp/>{{{192,8}},0},</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{83,7}},51},<sp/>{{{0,8}},118},<sp/>{{{0,8}},54},<sp/>{{{0,9}},205},</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{81,7}},15},<sp/>{{{0,8}},102},<sp/>{{{0,8}},38},<sp/>{{{0,9}},173},</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},6},<sp/>{{{0,8}},134},<sp/>{{{0,8}},70},<sp/>{{{0,9}},237},</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},9},<sp/>{{{0,8}},94},<sp/>{{{0,8}},30},<sp/>{{{0,9}},157},</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{84,7}},99},<sp/>{{{0,8}},126},<sp/>{{{0,8}},62},<sp/>{{{0,9}},221},</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{82,7}},27},<sp/>{{{0,8}},110},<sp/>{{{0,8}},46},<sp/>{{{0,9}},189},</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},14},<sp/>{{{0,8}},142},<sp/>{{{0,8}},78},<sp/>{{{0,9}},253},</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{96,7}},256},<sp/>{{{0,8}},81},<sp/>{{{0,8}},17},<sp/>{{{85,8}},131},</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{82,7}},31},<sp/>{{{0,8}},113},<sp/>{{{0,8}},49},<sp/>{{{0,9}},195},</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},10},<sp/>{{{0,8}},97},<sp/>{{{0,8}},33},<sp/>{{{0,9}},163},</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},1},<sp/>{{{0,8}},129},<sp/>{{{0,8}},65},<sp/>{{{0,9}},227},</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},6},<sp/>{{{0,8}},89},<sp/>{{{0,8}},25},<sp/>{{{0,9}},147},</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{83,7}},59},<sp/>{{{0,8}},121},<sp/>{{{0,8}},57},<sp/>{{{0,9}},211},</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{81,7}},17},<sp/>{{{0,8}},105},<sp/>{{{0,8}},41},<sp/>{{{0,9}},179},</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},9},<sp/>{{{0,8}},137},<sp/>{{{0,8}},73},<sp/>{{{0,9}},243},</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},4},<sp/>{{{0,8}},85},<sp/>{{{0,8}},21},<sp/>{{{80,8}},258},</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{83,7}},43},<sp/>{{{0,8}},117},<sp/>{{{0,8}},53},<sp/>{{{0,9}},203},</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{81,7}},13},<sp/>{{{0,8}},101},<sp/>{{{0,8}},37},<sp/>{{{0,9}},171},</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},5},<sp/>{{{0,8}},133},<sp/>{{{0,8}},69},<sp/>{{{0,9}},235},</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},8},<sp/>{{{0,8}},93},<sp/>{{{0,8}},29},<sp/>{{{0,9}},155},</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{84,7}},83},<sp/>{{{0,8}},125},<sp/>{{{0,8}},61},<sp/>{{{0,9}},219},</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{82,7}},23},<sp/>{{{0,8}},109},<sp/>{{{0,8}},45},<sp/>{{{0,9}},187},</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},13},<sp/>{{{0,8}},141},<sp/>{{{0,8}},77},<sp/>{{{0,9}},251},</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},3},<sp/>{{{0,8}},83},<sp/>{{{0,8}},19},<sp/>{{{85,8}},195},</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{83,7}},35},<sp/>{{{0,8}},115},<sp/>{{{0,8}},51},<sp/>{{{0,9}},199},</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{81,7}},11},<sp/>{{{0,8}},99},<sp/>{{{0,8}},35},<sp/>{{{0,9}},167},</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},3},<sp/>{{{0,8}},131},<sp/>{{{0,8}},67},<sp/>{{{0,9}},231},</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},7},<sp/>{{{0,8}},91},<sp/>{{{0,8}},27},<sp/>{{{0,9}},151},</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{84,7}},67},<sp/>{{{0,8}},123},<sp/>{{{0,8}},59},<sp/>{{{0,9}},215},</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{82,7}},19},<sp/>{{{0,8}},107},<sp/>{{{0,8}},43},<sp/>{{{0,9}},183},</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},11},<sp/>{{{0,8}},139},<sp/>{{{0,8}},75},<sp/>{{{0,9}},247},</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},5},<sp/>{{{0,8}},87},<sp/>{{{0,8}},23},<sp/>{{{192,8}},0},</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{83,7}},51},<sp/>{{{0,8}},119},<sp/>{{{0,8}},55},<sp/>{{{0,9}},207},</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{81,7}},15},<sp/>{{{0,8}},103},<sp/>{{{0,8}},39},<sp/>{{{0,9}},175},</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},7},<sp/>{{{0,8}},135},<sp/>{{{0,8}},71},<sp/>{{{0,9}},239},</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,7}},9},<sp/>{{{0,8}},95},<sp/>{{{0,8}},31},<sp/>{{{0,9}},159},</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{84,7}},99},<sp/>{{{0,8}},127},<sp/>{{{0,8}},63},<sp/>{{{0,9}},223},</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{82,7}},27},<sp/>{{{0,8}},111},<sp/>{{{0,8}},47},<sp/>{{{0,9}},191},</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{0,8}},15},<sp/>{{{0,8}},143},<sp/>{{{0,8}},79},<sp/>{{{0,9}},255}</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>fixed_td[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,5}},1},<sp/>{{{87,5}},257},<sp/>{{{83,5}},17},<sp/>{{{91,5}},4097},</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{81,5}},5},<sp/>{{{89,5}},1025},<sp/>{{{85,5}},65},<sp/>{{{93,5}},16385},</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,5}},3},<sp/>{{{88,5}},513},<sp/>{{{84,5}},33},<sp/>{{{92,5}},8193},</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{82,5}},9},<sp/>{{{90,5}},2049},<sp/>{{{86,5}},129},<sp/>{{{192,5}},24577},</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,5}},2},<sp/>{{{87,5}},385},<sp/>{{{83,5}},25},<sp/>{{{91,5}},6145},</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{81,5}},7},<sp/>{{{89,5}},1537},<sp/>{{{85,5}},97},<sp/>{{{93,5}},24577},</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{80,5}},4},<sp/>{{{88,5}},769},<sp/>{{{84,5}},49},<sp/>{{{92,5}},12289},</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/>{{{82,5}},13},<sp/>{{{90,5}},3073},<sp/>{{{86,5}},193},<sp/>{{{192,5}},24577}</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"></highlight></codeline>
<codeline lineno="3624"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_trees_fixed(uInt<sp/>*bl,<sp/>uInt<sp/>*bd,<sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*<sp/>*tl,<sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*<sp/>*td,<sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>z)</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"></highlight><highlight class="comment">//uInt<sp/>*bl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>literal<sp/>desired/actual<sp/>bit<sp/>depth<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3626"><highlight class="normal"></highlight><highlight class="comment">//uInt<sp/>*bd;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>distance<sp/>desired/actual<sp/>bit<sp/>depth<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3627"><highlight class="normal"></highlight><highlight class="comment">//inflate_huft<sp/>*<sp/>*tl;<sp/><sp/>/*<sp/>literal/length<sp/>tree<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal"></highlight><highlight class="comment">//inflate_huft<sp/>*<sp/>*td;<sp/><sp/>/*<sp/>distance<sp/>tree<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3629"><highlight class="normal"></highlight><highlight class="comment">//z_streamp<sp/>z;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>for<sp/>memory<sp/>allocation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3630"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/>*bl<sp/>=<sp/>fixed_bl;</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/>*bd<sp/>=<sp/>fixed_bd;</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/>*tl<sp/>=<sp/>fixed_tl;</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/>*td<sp/>=<sp/>fixed_td;</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_OK;</highlight></codeline>
<codeline lineno="3636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"></highlight></codeline>
<codeline lineno="3638"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>simplify<sp/>the<sp/>use<sp/>of<sp/>the<sp/>inflate_huft<sp/>type<sp/>with<sp/>some<sp/>defines<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3639"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>exop<sp/>word.what.Exop</highlight></codeline>
<codeline lineno="3640"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>bits<sp/>word.what.Bits</highlight></codeline>
<codeline lineno="3641"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3642"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>macros<sp/>for<sp/>bit<sp/>input<sp/>with<sp/>no<sp/>checking<sp/>and<sp/>for<sp/>returning<sp/>unused<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3643"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GRABBITS(j)<sp/>{while(k&lt;(j)){b|=((uLong)NEXTBYTE)&lt;&lt;k;k+=8;}}</highlight></codeline>
<codeline lineno="3644"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>UNGRAB<sp/>{c=z-&gt;avail_in-n;c=(k&gt;&gt;3)&lt;c?k&gt;&gt;3:c;n+=c;p-=c;k-=c&lt;&lt;3;}</highlight></codeline>
<codeline lineno="3645"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3646"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Called<sp/>with<sp/>number<sp/>of<sp/>bytes<sp/>left<sp/>to<sp/>write<sp/>in<sp/>window<sp/>at<sp/>least<sp/>258</highlight></codeline>
<codeline lineno="3647"><highlight class="comment"><sp/><sp/><sp/>(the<sp/>maximum<sp/>string<sp/>length)<sp/>and<sp/>number<sp/>of<sp/>input<sp/>bytes<sp/>available</highlight></codeline>
<codeline lineno="3648"><highlight class="comment"><sp/><sp/><sp/>at<sp/>least<sp/>ten.<sp/><sp/>The<sp/>ten<sp/>bytes<sp/>are<sp/>six<sp/>bytes<sp/>for<sp/>the<sp/>longest<sp/>length/</highlight></codeline>
<codeline lineno="3649"><highlight class="comment"><sp/><sp/><sp/>distance<sp/>pair<sp/>plus<sp/>four<sp/>bytes<sp/>for<sp/>overloading<sp/>the<sp/>bit<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3650"><highlight class="normal"></highlight></codeline>
<codeline lineno="3651"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_fast(uInt<sp/>bl,<sp/>uInt<sp/>bd,<sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*tl,<sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*td,<sp/><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*s,<sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>z)</highlight></codeline>
<codeline lineno="3652"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*t;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>temporary<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/>uInt<sp/>e;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>extra<sp/>bits<sp/>or<sp/>operation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/>uLong<sp/>b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/>uInt<sp/>k;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>in<sp/>bit<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/>Byte<sp/>*p;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>input<sp/>data<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/>uInt<sp/>n;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bytes<sp/>available<sp/>there<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/>Byte<sp/>*q;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>output<sp/>window<sp/>write<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/>uInt<sp/>m;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bytes<sp/>to<sp/>end<sp/>of<sp/>window<sp/>or<sp/>read<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/>uInt<sp/>ml;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>mask<sp/>for<sp/>literal/length<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/>uInt<sp/>md;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>mask<sp/>for<sp/>distance<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/>uInt<sp/>c;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bytes<sp/>to<sp/>copy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/>uInt<sp/>d;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>distance<sp/>back<sp/>to<sp/>copy<sp/>from<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/>Byte<sp/>*r;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>source<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3666"><highlight class="normal"></highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>load<sp/>input,<sp/>output,<sp/>bit<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/>LOAD</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"></highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>masks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/>ml<sp/>=<sp/>inflate_mask[bl];</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/>md<sp/>=<sp/>inflate_mask[bd];</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"></highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>do<sp/>until<sp/>not<sp/>enough<sp/>input<sp/>or<sp/>output<sp/>space<sp/>for<sp/>fast<sp/>loop<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>assume<sp/>called<sp/>with<sp/>m<sp/>&gt;=<sp/>258<sp/>&amp;&amp;<sp/>n<sp/>&gt;=<sp/>10<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>literal/length<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/>GRABBITS(20)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>max<sp/>bits<sp/>for<sp/>literal/length<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>((e<sp/>=<sp/>(t<sp/>=<sp/>tl<sp/>+<sp/>((uInt)b<sp/>&amp;<sp/>ml))-&gt;exop)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(t-&gt;bits)</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Tracevv((t-&gt;base<sp/>&gt;=<sp/>0x20<sp/>&amp;&amp;<sp/>t-&gt;base<sp/>&lt;<sp/>0x7f<sp/>?</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>literal<sp/>&apos;%c&apos;\n&quot;<sp/>:</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>literal<sp/>0x%02x\n&quot;,<sp/>t-&gt;base));</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>(Byte)t-&gt;base;</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m--;</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>continue;</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/>do<sp/>{</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(t-&gt;bits)</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(e<sp/>&amp;<sp/>16)</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>extra<sp/>bits<sp/>for<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>&amp;=<sp/>15;</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>t-&gt;base<sp/>+<sp/>((uInt)b<sp/>&amp;<sp/>inflate_mask[e]);</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(e)</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tracevv((&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>length<sp/>%u\n&quot;,<sp/>c));</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"></highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>decode<sp/>distance<sp/>base<sp/>of<sp/>block<sp/>to<sp/>copy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GRABBITS(15);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>max<sp/>bits<sp/>for<sp/>distance<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>(t<sp/>=<sp/>td<sp/>+<sp/>((uInt)b<sp/>&amp;<sp/>md))-&gt;exop;</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(t-&gt;bits)</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(e<sp/>&amp;<sp/>16)</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>extra<sp/>bits<sp/>to<sp/>add<sp/>to<sp/>distance<sp/>base<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>&amp;=<sp/>15;</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GRABBITS(e)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>extra<sp/>bits<sp/>(up<sp/>to<sp/>13)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>t-&gt;base<sp/>+<sp/>((uInt)b<sp/>&amp;<sp/>inflate_mask[e]);</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(e)</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tracevv((&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>distance<sp/>%u\n&quot;,<sp/>d));</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"></highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>do<sp/>the<sp/>copy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>-=<sp/>c;</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((uInt)(q<sp/>-<sp/>s-&gt;window)<sp/>&gt;=<sp/>d)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>offset<sp/>before<sp/>dest<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>just<sp/>copy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>q<sp/>-<sp/>d;</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>*r++;<sp/><sp/>c--;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>minimum<sp/>count<sp/>is<sp/>three,<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>*r++;<sp/><sp/>c--;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>so<sp/>unroll<sp/>loop<sp/>a<sp/>little<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>else<sp/>offset<sp/>after<sp/>destination<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>d<sp/>-<sp/>(uInt)(q<sp/>-<sp/>s-&gt;window);<sp/></highlight><highlight class="comment">/*<sp/>bytes<sp/>from<sp/>offset<sp/>to<sp/>end<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>s-&gt;end<sp/>-<sp/>e;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>to<sp/>offset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;<sp/>e)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>source<sp/>crosses,<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>-=<sp/>e;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>to<sp/>end<sp/>of<sp/>window<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>*r++;</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--e);</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>s-&gt;window;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>rest<sp/>from<sp/>start<sp/>of<sp/>window<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>all<sp/>or<sp/>what&apos;s<sp/>left<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>*r++;</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--c);</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((e<sp/>&amp;<sp/>64)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>+=<sp/>t-&gt;base;</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>(t<sp/>+=<sp/>((uInt)b<sp/>&amp;<sp/>inflate_mask[e]))-&gt;exop;</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;invalid<sp/>distance<sp/>code&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNGRAB</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UPDATE</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1);</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((e<sp/>&amp;<sp/>64)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>+=<sp/>t-&gt;base;</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((e<sp/>=<sp/>(t<sp/>+=<sp/>((uInt)b<sp/>&amp;<sp/>inflate_mask[e]))-&gt;exop)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(t-&gt;bits)</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tracevv((t-&gt;base<sp/>&gt;=<sp/>0x20<sp/>&amp;&amp;<sp/>t-&gt;base<sp/>&lt;<sp/>0x7f<sp/>?</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>literal<sp/>&apos;%c&apos;\n&quot;<sp/>:</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>literal<sp/>0x%02x\n&quot;,<sp/>t-&gt;base));</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*q++<sp/>=<sp/>(Byte)t-&gt;base;</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m--;</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(e<sp/>&amp;<sp/>32)</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tracevv((</highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>end<sp/>of<sp/>block\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNGRAB</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UPDATE</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_STREAM_END;</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;invalid<sp/>literal/length<sp/>code&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UNGRAB</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UPDATE</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1);</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(m<sp/>&gt;=<sp/>258<sp/>&amp;&amp;<sp/>n<sp/>&gt;=<sp/>10);</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"></highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>not<sp/>enough<sp/>input<sp/>or<sp/>output--restore<sp/>pointers<sp/>and<sp/>return<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/>UNGRAB</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/>UPDATE</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_OK;</highlight></codeline>
<codeline lineno="3788"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"></highlight></codeline>
<codeline lineno="3790"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>infcodes.c<sp/>--<sp/>process<sp/>literals<sp/>and<sp/>length/distance<sp/>pairs</highlight></codeline>
<codeline lineno="3791"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-1998<sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="3792"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h<sp/></highlight></codeline>
<codeline lineno="3793"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3794"><highlight class="normal"></highlight></codeline>
<codeline lineno="3795"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>simplify<sp/>the<sp/>use<sp/>of<sp/>the<sp/>inflate_huft<sp/>type<sp/>with<sp/>some<sp/>defines<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3796"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>exop<sp/>word.what.Exop</highlight></codeline>
<codeline lineno="3797"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>bits<sp/>word.what.Bits</highlight></codeline>
<codeline lineno="3798"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3799"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>waiting<sp/>for<sp/>&quot;i:&quot;=input,<sp/>&quot;o:&quot;=output,<sp/>&quot;x:&quot;=nothing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>START,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>x:<sp/>set<sp/>up<sp/>for<sp/>LEN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LEN,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>i:<sp/>get<sp/>length/literal/eob<sp/>next<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LENEXT,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>i:<sp/>getting<sp/>length<sp/>extra<sp/>(have<sp/>base)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DIST,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>i:<sp/>get<sp/>distance<sp/>next<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DISTEXT,<sp/><sp/></highlight><highlight class="comment">/*<sp/>i:<sp/>getting<sp/>distance<sp/>extra<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>COPY,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>o:<sp/>copying<sp/>bytes<sp/>in<sp/>window,<sp/>waiting<sp/>for<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LIT,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>o:<sp/>got<sp/>literal,<sp/>waiting<sp/>for<sp/>output<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WASH,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>o:<sp/>got<sp/>eob,<sp/>possibly<sp/>still<sp/>output<sp/>waiting<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>END,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>x:<sp/>got<sp/>eob<sp/>and<sp/>all<sp/>data<sp/>flushed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BADCODE}<sp/><sp/></highlight><highlight class="comment">/*<sp/>x:<sp/>got<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3810"><highlight class="normal">inflate_codes_mode;</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"></highlight></codeline>
<codeline lineno="3812"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>inflate<sp/>codes<sp/>private<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3813" refid="structinflate__codes__state" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinflate__codes__state" kindref="compound">inflate_codes_state</ref><sp/>{</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"></highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/>inflate_codes_mode<sp/>mode;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>current<sp/>inflate_codes<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3817"><highlight class="normal"></highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>mode<sp/>dependent<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/>uInt<sp/>len;</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*tree;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>into<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uInt<sp/>need;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>code;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>LEN<sp/>or<sp/>DIST,<sp/>where<sp/>in<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>lit;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>LIT,<sp/>literal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uInt<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>to<sp/>get<sp/>for<sp/>extra<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uInt<sp/>dist;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>distance<sp/>back<sp/>to<sp/>copy<sp/>from<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>copy;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>EXT<sp/>or<sp/>COPY,<sp/>where<sp/>and<sp/>how<sp/>much<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/>}<sp/>sub;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>submode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3831"><highlight class="normal"></highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>mode<sp/>independent<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/>Byte<sp/>lbits;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ltree<sp/>bits<sp/>decoded<sp/>per<sp/>branch<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/>Byte<sp/>dbits;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>dtree<sp/>bits<sp/>decoder<sp/>per<sp/>branch<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*ltree;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>literal/length/eob<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*dtree;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>distance<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3837"><highlight class="normal"></highlight></codeline>
<codeline lineno="3838"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"></highlight></codeline>
<codeline lineno="3840"><highlight class="normal"></highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><ref refid="structinflate__codes__state" kindref="compound">inflate_codes_statef</ref><sp/>*inflate_codes_new(uInt<sp/>bl,<sp/>uInt<sp/>bd,<sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*tl,<sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*td,<sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>z)</highlight></codeline>
<codeline lineno="3842"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><ref refid="structinflate__codes__state" kindref="compound">inflate_codes_statef</ref><sp/>*c;</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"></highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>(<ref refid="structinflate__codes__state" kindref="compound">inflate_codes_statef</ref><sp/>*)</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZALLOC(z,1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structinflate__codes__state" kindref="compound">inflate_codes_state</ref>)))<sp/>!=<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/>c-&gt;mode<sp/>=<sp/>START;</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/>c-&gt;lbits<sp/>=<sp/>(Byte)bl;</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><sp/><sp/>c-&gt;dbits<sp/>=<sp/>(Byte)bd;</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/>c-&gt;ltree<sp/>=<sp/>tl;</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/><sp/><sp/>c-&gt;dtree<sp/>=<sp/>td;</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/>Tracev((</highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>codes<sp/>new\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="3856"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"></highlight></codeline>
<codeline lineno="3858"><highlight class="normal"></highlight></codeline>
<codeline lineno="3859"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_codes(<ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*s,<sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>z,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r)</highlight></codeline>
<codeline lineno="3860"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/>uInt<sp/>j;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>temporary<sp/>storage<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><ref refid="structinflate__huft__s" kindref="compound">inflate_huft</ref><sp/>*t;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>temporary<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/>uInt<sp/>e;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>extra<sp/>bits<sp/>or<sp/>operation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/>uLong<sp/>b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/>uInt<sp/>k;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bits<sp/>in<sp/>bit<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/>Byte<sp/>*p;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>input<sp/>data<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/>uInt<sp/>n;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bytes<sp/>available<sp/>there<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/>Byte<sp/>*q;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>output<sp/>window<sp/>write<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/>uInt<sp/>m;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bytes<sp/>to<sp/>end<sp/>of<sp/>window<sp/>or<sp/>read<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/>Byte<sp/>*f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>to<sp/>copy<sp/>strings<sp/>from<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><ref refid="structinflate__codes__state" kindref="compound">inflate_codes_statef</ref><sp/>*c<sp/>=<sp/>s-&gt;sub.decode.codes;<sp/><sp/></highlight><highlight class="comment">/*<sp/>codes<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3872"><highlight class="normal"></highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>input/output<sp/>information<sp/>to<sp/>locals<sp/>(UPDATE<sp/>macro<sp/>restores)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/>LOAD</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"></highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>process<sp/>input<sp/>and<sp/>output<sp/>based<sp/>on<sp/>current<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c-&gt;mode)</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>waiting<sp/>for<sp/>&quot;i:&quot;=input,<sp/>&quot;o:&quot;=output,<sp/>&quot;x:&quot;=nothing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>START:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>x:<sp/>set<sp/>up<sp/>for<sp/>LEN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3880"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SLOW</highlight></codeline>
<codeline lineno="3881"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&gt;=<sp/>258<sp/>&amp;&amp;<sp/>n<sp/>&gt;=<sp/>10)</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UPDATE</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>inflate_fast(c-&gt;lbits,<sp/>c-&gt;dbits,<sp/>c-&gt;ltree,<sp/>c-&gt;dtree,<sp/>s,<sp/>z);</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOAD</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>!=<sp/>Z_OK)</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;mode<sp/>=<sp/>r<sp/>==<sp/>Z_STREAM_END<sp/>?<sp/>WASH<sp/>:<sp/>BADCODE;</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!SLOW<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3893"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sub.code.need<sp/>=<sp/>c-&gt;lbits;</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sub.code.tree<sp/>=<sp/>c-&gt;ltree;</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;mode<sp/>=<sp/>LEN;</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LEN:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>i:<sp/>get<sp/>length/literal/eob<sp/>next<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>c-&gt;sub.code.need;</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NEEDBITS(j)</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>c-&gt;sub.code.tree<sp/>+<sp/>((uInt)b<sp/>&amp;<sp/>inflate_mask[j]);</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(t-&gt;bits)</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>(uInt)(t-&gt;exop);</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(e<sp/>==<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>literal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sub.lit<sp/>=<sp/>t-&gt;base;</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tracevv((t-&gt;base<sp/>&gt;=<sp/>0x20<sp/>&amp;&amp;<sp/>t-&gt;base<sp/>&lt;<sp/>0x7f<sp/>?</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>literal<sp/>&apos;%c&apos;\n&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>literal<sp/>0x%02x\n&quot;</highlight><highlight class="normal">,<sp/>t-&gt;base));</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;mode<sp/>=<sp/>LIT;</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e<sp/>&amp;<sp/>16)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sub.copy.get<sp/>=<sp/>e<sp/>&amp;<sp/>15;</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;len<sp/>=<sp/>t-&gt;base;</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;mode<sp/>=<sp/>LENEXT;</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((e<sp/>&amp;<sp/>64)<sp/>==<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>next<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sub.code.need<sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sub.code.tree<sp/>=<sp/>t<sp/>+<sp/>t-&gt;base;</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e<sp/>&amp;<sp/>32)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tracevv((</highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>of<sp/>block\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;mode<sp/>=<sp/>WASH;</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;mode<sp/>=<sp/>BADCODE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>invalid<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;invalid<sp/>literal/length<sp/>code&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LENEXT:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>i:<sp/>getting<sp/>length<sp/>extra<sp/>(have<sp/>base)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>c-&gt;sub.copy.get;</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NEEDBITS(j)</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;len<sp/>+=<sp/>(uInt)b<sp/>&amp;<sp/>inflate_mask[j];</highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(j)</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sub.code.need<sp/>=<sp/>c-&gt;dbits;</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sub.code.tree<sp/>=<sp/>c-&gt;dtree;</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Tracevv((&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>%u\n&quot;,<sp/>c-&gt;len));</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;mode<sp/>=<sp/>DIST;</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>DIST:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>i:<sp/>get<sp/>distance<sp/>next<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>c-&gt;sub.code.need;</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NEEDBITS(j)</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>c-&gt;sub.code.tree<sp/>+<sp/>((uInt)b<sp/>&amp;<sp/>inflate_mask[j]);</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(t-&gt;bits)</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>(uInt)(t-&gt;exop);</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(e<sp/>&amp;<sp/>16)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>distance<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sub.copy.get<sp/>=<sp/>e<sp/>&amp;<sp/>15;</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sub.copy.dist<sp/>=<sp/>t-&gt;base;</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;mode<sp/>=<sp/>DISTEXT;</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((e<sp/>&amp;<sp/>64)<sp/>==<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>next<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sub.code.need<sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sub.code.tree<sp/>=<sp/>t<sp/>+<sp/>t-&gt;base;</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;mode<sp/>=<sp/>BADCODE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>invalid<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;invalid<sp/>distance<sp/>code&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DISTEXT:<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>i:<sp/>getting<sp/>distance<sp/>extra<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>c-&gt;sub.copy.get;</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NEEDBITS(j)</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;sub.copy.dist<sp/>+=<sp/>(uInt)b<sp/>&amp;<sp/>inflate_mask[j];</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DUMPBITS(j)</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Tracevv((&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distance<sp/>%u\n&quot;,<sp/>c-&gt;sub.copy.dist));</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;mode<sp/>=<sp/>COPY;</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>COPY:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>o:<sp/>copying<sp/>bytes<sp/>in<sp/>window,<sp/>waiting<sp/>for<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3974"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__TURBOC__<sp/></highlight><highlight class="comment">/*<sp/>Turbo<sp/>C<sp/>bug<sp/>for<sp/>following<sp/>expression<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3975"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>(uInt)(q<sp/>-<sp/>s-&gt;window)<sp/>&lt;<sp/>c-&gt;sub.copy.dist<sp/>?</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;end<sp/>-<sp/>(c-&gt;sub.copy.dist<sp/>-<sp/>(q<sp/>-<sp/>s-&gt;window))<sp/>:</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>-<sp/>c-&gt;sub.copy.dist;</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="3979"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>q<sp/>-<sp/>c-&gt;sub.copy.dist;</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((uInt)(q<sp/>-<sp/>s-&gt;window)<sp/>&lt;<sp/>c-&gt;sub.copy.dist)</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>s-&gt;end<sp/>-<sp/>(c-&gt;sub.copy.dist<sp/>-<sp/>(uInt)(q<sp/>-<sp/>s-&gt;window));</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3983"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c-&gt;len)</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NEEDOUT</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OUTBYTE(*f++)</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(f<sp/>==<sp/>s-&gt;end)</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>s-&gt;window;</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;len--;</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;mode<sp/>=<sp/>START;</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>LIT:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>o:<sp/>got<sp/>literal,<sp/>waiting<sp/>for<sp/>output<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NEEDOUT</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OUTBYTE(c-&gt;sub.lit)</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;mode<sp/>=<sp/>START;</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>WASH:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>o:<sp/>got<sp/>eob,<sp/>possibly<sp/>more<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(k<sp/>&gt;<sp/>7)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>return<sp/>unused<sp/>byte,<sp/>if<sp/>any<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert(k<sp/>&lt;<sp/>16,<sp/></highlight><highlight class="stringliteral">&quot;inflate_codes<sp/>grabbed<sp/>too<sp/>many<sp/>bytes&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n++;</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p--;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>can<sp/>always<sp/>return<sp/>one<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FLUSH</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(s-&gt;read<sp/>!=<sp/>s-&gt;write)</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;mode<sp/>=<sp/>END;</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>END:</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_STREAM_END;</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>BADCODE:<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>x:<sp/>got<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>Z_STREAM_ERROR;</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LEAVE</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NEED_DUMMY_RETURN</highlight></codeline>
<codeline lineno="4021"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_STREAM_ERROR;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Some<sp/>dumb<sp/>compilers<sp/>complain<sp/>without<sp/>this<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4022"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="4023"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"></highlight></codeline>
<codeline lineno="4025"><highlight class="normal"></highlight></codeline>
<codeline lineno="4026"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inflate_codes_free(<ref refid="structinflate__codes__state" kindref="compound">inflate_codes_statef</ref><sp/>*c,<sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>z)</highlight></codeline>
<codeline lineno="4027"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/>ZFREE(z,<sp/>c);</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/>Tracev((</highlight><highlight class="stringliteral">&quot;inflate:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>codes<sp/>free\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4030"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"></highlight></codeline>
<codeline lineno="4032"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>adler32.c<sp/>--<sp/>compute<sp/>the<sp/>Adler-32<sp/>checksum<sp/>of<sp/>a<sp/>data<sp/>stream</highlight></codeline>
<codeline lineno="4033"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-1998<sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="4034"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h<sp/></highlight></codeline>
<codeline lineno="4035"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4036"><highlight class="normal"></highlight></codeline>
<codeline lineno="4037"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BASE<sp/>65521L<sp/></highlight><highlight class="comment">/*<sp/>largest<sp/>prime<sp/>smaller<sp/>than<sp/>65536<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="4038"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>NMAX<sp/>5552</highlight></codeline>
<codeline lineno="4039"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>NMAX<sp/>is<sp/>the<sp/>largest<sp/>n<sp/>such<sp/>that<sp/>255n(n+1)/2<sp/>+<sp/>(n+1)(BASE-1)<sp/>&lt;=<sp/>2^32-1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4040"><highlight class="normal"></highlight></codeline>
<codeline lineno="4041"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DO1</highlight></codeline>
<codeline lineno="4042"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>DO2</highlight></codeline>
<codeline lineno="4043"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>DO4</highlight></codeline>
<codeline lineno="4044"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>DO8</highlight></codeline>
<codeline lineno="4045"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4046"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DO1(buf,i)<sp/><sp/>{s1<sp/>+=<sp/>buf[i];<sp/>s2<sp/>+=<sp/>s1;}</highlight></codeline>
<codeline lineno="4047"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DO2(buf,i)<sp/><sp/>DO1(buf,i);<sp/>DO1(buf,i+1);</highlight></codeline>
<codeline lineno="4048"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DO4(buf,i)<sp/><sp/>DO2(buf,i);<sp/>DO2(buf,i+2);</highlight></codeline>
<codeline lineno="4049"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DO8(buf,i)<sp/><sp/>DO4(buf,i);<sp/>DO4(buf,i+4);</highlight></codeline>
<codeline lineno="4050"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DO16(buf)<sp/><sp/><sp/>DO8(buf,0);<sp/>DO8(buf,8);</highlight></codeline>
<codeline lineno="4051"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4052"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4053"><highlight class="normal">uLong<sp/>adler32(uLong<sp/>adler,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Byte<sp/>*buf,<sp/>uInt<sp/>len)</highlight></codeline>
<codeline lineno="4054"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>s1<sp/>=<sp/>adler<sp/>&amp;<sp/>0xffff;</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>s2<sp/>=<sp/>(adler<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xffff;</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"></highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf<sp/>==<sp/>Z_NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1L;</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"></highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>len<sp/>&lt;<sp/>NMAX<sp/>?<sp/>len<sp/>:<sp/>NMAX;</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>-=<sp/>k;</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(k<sp/>&gt;=<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DO16(buf);</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>+=<sp/>16;</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>-=<sp/>16;</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>+=<sp/>*buf++;</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/>+=<sp/>s1;</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--k);</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>%=<sp/>BASE;</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/>%=<sp/>BASE;</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(s2<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>s1;</highlight></codeline>
<codeline lineno="4077"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"></highlight></codeline>
<codeline lineno="4079"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@(#)<sp/>$Id:<sp/>unzip.c,v<sp/>1.2<sp/>1999/09/07<sp/>20:51:25<sp/>zoid<sp/>Exp<sp/>$<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4080"><highlight class="normal"></highlight></codeline>
<codeline lineno="4081"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>infblock.h<sp/>--<sp/>header<sp/>to<sp/>use<sp/>infblock.c</highlight></codeline>
<codeline lineno="4082"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>1995-1998<sp/>Mark<sp/>Adler</highlight></codeline>
<codeline lineno="4083"><highlight class="comment"><sp/>*<sp/>For<sp/>conditions<sp/>of<sp/>distribution<sp/>and<sp/>use,<sp/>see<sp/>copyright<sp/>notice<sp/>in<sp/>zlib.h<sp/></highlight></codeline>
<codeline lineno="4084"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4085"><highlight class="normal"></highlight></codeline>
<codeline lineno="4086"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>WARNING:<sp/>this<sp/>file<sp/>should<sp/>*not*<sp/>be<sp/>used<sp/>by<sp/>applications.<sp/>It<sp/>is</highlight></codeline>
<codeline lineno="4087"><highlight class="comment"><sp/><sp/><sp/>part<sp/>of<sp/>the<sp/>implementation<sp/>of<sp/>the<sp/>compression<sp/>library<sp/>and<sp/>is</highlight></codeline>
<codeline lineno="4088"><highlight class="comment"><sp/><sp/><sp/>subject<sp/>to<sp/>change.<sp/>Applications<sp/>should<sp/>only<sp/>use<sp/>zlib.h.</highlight></codeline>
<codeline lineno="4089"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4090"><highlight class="normal"></highlight></codeline>
<codeline lineno="4091"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*<sp/>inflate_blocks_new<sp/>OF((</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>z,</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/>check_func<sp/>c,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>w));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>window<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4095"><highlight class="normal"></highlight></codeline>
<codeline lineno="4096"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_blocks<sp/>OF((</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*,</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>,</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initial<sp/>return<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4100"><highlight class="normal"></highlight></codeline>
<codeline lineno="4101"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inflate_blocks_reset<sp/>OF((</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*,</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>,</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/><sp/>uLong<sp/>*));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>value<sp/>on<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4105"><highlight class="normal"></highlight></codeline>
<codeline lineno="4106"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_blocks_free<sp/>OF((</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*,</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structz__stream__s" kindref="compound">z_streamp</ref>));</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"></highlight></codeline>
<codeline lineno="4110"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inflate_set_dictionary<sp/>OF((</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*s,</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Byte<sp/>*d,<sp/><sp/></highlight><highlight class="comment">/*<sp/>dictionary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/><sp/>n));<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>dictionary<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4114"><highlight class="normal"></highlight></codeline>
<codeline lineno="4115"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate_blocks_sync_point<sp/>OF((</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/>*s));</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"></highlight></codeline>
<codeline lineno="4118"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imMETHOD,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>waiting<sp/>for<sp/>method<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imFLAG,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>waiting<sp/>for<sp/>flag<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imDICT4,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>four<sp/>dictionary<sp/>check<sp/>bytes<sp/>to<sp/>go<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imDICT3,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>three<sp/>dictionary<sp/>check<sp/>bytes<sp/>to<sp/>go<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imDICT2,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>two<sp/>dictionary<sp/>check<sp/>bytes<sp/>to<sp/>go<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imDICT1,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>one<sp/>dictionary<sp/>check<sp/>byte<sp/>to<sp/>go<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imDICT0,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>waiting<sp/>for<sp/>inflateSetDictionary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imBLOCKS,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>decompressing<sp/>blocks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imCHECK4,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>four<sp/>check<sp/>bytes<sp/>to<sp/>go<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imCHECK3,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>three<sp/>check<sp/>bytes<sp/>to<sp/>go<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imCHECK2,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>two<sp/>check<sp/>bytes<sp/>to<sp/>go<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imCHECK1,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>one<sp/>check<sp/>byte<sp/>to<sp/>go<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imDONE,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>finished<sp/>check,<sp/>done<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imBAD}<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>got<sp/>an<sp/>error--stay<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4133"><highlight class="normal">inflate_mode;</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"></highlight></codeline>
<codeline lineno="4135"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>inflate<sp/>private<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4136" refid="structinternal__state" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinternal__state" kindref="compound">internal_state</ref><sp/>{</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"></highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/>inflate_mode<sp/><sp/>mode;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>current<sp/>inflate<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4140"><highlight class="normal"></highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>mode<sp/>dependent<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>method;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>FLAGS,<sp/>method<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uLong<sp/>was;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>computed<sp/>check<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uLong<sp/>need;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>stream<sp/>check<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>check;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>CHECK,<sp/>check<sp/>values<sp/>to<sp/>compare<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/><sp/><sp/>uInt<sp/>marker;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>BAD,<sp/>inflateSync&apos;s<sp/>marker<sp/>bytes<sp/>count<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/>}<sp/>sub;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>submode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4150"><highlight class="normal"></highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>mode<sp/>independent<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>nowrap;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>flag<sp/>for<sp/>no<sp/>wrapper<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/>uInt<sp/>wbits;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log2(window<sp/>size)<sp/><sp/>(8..15,<sp/>defaults<sp/>to<sp/>15)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><ref refid="structinflate__blocks__state" kindref="compound">inflate_blocks_statef</ref><sp/></highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/>*blocks;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>current<sp/>inflate_blocks<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4156"><highlight class="normal"></highlight></codeline>
<codeline lineno="4157"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"></highlight></codeline>
<codeline lineno="4159"><highlight class="normal"></highlight></codeline>
<codeline lineno="4160"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflateReset(<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>z)</highlight></codeline>
<codeline lineno="4161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>==<sp/>Z_NULL<sp/>||<sp/>z-&gt;state<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_STREAM_ERROR;</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/>z-&gt;total_in<sp/>=<sp/>z-&gt;total_out<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/>z-&gt;msg<sp/>=<sp/>Z_NULL;</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/>z-&gt;state-&gt;mode<sp/>=<sp/>z-&gt;state-&gt;nowrap<sp/>?<sp/>imBLOCKS<sp/>:<sp/>imMETHOD;</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/>inflate_blocks_reset(z-&gt;state-&gt;blocks,<sp/>z,<sp/>Z_NULL);</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/>Tracev((</highlight><highlight class="stringliteral">&quot;inflate:<sp/>reset\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_OK;</highlight></codeline>
<codeline lineno="4170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"></highlight></codeline>
<codeline lineno="4172"><highlight class="normal"></highlight></codeline>
<codeline lineno="4173"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflateEnd(<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>z)</highlight></codeline>
<codeline lineno="4174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>==<sp/>Z_NULL<sp/>||<sp/>z-&gt;state<sp/>==<sp/>Z_NULL<sp/>||<sp/>z-&gt;zfree<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_STREAM_ERROR;</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;state-&gt;blocks<sp/>!=<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/><sp/><sp/>inflate_blocks_free(z-&gt;state-&gt;blocks,<sp/>z);</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/>ZFREE(z,<sp/>z-&gt;state);</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/>z-&gt;state<sp/>=<sp/>Z_NULL;</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/>Tracev((</highlight><highlight class="stringliteral">&quot;inflate:<sp/>end\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_OK;</highlight></codeline>
<codeline lineno="4183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"></highlight></codeline>
<codeline lineno="4185"><highlight class="normal"></highlight></codeline>
<codeline lineno="4186"><highlight class="normal"></highlight></codeline>
<codeline lineno="4187"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflateInit2_(<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>z,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*version,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_size)</highlight></codeline>
<codeline lineno="4188"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(version<sp/>==<sp/>Z_NULL<sp/>||<sp/>version[0]<sp/>!=<sp/>ZLIB_VERSION[0]<sp/>||</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream_size<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structz__stream__s" kindref="compound">z_stream</ref>))</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_VERSION_ERROR;</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"></highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_STREAM_ERROR;</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/>z-&gt;msg<sp/>=<sp/>Z_NULL;</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;zalloc<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/><sp/>z-&gt;zalloc<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>unsigned,<sp/>unsigned))zcalloc;</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/>z-&gt;opaque<sp/>=<sp/>(voidp)0;</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;zfree<sp/>==<sp/>Z_NULL)<sp/>z-&gt;zfree<sp/>=<sp/>(void<sp/>(*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))zcfree;</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((z-&gt;state<sp/>=<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structinternal__state" kindref="compound">internal_state</ref><sp/>*)</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZALLOC(z,1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structinternal__state" kindref="compound">internal_state</ref>)))<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_MEM_ERROR;</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/>z-&gt;state-&gt;blocks<sp/>=<sp/>Z_NULL;</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"></highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>handle<sp/>undocumented<sp/>nowrap<sp/>option<sp/>(no<sp/>zlib<sp/>header<sp/>or<sp/>check)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/>z-&gt;state-&gt;nowrap<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>-<sp/>w;</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/><sp/><sp/>z-&gt;state-&gt;nowrap<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"></highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>window<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w<sp/>&lt;<sp/>8<sp/>||<sp/>w<sp/>&gt;<sp/>15)</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/>inflateEnd(z);</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_STREAM_ERROR;</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/>z-&gt;state-&gt;wbits<sp/>=<sp/>(uInt)w;</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"></highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>create<sp/>inflate_blocks<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((z-&gt;state-&gt;blocks<sp/>=</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inflate_blocks_new(z,<sp/>z-&gt;state-&gt;nowrap<sp/>?<sp/>Z_NULL<sp/>:<sp/>adler32,<sp/>(uInt)1<sp/>&lt;&lt;<sp/>w))</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/><sp/>inflateEnd(z);</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_MEM_ERROR;</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/>Tracev((</highlight><highlight class="stringliteral">&quot;inflate:<sp/>allocated\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"></highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>reset<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/>inflateReset(z);</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_OK;</highlight></codeline>
<codeline lineno="4237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"></highlight></codeline>
<codeline lineno="4239"><highlight class="normal"></highlight></codeline>
<codeline lineno="4240"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflateInit_(<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>z,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*version,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stream_size)</highlight></codeline>
<codeline lineno="4241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inflateInit2_(z,<sp/>DEF_WBITS,<sp/>version,<sp/>stream_size);</highlight></codeline>
<codeline lineno="4243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"></highlight></codeline>
<codeline lineno="4245"><highlight class="normal"></highlight></codeline>
<codeline lineno="4246"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>iNEEDBYTE<sp/>{if(z-&gt;avail_in==0)return<sp/>r;r=f;}</highlight></codeline>
<codeline lineno="4247"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>iNEXTBYTE<sp/>(z-&gt;avail_in--,z-&gt;total_in++,*z-&gt;next_in++)</highlight></codeline>
<codeline lineno="4248"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4249"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflate(<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>z,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f)</highlight></codeline>
<codeline lineno="4250"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/>uInt<sp/>b;</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"></highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>==<sp/>Z_NULL<sp/>||<sp/>z-&gt;state<sp/>==<sp/>Z_NULL<sp/>||<sp/>z-&gt;next_in<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_STREAM_ERROR;</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/>f<sp/>=<sp/>f<sp/>==<sp/>Z_FINISH<sp/>?<sp/>Z_BUF_ERROR<sp/>:<sp/>Z_OK;</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/>r<sp/>=<sp/>Z_BUF_ERROR;</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(z-&gt;state-&gt;mode)</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>imMETHOD:</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iNEEDBYTE</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((z-&gt;state-&gt;sub.method<sp/>=<sp/>iNEXTBYTE)<sp/>&amp;<sp/>0xf)<sp/>!=<sp/>Z_DEFLATED)</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;mode<sp/>=<sp/>imBAD;</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;unknown<sp/>compression<sp/>method&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;sub.marker<sp/>=<sp/>5;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>can&apos;t<sp/>try<sp/>inflateSync<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((z-&gt;state-&gt;sub.method<sp/>&gt;&gt;<sp/>4)<sp/>+<sp/>8<sp/>&gt;<sp/>z-&gt;state-&gt;wbits)</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;mode<sp/>=<sp/>imBAD;</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;invalid<sp/>window<sp/>size&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;sub.marker<sp/>=<sp/>5;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>can&apos;t<sp/>try<sp/>inflateSync<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;mode<sp/>=<sp/>imFLAG;</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>imFLAG:</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iNEEDBYTE</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>iNEXTBYTE;</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((z-&gt;state-&gt;sub.method<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>b)<sp/>%<sp/>31)</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;mode<sp/>=<sp/>imBAD;</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;incorrect<sp/>header<sp/>check&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;sub.marker<sp/>=<sp/>5;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>can&apos;t<sp/>try<sp/>inflateSync<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Tracev((</highlight><highlight class="stringliteral">&quot;inflate:<sp/>zlib<sp/>header<sp/>ok\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(b<sp/>&amp;<sp/>PRESET_DICT))</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;mode<sp/>=<sp/>imBLOCKS;</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;mode<sp/>=<sp/>imDICT4;</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>imDICT4:</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iNEEDBYTE</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;sub.check.need<sp/>=<sp/>(uLong)iNEXTBYTE<sp/>&lt;&lt;<sp/>24;</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;mode<sp/>=<sp/>imDICT3;</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>imDICT3:</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iNEEDBYTE</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;sub.check.need<sp/>+=<sp/>(uLong)iNEXTBYTE<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;mode<sp/>=<sp/>imDICT2;</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>imDICT2:</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iNEEDBYTE</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;sub.check.need<sp/>+=<sp/>(uLong)iNEXTBYTE<sp/>&lt;&lt;<sp/>8;</highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;mode<sp/>=<sp/>imDICT1;</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>imDICT1:</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iNEEDBYTE</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;sub.check.need<sp/>+=<sp/>(uLong)iNEXTBYTE;</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;adler<sp/>=<sp/>z-&gt;state-&gt;sub.check.need;</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;mode<sp/>=<sp/>imDICT0;</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_NEED_DICT;</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>imDICT0:</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;mode<sp/>=<sp/>imBAD;</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;need<sp/>dictionary&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;sub.marker<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>can<sp/>try<sp/>inflateSync<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_STREAM_ERROR;</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>imBLOCKS:</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>inflate_blocks(z-&gt;state-&gt;blocks,<sp/>z,<sp/>r);</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>Z_DATA_ERROR)</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;mode<sp/>=<sp/>imBAD;</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;sub.marker<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>can<sp/>try<sp/>inflateSync<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>Z_OK)</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>!=<sp/>Z_STREAM_END)</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inflate_blocks_reset(z-&gt;state-&gt;blocks,<sp/>z,<sp/>&amp;z-&gt;state-&gt;sub.check.was);</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;state-&gt;nowrap)</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;mode<sp/>=<sp/>imDONE;</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;mode<sp/>=<sp/>imCHECK4;</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>imCHECK4:</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iNEEDBYTE</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;sub.check.need<sp/>=<sp/>(uLong)iNEXTBYTE<sp/>&lt;&lt;<sp/>24;</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;mode<sp/>=<sp/>imCHECK3;</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>imCHECK3:</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iNEEDBYTE</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;sub.check.need<sp/>+=<sp/>(uLong)iNEXTBYTE<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;mode<sp/>=<sp/>imCHECK2;</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>imCHECK2:</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iNEEDBYTE</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;sub.check.need<sp/>+=<sp/>(uLong)iNEXTBYTE<sp/>&lt;&lt;<sp/>8;</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;mode<sp/>=<sp/>imCHECK1;</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>imCHECK1:</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iNEEDBYTE</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;sub.check.need<sp/>+=<sp/>(uLong)iNEXTBYTE;</highlight></codeline>
<codeline lineno="4352"><highlight class="normal"></highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;state-&gt;sub.check.was<sp/>!=<sp/>z-&gt;state-&gt;sub.check.need)</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;mode<sp/>=<sp/>imBAD;</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;msg<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;incorrect<sp/>data<sp/>check&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;sub.marker<sp/>=<sp/>5;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>can&apos;t<sp/>try<sp/>inflateSync<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Tracev((</highlight><highlight class="stringliteral">&quot;inflate:<sp/>zlib<sp/>check<sp/>ok\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;state-&gt;mode<sp/>=<sp/>imDONE;</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>imDONE:</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_STREAM_END;</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>imBAD:</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_STREAM_ERROR;</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4369"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NEED_DUMMY_RETURN</highlight></codeline>
<codeline lineno="4370"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_STREAM_ERROR;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Some<sp/>dumb<sp/>compilers<sp/>complain<sp/>without<sp/>this<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4371"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="4372"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"></highlight></codeline>
<codeline lineno="4374"><highlight class="normal"></highlight></codeline>
<codeline lineno="4375"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflateSetDictionary(<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>z,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Byte<sp/>*dictionary,<sp/>uInt<sp/>dictLength)</highlight></codeline>
<codeline lineno="4376"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/>uInt<sp/>length<sp/>=<sp/>dictLength;</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"></highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>==<sp/>Z_NULL<sp/>||<sp/>z-&gt;state<sp/>==<sp/>Z_NULL<sp/>||<sp/>z-&gt;state-&gt;mode<sp/>!=<sp/>imDICT0)</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_STREAM_ERROR;</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"></highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adler32(1L,<sp/>dictionary,<sp/>dictLength)<sp/>!=<sp/>z-&gt;adler)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/>z-&gt;adler<sp/>=<sp/>1L;</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"></highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&gt;=<sp/>((uInt)1&lt;&lt;z-&gt;state-&gt;wbits))</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>(1&lt;&lt;z-&gt;state-&gt;wbits)-1;</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/><sp/><sp/>dictionary<sp/>+=<sp/>dictLength<sp/>-<sp/>length;</highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/>inflate_set_dictionary(z-&gt;state-&gt;blocks,<sp/>dictionary,<sp/>length);</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/>z-&gt;state-&gt;mode<sp/>=<sp/>imBLOCKS;</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_OK;</highlight></codeline>
<codeline lineno="4393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"></highlight></codeline>
<codeline lineno="4395"><highlight class="normal"></highlight></codeline>
<codeline lineno="4396"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflateSync(<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>z)</highlight></codeline>
<codeline lineno="4397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/>uInt<sp/>n;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>bytes<sp/>to<sp/>look<sp/>at<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/>Byte<sp/>*p;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>to<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/>uInt<sp/>m;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>marker<sp/>bytes<sp/>found<sp/>in<sp/>a<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/>uLong<sp/>r,<sp/>w;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>temporaries<sp/>to<sp/>save<sp/>total_in<sp/>and<sp/>total_out<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4402"><highlight class="normal"></highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>up<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>==<sp/>Z_NULL<sp/>||<sp/>z-&gt;state<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_STREAM_ERROR;</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;state-&gt;mode<sp/>!=<sp/>imBAD)</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/>z-&gt;state-&gt;mode<sp/>=<sp/>imBAD;</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/><sp/><sp/>z-&gt;state-&gt;sub.marker<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((n<sp/>=<sp/>z-&gt;avail_in)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_BUF_ERROR;</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>z-&gt;next_in;</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>z-&gt;state-&gt;sub.marker;</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"></highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>search<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>&amp;&amp;<sp/>m<sp/>&lt;<sp/>4)</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Byte<sp/>mark[4]<sp/>=<sp/>{0,<sp/>0,<sp/>0xff,<sp/>0xff};</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p<sp/>==<sp/>mark[m])</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m++;</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p)</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>4<sp/>-<sp/>m;</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/><sp/><sp/>p++,<sp/>n--;</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"></highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>restore<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/>z-&gt;total_in<sp/>+=<sp/>p<sp/>-<sp/>z-&gt;next_in;</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/>z-&gt;next_in<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/>z-&gt;avail_in<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/>z-&gt;state-&gt;sub.marker<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"></highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>return<sp/>no<sp/>joy<sp/>or<sp/>set<sp/>up<sp/>to<sp/>restart<sp/>on<sp/>a<sp/>new<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>!=<sp/>4)</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_DATA_ERROR;</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/>r<sp/>=<sp/>z-&gt;total_in;<sp/><sp/>w<sp/>=<sp/>z-&gt;total_out;</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"><sp/><sp/>inflateReset(z);</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/>z-&gt;total_in<sp/>=<sp/>r;<sp/><sp/>z-&gt;total_out<sp/>=<sp/>w;</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/>z-&gt;state-&gt;mode<sp/>=<sp/>imBLOCKS;</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_OK;</highlight></codeline>
<codeline lineno="4443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"></highlight></codeline>
<codeline lineno="4445"><highlight class="normal"></highlight></codeline>
<codeline lineno="4446"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>true<sp/>if<sp/>inflate<sp/>is<sp/>currently<sp/>at<sp/>the<sp/>end<sp/>of<sp/>a<sp/>block<sp/>generated</highlight></codeline>
<codeline lineno="4447"><highlight class="comment"><sp/>*<sp/>by<sp/>Z_SYNC_FLUSH<sp/>or<sp/>Z_FULL_FLUSH.<sp/>This<sp/>function<sp/>is<sp/>used<sp/>by<sp/>one<sp/>PPP</highlight></codeline>
<codeline lineno="4448"><highlight class="comment"><sp/>*<sp/>implementation<sp/>to<sp/>provide<sp/>an<sp/>additional<sp/>safety<sp/>check.<sp/>PPP<sp/>uses<sp/>Z_SYNC_FLUSH</highlight></codeline>
<codeline lineno="4449"><highlight class="comment"><sp/>*<sp/>but<sp/>removes<sp/>the<sp/>length<sp/>bytes<sp/>of<sp/>the<sp/>resulting<sp/>empty<sp/>stored<sp/>block.<sp/>When</highlight></codeline>
<codeline lineno="4450"><highlight class="comment"><sp/>*<sp/>decompressing,<sp/>PPP<sp/>checks<sp/>that<sp/>at<sp/>the<sp/>end<sp/>of<sp/>input<sp/>packet,<sp/>inflate<sp/>is</highlight></codeline>
<codeline lineno="4451"><highlight class="comment"><sp/>*<sp/>waiting<sp/>for<sp/>these<sp/>length<sp/>bytes.</highlight></codeline>
<codeline lineno="4452"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4453"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inflateSyncPoint(<ref refid="structz__stream__s" kindref="compound">z_streamp</ref><sp/>z)</highlight></codeline>
<codeline lineno="4454"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>==<sp/>Z_NULL<sp/>||<sp/>z-&gt;state<sp/>==<sp/>Z_NULL<sp/>||<sp/>z-&gt;state-&gt;blocks<sp/>==<sp/>Z_NULL)</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Z_STREAM_ERROR;</highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inflate_blocks_sync_point(z-&gt;state-&gt;blocks);</highlight></codeline>
<codeline lineno="4458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"></highlight></codeline>
<codeline lineno="4460"><highlight class="normal">voidp<sp/>zcalloc<sp/>(voidp<sp/>opaque,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>items,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="4461"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opaque)<sp/>items<sp/>+=<sp/>size<sp/>-<sp/>size;<sp/></highlight><highlight class="comment">/*<sp/>make<sp/>compiler<sp/>happy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(voidp)Mem_ClearedAlloc(items*size);</highlight></codeline>
<codeline lineno="4464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4465"><highlight class="normal"></highlight></codeline>
<codeline lineno="4466"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>zcfree<sp/>(voidp<sp/>opaque,<sp/>voidp<sp/>ptr)</highlight></codeline>
<codeline lineno="4467"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/><sp/><sp/>Mem_Free(ptr);</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opaque)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>make<sp/>compiler<sp/>happy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4470"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/framework/Unzip.cpp"/>
  </compounddef>
</doxygen>
