<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_vertex_cache_8cpp" kind="file">
    <compoundname>VertexCache.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../idlib/precompiled.h</includes>
    <includes refid="tr__local_8h" local="yes">tr_local.h</includes>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_vertex_cache_8cpp_1adf9ee3576b161087eda46b6ca70929d5" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int FRAME_MEMORY_BYTES</definition>
        <argsstring></argsstring>
        <name>FRAME_MEMORY_BYTES</name>
        <initializer>= 0x200000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/VertexCache.cpp" line="35" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/VertexCache.cpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_vertex_cache_8cpp_1a51d0a3f6168fe0d250ac9c97360eb4fd" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int EXPAND_HEADERS</definition>
        <argsstring></argsstring>
        <name>EXPAND_HEADERS</name>
        <initializer>= 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/VertexCache.cpp" line="36" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/VertexCache.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_vertex_cache_8cpp_1a16642d73fe82148774ee9d628d45d8bd" prot="public" static="no" mutable="no">
        <type><ref refid="classid_vertex_cache" kindref="compound">idVertexCache</ref></type>
        <definition>idVertexCache vertexCache</definition>
        <argsstring></argsstring>
        <name>vertexCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/VertexCache.cpp" line="41" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/VertexCache.cpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_vertex_cache_8cpp_1a0447cca1eafe8f6ad14ad284c11fe9b8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void R_ListVertexCache_f</definition>
        <argsstring>(const idCmdArgs &amp;args)</argsstring>
        <name>R_ListVertexCache_f</name>
        <param>
          <type>const <ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/VertexCache.cpp" line="48" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/VertexCache.cpp" bodystart="48" bodyend="50"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tr_local.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>FRAME_MEMORY_BYTES<sp/>=<sp/>0x200000;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>EXPAND_HEADERS<sp/>=<sp/>1024;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idVertexCache::r_showVertexCache(<sp/></highlight><highlight class="stringliteral">&quot;r_showVertexCache&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_INTEGER|CVAR_RENDERER,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>idVertexCache::r_vertexBufferMegs(<sp/></highlight><highlight class="stringliteral">&quot;r_vertexBufferMegs&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;32&quot;</highlight><highlight class="normal">,<sp/>CVAR_INTEGER|CVAR_RENDERER,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><ref refid="classid_vertex_cache" kindref="compound">idVertexCache</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexCache;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="44"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="45"><highlight class="comment">R_ListVertexCache_f</highlight></codeline>
<codeline lineno="46"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="47"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_ListVertexCache_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexCache.List();</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="53"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="54"><highlight class="comment">idVertexCache::ActuallyFree</highlight></codeline>
<codeline lineno="55"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="56"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idVertexCache::ActuallyFree(<sp/><ref refid="structvert_cache__s" kindref="compound">vertCache_t</ref><sp/>*block<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!block)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Error(<sp/></highlight><highlight class="stringliteral">&quot;idVertexCache<sp/>Free:<sp/>NULL<sp/>pointer&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>block-&gt;user<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let<sp/>the<sp/>owner<sp/>know<sp/>we<sp/>have<sp/>purged<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*block-&gt;user<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;user<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>temp<sp/>blocks<sp/>are<sp/>in<sp/>a<sp/>shared<sp/>space<sp/>that<sp/>won&apos;t<sp/>be<sp/>freed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>block-&gt;tag<sp/>!=<sp/>TAG_TEMP<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>staticAllocTotal<sp/>-=<sp/>block-&gt;size;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>staticCountTotal--;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>block-&gt;vbo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>this<sp/>isn&apos;t<sp/>really<sp/>necessary,<sp/>it<sp/>will<sp/>be<sp/>reused<sp/>soon<sp/>enough</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>filling<sp/>with<sp/>zero<sp/>length<sp/>data<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>freeing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglBindBufferARB(GL_ARRAY_BUFFER_ARB,<sp/>block-&gt;vbo);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglBufferDataARB(GL_ARRAY_BUFFER_ARB,<sp/>0,<sp/>0,<sp/>GL_DYNAMIC_DRAW_ARB);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>block-&gt;virtMem<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>block-&gt;virtMem<sp/>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;virtMem<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;tag<sp/>=<sp/>TAG_FREE;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mark<sp/>as<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unlink<sp/>stick<sp/>it<sp/>back<sp/>on<sp/>the<sp/>free<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;next-&gt;prev<sp/>=<sp/>block-&gt;prev;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;prev-&gt;next<sp/>=<sp/>block-&gt;next;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stick<sp/>it<sp/>on<sp/>the<sp/>front<sp/>of<sp/>the<sp/>free<sp/>list<sp/>so<sp/>it<sp/>will<sp/>be<sp/>reused<sp/>immediately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;next<sp/>=<sp/>freeStaticHeaders.next;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;prev<sp/>=<sp/>&amp;freeStaticHeaders;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stick<sp/>it<sp/>on<sp/>the<sp/>back<sp/>of<sp/>the<sp/>free<sp/>list<sp/>so<sp/>it<sp/>won&apos;t<sp/>be<sp/>reused<sp/>soon<sp/>(just<sp/>for<sp/>debugging)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;next<sp/>=<sp/>&amp;freeStaticHeaders;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;prev<sp/>=<sp/>freeStaticHeaders.prev;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;next-&gt;prev<sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;prev-&gt;next<sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="105"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="106"><highlight class="comment">idVertexCache::Position</highlight></codeline>
<codeline lineno="107"><highlight class="comment"></highlight></codeline>
<codeline lineno="108"><highlight class="comment">this<sp/>will<sp/>be<sp/>a<sp/>real<sp/>pointer<sp/>with<sp/>virtual<sp/>memory,</highlight></codeline>
<codeline lineno="109"><highlight class="comment">but<sp/>it<sp/>will<sp/>be<sp/>an<sp/>int<sp/>offset<sp/>cast<sp/>to<sp/>a<sp/>pointer<sp/>with</highlight></codeline>
<codeline lineno="110"><highlight class="comment">ARB_vertex_buffer_object</highlight></codeline>
<codeline lineno="111"><highlight class="comment"></highlight></codeline>
<codeline lineno="112"><highlight class="comment">The<sp/>ARB_vertex_buffer_object<sp/>will<sp/>be<sp/>bound</highlight></codeline>
<codeline lineno="113"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="114"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*idVertexCache::Position(<sp/><ref refid="structvert_cache__s" kindref="compound">vertCache_t</ref><sp/>*buffer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!buffer<sp/>||<sp/>buffer-&gt;tag<sp/>==<sp/>TAG_FREE<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;FatalError(<sp/></highlight><highlight class="stringliteral">&quot;idVertexCache::Position:<sp/>bad<sp/>vertCache_t&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>ARB<sp/>vertex<sp/>object<sp/>just<sp/>uses<sp/>an<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>buffer-&gt;vbo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_showVertexCache.GetInteger()<sp/>==<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>buffer-&gt;tag<sp/>==<sp/>TAG_TEMP<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;GL_ARRAY_BUFFER_ARB<sp/>=<sp/>%i<sp/>+<sp/>%i<sp/>(%i<sp/>bytes)\n&quot;</highlight><highlight class="normal">,<sp/>buffer-&gt;vbo,<sp/>buffer-&gt;offset,<sp/>buffer-&gt;size<sp/>);<sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;GL_ARRAY_BUFFER_ARB<sp/>=<sp/>%i<sp/>(%i<sp/>bytes)\n&quot;</highlight><highlight class="normal">,<sp/>buffer-&gt;vbo,<sp/>buffer-&gt;size<sp/>);<sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>buffer-&gt;indexBuffer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglBindBufferARB(<sp/>GL_ELEMENT_ARRAY_BUFFER_ARB,<sp/>buffer-&gt;vbo<sp/>);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglBindBufferARB(<sp/>GL_ARRAY_BUFFER_ARB,<sp/>buffer-&gt;vbo<sp/>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)buffer-&gt;offset;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>virtual<sp/>memory<sp/>is<sp/>a<sp/>real<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)((byte<sp/>*)buffer-&gt;virtMem<sp/>+<sp/>buffer-&gt;offset);</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idVertexCache::UnbindIndex()<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>qglBindBufferARB(<sp/>GL_ELEMENT_ARRAY_BUFFER_ARB,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="149"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="150"><highlight class="comment">idVertexCache::Init</highlight></codeline>
<codeline lineno="151"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="152"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idVertexCache::Init()<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;AddCommand(<sp/></highlight><highlight class="stringliteral">&quot;listVertexCache&quot;</highlight><highlight class="normal">,<sp/>R_ListVertexCache_f,<sp/>CMD_FL_RENDERER,<sp/></highlight><highlight class="stringliteral">&quot;lists<sp/>vertex<sp/>cache&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_vertexBufferMegs.GetInteger()<sp/>&lt;<sp/>8<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r_vertexBufferMegs.SetInteger(<sp/>8<sp/>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>virtualMemory<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>ARB_vertex_buffer_object<sp/>unless<sp/>explicitly<sp/>disabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>r_useVertexBuffers.GetInteger()<sp/>&amp;&amp;<sp/>glConfig.ARBVertexBufferObjectAvailable<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;using<sp/>ARB_vertex_buffer_object<sp/>memory\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>virtualMemory<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r_useIndexBuffers.SetBool(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;WARNING:<sp/>vertex<sp/>array<sp/>range<sp/>in<sp/>virtual<sp/>memory<sp/>(SLOW)\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>the<sp/>cache<sp/>memory<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>freeStaticHeaders.next<sp/>=<sp/>freeStaticHeaders.prev<sp/>=<sp/>&amp;freeStaticHeaders;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>staticHeaders.next<sp/>=<sp/>staticHeaders.prev<sp/>=<sp/>&amp;staticHeaders;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>freeDynamicHeaders.next<sp/>=<sp/>freeDynamicHeaders.prev<sp/>=<sp/>&amp;freeDynamicHeaders;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>dynamicHeaders.next<sp/>=<sp/>dynamicHeaders.prev<sp/>=<sp/>&amp;dynamicHeaders;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>deferredFreeList.next<sp/>=<sp/>deferredFreeList.prev<sp/>=<sp/>&amp;deferredFreeList;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>the<sp/>dynamic<sp/>frame<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>frameBytes<sp/>=<sp/>FRAME_MEMORY_BYTES;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>staticAllocTotal<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/>*junk<sp/>=<sp/>(byte<sp/>*)Mem_Alloc(<sp/>frameBytes<sp/>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>NUM_VERTEX_FRAMES<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocatingTempBuffer<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>force<sp/>the<sp/>alloc<sp/>to<sp/>use<sp/>GL_STREAM_DRAW_ARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Alloc(<sp/>junk,<sp/>frameBytes,<sp/>&amp;tempBuffers[i]<sp/>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocatingTempBuffer<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempBuffers[i]-&gt;tag<sp/>=<sp/>TAG_FIXED;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unlink<sp/>these<sp/>from<sp/>the<sp/>static<sp/>list,<sp/>so<sp/>they<sp/>won&apos;t<sp/>ever<sp/>get<sp/>purged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempBuffers[i]-&gt;next-&gt;prev<sp/>=<sp/>tempBuffers[i]-&gt;prev;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempBuffers[i]-&gt;prev-&gt;next<sp/>=<sp/>tempBuffers[i]-&gt;next;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>Mem_Free(<sp/>junk<sp/>);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>EndFrame();</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="198"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="199"><highlight class="comment">idVertexCache::PurgeAll</highlight></codeline>
<codeline lineno="200"><highlight class="comment"></highlight></codeline>
<codeline lineno="201"><highlight class="comment">Used<sp/>when<sp/>toggling<sp/>vertex<sp/>programs<sp/>on<sp/>or<sp/>off,<sp/>because</highlight></codeline>
<codeline lineno="202"><highlight class="comment">the<sp/>cached<sp/>data<sp/>isn&apos;t<sp/>valid</highlight></codeline>
<codeline lineno="203"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="204"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idVertexCache::PurgeAll()<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>staticHeaders.next<sp/>!=<sp/>&amp;staticHeaders<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ActuallyFree(<sp/>staticHeaders.next<sp/>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="212"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="213"><highlight class="comment">idVertexCache::Shutdown</highlight></codeline>
<codeline lineno="214"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="215"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idVertexCache::Shutdown()<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>PurgeAll();<sp/>//<sp/>!@#:<sp/>also<sp/>purge<sp/>the<sp/>temp<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>headerAllocator.Shutdown();</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="223"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="224"><highlight class="comment">idVertexCache::Alloc</highlight></codeline>
<codeline lineno="225"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="226"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idVertexCache::Alloc(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/><ref refid="structvert_cache__s" kindref="compound">vertCache_t</ref><sp/>**buffer,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>indexBuffer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvert_cache__s" kindref="compound">vertCache_t</ref><sp/>*block;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>size<sp/>&lt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Error(<sp/></highlight><highlight class="stringliteral">&quot;idVertexCache::Alloc:<sp/>size<sp/>=<sp/>%i\n&quot;</highlight><highlight class="normal">,<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>can&apos;t<sp/>find<sp/>anything,<sp/>it<sp/>will<sp/>be<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>*buffer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>don&apos;t<sp/>have<sp/>any<sp/>remaining<sp/>unused<sp/>headers,<sp/>allocate<sp/>some<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>freeStaticHeaders.next<sp/>==<sp/>&amp;freeStaticHeaders<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>EXPAND_HEADERS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>=<sp/>headerAllocator.Alloc();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;next<sp/>=<sp/>freeStaticHeaders.next;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;prev<sp/>=<sp/>&amp;freeStaticHeaders;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;next-&gt;prev<sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;prev-&gt;next<sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!virtualMemory<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglGenBuffersARB(<sp/>1,<sp/>&amp;<sp/>block-&gt;vbo<sp/>);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>it<sp/>from<sp/>the<sp/>freeStaticHeaders<sp/>list<sp/>to<sp/>the<sp/>staticHeaders<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>block<sp/>=<sp/>freeStaticHeaders.next;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;next-&gt;prev<sp/>=<sp/>block-&gt;prev;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;prev-&gt;next<sp/>=<sp/>block-&gt;next;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;next<sp/>=<sp/>staticHeaders.next;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;prev<sp/>=<sp/>&amp;staticHeaders;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;next-&gt;prev<sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;prev-&gt;next<sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;tag<sp/>=<sp/>TAG_USED;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>data<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>staticAllocThisFrame<sp/>+=<sp/>block-&gt;size;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>staticCountThisFrame++;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>staticCountTotal++;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>staticAllocTotal<sp/>+=<sp/>block-&gt;size;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>be<sp/>set<sp/>to<sp/>zero<sp/>when<sp/>it<sp/>is<sp/>purged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;user<sp/>=<sp/>buffer;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>*buffer<sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocation<sp/>doesn&apos;t<sp/>imply<sp/>used-for-drawing,<sp/>because<sp/>at<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>time<sp/>lots<sp/>of<sp/>things<sp/>may<sp/>be<sp/>created,<sp/>but<sp/>they<sp/>aren&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>referenced<sp/>by<sp/>the<sp/>GPU<sp/>yet,<sp/>and<sp/>can<sp/>be<sp/>purged<sp/>if<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;frameUsed<sp/>=<sp/>currentFrame<sp/>-<sp/>NUM_VERTEX_FRAMES;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;indexBuffer<sp/>=<sp/>indexBuffer;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>block-&gt;vbo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>indexBuffer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglBindBufferARB(<sp/>GL_ELEMENT_ARRAY_BUFFER_ARB,<sp/>block-&gt;vbo<sp/>);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglBufferDataARB(<sp/>GL_ELEMENT_ARRAY_BUFFER_ARB,<sp/>(GLsizeiptrARB)size,<sp/>data,<sp/>GL_STATIC_DRAW_ARB<sp/>);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglBindBufferARB(<sp/>GL_ARRAY_BUFFER_ARB,<sp/>block-&gt;vbo<sp/>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>allocatingTempBuffer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglBufferDataARB(<sp/>GL_ARRAY_BUFFER_ARB,<sp/>(GLsizeiptrARB)size,<sp/>data,<sp/>GL_STREAM_DRAW_ARB<sp/>);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglBufferDataARB(<sp/>GL_ARRAY_BUFFER_ARB,<sp/>(GLsizeiptrARB)size,<sp/>data,<sp/>GL_STATIC_DRAW_ARB<sp/>);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;virtMem<sp/>=<sp/>Mem_Alloc(<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIMDProcessor-&gt;Memcpy(<sp/>block-&gt;virtMem,<sp/>data,<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="303"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="304"><highlight class="comment">idVertexCache::Touch</highlight></codeline>
<codeline lineno="305"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="306"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idVertexCache::Touch(<sp/><ref refid="structvert_cache__s" kindref="compound">vertCache_t</ref><sp/>*block<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!block<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Error(<sp/></highlight><highlight class="stringliteral">&quot;idVertexCache<sp/>Touch:<sp/>NULL<sp/>pointer&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>block-&gt;tag<sp/>==<sp/>TAG_FREE<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;FatalError(<sp/></highlight><highlight class="stringliteral">&quot;idVertexCache<sp/>Touch:<sp/>freed<sp/>pointer&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>block-&gt;tag<sp/>==<sp/>TAG_TEMP<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;FatalError(<sp/></highlight><highlight class="stringliteral">&quot;idVertexCache<sp/>Touch:<sp/>temporary<sp/>pointer&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;frameUsed<sp/>=<sp/>currentFrame;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>to<sp/>the<sp/>head<sp/>of<sp/>the<sp/>LRU<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;next-&gt;prev<sp/>=<sp/>block-&gt;prev;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;prev-&gt;next<sp/>=<sp/>block-&gt;next;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;next<sp/>=<sp/>staticHeaders.next;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;prev<sp/>=<sp/>&amp;staticHeaders;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>staticHeaders.next-&gt;prev<sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>staticHeaders.next<sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="332"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="333"><highlight class="comment">idVertexCache::Free</highlight></codeline>
<codeline lineno="334"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="335"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idVertexCache::Free(<sp/><ref refid="structvert_cache__s" kindref="compound">vertCache_t</ref><sp/>*block<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!block)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>block-&gt;tag<sp/>==<sp/>TAG_FREE<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;FatalError(<sp/></highlight><highlight class="stringliteral">&quot;idVertexCache<sp/>Free:<sp/>freed<sp/>pointer&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>block-&gt;tag<sp/>==<sp/>TAG_TEMP<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;FatalError(<sp/></highlight><highlight class="stringliteral">&quot;idVertexCache<sp/>Free:<sp/>temporary<sp/>pointer&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>block<sp/>still<sp/>can&apos;t<sp/>be<sp/>purged<sp/>until<sp/>the<sp/>frame<sp/>count<sp/>has<sp/>expired,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>it<sp/>won&apos;t<sp/>need<sp/>to<sp/>clear<sp/>a<sp/>user<sp/>pointer<sp/>when<sp/>it<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;user<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;next-&gt;prev<sp/>=<sp/>block-&gt;prev;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;prev-&gt;next<sp/>=<sp/>block-&gt;next;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;next<sp/>=<sp/>deferredFreeList.next;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;prev<sp/>=<sp/>&amp;deferredFreeList;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>deferredFreeList.next-&gt;prev<sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>deferredFreeList.next<sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="362"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="363"><highlight class="comment">idVertexCache::AllocFrameTemp</highlight></codeline>
<codeline lineno="364"><highlight class="comment"></highlight></codeline>
<codeline lineno="365"><highlight class="comment">A<sp/>frame<sp/>temp<sp/>allocation<sp/>must<sp/>never<sp/>be<sp/>allowed<sp/>to<sp/>fail<sp/>due<sp/>to<sp/>overflow.</highlight></codeline>
<codeline lineno="366"><highlight class="comment">We<sp/>can&apos;t<sp/>simply<sp/>sync<sp/>with<sp/>the<sp/>GPU<sp/>and<sp/>overwrite<sp/>what<sp/>we<sp/>have,<sp/>because</highlight></codeline>
<codeline lineno="367"><highlight class="comment">there<sp/>may<sp/>still<sp/>be<sp/>future<sp/>references<sp/>to<sp/>dynamically<sp/>created<sp/>surfaces.</highlight></codeline>
<codeline lineno="368"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="369"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><ref refid="structvert_cache__s" kindref="compound">vertCache_t</ref><sp/>*idVertexCache::AllocFrameTemp(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvert_cache__s" kindref="compound">vertCache_t</ref><sp/>*block;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>size<sp/>&lt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Error(<sp/></highlight><highlight class="stringliteral">&quot;idVertexCache::AllocFrameTemp:<sp/>size<sp/>=<sp/>%i\n&quot;</highlight><highlight class="normal">,<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dynamicAllocThisFrame<sp/>+<sp/>size<sp/>&gt;<sp/>frameBytes<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>don&apos;t<sp/>have<sp/>enough<sp/>room<sp/>in<sp/>the<sp/>temp<sp/>block,<sp/>allocate<sp/>a<sp/>static<sp/>block,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>immediately<sp/>free<sp/>it<sp/>so<sp/>it<sp/>will<sp/>get<sp/>freed<sp/>at<sp/>the<sp/>next<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempOverflow<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Alloc(<sp/>data,<sp/>size,<sp/>&amp;block<sp/>);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Free(<sp/>block);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>block;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>data<sp/>is<sp/>just<sp/>going<sp/>on<sp/>the<sp/>shared<sp/>dynamic<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>don&apos;t<sp/>have<sp/>any<sp/>remaining<sp/>unused<sp/>headers,<sp/>allocate<sp/>some<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>freeDynamicHeaders.next<sp/>==<sp/>&amp;freeDynamicHeaders<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>EXPAND_HEADERS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>=<sp/>headerAllocator.Alloc();</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;next<sp/>=<sp/>freeDynamicHeaders.next;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;prev<sp/>=<sp/>&amp;freeDynamicHeaders;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;next-&gt;prev<sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;prev-&gt;next<sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>it<sp/>from<sp/>the<sp/>freeDynamicHeaders<sp/>list<sp/>to<sp/>the<sp/>dynamicHeaders<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>block<sp/>=<sp/>freeDynamicHeaders.next;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;next-&gt;prev<sp/>=<sp/>block-&gt;prev;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;prev-&gt;next<sp/>=<sp/>block-&gt;next;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;next<sp/>=<sp/>dynamicHeaders.next;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;prev<sp/>=<sp/>&amp;dynamicHeaders;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;next-&gt;prev<sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;prev-&gt;next<sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;tag<sp/>=<sp/>TAG_TEMP;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;indexBuffer<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;offset<sp/>=<sp/>dynamicAllocThisFrame;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>dynamicAllocThisFrame<sp/>+=<sp/>block-&gt;size;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>dynamicCountThisFrame++;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;user<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;frameUsed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;virtMem<sp/>=<sp/>tempBuffers[listNum]-&gt;virtMem;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;vbo<sp/>=<sp/>tempBuffers[listNum]-&gt;vbo;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>block-&gt;vbo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglBindBufferARB(<sp/>GL_ARRAY_BUFFER_ARB,<sp/>block-&gt;vbo<sp/>);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglBufferSubDataARB(<sp/>GL_ARRAY_BUFFER_ARB,<sp/>block-&gt;offset,<sp/>(GLsizeiptrARB)size,<sp/>data<sp/>);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIMDProcessor-&gt;Memcpy(<sp/>(byte<sp/>*)block-&gt;virtMem<sp/>+<sp/>block-&gt;offset,<sp/>data,<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>block;</highlight></codeline>
<codeline lineno="430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="433"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="434"><highlight class="comment">idVertexCache::EndFrame</highlight></codeline>
<codeline lineno="435"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="436"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idVertexCache::EndFrame()<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>display<sp/>debug<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_showVertexCache.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staticUseCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>staticUseSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="structvert_cache__s" kindref="compound">vertCache_t</ref><sp/>*block<sp/>=<sp/>staticHeaders.next<sp/>;<sp/>block<sp/>!=<sp/>&amp;staticHeaders<sp/>;<sp/>block<sp/>=<sp/>block-&gt;next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>block-&gt;frameUsed<sp/>==<sp/>currentFrame<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>staticUseCount++;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>staticUseSize<sp/>+=<sp/>block-&gt;size;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*frameOverflow<sp/>=<sp/>tempOverflow<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;(OVERFLOW)&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;vertex<sp/>dynamic:%i=%ik%s,<sp/>static<sp/>alloc:%i=%ik<sp/>used:%i=%ik<sp/>total:%i=%ik\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamicCountThisFrame,<sp/>dynamicAllocThisFrame/1024,<sp/>frameOverflow,</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>staticCountThisFrame,<sp/>staticAllocThisFrame/1024,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>staticUseCount,<sp/>staticUseSize/1024,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>staticCountTotal,<sp/>staticAllocTotal/1024<sp/>);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="460"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>our<sp/>total<sp/>static<sp/>count<sp/>is<sp/>above<sp/>our<sp/>working<sp/>memory<sp/>limit,<sp/>start<sp/>purging<sp/>things</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>staticAllocTotal<sp/>&gt;<sp/>r_vertexBufferMegs.GetInteger()<sp/>*<sp/>1024<sp/>*<sp/>1024<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>the<sp/>least<sp/>recently<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="466"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!virtualMemory<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unbind<sp/>vertex<sp/>buffers<sp/>so<sp/>normal<sp/>virtual<sp/>memory<sp/>will<sp/>be<sp/>used<sp/>in<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r_useVertexBuffers<sp/>/<sp/>r_useIndexBuffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglBindBufferARB(<sp/>GL_ARRAY_BUFFER_ARB,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglBindBufferARB(<sp/>GL_ELEMENT_ARRAY_BUFFER_ARB,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>currentFrame<sp/>=<sp/>tr.frameCount;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>listNum<sp/>=<sp/>currentFrame<sp/>%<sp/>NUM_VERTEX_FRAMES;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>staticAllocThisFrame<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>staticCountThisFrame<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>dynamicAllocThisFrame<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>dynamicCountThisFrame<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>tempOverflow<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>all<sp/>the<sp/>deferred<sp/>free<sp/>headers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>deferredFreeList.next<sp/>!=<sp/>&amp;deferredFreeList<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ActuallyFree(<sp/>deferredFreeList.next<sp/>);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>all<sp/>the<sp/>frame<sp/>temp<sp/>headers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvert_cache__s" kindref="compound">vertCache_t</ref><sp/>*block<sp/>=<sp/>dynamicHeaders.next;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>block<sp/>!=<sp/>&amp;dynamicHeaders<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;prev<sp/>=<sp/>&amp;freeDynamicHeaders;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamicHeaders.prev-&gt;next<sp/>=<sp/>freeDynamicHeaders.next;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeDynamicHeaders.next-&gt;prev<sp/>=<sp/>dynamicHeaders.prev;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeDynamicHeaders.next<sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamicHeaders.next<sp/>=<sp/>dynamicHeaders.prev<sp/>=<sp/>&amp;dynamicHeaders;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="501"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="502"><highlight class="comment">idVertexCache::List</highlight></codeline>
<codeline lineno="503"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="504"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idVertexCache::List(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numActive<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numDeferred<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frameStatic<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalStatic<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deferredSpace<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvert_cache__s" kindref="compound">vertCache_t</ref><sp/>*block;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>block<sp/>=<sp/>staticHeaders.next<sp/>;<sp/>block<sp/>!=<sp/>&amp;staticHeaders<sp/>;<sp/>block<sp/>=<sp/>block-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numActive++;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalStatic<sp/>+=<sp/>block-&gt;size;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>block-&gt;frameUsed<sp/>==<sp/>currentFrame<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frameStatic<sp/>+=<sp/>block-&gt;size;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numFreeStaticHeaders<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>block<sp/>=<sp/>freeStaticHeaders.next<sp/>;<sp/>block<sp/>!=<sp/>&amp;freeStaticHeaders<sp/>;<sp/>block<sp/>=<sp/>block-&gt;next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numFreeStaticHeaders++;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numFreeDynamicHeaders<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>block<sp/>=<sp/>freeDynamicHeaders.next<sp/>;<sp/>block<sp/>!=<sp/>&amp;freeDynamicHeaders<sp/>;<sp/>block<sp/>=<sp/>block-&gt;next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numFreeDynamicHeaders++;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%i<sp/>megs<sp/>working<sp/>set\n&quot;</highlight><highlight class="normal">,<sp/>r_vertexBufferMegs.GetInteger()<sp/>);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%i<sp/>dynamic<sp/>temp<sp/>buffers<sp/>of<sp/>%ik\n&quot;</highlight><highlight class="normal">,<sp/>NUM_VERTEX_FRAMES,<sp/>frameBytes<sp/>/<sp/>1024<sp/>);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%5i<sp/>active<sp/>static<sp/>headers\n&quot;</highlight><highlight class="normal">,<sp/>numActive<sp/>);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%5i<sp/>free<sp/>static<sp/>headers\n&quot;</highlight><highlight class="normal">,<sp/>numFreeStaticHeaders<sp/>);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%5i<sp/>free<sp/>dynamic<sp/>headers\n&quot;</highlight><highlight class="normal">,<sp/>numFreeDynamicHeaders<sp/>);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!virtualMemory<sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;Vertex<sp/>cache<sp/>is<sp/>in<sp/>ARB_vertex_buffer_object<sp/>memory<sp/>(FAST).\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;Vertex<sp/>cache<sp/>is<sp/>in<sp/>virtual<sp/>memory<sp/>(SLOW)\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_useIndexBuffers.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>buffers<sp/>are<sp/>accelerated.\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>buffers<sp/>are<sp/>not<sp/>used.\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="552"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="553"><highlight class="comment">idVertexCache::IsFast</highlight></codeline>
<codeline lineno="554"><highlight class="comment"></highlight></codeline>
<codeline lineno="555"><highlight class="comment">just<sp/>for<sp/>gfxinfo<sp/>printing</highlight></codeline>
<codeline lineno="556"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="557"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idVertexCache::IsFast()<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>virtualMemory<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/renderer/VertexCache.cpp"/>
  </compounddef>
</doxygen>
