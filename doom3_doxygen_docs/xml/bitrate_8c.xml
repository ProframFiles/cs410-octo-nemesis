<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="bitrate_8c" kind="file">
    <compoundname>bitrate.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="_math_8h" local="no">math.h</includes>
    <includes refid="ogg_8h" local="yes">../ogg/ogg.h</includes>
    <includes refid="sound_2_ogg_vorbis_2vorbis_2codec_8h" local="yes">../vorbis/codec.h</includes>
    <includes refid="codec__internal_8h" local="yes">codec_internal.h</includes>
    <includes refid="os_8h" local="yes">os.h</includes>
    <includes refid="sound_2_ogg_vorbis_2vorbissrc_2_misc_8h" local="yes">misc.h</includes>
    <includes refid="bitrate_8h" local="yes">bitrate.h</includes>
    <incdepgraph>
      <node id="2004">
        <label>E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/bitrate.c</label>
        <link refid="bitrate.c"/>
        <childnode refid="2005" relation="include">
        </childnode>
        <childnode refid="2006" relation="include">
        </childnode>
        <childnode refid="2007" relation="include">
        </childnode>
      </node>
      <node id="2006">
        <label>stdlib.h</label>
      </node>
      <node id="2007">
        <label>string.h</label>
      </node>
      <node id="2005">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="bitrate_8c_1ac9f5e0ce105fe840b6e7bd3536f29737" prot="public" static="no">
        <name>LIMITBYTES</name>
        <param><defname>pos</defname></param>
        <param><defname>bin</defname></param>
        <initializer>(bm-&gt;minmax_binstack[(pos)*bins*2+((bin)+bins)])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/bitrate.c" line="35" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/bitrate.c" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="bitrate_8c_1a3c5b2040e887ca1425f7066ef1998003" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>static long BINBYTES</definition>
        <argsstring>(bitrate_manager_state *bm, long pos, long bin)</argsstring>
        <name>BINBYTES</name>
        <param>
          <type><ref refid="structbitrate__manager__state" kindref="compound">bitrate_manager_state</ref> *</type>
          <declname>bm</declname>
        </param>
        <param>
          <type>long</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>long</type>
          <declname>bin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/bitrate.c" line="30" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/bitrate.c" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="bitrate_8c_1a548f45d5fd7f2a3fec6ded28ef370a15" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>static long LACING_ADJUST</definition>
        <argsstring>(long bytes)</argsstring>
        <name>LACING_ADJUST</name>
        <param>
          <type>long</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/bitrate.c" line="37" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/bitrate.c" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="bitrate_8c_1ac6c5dc2f5b7dbdfc06fb550050dd1604" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int floater_interpolate</definition>
        <argsstring>(bitrate_manager_state *bm, vorbis_info *vi, double desired_rate)</argsstring>
        <name>floater_interpolate</name>
        <param>
          <type><ref refid="structbitrate__manager__state" kindref="compound">bitrate_manager_state</ref> *</type>
          <declname>bm</declname>
        </param>
        <param>
          <type><ref refid="structvorbis__info" kindref="compound">vorbis_info</ref> *</type>
          <declname>vi</declname>
        </param>
        <param>
          <type>double</type>
          <declname>desired_rate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/bitrate.c" line="42" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/bitrate.c" bodystart="42" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="bitrate_8c_1a0aff0f4e45b8eebc260c35fd6b4cbb8c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>static long limit_sum</definition>
        <argsstring>(bitrate_manager_state *bm, int limit)</argsstring>
        <name>limit_sum</name>
        <param>
          <type><ref refid="structbitrate__manager__state" kindref="compound">bitrate_manager_state</ref> *</type>
          <declname>bm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/bitrate.c" line="62" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/bitrate.c" bodystart="62" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="bitrate_8c_1ab885f5b929f532f9e5a49aa234a705ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vorbis_bitrate_init</definition>
        <argsstring>(vorbis_info *vi, bitrate_manager_state *bm)</argsstring>
        <name>vorbis_bitrate_init</name>
        <param>
          <type><ref refid="structvorbis__info" kindref="compound">vorbis_info</ref> *</type>
          <declname>vi</declname>
        </param>
        <param>
          <type><ref refid="structbitrate__manager__state" kindref="compound">bitrate_manager_state</ref> *</type>
          <declname>bm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/bitrate.c" line="79" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/bitrate.c" bodystart="79" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="bitrate_8c_1aed762eb6432773e3394b76c85c0d21bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vorbis_bitrate_clear</definition>
        <argsstring>(bitrate_manager_state *bm)</argsstring>
        <name>vorbis_bitrate_clear</name>
        <param>
          <type><ref refid="structbitrate__manager__state" kindref="compound">bitrate_manager_state</ref> *</type>
          <declname>bm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/bitrate.c" line="146" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/bitrate.c" bodystart="146" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="bitrate_8c_1a340357d7f7012c18f5ca87ef769dfa97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vorbis_bitrate_managed</definition>
        <argsstring>(vorbis_block *vb)</argsstring>
        <name>vorbis_bitrate_managed</name>
        <param>
          <type><ref refid="structvorbis__block" kindref="compound">vorbis_block</ref> *</type>
          <declname>vb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/bitrate.c" line="171" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/bitrate.c" bodystart="171" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="bitrate_8c_1a7efe5889f6919053b8ab8d69e61ac995" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vorbis_bitrate_addblock</definition>
        <argsstring>(vorbis_block *vb)</argsstring>
        <name>vorbis_bitrate_addblock</name>
        <param>
          <type><ref refid="structvorbis__block" kindref="compound">vorbis_block</ref> *</type>
          <declname>vb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/bitrate.c" line="181" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/bitrate.c" bodystart="181" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="bitrate_8c_1a37418540741db649a608cac3d2be440f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vorbis_bitrate_flushpacket</definition>
        <argsstring>(vorbis_dsp_state *vd, ogg_packet *op)</argsstring>
        <name>vorbis_bitrate_flushpacket</name>
        <param>
          <type><ref refid="structvorbis__dsp__state" kindref="compound">vorbis_dsp_state</ref> *</type>
          <declname>vd</declname>
        </param>
        <param>
          <type><ref refid="structogg__packet" kindref="compound">ogg_packet</ref> *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/bitrate.c" line="495" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/bitrate.c" bodystart="495" bodyend="531"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>THIS<sp/>FILE<sp/>IS<sp/>PART<sp/>OF<sp/>THE<sp/>OggVorbis<sp/>SOFTWARE<sp/>CODEC<sp/>SOURCE<sp/>CODE.<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>USE,<sp/>DISTRIBUTION<sp/>AND<sp/>REPRODUCTION<sp/>OF<sp/>THIS<sp/>LIBRARY<sp/>SOURCE<sp/>IS<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>GOVERNED<sp/>BY<sp/>A<sp/>BSD-STYLE<sp/>SOURCE<sp/>LICENSE<sp/>INCLUDED<sp/>WITH<sp/>THIS<sp/>SOURCE<sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>IN<sp/>&apos;COPYING&apos;.<sp/>PLEASE<sp/>READ<sp/>THESE<sp/>TERMS<sp/>BEFORE<sp/>DISTRIBUTING.<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>THE<sp/>OggVorbis<sp/>SOURCE<sp/>CODE<sp/>IS<sp/>(C)<sp/>COPYRIGHT<sp/>1994-2002<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>by<sp/>the<sp/>XIPHOPHORUS<sp/>Company<sp/>http://www.xiph.org/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>********************************************************************</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>function:<sp/>bitrate<sp/>tracking<sp/>and<sp/>management</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>last<sp/>mod:<sp/>$Id:<sp/>bitrate.c,v<sp/>1.21<sp/>2002/10/11<sp/>11:14:41<sp/>xiphmont<sp/>Exp<sp/>$</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../ogg/ogg.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../vorbis/codec.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;codec_internal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;os.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;misc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;bitrate.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>BINBYTES(<ref refid="structbitrate__manager__state" kindref="compound">bitrate_manager_state</ref><sp/>*bm,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>pos,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bin){</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bins=bm-&gt;queue_bins;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(bm-&gt;queue_binned[pos*bins+bin]);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIMITBYTES(pos,bin)<sp/>(bm-&gt;minmax_binstack[(pos)*bins*2+((bin)+bins)])</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>LACING_ADJUST(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bytes){</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>addto=bytes/255+1;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(bytes+addto);</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>floater_interpolate(<ref refid="structbitrate__manager__state" kindref="compound">bitrate_manager_state</ref><sp/>*bm,<ref refid="structvorbis__info" kindref="compound">vorbis_info</ref><sp/>*vi,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>desired_rate){</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin=rint(bm-&gt;avgfloat);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lobitrate,hibitrate;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>lobitrate=(double)(bm-&gt;avg_binacc[bin]*8)/bm-&gt;avg_sampleacc*vi-&gt;rate;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(lobitrate&gt;desired_rate<sp/>&amp;&amp;<sp/>bin&gt;0){</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>bin--;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>lobitrate=(double)(bm-&gt;avg_binacc[bin]*8)/bm-&gt;avg_sampleacc*vi-&gt;rate;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bin+1&lt;bm-&gt;queue_bins){</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>hibitrate=(double)(bm-&gt;avg_binacc[bin+1]*8)/bm-&gt;avg_sampleacc*vi-&gt;rate;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fabs(hibitrate-desired_rate)<sp/>&lt;<sp/>fabs(lobitrate-desired_rate))bin++;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(bin);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>try<sp/>out<sp/>a<sp/>new<sp/>limit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>limit_sum(<ref refid="structbitrate__manager__state" kindref="compound">bitrate_manager_state</ref><sp/>*bm,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limit){</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=bm-&gt;minmax_stackptr;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>acc=bm-&gt;minmax_acctotal;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bins=bm-&gt;queue_bins;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>acc-=LIMITBYTES(i,0);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>acc+=LIMITBYTES(i,limit);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i--&gt;0){</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;minmax_limitstack[i]&lt;=limit)</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>acc-=LIMITBYTES(i,bm-&gt;minmax_limitstack[i]);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>acc+=LIMITBYTES(i,limit);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(acc);</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>compute<sp/>bitrate<sp/>tracking<sp/>setup,<sp/>allocate<sp/>circular<sp/>packet<sp/>size<sp/>queue<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vorbis_bitrate_init(<ref refid="structvorbis__info" kindref="compound">vorbis_info</ref><sp/>*vi,<ref refid="structbitrate__manager__state" kindref="compound">bitrate_manager_state</ref><sp/>*bm){</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><ref refid="structcodec__setup__info" kindref="compound">codec_setup_info</ref><sp/>*ci=vi-&gt;codec_setup;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><ref refid="structbitrate__manager__info" kindref="compound">bitrate_manager_info</ref><sp/>*bi=&amp;ci-&gt;bi;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxlatency;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>memset(bm,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*bm));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bi){</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;avg_sampledesired=bi-&gt;queue_avg_time*vi-&gt;rate;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;avg_centerdesired=bi-&gt;queue_avg_time*vi-&gt;rate*bi-&gt;queue_avg_center;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;minmax_sampledesired=bi-&gt;queue_minmax_time*vi-&gt;rate;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>find<sp/>the<sp/>max<sp/>possible<sp/>needed<sp/>queue<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>maxlatency=max(bm-&gt;avg_sampledesired-bm-&gt;avg_centerdesired,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;minmax_sampledesired)+bm-&gt;avg_centerdesired;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(maxlatency&gt;0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(bi-&gt;queue_avgmin&gt;0<sp/>||<sp/>bi-&gt;queue_avgmax&gt;0<sp/>||<sp/>bi-&gt;queue_hardmax&gt;0<sp/>||</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>bi-&gt;queue_hardmin&gt;0)){</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxpackets=maxlatency/(ci-&gt;blocksizes[0]&gt;&gt;1)+3;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bins=PACKETBLOBS;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;queue_size=maxpackets;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;queue_bins=bins;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;queue_binned=_ogg_calloc(maxpackets,bins*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*bm-&gt;queue_binned));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;queue_actual=_ogg_calloc(maxpackets,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*bm-&gt;queue_actual));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((bi-&gt;queue_avgmin&gt;0<sp/>||<sp/>bi-&gt;queue_avgmax&gt;0)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>bi-&gt;queue_avg_time&gt;0){</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;avg_binacc=_ogg_calloc(bins,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*bm-&gt;avg_binacc));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;avgfloat=PACKETBLOBS/2;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;avg_tail=<sp/>-1;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((bi-&gt;queue_hardmin&gt;0<sp/>||<sp/>bi-&gt;queue_hardmax&gt;0)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>bi-&gt;queue_minmax_time&gt;0){</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;minmax_binstack=_ogg_calloc((bins*2+1)*bins*2,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*bm-&gt;minmax_binstack));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;minmax_posstack=_ogg_calloc((bins*2+1),</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*bm-&gt;minmax_posstack));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;minmax_limitstack=_ogg_calloc((bins*2+1),</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*bm-&gt;minmax_limitstack));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;minmax_tail=<sp/>-1;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>space<sp/>for<sp/>the<sp/>packet<sp/>queueing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;packetbuffers=_ogg_calloc(maxpackets,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*bm-&gt;packetbuffers));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;packets=_ogg_calloc(maxpackets,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*bm-&gt;packets));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;maxpackets;i++)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>oggpack_writeinit(bm-&gt;packetbuffers+i);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;packetbuffers=_ogg_calloc(1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*bm-&gt;packetbuffers));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;packets=_ogg_calloc(1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*bm-&gt;packets));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oggpack_writeinit(bm-&gt;packetbuffers);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vorbis_bitrate_clear(<ref refid="structbitrate__manager__state" kindref="compound">bitrate_manager_state</ref><sp/>*bm){</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm){</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;queue_binned)_ogg_free(bm-&gt;queue_binned);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;queue_actual)_ogg_free(bm-&gt;queue_actual);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;avg_binacc)_ogg_free(bm-&gt;avg_binacc);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;minmax_binstack)_ogg_free(bm-&gt;minmax_binstack);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;minmax_posstack)_ogg_free(bm-&gt;minmax_posstack);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;minmax_limitstack)_ogg_free(bm-&gt;minmax_limitstack);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;packetbuffers){</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;queue_size==0){</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>oggpack_writeclear(bm-&gt;packetbuffers);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;bm-&gt;queue_size;i++)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oggpack_writeclear(bm-&gt;packetbuffers+i);<sp/><sp/></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_ogg_free(bm-&gt;packetbuffers);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;packets)_ogg_free(bm-&gt;packets);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(bm,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*bm));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vorbis_bitrate_managed(<ref refid="structvorbis__block" kindref="compound">vorbis_block</ref><sp/>*vb){</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><ref refid="structvorbis__dsp__state" kindref="compound">vorbis_dsp_state</ref><sp/><sp/><sp/><sp/><sp/><sp/>*vd=vb-&gt;vd;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><ref refid="structprivate__state" kindref="compound">private_state</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b=vd-&gt;backend_state;<sp/></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><ref refid="structbitrate__manager__state" kindref="compound">bitrate_manager_state</ref><sp/>*bm=&amp;b-&gt;bms;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;queue_binned)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>finish<sp/>taking<sp/>in<sp/>the<sp/>block<sp/>we<sp/>just<sp/>processed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vorbis_bitrate_addblock(<ref refid="structvorbis__block" kindref="compound">vorbis_block</ref><sp/>*vb){</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;<sp/></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><ref refid="structvorbis__block__internal" kindref="compound">vorbis_block_internal</ref><sp/>*vbi=vb-&gt;internal;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><ref refid="structvorbis__dsp__state" kindref="compound">vorbis_dsp_state</ref><sp/><sp/><sp/><sp/><sp/><sp/>*vd=vb-&gt;vd;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="structprivate__state" kindref="compound">private_state</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b=vd-&gt;backend_state;<sp/></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><ref refid="structbitrate__manager__state" kindref="compound">bitrate_manager_state</ref><sp/>*bm=&amp;b-&gt;bms;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><ref refid="structvorbis__info" kindref="compound">vorbis_info</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*vi=vd-&gt;vi;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><ref refid="structcodec__setup__info" kindref="compound">codec_setup_info</ref><sp/><sp/><sp/><sp/><sp/><sp/>*ci=vi-&gt;codec_setup;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><ref refid="structbitrate__manager__info" kindref="compound">bitrate_manager_info</ref><sp/><sp/>*bi=&amp;ci-&gt;bi;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eofflag=vb-&gt;eofflag;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>head=bm-&gt;queue_head;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_head=head+1;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bins=bm-&gt;queue_bins;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minmax_head,new_minmax_head;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>ogg_uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*head_ptr;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!bm-&gt;queue_binned){</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref><sp/>temp;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>not<sp/>a<sp/>bitrate<sp/>managed<sp/>stream,<sp/>but<sp/>for<sp/>API<sp/>simplicity,<sp/>we&apos;ll</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>one<sp/>packet<sp/>to<sp/>keep<sp/>the<sp/>code<sp/>path<sp/>clean<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;queue_head)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);<sp/></highlight><highlight class="comment">/*<sp/>one<sp/>has<sp/>been<sp/>submitted<sp/>without</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>being<sp/>claimed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;queue_head++;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;packets[0].packet=oggpack_get_buffer(&amp;vb-&gt;opb);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;packets[0].bytes=oggpack_bytes(&amp;vb-&gt;opb);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;packets[0].b_o_s=0;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;packets[0].e_o_s=vb-&gt;eofflag;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;packets[0].granulepos=vb-&gt;granulepos;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;packets[0].packetno=vb-&gt;sequence;<sp/></highlight><highlight class="comment">/*<sp/>for<sp/>sake<sp/>of<sp/>completeness<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;temp,bm-&gt;packetbuffers,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(vb-&gt;opb));</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(bm-&gt;packetbuffers,&amp;vb-&gt;opb,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(vb-&gt;opb));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;vb-&gt;opb,&amp;temp,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(vb-&gt;opb));</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>add<sp/>encoded<sp/>packet<sp/>to<sp/>head<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(next_head&gt;=bm-&gt;queue_size)next_head=0;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>head_ptr=bm-&gt;queue_binned+bins*head;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>is<sp/>there<sp/>room<sp/>to<sp/>add<sp/>a<sp/>block?<sp/>In<sp/>proper<sp/>use<sp/>of<sp/>the<sp/>API,<sp/>this<sp/>will</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>never<sp/>come<sp/>up...<sp/>but<sp/>guard<sp/>it<sp/>anyway<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(next_head==bm-&gt;avg_tail<sp/>||<sp/>next_head==bm-&gt;minmax_tail)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>add<sp/>the<sp/>block<sp/>to<sp/>the<sp/>toplevel<sp/>queue<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>bm-&gt;queue_head=next_head;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>bm-&gt;queue_actual[head]=(vb-&gt;W?0x80000000UL:0);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>buffer<sp/>packet<sp/>fields<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>bm-&gt;packets[head].packet=oggpack_get_buffer(&amp;vb-&gt;opb);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>bm-&gt;packets[head].bytes=oggpack_bytes(&amp;vb-&gt;opb);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>bm-&gt;packets[head].b_o_s=0;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>bm-&gt;packets[head].e_o_s=vb-&gt;eofflag;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>bm-&gt;packets[head].granulepos=vb-&gt;granulepos;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>bm-&gt;packets[head].packetno=vb-&gt;sequence;<sp/></highlight><highlight class="comment">/*<sp/>for<sp/>sake<sp/>of<sp/>completeness<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>swap<sp/>packet<sp/>buffers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>memcpy(&amp;temp,bm-&gt;packetbuffers+head,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(vb-&gt;opb));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>memcpy(bm-&gt;packetbuffers+head,&amp;vb-&gt;opb,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(vb-&gt;opb));</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>memcpy(&amp;vb-&gt;opb,&amp;temp,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(vb-&gt;opb));</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>save<sp/>markers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>head_ptr[0]=vbi-&gt;packetblob_markers[0];</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=1;i&lt;PACKETBLOBS;i++){</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>head_ptr[i]=vbi-&gt;packetblob_markers[i]-vbi-&gt;packetblob_markers[i-1];</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;avg_binacc)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>new_minmax_head=minmax_head=bm-&gt;avg_center;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>new_minmax_head=minmax_head=head;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>average<sp/>tracking<sp/>queue<sp/>is<sp/>updated<sp/>first;<sp/>its<sp/>results<sp/>(if<sp/>it&apos;s</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>in<sp/>use)<sp/>are<sp/>taken<sp/>into<sp/>account<sp/>by<sp/>the<sp/>min/max<sp/>limiter<sp/>(if<sp/>min/max</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>is<sp/>in<sp/>use)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;avg_binacc){</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>desired_center=bm-&gt;avg_centerdesired;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eofflag)desired_center=0;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>the<sp/>avg<sp/>head<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;bins;i++)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;avg_binacc[i]+=LACING_ADJUST(head_ptr[i]);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;avg_sampleacc+=ci-&gt;blocksizes[vb-&gt;W]&gt;&gt;1;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;avg_centeracc+=ci-&gt;blocksizes[vb-&gt;W]&gt;&gt;1;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;avg_sampleacc&gt;bm-&gt;avg_sampledesired<sp/>||<sp/>eofflag){</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>the<sp/>avg<sp/>center<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;avg_centeracc&gt;desired_center){</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>choose<sp/>the<sp/>new<sp/>average<sp/>floater<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samples=ci-&gt;blocksizes[vb-&gt;W]&gt;&gt;1;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>upper=floater_interpolate(bm,vi,bi-&gt;queue_avgmax);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lower=floater_interpolate(bm,vi,bi-&gt;queue_avgmin);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">=PACKETBLOBS/2.,slew;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(upper&lt;</highlight><highlight class="keyword">new</highlight><highlight class="normal">)</highlight><highlight class="keyword">new</highlight><highlight class="normal">=upper;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lower&gt;</highlight><highlight class="keyword">new</highlight><highlight class="normal">)</highlight><highlight class="keyword">new</highlight><highlight class="normal">=lower;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>slew=(</highlight><highlight class="keyword">new</highlight><highlight class="normal">-bm-&gt;avgfloat)/samples*vi-&gt;rate;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(slew&lt;bi-&gt;avgfloat_downslew_max)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">=bm-&gt;avgfloat+bi-&gt;avgfloat_downslew_max/vi-&gt;rate*samples;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(slew&gt;bi-&gt;avgfloat_upslew_max)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">=bm-&gt;avgfloat+bi-&gt;avgfloat_upslew_max/vi-&gt;rate*samples;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;avgfloat=</highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>apply<sp/>the<sp/>average<sp/>floater<sp/>to<sp/>new<sp/>blocks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>bin=rint(bm-&gt;avgfloat);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*fprintf(stderr,&quot;%d<sp/>&quot;,bin);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(bm-&gt;avg_centeracc&gt;desired_center){</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>samples=ci-&gt;blocksizes[bm-&gt;queue_actual[bm-&gt;avg_center]&amp;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x80000000UL?1:0]&gt;&gt;1;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;queue_actual[bm-&gt;avg_center]|=bin;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;avg_centeracc-=samples;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;avg_center++;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;avg_center&gt;=bm-&gt;queue_size)bm-&gt;avg_center=0;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>new_minmax_head=bm-&gt;avg_center;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>the<sp/>avg<sp/>tail<sp/>if<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(bm-&gt;avg_sampleacc&gt;bm-&gt;avg_sampledesired){</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samples=</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ci-&gt;blocksizes[bm-&gt;queue_actual[bm-&gt;avg_tail]&amp;0x80000000UL?1:0]&gt;&gt;1;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;bm-&gt;queue_bins;i++)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;avg_binacc[i]-=LACING_ADJUST(bm-&gt;queue_binned[bins*bm-&gt;avg_tail+i]);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;avg_sampleacc-=samples;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;avg_tail++;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;avg_tail&gt;=bm-&gt;queue_size)bm-&gt;avg_tail=0;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>we&apos;re<sp/>not<sp/>using<sp/>an<sp/>average<sp/>tracker,<sp/>the<sp/>&apos;float&apos;<sp/>is<sp/>nailed<sp/>to</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>avgfloat_initial<sp/>value.<sp/><sp/>It<sp/>needs<sp/>to<sp/>be<sp/>set<sp/>for<sp/>the<sp/>min/max</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>deal<sp/>properly<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bin=PACKETBLOBS/2;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;queue_actual[head]|=bin;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>new_minmax_head=next_head;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>the<sp/>min/max<sp/>queues<sp/>and<sp/>enforce<sp/>limits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;minmax_binstack){</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>sampledesired=eofflag?0:bm-&gt;minmax_sampledesired;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>add<sp/>to<sp/>stack<sp/>recent<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(minmax_head!=new_minmax_head){</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samples=ci-&gt;blocksizes[bm-&gt;queue_actual[minmax_head]&amp;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x80000000UL?1:0]&gt;&gt;1;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>actual=bm-&gt;queue_actual[minmax_head]&amp;0x7fffffffUL;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)bins;i++){</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;minmax_binstack[bm-&gt;minmax_stackptr*bins*2+bins+i]+=</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LACING_ADJUST(BINBYTES(bm,minmax_head,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual&gt;i?actual:i));</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;minmax_binstack[bm-&gt;minmax_stackptr*bins*2+i]+=</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LACING_ADJUST(BINBYTES(bm,minmax_head,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual&lt;i?actual:i));</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;minmax_posstack[bm-&gt;minmax_stackptr]=minmax_head;<sp/></highlight><highlight class="comment">/*<sp/>not<sp/>one</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>past</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>like</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typical<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;minmax_limitstack[bm-&gt;minmax_stackptr]=0;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;minmax_sampleacc+=samples;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;minmax_acctotal+=</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>LACING_ADJUST(BINBYTES(bm,minmax_head,actual));</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minmax_head++;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(minmax_head&gt;=bm-&gt;queue_size)minmax_head=0;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>limits,<sp/>enforce<sp/>changes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;minmax_sampleacc&gt;sampledesired){</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bitrate=(double)(bm-&gt;minmax_acctotal*8)/</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;minmax_sampleacc*vi-&gt;rate;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limit=0;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((bi-&gt;queue_hardmax&gt;0<sp/>&amp;&amp;<sp/>bitrate&gt;bi-&gt;queue_hardmax)<sp/>||<sp/></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(bi-&gt;queue_hardmin&gt;0<sp/>&amp;&amp;<sp/>bitrate&lt;bi-&gt;queue_hardmin)){</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newstack;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stackctr;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bitsum=bm-&gt;minmax_acctotal*8;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>bitrate=(double)bitsum/bm-&gt;minmax_sampleacc*vi-&gt;rate;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we&apos;re<sp/>off<sp/>rate.<sp/><sp/>Iteratively<sp/>try<sp/>out<sp/>new<sp/>hard<sp/>floater</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>limits<sp/>until<sp/>we<sp/>find<sp/>one<sp/>that<sp/>brings<sp/>us<sp/>inside.<sp/><sp/>Here&apos;s</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>where<sp/>we<sp/>see<sp/>the<sp/>whole<sp/>point<sp/>of<sp/>the<sp/>limit<sp/>stacks.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bi-&gt;queue_hardmax&gt;0<sp/>&amp;&amp;<sp/>bitrate&gt;bi-&gt;queue_hardmax){</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(limit=-1;limit&gt;-bins+1;limit--){</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bitsum=limit_sum(bm,limit)*8;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitrate=(double)bitsum/bm-&gt;minmax_sampleacc*vi-&gt;rate;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bitrate&lt;=bi-&gt;queue_hardmax)</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bitrate&lt;bi-&gt;queue_hardmin){</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(limit=1;limit&lt;bins-1;limit++){</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bitsum=limit_sum(bm,limit)*8;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitrate=(double)bitsum/bm-&gt;minmax_sampleacc*vi-&gt;rate;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bitrate&gt;=bi-&gt;queue_hardmin)</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bitrate&gt;bi-&gt;queue_hardmax)limit--;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>trace<sp/>the<sp/>limit<sp/>backward,<sp/>stop<sp/>when<sp/>we<sp/>see<sp/>a<sp/>lower<sp/>limit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>newstack=bm-&gt;minmax_stackptr-1;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(newstack&gt;=0){</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;minmax_limitstack[newstack]&lt;limit)</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newstack--;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>bit<sp/>counter<sp/>with<sp/>new<sp/>limit<sp/>and<sp/>replace<sp/>any<sp/>stack</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>limits<sp/>that<sp/>have<sp/>been<sp/>replaced<sp/>by<sp/>our<sp/>new<sp/>lower<sp/>limit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>stackctr=bm-&gt;minmax_stackptr;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(stackctr&gt;newstack){</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;minmax_acctotal-=</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LIMITBYTES(stackctr,bm-&gt;minmax_limitstack[stackctr]);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;minmax_acctotal+=LIMITBYTES(stackctr,limit);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stackctr&lt;bm-&gt;minmax_stackptr)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;bins*2;i++)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;minmax_binstack[stackctr*bins*2+i]+=</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;minmax_binstack[(stackctr+1)*bins*2+i];</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stackctr--;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>stackctr++;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;minmax_posstack[stackctr]=bm-&gt;minmax_posstack[bm-&gt;minmax_stackptr];</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;minmax_limitstack[stackctr]=limit;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>up<sp/>new<sp/>blank<sp/>stack<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>stackctr++;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;minmax_stackptr=stackctr;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;bm-&gt;minmax_binstack[stackctr*bins*2],</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*bm-&gt;minmax_binstack)*bins*2);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;minmax_limitstack[stackctr]=0;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;minmax_posstack[stackctr]=-1;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>remove<sp/>from<sp/>tail<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(bm-&gt;minmax_sampleacc&gt;sampledesired){</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samples=</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>ci-&gt;blocksizes[bm-&gt;queue_actual[bm-&gt;minmax_tail]&amp;0x80000000UL?1:0]&gt;&gt;1;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>actual=bm-&gt;queue_actual[bm-&gt;minmax_tail]&amp;0x7fffffffUL;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;bins;i++){</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;minmax_binstack[bins+i]-=<sp/></highlight><highlight class="comment">/*<sp/>always<sp/>comes<sp/>off<sp/>the<sp/>stack<sp/>bottom<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LACING_ADJUST(BINBYTES(bm,bm-&gt;minmax_tail,</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual&gt;i?</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual:i));</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;minmax_binstack[i]-=<sp/></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LACING_ADJUST(BINBYTES(bm,bm-&gt;minmax_tail,</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual&lt;i?</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual:i));</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;minmax_limitstack[0]&gt;actual)</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>actual=bm-&gt;minmax_limitstack[0];</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bins+bm-&gt;minmax_limitstack[0]&lt;actual)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>actual=bins+bm-&gt;minmax_limitstack[0];</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;minmax_acctotal-=LACING_ADJUST(BINBYTES(bm,bm-&gt;minmax_tail,actual));</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;minmax_sampleacc-=samples;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>revise<sp/>queue_actual<sp/>to<sp/>reflect<sp/>the<sp/>limit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;queue_actual[bm-&gt;minmax_tail]&amp;=0x80000000UL;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;queue_actual[bm-&gt;minmax_tail]|=actual;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;minmax_tail==bm-&gt;minmax_posstack[0]){</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>stack<sp/>becomes<sp/>a<sp/>FIFO;<sp/>the<sp/>first<sp/>data<sp/>has<sp/>fallen<sp/>off<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(bm-&gt;minmax_binstack,bm-&gt;minmax_binstack+bins*2,</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*bm-&gt;minmax_binstack)*bins*2*bm-&gt;minmax_stackptr);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(bm-&gt;minmax_posstack,bm-&gt;minmax_posstack+1,</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*bm-&gt;minmax_posstack)*bm-&gt;minmax_stackptr);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(bm-&gt;minmax_limitstack,bm-&gt;minmax_limitstack+1,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*bm-&gt;minmax_limitstack)*bm-&gt;minmax_stackptr);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;minmax_stackptr--;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bm-&gt;minmax_tail++;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;minmax_tail&gt;=bm-&gt;queue_size)bm-&gt;minmax_tail=0;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;last_to_flush=bm-&gt;minmax_tail;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;last_to_flush=bm-&gt;avg_center;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eofflag)</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;last_to_flush=bm-&gt;queue_head;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vorbis_bitrate_flushpacket(<ref refid="structvorbis__dsp__state" kindref="compound">vorbis_dsp_state</ref><sp/>*vd,<ref refid="structogg__packet" kindref="compound">ogg_packet</ref><sp/>*op){</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><ref refid="structprivate__state" kindref="compound">private_state</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b=vd-&gt;backend_state;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><ref refid="structbitrate__manager__state" kindref="compound">bitrate_manager_state</ref><sp/>*bm=&amp;b-&gt;bms;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;queue_size==0){</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;queue_head==0)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(op,bm-&gt;packets,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*op));</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;queue_head=0;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;next_to_flush==bm-&gt;last_to_flush)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bin=bm-&gt;queue_actual[bm-&gt;next_to_flush]&amp;0x7fffffff,i;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bins=bm-&gt;queue_bins;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ogg_uint32_t<sp/>*markers=bm-&gt;queue_binned+bins*bm-&gt;next_to_flush;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bytes=markers[bin];</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(op,bm-&gt;packets+bm-&gt;next_to_flush,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*op));</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>have<sp/>[PACKETBLOBS]<sp/>possible<sp/>packets<sp/>all<sp/>squished<sp/>together<sp/>in</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>the<sp/>buffer,<sp/>in<sp/>sequence.<sp/><sp/>count<sp/>in<sp/>to<sp/>number<sp/>[bin]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;bin;i++)</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;packet+=markers[i];</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;bytes=bytes;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>bm-&gt;next_to_flush++;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bm-&gt;next_to_flush&gt;=bm-&gt;queue_size)bm-&gt;next_to_flush=0;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/bitrate.c"/>
  </compounddef>
</doxygen>
