<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classid_angles" kind="class" prot="public">
    <compoundname>idAngles</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classid_angles_1a0ff75b9900a2cd4be27e9105e535ca4c" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float idAngles::pitch</definition>
        <argsstring></argsstring>
        <name>pitch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="53" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classid_angles_1a35d459b49303f54a250c8e9c32abcb3d" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float idAngles::yaw</definition>
        <argsstring></argsstring>
        <name>yaw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="54" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classid_angles_1ac89c843cd70358883692f94c4ba9e4bc" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float idAngles::roll</definition>
        <argsstring></argsstring>
        <name>roll</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="55" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classid_angles_1a397cd64fb9b71068724348889e25aa5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idAngles::idAngles</definition>
        <argsstring>(void)</argsstring>
        <name>idAngles</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="57" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="105" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1a64f557d0bd6f63a7a867349dab5e0e7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idAngles::idAngles</definition>
        <argsstring>(float pitch, float yaw, float roll)</argsstring>
        <name>idAngles</name>
        <param>
          <type>float</type>
          <declname>pitch</declname>
        </param>
        <param>
          <type>float</type>
          <declname>yaw</declname>
        </param>
        <param>
          <type>float</type>
          <declname>roll</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="58" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="108" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1a785c4d60cb95d3fc36201d2c9475d004" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idAngles::idAngles</definition>
        <argsstring>(const idVec3 &amp;v)</argsstring>
        <name>idAngles</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="59" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="114" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1a0e2dc394f0eea6721a8c43dca61e21c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idAngles::Set</definition>
        <argsstring>(float pitch, float yaw, float roll)</argsstring>
        <name>Set</name>
        <param>
          <type>float</type>
          <declname>pitch</declname>
        </param>
        <param>
          <type>float</type>
          <declname>yaw</declname>
        </param>
        <param>
          <type>float</type>
          <declname>roll</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="61" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="120" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1a4181f8a2ca593ccc0fcdda00e7bac8f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_angles" kindref="compound">idAngles</ref> &amp;</type>
        <definition>ID_INLINE idAngles &amp; idAngles::Zero</definition>
        <argsstring>(void)</argsstring>
        <name>Zero</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="62" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1a917337d1426ba3089cf956f4ac25a6be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>ID_INLINE float idAngles::operator[]</definition>
        <argsstring>(int index) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="64" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1ad90b29ffe2b02e2246469d5bb6934fb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float &amp;</type>
        <definition>ID_INLINE float &amp; idAngles::operator[]</definition>
        <argsstring>(int index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="65" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1a1122cb1b675bcd045eea19b71056ab76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_angles" kindref="compound">idAngles</ref></type>
        <definition>ID_INLINE idAngles idAngles::operator-</definition>
        <argsstring>() const </argsstring>
        <name>operator-</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="66" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="141" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1a2d0151692fb5001aa91bcf5e1b4270a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_angles" kindref="compound">idAngles</ref> &amp;</type>
        <definition>ID_INLINE idAngles &amp; idAngles::operator=</definition>
        <argsstring>(const idAngles &amp;a)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classid_angles" kindref="compound">idAngles</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="67" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="145" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1a44839fa65082f66212f2a71d960e5159" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_angles" kindref="compound">idAngles</ref></type>
        <definition>ID_INLINE idAngles idAngles::operator+</definition>
        <argsstring>(const idAngles &amp;a) const </argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classid_angles" kindref="compound">idAngles</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="68" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="152" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1a549e65152c54d1f9b87f57eb6b857bd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_angles" kindref="compound">idAngles</ref> &amp;</type>
        <definition>ID_INLINE idAngles &amp; idAngles::operator+=</definition>
        <argsstring>(const idAngles &amp;a)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classid_angles" kindref="compound">idAngles</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="69" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="156" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1aef7097074a66bb350283c2c4a2e09d75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_angles" kindref="compound">idAngles</ref></type>
        <definition>ID_INLINE idAngles idAngles::operator-</definition>
        <argsstring>(const idAngles &amp;a) const </argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classid_angles" kindref="compound">idAngles</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="70" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="164" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1ae7da1814ee7bfec5635eafa5c3bb6bb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_angles" kindref="compound">idAngles</ref> &amp;</type>
        <definition>ID_INLINE idAngles &amp; idAngles::operator-=</definition>
        <argsstring>(const idAngles &amp;a)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classid_angles" kindref="compound">idAngles</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="71" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="168" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1acf4ddcf0c6f3f785622aea8083b29f3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_angles" kindref="compound">idAngles</ref></type>
        <definition>ID_INLINE idAngles idAngles::operator*</definition>
        <argsstring>(const float a) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const float</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="72" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="176" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1ac382a54efba243d19152b8047a89dc51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_angles" kindref="compound">idAngles</ref> &amp;</type>
        <definition>ID_INLINE idAngles &amp; idAngles::operator*=</definition>
        <argsstring>(const float a)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const float</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="73" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="180" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1af92268a0eef0ae6badb7b796df46b88f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_angles" kindref="compound">idAngles</ref></type>
        <definition>ID_INLINE idAngles idAngles::operator/</definition>
        <argsstring>(const float a) const </argsstring>
        <name>operator/</name>
        <param>
          <type>const float</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="74" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="187" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1aaed695953ef02f641829bd3640b3c4b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_angles" kindref="compound">idAngles</ref> &amp;</type>
        <definition>ID_INLINE idAngles &amp; idAngles::operator/=</definition>
        <argsstring>(const float a)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const float</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="75" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="192" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1a41a26f6cff938ab0e58a196f684c5e50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idAngles::Compare</definition>
        <argsstring>(const idAngles &amp;a) const </argsstring>
        <name>Compare</name>
        <param>
          <type>const <ref refid="classid_angles" kindref="compound">idAngles</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="79" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="204" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1a2e20bb34a2ea9c113631009752208966" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idAngles::Compare</definition>
        <argsstring>(const idAngles &amp;a, const float epsilon) const </argsstring>
        <name>Compare</name>
        <param>
          <type>const <ref refid="classid_angles" kindref="compound">idAngles</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="80" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="208" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1a8a4094bffc295ee49b697257e34be91e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idAngles::operator==</definition>
        <argsstring>(const idAngles &amp;a) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classid_angles" kindref="compound">idAngles</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="81" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="224" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1aa8f785a8966988f08ff70c101ce30d3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idAngles::operator!=</definition>
        <argsstring>(const idAngles &amp;a) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classid_angles" kindref="compound">idAngles</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="82" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="228" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1a239991057325c0e6a151b1193bba1278" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_angles" kindref="compound">idAngles</ref> &amp;</type>
        <definition>idAngles &amp; idAngles::Normalize360</definition>
        <argsstring>(void)</argsstring>
        <name>Normalize360</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="84" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.cpp" bodystart="44" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1a96acc538f63fccc19196d70cee0da086" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_angles" kindref="compound">idAngles</ref> &amp;</type>
        <definition>idAngles &amp; idAngles::Normalize180</definition>
        <argsstring>(void)</argsstring>
        <name>Normalize180</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="85" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.cpp" bodystart="70" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1a16a71a20469d71bdc3bc1ca5dbd39f46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idAngles::Clamp</definition>
        <argsstring>(const idAngles &amp;min, const idAngles &amp;max)</argsstring>
        <name>Clamp</name>
        <param>
          <type>const <ref refid="classid_angles" kindref="compound">idAngles</ref> &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>const <ref refid="classid_angles" kindref="compound">idAngles</ref> &amp;</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="87" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="232" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1ab9113e63a1cf57f875abfd3a3d5b2400" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>ID_INLINE int idAngles::GetDimension</definition>
        <argsstring>(void) const </argsstring>
        <name>GetDimension</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="89" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="250" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1a78bfbc5323b9b148843531e51e920b88" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idAngles::ToVectors</definition>
        <argsstring>(idVec3 *forward, idVec3 *right=NULL, idVec3 *up=NULL) const </argsstring>
        <name>ToVectors</name>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> *</type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> *</type>
          <declname>right</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> *</type>
          <declname>up</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="91" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.cpp" bodystart="92" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1aff25b944e4676c651dea16c5dd7f4975" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
        <definition>idVec3 idAngles::ToForward</definition>
        <argsstring>(void) const </argsstring>
        <name>ToForward</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="92" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.cpp" bodystart="117" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1a394fcab20e9d9a3a4f33a66c287bd7da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_quat" kindref="compound">idQuat</ref></type>
        <definition>idQuat idAngles::ToQuat</definition>
        <argsstring>(void) const </argsstring>
        <name>ToQuat</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="93" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.cpp" bodystart="131" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1abf8858f2a31a51dad347a66f14908b99" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_rotation" kindref="compound">idRotation</ref></type>
        <definition>idRotation idAngles::ToRotation</definition>
        <argsstring>(void) const </argsstring>
        <name>ToRotation</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="94" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.cpp" bodystart="152" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1a841de913363d0d9614b4897f2ec9814f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat3" kindref="compound">idMat3</ref></type>
        <definition>idMat3 idAngles::ToMat3</definition>
        <argsstring>(void) const </argsstring>
        <name>ToMat3</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="95" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.cpp" bodystart="199" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1adad711715458d51dcb556b21f00d9615" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat4" kindref="compound">idMat4</ref></type>
        <definition>idMat4 idAngles::ToMat4</definition>
        <argsstring>(void) const </argsstring>
        <name>ToMat4</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="96" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.cpp" bodystart="219" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1a54479a8925c6afada0473205aae4a948" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
        <definition>idVec3 idAngles::ToAngularVelocity</definition>
        <argsstring>(void) const </argsstring>
        <name>ToAngularVelocity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="97" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.cpp" bodystart="228" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1ae275b316f5c05cb36c936fe63889fe59" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const float *</type>
        <definition>ID_INLINE const float * idAngles::ToFloatPtr</definition>
        <argsstring>(void) const </argsstring>
        <name>ToFloatPtr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="98" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="254" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1aee59a4a13c99038bbd4ca159ac32fad7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>ID_INLINE float * idAngles::ToFloatPtr</definition>
        <argsstring>(void)</argsstring>
        <name>ToFloatPtr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="99" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="258" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classid_angles_1a4e81e6d6a39c75ea692e1829ac1a6c38" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * idAngles::ToString</definition>
        <argsstring>(int precision=2) const </argsstring>
        <name>ToString</name>
        <param>
          <type>int</type>
          <declname>precision</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="100" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.cpp" bodystart="238" bodyend="240"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classid_angles_1a7b19f75a181a84759133b1c485b65bbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classid_angles" kindref="compound">idAngles</ref></type>
        <definition>idAngles operator*</definition>
        <argsstring>(const float a, const idAngles &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classid_angles" kindref="compound">idAngles</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="77" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="200" bodyend="202"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" line="51" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Angles.h" bodystart="51" bodyend="101"/>
    <listofallmembers>
      <member refid="classid_angles_1a16a71a20469d71bdc3bc1ca5dbd39f46" prot="public" virt="non-virtual"><scope>idAngles</scope><name>Clamp</name></member>
      <member refid="classid_angles_1a41a26f6cff938ab0e58a196f684c5e50" prot="public" virt="non-virtual"><scope>idAngles</scope><name>Compare</name></member>
      <member refid="classid_angles_1a2e20bb34a2ea9c113631009752208966" prot="public" virt="non-virtual"><scope>idAngles</scope><name>Compare</name></member>
      <member refid="classid_angles_1ab9113e63a1cf57f875abfd3a3d5b2400" prot="public" virt="non-virtual"><scope>idAngles</scope><name>GetDimension</name></member>
      <member refid="classid_angles_1a397cd64fb9b71068724348889e25aa5a" prot="public" virt="non-virtual"><scope>idAngles</scope><name>idAngles</name></member>
      <member refid="classid_angles_1a64f557d0bd6f63a7a867349dab5e0e7b" prot="public" virt="non-virtual"><scope>idAngles</scope><name>idAngles</name></member>
      <member refid="classid_angles_1a785c4d60cb95d3fc36201d2c9475d004" prot="public" virt="non-virtual"><scope>idAngles</scope><name>idAngles</name></member>
      <member refid="classid_angles_1a96acc538f63fccc19196d70cee0da086" prot="public" virt="non-virtual"><scope>idAngles</scope><name>Normalize180</name></member>
      <member refid="classid_angles_1a239991057325c0e6a151b1193bba1278" prot="public" virt="non-virtual"><scope>idAngles</scope><name>Normalize360</name></member>
      <member refid="classid_angles_1aa8f785a8966988f08ff70c101ce30d3d" prot="public" virt="non-virtual"><scope>idAngles</scope><name>operator!=</name></member>
      <member refid="classid_angles_1acf4ddcf0c6f3f785622aea8083b29f3c" prot="public" virt="non-virtual"><scope>idAngles</scope><name>operator*</name></member>
      <member refid="classid_angles_1a7b19f75a181a84759133b1c485b65bbe" prot="public" virt="non-virtual"><scope>idAngles</scope><name>operator*</name></member>
      <member refid="classid_angles_1ac382a54efba243d19152b8047a89dc51" prot="public" virt="non-virtual"><scope>idAngles</scope><name>operator*=</name></member>
      <member refid="classid_angles_1a44839fa65082f66212f2a71d960e5159" prot="public" virt="non-virtual"><scope>idAngles</scope><name>operator+</name></member>
      <member refid="classid_angles_1a549e65152c54d1f9b87f57eb6b857bd8" prot="public" virt="non-virtual"><scope>idAngles</scope><name>operator+=</name></member>
      <member refid="classid_angles_1a1122cb1b675bcd045eea19b71056ab76" prot="public" virt="non-virtual"><scope>idAngles</scope><name>operator-</name></member>
      <member refid="classid_angles_1aef7097074a66bb350283c2c4a2e09d75" prot="public" virt="non-virtual"><scope>idAngles</scope><name>operator-</name></member>
      <member refid="classid_angles_1ae7da1814ee7bfec5635eafa5c3bb6bb4" prot="public" virt="non-virtual"><scope>idAngles</scope><name>operator-=</name></member>
      <member refid="classid_angles_1af92268a0eef0ae6badb7b796df46b88f" prot="public" virt="non-virtual"><scope>idAngles</scope><name>operator/</name></member>
      <member refid="classid_angles_1aaed695953ef02f641829bd3640b3c4b6" prot="public" virt="non-virtual"><scope>idAngles</scope><name>operator/=</name></member>
      <member refid="classid_angles_1a2d0151692fb5001aa91bcf5e1b4270a4" prot="public" virt="non-virtual"><scope>idAngles</scope><name>operator=</name></member>
      <member refid="classid_angles_1a8a4094bffc295ee49b697257e34be91e" prot="public" virt="non-virtual"><scope>idAngles</scope><name>operator==</name></member>
      <member refid="classid_angles_1a917337d1426ba3089cf956f4ac25a6be" prot="public" virt="non-virtual"><scope>idAngles</scope><name>operator[]</name></member>
      <member refid="classid_angles_1ad90b29ffe2b02e2246469d5bb6934fb0" prot="public" virt="non-virtual"><scope>idAngles</scope><name>operator[]</name></member>
      <member refid="classid_angles_1a0ff75b9900a2cd4be27e9105e535ca4c" prot="public" virt="non-virtual"><scope>idAngles</scope><name>pitch</name></member>
      <member refid="classid_angles_1ac89c843cd70358883692f94c4ba9e4bc" prot="public" virt="non-virtual"><scope>idAngles</scope><name>roll</name></member>
      <member refid="classid_angles_1a0e2dc394f0eea6721a8c43dca61e21c5" prot="public" virt="non-virtual"><scope>idAngles</scope><name>Set</name></member>
      <member refid="classid_angles_1a54479a8925c6afada0473205aae4a948" prot="public" virt="non-virtual"><scope>idAngles</scope><name>ToAngularVelocity</name></member>
      <member refid="classid_angles_1ae275b316f5c05cb36c936fe63889fe59" prot="public" virt="non-virtual"><scope>idAngles</scope><name>ToFloatPtr</name></member>
      <member refid="classid_angles_1aee59a4a13c99038bbd4ca159ac32fad7" prot="public" virt="non-virtual"><scope>idAngles</scope><name>ToFloatPtr</name></member>
      <member refid="classid_angles_1aff25b944e4676c651dea16c5dd7f4975" prot="public" virt="non-virtual"><scope>idAngles</scope><name>ToForward</name></member>
      <member refid="classid_angles_1a841de913363d0d9614b4897f2ec9814f" prot="public" virt="non-virtual"><scope>idAngles</scope><name>ToMat3</name></member>
      <member refid="classid_angles_1adad711715458d51dcb556b21f00d9615" prot="public" virt="non-virtual"><scope>idAngles</scope><name>ToMat4</name></member>
      <member refid="classid_angles_1a394fcab20e9d9a3a4f33a66c287bd7da" prot="public" virt="non-virtual"><scope>idAngles</scope><name>ToQuat</name></member>
      <member refid="classid_angles_1abf8858f2a31a51dad347a66f14908b99" prot="public" virt="non-virtual"><scope>idAngles</scope><name>ToRotation</name></member>
      <member refid="classid_angles_1a4e81e6d6a39c75ea692e1829ac1a6c38" prot="public" virt="non-virtual"><scope>idAngles</scope><name>ToString</name></member>
      <member refid="classid_angles_1a78bfbc5323b9b148843531e51e920b88" prot="public" virt="non-virtual"><scope>idAngles</scope><name>ToVectors</name></member>
      <member refid="classid_angles_1a35d459b49303f54a250c8e9c32abcb3d" prot="public" virt="non-virtual"><scope>idAngles</scope><name>yaw</name></member>
      <member refid="classid_angles_1a4181f8a2ca593ccc0fcdda00e7bac8f3" prot="public" virt="non-virtual"><scope>idAngles</scope><name>Zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
