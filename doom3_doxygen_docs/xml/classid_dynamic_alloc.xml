<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classid_dynamic_alloc" kind="class" prot="public">
    <compoundname>idDynamicAlloc</compoundname>
    <templateparamlist>
      <param>
        <type>class type</type>
      </param>
      <param>
        <type>int</type>
        <declname>baseBlockSize</declname>
        <defname>baseBlockSize</defname>
      </param>
      <param>
        <type>int</type>
        <declname>minBlockSize</declname>
        <defname>minBlockSize</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classid_dynamic_alloc_1ae2eba6e2baaa8496dd34c1d94c6fa7b2" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::numUsedBlocks</definition>
        <argsstring></argsstring>
        <name>numUsedBlocks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="273" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classid_dynamic_alloc_1aa5c996ea16d95a6cc84a68cfbb4a8d0e" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::usedBlockMemory</definition>
        <argsstring></argsstring>
        <name>usedBlockMemory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="274" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classid_dynamic_alloc_1aed0d0240caadfc30161b59bc5c4e058f" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::numAllocs</definition>
        <argsstring></argsstring>
        <name>numAllocs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="276" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classid_dynamic_alloc_1aa5773ba068d9681bfa8a8c5af1ead7bb" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::numResizes</definition>
        <argsstring></argsstring>
        <name>numResizes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="277" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classid_dynamic_alloc_1a0436f8766a55cd820f9c5688f4081a2d" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::numFrees</definition>
        <argsstring></argsstring>
        <name>numFrees</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="278" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classid_dynamic_alloc_1a04e70db3604d58fcd1601a8e745f5011" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::idDynamicAlloc</definition>
        <argsstring>(void)</argsstring>
        <name>idDynamicAlloc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="250" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="284" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classid_dynamic_alloc_1af5becd991e58b0fd3e0682e9e6e82818" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::~idDynamicAlloc</definition>
        <argsstring>(void)</argsstring>
        <name>~idDynamicAlloc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="251" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="289" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classid_dynamic_alloc_1a8818de76f47a28745521d646af070712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::Init</definition>
        <argsstring>(void)</argsstring>
        <name>Init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="253" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="294" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classid_dynamic_alloc_1abfc468a62fd0a1e02fd8a0f5ad48ac33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::Shutdown</definition>
        <argsstring>(void)</argsstring>
        <name>Shutdown</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="254" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="298" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classid_dynamic_alloc_1aea1947ed7eb3cb0b54cd5f09a7d7b253" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::SetFixedBlocks</definition>
        <argsstring>(int numBlocks)</argsstring>
        <name>SetFixedBlocks</name>
        <param>
          <type>int</type>
          <declname>numBlocks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="255" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="255" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classid_dynamic_alloc_1a5f4991ebc1e7c0d36b39e6b12177888d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::SetLockMemory</definition>
        <argsstring>(bool lock)</argsstring>
        <name>SetLockMemory</name>
        <param>
          <type>bool</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="256" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="256" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classid_dynamic_alloc_1a570f4cac4c430e3ea6915ecee2ea61fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::FreeEmptyBaseBlocks</definition>
        <argsstring>(void)</argsstring>
        <name>FreeEmptyBaseBlocks</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="257" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="257" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classid_dynamic_alloc_1ad30801455203560000dc4b6bcae9f57d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>type *</type>
        <definition>type * idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::Alloc</definition>
        <argsstring>(const int num)</argsstring>
        <name>Alloc</name>
        <param>
          <type>const int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="259" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="303" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="classid_dynamic_alloc_1aa1dd3c31da9a83f005f11bdb1337b604" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>type *</type>
        <definition>type * idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::Resize</definition>
        <argsstring>(type *ptr, const int num)</argsstring>
        <name>Resize</name>
        <param>
          <type>type *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="260" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="314" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classid_dynamic_alloc_1a89e1b88d8ad859ce994cd3bc5617ce45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::Free</definition>
        <argsstring>(type *ptr)</argsstring>
        <name>Free</name>
        <param>
          <type>type *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="261" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="332" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="classid_dynamic_alloc_1a0d2da6e7b0a72ca3f5904dc38261dc33" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::CheckMemory</definition>
        <argsstring>(const type *ptr) const </argsstring>
        <name>CheckMemory</name>
        <param>
          <type>const type *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="262" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="341" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="classid_dynamic_alloc_1ad7b04997820b6d049bdefc4bdee9fead" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::GetNumBaseBlocks</definition>
        <argsstring>(void) const </argsstring>
        <name>GetNumBaseBlocks</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="264" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="264" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classid_dynamic_alloc_1a36f145fb207a7347e264a8d8744db7bc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::GetBaseBlockMemory</definition>
        <argsstring>(void) const </argsstring>
        <name>GetBaseBlockMemory</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="265" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="265" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classid_dynamic_alloc_1af053b4c000fd1777c648a19b8aa43b5d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::GetNumUsedBlocks</definition>
        <argsstring>(void) const </argsstring>
        <name>GetNumUsedBlocks</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="266" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="266" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classid_dynamic_alloc_1afb1e6679ddaf75c3a6a5e0ae5e2c0045" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::GetUsedBlockMemory</definition>
        <argsstring>(void) const </argsstring>
        <name>GetUsedBlockMemory</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="267" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="267" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classid_dynamic_alloc_1a6175824f3cd5b7bebcd541687569e20f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::GetNumFreeBlocks</definition>
        <argsstring>(void) const </argsstring>
        <name>GetNumFreeBlocks</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="268" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="268" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classid_dynamic_alloc_1a5c91eb92b17d45d2c93bb627a11da779" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::GetFreeBlockMemory</definition>
        <argsstring>(void) const </argsstring>
        <name>GetFreeBlockMemory</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="269" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="269" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classid_dynamic_alloc_1a48c4c315e85f870d4d1bdbbf64f731fd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::GetNumEmptyBaseBlocks</definition>
        <argsstring>(void) const </argsstring>
        <name>GetNumEmptyBaseBlocks</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="270" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="270" bodyend="270"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classid_dynamic_alloc_1a92d96fd8287b34704f1d33c4135ed39d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idDynamicAlloc&lt; type, baseBlockSize, minBlockSize &gt;::Clear</definition>
        <argsstring>(void)</argsstring>
        <name>Clear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="280" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="346" bodyend="352"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" line="248" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/Heap.h" bodystart="248" bodyend="281"/>
    <listofallmembers>
      <member refid="classid_dynamic_alloc_1ad30801455203560000dc4b6bcae9f57d" prot="public" virt="non-virtual"><scope>idDynamicAlloc</scope><name>Alloc</name></member>
      <member refid="classid_dynamic_alloc_1a0d2da6e7b0a72ca3f5904dc38261dc33" prot="public" virt="non-virtual"><scope>idDynamicAlloc</scope><name>CheckMemory</name></member>
      <member refid="classid_dynamic_alloc_1a92d96fd8287b34704f1d33c4135ed39d" prot="private" virt="non-virtual"><scope>idDynamicAlloc</scope><name>Clear</name></member>
      <member refid="classid_dynamic_alloc_1a89e1b88d8ad859ce994cd3bc5617ce45" prot="public" virt="non-virtual"><scope>idDynamicAlloc</scope><name>Free</name></member>
      <member refid="classid_dynamic_alloc_1a570f4cac4c430e3ea6915ecee2ea61fb" prot="public" virt="non-virtual"><scope>idDynamicAlloc</scope><name>FreeEmptyBaseBlocks</name></member>
      <member refid="classid_dynamic_alloc_1a36f145fb207a7347e264a8d8744db7bc" prot="public" virt="non-virtual"><scope>idDynamicAlloc</scope><name>GetBaseBlockMemory</name></member>
      <member refid="classid_dynamic_alloc_1a5c91eb92b17d45d2c93bb627a11da779" prot="public" virt="non-virtual"><scope>idDynamicAlloc</scope><name>GetFreeBlockMemory</name></member>
      <member refid="classid_dynamic_alloc_1ad7b04997820b6d049bdefc4bdee9fead" prot="public" virt="non-virtual"><scope>idDynamicAlloc</scope><name>GetNumBaseBlocks</name></member>
      <member refid="classid_dynamic_alloc_1a48c4c315e85f870d4d1bdbbf64f731fd" prot="public" virt="non-virtual"><scope>idDynamicAlloc</scope><name>GetNumEmptyBaseBlocks</name></member>
      <member refid="classid_dynamic_alloc_1a6175824f3cd5b7bebcd541687569e20f" prot="public" virt="non-virtual"><scope>idDynamicAlloc</scope><name>GetNumFreeBlocks</name></member>
      <member refid="classid_dynamic_alloc_1af053b4c000fd1777c648a19b8aa43b5d" prot="public" virt="non-virtual"><scope>idDynamicAlloc</scope><name>GetNumUsedBlocks</name></member>
      <member refid="classid_dynamic_alloc_1afb1e6679ddaf75c3a6a5e0ae5e2c0045" prot="public" virt="non-virtual"><scope>idDynamicAlloc</scope><name>GetUsedBlockMemory</name></member>
      <member refid="classid_dynamic_alloc_1a04e70db3604d58fcd1601a8e745f5011" prot="public" virt="non-virtual"><scope>idDynamicAlloc</scope><name>idDynamicAlloc</name></member>
      <member refid="classid_dynamic_alloc_1a8818de76f47a28745521d646af070712" prot="public" virt="non-virtual"><scope>idDynamicAlloc</scope><name>Init</name></member>
      <member refid="classid_dynamic_alloc_1aed0d0240caadfc30161b59bc5c4e058f" prot="private" virt="non-virtual"><scope>idDynamicAlloc</scope><name>numAllocs</name></member>
      <member refid="classid_dynamic_alloc_1a0436f8766a55cd820f9c5688f4081a2d" prot="private" virt="non-virtual"><scope>idDynamicAlloc</scope><name>numFrees</name></member>
      <member refid="classid_dynamic_alloc_1aa5773ba068d9681bfa8a8c5af1ead7bb" prot="private" virt="non-virtual"><scope>idDynamicAlloc</scope><name>numResizes</name></member>
      <member refid="classid_dynamic_alloc_1ae2eba6e2baaa8496dd34c1d94c6fa7b2" prot="private" virt="non-virtual"><scope>idDynamicAlloc</scope><name>numUsedBlocks</name></member>
      <member refid="classid_dynamic_alloc_1aa1dd3c31da9a83f005f11bdb1337b604" prot="public" virt="non-virtual"><scope>idDynamicAlloc</scope><name>Resize</name></member>
      <member refid="classid_dynamic_alloc_1aea1947ed7eb3cb0b54cd5f09a7d7b253" prot="public" virt="non-virtual"><scope>idDynamicAlloc</scope><name>SetFixedBlocks</name></member>
      <member refid="classid_dynamic_alloc_1a5f4991ebc1e7c0d36b39e6b12177888d" prot="public" virt="non-virtual"><scope>idDynamicAlloc</scope><name>SetLockMemory</name></member>
      <member refid="classid_dynamic_alloc_1abfc468a62fd0a1e02fd8a0f5ad48ac33" prot="public" virt="non-virtual"><scope>idDynamicAlloc</scope><name>Shutdown</name></member>
      <member refid="classid_dynamic_alloc_1aa5c996ea16d95a6cc84a68cfbb4a8d0e" prot="private" virt="non-virtual"><scope>idDynamicAlloc</scope><name>usedBlockMemory</name></member>
      <member refid="classid_dynamic_alloc_1af5becd991e58b0fd3e0682e9e6e82818" prot="public" virt="non-virtual"><scope>idDynamicAlloc</scope><name>~idDynamicAlloc</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
