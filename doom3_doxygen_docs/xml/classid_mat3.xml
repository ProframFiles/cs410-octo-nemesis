<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classid_mat3" kind="class" prot="public">
    <compoundname>idMat3</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classid_mat3_1ab321198f7b18bc6f876e78df463d1a8c" prot="private" static="no" mutable="no">
        <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
        <definition>idVec3 idMat3::mat[3]</definition>
        <argsstring>[3]</argsstring>
        <name>mat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="408" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="408" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classid_mat3_1ac0f527a1af74b9f9cbddc34094e57343" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idMat3::idMat3</definition>
        <argsstring>(void)</argsstring>
        <name>idMat3</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="335" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="415" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a49623cbff8fb8f08a4c4f9f060b05f96" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idMat3::idMat3</definition>
        <argsstring>(const idVec3 &amp;x, const idVec3 &amp;y, const idVec3 &amp;z)</argsstring>
        <name>idMat3</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="336" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="418" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1ad549a19e9318fb04ddae7ea1611658d5" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idMat3::idMat3</definition>
        <argsstring>(const float xx, const float xy, const float xz, const float yx, const float yy, const float yz, const float zx, const float zy, const float zz)</argsstring>
        <name>idMat3</name>
        <param>
          <type>const float</type>
          <declname>xx</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>xy</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>xz</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>yx</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>yy</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>yz</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>zx</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>zy</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>zz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="337" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="424" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a3df7844eef7915ed640f8275180aa486" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idMat3::idMat3</definition>
        <argsstring>(const float src[3][3])</argsstring>
        <name>idMat3</name>
        <param>
          <type>const float</type>
          <declname>src</declname>
          <array>[3][3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="338" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="430" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1afcad5f219bccf1c2eba901fa9ecc05c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
        <definition>ID_INLINE const idVec3 &amp; idMat3::operator[]</definition>
        <argsstring>(int index) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="340" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="434" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1ac0bb17699118b1496f981cc5b160fba3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
        <definition>ID_INLINE idVec3 &amp; idMat3::operator[]</definition>
        <argsstring>(int index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="341" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="439" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a326bc12d37a69f6fc80ec2a7384b22e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat3" kindref="compound">idMat3</ref></type>
        <definition>ID_INLINE idMat3 idMat3::operator-</definition>
        <argsstring>() const </argsstring>
        <name>operator-</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="342" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="444" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1ae38267f1317b14b1b9b0498caeca1e22" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat3" kindref="compound">idMat3</ref></type>
        <definition>ID_INLINE idMat3 idMat3::operator*</definition>
        <argsstring>(const float a) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const float</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="343" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="479" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a23f0853149ecb2ff2800e1a2a0774beb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
        <definition>ID_INLINE idVec3 idMat3::operator*</definition>
        <argsstring>(const idVec3 &amp;vec) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="344" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="450" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a3a6c65ae541e7ed9517856a19b905c73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat3" kindref="compound">idMat3</ref></type>
        <definition>ID_INLINE idMat3 idMat3::operator*</definition>
        <argsstring>(const idMat3 &amp;a) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="345" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="457" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1ad7cbb59069438a0df5022058f892d13d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat3" kindref="compound">idMat3</ref></type>
        <definition>ID_INLINE idMat3 idMat3::operator+</definition>
        <argsstring>(const idMat3 &amp;a) const </argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="346" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="486" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1af09288fab0bc4388d78a741b1bd3d36c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat3" kindref="compound">idMat3</ref></type>
        <definition>ID_INLINE idMat3 idMat3::operator-</definition>
        <argsstring>(const idMat3 &amp;a) const </argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="347" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="493" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a11681e000c461d09b428eb4f38489418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
        <definition>ID_INLINE idMat3 &amp; idMat3::operator*=</definition>
        <argsstring>(const float a)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const float</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="348" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="500" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a5d9a0991d53d7599c1603b021c8a44bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
        <definition>ID_INLINE idMat3 &amp; idMat3::operator*=</definition>
        <argsstring>(const idMat3 &amp;a)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="349" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="508" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1ada250fe196b023a5a640bf23e456b054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
        <definition>ID_INLINE idMat3 &amp; idMat3::operator+=</definition>
        <argsstring>(const idMat3 &amp;a)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="350" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="528" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1ac3d3e271ef7a6eec205e1036ba6cedfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
        <definition>ID_INLINE idMat3 &amp; idMat3::operator-=</definition>
        <argsstring>(const idMat3 &amp;a)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="351" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="536" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a24a8eb85f2f12d2f70e1d472349d17b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idMat3::Compare</definition>
        <argsstring>(const idMat3 &amp;a) const </argsstring>
        <name>Compare</name>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="357" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="561" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a3cd336f2214bfdd615ef21feab32911a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idMat3::Compare</definition>
        <argsstring>(const idMat3 &amp;a, const float epsilon) const </argsstring>
        <name>Compare</name>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="358" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="570" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1ab19cd81ab72d6129d97ba2cd25b6561f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idMat3::operator==</definition>
        <argsstring>(const idMat3 &amp;a) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="359" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="579" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a15c2d699c7d73264851690900d8fe12c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idMat3::operator!=</definition>
        <argsstring>(const idMat3 &amp;a) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="360" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="583" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1ab7f81cf4695055d7dba419b1f3b12760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMat3::Zero</definition>
        <argsstring>(void)</argsstring>
        <name>Zero</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="362" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="587" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a45890948b279807d3a8e1a7bb1edd9e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMat3::Identity</definition>
        <argsstring>(void)</argsstring>
        <name>Identity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="363" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="591" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a0367cad696b19a774bae896c90afbd6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idMat3::IsIdentity</definition>
        <argsstring>(const float epsilon=1e-6) const </argsstring>
        <name>IsIdentity</name>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="364" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="595" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a0f07db56694e248b7b21fc083fcfe412" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idMat3::IsSymmetric</definition>
        <argsstring>(const float epsilon=1e-6) const </argsstring>
        <name>IsSymmetric</name>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="365" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="599" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1aebb05d98f1dd56aa9a61930806706845" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idMat3::IsDiagonal</definition>
        <argsstring>(const float epsilon=1e-6) const </argsstring>
        <name>IsDiagonal</name>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="366" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="612" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a1a86f0cd2c7ff70ae41a69ca18b4a8c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idMat3::IsRotated</definition>
        <argsstring>(void) const </argsstring>
        <name>IsRotated</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="367" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="624" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1ab3e830e7587304f614e55dfdcb8a4a11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMat3::ProjectVector</definition>
        <argsstring>(const idVec3 &amp;src, idVec3 &amp;dst) const </argsstring>
        <name>ProjectVector</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="369" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="628" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1acab233f30ed719f40652e7eaa2a2ae1d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMat3::UnprojectVector</definition>
        <argsstring>(const idVec3 &amp;src, idVec3 &amp;dst) const </argsstring>
        <name>UnprojectVector</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="370" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="634" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1af7aa3bbf05f32e9af31a2b913be5ddc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idMat3::FixDegeneracies</definition>
        <argsstring>(void)</argsstring>
        <name>FixDegeneracies</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="372" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="638" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a0b9f3dde904e4fdac9f178f43c79e485" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idMat3::FixDenormals</definition>
        <argsstring>(void)</argsstring>
        <name>FixDenormals</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="373" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="645" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a6650a72b6ede4d3852bfa947664ef436" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>ID_INLINE float idMat3::Trace</definition>
        <argsstring>(void) const </argsstring>
        <name>Trace</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="375" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="652" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1ab8d44cdfa420f36f179d480798ed07c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float idMat3::Determinant</definition>
        <argsstring>(void) const </argsstring>
        <name>Determinant</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="376" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="319" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1af51653abd7680d711f455cdfa8542a7b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat3" kindref="compound">idMat3</ref></type>
        <definition>ID_INLINE idMat3 idMat3::OrthoNormalize</definition>
        <argsstring>(void) const </argsstring>
        <name>OrthoNormalize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="377" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="656" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1aed19bf5bb90428b181a13ce44d8cc994" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
        <definition>ID_INLINE idMat3 &amp; idMat3::OrthoNormalizeSelf</definition>
        <argsstring>(void)</argsstring>
        <name>OrthoNormalizeSelf</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="378" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="668" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1af68500e95692e00a55f2879fc7b1c47d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat3" kindref="compound">idMat3</ref></type>
        <definition>ID_INLINE idMat3 idMat3::Transpose</definition>
        <argsstring>(void) const </argsstring>
        <name>Transpose</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="379" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="677" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1ab81fff3fd6c31142914ff8c46a1949c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
        <definition>ID_INLINE idMat3 &amp; idMat3::TransposeSelf</definition>
        <argsstring>(void)</argsstring>
        <name>TransposeSelf</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="380" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="683" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a3703a1996c047e6e6ae5f7e33c07f3d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat3" kindref="compound">idMat3</ref></type>
        <definition>ID_INLINE idMat3 idMat3::Inverse</definition>
        <argsstring>(void) const </argsstring>
        <name>Inverse</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="381" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="699" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a9cae32b40eae38c6e456b8bdbe6d926f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMat3::InverseSelf</definition>
        <argsstring>(void)</argsstring>
        <name>InverseSelf</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="382" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="333" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1acb42238d8b75f629b90e5d8db7454317" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat3" kindref="compound">idMat3</ref></type>
        <definition>ID_INLINE idMat3 idMat3::InverseFast</definition>
        <argsstring>(void) const </argsstring>
        <name>InverseFast</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="383" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="708" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a4568b7a9a472c1d2a34ebfa0f6c66a41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMat3::InverseFastSelf</definition>
        <argsstring>(void)</argsstring>
        <name>InverseFastSelf</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="384" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="378" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1ab592be91bfe612ffddf04b9eebfc85e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat3" kindref="compound">idMat3</ref></type>
        <definition>ID_INLINE idMat3 idMat3::TransposeMultiply</definition>
        <argsstring>(const idMat3 &amp;b) const </argsstring>
        <name>TransposeMultiply</name>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="385" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="717" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a1aac192fdf184fd1fb8e3b5b87055253" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat3" kindref="compound">idMat3</ref></type>
        <definition>idMat3 idMat3::InertiaTranslate</definition>
        <argsstring>(const float mass, const idVec3 &amp;centerOfMass, const idVec3 &amp;translation) const </argsstring>
        <name>InertiaTranslate</name>
        <param>
          <type>const float</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>centerOfMass</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>translation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="387" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="537" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1aded67f10cdab0178e77986fb7110403b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
        <definition>idMat3 &amp; idMat3::InertiaTranslateSelf</definition>
        <argsstring>(const float mass, const idVec3 &amp;centerOfMass, const idVec3 &amp;translation)</argsstring>
        <name>InertiaTranslateSelf</name>
        <param>
          <type>const float</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>centerOfMass</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>translation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="388" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="562" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a0661bb121d465e7b4be2bea26bf9267f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat3" kindref="compound">idMat3</ref></type>
        <definition>idMat3 idMat3::InertiaRotate</definition>
        <argsstring>(const idMat3 &amp;rotation) const </argsstring>
        <name>InertiaRotate</name>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>rotation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="389" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="589" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a11ec24db6036ca7f933aad659fb8920c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
        <definition>idMat3 &amp; idMat3::InertiaRotateSelf</definition>
        <argsstring>(const idMat3 &amp;rotation)</argsstring>
        <name>InertiaRotateSelf</name>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>rotation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="390" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="599" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a0434a46d16063c322eeec8aa5203be90" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>ID_INLINE int idMat3::GetDimension</definition>
        <argsstring>(void) const </argsstring>
        <name>GetDimension</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="392" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="745" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1ad8b2c6393be6a913fcaf7d652e87b250" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_angles" kindref="compound">idAngles</ref></type>
        <definition>idAngles idMat3::ToAngles</definition>
        <argsstring>(void) const </argsstring>
        <name>ToAngles</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="394" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="147" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a32caa8012875bfad0ea69dccc61b969c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_quat" kindref="compound">idQuat</ref></type>
        <definition>idQuat idMat3::ToQuat</definition>
        <argsstring>(void) const </argsstring>
        <name>ToQuat</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="395" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="182" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1afed3d6bbb23dc490db73312396bf9316" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_c_quat" kindref="compound">idCQuat</ref></type>
        <definition>idCQuat idMat3::ToCQuat</definition>
        <argsstring>(void) const </argsstring>
        <name>ToCQuat</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="396" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="233" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a32914ef9e1879d8129357dbd7432aeb6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_rotation" kindref="compound">idRotation</ref></type>
        <definition>idRotation idMat3::ToRotation</definition>
        <argsstring>(void) const </argsstring>
        <name>ToRotation</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="397" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="246" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a7c833d963f31a3910bdb20babda89d69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat4" kindref="compound">idMat4</ref></type>
        <definition>ID_INLINE idMat4 idMat3::ToMat4</definition>
        <argsstring>(void) const </argsstring>
        <name>ToMat4</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="398" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="1125" bodyend="1131"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1ad217cd7b71df0e43e593d3794ab8bbaa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
        <definition>idVec3 idMat3::ToAngularVelocity</definition>
        <argsstring>(void) const </argsstring>
        <name>ToAngularVelocity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="399" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="309" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1ac1368de8f2b19f38acc9a1f9c9e86a74" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const float *</type>
        <definition>ID_INLINE const float * idMat3::ToFloatPtr</definition>
        <argsstring>(void) const </argsstring>
        <name>ToFloatPtr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="400" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="749" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a031a096641a30078253deced76a65180" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>ID_INLINE float * idMat3::ToFloatPtr</definition>
        <argsstring>(void)</argsstring>
        <name>ToFloatPtr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="401" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="753" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat3_1a3723b4103d5ed01dd024e1c2280df743" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * idMat3::ToString</definition>
        <argsstring>(int precision=2) const </argsstring>
        <name>ToString</name>
        <param>
          <type>int</type>
          <declname>precision</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="402" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="610" bodyend="612"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classid_mat3_1ad15c9150b2f5533fa8a28017db8e9c79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classid_mat3" kindref="compound">idMat3</ref></type>
        <definition>idMat3 operator*</definition>
        <argsstring>(const float a, const idMat3 &amp;mat)</argsstring>
        <name>operator*</name>
        <param>
          <type>const float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="353" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="548" bodyend="550"/>
      </memberdef>
      <memberdef kind="friend" id="classid_mat3_1a85654b7addef45bf52136024eb14f31a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
        <definition>idVec3 operator*</definition>
        <argsstring>(const idVec3 &amp;vec, const idMat3 &amp;mat)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="354" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="544" bodyend="546"/>
      </memberdef>
      <memberdef kind="friend" id="classid_mat3_1ae8db75caf8e054b341f4d6400ad93b43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
        <definition>idVec3&amp; operator*=</definition>
        <argsstring>(idVec3 &amp;vec, const idMat3 &amp;mat)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="355" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="552" bodyend="559"/>
      </memberdef>
      <memberdef kind="friend" id="classid_mat3_1aaf504fcacf1f523deca43d66b886d271" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void TransposeMultiply</definition>
        <argsstring>(const idMat3 &amp;inv, const idMat3 &amp;b, idMat3 &amp;dst)</argsstring>
        <name>TransposeMultiply</name>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>inv</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="404" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="729" bodyend="739"/>
      </memberdef>
      <memberdef kind="friend" id="classid_mat3_1afe78a492ec09bdf51c9a26a51d68d991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classid_mat3" kindref="compound">idMat3</ref></type>
        <definition>idMat3 SkewSymmetric</definition>
        <argsstring>(idVec3 const &amp;src)</argsstring>
        <name>SkewSymmetric</name>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> const &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="405" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="741" bodyend="743"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="333" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="333" bodyend="409"/>
    <listofallmembers>
      <member refid="classid_mat3_1a24a8eb85f2f12d2f70e1d472349d17b4" prot="public" virt="non-virtual"><scope>idMat3</scope><name>Compare</name></member>
      <member refid="classid_mat3_1a3cd336f2214bfdd615ef21feab32911a" prot="public" virt="non-virtual"><scope>idMat3</scope><name>Compare</name></member>
      <member refid="classid_mat3_1ab8d44cdfa420f36f179d480798ed07c2" prot="public" virt="non-virtual"><scope>idMat3</scope><name>Determinant</name></member>
      <member refid="classid_mat3_1af7aa3bbf05f32e9af31a2b913be5ddc0" prot="public" virt="non-virtual"><scope>idMat3</scope><name>FixDegeneracies</name></member>
      <member refid="classid_mat3_1a0b9f3dde904e4fdac9f178f43c79e485" prot="public" virt="non-virtual"><scope>idMat3</scope><name>FixDenormals</name></member>
      <member refid="classid_mat3_1a0434a46d16063c322eeec8aa5203be90" prot="public" virt="non-virtual"><scope>idMat3</scope><name>GetDimension</name></member>
      <member refid="classid_mat3_1a45890948b279807d3a8e1a7bb1edd9e3" prot="public" virt="non-virtual"><scope>idMat3</scope><name>Identity</name></member>
      <member refid="classid_mat3_1ac0f527a1af74b9f9cbddc34094e57343" prot="public" virt="non-virtual"><scope>idMat3</scope><name>idMat3</name></member>
      <member refid="classid_mat3_1a49623cbff8fb8f08a4c4f9f060b05f96" prot="public" virt="non-virtual"><scope>idMat3</scope><name>idMat3</name></member>
      <member refid="classid_mat3_1ad549a19e9318fb04ddae7ea1611658d5" prot="public" virt="non-virtual"><scope>idMat3</scope><name>idMat3</name></member>
      <member refid="classid_mat3_1a3df7844eef7915ed640f8275180aa486" prot="public" virt="non-virtual"><scope>idMat3</scope><name>idMat3</name></member>
      <member refid="classid_mat3_1a0661bb121d465e7b4be2bea26bf9267f" prot="public" virt="non-virtual"><scope>idMat3</scope><name>InertiaRotate</name></member>
      <member refid="classid_mat3_1a11ec24db6036ca7f933aad659fb8920c" prot="public" virt="non-virtual"><scope>idMat3</scope><name>InertiaRotateSelf</name></member>
      <member refid="classid_mat3_1a1aac192fdf184fd1fb8e3b5b87055253" prot="public" virt="non-virtual"><scope>idMat3</scope><name>InertiaTranslate</name></member>
      <member refid="classid_mat3_1aded67f10cdab0178e77986fb7110403b" prot="public" virt="non-virtual"><scope>idMat3</scope><name>InertiaTranslateSelf</name></member>
      <member refid="classid_mat3_1a3703a1996c047e6e6ae5f7e33c07f3d0" prot="public" virt="non-virtual"><scope>idMat3</scope><name>Inverse</name></member>
      <member refid="classid_mat3_1acb42238d8b75f629b90e5d8db7454317" prot="public" virt="non-virtual"><scope>idMat3</scope><name>InverseFast</name></member>
      <member refid="classid_mat3_1a4568b7a9a472c1d2a34ebfa0f6c66a41" prot="public" virt="non-virtual"><scope>idMat3</scope><name>InverseFastSelf</name></member>
      <member refid="classid_mat3_1a9cae32b40eae38c6e456b8bdbe6d926f" prot="public" virt="non-virtual"><scope>idMat3</scope><name>InverseSelf</name></member>
      <member refid="classid_mat3_1aebb05d98f1dd56aa9a61930806706845" prot="public" virt="non-virtual"><scope>idMat3</scope><name>IsDiagonal</name></member>
      <member refid="classid_mat3_1a0367cad696b19a774bae896c90afbd6b" prot="public" virt="non-virtual"><scope>idMat3</scope><name>IsIdentity</name></member>
      <member refid="classid_mat3_1a1a86f0cd2c7ff70ae41a69ca18b4a8c3" prot="public" virt="non-virtual"><scope>idMat3</scope><name>IsRotated</name></member>
      <member refid="classid_mat3_1a0f07db56694e248b7b21fc083fcfe412" prot="public" virt="non-virtual"><scope>idMat3</scope><name>IsSymmetric</name></member>
      <member refid="classid_mat3_1ab321198f7b18bc6f876e78df463d1a8c" prot="private" virt="non-virtual"><scope>idMat3</scope><name>mat</name></member>
      <member refid="classid_mat3_1a15c2d699c7d73264851690900d8fe12c" prot="public" virt="non-virtual"><scope>idMat3</scope><name>operator!=</name></member>
      <member refid="classid_mat3_1ae38267f1317b14b1b9b0498caeca1e22" prot="public" virt="non-virtual"><scope>idMat3</scope><name>operator*</name></member>
      <member refid="classid_mat3_1a23f0853149ecb2ff2800e1a2a0774beb" prot="public" virt="non-virtual"><scope>idMat3</scope><name>operator*</name></member>
      <member refid="classid_mat3_1a3a6c65ae541e7ed9517856a19b905c73" prot="public" virt="non-virtual"><scope>idMat3</scope><name>operator*</name></member>
      <member refid="classid_mat3_1ad15c9150b2f5533fa8a28017db8e9c79" prot="public" virt="non-virtual"><scope>idMat3</scope><name>operator*</name></member>
      <member refid="classid_mat3_1a85654b7addef45bf52136024eb14f31a" prot="public" virt="non-virtual"><scope>idMat3</scope><name>operator*</name></member>
      <member refid="classid_mat3_1a11681e000c461d09b428eb4f38489418" prot="public" virt="non-virtual"><scope>idMat3</scope><name>operator*=</name></member>
      <member refid="classid_mat3_1a5d9a0991d53d7599c1603b021c8a44bb" prot="public" virt="non-virtual"><scope>idMat3</scope><name>operator*=</name></member>
      <member refid="classid_mat3_1ae8db75caf8e054b341f4d6400ad93b43" prot="public" virt="non-virtual"><scope>idMat3</scope><name>operator*=</name></member>
      <member refid="classid_mat3_1ad7cbb59069438a0df5022058f892d13d" prot="public" virt="non-virtual"><scope>idMat3</scope><name>operator+</name></member>
      <member refid="classid_mat3_1ada250fe196b023a5a640bf23e456b054" prot="public" virt="non-virtual"><scope>idMat3</scope><name>operator+=</name></member>
      <member refid="classid_mat3_1a326bc12d37a69f6fc80ec2a7384b22e1" prot="public" virt="non-virtual"><scope>idMat3</scope><name>operator-</name></member>
      <member refid="classid_mat3_1af09288fab0bc4388d78a741b1bd3d36c" prot="public" virt="non-virtual"><scope>idMat3</scope><name>operator-</name></member>
      <member refid="classid_mat3_1ac3d3e271ef7a6eec205e1036ba6cedfd" prot="public" virt="non-virtual"><scope>idMat3</scope><name>operator-=</name></member>
      <member refid="classid_mat3_1ab19cd81ab72d6129d97ba2cd25b6561f" prot="public" virt="non-virtual"><scope>idMat3</scope><name>operator==</name></member>
      <member refid="classid_mat3_1afcad5f219bccf1c2eba901fa9ecc05c5" prot="public" virt="non-virtual"><scope>idMat3</scope><name>operator[]</name></member>
      <member refid="classid_mat3_1ac0bb17699118b1496f981cc5b160fba3" prot="public" virt="non-virtual"><scope>idMat3</scope><name>operator[]</name></member>
      <member refid="classid_mat3_1af51653abd7680d711f455cdfa8542a7b" prot="public" virt="non-virtual"><scope>idMat3</scope><name>OrthoNormalize</name></member>
      <member refid="classid_mat3_1aed19bf5bb90428b181a13ce44d8cc994" prot="public" virt="non-virtual"><scope>idMat3</scope><name>OrthoNormalizeSelf</name></member>
      <member refid="classid_mat3_1ab3e830e7587304f614e55dfdcb8a4a11" prot="public" virt="non-virtual"><scope>idMat3</scope><name>ProjectVector</name></member>
      <member refid="classid_mat3_1afe78a492ec09bdf51c9a26a51d68d991" prot="public" virt="non-virtual"><scope>idMat3</scope><name>SkewSymmetric</name></member>
      <member refid="classid_mat3_1ad8b2c6393be6a913fcaf7d652e87b250" prot="public" virt="non-virtual"><scope>idMat3</scope><name>ToAngles</name></member>
      <member refid="classid_mat3_1ad217cd7b71df0e43e593d3794ab8bbaa" prot="public" virt="non-virtual"><scope>idMat3</scope><name>ToAngularVelocity</name></member>
      <member refid="classid_mat3_1afed3d6bbb23dc490db73312396bf9316" prot="public" virt="non-virtual"><scope>idMat3</scope><name>ToCQuat</name></member>
      <member refid="classid_mat3_1ac1368de8f2b19f38acc9a1f9c9e86a74" prot="public" virt="non-virtual"><scope>idMat3</scope><name>ToFloatPtr</name></member>
      <member refid="classid_mat3_1a031a096641a30078253deced76a65180" prot="public" virt="non-virtual"><scope>idMat3</scope><name>ToFloatPtr</name></member>
      <member refid="classid_mat3_1a7c833d963f31a3910bdb20babda89d69" prot="public" virt="non-virtual"><scope>idMat3</scope><name>ToMat4</name></member>
      <member refid="classid_mat3_1a32caa8012875bfad0ea69dccc61b969c" prot="public" virt="non-virtual"><scope>idMat3</scope><name>ToQuat</name></member>
      <member refid="classid_mat3_1a32914ef9e1879d8129357dbd7432aeb6" prot="public" virt="non-virtual"><scope>idMat3</scope><name>ToRotation</name></member>
      <member refid="classid_mat3_1a3723b4103d5ed01dd024e1c2280df743" prot="public" virt="non-virtual"><scope>idMat3</scope><name>ToString</name></member>
      <member refid="classid_mat3_1a6650a72b6ede4d3852bfa947664ef436" prot="public" virt="non-virtual"><scope>idMat3</scope><name>Trace</name></member>
      <member refid="classid_mat3_1af68500e95692e00a55f2879fc7b1c47d" prot="public" virt="non-virtual"><scope>idMat3</scope><name>Transpose</name></member>
      <member refid="classid_mat3_1ab592be91bfe612ffddf04b9eebfc85e3" prot="public" virt="non-virtual"><scope>idMat3</scope><name>TransposeMultiply</name></member>
      <member refid="classid_mat3_1aaf504fcacf1f523deca43d66b886d271" prot="public" virt="non-virtual"><scope>idMat3</scope><name>TransposeMultiply</name></member>
      <member refid="classid_mat3_1ab81fff3fd6c31142914ff8c46a1949c9" prot="public" virt="non-virtual"><scope>idMat3</scope><name>TransposeSelf</name></member>
      <member refid="classid_mat3_1acab233f30ed719f40652e7eaa2a2ae1d" prot="public" virt="non-virtual"><scope>idMat3</scope><name>UnprojectVector</name></member>
      <member refid="classid_mat3_1ab7f81cf4695055d7dba419b1f3b12760" prot="public" virt="non-virtual"><scope>idMat3</scope><name>Zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
