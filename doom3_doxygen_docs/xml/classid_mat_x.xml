<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classid_mat_x" kind="class" prot="public">
    <compoundname>idMatX</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classid_mat_x_1ae5d35e38c78ba85aecf1b3e06921e553" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int idMatX::numRows</definition>
        <argsstring></argsstring>
        <name>numRows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1970" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="1970" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classid_mat_x_1a3718d7712db3db67f164eb1172a9b853" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int idMatX::numColumns</definition>
        <argsstring></argsstring>
        <name>numColumns</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1971" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="1971" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classid_mat_x_1a5a9ccd8ad48162a7663a0e9b311a3764" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int idMatX::alloced</definition>
        <argsstring></argsstring>
        <name>alloced</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1972" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="1972" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classid_mat_x_1a07136bcaf643edae925a48cebb71b459" prot="private" static="no" mutable="no">
        <type>float *</type>
        <definition>float* idMatX::mat</definition>
        <argsstring></argsstring>
        <name>mat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1973" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="1973" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classid_mat_x_1aa618016398c01388a33c5f7aa159616e" prot="private" static="yes" mutable="no">
        <type>float</type>
        <definition>float idMatX::temp</definition>
        <argsstring>[1024+4]</argsstring>
        <name>temp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1975" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="1975" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classid_mat_x_1a342e0b5ec7275fd3f16d438e792b875f" prot="private" static="yes" mutable="no">
        <type>float *</type>
        <definition>float * idMatX::tempPtr</definition>
        <argsstring></argsstring>
        <name>tempPtr</name>
        <initializer>= (float *) ( ( (int) idMatX::temp + 15 ) &amp; ~15 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1976" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="1976" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classid_mat_x_1a4e4f982b680a23f21c664d7980633fba" prot="private" static="yes" mutable="no">
        <type>int</type>
        <definition>int idMatX::tempIndex</definition>
        <argsstring></argsstring>
        <name>tempIndex</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1977" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="1977" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classid_mat_x_1a85fe8a12948feca2de1609d940e55522" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idMatX::idMatX</definition>
        <argsstring>(void)</argsstring>
        <name>idMatX</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1788" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="1994" bodyend="1997"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ab906646d7e012f1032847abbfeaad1ea" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idMatX::idMatX</definition>
        <argsstring>(int rows, int columns)</argsstring>
        <name>idMatX</name>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>columns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1789" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2006" bodyend="2010"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a39323eb7333b2abaf8a088dcfcbbddb1" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idMatX::idMatX</definition>
        <argsstring>(int rows, int columns, float *src)</argsstring>
        <name>idMatX</name>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>columns</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1790" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2012" bodyend="2016"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1af7610b02215a043b09f4ef8f6c009807" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idMatX::~idMatX</definition>
        <argsstring>(void)</argsstring>
        <name>~idMatX</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1791" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="1999" bodyend="2004"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a5936676b1b1530072f1091ebda5250d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::Set</definition>
        <argsstring>(int rows, int columns, const float *src)</argsstring>
        <name>Set</name>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>columns</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1793" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2018" bodyend="2021"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a358ba05d0cbf2a08ef863bfcbf442d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::Set</definition>
        <argsstring>(const idMat3 &amp;m1, const idMat3 &amp;m2)</argsstring>
        <name>Set</name>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1794" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2023" bodyend="2033"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a348d787c075736639ecdb60e1279aed6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::Set</definition>
        <argsstring>(const idMat3 &amp;m1, const idMat3 &amp;m2, const idMat3 &amp;m3, const idMat3 &amp;m4)</argsstring>
        <name>Set</name>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat3" kindref="compound">idMat3</ref> &amp;</type>
          <declname>m4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1795" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2035" bodyend="2047"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a1152e78bcf35a21ca7ff9fffdf24eb6e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const float *</type>
        <definition>ID_INLINE const float * idMatX::operator[]</definition>
        <argsstring>(int index) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1797" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2049" bodyend="2052"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a75ca0f257d42b49ff1ca9dd7804c93bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>ID_INLINE float * idMatX::operator[]</definition>
        <argsstring>(int index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1798" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2054" bodyend="2057"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a474d017fd699f472370da9986aa66e89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
        <definition>ID_INLINE idMatX &amp; idMatX::operator=</definition>
        <argsstring>(const idMatX &amp;a)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1799" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2059" bodyend="2068"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1af6a67034eeb85b3586b8d5ce342cdc89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref></type>
        <definition>ID_INLINE idMatX idMatX::operator*</definition>
        <argsstring>(const float a) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const float</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1800" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2070" bodyend="2084"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a900a84bafcc5a6385542431b4b43efe4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref></type>
        <definition>ID_INLINE idVecX idMatX::operator*</definition>
        <argsstring>(const idVecX &amp;vec) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1801" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2086" bodyend="2098"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1aca735e2446084e6e2cc3a5574d243e9f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref></type>
        <definition>ID_INLINE idMatX idMatX::operator*</definition>
        <argsstring>(const idMatX &amp;a) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1802" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2100" bodyend="2112"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a5d78bc8e39a98c9bac24b03705714e11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref></type>
        <definition>ID_INLINE idMatX idMatX::operator+</definition>
        <argsstring>(const idMatX &amp;a) const </argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1803" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2114" bodyend="2129"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ab20c7bf3a3771561e05a873564720965" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref></type>
        <definition>ID_INLINE idMatX idMatX::operator-</definition>
        <argsstring>(const idMatX &amp;a) const </argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1804" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2131" bodyend="2146"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a459a3b46f3f77a51ed43b44b7541b6c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
        <definition>ID_INLINE idMatX &amp; idMatX::operator*=</definition>
        <argsstring>(const float a)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const float</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1805" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2148" bodyend="2160"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a3f1e596da1bf58a76fce5b3485791a19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
        <definition>ID_INLINE idMatX &amp; idMatX::operator*=</definition>
        <argsstring>(const idMatX &amp;a)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1806" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2162" bodyend="2166"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a923cff031f58a87f77f6dc67f8e743c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
        <definition>ID_INLINE idMatX &amp; idMatX::operator+=</definition>
        <argsstring>(const idMatX &amp;a)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1807" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2168" bodyend="2181"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a5c97a2e5f3c5eab2e1642624a73076e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
        <definition>ID_INLINE idMatX &amp; idMatX::operator-=</definition>
        <argsstring>(const idMatX &amp;a)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1808" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2183" bodyend="2196"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a0a04e873d1af16f7bf017e1c6348658c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idMatX::Compare</definition>
        <argsstring>(const idMatX &amp;a) const </argsstring>
        <name>Compare</name>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1814" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2211" bodyend="2223"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a6e03e79eb1e227a557f778755d1113a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idMatX::Compare</definition>
        <argsstring>(const idMatX &amp;a, const float epsilon) const </argsstring>
        <name>Compare</name>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1815" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2225" bodyend="2237"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a7fccbd4644a375528734b7af1447f162" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idMatX::operator==</definition>
        <argsstring>(const idMatX &amp;a) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1816" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2239" bodyend="2241"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a4b14901507af410bebc039ca8597d74f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idMatX::operator!=</definition>
        <argsstring>(const idMatX &amp;a) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1817" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2243" bodyend="2245"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a4c8904ad2fa1263e1efa817c587eb4b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::SetSize</definition>
        <argsstring>(int rows, int columns)</argsstring>
        <name>SetSize</name>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>columns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1819" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2247" bodyend="2260"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a8e17bcd58380a542d873d2ea673f808a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::ChangeSize</definition>
        <argsstring>(int rows, int columns, bool makeZero=false)</argsstring>
        <name>ChangeSize</name>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>columns</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>makeZero</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1820" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="2948" bodyend="2994"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a743989c5883d1ede92339480d9bb235c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int idMatX::GetNumRows</definition>
        <argsstring>(void) const </argsstring>
        <name>GetNumRows</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1821" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="1821" bodyend="1821"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1acbff703621b5c66b64ddef34ee6d92a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int idMatX::GetNumColumns</definition>
        <argsstring>(void) const </argsstring>
        <name>GetNumColumns</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1822" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="1822" bodyend="1822"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a3f1073036153147c9edad10b40e163af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::SetData</definition>
        <argsstring>(int rows, int columns, float *data)</argsstring>
        <name>SetData</name>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>columns</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1823" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2278" bodyend="2289"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a82be2b1985af56e816e51b38b58d010d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::Zero</definition>
        <argsstring>(void)</argsstring>
        <name>Zero</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1824" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2291" bodyend="2297"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a5711c5e7ef576b9a99bf26a0947488c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::Zero</definition>
        <argsstring>(int rows, int columns)</argsstring>
        <name>Zero</name>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>columns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1825" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2299" bodyend="2306"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a28a098bedc752bdd16e93c2ed1fb1bcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::Identity</definition>
        <argsstring>(void)</argsstring>
        <name>Identity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1826" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2308" bodyend="2318"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1aba5f3961d0ed1d9e7d08c67992e692df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::Identity</definition>
        <argsstring>(int rows, int columns)</argsstring>
        <name>Identity</name>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>columns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1827" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2320" bodyend="2324"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a162aaec83a8f90216443b877e68ca87d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::Diag</definition>
        <argsstring>(const idVecX &amp;v)</argsstring>
        <name>Diag</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1828" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2326" bodyend="2331"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a9a5b7042afbee7ff0377974de380d010" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::Random</definition>
        <argsstring>(int seed, float l=0.0f, float u=1.0f)</argsstring>
        <name>Random</name>
        <param>
          <type>int</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>l</declname>
          <defval>0.0f</defval>
        </param>
        <param>
          <type>float</type>
          <declname>u</declname>
          <defval>1.0f</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1829" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2333" bodyend="2343"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1aabcbd3454dd1cbe4a63115a23d9b3016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::Random</definition>
        <argsstring>(int rows, int columns, int seed, float l=0.0f, float u=1.0f)</argsstring>
        <name>Random</name>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>columns</declname>
        </param>
        <param>
          <type>int</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>l</declname>
          <defval>0.0f</defval>
        </param>
        <param>
          <type>float</type>
          <declname>u</declname>
          <defval>1.0f</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1830" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2345" bodyend="2356"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1abadedb49bd9459b26ffdba3f2e8518ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::Negate</definition>
        <argsstring>(void)</argsstring>
        <name>Negate</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1831" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2358" bodyend="2368"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a985d1dc7733028615bc31c9e11f783f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::Clamp</definition>
        <argsstring>(float min, float max)</argsstring>
        <name>Clamp</name>
        <param>
          <type>float</type>
          <declname>min</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1832" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2370" bodyend="2380"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a8e3ed1dca96930752a88dace2509be3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
        <definition>ID_INLINE idMatX &amp; idMatX::SwapRows</definition>
        <argsstring>(int r1, int r2)</argsstring>
        <name>SwapRows</name>
        <param>
          <type>int</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1833" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2382" bodyend="2391"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a7adb181b9c4c874349fbf6785c5db4b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
        <definition>ID_INLINE idMatX &amp; idMatX::SwapColumns</definition>
        <argsstring>(int r1, int r2)</argsstring>
        <name>SwapColumns</name>
        <param>
          <type>int</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1834" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2393" bodyend="2405"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1aee85f43c7fff36352341a28513645233" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
        <definition>ID_INLINE idMatX &amp; idMatX::SwapRowsColumns</definition>
        <argsstring>(int r1, int r2)</argsstring>
        <name>SwapRowsColumns</name>
        <param>
          <type>int</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1835" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2407" bodyend="2412"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a121bbe0c96674d8591e0b1b0ea2f0fef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
        <definition>idMatX &amp; idMatX::RemoveRow</definition>
        <argsstring>(int r)</argsstring>
        <name>RemoveRow</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1836" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3001" bodyend="3013"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1acc031c6c0410a26adcb56a410ace5c3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
        <definition>idMatX &amp; idMatX::RemoveColumn</definition>
        <argsstring>(int r)</argsstring>
        <name>RemoveColumn</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1837" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3020" bodyend="3033"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a76c8b46fc3daafb84e8215f5a01fe3eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
        <definition>idMatX &amp; idMatX::RemoveRowColumn</definition>
        <argsstring>(int r)</argsstring>
        <name>RemoveRowColumn</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1838" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3040" bodyend="3063"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a31962abd6518b579ef9a85b9443a5200" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::ClearUpperTriangle</definition>
        <argsstring>(void)</argsstring>
        <name>ClearUpperTriangle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1839" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2414" bodyend="2419"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ae854e43c2212692cb5269db301836920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::ClearLowerTriangle</definition>
        <argsstring>(void)</argsstring>
        <name>ClearLowerTriangle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1840" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2421" bodyend="2426"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a7fa1131929e3737bac0fee2fc5368363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::SquareSubMatrix</definition>
        <argsstring>(const idMatX &amp;m, int size)</argsstring>
        <name>SquareSubMatrix</name>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1841" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2428" bodyend="2435"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a6b3777abdb3a1f9e33011dbe0dc2d2ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>ID_INLINE float idMatX::MaxDifference</definition>
        <argsstring>(const idMatX &amp;m) const </argsstring>
        <name>MaxDifference</name>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1842" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2437" bodyend="2453"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1acc7fd07b81549185613d7df6a2abb8e4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::IsSquare</definition>
        <argsstring>(void) const </argsstring>
        <name>IsSquare</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1844" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="1844" bodyend="1844"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ab1233367745a504d8d489a9b17798600" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idMatX::IsZero</definition>
        <argsstring>(const float epsilon=1e-6) const </argsstring>
        <name>IsZero</name>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1845" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2455" bodyend="2465"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a3873ea9d581aef4913add9c977c73359" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idMatX::IsIdentity</definition>
        <argsstring>(const float epsilon=1e-6) const </argsstring>
        <name>IsIdentity</name>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1846" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2467" bodyend="2478"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a3eec11fdcf826d2255a603aa3a791d3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idMatX::IsDiagonal</definition>
        <argsstring>(const float epsilon=1e-6) const </argsstring>
        <name>IsDiagonal</name>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1847" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2480" bodyend="2491"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a932f0a05824a99a816dbaace334f7df7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idMatX::IsTriDiagonal</definition>
        <argsstring>(const float epsilon=1e-6) const </argsstring>
        <name>IsTriDiagonal</name>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1848" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2493" bodyend="2510"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a95c60bfee701cf4d113a9e1e070c9be8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idMatX::IsSymmetric</definition>
        <argsstring>(const float epsilon=1e-6) const </argsstring>
        <name>IsSymmetric</name>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1849" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2512" bodyend="2525"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a526df2a2abd2cd9f5ad03a3f928adb2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::IsOrthogonal</definition>
        <argsstring>(const float epsilon=1e-6) const </argsstring>
        <name>IsOrthogonal</name>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1850" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3072" bodyend="3095"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a960d7ac400dc6d24238cfb3984dca75f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::IsOrthonormal</definition>
        <argsstring>(const float epsilon=1e-6) const </argsstring>
        <name>IsOrthonormal</name>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1851" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3104" bodyend="3137"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ab2bdb19f28ea15d453df560d3c5d7326" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::IsPMatrix</definition>
        <argsstring>(const float epsilon=1e-6) const </argsstring>
        <name>IsPMatrix</name>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1852" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3147" bodyend="3192"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a0d2e05b2baf632c5c0d9b1c54a24e0f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::IsZMatrix</definition>
        <argsstring>(const float epsilon=1e-6) const </argsstring>
        <name>IsZMatrix</name>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1853" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3202" bodyend="3217"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1aaca60e139da4d1834dfd4f715b9ba4dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::IsPositiveDefinite</definition>
        <argsstring>(const float epsilon=1e-6) const </argsstring>
        <name>IsPositiveDefinite</name>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1854" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3227" bodyend="3268"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a710c9a28aa95075589d5bd734bad4c6a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::IsSymmetricPositiveDefinite</definition>
        <argsstring>(const float epsilon=1e-6) const </argsstring>
        <name>IsSymmetricPositiveDefinite</name>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1855" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3277" bodyend="3291"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a13aea6c9d6b89e2dca4c1a031bf46603" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::IsPositiveSemiDefinite</definition>
        <argsstring>(const float epsilon=1e-6) const </argsstring>
        <name>IsPositiveSemiDefinite</name>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1856" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3301" bodyend="3357"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1af7792163d85a58bc87be680fd0593cec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::IsSymmetricPositiveSemiDefinite</definition>
        <argsstring>(const float epsilon=1e-6) const </argsstring>
        <name>IsSymmetricPositiveSemiDefinite</name>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1857" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3366" bodyend="3374"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a20dd471449b447b56b1e878dfcf96a25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>ID_INLINE float idMatX::Trace</definition>
        <argsstring>(void) const </argsstring>
        <name>Trace</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1859" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2527" bodyend="2537"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1acbddbbc7db6cab8a27b52b072ccdf72e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>ID_INLINE float idMatX::Determinant</definition>
        <argsstring>(void) const </argsstring>
        <name>Determinant</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1860" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2539" bodyend="2560"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a1ca3e15166e4e19f4531996b15c5e353" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref></type>
        <definition>ID_INLINE idMatX idMatX::Transpose</definition>
        <argsstring>(void) const </argsstring>
        <name>Transpose</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1861" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2562" bodyend="2575"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a59e85738cf9ef3013b7a7c591609a70c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
        <definition>ID_INLINE idMatX &amp; idMatX::TransposeSelf</definition>
        <argsstring>(void)</argsstring>
        <name>TransposeSelf</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1862" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2577" bodyend="2580"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a54188aae6133912f7bd3fb8c4947bda2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref></type>
        <definition>ID_INLINE idMatX idMatX::Inverse</definition>
        <argsstring>(void) const </argsstring>
        <name>Inverse</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1863" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2582" bodyend="2590"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a18b2847993c1e185489558069dc3c4e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idMatX::InverseSelf</definition>
        <argsstring>(void)</argsstring>
        <name>InverseSelf</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1864" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2592" bodyend="2616"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ae5b4ebdd03aaa73056258de2f5daa9b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref></type>
        <definition>ID_INLINE idMatX idMatX::InverseFast</definition>
        <argsstring>(void) const </argsstring>
        <name>InverseFast</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1865" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2618" bodyend="2626"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ac13502cf5b724a361872fddd065880f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idMatX::InverseFastSelf</definition>
        <argsstring>(void)</argsstring>
        <name>InverseFastSelf</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1866" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2628" bodyend="2653"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a6cec8947073a0ac5b1704647811b2db1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::LowerTriangularInverse</definition>
        <argsstring>(void)</argsstring>
        <name>LowerTriangularInverse</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1868" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3383" bodyend="3403"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a1cad3702406be7f557dd72ada9a6960a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::UpperTriangularInverse</definition>
        <argsstring>(void)</argsstring>
        <name>UpperTriangularInverse</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1869" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3412" bodyend="3432"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a5df118668f2ba85c2675d296ccd7d949" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref></type>
        <definition>ID_INLINE idVecX idMatX::Multiply</definition>
        <argsstring>(const idVecX &amp;vec) const </argsstring>
        <name>Multiply</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1871" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2655" bodyend="2667"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a7859f3d563de6c5d136f519c09a6eab6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref></type>
        <definition>ID_INLINE idVecX idMatX::TransposeMultiply</definition>
        <argsstring>(const idVecX &amp;vec) const </argsstring>
        <name>TransposeMultiply</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1872" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2683" bodyend="2695"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a1baff537415f6520e8b677b136a557e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref></type>
        <definition>ID_INLINE idMatX idMatX::Multiply</definition>
        <argsstring>(const idMatX &amp;a) const </argsstring>
        <name>Multiply</name>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1874" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2669" bodyend="2681"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a9864928d95724aa8679ed416de462eb0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref></type>
        <definition>ID_INLINE idMatX idMatX::TransposeMultiply</definition>
        <argsstring>(const idMatX &amp;a) const </argsstring>
        <name>TransposeMultiply</name>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1875" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2697" bodyend="2709"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a3b7dab81bf5864a8a3540ad7d23b5bfb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::Multiply</definition>
        <argsstring>(idVecX &amp;dst, const idVecX &amp;vec) const </argsstring>
        <name>Multiply</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1877" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2711" bodyend="2731"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1add4dd1f5d7d8eb7c5b93518e3c21dd75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::MultiplyAdd</definition>
        <argsstring>(idVecX &amp;dst, const idVecX &amp;vec) const </argsstring>
        <name>MultiplyAdd</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1878" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2733" bodyend="2753"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a1a3b64f426ad5cd5eae38723e81e6dea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::MultiplySub</definition>
        <argsstring>(idVecX &amp;dst, const idVecX &amp;vec) const </argsstring>
        <name>MultiplySub</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1879" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2755" bodyend="2775"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a74ffe8f0468a329174d20be59a57fab5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::TransposeMultiply</definition>
        <argsstring>(idVecX &amp;dst, const idVecX &amp;vec) const </argsstring>
        <name>TransposeMultiply</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1880" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2777" bodyend="2797"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a62fb54f3dd3638f05a9cee5199402ba7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::TransposeMultiplyAdd</definition>
        <argsstring>(idVecX &amp;dst, const idVecX &amp;vec) const </argsstring>
        <name>TransposeMultiplyAdd</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1881" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2799" bodyend="2819"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1af2a1a2b35f66fdc19bc196e88fd18b9c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::TransposeMultiplySub</definition>
        <argsstring>(idVecX &amp;dst, const idVecX &amp;vec) const </argsstring>
        <name>TransposeMultiplySub</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1882" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2821" bodyend="2841"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a9909d985b8b47c57a46b73ea4ea3aada" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::Multiply</definition>
        <argsstring>(idMatX &amp;dst, const idMatX &amp;a) const </argsstring>
        <name>Multiply</name>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1884" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2843" bodyend="2873"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ae9d108cbf5fb483a273318ba975990d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::TransposeMultiply</definition>
        <argsstring>(idMatX &amp;dst, const idMatX &amp;a) const </argsstring>
        <name>TransposeMultiply</name>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1885" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2875" bodyend="2905"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a8cc2cc7fd8ac2b743fb44dd0adffa378" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>ID_INLINE int idMatX::GetDimension</definition>
        <argsstring>(void) const </argsstring>
        <name>GetDimension</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1887" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2907" bodyend="2909"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1abd498b88e7516ebff3c25f87f3c31f55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classid_vec6" kindref="compound">idVec6</ref> &amp;</type>
        <definition>ID_INLINE const idVec6 &amp; idMatX::SubVec6</definition>
        <argsstring>(int row) const </argsstring>
        <name>SubVec6</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1889" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2911" bodyend="2914"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1aa0697ce915ae49ce4865e01001dbf573" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_vec6" kindref="compound">idVec6</ref> &amp;</type>
        <definition>ID_INLINE idVec6 &amp; idMatX::SubVec6</definition>
        <argsstring>(int row)</argsstring>
        <name>SubVec6</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1890" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2916" bodyend="2919"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a2831ce227490349877e02d707da1a8b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref></type>
        <definition>ID_INLINE const idVecX idMatX::SubVecX</definition>
        <argsstring>(int row) const </argsstring>
        <name>SubVecX</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1891" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2921" bodyend="2926"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a1ff07c512855411aba36af2785c65848" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref></type>
        <definition>ID_INLINE idVecX idMatX::SubVecX</definition>
        <argsstring>(int row)</argsstring>
        <name>SubVecX</name>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1892" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2928" bodyend="2933"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ac504cd8be3eb563a258b95b4647d8e95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const float *</type>
        <definition>ID_INLINE const float * idMatX::ToFloatPtr</definition>
        <argsstring>(void) const </argsstring>
        <name>ToFloatPtr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1893" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2935" bodyend="2937"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1aeea8af35a97f78d71708829878cbb522" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>ID_INLINE float * idMatX::ToFloatPtr</definition>
        <argsstring>(void)</argsstring>
        <name>ToFloatPtr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1894" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2939" bodyend="2941"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a244c246cf8009569bec4712e595424c4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * idMatX::ToString</definition>
        <argsstring>(int precision=2) const </argsstring>
        <name>ToString</name>
        <param>
          <type>int</type>
          <declname>precision</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1895" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3439" bodyend="3441"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a69f45e2484a00c97004b95cc3472bc0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::Update_RankOne</definition>
        <argsstring>(const idVecX &amp;v, const idVecX &amp;w, float alpha)</argsstring>
        <name>Update_RankOne</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1897" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3450" bodyend="3463"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a08d350fc2a12d150f1057d5c18a5e541" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::Update_RankOneSymmetric</definition>
        <argsstring>(const idVecX &amp;v, float alpha)</argsstring>
        <name>Update_RankOneSymmetric</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1898" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3472" bodyend="3485"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1aec3ef0d6201c4d2a18e45d8b8abcd8ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::Update_RowColumn</definition>
        <argsstring>(const idVecX &amp;v, const idVecX &amp;w, int r)</argsstring>
        <name>Update_RowColumn</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1899" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3500" bodyend="3513"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1aa18fe0b38b69cca28d0b7e2f267cc0b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::Update_RowColumnSymmetric</definition>
        <argsstring>(const idVecX &amp;v, int r)</argsstring>
        <name>Update_RowColumnSymmetric</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1900" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3528" bodyend="3543"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1af2bca263920f9819f11179fdb286e1b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::Update_Increment</definition>
        <argsstring>(const idVecX &amp;v, const idVecX &amp;w)</argsstring>
        <name>Update_Increment</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1901" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3557" bodyend="3572"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1acf1e29ee5cd88ee4b4f25e43bf4b6493" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::Update_IncrementSymmetric</definition>
        <argsstring>(const idVecX &amp;v)</argsstring>
        <name>Update_IncrementSymmetric</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1902" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3586" bodyend="3600"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1af771fd36d1d216f12bac9e171e3024ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::Update_Decrement</definition>
        <argsstring>(int r)</argsstring>
        <name>Update_Decrement</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1903" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3609" bodyend="3611"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a89b63188c09b530facc5be4843f8a89f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::Inverse_GaussJordan</definition>
        <argsstring>(void)</argsstring>
        <name>Inverse_GaussJordan</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1905" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3620" bodyend="3700"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a593f518901dd370502ff777f87291c4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::Inverse_UpdateRankOne</definition>
        <argsstring>(const idVecX &amp;v, const idVecX &amp;w, float alpha)</argsstring>
        <name>Inverse_UpdateRankOne</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1906" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3709" bodyend="3738"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a89bd9a4cd73ced0b977c1b24d7123371" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::Inverse_UpdateRowColumn</definition>
        <argsstring>(const idVecX &amp;v, const idVecX &amp;w, int r)</argsstring>
        <name>Inverse_UpdateRowColumn</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1907" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3753" bodyend="3773"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ae841a3407878fac05e9c4c90d5a6a9d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::Inverse_UpdateIncrement</definition>
        <argsstring>(const idVecX &amp;v, const idVecX &amp;w)</argsstring>
        <name>Inverse_UpdateIncrement</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1908" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3787" bodyend="3802"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a4f47aadd4f1a54067ad5a98cec5182f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::Inverse_UpdateDecrement</definition>
        <argsstring>(const idVecX &amp;v, const idVecX &amp;w, int r)</argsstring>
        <name>Inverse_UpdateDecrement</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1909" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3812" bodyend="3837"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a1164f3cf44389bdf2dfc19107acde199" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::Inverse_Solve</definition>
        <argsstring>(idVecX &amp;x, const idVecX &amp;b) const </argsstring>
        <name>Inverse_Solve</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1910" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3846" bodyend="3848"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a41e56023862cac7c6eb41fb99fd6fcae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::LU_Factor</definition>
        <argsstring>(int *index, float *det=NULL)</argsstring>
        <name>LU_Factor</name>
        <param>
          <type>int *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>det</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1912" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3863" bodyend="3938"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a1a015c0e649e4eb3a64d5664e0aedc8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::LU_UpdateRankOne</definition>
        <argsstring>(const idVecX &amp;v, const idVecX &amp;w, float alpha, int *index)</argsstring>
        <name>LU_UpdateRankOne</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1913" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="3947" bodyend="4007"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1aec356cf93f3b26ec3d4319313e533dae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::LU_UpdateRowColumn</definition>
        <argsstring>(const idVecX &amp;v, const idVecX &amp;w, int r, int *index)</argsstring>
        <name>LU_UpdateRowColumn</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1914" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="4022" bodyend="4156"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a186b55db155c341d14a88edf8fa97585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::LU_UpdateIncrement</definition>
        <argsstring>(const idVecX &amp;v, const idVecX &amp;w, int *index)</argsstring>
        <name>LU_UpdateIncrement</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1915" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="4170" bodyend="4208"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a44385cf8dceeeaba76792b5e24e0757f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::LU_UpdateDecrement</definition>
        <argsstring>(const idVecX &amp;v, const idVecX &amp;w, const idVecX &amp;u, int r, int *index)</argsstring>
        <name>LU_UpdateDecrement</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1916" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="4219" bodyend="4299"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ad1e9ed88c569c8ae18a467d1e6d82527" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::LU_Solve</definition>
        <argsstring>(idVecX &amp;x, const idVecX &amp;b, const int *index) const </argsstring>
        <name>LU_Solve</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1917" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="4308" bodyend="4335"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a19e95aa016278a63572b4af78b34b38f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::LU_Inverse</definition>
        <argsstring>(idMatX &amp;inv, const int *index) const </argsstring>
        <name>LU_Inverse</name>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>inv</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1918" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="4344" bodyend="4364"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1afd3d819b982e647f7c3098d8abfdc215" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::LU_UnpackFactors</definition>
        <argsstring>(idMatX &amp;L, idMatX &amp;U) const </argsstring>
        <name>LU_UnpackFactors</name>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>L</declname>
        </param>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>U</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1919" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="4373" bodyend="4387"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a39770fff56219274737cb949e715404e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::LU_MultiplyFactors</definition>
        <argsstring>(idMatX &amp;m, const int *index) const </argsstring>
        <name>LU_MultiplyFactors</name>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1920" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="4396" bodyend="4423"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a7cf2303c30fbd35c885c07b80992b0d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::QR_Factor</definition>
        <argsstring>(idVecX &amp;c, idVecX &amp;d)</argsstring>
        <name>QR_Factor</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1922" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="4435" bodyend="4495"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1af5dcd76e4854936e05d8504b5f50ee97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::QR_UpdateRankOne</definition>
        <argsstring>(idMatX &amp;R, const idVecX &amp;v, const idVecX &amp;w, float alpha)</argsstring>
        <name>QR_UpdateRankOne</name>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1923" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="4547" bodyend="4583"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a79199e9b996cf0233ad8f47f14f3f1a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::QR_UpdateRowColumn</definition>
        <argsstring>(idMatX &amp;R, const idVecX &amp;v, const idVecX &amp;w, int r)</argsstring>
        <name>QR_UpdateRowColumn</name>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1924" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="4598" bodyend="4617"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a0457cfa90bef06c09f3b89fc52acc34f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::QR_UpdateIncrement</definition>
        <argsstring>(idMatX &amp;R, const idVecX &amp;v, const idVecX &amp;w)</argsstring>
        <name>QR_UpdateIncrement</name>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1925" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="4631" bodyend="4649"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a8b8e48bc47f59ff4b8c07db7115ac3df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::QR_UpdateDecrement</definition>
        <argsstring>(idMatX &amp;R, const idVecX &amp;v, const idVecX &amp;w, int r)</argsstring>
        <name>QR_UpdateDecrement</name>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1926" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="4659" bodyend="4685"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ad5ccdf1511ca6b0eae8aedb2cce455e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::QR_Solve</definition>
        <argsstring>(idVecX &amp;x, const idVecX &amp;b, const idVecX &amp;c, const idVecX &amp;d) const </argsstring>
        <name>QR_Solve</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1927" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="4694" bodyend="4728"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ad0924af69ca3122b294eac4ec3d92c67" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::QR_Solve</definition>
        <argsstring>(idVecX &amp;x, const idVecX &amp;b, const idMatX &amp;R) const </argsstring>
        <name>QR_Solve</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1928" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="4737" bodyend="4755"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ad9165ca3b1d8be25da862c85541460b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::QR_Inverse</definition>
        <argsstring>(idMatX &amp;inv, const idVecX &amp;c, const idVecX &amp;d) const </argsstring>
        <name>QR_Inverse</name>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>inv</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1929" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="4764" bodyend="4784"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ac6d5371ed88a6f9a23b3532f741601f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::QR_UnpackFactors</definition>
        <argsstring>(idMatX &amp;Q, idMatX &amp;R, const idVecX &amp;c, const idVecX &amp;d) const </argsstring>
        <name>QR_UnpackFactors</name>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>Q</declname>
        </param>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1930" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="4793" bodyend="4821"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a3973ccc9ec066a94873b66be52625eaf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::QR_MultiplyFactors</definition>
        <argsstring>(idMatX &amp;m, const idVecX &amp;c, const idVecX &amp;d) const </argsstring>
        <name>QR_MultiplyFactors</name>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1931" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="4830" bodyend="4861"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a8afef89783a2d59e35824d09a3cb83e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::SVD_Factor</definition>
        <argsstring>(idVecX &amp;w, idMatX &amp;V)</argsstring>
        <name>SVD_Factor</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1933" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="5057" bodyend="5176"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a23bcc383dbbe8e3c92d11aff18a731c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::SVD_Solve</definition>
        <argsstring>(idVecX &amp;x, const idVecX &amp;b, const idVecX &amp;w, const idMatX &amp;V) const </argsstring>
        <name>SVD_Solve</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1934" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="5185" bodyend="5214"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a7c5204aba0be3e1fcb6fc73c599a7494" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::SVD_Inverse</definition>
        <argsstring>(idMatX &amp;inv, const idVecX &amp;w, const idMatX &amp;V) const </argsstring>
        <name>SVD_Inverse</name>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>inv</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1935" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="5223" bodyend="5251"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1aef3d4b5a665930379994e1d37a8e0de2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::SVD_MultiplyFactors</definition>
        <argsstring>(idMatX &amp;m, const idVecX &amp;w, const idMatX &amp;V) const </argsstring>
        <name>SVD_MultiplyFactors</name>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1936" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="5260" bodyend="5282"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ad7d7f8ca3cf2892ae7f92947e4d37b46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::Cholesky_Factor</definition>
        <argsstring>(void)</argsstring>
        <name>Cholesky_Factor</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1938" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="5294" bodyend="5327"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a1729b4db7ae085eeed7d81287883ae93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::Cholesky_UpdateRankOne</definition>
        <argsstring>(const idVecX &amp;v, float alpha, int offset=0)</argsstring>
        <name>Cholesky_UpdateRankOne</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1939" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="5337" bodyend="5377"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ad20f1e15cd546094ed0db3f95b2199b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::Cholesky_UpdateRowColumn</definition>
        <argsstring>(const idVecX &amp;v, int r)</argsstring>
        <name>Cholesky_UpdateRowColumn</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1940" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="5392" bodyend="5560"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a89949a547570992da8af73c02e18d757" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::Cholesky_UpdateIncrement</definition>
        <argsstring>(const idVecX &amp;v)</argsstring>
        <name>Cholesky_UpdateIncrement</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1941" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="5574" bodyend="5610"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a84070a60b7849dad6de5b9cbd71d8862" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::Cholesky_UpdateDecrement</definition>
        <argsstring>(const idVecX &amp;v, int r)</argsstring>
        <name>Cholesky_UpdateDecrement</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1942" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="5620" bodyend="5648"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a9428a337f50a68b9832383447dfc8b3f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::Cholesky_Solve</definition>
        <argsstring>(idVecX &amp;x, const idVecX &amp;b) const </argsstring>
        <name>Cholesky_Solve</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1943" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="5657" bodyend="5681"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ae5bcd94e93090452d5333efcc5e0ecbf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::Cholesky_Inverse</definition>
        <argsstring>(idMatX &amp;inv) const </argsstring>
        <name>Cholesky_Inverse</name>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>inv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1944" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="5690" bodyend="5710"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ad5ef4b9b07825968c301ab6912e6be05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::Cholesky_MultiplyFactors</definition>
        <argsstring>(idMatX &amp;m) const </argsstring>
        <name>Cholesky_MultiplyFactors</name>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1945" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="5719" bodyend="5736"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a1ebe3e8a15569d405ed08adbb9d912d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::LDLT_Factor</definition>
        <argsstring>(void)</argsstring>
        <name>LDLT_Factor</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1947" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="5750" bodyend="5785"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a8494d21124cf46aae40cabaaecbee11a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::LDLT_UpdateRankOne</definition>
        <argsstring>(const idVecX &amp;v, float alpha, int offset=0)</argsstring>
        <name>LDLT_UpdateRankOne</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1948" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="5795" bodyend="5832"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a4bf61725545146da00d949a87fe6a129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::LDLT_UpdateRowColumn</definition>
        <argsstring>(const idVecX &amp;v, int r)</argsstring>
        <name>LDLT_UpdateRowColumn</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1949" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="5847" bodyend="6027"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a3e9e33921fa27a74efdeaf266bf5fce3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::LDLT_UpdateIncrement</definition>
        <argsstring>(const idVecX &amp;v)</argsstring>
        <name>LDLT_UpdateIncrement</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1950" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="6041" bodyend="6077"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a078faad3901c28afced9a8239df04f43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::LDLT_UpdateDecrement</definition>
        <argsstring>(const idVecX &amp;v, int r)</argsstring>
        <name>LDLT_UpdateDecrement</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1951" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="6087" bodyend="6115"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a1b7d7b6a655e9bf6f3ff5a1b621d4792" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::LDLT_Solve</definition>
        <argsstring>(idVecX &amp;x, const idVecX &amp;b) const </argsstring>
        <name>LDLT_Solve</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1952" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="6124" bodyend="6153"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a324c91aec7b195af143f189026bdd74c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::LDLT_Inverse</definition>
        <argsstring>(idMatX &amp;inv) const </argsstring>
        <name>LDLT_Inverse</name>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>inv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1953" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="6162" bodyend="6182"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a9709ec29e72ca587c9e3e623b14342eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::LDLT_UnpackFactors</definition>
        <argsstring>(idMatX &amp;L, idMatX &amp;D) const </argsstring>
        <name>LDLT_UnpackFactors</name>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>L</declname>
        </param>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>D</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1954" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="6191" bodyend="6203"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ae65fe1b9f4d656a2491017a9b29c8873" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::LDLT_MultiplyFactors</definition>
        <argsstring>(idMatX &amp;m) const </argsstring>
        <name>LDLT_MultiplyFactors</name>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1955" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="6212" bodyend="6240"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a61d6323ddfc0ee28bfb5265c0fee3885" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::TriDiagonal_ClearTriangles</definition>
        <argsstring>(void)</argsstring>
        <name>TriDiagonal_ClearTriangles</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1957" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="6247" bodyend="6257"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a0dc010ac878a5a8254ea471953f32485" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::TriDiagonal_Solve</definition>
        <argsstring>(idVecX &amp;x, const idVecX &amp;b) const </argsstring>
        <name>TriDiagonal_Solve</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1958" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="6266" bodyend="6295"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a7f9ad090e0c688e280ec381438d8a501" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::TriDiagonal_Inverse</definition>
        <argsstring>(idMatX &amp;inv) const </argsstring>
        <name>TriDiagonal_Inverse</name>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>inv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1959" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="6304" bodyend="6324"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a6953177cd5a40143a4c360ac4fdb0afa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::Eigen_SolveSymmetricTriDiagonal</definition>
        <argsstring>(idVecX &amp;eigenValues)</argsstring>
        <name>Eigen_SolveSymmetricTriDiagonal</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>eigenValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1961" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="6520" bodyend="6538"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a75aa00a4b80cab95547c72991e3c10c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::Eigen_SolveSymmetric</definition>
        <argsstring>(idVecX &amp;eigenValues)</argsstring>
        <name>Eigen_SolveSymmetric</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>eigenValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1962" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="6550" bodyend="6560"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ae96c99429be67494fc91cd7380acabaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::Eigen_Solve</definition>
        <argsstring>(idVecX &amp;realEigenValues, idVecX &amp;imaginaryEigenValues)</argsstring>
        <name>Eigen_Solve</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>realEigenValues</declname>
        </param>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>imaginaryEigenValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1963" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="7066" bodyend="7081"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1aa1721262db2695082966073846f81546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::Eigen_SortIncreasing</definition>
        <argsstring>(idVecX &amp;eigenValues)</argsstring>
        <name>Eigen_SortIncreasing</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>eigenValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1964" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="7088" bodyend="7106"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1afb4c188ee493cea37982f83b700fcc08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::Eigen_SortDecreasing</definition>
        <argsstring>(idVecX &amp;eigenValues)</argsstring>
        <name>Eigen_SortDecreasing</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>eigenValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1965" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="7113" bodyend="7131"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classid_mat_x_1a96a93003e371e0333bd87936bc731f33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classid_mat_x" kindref="compound">idMatX</ref></type>
        <definition>idMatX operator*</definition>
        <argsstring>(const float a, const idMatX &amp;m)</argsstring>
        <name>operator*</name>
        <param>
          <type>const float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1810" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2198" bodyend="2200"/>
      </memberdef>
      <memberdef kind="friend" id="classid_mat_x_1a69826ba2a5e8bc798fb384b3e96648fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classid_vec_x" kindref="compound">idVecX</ref></type>
        <definition>idVecX operator*</definition>
        <argsstring>(const idVecX &amp;vec, const idMatX &amp;m)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1811" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2202" bodyend="2204"/>
      </memberdef>
      <memberdef kind="friend" id="classid_mat_x_1a2376b184d52f5da813e81001ddcab441" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
        <definition>idVecX&amp; operator*=</definition>
        <argsstring>(idVecX &amp;vec, const idMatX &amp;m)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1812" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2206" bodyend="2209"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classid_mat_x_1a03b1f8bf76a787ad3ada7e7e7aa014c0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::Test</definition>
        <argsstring>(void)</argsstring>
        <name>Test</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1967" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="7193" bodyend="8102"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classid_mat_x_1a413b08026ee52c44163638140fe9a7c5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idMatX::SetTempSize</definition>
        <argsstring>(int rows, int columns)</argsstring>
        <name>SetTempSize</name>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>columns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1980" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="2262" bodyend="2276"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ae6dc2de6d02a9bcb99e4dce00de1d9a1" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float idMatX::DeterminantGeneric</definition>
        <argsstring>(void) const </argsstring>
        <name>DeterminantGeneric</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1981" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="7138" bodyend="7152"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a541352eafb9737bbff49cc8842003a4b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::InverseSelfGeneric</definition>
        <argsstring>(void)</argsstring>
        <name>InverseSelfGeneric</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1982" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="7159" bodyend="7186"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a4a17a18148b99b807c8417a507d584c1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::QR_Rotate</definition>
        <argsstring>(idMatX &amp;R, int i, float a, float b)</argsstring>
        <name>QR_Rotate</name>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1983" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="4504" bodyend="4538"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a0ab17b48e781078434be0287c8062472" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float idMatX::Pythag</definition>
        <argsstring>(float a, float b) const </argsstring>
        <name>Pythag</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1984" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="4870" bodyend="4886"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1aeed229c1bb81c77f7723985ba625a99f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::SVD_BiDiag</definition>
        <argsstring>(idVecX &amp;w, idVecX &amp;rv1, float &amp;anorm)</argsstring>
        <name>SVD_BiDiag</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>rv1</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>anorm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1985" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="4893" bodyend="4976"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a43d307b6d6d074f1aab743e889828076" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::SVD_InitialWV</definition>
        <argsstring>(idVecX &amp;w, idMatX &amp;V, idVecX &amp;rv1)</argsstring>
        <name>SVD_InitialWV</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>rv1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1986" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="4983" bodyend="5044"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ac85685c96808b28b6bbe6d401597e9f5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::HouseholderReduction</definition>
        <argsstring>(idVecX &amp;diag, idVecX &amp;subd)</argsstring>
        <name>HouseholderReduction</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>diag</declname>
        </param>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>subd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1987" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="6337" bodyend="6429"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1ae602ec1d0deef3845e9c1f5e3d19605d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::QL</definition>
        <argsstring>(idVecX &amp;diag, idVecX &amp;subd)</argsstring>
        <name>QL</name>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>diag</declname>
        </param>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>subd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1988" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="6442" bodyend="6508"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a14aec9099e3ab0e2b3eddfb6715a5f90" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::HessenbergReduction</definition>
        <argsstring>(idMatX &amp;H)</argsstring>
        <name>HessenbergReduction</name>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>H</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1989" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="6569" bodyend="6647"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1aa3ffd04b7c118fd0de0bd12bc46abc6c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idMatX::ComplexDivision</definition>
        <argsstring>(float xr, float xi, float yr, float yi, float &amp;cdivr, float &amp;cdivi)</argsstring>
        <name>ComplexDivision</name>
        <param>
          <type>float</type>
          <declname>xr</declname>
        </param>
        <param>
          <type>float</type>
          <declname>xi</declname>
        </param>
        <param>
          <type>float</type>
          <declname>yr</declname>
        </param>
        <param>
          <type>float</type>
          <declname>yi</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>cdivr</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>cdivi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1990" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="6656" bodyend="6669"/>
      </memberdef>
      <memberdef kind="function" id="classid_mat_x_1a65e7819177ac92dca090b12a8fb94731" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idMatX::HessenbergToRealSchur</definition>
        <argsstring>(idMatX &amp;H, idVecX &amp;realEigenValues, idVecX &amp;imaginaryEigenValues)</argsstring>
        <name>HessenbergToRealSchur</name>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>H</declname>
        </param>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>realEigenValues</declname>
        </param>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>imaginaryEigenValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1991" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.cpp" bodystart="6678" bodyend="7055"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" line="1786" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Matrix.h" bodystart="1786" bodyend="1992"/>
    <listofallmembers>
      <member refid="classid_mat_x_1a5a9ccd8ad48162a7663a0e9b311a3764" prot="private" virt="non-virtual"><scope>idMatX</scope><name>alloced</name></member>
      <member refid="classid_mat_x_1a8e17bcd58380a542d873d2ea673f808a" prot="public" virt="non-virtual"><scope>idMatX</scope><name>ChangeSize</name></member>
      <member refid="classid_mat_x_1ad7d7f8ca3cf2892ae7f92947e4d37b46" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Cholesky_Factor</name></member>
      <member refid="classid_mat_x_1ae5bcd94e93090452d5333efcc5e0ecbf" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Cholesky_Inverse</name></member>
      <member refid="classid_mat_x_1ad5ef4b9b07825968c301ab6912e6be05" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Cholesky_MultiplyFactors</name></member>
      <member refid="classid_mat_x_1a9428a337f50a68b9832383447dfc8b3f" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Cholesky_Solve</name></member>
      <member refid="classid_mat_x_1a84070a60b7849dad6de5b9cbd71d8862" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Cholesky_UpdateDecrement</name></member>
      <member refid="classid_mat_x_1a89949a547570992da8af73c02e18d757" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Cholesky_UpdateIncrement</name></member>
      <member refid="classid_mat_x_1a1729b4db7ae085eeed7d81287883ae93" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Cholesky_UpdateRankOne</name></member>
      <member refid="classid_mat_x_1ad20f1e15cd546094ed0db3f95b2199b0" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Cholesky_UpdateRowColumn</name></member>
      <member refid="classid_mat_x_1a985d1dc7733028615bc31c9e11f783f7" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Clamp</name></member>
      <member refid="classid_mat_x_1ae854e43c2212692cb5269db301836920" prot="public" virt="non-virtual"><scope>idMatX</scope><name>ClearLowerTriangle</name></member>
      <member refid="classid_mat_x_1a31962abd6518b579ef9a85b9443a5200" prot="public" virt="non-virtual"><scope>idMatX</scope><name>ClearUpperTriangle</name></member>
      <member refid="classid_mat_x_1a0a04e873d1af16f7bf017e1c6348658c" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Compare</name></member>
      <member refid="classid_mat_x_1a6e03e79eb1e227a557f778755d1113a1" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Compare</name></member>
      <member refid="classid_mat_x_1aa3ffd04b7c118fd0de0bd12bc46abc6c" prot="private" virt="non-virtual"><scope>idMatX</scope><name>ComplexDivision</name></member>
      <member refid="classid_mat_x_1acbddbbc7db6cab8a27b52b072ccdf72e" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Determinant</name></member>
      <member refid="classid_mat_x_1ae6dc2de6d02a9bcb99e4dce00de1d9a1" prot="private" virt="non-virtual"><scope>idMatX</scope><name>DeterminantGeneric</name></member>
      <member refid="classid_mat_x_1a162aaec83a8f90216443b877e68ca87d" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Diag</name></member>
      <member refid="classid_mat_x_1ae96c99429be67494fc91cd7380acabaf" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Eigen_Solve</name></member>
      <member refid="classid_mat_x_1a75aa00a4b80cab95547c72991e3c10c8" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Eigen_SolveSymmetric</name></member>
      <member refid="classid_mat_x_1a6953177cd5a40143a4c360ac4fdb0afa" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Eigen_SolveSymmetricTriDiagonal</name></member>
      <member refid="classid_mat_x_1afb4c188ee493cea37982f83b700fcc08" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Eigen_SortDecreasing</name></member>
      <member refid="classid_mat_x_1aa1721262db2695082966073846f81546" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Eigen_SortIncreasing</name></member>
      <member refid="classid_mat_x_1a8cc2cc7fd8ac2b743fb44dd0adffa378" prot="public" virt="non-virtual"><scope>idMatX</scope><name>GetDimension</name></member>
      <member refid="classid_mat_x_1acbff703621b5c66b64ddef34ee6d92a9" prot="public" virt="non-virtual"><scope>idMatX</scope><name>GetNumColumns</name></member>
      <member refid="classid_mat_x_1a743989c5883d1ede92339480d9bb235c" prot="public" virt="non-virtual"><scope>idMatX</scope><name>GetNumRows</name></member>
      <member refid="classid_mat_x_1a14aec9099e3ab0e2b3eddfb6715a5f90" prot="private" virt="non-virtual"><scope>idMatX</scope><name>HessenbergReduction</name></member>
      <member refid="classid_mat_x_1a65e7819177ac92dca090b12a8fb94731" prot="private" virt="non-virtual"><scope>idMatX</scope><name>HessenbergToRealSchur</name></member>
      <member refid="classid_mat_x_1ac85685c96808b28b6bbe6d401597e9f5" prot="private" virt="non-virtual"><scope>idMatX</scope><name>HouseholderReduction</name></member>
      <member refid="classid_mat_x_1a28a098bedc752bdd16e93c2ed1fb1bcd" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Identity</name></member>
      <member refid="classid_mat_x_1aba5f3961d0ed1d9e7d08c67992e692df" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Identity</name></member>
      <member refid="classid_mat_x_1a85fe8a12948feca2de1609d940e55522" prot="public" virt="non-virtual"><scope>idMatX</scope><name>idMatX</name></member>
      <member refid="classid_mat_x_1ab906646d7e012f1032847abbfeaad1ea" prot="public" virt="non-virtual"><scope>idMatX</scope><name>idMatX</name></member>
      <member refid="classid_mat_x_1a39323eb7333b2abaf8a088dcfcbbddb1" prot="public" virt="non-virtual"><scope>idMatX</scope><name>idMatX</name></member>
      <member refid="classid_mat_x_1a54188aae6133912f7bd3fb8c4947bda2" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Inverse</name></member>
      <member refid="classid_mat_x_1a89b63188c09b530facc5be4843f8a89f" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Inverse_GaussJordan</name></member>
      <member refid="classid_mat_x_1a1164f3cf44389bdf2dfc19107acde199" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Inverse_Solve</name></member>
      <member refid="classid_mat_x_1a4f47aadd4f1a54067ad5a98cec5182f3" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Inverse_UpdateDecrement</name></member>
      <member refid="classid_mat_x_1ae841a3407878fac05e9c4c90d5a6a9d5" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Inverse_UpdateIncrement</name></member>
      <member refid="classid_mat_x_1a593f518901dd370502ff777f87291c4d" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Inverse_UpdateRankOne</name></member>
      <member refid="classid_mat_x_1a89bd9a4cd73ced0b977c1b24d7123371" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Inverse_UpdateRowColumn</name></member>
      <member refid="classid_mat_x_1ae5b4ebdd03aaa73056258de2f5daa9b8" prot="public" virt="non-virtual"><scope>idMatX</scope><name>InverseFast</name></member>
      <member refid="classid_mat_x_1ac13502cf5b724a361872fddd065880f1" prot="public" virt="non-virtual"><scope>idMatX</scope><name>InverseFastSelf</name></member>
      <member refid="classid_mat_x_1a18b2847993c1e185489558069dc3c4e5" prot="public" virt="non-virtual"><scope>idMatX</scope><name>InverseSelf</name></member>
      <member refid="classid_mat_x_1a541352eafb9737bbff49cc8842003a4b" prot="private" virt="non-virtual"><scope>idMatX</scope><name>InverseSelfGeneric</name></member>
      <member refid="classid_mat_x_1a3eec11fdcf826d2255a603aa3a791d3d" prot="public" virt="non-virtual"><scope>idMatX</scope><name>IsDiagonal</name></member>
      <member refid="classid_mat_x_1a3873ea9d581aef4913add9c977c73359" prot="public" virt="non-virtual"><scope>idMatX</scope><name>IsIdentity</name></member>
      <member refid="classid_mat_x_1a526df2a2abd2cd9f5ad03a3f928adb2c" prot="public" virt="non-virtual"><scope>idMatX</scope><name>IsOrthogonal</name></member>
      <member refid="classid_mat_x_1a960d7ac400dc6d24238cfb3984dca75f" prot="public" virt="non-virtual"><scope>idMatX</scope><name>IsOrthonormal</name></member>
      <member refid="classid_mat_x_1ab2bdb19f28ea15d453df560d3c5d7326" prot="public" virt="non-virtual"><scope>idMatX</scope><name>IsPMatrix</name></member>
      <member refid="classid_mat_x_1aaca60e139da4d1834dfd4f715b9ba4dd" prot="public" virt="non-virtual"><scope>idMatX</scope><name>IsPositiveDefinite</name></member>
      <member refid="classid_mat_x_1a13aea6c9d6b89e2dca4c1a031bf46603" prot="public" virt="non-virtual"><scope>idMatX</scope><name>IsPositiveSemiDefinite</name></member>
      <member refid="classid_mat_x_1acc7fd07b81549185613d7df6a2abb8e4" prot="public" virt="non-virtual"><scope>idMatX</scope><name>IsSquare</name></member>
      <member refid="classid_mat_x_1a95c60bfee701cf4d113a9e1e070c9be8" prot="public" virt="non-virtual"><scope>idMatX</scope><name>IsSymmetric</name></member>
      <member refid="classid_mat_x_1a710c9a28aa95075589d5bd734bad4c6a" prot="public" virt="non-virtual"><scope>idMatX</scope><name>IsSymmetricPositiveDefinite</name></member>
      <member refid="classid_mat_x_1af7792163d85a58bc87be680fd0593cec" prot="public" virt="non-virtual"><scope>idMatX</scope><name>IsSymmetricPositiveSemiDefinite</name></member>
      <member refid="classid_mat_x_1a932f0a05824a99a816dbaace334f7df7" prot="public" virt="non-virtual"><scope>idMatX</scope><name>IsTriDiagonal</name></member>
      <member refid="classid_mat_x_1ab1233367745a504d8d489a9b17798600" prot="public" virt="non-virtual"><scope>idMatX</scope><name>IsZero</name></member>
      <member refid="classid_mat_x_1a0d2e05b2baf632c5c0d9b1c54a24e0f1" prot="public" virt="non-virtual"><scope>idMatX</scope><name>IsZMatrix</name></member>
      <member refid="classid_mat_x_1a1ebe3e8a15569d405ed08adbb9d912d9" prot="public" virt="non-virtual"><scope>idMatX</scope><name>LDLT_Factor</name></member>
      <member refid="classid_mat_x_1a324c91aec7b195af143f189026bdd74c" prot="public" virt="non-virtual"><scope>idMatX</scope><name>LDLT_Inverse</name></member>
      <member refid="classid_mat_x_1ae65fe1b9f4d656a2491017a9b29c8873" prot="public" virt="non-virtual"><scope>idMatX</scope><name>LDLT_MultiplyFactors</name></member>
      <member refid="classid_mat_x_1a1b7d7b6a655e9bf6f3ff5a1b621d4792" prot="public" virt="non-virtual"><scope>idMatX</scope><name>LDLT_Solve</name></member>
      <member refid="classid_mat_x_1a9709ec29e72ca587c9e3e623b14342eb" prot="public" virt="non-virtual"><scope>idMatX</scope><name>LDLT_UnpackFactors</name></member>
      <member refid="classid_mat_x_1a078faad3901c28afced9a8239df04f43" prot="public" virt="non-virtual"><scope>idMatX</scope><name>LDLT_UpdateDecrement</name></member>
      <member refid="classid_mat_x_1a3e9e33921fa27a74efdeaf266bf5fce3" prot="public" virt="non-virtual"><scope>idMatX</scope><name>LDLT_UpdateIncrement</name></member>
      <member refid="classid_mat_x_1a8494d21124cf46aae40cabaaecbee11a" prot="public" virt="non-virtual"><scope>idMatX</scope><name>LDLT_UpdateRankOne</name></member>
      <member refid="classid_mat_x_1a4bf61725545146da00d949a87fe6a129" prot="public" virt="non-virtual"><scope>idMatX</scope><name>LDLT_UpdateRowColumn</name></member>
      <member refid="classid_mat_x_1a6cec8947073a0ac5b1704647811b2db1" prot="public" virt="non-virtual"><scope>idMatX</scope><name>LowerTriangularInverse</name></member>
      <member refid="classid_mat_x_1a41e56023862cac7c6eb41fb99fd6fcae" prot="public" virt="non-virtual"><scope>idMatX</scope><name>LU_Factor</name></member>
      <member refid="classid_mat_x_1a19e95aa016278a63572b4af78b34b38f" prot="public" virt="non-virtual"><scope>idMatX</scope><name>LU_Inverse</name></member>
      <member refid="classid_mat_x_1a39770fff56219274737cb949e715404e" prot="public" virt="non-virtual"><scope>idMatX</scope><name>LU_MultiplyFactors</name></member>
      <member refid="classid_mat_x_1ad1e9ed88c569c8ae18a467d1e6d82527" prot="public" virt="non-virtual"><scope>idMatX</scope><name>LU_Solve</name></member>
      <member refid="classid_mat_x_1afd3d819b982e647f7c3098d8abfdc215" prot="public" virt="non-virtual"><scope>idMatX</scope><name>LU_UnpackFactors</name></member>
      <member refid="classid_mat_x_1a44385cf8dceeeaba76792b5e24e0757f" prot="public" virt="non-virtual"><scope>idMatX</scope><name>LU_UpdateDecrement</name></member>
      <member refid="classid_mat_x_1a186b55db155c341d14a88edf8fa97585" prot="public" virt="non-virtual"><scope>idMatX</scope><name>LU_UpdateIncrement</name></member>
      <member refid="classid_mat_x_1a1a015c0e649e4eb3a64d5664e0aedc8f" prot="public" virt="non-virtual"><scope>idMatX</scope><name>LU_UpdateRankOne</name></member>
      <member refid="classid_mat_x_1aec356cf93f3b26ec3d4319313e533dae" prot="public" virt="non-virtual"><scope>idMatX</scope><name>LU_UpdateRowColumn</name></member>
      <member refid="classid_mat_x_1a07136bcaf643edae925a48cebb71b459" prot="private" virt="non-virtual"><scope>idMatX</scope><name>mat</name></member>
      <member refid="classid_mat_x_1a6b3777abdb3a1f9e33011dbe0dc2d2ba" prot="public" virt="non-virtual"><scope>idMatX</scope><name>MaxDifference</name></member>
      <member refid="classid_mat_x_1a5df118668f2ba85c2675d296ccd7d949" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Multiply</name></member>
      <member refid="classid_mat_x_1a1baff537415f6520e8b677b136a557e6" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Multiply</name></member>
      <member refid="classid_mat_x_1a3b7dab81bf5864a8a3540ad7d23b5bfb" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Multiply</name></member>
      <member refid="classid_mat_x_1a9909d985b8b47c57a46b73ea4ea3aada" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Multiply</name></member>
      <member refid="classid_mat_x_1add4dd1f5d7d8eb7c5b93518e3c21dd75" prot="public" virt="non-virtual"><scope>idMatX</scope><name>MultiplyAdd</name></member>
      <member refid="classid_mat_x_1a1a3b64f426ad5cd5eae38723e81e6dea" prot="public" virt="non-virtual"><scope>idMatX</scope><name>MultiplySub</name></member>
      <member refid="classid_mat_x_1abadedb49bd9459b26ffdba3f2e8518ef" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Negate</name></member>
      <member refid="classid_mat_x_1a3718d7712db3db67f164eb1172a9b853" prot="private" virt="non-virtual"><scope>idMatX</scope><name>numColumns</name></member>
      <member refid="classid_mat_x_1ae5d35e38c78ba85aecf1b3e06921e553" prot="private" virt="non-virtual"><scope>idMatX</scope><name>numRows</name></member>
      <member refid="classid_mat_x_1a4b14901507af410bebc039ca8597d74f" prot="public" virt="non-virtual"><scope>idMatX</scope><name>operator!=</name></member>
      <member refid="classid_mat_x_1af6a67034eeb85b3586b8d5ce342cdc89" prot="public" virt="non-virtual"><scope>idMatX</scope><name>operator*</name></member>
      <member refid="classid_mat_x_1a900a84bafcc5a6385542431b4b43efe4" prot="public" virt="non-virtual"><scope>idMatX</scope><name>operator*</name></member>
      <member refid="classid_mat_x_1aca735e2446084e6e2cc3a5574d243e9f" prot="public" virt="non-virtual"><scope>idMatX</scope><name>operator*</name></member>
      <member refid="classid_mat_x_1a96a93003e371e0333bd87936bc731f33" prot="public" virt="non-virtual"><scope>idMatX</scope><name>operator*</name></member>
      <member refid="classid_mat_x_1a69826ba2a5e8bc798fb384b3e96648fc" prot="public" virt="non-virtual"><scope>idMatX</scope><name>operator*</name></member>
      <member refid="classid_mat_x_1a459a3b46f3f77a51ed43b44b7541b6c7" prot="public" virt="non-virtual"><scope>idMatX</scope><name>operator*=</name></member>
      <member refid="classid_mat_x_1a3f1e596da1bf58a76fce5b3485791a19" prot="public" virt="non-virtual"><scope>idMatX</scope><name>operator*=</name></member>
      <member refid="classid_mat_x_1a2376b184d52f5da813e81001ddcab441" prot="public" virt="non-virtual"><scope>idMatX</scope><name>operator*=</name></member>
      <member refid="classid_mat_x_1a5d78bc8e39a98c9bac24b03705714e11" prot="public" virt="non-virtual"><scope>idMatX</scope><name>operator+</name></member>
      <member refid="classid_mat_x_1a923cff031f58a87f77f6dc67f8e743c0" prot="public" virt="non-virtual"><scope>idMatX</scope><name>operator+=</name></member>
      <member refid="classid_mat_x_1ab20c7bf3a3771561e05a873564720965" prot="public" virt="non-virtual"><scope>idMatX</scope><name>operator-</name></member>
      <member refid="classid_mat_x_1a5c97a2e5f3c5eab2e1642624a73076e8" prot="public" virt="non-virtual"><scope>idMatX</scope><name>operator-=</name></member>
      <member refid="classid_mat_x_1a474d017fd699f472370da9986aa66e89" prot="public" virt="non-virtual"><scope>idMatX</scope><name>operator=</name></member>
      <member refid="classid_mat_x_1a7fccbd4644a375528734b7af1447f162" prot="public" virt="non-virtual"><scope>idMatX</scope><name>operator==</name></member>
      <member refid="classid_mat_x_1a1152e78bcf35a21ca7ff9fffdf24eb6e" prot="public" virt="non-virtual"><scope>idMatX</scope><name>operator[]</name></member>
      <member refid="classid_mat_x_1a75ca0f257d42b49ff1ca9dd7804c93bd" prot="public" virt="non-virtual"><scope>idMatX</scope><name>operator[]</name></member>
      <member refid="classid_mat_x_1a0ab17b48e781078434be0287c8062472" prot="private" virt="non-virtual"><scope>idMatX</scope><name>Pythag</name></member>
      <member refid="classid_mat_x_1ae602ec1d0deef3845e9c1f5e3d19605d" prot="private" virt="non-virtual"><scope>idMatX</scope><name>QL</name></member>
      <member refid="classid_mat_x_1a7cf2303c30fbd35c885c07b80992b0d3" prot="public" virt="non-virtual"><scope>idMatX</scope><name>QR_Factor</name></member>
      <member refid="classid_mat_x_1ad9165ca3b1d8be25da862c85541460b2" prot="public" virt="non-virtual"><scope>idMatX</scope><name>QR_Inverse</name></member>
      <member refid="classid_mat_x_1a3973ccc9ec066a94873b66be52625eaf" prot="public" virt="non-virtual"><scope>idMatX</scope><name>QR_MultiplyFactors</name></member>
      <member refid="classid_mat_x_1a4a17a18148b99b807c8417a507d584c1" prot="private" virt="non-virtual"><scope>idMatX</scope><name>QR_Rotate</name></member>
      <member refid="classid_mat_x_1ad5ccdf1511ca6b0eae8aedb2cce455e8" prot="public" virt="non-virtual"><scope>idMatX</scope><name>QR_Solve</name></member>
      <member refid="classid_mat_x_1ad0924af69ca3122b294eac4ec3d92c67" prot="public" virt="non-virtual"><scope>idMatX</scope><name>QR_Solve</name></member>
      <member refid="classid_mat_x_1ac6d5371ed88a6f9a23b3532f741601f2" prot="public" virt="non-virtual"><scope>idMatX</scope><name>QR_UnpackFactors</name></member>
      <member refid="classid_mat_x_1a8b8e48bc47f59ff4b8c07db7115ac3df" prot="public" virt="non-virtual"><scope>idMatX</scope><name>QR_UpdateDecrement</name></member>
      <member refid="classid_mat_x_1a0457cfa90bef06c09f3b89fc52acc34f" prot="public" virt="non-virtual"><scope>idMatX</scope><name>QR_UpdateIncrement</name></member>
      <member refid="classid_mat_x_1af5dcd76e4854936e05d8504b5f50ee97" prot="public" virt="non-virtual"><scope>idMatX</scope><name>QR_UpdateRankOne</name></member>
      <member refid="classid_mat_x_1a79199e9b996cf0233ad8f47f14f3f1a1" prot="public" virt="non-virtual"><scope>idMatX</scope><name>QR_UpdateRowColumn</name></member>
      <member refid="classid_mat_x_1a9a5b7042afbee7ff0377974de380d010" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Random</name></member>
      <member refid="classid_mat_x_1aabcbd3454dd1cbe4a63115a23d9b3016" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Random</name></member>
      <member refid="classid_mat_x_1acc031c6c0410a26adcb56a410ace5c3d" prot="public" virt="non-virtual"><scope>idMatX</scope><name>RemoveColumn</name></member>
      <member refid="classid_mat_x_1a121bbe0c96674d8591e0b1b0ea2f0fef" prot="public" virt="non-virtual"><scope>idMatX</scope><name>RemoveRow</name></member>
      <member refid="classid_mat_x_1a76c8b46fc3daafb84e8215f5a01fe3eb" prot="public" virt="non-virtual"><scope>idMatX</scope><name>RemoveRowColumn</name></member>
      <member refid="classid_mat_x_1a5936676b1b1530072f1091ebda5250d5" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Set</name></member>
      <member refid="classid_mat_x_1a358ba05d0cbf2a08ef863bfcbf442d40" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Set</name></member>
      <member refid="classid_mat_x_1a348d787c075736639ecdb60e1279aed6" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Set</name></member>
      <member refid="classid_mat_x_1a3f1073036153147c9edad10b40e163af" prot="public" virt="non-virtual"><scope>idMatX</scope><name>SetData</name></member>
      <member refid="classid_mat_x_1a4c8904ad2fa1263e1efa817c587eb4b3" prot="public" virt="non-virtual"><scope>idMatX</scope><name>SetSize</name></member>
      <member refid="classid_mat_x_1a413b08026ee52c44163638140fe9a7c5" prot="private" virt="non-virtual"><scope>idMatX</scope><name>SetTempSize</name></member>
      <member refid="classid_mat_x_1a7fa1131929e3737bac0fee2fc5368363" prot="public" virt="non-virtual"><scope>idMatX</scope><name>SquareSubMatrix</name></member>
      <member refid="classid_mat_x_1abd498b88e7516ebff3c25f87f3c31f55" prot="public" virt="non-virtual"><scope>idMatX</scope><name>SubVec6</name></member>
      <member refid="classid_mat_x_1aa0697ce915ae49ce4865e01001dbf573" prot="public" virt="non-virtual"><scope>idMatX</scope><name>SubVec6</name></member>
      <member refid="classid_mat_x_1a2831ce227490349877e02d707da1a8b9" prot="public" virt="non-virtual"><scope>idMatX</scope><name>SubVecX</name></member>
      <member refid="classid_mat_x_1a1ff07c512855411aba36af2785c65848" prot="public" virt="non-virtual"><scope>idMatX</scope><name>SubVecX</name></member>
      <member refid="classid_mat_x_1aeed229c1bb81c77f7723985ba625a99f" prot="private" virt="non-virtual"><scope>idMatX</scope><name>SVD_BiDiag</name></member>
      <member refid="classid_mat_x_1a8afef89783a2d59e35824d09a3cb83e0" prot="public" virt="non-virtual"><scope>idMatX</scope><name>SVD_Factor</name></member>
      <member refid="classid_mat_x_1a43d307b6d6d074f1aab743e889828076" prot="private" virt="non-virtual"><scope>idMatX</scope><name>SVD_InitialWV</name></member>
      <member refid="classid_mat_x_1a7c5204aba0be3e1fcb6fc73c599a7494" prot="public" virt="non-virtual"><scope>idMatX</scope><name>SVD_Inverse</name></member>
      <member refid="classid_mat_x_1aef3d4b5a665930379994e1d37a8e0de2" prot="public" virt="non-virtual"><scope>idMatX</scope><name>SVD_MultiplyFactors</name></member>
      <member refid="classid_mat_x_1a23bcc383dbbe8e3c92d11aff18a731c3" prot="public" virt="non-virtual"><scope>idMatX</scope><name>SVD_Solve</name></member>
      <member refid="classid_mat_x_1a7adb181b9c4c874349fbf6785c5db4b2" prot="public" virt="non-virtual"><scope>idMatX</scope><name>SwapColumns</name></member>
      <member refid="classid_mat_x_1a8e3ed1dca96930752a88dace2509be3c" prot="public" virt="non-virtual"><scope>idMatX</scope><name>SwapRows</name></member>
      <member refid="classid_mat_x_1aee85f43c7fff36352341a28513645233" prot="public" virt="non-virtual"><scope>idMatX</scope><name>SwapRowsColumns</name></member>
      <member refid="classid_mat_x_1aa618016398c01388a33c5f7aa159616e" prot="private" virt="non-virtual"><scope>idMatX</scope><name>temp</name></member>
      <member refid="classid_mat_x_1a4e4f982b680a23f21c664d7980633fba" prot="private" virt="non-virtual"><scope>idMatX</scope><name>tempIndex</name></member>
      <member refid="classid_mat_x_1a342e0b5ec7275fd3f16d438e792b875f" prot="private" virt="non-virtual"><scope>idMatX</scope><name>tempPtr</name></member>
      <member refid="classid_mat_x_1a03b1f8bf76a787ad3ada7e7e7aa014c0" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Test</name></member>
      <member refid="classid_mat_x_1ac504cd8be3eb563a258b95b4647d8e95" prot="public" virt="non-virtual"><scope>idMatX</scope><name>ToFloatPtr</name></member>
      <member refid="classid_mat_x_1aeea8af35a97f78d71708829878cbb522" prot="public" virt="non-virtual"><scope>idMatX</scope><name>ToFloatPtr</name></member>
      <member refid="classid_mat_x_1a244c246cf8009569bec4712e595424c4" prot="public" virt="non-virtual"><scope>idMatX</scope><name>ToString</name></member>
      <member refid="classid_mat_x_1a20dd471449b447b56b1e878dfcf96a25" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Trace</name></member>
      <member refid="classid_mat_x_1a1ca3e15166e4e19f4531996b15c5e353" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Transpose</name></member>
      <member refid="classid_mat_x_1a7859f3d563de6c5d136f519c09a6eab6" prot="public" virt="non-virtual"><scope>idMatX</scope><name>TransposeMultiply</name></member>
      <member refid="classid_mat_x_1a9864928d95724aa8679ed416de462eb0" prot="public" virt="non-virtual"><scope>idMatX</scope><name>TransposeMultiply</name></member>
      <member refid="classid_mat_x_1a74ffe8f0468a329174d20be59a57fab5" prot="public" virt="non-virtual"><scope>idMatX</scope><name>TransposeMultiply</name></member>
      <member refid="classid_mat_x_1ae9d108cbf5fb483a273318ba975990d3" prot="public" virt="non-virtual"><scope>idMatX</scope><name>TransposeMultiply</name></member>
      <member refid="classid_mat_x_1a62fb54f3dd3638f05a9cee5199402ba7" prot="public" virt="non-virtual"><scope>idMatX</scope><name>TransposeMultiplyAdd</name></member>
      <member refid="classid_mat_x_1af2a1a2b35f66fdc19bc196e88fd18b9c" prot="public" virt="non-virtual"><scope>idMatX</scope><name>TransposeMultiplySub</name></member>
      <member refid="classid_mat_x_1a59e85738cf9ef3013b7a7c591609a70c" prot="public" virt="non-virtual"><scope>idMatX</scope><name>TransposeSelf</name></member>
      <member refid="classid_mat_x_1a61d6323ddfc0ee28bfb5265c0fee3885" prot="public" virt="non-virtual"><scope>idMatX</scope><name>TriDiagonal_ClearTriangles</name></member>
      <member refid="classid_mat_x_1a7f9ad090e0c688e280ec381438d8a501" prot="public" virt="non-virtual"><scope>idMatX</scope><name>TriDiagonal_Inverse</name></member>
      <member refid="classid_mat_x_1a0dc010ac878a5a8254ea471953f32485" prot="public" virt="non-virtual"><scope>idMatX</scope><name>TriDiagonal_Solve</name></member>
      <member refid="classid_mat_x_1af771fd36d1d216f12bac9e171e3024ae" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Update_Decrement</name></member>
      <member refid="classid_mat_x_1af2bca263920f9819f11179fdb286e1b7" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Update_Increment</name></member>
      <member refid="classid_mat_x_1acf1e29ee5cd88ee4b4f25e43bf4b6493" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Update_IncrementSymmetric</name></member>
      <member refid="classid_mat_x_1a69f45e2484a00c97004b95cc3472bc0b" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Update_RankOne</name></member>
      <member refid="classid_mat_x_1a08d350fc2a12d150f1057d5c18a5e541" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Update_RankOneSymmetric</name></member>
      <member refid="classid_mat_x_1aec3ef0d6201c4d2a18e45d8b8abcd8ab" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Update_RowColumn</name></member>
      <member refid="classid_mat_x_1aa18fe0b38b69cca28d0b7e2f267cc0b6" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Update_RowColumnSymmetric</name></member>
      <member refid="classid_mat_x_1a1cad3702406be7f557dd72ada9a6960a" prot="public" virt="non-virtual"><scope>idMatX</scope><name>UpperTriangularInverse</name></member>
      <member refid="classid_mat_x_1a82be2b1985af56e816e51b38b58d010d" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Zero</name></member>
      <member refid="classid_mat_x_1a5711c5e7ef576b9a99bf26a0947488c2" prot="public" virt="non-virtual"><scope>idMatX</scope><name>Zero</name></member>
      <member refid="classid_mat_x_1af7610b02215a043b09f4ef8f6c009807" prot="public" virt="non-virtual"><scope>idMatX</scope><name>~idMatX</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
