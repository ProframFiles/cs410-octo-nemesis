<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classid_polynomial" kind="class" prot="public">
    <compoundname>idPolynomial</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classid_polynomial_1a47083f49c5027b9f99656c5991870494" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int idPolynomial::degree</definition>
        <argsstring></argsstring>
        <name>degree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="96" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classid_polynomial_1afb3fc1345132475dcf4fb12afc00dda4" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int idPolynomial::allocated</definition>
        <argsstring></argsstring>
        <name>allocated</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="97" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classid_polynomial_1ae1239d6130dd63157e2174c78dbe1780" prot="private" static="no" mutable="no">
        <type>float *</type>
        <definition>float* idPolynomial::coefficient</definition>
        <argsstring></argsstring>
        <name>coefficient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="98" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classid_polynomial_1ae19e34a2eaa2029ff89bf00d0c859dbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idPolynomial::idPolynomial</definition>
        <argsstring>(void)</argsstring>
        <name>idPolynomial</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="43" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="104" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a7b4862e775808d974d85b6b8f0815e0e" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idPolynomial::idPolynomial</definition>
        <argsstring>(int d)</argsstring>
        <name>idPolynomial</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="44" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="110" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a5ca7d49328c6a54c1440b8fb21f410b9" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idPolynomial::idPolynomial</definition>
        <argsstring>(float a, float b)</argsstring>
        <name>idPolynomial</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="45" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="117" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a253b1bd358943750283e5cb48cd9b9a4" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idPolynomial::idPolynomial</definition>
        <argsstring>(float a, float b, float c)</argsstring>
        <name>idPolynomial</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="46" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="126" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1afe8ec82568dcfb23fd0873e04342304e" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idPolynomial::idPolynomial</definition>
        <argsstring>(float a, float b, float c, float d)</argsstring>
        <name>idPolynomial</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>c</declname>
        </param>
        <param>
          <type>float</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="47" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="136" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a7ef0f50676dc76b41506c93557fcc71f" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idPolynomial::idPolynomial</definition>
        <argsstring>(float a, float b, float c, float d, float e)</argsstring>
        <name>idPolynomial</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>c</declname>
        </param>
        <param>
          <type>float</type>
          <declname>d</declname>
        </param>
        <param>
          <type>float</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="48" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="147" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a715afb900026fd3282218a06a31337a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>ID_INLINE float idPolynomial::operator[]</definition>
        <argsstring>(int index) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="50" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a1860ef0781e36250fc6be7fdcd680cd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float &amp;</type>
        <definition>ID_INLINE float &amp; idPolynomial::operator[]</definition>
        <argsstring>(int index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="51" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1ac282f4bd2ecf5af03027f1bdc639da06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_polynomial" kindref="compound">idPolynomial</ref></type>
        <definition>ID_INLINE idPolynomial idPolynomial::operator-</definition>
        <argsstring>() const </argsstring>
        <name>operator-</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="53" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="169" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a2a9c3da654a4d32f0d38e2af99886b8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_polynomial" kindref="compound">idPolynomial</ref> &amp;</type>
        <definition>ID_INLINE idPolynomial &amp; idPolynomial::operator=</definition>
        <argsstring>(const idPolynomial &amp;p)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classid_polynomial" kindref="compound">idPolynomial</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="54" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="180" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a46bd81e1caea54603e4df13e55b627eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_polynomial" kindref="compound">idPolynomial</ref></type>
        <definition>ID_INLINE idPolynomial idPolynomial::operator+</definition>
        <argsstring>(const idPolynomial &amp;p) const </argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classid_polynomial" kindref="compound">idPolynomial</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="56" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="188" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1adf6a760d312785fdc54c06460e523371" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_polynomial" kindref="compound">idPolynomial</ref></type>
        <definition>ID_INLINE idPolynomial idPolynomial::operator-</definition>
        <argsstring>(const idPolynomial &amp;p) const </argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classid_polynomial" kindref="compound">idPolynomial</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="57" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="223" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a245fc5eac4dd050f09bf39d80fc03033" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_polynomial" kindref="compound">idPolynomial</ref></type>
        <definition>ID_INLINE idPolynomial idPolynomial::operator*</definition>
        <argsstring>(const float s) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="58" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="258" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1ab25b6bf40a55f02415d4b35fd9c90a07" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_polynomial" kindref="compound">idPolynomial</ref></type>
        <definition>ID_INLINE idPolynomial idPolynomial::operator/</definition>
        <argsstring>(const float s) const </argsstring>
        <name>operator/</name>
        <param>
          <type>const float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="59" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="272" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1ae5c4cc754ea0286ee16b95a8f8adb646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_polynomial" kindref="compound">idPolynomial</ref> &amp;</type>
        <definition>ID_INLINE idPolynomial &amp; idPolynomial::operator+=</definition>
        <argsstring>(const idPolynomial &amp;p)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classid_polynomial" kindref="compound">idPolynomial</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="61" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="285" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a99662c6f8a7bda9ec6f30bbbd0b7214e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_polynomial" kindref="compound">idPolynomial</ref> &amp;</type>
        <definition>ID_INLINE idPolynomial &amp; idPolynomial::operator-=</definition>
        <argsstring>(const idPolynomial &amp;p)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classid_polynomial" kindref="compound">idPolynomial</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="62" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="311" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a802409a33c0e6545978c45ed8bfbfac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_polynomial" kindref="compound">idPolynomial</ref> &amp;</type>
        <definition>ID_INLINE idPolynomial &amp; idPolynomial::operator*=</definition>
        <argsstring>(const float s)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="63" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="337" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a34ea87ea498e21cb2019cbd6025f78e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_polynomial" kindref="compound">idPolynomial</ref> &amp;</type>
        <definition>ID_INLINE idPolynomial &amp; idPolynomial::operator/=</definition>
        <argsstring>(const float s)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="64" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="348" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a6e26529cb53608a4791a7d46aa816afd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idPolynomial::Compare</definition>
        <argsstring>(const idPolynomial &amp;p) const </argsstring>
        <name>Compare</name>
        <param>
          <type>const <ref refid="classid_polynomial" kindref="compound">idPolynomial</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="66" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="359" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a314f6185145a972a78a6524e3ecf7199" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idPolynomial::Compare</definition>
        <argsstring>(const idPolynomial &amp;p, const float epsilon) const </argsstring>
        <name>Compare</name>
        <param>
          <type>const <ref refid="classid_polynomial" kindref="compound">idPolynomial</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="67" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="371" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1abdd2d090b0e186c522f61399fc76cdbb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idPolynomial::operator==</definition>
        <argsstring>(const idPolynomial &amp;p) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classid_polynomial" kindref="compound">idPolynomial</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="68" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="383" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a7b5f5aca02101e5b4ac1a9a59fa9eae6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idPolynomial::operator!=</definition>
        <argsstring>(const idPolynomial &amp;p) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classid_polynomial" kindref="compound">idPolynomial</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="69" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="387" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a5d91a68679d967780fffa7edc47c86c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idPolynomial::Zero</definition>
        <argsstring>(void)</argsstring>
        <name>Zero</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="71" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="391" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a582050670e8120ee1fef54a599c83ec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idPolynomial::Zero</definition>
        <argsstring>(int d)</argsstring>
        <name>Zero</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="72" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="395" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a2fee4ac3b1d94285462efe7bb8889f1d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>ID_INLINE int idPolynomial::GetDimension</definition>
        <argsstring>(void) const </argsstring>
        <name>GetDimension</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="74" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="402" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1adcf9753030c0221e4cfb2e11948ccafc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>ID_INLINE int idPolynomial::GetDegree</definition>
        <argsstring>(void) const </argsstring>
        <name>GetDegree</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="75" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="406" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1abbeaaf0b52dc8190a8f01c4f977fff10" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>ID_INLINE float idPolynomial::GetValue</definition>
        <argsstring>(const float x) const </argsstring>
        <name>GetValue</name>
        <param>
          <type>const float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="76" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="410" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1acdf84520d39f7a2578972c1f889824fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_complex" kindref="compound">idComplex</ref></type>
        <definition>ID_INLINE idComplex idPolynomial::GetValue</definition>
        <argsstring>(const idComplex &amp;x) const </argsstring>
        <name>GetValue</name>
        <param>
          <type>const <ref refid="classid_complex" kindref="compound">idComplex</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="77" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="421" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a11cf9b2d8555b99a88c1e5717ecbfef2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_polynomial" kindref="compound">idPolynomial</ref></type>
        <definition>ID_INLINE idPolynomial idPolynomial::GetDerivative</definition>
        <argsstring>(void) const </argsstring>
        <name>GetDerivative</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="78" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="432" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a3e738ea0ef37509146ed445e3d71eda5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_polynomial" kindref="compound">idPolynomial</ref></type>
        <definition>ID_INLINE idPolynomial idPolynomial::GetAntiDerivative</definition>
        <argsstring>(void) const </argsstring>
        <name>GetAntiDerivative</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="79" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="445" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a46ef934ceba3231b346dcde26088554b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int idPolynomial::GetRoots</definition>
        <argsstring>(idComplex *roots) const </argsstring>
        <name>GetRoots</name>
        <param>
          <type><ref refid="classid_complex" kindref="compound">idComplex</ref> *</type>
          <declname>roots</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="81" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.cpp" bodystart="94" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a8634685e271aa9cf9717a6e0f12763a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int idPolynomial::GetRoots</definition>
        <argsstring>(float *roots) const </argsstring>
        <name>GetRoots</name>
        <param>
          <type>float *</type>
          <declname>roots</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="82" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.cpp" bodystart="144" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1afa90ec0d13b301f784b3971ae61a5e11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const float *</type>
        <definition>ID_INLINE const float * idPolynomial::ToFloatPtr</definition>
        <argsstring>(void) const </argsstring>
        <name>ToFloatPtr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="89" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="603" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a37960269968ab061f782092d1b2763b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>ID_INLINE float * idPolynomial::ToFloatPtr</definition>
        <argsstring>(void)</argsstring>
        <name>ToFloatPtr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="90" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="607" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a8f024d470ff80b8dbdb30aeffc35f134" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * idPolynomial::ToString</definition>
        <argsstring>(int precision=2) const </argsstring>
        <name>ToString</name>
        <param>
          <type>int</type>
          <declname>precision</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="91" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.cpp" bodystart="179" bodyend="181"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classid_polynomial_1ac06597ff1fd0fbc54eab48652c99d9ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>ID_INLINE int idPolynomial::GetRoots1</definition>
        <argsstring>(float a, float b, float *roots)</argsstring>
        <name>GetRoots1</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>roots</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="84" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="459" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1ab7eb524c4f385b4e60ea170185ddf29a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>ID_INLINE int idPolynomial::GetRoots2</definition>
        <argsstring>(float a, float b, float c, float *roots)</argsstring>
        <name>GetRoots2</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>c</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>roots</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="85" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="465" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1abfc7bba373dbf31d09bba8db4f22400a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>ID_INLINE int idPolynomial::GetRoots3</definition>
        <argsstring>(float a, float b, float c, float d, float *roots)</argsstring>
        <name>GetRoots3</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>c</declname>
        </param>
        <param>
          <type>float</type>
          <declname>d</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>roots</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="86" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="488" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1af4b7f9fdfb47c143dd66f2007d6fc2c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>ID_INLINE int idPolynomial::GetRoots4</definition>
        <argsstring>(float a, float b, float c, float d, float e, float *roots)</argsstring>
        <name>GetRoots4</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>c</declname>
        </param>
        <param>
          <type>float</type>
          <declname>d</declname>
        </param>
        <param>
          <type>float</type>
          <declname>e</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>roots</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="87" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="543" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a8caa9507246c2dd488f4fdbd68c59f67" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idPolynomial::Test</definition>
        <argsstring>(void)</argsstring>
        <name>Test</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="93" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.cpp" bodystart="188" bodyend="242"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classid_polynomial_1a0c8b25186b32613a3cd428cb42ec787f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idPolynomial::Resize</definition>
        <argsstring>(int d, bool keep)</argsstring>
        <name>Resize</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="100" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="611" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="classid_polynomial_1a486ce94b923736e31445e581aadef4bb" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int idPolynomial::Laguer</definition>
        <argsstring>(const idComplex *coef, const int degree, idComplex &amp;r) const </argsstring>
        <name>Laguer</name>
        <param>
          <type>const <ref refid="classid_complex" kindref="compound">idComplex</ref> *</type>
          <declname>coef</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>degree</declname>
        </param>
        <param>
          <type><ref refid="classid_complex" kindref="compound">idComplex</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="101" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.cpp" bodystart="39" bodyend="87"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" line="41" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Polynomial.h" bodystart="41" bodyend="102"/>
    <listofallmembers>
      <member refid="classid_polynomial_1afb3fc1345132475dcf4fb12afc00dda4" prot="private" virt="non-virtual"><scope>idPolynomial</scope><name>allocated</name></member>
      <member refid="classid_polynomial_1ae1239d6130dd63157e2174c78dbe1780" prot="private" virt="non-virtual"><scope>idPolynomial</scope><name>coefficient</name></member>
      <member refid="classid_polynomial_1a6e26529cb53608a4791a7d46aa816afd" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>Compare</name></member>
      <member refid="classid_polynomial_1a314f6185145a972a78a6524e3ecf7199" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>Compare</name></member>
      <member refid="classid_polynomial_1a47083f49c5027b9f99656c5991870494" prot="private" virt="non-virtual"><scope>idPolynomial</scope><name>degree</name></member>
      <member refid="classid_polynomial_1a3e738ea0ef37509146ed445e3d71eda5" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>GetAntiDerivative</name></member>
      <member refid="classid_polynomial_1adcf9753030c0221e4cfb2e11948ccafc" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>GetDegree</name></member>
      <member refid="classid_polynomial_1a11cf9b2d8555b99a88c1e5717ecbfef2" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>GetDerivative</name></member>
      <member refid="classid_polynomial_1a2fee4ac3b1d94285462efe7bb8889f1d" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>GetDimension</name></member>
      <member refid="classid_polynomial_1a46ef934ceba3231b346dcde26088554b" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>GetRoots</name></member>
      <member refid="classid_polynomial_1a8634685e271aa9cf9717a6e0f12763a1" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>GetRoots</name></member>
      <member refid="classid_polynomial_1ac06597ff1fd0fbc54eab48652c99d9ea" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>GetRoots1</name></member>
      <member refid="classid_polynomial_1ab7eb524c4f385b4e60ea170185ddf29a" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>GetRoots2</name></member>
      <member refid="classid_polynomial_1abfc7bba373dbf31d09bba8db4f22400a" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>GetRoots3</name></member>
      <member refid="classid_polynomial_1af4b7f9fdfb47c143dd66f2007d6fc2c2" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>GetRoots4</name></member>
      <member refid="classid_polynomial_1abbeaaf0b52dc8190a8f01c4f977fff10" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>GetValue</name></member>
      <member refid="classid_polynomial_1acdf84520d39f7a2578972c1f889824fb" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>GetValue</name></member>
      <member refid="classid_polynomial_1ae19e34a2eaa2029ff89bf00d0c859dbb" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>idPolynomial</name></member>
      <member refid="classid_polynomial_1a7b4862e775808d974d85b6b8f0815e0e" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>idPolynomial</name></member>
      <member refid="classid_polynomial_1a5ca7d49328c6a54c1440b8fb21f410b9" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>idPolynomial</name></member>
      <member refid="classid_polynomial_1a253b1bd358943750283e5cb48cd9b9a4" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>idPolynomial</name></member>
      <member refid="classid_polynomial_1afe8ec82568dcfb23fd0873e04342304e" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>idPolynomial</name></member>
      <member refid="classid_polynomial_1a7ef0f50676dc76b41506c93557fcc71f" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>idPolynomial</name></member>
      <member refid="classid_polynomial_1a486ce94b923736e31445e581aadef4bb" prot="private" virt="non-virtual"><scope>idPolynomial</scope><name>Laguer</name></member>
      <member refid="classid_polynomial_1a7b5f5aca02101e5b4ac1a9a59fa9eae6" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>operator!=</name></member>
      <member refid="classid_polynomial_1a245fc5eac4dd050f09bf39d80fc03033" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>operator*</name></member>
      <member refid="classid_polynomial_1a802409a33c0e6545978c45ed8bfbfac5" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>operator*=</name></member>
      <member refid="classid_polynomial_1a46bd81e1caea54603e4df13e55b627eb" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>operator+</name></member>
      <member refid="classid_polynomial_1ae5c4cc754ea0286ee16b95a8f8adb646" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>operator+=</name></member>
      <member refid="classid_polynomial_1ac282f4bd2ecf5af03027f1bdc639da06" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>operator-</name></member>
      <member refid="classid_polynomial_1adf6a760d312785fdc54c06460e523371" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>operator-</name></member>
      <member refid="classid_polynomial_1a99662c6f8a7bda9ec6f30bbbd0b7214e" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>operator-=</name></member>
      <member refid="classid_polynomial_1ab25b6bf40a55f02415d4b35fd9c90a07" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>operator/</name></member>
      <member refid="classid_polynomial_1a34ea87ea498e21cb2019cbd6025f78e8" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>operator/=</name></member>
      <member refid="classid_polynomial_1a2a9c3da654a4d32f0d38e2af99886b8c" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>operator=</name></member>
      <member refid="classid_polynomial_1abdd2d090b0e186c522f61399fc76cdbb" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>operator==</name></member>
      <member refid="classid_polynomial_1a715afb900026fd3282218a06a31337a9" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>operator[]</name></member>
      <member refid="classid_polynomial_1a1860ef0781e36250fc6be7fdcd680cd6" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>operator[]</name></member>
      <member refid="classid_polynomial_1a0c8b25186b32613a3cd428cb42ec787f" prot="private" virt="non-virtual"><scope>idPolynomial</scope><name>Resize</name></member>
      <member refid="classid_polynomial_1a8caa9507246c2dd488f4fdbd68c59f67" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>Test</name></member>
      <member refid="classid_polynomial_1afa90ec0d13b301f784b3971ae61a5e11" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>ToFloatPtr</name></member>
      <member refid="classid_polynomial_1a37960269968ab061f782092d1b2763b7" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>ToFloatPtr</name></member>
      <member refid="classid_polynomial_1a8f024d470ff80b8dbdb30aeffc35f134" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>ToString</name></member>
      <member refid="classid_polynomial_1a5d91a68679d967780fffa7edc47c86c4" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>Zero</name></member>
      <member refid="classid_polynomial_1a582050670e8120ee1fef54a599c83ec3" prot="public" virt="non-virtual"><scope>idPolynomial</scope><name>Zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
