<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classid_s_i_m_d_processor" kind="class" prot="public" abstract="yes">
    <compoundname>idSIMDProcessor</compoundname>
    <derivedcompoundref refid="classid_s_i_m_d___generic" prot="public" virt="non-virtual">idSIMD_Generic</derivedcompoundref>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classid_s_i_m_d_processor_1a1abfed459adb3fb619112440aa865d3a" prot="public" static="no" mutable="no">
        <type>cpuid_t</type>
        <definition>cpuid_t idSIMDProcessor::cpuid</definition>
        <argsstring></argsstring>
        <name>cpuid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="100" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a75abe059ad7dd6b114124b4ef96c1649" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>idSIMDProcessor::idSIMDProcessor</definition>
        <argsstring>(void)</argsstring>
        <name>idSIMDProcessor</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="98" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1acf314f27338b0273f70b6d9b7fd54dd1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const char *</type>
        <definition>virtual const char* idSIMDProcessor::GetName</definition>
        <argsstring>(void) const =0</argsstring>
        <name>GetName</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1adc981793729c8cf1457f520eb0290825">GetName</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1ad8ac1a4a4fdfb9a4b6a36d121a1a2a4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Add</definition>
        <argsstring>(float *dst, const float constant, const float *src, const int count)=0</argsstring>
        <name>Add</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a69c07f0fc4f308ec1d4390d5d597f231">Add</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a06ef9b642f259fbc9a28be866c072299" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Add</definition>
        <argsstring>(float *dst, const float *src0, const float *src1, const int count)=0</argsstring>
        <name>Add</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1ae515f085acd6a4ddcf67ec85e293b801">Add</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src0</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a5cc6bd90bcd247c31e2508f37c859f9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Sub</definition>
        <argsstring>(float *dst, const float constant, const float *src, const int count)=0</argsstring>
        <name>Sub</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a4b1531c5a34fd98e17e7eb2117334894">Sub</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1ab1e5aff9888fa34f7a508dcd395c559c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Sub</definition>
        <argsstring>(float *dst, const float *src0, const float *src1, const int count)=0</argsstring>
        <name>Sub</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a063fec618dae2f5774c832d28cd17770">Sub</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src0</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a5fb966f9940513bde95e0ca9c5f5f683" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Mul</definition>
        <argsstring>(float *dst, const float constant, const float *src, const int count)=0</argsstring>
        <name>Mul</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a171b871f9e141984cb094601917b8eb2">Mul</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a5da86dab6e27c66fa2bcc6760c0f3d42" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Mul</definition>
        <argsstring>(float *dst, const float *src0, const float *src1, const int count)=0</argsstring>
        <name>Mul</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a147ca903cf5a449ff117f47388f276b8">Mul</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src0</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1ae7187a71dfeb91b052a947d65996013a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Div</definition>
        <argsstring>(float *dst, const float constant, const float *src, const int count)=0</argsstring>
        <name>Div</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a73b1829106afc47ca066972c7a9f051c">Div</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a43f7534f4ddcbf69f04555f52f124f3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Div</definition>
        <argsstring>(float *dst, const float *src0, const float *src1, const int count)=0</argsstring>
        <name>Div</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1af2a9ee45a76e4b085769734b4aff5db0">Div</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src0</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a3f4789698d4e74e182da4c63ef9f0678" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MulAdd</definition>
        <argsstring>(float *dst, const float constant, const float *src, const int count)=0</argsstring>
        <name>MulAdd</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a7e2003a6f59feaeeae037998c356065b">MulAdd</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1af9436bfc8ba221a4302d41d0ad787ebe" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MulAdd</definition>
        <argsstring>(float *dst, const float *src0, const float *src1, const int count)=0</argsstring>
        <name>MulAdd</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1af3c6b730f89dac0d3818482e818ed1a4">MulAdd</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src0</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a7b2180bccd66213e588bfa1b2b4407b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MulSub</definition>
        <argsstring>(float *dst, const float constant, const float *src, const int count)=0</argsstring>
        <name>MulSub</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a570ea418ceb467c0a402dae41c475bef">MulSub</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a1d113b01f580eaa0c8c26c57e3b83ce9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MulSub</definition>
        <argsstring>(float *dst, const float *src0, const float *src1, const int count)=0</argsstring>
        <name>MulSub</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1acb5e1ebdf6ef9ba49dfa92487b374a32">MulSub</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src0</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a9fca68570c942d0694d967b885c7e8a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Dot</definition>
        <argsstring>(float *dst, const idVec3 &amp;constant, const idVec3 *src, const int count)=0</argsstring>
        <name>Dot</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a52ca6f4d3ba9e2b0dc383864f7110194">Dot</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1aea3b4d1bc308f439d658b4527bf30088" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Dot</definition>
        <argsstring>(float *dst, const idVec3 &amp;constant, const idPlane *src, const int count)=0</argsstring>
        <name>Dot</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a25f9d8ab5e955e040ce09d6dbdddb096">Dot</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1ad9b17a8b0de3ca648f4360526c7ad620" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Dot</definition>
        <argsstring>(float *dst, const idVec3 &amp;constant, const idDrawVert *src, const int count)=0</argsstring>
        <name>Dot</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1aa07aed12fee2851e65a431d7af23abc3">Dot</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const <ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a15de4a5cc0c1b5a0b67f920aa7cd82c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Dot</definition>
        <argsstring>(float *dst, const idPlane &amp;constant, const idVec3 *src, const int count)=0</argsstring>
        <name>Dot</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a0d0be62bcb09e2d9f11332f6357877d0">Dot</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1ac25210a3eea5a5c54db30e93d3bde0e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Dot</definition>
        <argsstring>(float *dst, const idPlane &amp;constant, const idPlane *src, const int count)=0</argsstring>
        <name>Dot</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a004b92e0d022ed0c11bf0ff0a84d9f44">Dot</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a5a02389fd9e9e9473551bf77b128b084" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Dot</definition>
        <argsstring>(float *dst, const idPlane &amp;constant, const idDrawVert *src, const int count)=0</argsstring>
        <name>Dot</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a1feb2d321e907ca2a80eda9b882305bd">Dot</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const <ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a8b83a65117e6671e8a46bd727927548e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Dot</definition>
        <argsstring>(float *dst, const idVec3 *src0, const idVec3 *src1, const int count)=0</argsstring>
        <name>Dot</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1ad1b8e2bf037024323ac2fde8f715974d">Dot</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> *</type>
          <declname>src0</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> *</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a60e6fad69ec84dda9591f88cd19f417f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Dot</definition>
        <argsstring>(float &amp;dot, const float *src1, const float *src2, const int count)=0</argsstring>
        <name>Dot</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1aecf1db158dcdc58b6a2cca96355db96a">Dot</reimplementedby>
        <param>
          <type>float &amp;</type>
          <declname>dot</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a030902b243aa5bbe1262bde5f82c46ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::CmpGT</definition>
        <argsstring>(byte *dst, const float *src0, const float constant, const int count)=0</argsstring>
        <name>CmpGT</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1aecba2f868d8d3dc7b999d6b51f96a210">CmpGT</reimplementedby>
        <param>
          <type>byte *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src0</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1af4ffaceb2768eecd4a487bfd23c05877" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::CmpGT</definition>
        <argsstring>(byte *dst, const byte bitNum, const float *src0, const float constant, const int count)=0</argsstring>
        <name>CmpGT</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a1da13cb9bdf42b9984c04b5654205765">CmpGT</reimplementedby>
        <param>
          <type>byte *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const byte</type>
          <declname>bitNum</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src0</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a9c6a58c89a520619d704b63dbcc3421c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::CmpGE</definition>
        <argsstring>(byte *dst, const float *src0, const float constant, const int count)=0</argsstring>
        <name>CmpGE</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a17647833092fba6df950bb8ca85cbf06">CmpGE</reimplementedby>
        <param>
          <type>byte *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src0</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1ada64cff4b43168bb49d2dbbeabda1233" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::CmpGE</definition>
        <argsstring>(byte *dst, const byte bitNum, const float *src0, const float constant, const int count)=0</argsstring>
        <name>CmpGE</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a047a409b59f3950cce3c8d1ea5bb42c9">CmpGE</reimplementedby>
        <param>
          <type>byte *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const byte</type>
          <declname>bitNum</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src0</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1afe5ff46c091c3b0e7b678a3b27d3c78a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::CmpLT</definition>
        <argsstring>(byte *dst, const float *src0, const float constant, const int count)=0</argsstring>
        <name>CmpLT</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1aa37cb1a680b28a001736ed30a1c7cefa">CmpLT</reimplementedby>
        <param>
          <type>byte *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src0</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1ab297276b5f58b2f1816bc7d474ea0866" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::CmpLT</definition>
        <argsstring>(byte *dst, const byte bitNum, const float *src0, const float constant, const int count)=0</argsstring>
        <name>CmpLT</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a3928f4129bdef50b4f01e5f04c2d5eda">CmpLT</reimplementedby>
        <param>
          <type>byte *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const byte</type>
          <declname>bitNum</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src0</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a462de24107d10ad6e1a25a91cda535bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::CmpLE</definition>
        <argsstring>(byte *dst, const float *src0, const float constant, const int count)=0</argsstring>
        <name>CmpLE</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a3c62480e13da900fee2f14b773b5faa1">CmpLE</reimplementedby>
        <param>
          <type>byte *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src0</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a4a439507d5b8f9e8c1896586f25edf7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::CmpLE</definition>
        <argsstring>(byte *dst, const byte bitNum, const float *src0, const float constant, const int count)=0</argsstring>
        <name>CmpLE</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1aed6d1ff0e18d2ae29690d5a522c2a6ef">CmpLE</reimplementedby>
        <param>
          <type>byte *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const byte</type>
          <declname>bitNum</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src0</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a5e8e3df16f7843d21518e35498517c57" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MinMax</definition>
        <argsstring>(float &amp;min, float &amp;max, const float *src, const int count)=0</argsstring>
        <name>MinMax</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1aa1437a11f412eb2d820cf8548be32201">MinMax</reimplementedby>
        <param>
          <type>float &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>max</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a91ed12de027cbe2702ef2454ec1ef848" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MinMax</definition>
        <argsstring>(idVec2 &amp;min, idVec2 &amp;max, const idVec2 *src, const int count)=0</argsstring>
        <name>MinMax</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1ad46d93a6fcc8423ed12cfd0f7d87717e">MinMax</reimplementedby>
        <param>
          <type><ref refid="classid_vec2" kindref="compound">idVec2</ref> &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type><ref refid="classid_vec2" kindref="compound">idVec2</ref> &amp;</type>
          <declname>max</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec2" kindref="compound">idVec2</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a2d5b1d8374756854a2f539e5266209fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MinMax</definition>
        <argsstring>(idVec3 &amp;min, idVec3 &amp;max, const idVec3 *src, const int count)=0</argsstring>
        <name>MinMax</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a38b9143196c66a58fc2b7cfb4f8748d0">MinMax</reimplementedby>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>max</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a2be19e15af3e6b733d031a86fe65042c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MinMax</definition>
        <argsstring>(idVec3 &amp;min, idVec3 &amp;max, const idDrawVert *src, const int count)=0</argsstring>
        <name>MinMax</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a43e77182806ac4d7977b124b232c7e5c">MinMax</reimplementedby>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>max</declname>
        </param>
        <param>
          <type>const <ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a125b89f4f6ad4739263b128569414eff" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MinMax</definition>
        <argsstring>(idVec3 &amp;min, idVec3 &amp;max, const idDrawVert *src, const int *indexes, const int count)=0</argsstring>
        <name>MinMax</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1ad63ed9aa27e5e006ed10d909db7a1dff">MinMax</reimplementedby>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>max</declname>
        </param>
        <param>
          <type>const <ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>indexes</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a6910aa9054f2a929176618398cfa46d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Clamp</definition>
        <argsstring>(float *dst, const float *src, const float min, const float max, const int count)=0</argsstring>
        <name>Clamp</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1afe6fc2d9200e59d755c5cf8c243372f8">Clamp</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>min</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>max</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a92cc54b3207812294434bab033a29571" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::ClampMin</definition>
        <argsstring>(float *dst, const float *src, const float min, const int count)=0</argsstring>
        <name>ClampMin</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a571768bafeae51fa15532720b322a0ed">ClampMin</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>min</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a3a2816ceed55d44ccf82e6c43321b5e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::ClampMax</definition>
        <argsstring>(float *dst, const float *src, const float max, const int count)=0</argsstring>
        <name>ClampMax</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a0e88e2108f6e13a574be5751facff81b">ClampMax</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>max</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a2718da76248b7282c72cafc5582217ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Memcpy</definition>
        <argsstring>(void *dst, const void *src, const int count)=0</argsstring>
        <name>Memcpy</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a2be056ab3c06b77297a9c764623186dd">Memcpy</reimplementedby>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a60a1c6154867c014087a9c1bb032e454" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Memset</definition>
        <argsstring>(void *dst, const int val, const int count)=0</argsstring>
        <name>Memset</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a2a356a73a8190a4d43547a722e8bc75b">Memset</reimplementedby>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a7077e32e9d445335ad5edf6a61dcc44d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Zero16</definition>
        <argsstring>(float *dst, const int count)=0</argsstring>
        <name>Zero16</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a6926096ebb584ee51b0c7a5127944090">Zero16</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1ae11193d7ac7cfddfb6f1230b49a483da" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Negate16</definition>
        <argsstring>(float *dst, const int count)=0</argsstring>
        <name>Negate16</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1aa19e9b428e9d32e4e6cd06ff5fdf1503">Negate16</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a75ee46649c527540bcdb9a97b8a82485" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Copy16</definition>
        <argsstring>(float *dst, const float *src, const int count)=0</argsstring>
        <name>Copy16</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a85742528567b371a5701e0b8dbc04e15">Copy16</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a3c58de418b4574baed64cb3e7fa08e66" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Add16</definition>
        <argsstring>(float *dst, const float *src1, const float *src2, const int count)=0</argsstring>
        <name>Add16</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1afaba52ae826ead6b1dda941a4daaa5b7">Add16</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a5c8aa6e40a8421e9a9055dd3d78ad2f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Sub16</definition>
        <argsstring>(float *dst, const float *src1, const float *src2, const int count)=0</argsstring>
        <name>Sub16</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1af84711c9fce5b4a0e764704ad4d518df">Sub16</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a2874acfd172ec9f90bf8559ffcd20497" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::Mul16</definition>
        <argsstring>(float *dst, const float *src1, const float constant, const int count)=0</argsstring>
        <name>Mul16</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a7098ca8ca8a42bc1b3e56ec19bb2197c">Mul16</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a5dd8452fbb966a8b73d53eb151d65752" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::AddAssign16</definition>
        <argsstring>(float *dst, const float *src, const int count)=0</argsstring>
        <name>AddAssign16</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a78e0d78c870682aec6c5e9f3934c696a">AddAssign16</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a4ac10e35f7455d373270cea05225779a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::SubAssign16</definition>
        <argsstring>(float *dst, const float *src, const int count)=0</argsstring>
        <name>SubAssign16</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a36b8cd57a49a1259d402b91cbb16b1d6">SubAssign16</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a8b8a673f7132b38461f37a88ae85bda0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MulAssign16</definition>
        <argsstring>(float *dst, const float constant, const int count)=0</argsstring>
        <name>MulAssign16</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a10d0c3fce1c6c053eb48fea76802ea90">MulAssign16</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>constant</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a9b7a131ad369a6e8d86b12f450efe588" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MatX_MultiplyVecX</definition>
        <argsstring>(idVecX &amp;dst, const idMatX &amp;mat, const idVecX &amp;vec)=0</argsstring>
        <name>MatX_MultiplyVecX</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1aebf296f3b917b6e76082c322caeb78ef">MatX_MultiplyVecX</reimplementedby>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1afe72d236189d7acc6e90954a9f9e9900" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MatX_MultiplyAddVecX</definition>
        <argsstring>(idVecX &amp;dst, const idMatX &amp;mat, const idVecX &amp;vec)=0</argsstring>
        <name>MatX_MultiplyAddVecX</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1aec0de36205a09528a175139f11de9d80">MatX_MultiplyAddVecX</reimplementedby>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1aefb72c7e02aa139dd67ec48e6d223504" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MatX_MultiplySubVecX</definition>
        <argsstring>(idVecX &amp;dst, const idMatX &amp;mat, const idVecX &amp;vec)=0</argsstring>
        <name>MatX_MultiplySubVecX</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1ab04507a40546327247c4c86a3ed89b7a">MatX_MultiplySubVecX</reimplementedby>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a88fd1110bbdbe19d630ca884eeddf9e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MatX_TransposeMultiplyVecX</definition>
        <argsstring>(idVecX &amp;dst, const idMatX &amp;mat, const idVecX &amp;vec)=0</argsstring>
        <name>MatX_TransposeMultiplyVecX</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1ac362640354b2ef4e24c6f926ddc47d0b">MatX_TransposeMultiplyVecX</reimplementedby>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a57569465f3e2f53448812867c51a8c2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MatX_TransposeMultiplyAddVecX</definition>
        <argsstring>(idVecX &amp;dst, const idMatX &amp;mat, const idVecX &amp;vec)=0</argsstring>
        <name>MatX_TransposeMultiplyAddVecX</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a193be815ec1aba6956c98c617df9b8db">MatX_TransposeMultiplyAddVecX</reimplementedby>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1aa0912c509aaa73aa2a72864a0eb72770" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MatX_TransposeMultiplySubVecX</definition>
        <argsstring>(idVecX &amp;dst, const idMatX &amp;mat, const idVecX &amp;vec)=0</argsstring>
        <name>MatX_TransposeMultiplySubVecX</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a39b4416205b853f35f8d0dedf1fce5e2">MatX_TransposeMultiplySubVecX</reimplementedby>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1acd64a59908409682320dfbe88591ca51" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MatX_MultiplyMatX</definition>
        <argsstring>(idMatX &amp;dst, const idMatX &amp;m1, const idMatX &amp;m2)=0</argsstring>
        <name>MatX_MultiplyMatX</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a6f9126be21a4a66deb6d2bde2396deff">MatX_MultiplyMatX</reimplementedby>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1ae79a92035199f0c8ae01783b133717eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MatX_TransposeMultiplyMatX</definition>
        <argsstring>(idMatX &amp;dst, const idMatX &amp;m1, const idMatX &amp;m2)=0</argsstring>
        <name>MatX_TransposeMultiplyMatX</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1ab3cc05e498e6b59a476311cbb4cfd404">MatX_TransposeMultiplyMatX</reimplementedby>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1aaa4ac503481ce5b0c8dadbee701818e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MatX_LowerTriangularSolve</definition>
        <argsstring>(const idMatX &amp;L, float *x, const float *b, const int n, int skip=0)=0</argsstring>
        <name>MatX_LowerTriangularSolve</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1af7b934ab2bbfdcf3570efd197e0a7bcc">MatX_LowerTriangularSolve</reimplementedby>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>L</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>skip</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a6da241d9cf4a1a94e778206836f8e3d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MatX_LowerTriangularSolveTranspose</definition>
        <argsstring>(const idMatX &amp;L, float *x, const float *b, const int n)=0</argsstring>
        <name>MatX_LowerTriangularSolveTranspose</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a631f644f5ec6645d8c34e9f0ebe04784">MatX_LowerTriangularSolveTranspose</reimplementedby>
        <param>
          <type>const <ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>L</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1ab1be51bd347a70d692e6373ebece3cfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool idSIMDProcessor::MatX_LDLTFactor</definition>
        <argsstring>(idMatX &amp;mat, idVecX &amp;invDiag, const int n)=0</argsstring>
        <name>MatX_LDLTFactor</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a4757e5dfe52438571a1867b4c3d50a7c">MatX_LDLTFactor</reimplementedby>
        <param>
          <type><ref refid="classid_mat_x" kindref="compound">idMatX</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="classid_vec_x" kindref="compound">idVecX</ref> &amp;</type>
          <declname>invDiag</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1ada530d91fb1f4109e8c80b9b993775b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::BlendJoints</definition>
        <argsstring>(idJointQuat *joints, const idJointQuat *blendJoints, const float lerp, const int *index, const int numJoints)=0</argsstring>
        <name>BlendJoints</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1abd7a96065f7f19b5fea82da203c8da0d">BlendJoints</reimplementedby>
        <param>
          <type><ref refid="classid_joint_quat" kindref="compound">idJointQuat</ref> *</type>
          <declname>joints</declname>
        </param>
        <param>
          <type>const <ref refid="classid_joint_quat" kindref="compound">idJointQuat</ref> *</type>
          <declname>blendJoints</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>lerp</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numJoints</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a4ffd724ccedb6cb5dcdb64187d873b1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::ConvertJointQuatsToJointMats</definition>
        <argsstring>(idJointMat *jointMats, const idJointQuat *jointQuats, const int numJoints)=0</argsstring>
        <name>ConvertJointQuatsToJointMats</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a777a4306064bf05af583ca672bfab079">ConvertJointQuatsToJointMats</reimplementedby>
        <param>
          <type><ref refid="classid_joint_mat" kindref="compound">idJointMat</ref> *</type>
          <declname>jointMats</declname>
        </param>
        <param>
          <type>const <ref refid="classid_joint_quat" kindref="compound">idJointQuat</ref> *</type>
          <declname>jointQuats</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numJoints</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1ab668b22ead99bb0d4b200580e70335ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::ConvertJointMatsToJointQuats</definition>
        <argsstring>(idJointQuat *jointQuats, const idJointMat *jointMats, const int numJoints)=0</argsstring>
        <name>ConvertJointMatsToJointQuats</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1aab8963de3f82c536a2022395dabff277">ConvertJointMatsToJointQuats</reimplementedby>
        <param>
          <type><ref refid="classid_joint_quat" kindref="compound">idJointQuat</ref> *</type>
          <declname>jointQuats</declname>
        </param>
        <param>
          <type>const <ref refid="classid_joint_mat" kindref="compound">idJointMat</ref> *</type>
          <declname>jointMats</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numJoints</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a8bb157f1b66982899476841a9000cce3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::TransformJoints</definition>
        <argsstring>(idJointMat *jointMats, const int *parents, const int firstJoint, const int lastJoint)=0</argsstring>
        <name>TransformJoints</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1aba9ec452a157c9c342d4b5413d1d862c">TransformJoints</reimplementedby>
        <param>
          <type><ref refid="classid_joint_mat" kindref="compound">idJointMat</ref> *</type>
          <declname>jointMats</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>parents</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>firstJoint</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>lastJoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1adf2397df605ef8455d4bc3ac0836ecd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::UntransformJoints</definition>
        <argsstring>(idJointMat *jointMats, const int *parents, const int firstJoint, const int lastJoint)=0</argsstring>
        <name>UntransformJoints</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a442046b12ddaab8bcc6dcddb0a04520e">UntransformJoints</reimplementedby>
        <param>
          <type><ref refid="classid_joint_mat" kindref="compound">idJointMat</ref> *</type>
          <declname>jointMats</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>parents</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>firstJoint</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>lastJoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a2622fc47a9e88c7e35412d0d29ca270c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::TransformVerts</definition>
        <argsstring>(idDrawVert *verts, const int numVerts, const idJointMat *joints, const idVec4 *weights, const int *index, const int numWeights)=0</argsstring>
        <name>TransformVerts</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1af95eb376c76ad7a0ef21875b375221de">TransformVerts</reimplementedby>
        <param>
          <type><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref> *</type>
          <declname>verts</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numVerts</declname>
        </param>
        <param>
          <type>const <ref refid="classid_joint_mat" kindref="compound">idJointMat</ref> *</type>
          <declname>joints</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec4" kindref="compound">idVec4</ref> *</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numWeights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a19c802ac8665f6785ba6bbf3759e3777" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::TracePointCull</definition>
        <argsstring>(byte *cullBits, byte &amp;totalOr, const float radius, const idPlane *planes, const idDrawVert *verts, const int numVerts)=0</argsstring>
        <name>TracePointCull</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1ab438130f1efca602d5b8ef06b4979dbb">TracePointCull</reimplementedby>
        <param>
          <type>byte *</type>
          <declname>cullBits</declname>
        </param>
        <param>
          <type>byte &amp;</type>
          <declname>totalOr</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> *</type>
          <declname>planes</declname>
        </param>
        <param>
          <type>const <ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref> *</type>
          <declname>verts</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numVerts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a331efaa0da74d2e6fb18bf19956482ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::DecalPointCull</definition>
        <argsstring>(byte *cullBits, const idPlane *planes, const idDrawVert *verts, const int numVerts)=0</argsstring>
        <name>DecalPointCull</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a84a2479c05a53322b2efa2dc759f8b6c">DecalPointCull</reimplementedby>
        <param>
          <type>byte *</type>
          <declname>cullBits</declname>
        </param>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> *</type>
          <declname>planes</declname>
        </param>
        <param>
          <type>const <ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref> *</type>
          <declname>verts</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numVerts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a99e77e6e5c37e126dc58bfa63c8c0fb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::OverlayPointCull</definition>
        <argsstring>(byte *cullBits, idVec2 *texCoords, const idPlane *planes, const idDrawVert *verts, const int numVerts)=0</argsstring>
        <name>OverlayPointCull</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a491b547044e9eb23f45abf12885cf25b">OverlayPointCull</reimplementedby>
        <param>
          <type>byte *</type>
          <declname>cullBits</declname>
        </param>
        <param>
          <type><ref refid="classid_vec2" kindref="compound">idVec2</ref> *</type>
          <declname>texCoords</declname>
        </param>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> *</type>
          <declname>planes</declname>
        </param>
        <param>
          <type>const <ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref> *</type>
          <declname>verts</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numVerts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a6dbe37651eafc133d8d835b62f85b535" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::DeriveTriPlanes</definition>
        <argsstring>(idPlane *planes, const idDrawVert *verts, const int numVerts, const int *indexes, const int numIndexes)=0</argsstring>
        <name>DeriveTriPlanes</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1aa775c3d4ff59df351d7abf37336ffc09">DeriveTriPlanes</reimplementedby>
        <param>
          <type><ref refid="classid_plane" kindref="compound">idPlane</ref> *</type>
          <declname>planes</declname>
        </param>
        <param>
          <type>const <ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref> *</type>
          <declname>verts</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numVerts</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>indexes</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numIndexes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a8785d3d031eefc204056ff5dda80cf3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::DeriveTangents</definition>
        <argsstring>(idPlane *planes, idDrawVert *verts, const int numVerts, const int *indexes, const int numIndexes)=0</argsstring>
        <name>DeriveTangents</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1aad4ff1da9f598b1ea4b0e2d64c1a7fe9">DeriveTangents</reimplementedby>
        <param>
          <type><ref refid="classid_plane" kindref="compound">idPlane</ref> *</type>
          <declname>planes</declname>
        </param>
        <param>
          <type><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref> *</type>
          <declname>verts</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numVerts</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>indexes</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numIndexes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1ae35cc6151b9695a44e081968eb231d67" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::DeriveUnsmoothedTangents</definition>
        <argsstring>(idDrawVert *verts, const dominantTri_s *dominantTris, const int numVerts)=0</argsstring>
        <name>DeriveUnsmoothedTangents</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a9983576704873afe281e43527530835d">DeriveUnsmoothedTangents</reimplementedby>
        <param>
          <type><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref> *</type>
          <declname>verts</declname>
        </param>
        <param>
          <type>const <ref refid="structdominant_tri__s" kindref="compound">dominantTri_s</ref> *</type>
          <declname>dominantTris</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numVerts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a26f01240389f8d5e4874c8bfc19b3977" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::NormalizeTangents</definition>
        <argsstring>(idDrawVert *verts, const int numVerts)=0</argsstring>
        <name>NormalizeTangents</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a6da181c29dc954b2839afc6e494af77c">NormalizeTangents</reimplementedby>
        <param>
          <type><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref> *</type>
          <declname>verts</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numVerts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a2f43422ae5bf7637356791cddb80bf6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::CreateTextureSpaceLightVectors</definition>
        <argsstring>(idVec3 *lightVectors, const idVec3 &amp;lightOrigin, const idDrawVert *verts, const int numVerts, const int *indexes, const int numIndexes)=0</argsstring>
        <name>CreateTextureSpaceLightVectors</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1aa0f4fc34761c57243ad6887555e4ca65">CreateTextureSpaceLightVectors</reimplementedby>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> *</type>
          <declname>lightVectors</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>lightOrigin</declname>
        </param>
        <param>
          <type>const <ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref> *</type>
          <declname>verts</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numVerts</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>indexes</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numIndexes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1af0fdd7d2cdf725dfd410d2e93de72b54" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::CreateSpecularTextureCoords</definition>
        <argsstring>(idVec4 *texCoords, const idVec3 &amp;lightOrigin, const idVec3 &amp;viewOrigin, const idDrawVert *verts, const int numVerts, const int *indexes, const int numIndexes)=0</argsstring>
        <name>CreateSpecularTextureCoords</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a85a591ebd36bbeb2c157e8ab03141b09">CreateSpecularTextureCoords</reimplementedby>
        <param>
          <type><ref refid="classid_vec4" kindref="compound">idVec4</ref> *</type>
          <declname>texCoords</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>lightOrigin</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>viewOrigin</declname>
        </param>
        <param>
          <type>const <ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref> *</type>
          <declname>verts</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numVerts</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>indexes</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numIndexes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a2a942f0a1bc22ccb8516442c8d0c352a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int idSIMDProcessor::CreateShadowCache</definition>
        <argsstring>(idVec4 *vertexCache, int *vertRemap, const idVec3 &amp;lightOrigin, const idDrawVert *verts, const int numVerts)=0</argsstring>
        <name>CreateShadowCache</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a9037fb66d2b3784fc3549527ff3548fe">CreateShadowCache</reimplementedby>
        <param>
          <type><ref refid="classid_vec4" kindref="compound">idVec4</ref> *</type>
          <declname>vertexCache</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vertRemap</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>lightOrigin</declname>
        </param>
        <param>
          <type>const <ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref> *</type>
          <declname>verts</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numVerts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a02bb0f5b84038d923452a0662716d7dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int idSIMDProcessor::CreateVertexProgramShadowCache</definition>
        <argsstring>(idVec4 *vertexCache, const idDrawVert *verts, const int numVerts)=0</argsstring>
        <name>CreateVertexProgramShadowCache</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a3f760d329bfd2aa7cda8c4038cd2ed48">CreateVertexProgramShadowCache</reimplementedby>
        <param>
          <type><ref refid="classid_vec4" kindref="compound">idVec4</ref> *</type>
          <declname>vertexCache</declname>
        </param>
        <param>
          <type>const <ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref> *</type>
          <declname>verts</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numVerts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a3d0a788a09bbb5fe0358acbca02df63a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::UpSamplePCMTo44kHz</definition>
        <argsstring>(float *dest, const short *pcm, const int numSamples, const int kHz, const int numChannels)=0</argsstring>
        <name>UpSamplePCMTo44kHz</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a99cccfe57a9c510585ba886b464dffc8">UpSamplePCMTo44kHz</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const short *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numSamples</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>kHz</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numChannels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a4c9c24b8463ec8e732671a54216b4f77" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::UpSampleOGGTo44kHz</definition>
        <argsstring>(float *dest, const float *const *ogg, const int numSamples, const int kHz, const int numChannels)=0</argsstring>
        <name>UpSampleOGGTo44kHz</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a4c731dde4c3d5916d40602f9f4a69e54">UpSampleOGGTo44kHz</reimplementedby>
        <param>
          <type>float *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const float *const *</type>
          <declname>ogg</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numSamples</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>kHz</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numChannels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a634302066cabdb0efbf5436a529e665c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MixSoundTwoSpeakerMono</definition>
        <argsstring>(float *mixBuffer, const float *samples, const int numSamples, const float lastV[2], const float currentV[2])=0</argsstring>
        <name>MixSoundTwoSpeakerMono</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a14aa31cfc100d1fa5bb607b3d56f8a34">MixSoundTwoSpeakerMono</reimplementedby>
        <param>
          <type>float *</type>
          <declname>mixBuffer</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>samples</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numSamples</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>lastV</declname>
          <array>[2]</array>
        </param>
        <param>
          <type>const float</type>
          <declname>currentV</declname>
          <array>[2]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a160ef809a9282da83d1077907ac37ecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MixSoundTwoSpeakerStereo</definition>
        <argsstring>(float *mixBuffer, const float *samples, const int numSamples, const float lastV[2], const float currentV[2])=0</argsstring>
        <name>MixSoundTwoSpeakerStereo</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a81364a28cb0fdea715e64f419a3b1293">MixSoundTwoSpeakerStereo</reimplementedby>
        <param>
          <type>float *</type>
          <declname>mixBuffer</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>samples</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numSamples</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>lastV</declname>
          <array>[2]</array>
        </param>
        <param>
          <type>const float</type>
          <declname>currentV</declname>
          <array>[2]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1acc552578ede7d47aaf4947440a1788e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MixSoundSixSpeakerMono</definition>
        <argsstring>(float *mixBuffer, const float *samples, const int numSamples, const float lastV[6], const float currentV[6])=0</argsstring>
        <name>MixSoundSixSpeakerMono</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1ab308d14666bc50920a9e8851f0a453a0">MixSoundSixSpeakerMono</reimplementedby>
        <param>
          <type>float *</type>
          <declname>mixBuffer</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>samples</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numSamples</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>lastV</declname>
          <array>[6]</array>
        </param>
        <param>
          <type>const float</type>
          <declname>currentV</declname>
          <array>[6]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="196" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a2f6688bee486ac62371b70a5c3291ad1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MixSoundSixSpeakerStereo</definition>
        <argsstring>(float *mixBuffer, const float *samples, const int numSamples, const float lastV[6], const float currentV[6])=0</argsstring>
        <name>MixSoundSixSpeakerStereo</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1a27bfa8ab8c02f05a8b4b57a7ae6b1c5d">MixSoundSixSpeakerStereo</reimplementedby>
        <param>
          <type>float *</type>
          <declname>mixBuffer</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>samples</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numSamples</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>lastV</declname>
          <array>[6]</array>
        </param>
        <param>
          <type>const float</type>
          <declname>currentV</declname>
          <array>[6]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_s_i_m_d_processor_1a7626efdd6a2497b60ea52a754f73e020" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void idSIMDProcessor::MixedSoundToSamples</definition>
        <argsstring>(short *samples, const float *mixBuffer, const int numSamples)=0</argsstring>
        <name>MixedSoundToSamples</name>
        <reimplementedby refid="classid_s_i_m_d___generic_1ac98e75d9ecd0805d4d6313d86b24b4c3">MixedSoundToSamples</reimplementedby>
        <param>
          <type>short *</type>
          <declname>samples</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>mixBuffer</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numSamples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="198" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="27531">
        <label>idSIMD_3DNow</label>
        <link refid="classid_s_i_m_d__3_d_now"/>
        <childnode refid="27530" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27529">
        <label>idSIMD_AltiVec</label>
        <link refid="classid_s_i_m_d___alti_vec"/>
        <childnode refid="27528" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27532">
        <label>idSIMD_SSE</label>
        <link refid="classid_s_i_m_d___s_s_e"/>
        <childnode refid="27530" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27530">
        <label>idSIMD_MMX</label>
        <link refid="classid_s_i_m_d___m_m_x"/>
        <childnode refid="27528" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27528">
        <label>idSIMD_Generic</label>
        <link refid="classid_s_i_m_d___generic"/>
        <childnode refid="27527" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27533">
        <label>idSIMD_SSE2</label>
        <link refid="classid_s_i_m_d___s_s_e2"/>
        <childnode refid="27532" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27534">
        <label>idSIMD_SSE3</label>
        <link refid="classid_s_i_m_d___s_s_e3"/>
        <childnode refid="27533" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27527">
        <label>idSIMDProcessor</label>
        <link refid="classid_s_i_m_d_processor"/>
      </node>
    </inheritancegraph>
    <location file="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" line="96" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/math/Simd.h" bodystart="96" bodyend="199"/>
    <listofallmembers>
      <member refid="classid_s_i_m_d_processor_1ad8ac1a4a4fdfb9a4b6a36d121a1a2a4a" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Add</name></member>
      <member refid="classid_s_i_m_d_processor_1a06ef9b642f259fbc9a28be866c072299" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Add</name></member>
      <member refid="classid_s_i_m_d_processor_1a3c58de418b4574baed64cb3e7fa08e66" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Add16</name></member>
      <member refid="classid_s_i_m_d_processor_1a5dd8452fbb966a8b73d53eb151d65752" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>AddAssign16</name></member>
      <member refid="classid_s_i_m_d_processor_1ada530d91fb1f4109e8c80b9b993775b0" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>BlendJoints</name></member>
      <member refid="classid_s_i_m_d_processor_1a6910aa9054f2a929176618398cfa46d1" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Clamp</name></member>
      <member refid="classid_s_i_m_d_processor_1a3a2816ceed55d44ccf82e6c43321b5e4" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>ClampMax</name></member>
      <member refid="classid_s_i_m_d_processor_1a92cc54b3207812294434bab033a29571" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>ClampMin</name></member>
      <member refid="classid_s_i_m_d_processor_1a9c6a58c89a520619d704b63dbcc3421c" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>CmpGE</name></member>
      <member refid="classid_s_i_m_d_processor_1ada64cff4b43168bb49d2dbbeabda1233" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>CmpGE</name></member>
      <member refid="classid_s_i_m_d_processor_1a030902b243aa5bbe1262bde5f82c46ef" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>CmpGT</name></member>
      <member refid="classid_s_i_m_d_processor_1af4ffaceb2768eecd4a487bfd23c05877" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>CmpGT</name></member>
      <member refid="classid_s_i_m_d_processor_1a462de24107d10ad6e1a25a91cda535bd" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>CmpLE</name></member>
      <member refid="classid_s_i_m_d_processor_1a4a439507d5b8f9e8c1896586f25edf7f" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>CmpLE</name></member>
      <member refid="classid_s_i_m_d_processor_1afe5ff46c091c3b0e7b678a3b27d3c78a" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>CmpLT</name></member>
      <member refid="classid_s_i_m_d_processor_1ab297276b5f58b2f1816bc7d474ea0866" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>CmpLT</name></member>
      <member refid="classid_s_i_m_d_processor_1ab668b22ead99bb0d4b200580e70335ef" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>ConvertJointMatsToJointQuats</name></member>
      <member refid="classid_s_i_m_d_processor_1a4ffd724ccedb6cb5dcdb64187d873b1e" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>ConvertJointQuatsToJointMats</name></member>
      <member refid="classid_s_i_m_d_processor_1a75ee46649c527540bcdb9a97b8a82485" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Copy16</name></member>
      <member refid="classid_s_i_m_d_processor_1a1abfed459adb3fb619112440aa865d3a" prot="public" virt="non-virtual"><scope>idSIMDProcessor</scope><name>cpuid</name></member>
      <member refid="classid_s_i_m_d_processor_1a2a942f0a1bc22ccb8516442c8d0c352a" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>CreateShadowCache</name></member>
      <member refid="classid_s_i_m_d_processor_1af0fdd7d2cdf725dfd410d2e93de72b54" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>CreateSpecularTextureCoords</name></member>
      <member refid="classid_s_i_m_d_processor_1a2f43422ae5bf7637356791cddb80bf6d" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>CreateTextureSpaceLightVectors</name></member>
      <member refid="classid_s_i_m_d_processor_1a02bb0f5b84038d923452a0662716d7dc" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>CreateVertexProgramShadowCache</name></member>
      <member refid="classid_s_i_m_d_processor_1a331efaa0da74d2e6fb18bf19956482ff" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>DecalPointCull</name></member>
      <member refid="classid_s_i_m_d_processor_1a8785d3d031eefc204056ff5dda80cf3b" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>DeriveTangents</name></member>
      <member refid="classid_s_i_m_d_processor_1a6dbe37651eafc133d8d835b62f85b535" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>DeriveTriPlanes</name></member>
      <member refid="classid_s_i_m_d_processor_1ae35cc6151b9695a44e081968eb231d67" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>DeriveUnsmoothedTangents</name></member>
      <member refid="classid_s_i_m_d_processor_1ae7187a71dfeb91b052a947d65996013a" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Div</name></member>
      <member refid="classid_s_i_m_d_processor_1a43f7534f4ddcbf69f04555f52f124f3e" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Div</name></member>
      <member refid="classid_s_i_m_d_processor_1a9fca68570c942d0694d967b885c7e8a6" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Dot</name></member>
      <member refid="classid_s_i_m_d_processor_1aea3b4d1bc308f439d658b4527bf30088" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Dot</name></member>
      <member refid="classid_s_i_m_d_processor_1ad9b17a8b0de3ca648f4360526c7ad620" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Dot</name></member>
      <member refid="classid_s_i_m_d_processor_1a15de4a5cc0c1b5a0b67f920aa7cd82c8" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Dot</name></member>
      <member refid="classid_s_i_m_d_processor_1ac25210a3eea5a5c54db30e93d3bde0e3" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Dot</name></member>
      <member refid="classid_s_i_m_d_processor_1a5a02389fd9e9e9473551bf77b128b084" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Dot</name></member>
      <member refid="classid_s_i_m_d_processor_1a8b83a65117e6671e8a46bd727927548e" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Dot</name></member>
      <member refid="classid_s_i_m_d_processor_1a60e6fad69ec84dda9591f88cd19f417f" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Dot</name></member>
      <member refid="classid_s_i_m_d_processor_1acf314f27338b0273f70b6d9b7fd54dd1" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>GetName</name></member>
      <member refid="classid_s_i_m_d_processor_1a75abe059ad7dd6b114124b4ef96c1649" prot="public" virt="non-virtual"><scope>idSIMDProcessor</scope><name>idSIMDProcessor</name></member>
      <member refid="classid_s_i_m_d_processor_1ab1be51bd347a70d692e6373ebece3cfd" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MatX_LDLTFactor</name></member>
      <member refid="classid_s_i_m_d_processor_1aaa4ac503481ce5b0c8dadbee701818e3" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MatX_LowerTriangularSolve</name></member>
      <member refid="classid_s_i_m_d_processor_1a6da241d9cf4a1a94e778206836f8e3d2" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MatX_LowerTriangularSolveTranspose</name></member>
      <member refid="classid_s_i_m_d_processor_1afe72d236189d7acc6e90954a9f9e9900" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MatX_MultiplyAddVecX</name></member>
      <member refid="classid_s_i_m_d_processor_1acd64a59908409682320dfbe88591ca51" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MatX_MultiplyMatX</name></member>
      <member refid="classid_s_i_m_d_processor_1aefb72c7e02aa139dd67ec48e6d223504" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MatX_MultiplySubVecX</name></member>
      <member refid="classid_s_i_m_d_processor_1a9b7a131ad369a6e8d86b12f450efe588" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MatX_MultiplyVecX</name></member>
      <member refid="classid_s_i_m_d_processor_1a57569465f3e2f53448812867c51a8c2c" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MatX_TransposeMultiplyAddVecX</name></member>
      <member refid="classid_s_i_m_d_processor_1ae79a92035199f0c8ae01783b133717eb" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MatX_TransposeMultiplyMatX</name></member>
      <member refid="classid_s_i_m_d_processor_1aa0912c509aaa73aa2a72864a0eb72770" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MatX_TransposeMultiplySubVecX</name></member>
      <member refid="classid_s_i_m_d_processor_1a88fd1110bbdbe19d630ca884eeddf9e7" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MatX_TransposeMultiplyVecX</name></member>
      <member refid="classid_s_i_m_d_processor_1a2718da76248b7282c72cafc5582217ec" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Memcpy</name></member>
      <member refid="classid_s_i_m_d_processor_1a60a1c6154867c014087a9c1bb032e454" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Memset</name></member>
      <member refid="classid_s_i_m_d_processor_1a5e8e3df16f7843d21518e35498517c57" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MinMax</name></member>
      <member refid="classid_s_i_m_d_processor_1a91ed12de027cbe2702ef2454ec1ef848" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MinMax</name></member>
      <member refid="classid_s_i_m_d_processor_1a2d5b1d8374756854a2f539e5266209fe" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MinMax</name></member>
      <member refid="classid_s_i_m_d_processor_1a2be19e15af3e6b733d031a86fe65042c" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MinMax</name></member>
      <member refid="classid_s_i_m_d_processor_1a125b89f4f6ad4739263b128569414eff" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MinMax</name></member>
      <member refid="classid_s_i_m_d_processor_1a7626efdd6a2497b60ea52a754f73e020" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MixedSoundToSamples</name></member>
      <member refid="classid_s_i_m_d_processor_1acc552578ede7d47aaf4947440a1788e0" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MixSoundSixSpeakerMono</name></member>
      <member refid="classid_s_i_m_d_processor_1a2f6688bee486ac62371b70a5c3291ad1" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MixSoundSixSpeakerStereo</name></member>
      <member refid="classid_s_i_m_d_processor_1a634302066cabdb0efbf5436a529e665c" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MixSoundTwoSpeakerMono</name></member>
      <member refid="classid_s_i_m_d_processor_1a160ef809a9282da83d1077907ac37ecb" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MixSoundTwoSpeakerStereo</name></member>
      <member refid="classid_s_i_m_d_processor_1a5fb966f9940513bde95e0ca9c5f5f683" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Mul</name></member>
      <member refid="classid_s_i_m_d_processor_1a5da86dab6e27c66fa2bcc6760c0f3d42" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Mul</name></member>
      <member refid="classid_s_i_m_d_processor_1a2874acfd172ec9f90bf8559ffcd20497" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Mul16</name></member>
      <member refid="classid_s_i_m_d_processor_1a3f4789698d4e74e182da4c63ef9f0678" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MulAdd</name></member>
      <member refid="classid_s_i_m_d_processor_1af9436bfc8ba221a4302d41d0ad787ebe" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MulAdd</name></member>
      <member refid="classid_s_i_m_d_processor_1a8b8a673f7132b38461f37a88ae85bda0" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MulAssign16</name></member>
      <member refid="classid_s_i_m_d_processor_1a7b2180bccd66213e588bfa1b2b4407b2" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MulSub</name></member>
      <member refid="classid_s_i_m_d_processor_1a1d113b01f580eaa0c8c26c57e3b83ce9" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>MulSub</name></member>
      <member refid="classid_s_i_m_d_processor_1ae11193d7ac7cfddfb6f1230b49a483da" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Negate16</name></member>
      <member refid="classid_s_i_m_d_processor_1a26f01240389f8d5e4874c8bfc19b3977" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>NormalizeTangents</name></member>
      <member refid="classid_s_i_m_d_processor_1a99e77e6e5c37e126dc58bfa63c8c0fb1" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>OverlayPointCull</name></member>
      <member refid="classid_s_i_m_d_processor_1a5cc6bd90bcd247c31e2508f37c859f9b" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Sub</name></member>
      <member refid="classid_s_i_m_d_processor_1ab1e5aff9888fa34f7a508dcd395c559c" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Sub</name></member>
      <member refid="classid_s_i_m_d_processor_1a5c8aa6e40a8421e9a9055dd3d78ad2f7" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Sub16</name></member>
      <member refid="classid_s_i_m_d_processor_1a4ac10e35f7455d373270cea05225779a" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>SubAssign16</name></member>
      <member refid="classid_s_i_m_d_processor_1a19c802ac8665f6785ba6bbf3759e3777" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>TracePointCull</name></member>
      <member refid="classid_s_i_m_d_processor_1a8bb157f1b66982899476841a9000cce3" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>TransformJoints</name></member>
      <member refid="classid_s_i_m_d_processor_1a2622fc47a9e88c7e35412d0d29ca270c" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>TransformVerts</name></member>
      <member refid="classid_s_i_m_d_processor_1adf2397df605ef8455d4bc3ac0836ecd7" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>UntransformJoints</name></member>
      <member refid="classid_s_i_m_d_processor_1a4c9c24b8463ec8e732671a54216b4f77" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>UpSampleOGGTo44kHz</name></member>
      <member refid="classid_s_i_m_d_processor_1a3d0a788a09bbb5fe0358acbca02df63a" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>UpSamplePCMTo44kHz</name></member>
      <member refid="classid_s_i_m_d_processor_1a7077e32e9d445335ad5edf6a61dcc44d" prot="public" virt="pure-virtual"><scope>idSIMDProcessor</scope><name>Zero16</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
