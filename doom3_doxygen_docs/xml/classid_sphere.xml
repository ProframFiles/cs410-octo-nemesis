<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classid_sphere" kind="class" prot="public">
    <compoundname>idSphere</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classid_sphere_1aac37fb2bc5667f78e3a35156f1d547ad" prot="private" static="no" mutable="no">
        <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
        <definition>idVec3 idSphere::origin</definition>
        <argsstring></argsstring>
        <name>origin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="95" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classid_sphere_1abfac761958b518fcc4f4ec39349c0104" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float idSphere::radius</definition>
        <argsstring></argsstring>
        <name>radius</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="96" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classid_sphere_1ac62f8c5fbbc756ae3f9eaab9778af318" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idSphere::idSphere</definition>
        <argsstring>(void)</argsstring>
        <name>idSphere</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="42" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="101" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1a3fb546608326f7dc471477c8fd8b650b" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idSphere::idSphere</definition>
        <argsstring>(const idVec3 &amp;point)</argsstring>
        <name>idSphere</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="43" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1a48e13ddc040bfaee6379070a6af70728" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idSphere::idSphere</definition>
        <argsstring>(const idVec3 &amp;point, const float r)</argsstring>
        <name>idSphere</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="44" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1ae2155e76befecf819101bfd5aae06273" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>ID_INLINE float idSphere::operator[]</definition>
        <argsstring>(const int index) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="46" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1aaa6d2d77a869553151bf79bd397834ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float &amp;</type>
        <definition>ID_INLINE float &amp; idSphere::operator[]</definition>
        <argsstring>(const int index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="47" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1aa6e8a4d56636177c30dec6a1fd8c749b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_sphere" kindref="compound">idSphere</ref></type>
        <definition>ID_INLINE idSphere idSphere::operator+</definition>
        <argsstring>(const idVec3 &amp;t) const </argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="48" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1a53046ff4efb42f015576bee1d503ea95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_sphere" kindref="compound">idSphere</ref> &amp;</type>
        <definition>ID_INLINE idSphere &amp; idSphere::operator+=</definition>
        <argsstring>(const idVec3 &amp;t)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="49" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1af533c93dcefaf281ad9b96da346d15c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_sphere" kindref="compound">idSphere</ref></type>
        <definition>idSphere idSphere::operator+</definition>
        <argsstring>(const idSphere &amp;s) const </argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classid_sphere" kindref="compound">idSphere</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1aa2e2b382dfb5d268ab82cca3880e2d83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_sphere" kindref="compound">idSphere</ref> &amp;</type>
        <definition>idSphere&amp; idSphere::operator+=</definition>
        <argsstring>(const idSphere &amp;s)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classid_sphere" kindref="compound">idSphere</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1ac6ec308b39fbbe9fe862be5224f12549" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idSphere::Compare</definition>
        <argsstring>(const idSphere &amp;a) const </argsstring>
        <name>Compare</name>
        <param>
          <type>const <ref refid="classid_sphere" kindref="compound">idSphere</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="53" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1a93f33a33ce10f13a7c5b40a5bc4df6a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idSphere::Compare</definition>
        <argsstring>(const idSphere &amp;a, const float epsilon) const </argsstring>
        <name>Compare</name>
        <param>
          <type>const <ref refid="classid_sphere" kindref="compound">idSphere</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="54" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="135" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1a99ff07d377533ec6d1ed3e345bc11fc0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idSphere::operator==</definition>
        <argsstring>(const idSphere &amp;a) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classid_sphere" kindref="compound">idSphere</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="55" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="139" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1a7fb8c0efbd234044565b851dc33c80f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idSphere::operator!=</definition>
        <argsstring>(const idSphere &amp;a) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classid_sphere" kindref="compound">idSphere</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="56" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1ab1bb815fbb4442dd54a1ef66aa9f48e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idSphere::Clear</definition>
        <argsstring>(void)</argsstring>
        <name>Clear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="58" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1a4f19d83c1277c60bef48ca76190999b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idSphere::Zero</definition>
        <argsstring>(void)</argsstring>
        <name>Zero</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="59" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1a4d4cc70b7d7558737bdff21227604a0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idSphere::SetOrigin</definition>
        <argsstring>(const idVec3 &amp;o)</argsstring>
        <name>SetOrigin</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="60" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="157" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1a9b3e4e4220842fa03294666292f066b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idSphere::SetRadius</definition>
        <argsstring>(const float r)</argsstring>
        <name>SetRadius</name>
        <param>
          <type>const float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="61" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="161" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1a92ee5e51e51aee5135257bb812a86075" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
        <definition>ID_INLINE const idVec3 &amp; idSphere::GetOrigin</definition>
        <argsstring>(void) const </argsstring>
        <name>GetOrigin</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="63" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="165" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1ae5409561ec005b66da639552af947e91" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>ID_INLINE float idSphere::GetRadius</definition>
        <argsstring>(void) const </argsstring>
        <name>GetRadius</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="64" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="169" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1abb5eed366cad6992e2ff94b177f26d09" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idSphere::IsCleared</definition>
        <argsstring>(void) const </argsstring>
        <name>IsCleared</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="65" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="173" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1a7ffd6b617cc342e7e06470a3468532bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idSphere::AddPoint</definition>
        <argsstring>(const idVec3 &amp;p)</argsstring>
        <name>AddPoint</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="67" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="177" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1a7879a8baebd1524dbf01bc2840f8b6ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idSphere::AddSphere</definition>
        <argsstring>(const idSphere &amp;s)</argsstring>
        <name>AddSphere</name>
        <param>
          <type>const <ref refid="classid_sphere" kindref="compound">idSphere</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="68" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="195" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1a97f1f80e4234c8b5c5f5737173c593d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_sphere" kindref="compound">idSphere</ref></type>
        <definition>ID_INLINE idSphere idSphere::Expand</definition>
        <argsstring>(const float d) const </argsstring>
        <name>Expand</name>
        <param>
          <type>const float</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="69" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="213" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1a61f8225d19feb76d955bf6e29690d59d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_sphere" kindref="compound">idSphere</ref> &amp;</type>
        <definition>ID_INLINE idSphere &amp; idSphere::ExpandSelf</definition>
        <argsstring>(const float d)</argsstring>
        <name>ExpandSelf</name>
        <param>
          <type>const float</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="70" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="217" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1a52a665be8931b711a74db7fa92bb5d81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_sphere" kindref="compound">idSphere</ref></type>
        <definition>ID_INLINE idSphere idSphere::Translate</definition>
        <argsstring>(const idVec3 &amp;translation) const </argsstring>
        <name>Translate</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>translation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="71" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="222" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1a046db4c0ad8ab47eeb0014d1ab390b82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_sphere" kindref="compound">idSphere</ref> &amp;</type>
        <definition>ID_INLINE idSphere &amp; idSphere::TranslateSelf</definition>
        <argsstring>(const idVec3 &amp;translation)</argsstring>
        <name>TranslateSelf</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>translation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="72" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1aa6eb7a964baf26922141bef3aacef525" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float idSphere::PlaneDistance</definition>
        <argsstring>(const idPlane &amp;plane) const </argsstring>
        <name>PlaneDistance</name>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>plane</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="74" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.cpp" bodystart="41" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1a96bc2dbed235865ac904d9795bacdb0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int idSphere::PlaneSide</definition>
        <argsstring>(const idPlane &amp;plane, const float epsilon=ON_EPSILON) const </argsstring>
        <name>PlaneSide</name>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>plane</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>ON_EPSILON</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="75" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.cpp" bodystart="59" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1aac0394f97f7e24d656d3df0688669c86" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idSphere::ContainsPoint</definition>
        <argsstring>(const idVec3 &amp;p) const </argsstring>
        <name>ContainsPoint</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="77" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="231" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1a8f7c0f40e4bbff8ded782959788abd6a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idSphere::IntersectsSphere</definition>
        <argsstring>(const idSphere &amp;s) const </argsstring>
        <name>IntersectsSphere</name>
        <param>
          <type>const <ref refid="classid_sphere" kindref="compound">idSphere</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="78" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="238" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1a426ded36f6741a314387fb3f4393da2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idSphere::LineIntersection</definition>
        <argsstring>(const idVec3 &amp;start, const idVec3 &amp;end) const </argsstring>
        <name>LineIntersection</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="79" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.cpp" bodystart="79" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1ad1938d77cda1ff3e6562f84163c89475" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idSphere::RayIntersection</definition>
        <argsstring>(const idVec3 &amp;start, const idVec3 &amp;dir, float &amp;scale1, float &amp;scale2) const </argsstring>
        <name>RayIntersection</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>scale1</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>scale2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="81" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.cpp" bodystart="108" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1aba1b090b5c271bdef432a4f23f864526" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idSphere::FromPoints</definition>
        <argsstring>(const idVec3 *points, const int numPoints)</argsstring>
        <name>FromPoints</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> *</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numPoints</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="84" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.cpp" bodystart="138" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1aeb43b0484e1f8c6beddfeb1f4f54971b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idSphere::FromPointTranslation</definition>
        <argsstring>(const idVec3 &amp;point, const idVec3 &amp;translation)</argsstring>
        <name>FromPointTranslation</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>translation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="86" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1aa8c31f8b340d7a66cb9deedc1d231011" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idSphere::FromSphereTranslation</definition>
        <argsstring>(const idSphere &amp;sphere, const idVec3 &amp;start, const idVec3 &amp;translation)</argsstring>
        <name>FromSphereTranslation</name>
        <param>
          <type>const <ref refid="classid_sphere" kindref="compound">idSphere</ref> &amp;</type>
          <declname>sphere</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>translation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="87" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="251" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1a969e8cc7961ea5433d9d706adf471a49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idSphere::FromPointRotation</definition>
        <argsstring>(const idVec3 &amp;point, const idRotation &amp;rotation)</argsstring>
        <name>FromPointRotation</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const <ref refid="classid_rotation" kindref="compound">idRotation</ref> &amp;</type>
          <declname>rotation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="89" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="256" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1ac6532c7fa46f7ed1eaaa7c42276cd2c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idSphere::FromSphereRotation</definition>
        <argsstring>(const idSphere &amp;sphere, const idVec3 &amp;start, const idRotation &amp;rotation)</argsstring>
        <name>FromSphereRotation</name>
        <param>
          <type>const <ref refid="classid_sphere" kindref="compound">idSphere</ref> &amp;</type>
          <declname>sphere</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const <ref refid="classid_rotation" kindref="compound">idRotation</ref> &amp;</type>
          <declname>rotation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="90" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="262" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classid_sphere_1a1e63dd69d7e984dad832e759f44ef70a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idSphere::AxisProjection</definition>
        <argsstring>(const idVec3 &amp;dir, float &amp;min, float &amp;max) const </argsstring>
        <name>AxisProjection</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="92" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="268" bodyend="273"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" line="40" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/bv/Sphere.h" bodystart="40" bodyend="97"/>
    <listofallmembers>
      <member refid="classid_sphere_1a7ffd6b617cc342e7e06470a3468532bd" prot="public" virt="non-virtual"><scope>idSphere</scope><name>AddPoint</name></member>
      <member refid="classid_sphere_1a7879a8baebd1524dbf01bc2840f8b6ef" prot="public" virt="non-virtual"><scope>idSphere</scope><name>AddSphere</name></member>
      <member refid="classid_sphere_1a1e63dd69d7e984dad832e759f44ef70a" prot="public" virt="non-virtual"><scope>idSphere</scope><name>AxisProjection</name></member>
      <member refid="classid_sphere_1ab1bb815fbb4442dd54a1ef66aa9f48e6" prot="public" virt="non-virtual"><scope>idSphere</scope><name>Clear</name></member>
      <member refid="classid_sphere_1ac6ec308b39fbbe9fe862be5224f12549" prot="public" virt="non-virtual"><scope>idSphere</scope><name>Compare</name></member>
      <member refid="classid_sphere_1a93f33a33ce10f13a7c5b40a5bc4df6a0" prot="public" virt="non-virtual"><scope>idSphere</scope><name>Compare</name></member>
      <member refid="classid_sphere_1aac0394f97f7e24d656d3df0688669c86" prot="public" virt="non-virtual"><scope>idSphere</scope><name>ContainsPoint</name></member>
      <member refid="classid_sphere_1a97f1f80e4234c8b5c5f5737173c593d4" prot="public" virt="non-virtual"><scope>idSphere</scope><name>Expand</name></member>
      <member refid="classid_sphere_1a61f8225d19feb76d955bf6e29690d59d" prot="public" virt="non-virtual"><scope>idSphere</scope><name>ExpandSelf</name></member>
      <member refid="classid_sphere_1a969e8cc7961ea5433d9d706adf471a49" prot="public" virt="non-virtual"><scope>idSphere</scope><name>FromPointRotation</name></member>
      <member refid="classid_sphere_1aba1b090b5c271bdef432a4f23f864526" prot="public" virt="non-virtual"><scope>idSphere</scope><name>FromPoints</name></member>
      <member refid="classid_sphere_1aeb43b0484e1f8c6beddfeb1f4f54971b" prot="public" virt="non-virtual"><scope>idSphere</scope><name>FromPointTranslation</name></member>
      <member refid="classid_sphere_1ac6532c7fa46f7ed1eaaa7c42276cd2c8" prot="public" virt="non-virtual"><scope>idSphere</scope><name>FromSphereRotation</name></member>
      <member refid="classid_sphere_1aa8c31f8b340d7a66cb9deedc1d231011" prot="public" virt="non-virtual"><scope>idSphere</scope><name>FromSphereTranslation</name></member>
      <member refid="classid_sphere_1a92ee5e51e51aee5135257bb812a86075" prot="public" virt="non-virtual"><scope>idSphere</scope><name>GetOrigin</name></member>
      <member refid="classid_sphere_1ae5409561ec005b66da639552af947e91" prot="public" virt="non-virtual"><scope>idSphere</scope><name>GetRadius</name></member>
      <member refid="classid_sphere_1ac62f8c5fbbc756ae3f9eaab9778af318" prot="public" virt="non-virtual"><scope>idSphere</scope><name>idSphere</name></member>
      <member refid="classid_sphere_1a3fb546608326f7dc471477c8fd8b650b" prot="public" virt="non-virtual"><scope>idSphere</scope><name>idSphere</name></member>
      <member refid="classid_sphere_1a48e13ddc040bfaee6379070a6af70728" prot="public" virt="non-virtual"><scope>idSphere</scope><name>idSphere</name></member>
      <member refid="classid_sphere_1a8f7c0f40e4bbff8ded782959788abd6a" prot="public" virt="non-virtual"><scope>idSphere</scope><name>IntersectsSphere</name></member>
      <member refid="classid_sphere_1abb5eed366cad6992e2ff94b177f26d09" prot="public" virt="non-virtual"><scope>idSphere</scope><name>IsCleared</name></member>
      <member refid="classid_sphere_1a426ded36f6741a314387fb3f4393da2f" prot="public" virt="non-virtual"><scope>idSphere</scope><name>LineIntersection</name></member>
      <member refid="classid_sphere_1a7fb8c0efbd234044565b851dc33c80f5" prot="public" virt="non-virtual"><scope>idSphere</scope><name>operator!=</name></member>
      <member refid="classid_sphere_1aa6e8a4d56636177c30dec6a1fd8c749b" prot="public" virt="non-virtual"><scope>idSphere</scope><name>operator+</name></member>
      <member refid="classid_sphere_1af533c93dcefaf281ad9b96da346d15c2" prot="public" virt="non-virtual"><scope>idSphere</scope><name>operator+</name></member>
      <member refid="classid_sphere_1a53046ff4efb42f015576bee1d503ea95" prot="public" virt="non-virtual"><scope>idSphere</scope><name>operator+=</name></member>
      <member refid="classid_sphere_1aa2e2b382dfb5d268ab82cca3880e2d83" prot="public" virt="non-virtual"><scope>idSphere</scope><name>operator+=</name></member>
      <member refid="classid_sphere_1a99ff07d377533ec6d1ed3e345bc11fc0" prot="public" virt="non-virtual"><scope>idSphere</scope><name>operator==</name></member>
      <member refid="classid_sphere_1ae2155e76befecf819101bfd5aae06273" prot="public" virt="non-virtual"><scope>idSphere</scope><name>operator[]</name></member>
      <member refid="classid_sphere_1aaa6d2d77a869553151bf79bd397834ce" prot="public" virt="non-virtual"><scope>idSphere</scope><name>operator[]</name></member>
      <member refid="classid_sphere_1aac37fb2bc5667f78e3a35156f1d547ad" prot="private" virt="non-virtual"><scope>idSphere</scope><name>origin</name></member>
      <member refid="classid_sphere_1aa6eb7a964baf26922141bef3aacef525" prot="public" virt="non-virtual"><scope>idSphere</scope><name>PlaneDistance</name></member>
      <member refid="classid_sphere_1a96bc2dbed235865ac904d9795bacdb0d" prot="public" virt="non-virtual"><scope>idSphere</scope><name>PlaneSide</name></member>
      <member refid="classid_sphere_1abfac761958b518fcc4f4ec39349c0104" prot="private" virt="non-virtual"><scope>idSphere</scope><name>radius</name></member>
      <member refid="classid_sphere_1ad1938d77cda1ff3e6562f84163c89475" prot="public" virt="non-virtual"><scope>idSphere</scope><name>RayIntersection</name></member>
      <member refid="classid_sphere_1a4d4cc70b7d7558737bdff21227604a0a" prot="public" virt="non-virtual"><scope>idSphere</scope><name>SetOrigin</name></member>
      <member refid="classid_sphere_1a9b3e4e4220842fa03294666292f066b1" prot="public" virt="non-virtual"><scope>idSphere</scope><name>SetRadius</name></member>
      <member refid="classid_sphere_1a52a665be8931b711a74db7fa92bb5d81" prot="public" virt="non-virtual"><scope>idSphere</scope><name>Translate</name></member>
      <member refid="classid_sphere_1a046db4c0ad8ab47eeb0014d1ab390b82" prot="public" virt="non-virtual"><scope>idSphere</scope><name>TranslateSelf</name></member>
      <member refid="classid_sphere_1a4f19d83c1277c60bef48ca76190999b7" prot="public" virt="non-virtual"><scope>idSphere</scope><name>Zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
