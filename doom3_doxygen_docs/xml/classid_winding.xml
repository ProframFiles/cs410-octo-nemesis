<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classid_winding" kind="class" prot="public">
    <compoundname>idWinding</compoundname>
    <derivedcompoundref refid="classid_fixed_winding" prot="public" virt="non-virtual">idFixedWinding</derivedcompoundref>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classid_winding_1aff52ffaf7141357566130528d7ef35b6" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int idWinding::numPoints</definition>
        <argsstring></argsstring>
        <name>numPoints</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="124" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classid_winding_1a045d67cbe10a3b1b8921ac5ae13a8be9" prot="protected" static="no" mutable="no">
        <type><ref refid="classid_vec5" kindref="compound">idVec5</ref> *</type>
        <definition>idVec5* idWinding::p</definition>
        <argsstring></argsstring>
        <name>p</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="125" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classid_winding_1a146bcb70e81fa6d19ce08ee55e99390f" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int idWinding::allocedSize</definition>
        <argsstring></argsstring>
        <name>allocedSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="126" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classid_winding_1ae567f3be65f9e3c057efef6c85ba8d08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idWinding::idWinding</definition>
        <argsstring>(void)</argsstring>
        <name>idWinding</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="43" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a1f9fc9e4ec9ad19a3ad6b4e9b7074e2f" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idWinding::idWinding</definition>
        <argsstring>(const int n)</argsstring>
        <name>idWinding</name>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="44" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" bodystart="137" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1addc7a122cb1c4fd4aff3e389c1bdd983" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idWinding::idWinding</definition>
        <argsstring>(const idVec3 *verts, const int n)</argsstring>
        <name>idWinding</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> *</type>
          <declname>verts</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="45" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" bodystart="143" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a86d925ebdcf6c5f02d9a8868d198fa5b" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idWinding::idWinding</definition>
        <argsstring>(const idVec3 &amp;normal, const float dist)</argsstring>
        <name>idWinding</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>normal</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>dist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="46" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" bodystart="159" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1aee2607a489793bfaad06b9209b25f8e0" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idWinding::idWinding</definition>
        <argsstring>(const idPlane &amp;plane)</argsstring>
        <name>idWinding</name>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>plane</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="47" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" bodystart="165" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a73a2d1c06ffa37477c9d928fb23d995b" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>ID_INLINE idWinding::idWinding</definition>
        <argsstring>(const idWinding &amp;winding)</argsstring>
        <name>idWinding</name>
        <param>
          <type>const <ref refid="classid_winding" kindref="compound">idWinding</ref> &amp;</type>
          <declname>winding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="48" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" bodystart="171" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a171b5c773cae0e85f6283f8a141a41cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>ID_INLINE idWinding::~idWinding</definition>
        <argsstring>(void)</argsstring>
        <name>~idWinding</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="49" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a2e67733ee4b167845175c002074140b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_winding" kindref="compound">idWinding</ref> &amp;</type>
        <definition>ID_INLINE idWinding &amp; idWinding::operator=</definition>
        <argsstring>(const idWinding &amp;winding)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classid_winding" kindref="compound">idWinding</ref> &amp;</type>
          <declname>winding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="51" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" bodystart="188" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a843a7f9f0d1f36abd7240826fbe0e9a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classid_vec5" kindref="compound">idVec5</ref> &amp;</type>
        <definition>ID_INLINE const idVec5 &amp; idWinding::operator[]</definition>
        <argsstring>(const int index) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="52" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" bodystart="202" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1ac661ed30870302548e33b8e97892e8de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_vec5" kindref="compound">idVec5</ref> &amp;</type>
        <definition>ID_INLINE idVec5 &amp; idWinding::operator[]</definition>
        <argsstring>(const int index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="53" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" bodystart="207" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1adb96185a46982b749cd39fc87c4fd8e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_winding" kindref="compound">idWinding</ref> &amp;</type>
        <definition>ID_INLINE idWinding &amp; idWinding::operator+=</definition>
        <argsstring>(const idVec3 &amp;v)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="56" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" bodystart="212" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a567ac0f39e32fd83259b0e57c7e13be9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_winding" kindref="compound">idWinding</ref> &amp;</type>
        <definition>ID_INLINE idWinding &amp; idWinding::operator+=</definition>
        <argsstring>(const idVec5 &amp;v)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classid_vec5" kindref="compound">idVec5</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="57" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" bodystart="217" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1ab871c4db6103d88a3af7d84c38dc11db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idWinding::AddPoint</definition>
        <argsstring>(const idVec3 &amp;v)</argsstring>
        <name>AddPoint</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="58" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" bodystart="222" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a7dc13952d2479c0985f140b17e0288a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idWinding::AddPoint</definition>
        <argsstring>(const idVec5 &amp;v)</argsstring>
        <name>AddPoint</name>
        <param>
          <type>const <ref refid="classid_vec5" kindref="compound">idVec5</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="59" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" bodystart="230" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a4f1c919fbeb41755ed671592f3702e02" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>ID_INLINE int idWinding::GetNumPoints</definition>
        <argsstring>(void) const </argsstring>
        <name>GetNumPoints</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="62" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" bodystart="238" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1af4e0901a52eb7c83f6ca03e699112d25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idWinding::SetNumPoints</definition>
        <argsstring>(int n)</argsstring>
        <name>SetNumPoints</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="63" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" bodystart="242" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a63310aaab2b8fbf0e10eb94ee28dca54" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>ID_INLINE void idWinding::Clear</definition>
        <argsstring>(void)</argsstring>
        <name>Clear</name>
        <reimplementedby refid="classid_fixed_winding_1a03cdba2e366184b0fef45afa039f5d28">Clear</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="64" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" bodystart="249" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a75f9c55b22644dc1019d17769cae32d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idWinding::BaseForPlane</definition>
        <argsstring>(const idVec3 &amp;normal, const float dist)</argsstring>
        <name>BaseForPlane</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>normal</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>dist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="67" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="66" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1ad7c1314d1128d2dd9d3f36dbc3f8610d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ID_INLINE void idWinding::BaseForPlane</definition>
        <argsstring>(const idPlane &amp;plane)</argsstring>
        <name>BaseForPlane</name>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>plane</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="68" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" bodystart="255" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a48301edb8c2560b3dbb08ab6d3f0cd47" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int idWinding::Split</definition>
        <argsstring>(const idPlane &amp;plane, const float epsilon, idWinding **front, idWinding **back) const </argsstring>
        <name>Split</name>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>plane</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type><ref refid="classid_winding" kindref="compound">idWinding</ref> **</type>
          <declname>front</declname>
        </param>
        <param>
          <type><ref refid="classid_winding" kindref="compound">idWinding</ref> **</type>
          <declname>back</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="72" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="92" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a4adab04f4f35c58fc184c3ed41e51ae9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_winding" kindref="compound">idWinding</ref> *</type>
        <definition>idWinding * idWinding::Clip</definition>
        <argsstring>(const idPlane &amp;plane, const float epsilon=ON_EPSILON, const bool keepOn=false)</argsstring>
        <name>Clip</name>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>plane</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>ON_EPSILON</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>keepOn</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="75" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="234" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1aa147cf30b2dec4a787fb235f8522577b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idWinding::ClipInPlace</definition>
        <argsstring>(const idPlane &amp;plane, const float epsilon=ON_EPSILON, const bool keepOn=false)</argsstring>
        <name>ClipInPlace</name>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>plane</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>ON_EPSILON</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>keepOn</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="78" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="349" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a75bbad86666b80648d949255906c5c69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_winding" kindref="compound">idWinding</ref> *</type>
        <definition>idWinding * idWinding::Copy</definition>
        <argsstring>(void) const </argsstring>
        <name>Copy</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="81" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="464" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a717596633d3f05e73ae0210987a97add" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_winding" kindref="compound">idWinding</ref> *</type>
        <definition>idWinding * idWinding::Reverse</definition>
        <argsstring>(void) const </argsstring>
        <name>Reverse</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="82" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="478" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a6f1ba960a5cb5ad4d1f866fd41ae8826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idWinding::ReverseSelf</definition>
        <argsstring>(void)</argsstring>
        <name>ReverseSelf</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="83" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="495" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1ad5e6eb6a2a0960935fc9c15a2a82c9b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idWinding::RemoveEqualPoints</definition>
        <argsstring>(const float epsilon=ON_EPSILON)</argsstring>
        <name>RemoveEqualPoints</name>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>ON_EPSILON</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="84" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="733" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1ac18c0e392c8105031f56c4795b4fd0f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idWinding::RemoveColinearPoints</definition>
        <argsstring>(const idVec3 &amp;normal, const float epsilon=ON_EPSILON)</argsstring>
        <name>RemoveColinearPoints</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>normal</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>ON_EPSILON</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="85" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="753" bodyend="779"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a86c6068603fae3b11b7a4ac7118f5f3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idWinding::RemovePoint</definition>
        <argsstring>(int point)</argsstring>
        <name>RemovePoint</name>
        <param>
          <type>int</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="86" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="1106" bodyend="1114"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a26f459a7b51eb5a198f39097cde7896f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idWinding::InsertPoint</definition>
        <argsstring>(const idVec3 &amp;point, int spot)</argsstring>
        <name>InsertPoint</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>int</type>
          <declname>spot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="87" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="1121" bodyend="1138"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1adfcabb397b1f3489e0d759714f901847" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idWinding::InsertPointIfOnEdge</definition>
        <argsstring>(const idVec3 &amp;point, const idPlane &amp;plane, const float epsilon=ON_EPSILON)</argsstring>
        <name>InsertPointIfOnEdge</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>plane</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>ON_EPSILON</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="88" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="1145" bodyend="1193"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a06107b861c6798d2223008f1db3e40e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idWinding::AddToConvexHull</definition>
        <argsstring>(const idWinding *winding, const idVec3 &amp;normal, const float epsilon=ON_EPSILON)</argsstring>
        <name>AddToConvexHull</name>
        <param>
          <type>const <ref refid="classid_winding" kindref="compound">idWinding</ref> *</type>
          <declname>winding</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>normal</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>ON_EPSILON</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="90" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="789" bodyend="871"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a09eccc7523cb47d6d5c671309c02341c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idWinding::AddToConvexHull</definition>
        <argsstring>(const idVec3 &amp;point, const idVec3 &amp;normal, const float epsilon=ON_EPSILON)</argsstring>
        <name>AddToConvexHull</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>normal</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>ON_EPSILON</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="92" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="881" bodyend="989"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1abee134560884e67ddae447147ef70c73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_winding" kindref="compound">idWinding</ref> *</type>
        <definition>idWinding * idWinding::TryMerge</definition>
        <argsstring>(const idWinding &amp;w, const idVec3 &amp;normal, int keep=false) const </argsstring>
        <name>TryMerge</name>
        <param>
          <type>const <ref refid="classid_winding" kindref="compound">idWinding</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>normal</declname>
        </param>
        <param>
          <type>int</type>
          <declname>keep</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="95" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="998" bodyend="1099"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a3608ddf436bc54005d938078151b34d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idWinding::Check</definition>
        <argsstring>(bool print=true) const </argsstring>
        <name>Check</name>
        <param>
          <type>bool</type>
          <declname>print</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="97" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="511" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1ab893b8acfe926475ec1a117722b30130" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float idWinding::GetArea</definition>
        <argsstring>(void) const </argsstring>
        <name>GetArea</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="99" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="598" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1ae0c48e7b2ac1208d1b691c3e160dceb4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
        <definition>idVec3 idWinding::GetCenter</definition>
        <argsstring>(void) const </argsstring>
        <name>GetCenter</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="100" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="639" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1acef7d7dcd1d7ac9c123a4baccae065c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float idWinding::GetRadius</definition>
        <argsstring>(const idVec3 &amp;center) const </argsstring>
        <name>GetRadius</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>center</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="101" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="618" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a83ac6e1cadfe33a9ccf23a028f380af3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idWinding::GetPlane</definition>
        <argsstring>(idVec3 &amp;normal, float &amp;dist) const </argsstring>
        <name>GetPlane</name>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>normal</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>dist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="102" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="656" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1af572e35ceea745877ce6f1339b368208" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idWinding::GetPlane</definition>
        <argsstring>(idPlane &amp;plane) const </argsstring>
        <name>GetPlane</name>
        <param>
          <type><ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>plane</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="103" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="678" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a6a80a283586ca89bbf134acfc78e1a82" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idWinding::GetBounds</definition>
        <argsstring>(idBounds &amp;bounds) const </argsstring>
        <name>GetBounds</name>
        <param>
          <type><ref refid="classid_bounds" kindref="compound">idBounds</ref> &amp;</type>
          <declname>bounds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="104" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="700" bodyend="726"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1ad1ed690e81ba76ae03f78accf75cf5a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idWinding::IsTiny</definition>
        <argsstring>(void) const </argsstring>
        <name>IsTiny</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="106" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="1202" bodyend="1219"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a86b90f1f50555d45d6d227ab68b07afa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idWinding::IsHuge</definition>
        <argsstring>(void) const </argsstring>
        <name>IsHuge</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="107" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="1226" bodyend="1237"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1aec4a3da9da2786f591ecdcede86a4b7d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idWinding::Print</definition>
        <argsstring>(void) const </argsstring>
        <name>Print</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="108" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="1244" bodyend="1250"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a1aacbca5a777f4f1288e946041ab024c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float idWinding::PlaneDistance</definition>
        <argsstring>(const idPlane &amp;plane) const </argsstring>
        <name>PlaneDistance</name>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>plane</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="110" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="1257" bodyend="1285"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1ac631fd9cebf953f76bc7c2bdaef04478" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int idWinding::PlaneSide</definition>
        <argsstring>(const idPlane &amp;plane, const float epsilon=ON_EPSILON) const </argsstring>
        <name>PlaneSide</name>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>plane</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
          <defval>ON_EPSILON</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="111" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="1292" bodyend="1324"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1ad1a71c2bda39690f485d2904062af29b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idWinding::PlanesConcave</definition>
        <argsstring>(const idWinding &amp;w2, const idVec3 &amp;normal1, const idVec3 &amp;normal2, float dist1, float dist2) const </argsstring>
        <name>PlanesConcave</name>
        <param>
          <type>const <ref refid="classid_winding" kindref="compound">idWinding</ref> &amp;</type>
          <declname>w2</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>normal1</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>normal2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>dist1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>dist2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="113" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="1333" bodyend="1350"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a5d9b366b5e2a39044d85936c1fa057d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idWinding::PointInside</definition>
        <argsstring>(const idVec3 &amp;normal, const idVec3 &amp;point, const float epsilon) const </argsstring>
        <name>PointInside</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>normal</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="115" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="1357" bodyend="1372"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a8f5f4d78c3ee6e37e3f96295c3e5b818" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idWinding::LineIntersection</definition>
        <argsstring>(const idPlane &amp;windingPlane, const idVec3 &amp;start, const idVec3 &amp;end, bool backFaceCull=false) const </argsstring>
        <name>LineIntersection</name>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>windingPlane</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>end</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>backFaceCull</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="117" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="1379" bodyend="1412"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1ab576d44ecf5a2b6c12087026f1df1850" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool idWinding::RayIntersection</definition>
        <argsstring>(const idPlane &amp;windingPlane, const idVec3 &amp;start, const idVec3 &amp;dir, float &amp;scale, bool backFaceCull=false) const </argsstring>
        <name>RayIntersection</name>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>windingPlane</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>backFaceCull</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="119" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="1419" bodyend="1439"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classid_winding_1a8242f7521b08f6d865eb255df489b742" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float idWinding::TriangleArea</definition>
        <argsstring>(const idVec3 &amp;a, const idVec3 &amp;b, const idVec3 &amp;c)</argsstring>
        <name>TriangleArea</name>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="121" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="1446" bodyend="1454"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classid_winding_1abddfcd2bc27544044a805c8a6f57a854" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>ID_INLINE bool idWinding::EnsureAlloced</definition>
        <argsstring>(int n, bool keep=false)</argsstring>
        <name>EnsureAlloced</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keep</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="128" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" bodystart="259" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classid_winding_1a9546143800773f3fce8bd8ca3e507e61" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool idWinding::ReAllocate</definition>
        <argsstring>(int n, bool keep=false)</argsstring>
        <name>ReAllocate</name>
        <reimplementedby refid="classid_fixed_winding_1a5f7e307e89275fb26912f45731f7fbd6">ReAllocate</reimplementedby>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keep</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="129" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.cpp" bodystart="44" bodyend="59"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="29738">
        <label>idFixedWinding</label>
        <link refid="classid_fixed_winding"/>
        <childnode refid="29737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="29737">
        <label>idWinding</label>
        <link refid="classid_winding"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="29740">
        <label>idVec5</label>
        <link refid="classid_vec5"/>
      </node>
      <node id="29739">
        <label>idWinding</label>
        <link refid="classid_winding"/>
        <childnode refid="29740" relation="usage">
          <edgelabel>p</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" line="40" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/idlib/geometry/Winding.h" bodystart="40" bodyend="130"/>
    <listofallmembers>
      <member refid="classid_winding_1ab871c4db6103d88a3af7d84c38dc11db" prot="public" virt="non-virtual"><scope>idWinding</scope><name>AddPoint</name></member>
      <member refid="classid_winding_1a7dc13952d2479c0985f140b17e0288a2" prot="public" virt="non-virtual"><scope>idWinding</scope><name>AddPoint</name></member>
      <member refid="classid_winding_1a06107b861c6798d2223008f1db3e40e0" prot="public" virt="non-virtual"><scope>idWinding</scope><name>AddToConvexHull</name></member>
      <member refid="classid_winding_1a09eccc7523cb47d6d5c671309c02341c" prot="public" virt="non-virtual"><scope>idWinding</scope><name>AddToConvexHull</name></member>
      <member refid="classid_winding_1a146bcb70e81fa6d19ce08ee55e99390f" prot="protected" virt="non-virtual"><scope>idWinding</scope><name>allocedSize</name></member>
      <member refid="classid_winding_1a75f9c55b22644dc1019d17769cae32d9" prot="public" virt="non-virtual"><scope>idWinding</scope><name>BaseForPlane</name></member>
      <member refid="classid_winding_1ad7c1314d1128d2dd9d3f36dbc3f8610d" prot="public" virt="non-virtual"><scope>idWinding</scope><name>BaseForPlane</name></member>
      <member refid="classid_winding_1a3608ddf436bc54005d938078151b34d2" prot="public" virt="non-virtual"><scope>idWinding</scope><name>Check</name></member>
      <member refid="classid_winding_1a63310aaab2b8fbf0e10eb94ee28dca54" prot="public" virt="virtual"><scope>idWinding</scope><name>Clear</name></member>
      <member refid="classid_winding_1a4adab04f4f35c58fc184c3ed41e51ae9" prot="public" virt="non-virtual"><scope>idWinding</scope><name>Clip</name></member>
      <member refid="classid_winding_1aa147cf30b2dec4a787fb235f8522577b" prot="public" virt="non-virtual"><scope>idWinding</scope><name>ClipInPlace</name></member>
      <member refid="classid_winding_1a75bbad86666b80648d949255906c5c69" prot="public" virt="non-virtual"><scope>idWinding</scope><name>Copy</name></member>
      <member refid="classid_winding_1abddfcd2bc27544044a805c8a6f57a854" prot="protected" virt="non-virtual"><scope>idWinding</scope><name>EnsureAlloced</name></member>
      <member refid="classid_winding_1ab893b8acfe926475ec1a117722b30130" prot="public" virt="non-virtual"><scope>idWinding</scope><name>GetArea</name></member>
      <member refid="classid_winding_1a6a80a283586ca89bbf134acfc78e1a82" prot="public" virt="non-virtual"><scope>idWinding</scope><name>GetBounds</name></member>
      <member refid="classid_winding_1ae0c48e7b2ac1208d1b691c3e160dceb4" prot="public" virt="non-virtual"><scope>idWinding</scope><name>GetCenter</name></member>
      <member refid="classid_winding_1a4f1c919fbeb41755ed671592f3702e02" prot="public" virt="non-virtual"><scope>idWinding</scope><name>GetNumPoints</name></member>
      <member refid="classid_winding_1a83ac6e1cadfe33a9ccf23a028f380af3" prot="public" virt="non-virtual"><scope>idWinding</scope><name>GetPlane</name></member>
      <member refid="classid_winding_1af572e35ceea745877ce6f1339b368208" prot="public" virt="non-virtual"><scope>idWinding</scope><name>GetPlane</name></member>
      <member refid="classid_winding_1acef7d7dcd1d7ac9c123a4baccae065c0" prot="public" virt="non-virtual"><scope>idWinding</scope><name>GetRadius</name></member>
      <member refid="classid_winding_1ae567f3be65f9e3c057efef6c85ba8d08" prot="public" virt="non-virtual"><scope>idWinding</scope><name>idWinding</name></member>
      <member refid="classid_winding_1a1f9fc9e4ec9ad19a3ad6b4e9b7074e2f" prot="public" virt="non-virtual"><scope>idWinding</scope><name>idWinding</name></member>
      <member refid="classid_winding_1addc7a122cb1c4fd4aff3e389c1bdd983" prot="public" virt="non-virtual"><scope>idWinding</scope><name>idWinding</name></member>
      <member refid="classid_winding_1a86d925ebdcf6c5f02d9a8868d198fa5b" prot="public" virt="non-virtual"><scope>idWinding</scope><name>idWinding</name></member>
      <member refid="classid_winding_1aee2607a489793bfaad06b9209b25f8e0" prot="public" virt="non-virtual"><scope>idWinding</scope><name>idWinding</name></member>
      <member refid="classid_winding_1a73a2d1c06ffa37477c9d928fb23d995b" prot="public" virt="non-virtual"><scope>idWinding</scope><name>idWinding</name></member>
      <member refid="classid_winding_1a26f459a7b51eb5a198f39097cde7896f" prot="public" virt="non-virtual"><scope>idWinding</scope><name>InsertPoint</name></member>
      <member refid="classid_winding_1adfcabb397b1f3489e0d759714f901847" prot="public" virt="non-virtual"><scope>idWinding</scope><name>InsertPointIfOnEdge</name></member>
      <member refid="classid_winding_1a86b90f1f50555d45d6d227ab68b07afa" prot="public" virt="non-virtual"><scope>idWinding</scope><name>IsHuge</name></member>
      <member refid="classid_winding_1ad1ed690e81ba76ae03f78accf75cf5a4" prot="public" virt="non-virtual"><scope>idWinding</scope><name>IsTiny</name></member>
      <member refid="classid_winding_1a8f5f4d78c3ee6e37e3f96295c3e5b818" prot="public" virt="non-virtual"><scope>idWinding</scope><name>LineIntersection</name></member>
      <member refid="classid_winding_1aff52ffaf7141357566130528d7ef35b6" prot="protected" virt="non-virtual"><scope>idWinding</scope><name>numPoints</name></member>
      <member refid="classid_winding_1adb96185a46982b749cd39fc87c4fd8e1" prot="public" virt="non-virtual"><scope>idWinding</scope><name>operator+=</name></member>
      <member refid="classid_winding_1a567ac0f39e32fd83259b0e57c7e13be9" prot="public" virt="non-virtual"><scope>idWinding</scope><name>operator+=</name></member>
      <member refid="classid_winding_1a2e67733ee4b167845175c002074140b2" prot="public" virt="non-virtual"><scope>idWinding</scope><name>operator=</name></member>
      <member refid="classid_winding_1a843a7f9f0d1f36abd7240826fbe0e9a3" prot="public" virt="non-virtual"><scope>idWinding</scope><name>operator[]</name></member>
      <member refid="classid_winding_1ac661ed30870302548e33b8e97892e8de" prot="public" virt="non-virtual"><scope>idWinding</scope><name>operator[]</name></member>
      <member refid="classid_winding_1a045d67cbe10a3b1b8921ac5ae13a8be9" prot="protected" virt="non-virtual"><scope>idWinding</scope><name>p</name></member>
      <member refid="classid_winding_1a1aacbca5a777f4f1288e946041ab024c" prot="public" virt="non-virtual"><scope>idWinding</scope><name>PlaneDistance</name></member>
      <member refid="classid_winding_1ad1a71c2bda39690f485d2904062af29b" prot="public" virt="non-virtual"><scope>idWinding</scope><name>PlanesConcave</name></member>
      <member refid="classid_winding_1ac631fd9cebf953f76bc7c2bdaef04478" prot="public" virt="non-virtual"><scope>idWinding</scope><name>PlaneSide</name></member>
      <member refid="classid_winding_1a5d9b366b5e2a39044d85936c1fa057d4" prot="public" virt="non-virtual"><scope>idWinding</scope><name>PointInside</name></member>
      <member refid="classid_winding_1aec4a3da9da2786f591ecdcede86a4b7d" prot="public" virt="non-virtual"><scope>idWinding</scope><name>Print</name></member>
      <member refid="classid_winding_1ab576d44ecf5a2b6c12087026f1df1850" prot="public" virt="non-virtual"><scope>idWinding</scope><name>RayIntersection</name></member>
      <member refid="classid_winding_1a9546143800773f3fce8bd8ca3e507e61" prot="protected" virt="virtual"><scope>idWinding</scope><name>ReAllocate</name></member>
      <member refid="classid_winding_1ac18c0e392c8105031f56c4795b4fd0f6" prot="public" virt="non-virtual"><scope>idWinding</scope><name>RemoveColinearPoints</name></member>
      <member refid="classid_winding_1ad5e6eb6a2a0960935fc9c15a2a82c9b6" prot="public" virt="non-virtual"><scope>idWinding</scope><name>RemoveEqualPoints</name></member>
      <member refid="classid_winding_1a86c6068603fae3b11b7a4ac7118f5f3f" prot="public" virt="non-virtual"><scope>idWinding</scope><name>RemovePoint</name></member>
      <member refid="classid_winding_1a717596633d3f05e73ae0210987a97add" prot="public" virt="non-virtual"><scope>idWinding</scope><name>Reverse</name></member>
      <member refid="classid_winding_1a6f1ba960a5cb5ad4d1f866fd41ae8826" prot="public" virt="non-virtual"><scope>idWinding</scope><name>ReverseSelf</name></member>
      <member refid="classid_winding_1af4e0901a52eb7c83f6ca03e699112d25" prot="public" virt="non-virtual"><scope>idWinding</scope><name>SetNumPoints</name></member>
      <member refid="classid_winding_1a48301edb8c2560b3dbb08ab6d3f0cd47" prot="public" virt="non-virtual"><scope>idWinding</scope><name>Split</name></member>
      <member refid="classid_winding_1a8242f7521b08f6d865eb255df489b742" prot="public" virt="non-virtual"><scope>idWinding</scope><name>TriangleArea</name></member>
      <member refid="classid_winding_1abee134560884e67ddae447147ef70c73" prot="public" virt="non-virtual"><scope>idWinding</scope><name>TryMerge</name></member>
      <member refid="classid_winding_1a171b5c773cae0e85f6283f8a141a41cc" prot="public" virt="virtual"><scope>idWinding</scope><name>~idWinding</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
