<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="cmdlib_8h" kind="file">
    <compoundname>cmdlib.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">stdarg.h</includes>
    <includedby refid="_q_e3_8_h" local="yes">E:/sources/3rd_party/DOOM/neo/tools/radiant/QE3.H</includedby>
    <includedby refid="cmdlib_8cpp" local="yes">E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.cpp</includedby>
    <incdepgraph>
      <node id="3163">
        <label>stdarg.h</label>
      </node>
      <node id="3159">
        <label>stdlib.h</label>
      </node>
      <node id="3160">
        <label>errno.h</label>
      </node>
      <node id="3158">
        <label>string.h</label>
      </node>
      <node id="3162">
        <label>time.h</label>
      </node>
      <node id="3156">
        <label>E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.h</label>
        <link refid="cmdlib.h"/>
        <childnode refid="3157" relation="include">
        </childnode>
        <childnode refid="3158" relation="include">
        </childnode>
        <childnode refid="3159" relation="include">
        </childnode>
        <childnode refid="3160" relation="include">
        </childnode>
        <childnode refid="3161" relation="include">
        </childnode>
        <childnode refid="3162" relation="include">
        </childnode>
        <childnode refid="3163" relation="include">
        </childnode>
      </node>
      <node id="3161">
        <label>ctype.h</label>
      </node>
      <node id="3157">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="cmdlib_8h_1a4492ef3b6e18a8069eb56b9f8f956fab" prot="public" static="no">
        <type>void(</type>
        <definition>typedef void( PFN_ERR)(const char *pFormat,...)</definition>
        <argsstring>)(const char *pFormat,...)</argsstring>
        <name>PFN_ERR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.h" line="48" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="cmdlib_8h_1ac3210e56c2d3f12b61bcb18fd86ff875" prot="public" static="no">
        <type>void(</type>
        <definition>typedef void( PFN_PRINTF)(const char *pFormat,...)</definition>
        <argsstring>)(const char *pFormat,...)</argsstring>
        <name>PFN_PRINTF</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.h" line="49" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="cmdlib_8h_1a535bbdeb700c51922d4f77e843a71cc1" prot="public" static="no">
        <type>void(</type>
        <definition>typedef void( PFN_ERR_NUM)(int nNum, const char *pFormat,...)</definition>
        <argsstring>)(int nNum, const char *pFormat,...)</argsstring>
        <name>PFN_ERR_NUM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.h" line="50" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="cmdlib_8h_1a1a3d83a67338db60448c345de761d08e" prot="public" static="no">
        <type>void(</type>
        <definition>typedef void( PFN_PRINTF_NUM)(int nNum, const char *pFormat,...)</definition>
        <argsstring>)(int nNum, const char *pFormat,...)</argsstring>
        <name>PFN_PRINTF_NUM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.h" line="51" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="cmdlib_8h_1a75f85663ee9039c0c164a3cbcc8b2136" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int LoadFile</definition>
        <argsstring>(const char *filename, void **bufferptr)</argsstring>
        <name>LoadFile</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>bufferptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.h" line="41" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.cpp" bodystart="133" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="cmdlib_8h_1a1ad591365a14530703ddb4153ab6ffd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefaultExtension</definition>
        <argsstring>(char *path, char *extension)</argsstring>
        <name>DefaultExtension</name>
        <param>
          <type>char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>extension</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.h" line="42" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.cpp" bodystart="166" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="cmdlib_8h_1ad396f2346848344f0f68b481984852c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DefaultPath</definition>
        <argsstring>(char *path, char *basepath)</argsstring>
        <name>DefaultPath</name>
        <param>
          <type>char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>basepath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.h" line="43" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.cpp" bodystart="190" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="cmdlib_8h_1a5314b4584784313111f012c941c23b7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StripFilename</definition>
        <argsstring>(char *path)</argsstring>
        <name>StripFilename</name>
        <param>
          <type>char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.h" line="44" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.cpp" bodystart="206" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="cmdlib_8h_1a2cdba62c30778c3d8e5532b71a6536f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StripExtension</definition>
        <argsstring>(char *path)</argsstring>
        <name>StripExtension</name>
        <param>
          <type>char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.h" line="45" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.cpp" bodystart="222" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="cmdlib_8h_1a534cb892c1730fbced6814024e10d26f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Error</definition>
        <argsstring>(const char *pFormat,...)</argsstring>
        <name>Error</name>
        <param>
          <type>const char *</type>
          <declname>pFormat</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.h" line="53" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.cpp" bodystart="45" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="cmdlib_8h_1aacd99eec9377fad84d4e777235cde370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Printf</definition>
        <argsstring>(const char *pFormat,...)</argsstring>
        <name>Printf</name>
        <param>
          <type>const char *</type>
          <declname>pFormat</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.h" line="54" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.cpp" bodystart="56" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="cmdlib_8h_1adba5d08546713554cabc8bebb47404f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ErrorNum</definition>
        <argsstring>(int n, const char *pFormat,...)</argsstring>
        <name>ErrorNum</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pFormat</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.h" line="55" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.cpp" bodystart="67" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="cmdlib_8h_1aa82bdd9376a383f7dcec568da670fde4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PrintfNum</definition>
        <argsstring>(int n, const char *pFormat,...)</argsstring>
        <name>PrintfNum</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pFormat</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.h" line="56" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.cpp" bodystart="78" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="cmdlib_8h_1a6982267aa361dbda3343be804bd6ed3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SetErrorHandler</definition>
        <argsstring>(PFN_ERR pe)</argsstring>
        <name>SetErrorHandler</name>
        <param>
          <type>PFN_ERR</type>
          <declname>pe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.h" line="58" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.cpp" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="cmdlib_8h_1aa9732b48b9cf4c5a09853f8328b34741" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SetPrintfHandler</definition>
        <argsstring>(PFN_PRINTF pe)</argsstring>
        <name>SetPrintfHandler</name>
        <param>
          <type>PFN_PRINTF</type>
          <declname>pe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.h" line="59" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.cpp" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="cmdlib_8h_1a2ad460af712c476d885d99d30fb9566b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SetErrorHandlerNum</definition>
        <argsstring>(PFN_ERR_NUM pe)</argsstring>
        <name>SetErrorHandlerNum</name>
        <param>
          <type>PFN_ERR_NUM</type>
          <declname>pe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.h" line="60" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.cpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="cmdlib_8h_1aa7a649e412c6b0144dcfc09c991264ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SetPrintfHandlerNum</definition>
        <argsstring>(PFN_PRINTF_NUM pe)</argsstring>
        <name>SetPrintfHandlerNum</name>
        <param>
          <type>PFN_PRINTF_NUM</type>
          <declname>pe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.h" line="61" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__CMDLIB__</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__CMDLIB__</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>LoadFile(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**bufferptr<sp/>);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>DefaultExtension(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*extension<sp/>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>DefaultPath(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*basepath<sp/>);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>StripFilename(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path<sp/>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>StripExtension(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path<sp/>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>error<sp/>and<sp/>printf<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(PFN_ERR)(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pFormat,<sp/>...<sp/>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(PFN_PRINTF)(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pFormat,<sp/>...<sp/>);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(PFN_ERR_NUM)(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nNum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pFormat,<sp/>...<sp/>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(PFN_PRINTF_NUM)(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nNum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pFormat,<sp/>...<sp/>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Error(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pFormat,<sp/>...<sp/>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Printf(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pFormat,<sp/>...<sp/>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ErrorNum(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pFormat,<sp/>...<sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintfNum(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pFormat,<sp/>...<sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetErrorHandler(<sp/>PFN_ERR<sp/>pe<sp/>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetPrintfHandler(<sp/>PFN_PRINTF<sp/>pe<sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetErrorHandlerNum(<sp/>PFN_ERR_NUM<sp/>pe<sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetPrintfHandlerNum(<sp/>PFN_PRINTF_NUM<sp/>pe<sp/>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!__CMDLIB__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/tools/radiant/cmdlib.h"/>
  </compounddef>
</doxygen>
