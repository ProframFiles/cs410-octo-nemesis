<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="codebook_8c" kind="file">
    <compoundname>codebook.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="_math_8h" local="no">math.h</includes>
    <includes refid="ogg_8h" local="yes">../ogg/ogg.h</includes>
    <includes refid="sound_2_ogg_vorbis_2vorbis_2codec_8h" local="yes">../vorbis/codec.h</includes>
    <includes refid="codebook_8h" local="yes">codebook.h</includes>
    <includes refid="scales_8h" local="yes">scales.h</includes>
    <includes refid="sound_2_ogg_vorbis_2vorbissrc_2_misc_8h" local="yes">misc.h</includes>
    <includes refid="os_8h" local="yes">os.h</includes>
    <incdepgraph>
      <node id="2023">
        <label>stdlib.h</label>
      </node>
      <node id="2022">
        <label>E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c</label>
        <link refid="codebook.c"/>
        <childnode refid="2023" relation="include">
        </childnode>
        <childnode refid="2024" relation="include">
        </childnode>
      </node>
      <node id="2024">
        <label>string.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="codebook_8c_1ae1669a0f9de7163a739cd4712dba1410" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vorbis_staticbook_pack</definition>
        <argsstring>(const static_codebook *c, oggpack_buffer *opb)</argsstring>
        <name>vorbis_staticbook_pack</name>
        <param>
          <type>const <ref refid="structstatic__codebook" kindref="compound">static_codebook</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref> *</type>
          <declname>opb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" line="30" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" bodystart="30" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="codebook_8c_1a407534fc1d3eab78e7be4ed860cf57e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vorbis_staticbook_unpack</definition>
        <argsstring>(oggpack_buffer *opb, static_codebook *s)</argsstring>
        <name>vorbis_staticbook_unpack</name>
        <param>
          <type><ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref> *</type>
          <declname>opb</declname>
        </param>
        <param>
          <type><ref refid="structstatic__codebook" kindref="compound">static_codebook</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" line="149" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" bodystart="149" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="codebook_8c_1aef10100390bdb0f59f150e45c5255afa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vorbis_book_encode</definition>
        <argsstring>(codebook *book, int a, oggpack_buffer *b)</argsstring>
        <name>vorbis_book_encode</name>
        <param>
          <type><ref refid="structcodebook" kindref="compound">codebook</ref> *</type>
          <declname>book</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" line="257" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" bodystart="257" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="codebook_8c_1a9ded0d8602d9b94f5b0e6375ab120a4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vorbis_book_errorv</definition>
        <argsstring>(codebook *book, float *a)</argsstring>
        <name>vorbis_book_errorv</name>
        <param>
          <type><ref refid="structcodebook" kindref="compound">codebook</ref> *</type>
          <declname>book</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" line="277" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" bodystart="277" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="codebook_8c_1a91ea1f9f0da34e34d78c6ea9c324070f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vorbis_book_encodev</definition>
        <argsstring>(codebook *book, int best, float *a, oggpack_buffer *b)</argsstring>
        <name>vorbis_book_encodev</name>
        <param>
          <type><ref refid="structcodebook" kindref="compound">codebook</ref> *</type>
          <declname>book</declname>
        </param>
        <param>
          <type>int</type>
          <declname>best</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" line="286" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" bodystart="286" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="codebook_8c_1a572151346c1fccbaf5f647788061cd43" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ogg_uint32_t</type>
        <definition>static ogg_uint32_t bitreverse</definition>
        <argsstring>(ogg_uint32_t x)</argsstring>
        <name>bitreverse</name>
        <param>
          <type>ogg_uint32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" line="301" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" bodystart="301" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="codebook_8c_1af77538e5d981a7ca206e07bf592fc98f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>static long decode_packed_entry_number</definition>
        <argsstring>(codebook *book, oggpack_buffer *b)</argsstring>
        <name>decode_packed_entry_number</name>
        <param>
          <type><ref refid="structcodebook" kindref="compound">codebook</ref> *</type>
          <declname>book</declname>
        </param>
        <param>
          <type><ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" line="309" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" bodystart="309" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="codebook_8c_1ab64c32ac3c21667daf48dff173999dd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long vorbis_book_decode</definition>
        <argsstring>(codebook *book, oggpack_buffer *b)</argsstring>
        <name>vorbis_book_decode</name>
        <param>
          <type><ref refid="structcodebook" kindref="compound">codebook</ref> *</type>
          <declname>book</declname>
        </param>
        <param>
          <type><ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" line="370" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" bodystart="370" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="codebook_8c_1a1e21765f57f5e92dd447a2c65639ebd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long vorbis_book_decodevs_add</definition>
        <argsstring>(codebook *book, float *a, oggpack_buffer *b, int n)</argsstring>
        <name>vorbis_book_decodevs_add</name>
        <param>
          <type><ref refid="structcodebook" kindref="compound">codebook</ref> *</type>
          <declname>book</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" line="380" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" bodystart="380" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="codebook_8c_1ae3ec5eec5c8c323d4c928802ce0b6cb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long vorbis_book_decodev_add</definition>
        <argsstring>(codebook *book, float *a, oggpack_buffer *b, int n)</argsstring>
        <name>vorbis_book_decodev_add</name>
        <param>
          <type><ref refid="structcodebook" kindref="compound">codebook</ref> *</type>
          <declname>book</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" line="397" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" bodystart="397" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="codebook_8c_1a5c5bd9764a71f55ec58899ce5bfeeb47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long vorbis_book_decodev_set</definition>
        <argsstring>(codebook *book, float *a, oggpack_buffer *b, int n)</argsstring>
        <name>vorbis_book_decodev_set</name>
        <param>
          <type><ref refid="structcodebook" kindref="compound">codebook</ref> *</type>
          <declname>book</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" line="440" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" bodystart="440" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="codebook_8c_1ac9aee20e4c831541befddae12556b7eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long vorbis_book_decodevv_add</definition>
        <argsstring>(codebook *book, float **a, long offset, int ch, oggpack_buffer *b, int n)</argsstring>
        <name>vorbis_book_decodevv_add</name>
        <param>
          <type><ref refid="structcodebook" kindref="compound">codebook</ref> *</type>
          <declname>book</declname>
        </param>
        <param>
          <type>float **</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ch</declname>
        </param>
        <param>
          <type><ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" line="454" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c" bodystart="454" bodyend="474"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>THIS<sp/>FILE<sp/>IS<sp/>PART<sp/>OF<sp/>THE<sp/>OggVorbis<sp/>SOFTWARE<sp/>CODEC<sp/>SOURCE<sp/>CODE.<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>USE,<sp/>DISTRIBUTION<sp/>AND<sp/>REPRODUCTION<sp/>OF<sp/>THIS<sp/>LIBRARY<sp/>SOURCE<sp/>IS<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>GOVERNED<sp/>BY<sp/>A<sp/>BSD-STYLE<sp/>SOURCE<sp/>LICENSE<sp/>INCLUDED<sp/>WITH<sp/>THIS<sp/>SOURCE<sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>IN<sp/>&apos;COPYING&apos;.<sp/>PLEASE<sp/>READ<sp/>THESE<sp/>TERMS<sp/>BEFORE<sp/>DISTRIBUTING.<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>THE<sp/>OggVorbis<sp/>SOURCE<sp/>CODE<sp/>IS<sp/>(C)<sp/>COPYRIGHT<sp/>1994-2002<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>by<sp/>the<sp/>XIPHOPHORUS<sp/>Company<sp/>http://www.xiph.org/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>********************************************************************</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>function:<sp/>basic<sp/>codebook<sp/>pack/unpack/code/decode<sp/>operations</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>last<sp/>mod:<sp/>$Id:<sp/>codebook.c,v<sp/>1.39<sp/>2002/06/28<sp/>22:19:35<sp/>xiphmont<sp/>Exp<sp/>$</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../ogg/ogg.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../vorbis/codec.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;codebook.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;scales.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;misc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;os.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>packs<sp/>the<sp/>given<sp/>codebook<sp/>into<sp/>the<sp/>bitstream<sp/>**************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vorbis_staticbook_pack(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstatic__codebook" kindref="compound">static_codebook</ref><sp/>*c,<ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref><sp/>*opb){</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ordered=0;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>the<sp/>basic<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>oggpack_write(opb,0x564342,24);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>oggpack_write(opb,c-&gt;dim,16);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>oggpack_write(opb,c-&gt;entries,24);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>pack<sp/>the<sp/>codewords.<sp/><sp/>There<sp/>are<sp/>two<sp/>packings;<sp/>length<sp/>ordered<sp/>and</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>length<sp/>random.<sp/><sp/>Decide<sp/>between<sp/>the<sp/>two<sp/>now.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=1;i&lt;c-&gt;entries;i++)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c-&gt;lengthlist[i-1]==0<sp/>||<sp/>c-&gt;lengthlist[i]&lt;c-&gt;lengthlist[i-1])</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i==c-&gt;entries)ordered=1;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ordered){</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>length<sp/>ordered.<sp/><sp/>We<sp/>only<sp/>need<sp/>to<sp/>say<sp/>how<sp/>many<sp/>codewords<sp/>of</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>each<sp/>length.<sp/><sp/>The<sp/>actual<sp/>codewords<sp/>are<sp/>generated</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deterministically<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>count=0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>oggpack_write(opb,1,1);<sp/><sp/></highlight><highlight class="comment">/*<sp/>ordered<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>oggpack_write(opb,c-&gt;lengthlist[0]-1,5);<sp/></highlight><highlight class="comment">/*<sp/>1<sp/>to<sp/>32<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=1;i&lt;c-&gt;entries;i++){</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">=c-&gt;lengthlist[i];</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>last=c-&gt;lengthlist[i-1];</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">&gt;last){</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=last;j&lt;</highlight><highlight class="keyword">this</highlight><highlight class="normal">;j++){</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oggpack_write(opb,i-count,_ilog(c-&gt;entries-count));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>count=i;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>oggpack_write(opb,i-count,_ilog(c-&gt;entries-count));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>length<sp/>random.<sp/><sp/>Again,<sp/>we<sp/>don&apos;t<sp/>code<sp/>the<sp/>codeword<sp/>itself,<sp/>just</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>length.<sp/><sp/>This<sp/>time,<sp/>though,<sp/>we<sp/>have<sp/>to<sp/>encode<sp/>each<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>oggpack_write(opb,0,1);<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>unordered<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>algortihmic<sp/>mapping<sp/>has<sp/>use<sp/>for<sp/>&apos;unused<sp/>entries&apos;,<sp/>which<sp/>we<sp/>tag</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>here.<sp/><sp/>The<sp/>algorithmic<sp/>mapping<sp/>happens<sp/>as<sp/>usual,<sp/>but<sp/>the<sp/>unused</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entry<sp/>has<sp/>no<sp/>codeword.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;c-&gt;entries;i++)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c-&gt;lengthlist[i]==0)</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i==c-&gt;entries){</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oggpack_write(opb,0,1);<sp/></highlight><highlight class="comment">/*<sp/>no<sp/>unused<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;c-&gt;entries;i++)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>oggpack_write(opb,c-&gt;lengthlist[i]-1,5);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oggpack_write(opb,1,1);<sp/></highlight><highlight class="comment">/*<sp/>we<sp/>have<sp/>unused<sp/>entries;<sp/>thus<sp/>we<sp/>tag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;c-&gt;entries;i++){</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c-&gt;lengthlist[i]==0){</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oggpack_write(opb,0,1);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oggpack_write(opb,1,1);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oggpack_write(opb,c-&gt;lengthlist[i]-1,5);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>is<sp/>the<sp/>entry<sp/>number<sp/>the<sp/>desired<sp/>return<sp/>value,<sp/>or<sp/>do<sp/>we<sp/>have<sp/>a</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>mapping?<sp/>If<sp/>we<sp/>have<sp/>a<sp/>mapping,<sp/>what<sp/>type?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>oggpack_write(opb,c-&gt;maptype,4);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(c-&gt;maptype){</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>mapping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>implicitly<sp/>populated<sp/>value<sp/>mapping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>explicitly<sp/>populated<sp/>value<sp/>mapping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!c-&gt;quantlist){</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>quantlist?<sp/><sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>values<sp/>that<sp/>define<sp/>the<sp/>dequantization<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>oggpack_write(opb,c-&gt;q_min,32);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>oggpack_write(opb,c-&gt;q_delta,32);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>oggpack_write(opb,c-&gt;q_quant-1,4);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>oggpack_write(opb,c-&gt;q_sequencep,1);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quantvals;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(c-&gt;maptype){</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>a<sp/>single<sp/>column<sp/>of<sp/>(c-&gt;entries/c-&gt;dim)<sp/>quantized<sp/>values<sp/>for</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>building<sp/>a<sp/>full<sp/>value<sp/>list<sp/>algorithmically<sp/>(square<sp/>lattice)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>quantvals=_book_maptype1_quantvals(c);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>every<sp/>value<sp/>(c-&gt;entries*c-&gt;dim<sp/>total)<sp/>specified<sp/>explicitly<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>quantvals=c-&gt;entries*c-&gt;dim;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">/*<sp/>NOT_REACHABLE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>quantvals=-1;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>quantized<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;quantvals;i++)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>oggpack_write(opb,labs(c-&gt;quantlist[i]),c-&gt;q_quant);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>case;<sp/>we<sp/>don&apos;t<sp/>have<sp/>any<sp/>other<sp/>map<sp/>types<sp/>now<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>unpacks<sp/>a<sp/>codebook<sp/>from<sp/>the<sp/>packet<sp/>buffer<sp/>into<sp/>the<sp/>codebook<sp/>struct,</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/>readies<sp/>the<sp/>codebook<sp/>auxiliary<sp/>structures<sp/>for<sp/>decode<sp/>*************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vorbis_staticbook_unpack(<ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref><sp/>*opb,<ref refid="structstatic__codebook" kindref="compound">static_codebook</ref><sp/>*s){</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>memset(s,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*s));</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>s-&gt;allocedp=1;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>make<sp/>sure<sp/>alignment<sp/>is<sp/>correct<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(oggpack_read(opb,24)!=0x564342)</highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_eofout;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>the<sp/>basic<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>s-&gt;dim=oggpack_read(opb,16);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>s-&gt;entries=oggpack_read(opb,24);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(s-&gt;entries==-1)</highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_eofout;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>codeword<sp/>ordering....<sp/>length<sp/>ordered<sp/>or<sp/>unordered?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)oggpack_read(opb,1)){</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>unordered<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;lengthlist=_ogg_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*s-&gt;lengthlist)*s-&gt;entries);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocated<sp/>but<sp/>unused<sp/>entries?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(oggpack_read(opb,1)){</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>yes,<sp/>unused<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;s-&gt;entries;i++){</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(oggpack_read(opb,1)){</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num=oggpack_read(opb,5);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num==-1)</highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_eofout;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;lengthlist[i]=num+1;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;lengthlist[i]=0;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>all<sp/>entries<sp/>used;<sp/>no<sp/>tagging<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;s-&gt;entries;i++){</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num=oggpack_read(opb,5);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num==-1)</highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_eofout;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;lengthlist[i]=num+1;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ordered<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>length=oggpack_read(opb,5)+1;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;lengthlist=_ogg_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*s-&gt;lengthlist)*s-&gt;entries);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;s-&gt;entries;){</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>num=oggpack_read(opb,_ilog(s-&gt;entries-i));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num==-1)</highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_eofout;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;num<sp/>&amp;&amp;<sp/>i&lt;s-&gt;entries;j++,i++)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;lengthlist[i]=length;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>length++;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>EOF<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>we<sp/>have<sp/>a<sp/>mapping<sp/>to<sp/>unpack?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">((s-&gt;maptype=oggpack_read(opb,4))){</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>mapping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>implicitly<sp/>populated<sp/>value<sp/>mapping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>explicitly<sp/>populated<sp/>value<sp/>mapping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;q_min=oggpack_read(opb,32);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;q_delta=oggpack_read(opb,32);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;q_quant=oggpack_read(opb,4)+1;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;q_sequencep=oggpack_read(opb,1);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quantvals=0;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(s-&gt;maptype){</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>quantvals=_book_maptype1_quantvals(s);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>quantvals=s-&gt;entries*s-&gt;dim;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>quantized<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;quantlist=_ogg_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*s-&gt;quantlist)*quantvals);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;quantvals;i++)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;quantlist[i]=oggpack_read(opb,s-&gt;q_quant);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(quantvals&amp;&amp;s-&gt;quantlist[quantvals-1]==-1)</highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_eofout;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_errout;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>all<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/>_errout:</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/>_eofout:</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>vorbis_staticbook_clear(s);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);<sp/></highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vorbis_book_encode(<ref refid="structcodebook" kindref="compound">codebook</ref><sp/>*book,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/><ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref><sp/>*b){</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>oggpack_write(b,book-&gt;codelist[a],book-&gt;c-&gt;lengthlist[a]);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(book-&gt;c-&gt;lengthlist[a]);</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>One<sp/>the<sp/>encode<sp/>side,<sp/>our<sp/>vector<sp/>writers<sp/>are<sp/>each<sp/>designed<sp/>for<sp/>a</highlight></codeline>
<codeline lineno="263"><highlight class="comment">specific<sp/>purpose,<sp/>and<sp/>the<sp/>encoder<sp/>is<sp/>not<sp/>flexible<sp/>without<sp/>modification:</highlight></codeline>
<codeline lineno="264"><highlight class="comment"></highlight></codeline>
<codeline lineno="265"><highlight class="comment">The<sp/>LSP<sp/>vector<sp/>coder<sp/>uses<sp/>a<sp/>single<sp/>stage<sp/>nearest-match<sp/>with<sp/>no</highlight></codeline>
<codeline lineno="266"><highlight class="comment">interleave,<sp/>so<sp/>no<sp/>step<sp/>and<sp/>no<sp/>error<sp/>return.<sp/><sp/>This<sp/>is<sp/>specced<sp/>by<sp/>floor0</highlight></codeline>
<codeline lineno="267"><highlight class="comment">and<sp/>doesn&apos;t<sp/>change.</highlight></codeline>
<codeline lineno="268"><highlight class="comment"></highlight></codeline>
<codeline lineno="269"><highlight class="comment">Residue0<sp/>encoding<sp/>interleaves,<sp/>uses<sp/>multiple<sp/>stages,<sp/>and<sp/>each<sp/>stage</highlight></codeline>
<codeline lineno="270"><highlight class="comment">peels<sp/>of<sp/>a<sp/>specific<sp/>amount<sp/>of<sp/>resolution<sp/>from<sp/>a<sp/>lattice<sp/>(thus<sp/>we<sp/>want</highlight></codeline>
<codeline lineno="271"><highlight class="comment">to<sp/>match<sp/>by<sp/>threshold,<sp/>not<sp/>nearest<sp/>match).<sp/><sp/>Residue<sp/>doesn&apos;t<sp/>*have*<sp/>to</highlight></codeline>
<codeline lineno="272"><highlight class="comment">be<sp/>encoded<sp/>that<sp/>way,<sp/>but<sp/>to<sp/>change<sp/>it,<sp/>one<sp/>will<sp/>need<sp/>to<sp/>add<sp/>more</highlight></codeline>
<codeline lineno="273"><highlight class="comment">infrastructure<sp/>on<sp/>the<sp/>encode<sp/>side<sp/>(decode<sp/>side<sp/>is<sp/>specced<sp/>and<sp/>simpler)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>floor0<sp/>LSP<sp/>(single<sp/>stage,<sp/>non<sp/>interleaved,<sp/>nearest<sp/>match)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>returns<sp/>entry<sp/>number<sp/>and<sp/>*modifies<sp/>a*<sp/>to<sp/>the<sp/>quantization<sp/>value<sp/>*****/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vorbis_book_errorv(<ref refid="structcodebook" kindref="compound">codebook</ref><sp/>*book,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*a){</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim=book-&gt;dim,k;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>best=_best(book,a,1);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(k=0;k&lt;dim;k++)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>a[k]=(book-&gt;valuelist+best*dim)[k];</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(best);</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>and<sp/>*modifies<sp/>a*<sp/>to<sp/>the<sp/>quantization<sp/>value<sp/>*****/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vorbis_book_encodev(<ref refid="structcodebook" kindref="compound">codebook</ref><sp/>*book,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>best,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*a,<ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref><sp/>*b){</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,dim=book-&gt;dim;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(k=0;k&lt;dim;k++)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>a[k]=(book-&gt;valuelist+best*dim)[k];</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(vorbis_book_encode(book,best,b));</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>the<sp/>&apos;eliminate<sp/>the<sp/>decode<sp/>tree&apos;<sp/>optimization<sp/>actually<sp/>requires<sp/>the</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/><sp/>codewords<sp/>to<sp/>be<sp/>MSb<sp/>first,<sp/>not<sp/>LSb.<sp/><sp/>This<sp/>is<sp/>an<sp/>annoying<sp/>inelegancy</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/><sp/>(and<sp/>one<sp/>of<sp/>the<sp/>first<sp/>places<sp/>where<sp/>carefully<sp/>thought<sp/>out<sp/>design</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/><sp/>turned<sp/>out<sp/>to<sp/>be<sp/>wrong;<sp/>Vorbis<sp/>II<sp/>and<sp/>future<sp/>Ogg<sp/>codecs<sp/>should<sp/>go</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/><sp/>to<sp/>an<sp/>MSb<sp/>bitpacker),<sp/>but<sp/>not<sp/>actually<sp/>the<sp/>huge<sp/>hit<sp/>it<sp/>appears<sp/>to</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/>be.<sp/><sp/>The<sp/>first-stage<sp/>decode<sp/>table<sp/>catches<sp/>most<sp/>words<sp/>so<sp/>that</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/>bitreverse<sp/>is<sp/>not<sp/>in<sp/>the<sp/>main<sp/>execution<sp/>path.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ogg_uint32_t<sp/>bitreverse(ogg_uint32_t<sp/>x){</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>x=<sp/><sp/><sp/><sp/>((x&gt;&gt;16)&amp;0x0000ffff)<sp/>|<sp/>((x&lt;&lt;16)&amp;0xffff0000);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>x=<sp/><sp/><sp/><sp/>((x&gt;&gt;<sp/>8)&amp;0x00ff00ff)<sp/>|<sp/>((x&lt;&lt;<sp/>8)&amp;0xff00ff00);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>x=<sp/><sp/><sp/><sp/>((x&gt;&gt;<sp/>4)&amp;0x0f0f0f0f)<sp/>|<sp/>((x&lt;&lt;<sp/>4)&amp;0xf0f0f0f0);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>x=<sp/><sp/><sp/><sp/>((x&gt;&gt;<sp/>2)&amp;0x33333333)<sp/>|<sp/>((x&lt;&lt;<sp/>2)&amp;0xcccccccc);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((x&gt;&gt;<sp/>1)&amp;0x55555555)<sp/>|<sp/>((x&lt;&lt;<sp/>1)&amp;0xaaaaaaaa);</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">STIN<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>decode_packed_entry_number(<ref refid="structcodebook" kindref="compound">codebook</ref><sp/>*book,<sp/><ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref><sp/>*b){</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>read=book-&gt;dec_maxlength;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lo,hi;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lok<sp/>=<sp/>oggpack_look(b,book-&gt;dec_firsttablen);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lok<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>entry<sp/>=<sp/>book-&gt;dec_firsttable[lok];</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(entry&amp;0x80000000UL){</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lo=(entry&gt;&gt;15)&amp;0x7fff;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hi=book-&gt;used_entries-(entry&amp;0x7fff);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oggpack_adv(b,<sp/>book-&gt;dec_codelengths[entry-1]);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(entry-1);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>lo=0;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>hi=book-&gt;used_entries;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>lok<sp/>=<sp/>oggpack_look(b,<sp/>read);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(lok&lt;0<sp/>&amp;&amp;<sp/>read&gt;1)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>lok<sp/>=<sp/>oggpack_look(b,<sp/>--read);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lok&lt;0)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>bisect<sp/>search<sp/>for<sp/>the<sp/>codeword<sp/>in<sp/>the<sp/>ordered<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>ogg_uint32_t<sp/>testword=bitreverse((ogg_uint32_t)lok);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(hi-lo&gt;1){</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>p=(hi-lo)&gt;&gt;1;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>test=book-&gt;codelist[lo+p]&gt;testword;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lo+=p&amp;(test-1);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hi-=p&amp;(-test);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(book-&gt;dec_codelengths[lo]&lt;=read){</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oggpack_adv(b,<sp/>book-&gt;dec_codelengths[lo]);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(lo);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>oggpack_adv(b,<sp/>read);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Decode<sp/>side<sp/>is<sp/>specced<sp/>and<sp/>easier,<sp/>because<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>find</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/><sp/>matches<sp/>using<sp/>different<sp/>criteria;<sp/>we<sp/>simply<sp/>read<sp/>and<sp/>map.<sp/><sp/>There<sp/>are</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/><sp/><sp/>two<sp/>things<sp/>we<sp/>need<sp/>to<sp/>do<sp/>&apos;depending&apos;:</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/><sp/><sp/>We<sp/>may<sp/>need<sp/>to<sp/>support<sp/>interleave.<sp/><sp/>We<sp/>don&apos;t<sp/>really,<sp/>but<sp/>it&apos;s</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/><sp/><sp/>convenient<sp/>to<sp/>do<sp/>it<sp/>here<sp/>rather<sp/>than<sp/>rebuild<sp/>the<sp/>vector<sp/>later.</highlight></codeline>
<codeline lineno="361"><highlight class="comment"></highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/><sp/><sp/>Cascades<sp/>may<sp/>be<sp/>additive<sp/>or<sp/>multiplicitive;<sp/>this<sp/>is<sp/>not<sp/>inherent<sp/>in</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/><sp/><sp/>the<sp/>codebook,<sp/>but<sp/>set<sp/>in<sp/>the<sp/>code<sp/>using<sp/>the<sp/>codebook.<sp/><sp/>Like</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/><sp/><sp/>interleaving,<sp/>it&apos;s<sp/>easiest<sp/>to<sp/>do<sp/>it<sp/>here.<sp/><sp/></highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/><sp/>addmul==0<sp/>-&gt;<sp/>declarative<sp/>(set<sp/>the<sp/>value)</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/><sp/><sp/>addmul==1<sp/>-&gt;<sp/>additive</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/><sp/>addmul==2<sp/>-&gt;<sp/>multiplicitive<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>returns<sp/>the<sp/>[original,<sp/>not<sp/>compacted]<sp/>entry<sp/>number<sp/>or<sp/>-1<sp/>on<sp/>eof<sp/>*********/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>vorbis_book_decode(<ref refid="structcodebook" kindref="compound">codebook</ref><sp/>*book,<sp/><ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref><sp/>*b){</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>packed_entry=decode_packed_entry_number(book,b);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(packed_entry&gt;=0)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(book-&gt;dec_index[packed_entry]);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>there&apos;s<sp/>no<sp/>dec_index,<sp/>the<sp/>codebook<sp/>unpacking<sp/>isn&apos;t<sp/>collapsed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(packed_entry);</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>returns<sp/>0<sp/>on<sp/>OK<sp/>or<sp/>-1<sp/>on<sp/>eof<sp/>*************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>vorbis_book_decodevs_add(<ref refid="structcodebook" kindref="compound">codebook</ref><sp/>*book,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*a,<ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref><sp/>*b,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n){</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step=n/book-&gt;dim;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*entry<sp/>=<sp/>alloca(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*entry)*step);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**t<sp/>=<sp/>alloca(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*t)*step);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,o;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>step;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>entry[i]=decode_packed_entry_number(book,b);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(entry[i]==-1)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>t[i]<sp/>=<sp/>book-&gt;valuelist+entry[i]*book-&gt;dim;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0,o=0;i&lt;book-&gt;dim;i++,o+=step)</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;j&lt;step;j++)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a[o+j]+=t[j][i];</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>vorbis_book_decodev_add(<ref refid="structcodebook" kindref="compound">codebook</ref><sp/>*book,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*a,<ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref><sp/>*b,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n){</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,entry;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*t;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(book-&gt;dim&gt;8){</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;n;){</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entry<sp/>=<sp/>decode_packed_entry_number(book,b);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(entry==-1)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/><sp/><sp/><sp/><sp/>=<sp/>book-&gt;valuelist+entry*book-&gt;dim;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;j&lt;book-&gt;dim;)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>a[i++]+=t[j++];</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;n;){</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entry<sp/>=<sp/>decode_packed_entry_number(book,b);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(entry==-1)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/><sp/><sp/><sp/><sp/>=<sp/>book-&gt;valuelist+entry*book-&gt;dim;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j=0;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)book-&gt;dim){</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>a[i++]+=t[j++];</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7:</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>a[i++]+=t[j++];</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>a[i++]+=t[j++];</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>a[i++]+=t[j++];</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>a[i++]+=t[j++];</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>a[i++]+=t[j++];</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>a[i++]+=t[j++];</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>a[i++]+=t[j++];</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>vorbis_book_decodev_set(<ref refid="structcodebook" kindref="compound">codebook</ref><sp/>*book,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*a,<ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref><sp/>*b,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n){</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,entry;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*t;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;n;){</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>entry<sp/>=<sp/>decode_packed_entry_number(book,b);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(entry==-1)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/><sp/><sp/><sp/><sp/>=<sp/>book-&gt;valuelist+entry*book-&gt;dim;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;j&lt;book-&gt;dim;)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a[i++]=t[j++];</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>vorbis_book_decodevv_add(<ref refid="structcodebook" kindref="compound">codebook</ref><sp/>*book,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**a,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>offset,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref><sp/>*b,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n){</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i,j,entry;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chptr=0;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=offset/ch;i&lt;(offset+n)/ch;){</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>entry<sp/>=<sp/>decode_packed_entry_number(book,b);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(entry==-1)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*t<sp/>=<sp/>book-&gt;valuelist+entry*book-&gt;dim;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;j&lt;book-&gt;dim;j++){</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>a[chptr++][i]+=t[j];</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(chptr==ch){</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chptr=0;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_V_SELFTEST</highlight></codeline>
<codeline lineno="477"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Simple<sp/>enough;<sp/>pack<sp/>a<sp/>few<sp/>candidate<sp/>codebooks,<sp/>unpack<sp/>them.<sp/><sp/>Code<sp/>a</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/><sp/>number<sp/>of<sp/>vectors<sp/>through<sp/>(keeping<sp/>track<sp/>of<sp/>the<sp/>quantized<sp/>values),</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/><sp/><sp/>and<sp/>decode<sp/>using<sp/>the<sp/>unpacked<sp/>book.<sp/><sp/>quantized<sp/>version<sp/>of<sp/>in<sp/>should</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/><sp/><sp/>exactly<sp/>equal<sp/>out<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;vorbis/book/lsp20_0.vqh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;vorbis/book/res0a_13.vqh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TESTSIZE<sp/>40</highlight></codeline>
<codeline lineno="487"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>test1[TESTSIZE]={</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>0.105939f,</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>0.215373f,</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>0.429117f,</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>0.587974f,</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>0.181173f,</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>0.296583f,</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>0.515707f,</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>0.715261f,</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>0.162327f,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>0.263834f,</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>0.342876f,</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>0.406025f,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>0.103571f,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>0.223561f,</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>0.368513f,</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>0.540313f,</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>0.136672f,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>0.395882f,</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>0.587183f,</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>0.652476f,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>0.114338f,</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>0.417300f,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>0.525486f,</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>0.698679f,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>0.147492f,</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>0.324481f,</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>0.643089f,</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>0.757582f,</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>0.139556f,</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>0.215795f,</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>0.324559f,</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>0.399387f,</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>0.120236f,</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>0.267420f,</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>0.446940f,</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>0.608760f,</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>0.115587f,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>0.287234f,</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>0.571081f,</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>0.708603f,</highlight></codeline>
<codeline lineno="538"><highlight class="normal">};</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>test3[TESTSIZE]={</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>0,1,-2,3,4,-5,6,7,8,9,</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>8,-2,7,-1,4,6,8,3,1,-9,</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>10,11,12,13,14,15,26,17,18,19,</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>30,-25,-30,-1,-5,-32,4,3,-2,0};</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><ref refid="structstatic__codebook" kindref="compound">static_codebook</ref><sp/>*testlist[]={&amp;_vq_book_lsp20_0,</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;_vq_book_res0a_13,NULL};</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>*testvec[]={test1,test3};</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(){</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref><sp/>write;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><ref refid="structoggpack__buffer" kindref="compound">oggpack_buffer</ref><sp/>read;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ptr=0,i;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>oggpack_writeinit(&amp;write);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Testing<sp/>codebook<sp/>abstraction...:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(testlist[ptr]){</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcodebook" kindref="compound">codebook</ref><sp/>c;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstatic__codebook" kindref="compound">static_codebook</ref><sp/>s;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*qv=alloca(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*qv)*TESTSIZE);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*iv=alloca(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*iv)*TESTSIZE);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(qv,testvec[ptr],</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*qv)*TESTSIZE);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(iv,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*iv)*TESTSIZE);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;\tpacking/coding<sp/>%ld...<sp/>&quot;</highlight><highlight class="normal">,ptr);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pack<sp/>the<sp/>codebook,<sp/>write<sp/>the<sp/>testvector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>oggpack_reset(&amp;write);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>vorbis_book_init_encode(&amp;c,testlist[ptr]);<sp/></highlight><highlight class="comment">/*<sp/>get<sp/>it<sp/>into<sp/>memory</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>we<sp/>can<sp/>write<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>vorbis_staticbook_pack(testlist[ptr],&amp;write);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Codebook<sp/>size<sp/>%ld<sp/>bytes...<sp/>&quot;</highlight><highlight class="normal">,oggpack_bytes(&amp;write));</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;TESTSIZE;i+=c.dim){</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>best=_best(&amp;c,qv+i,1);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vorbis_book_encodev(&amp;c,best,qv+i,&amp;write);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>vorbis_book_clear(&amp;c);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;OK.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;\tunpacking/decoding<sp/>%ld...<sp/>&quot;</highlight><highlight class="normal">,ptr);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>transfer<sp/>the<sp/>write<sp/>data<sp/>to<sp/>a<sp/>read<sp/>buffer<sp/>and<sp/>unpack/read<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>oggpack_readinit(&amp;read,oggpack_get_buffer(&amp;write),oggpack_bytes(&amp;write));</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vorbis_staticbook_unpack(&amp;read,&amp;s)){</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error<sp/>unpacking<sp/>codebook.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vorbis_book_init_decode(&amp;c,&amp;s)){</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error<sp/>initializing<sp/>codebook.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;TESTSIZE;i+=c.dim)</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vorbis_book_decodev_set(&amp;c,iv+i,&amp;read,c.dim)==-1){</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;Error<sp/>reading<sp/>codebook<sp/>test<sp/>data<sp/>(EOP).\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;TESTSIZE;i++)</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fabs(qv[i]-iv[i])&gt;.000001){</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;read<sp/>(%g)<sp/>!=<sp/>written<sp/>(%g)<sp/>at<sp/>position<sp/>(%ld)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iv[i],qv[i],i);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight><highlight class="stringliteral">&quot;OK\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr++;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>above<sp/>is<sp/>the<sp/>trivial<sp/>stuff;<sp/>now<sp/>try<sp/>unquantizing<sp/>a<sp/>log<sp/>scale<sp/>codebook<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/sound/OggVorbis/vorbissrc/codebook.c"/>
  </compounddef>
</doxygen>
