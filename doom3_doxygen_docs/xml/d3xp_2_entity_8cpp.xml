<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="d3xp_2_entity_8cpp" kind="file">
    <compoundname>Entity.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../idlib/precompiled.h</includes>
    <includes refid="d3xp_2_game__local_8h" local="yes">Game_local.h</includes>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1ad5ea4caed6047c95aa310fb0af0c034d" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_PostSpawn(&quot;&lt;postspawn&gt;&quot;, NULL)</definition>
        <argsstring>(&quot;&lt;postspawn&gt;&quot;, NULL)</argsstring>
        <name>EV_PostSpawn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="43" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1ae7ddafd67802033c56842f8b9e645a26" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_FindTargets(&quot;&lt;findTargets&gt;&quot;, NULL)</definition>
        <argsstring>(&quot;&lt;findTargets&gt;&quot;, NULL)</argsstring>
        <name>EV_FindTargets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="44" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a09e7ac7dabb2a672c0f3fbf4fffe1c64" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Touch(&quot;&lt;touch&gt;&quot;,&quot;et&quot;)</definition>
        <argsstring>(&quot;&lt;touch&gt;&quot;,&quot;et&quot;)</argsstring>
        <name>EV_Touch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="45" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1aa1dcacc9e027ac67adf9ef28d44a986f" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_GetName(&quot;getName&quot;, NULL, &apos;s&apos;)</definition>
        <argsstring>(&quot;getName&quot;, NULL, &apos;s&apos;)</argsstring>
        <name>EV_GetName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="46" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a23680e112d18861fba87381781969f71" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_SetName(&quot;setName&quot;,&quot;s&quot;)</definition>
        <argsstring>(&quot;setName&quot;,&quot;s&quot;)</argsstring>
        <name>EV_SetName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="47" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a8d4f835d1dc1c5af91123734085140ea" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Activate(&quot;activate&quot;,&quot;e&quot;)</definition>
        <argsstring>(&quot;activate&quot;,&quot;e&quot;)</argsstring>
        <name>EV_Activate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="48" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a89fb9d245826e1cd893a95fb11657ada" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_ActivateTargets(&quot;activateTargets&quot;,&quot;e&quot;)</definition>
        <argsstring>(&quot;activateTargets&quot;,&quot;e&quot;)</argsstring>
        <name>EV_ActivateTargets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="49" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1ace4eee29af395a876017c0a1bb1b0055" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_NumTargets(&quot;numTargets&quot;, NULL, &apos;f&apos;)</definition>
        <argsstring>(&quot;numTargets&quot;, NULL, &apos;f&apos;)</argsstring>
        <name>EV_NumTargets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="50" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1af12b872c2da27faf1d13bd3d7939231e" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_GetTarget(&quot;getTarget&quot;,&quot;f&quot;, &apos;e&apos;)</definition>
        <argsstring>(&quot;getTarget&quot;,&quot;f&quot;, &apos;e&apos;)</argsstring>
        <name>EV_GetTarget</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="51" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1aab91a6c90fb1ff915383ed5526edc5b7" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_RandomTarget(&quot;randomTarget&quot;,&quot;s&quot;, &apos;e&apos;)</definition>
        <argsstring>(&quot;randomTarget&quot;,&quot;s&quot;, &apos;e&apos;)</argsstring>
        <name>EV_RandomTarget</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="52" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a2e695369d4b680a118fc0899a4807511" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Bind(&quot;bind&quot;,&quot;e&quot;)</definition>
        <argsstring>(&quot;bind&quot;,&quot;e&quot;)</argsstring>
        <name>EV_Bind</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="53" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1ad7dcb7dd803925962927e884c9b4fc99" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_BindPosition(&quot;bindPosition&quot;,&quot;e&quot;)</definition>
        <argsstring>(&quot;bindPosition&quot;,&quot;e&quot;)</argsstring>
        <name>EV_BindPosition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="54" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a165f0af844e79232a5a8f1392c83d217" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_BindToJoint(&quot;bindToJoint&quot;,&quot;esf&quot;)</definition>
        <argsstring>(&quot;bindToJoint&quot;,&quot;esf&quot;)</argsstring>
        <name>EV_BindToJoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="55" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a2ba4b97921162969ddfc3917f0689d2e" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Unbind(&quot;unbind&quot;, NULL)</definition>
        <argsstring>(&quot;unbind&quot;, NULL)</argsstring>
        <name>EV_Unbind</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="56" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a4b9e6a8b38c40fa5cfd1bdaed0fa1cd9" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_RemoveBinds(&quot;removeBinds&quot;)</definition>
        <argsstring>(&quot;removeBinds&quot;)</argsstring>
        <name>EV_RemoveBinds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="57" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a8a0e75e3fd895e5e7b18f82f5e71fac5" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_SpawnBind(&quot;&lt;spawnbind&gt;&quot;, NULL)</definition>
        <argsstring>(&quot;&lt;spawnbind&gt;&quot;, NULL)</argsstring>
        <name>EV_SpawnBind</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="58" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a2fbe35336782dd4981a78c4823cf6c7a" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_SetOwner(&quot;setOwner&quot;,&quot;e&quot;)</definition>
        <argsstring>(&quot;setOwner&quot;,&quot;e&quot;)</argsstring>
        <name>EV_SetOwner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="59" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1ae6b7d79901383fc495bf3de0f5ad6863" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_SetModel(&quot;setModel&quot;,&quot;s&quot;)</definition>
        <argsstring>(&quot;setModel&quot;,&quot;s&quot;)</argsstring>
        <name>EV_SetModel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="60" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a307725356ec161885bdc414d7ef172cc" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_SetSkin(&quot;setSkin&quot;,&quot;s&quot;)</definition>
        <argsstring>(&quot;setSkin&quot;,&quot;s&quot;)</argsstring>
        <name>EV_SetSkin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="61" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a89107581d978908330237e9146acd34a" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_GetWorldOrigin(&quot;getWorldOrigin&quot;, NULL, &apos;v&apos;)</definition>
        <argsstring>(&quot;getWorldOrigin&quot;, NULL, &apos;v&apos;)</argsstring>
        <name>EV_GetWorldOrigin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="62" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a01919202dd2513de127a9aaab082f162" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_SetWorldOrigin(&quot;setWorldOrigin&quot;,&quot;v&quot;)</definition>
        <argsstring>(&quot;setWorldOrigin&quot;,&quot;v&quot;)</argsstring>
        <name>EV_SetWorldOrigin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="63" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a89f680860e71d1b0d2792b2848b097da" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_GetOrigin(&quot;getOrigin&quot;, NULL, &apos;v&apos;)</definition>
        <argsstring>(&quot;getOrigin&quot;, NULL, &apos;v&apos;)</argsstring>
        <name>EV_GetOrigin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="64" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a105062eccec1d3c1574950c99dc64d5e" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_SetOrigin(&quot;setOrigin&quot;,&quot;v&quot;)</definition>
        <argsstring>(&quot;setOrigin&quot;,&quot;v&quot;)</argsstring>
        <name>EV_SetOrigin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="65" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1addbff95f28ba44b0a4339da9832f2199" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_GetAngles(&quot;getAngles&quot;, NULL, &apos;v&apos;)</definition>
        <argsstring>(&quot;getAngles&quot;, NULL, &apos;v&apos;)</argsstring>
        <name>EV_GetAngles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="66" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1afd7e7cc1574a9d327053de2eb2b07736" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_SetAngles(&quot;setAngles&quot;,&quot;v&quot;)</definition>
        <argsstring>(&quot;setAngles&quot;,&quot;v&quot;)</argsstring>
        <name>EV_SetAngles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="67" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1afa798ff5f52acdce370a6f296772538d" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_GetLinearVelocity(&quot;getLinearVelocity&quot;, NULL, &apos;v&apos;)</definition>
        <argsstring>(&quot;getLinearVelocity&quot;, NULL, &apos;v&apos;)</argsstring>
        <name>EV_GetLinearVelocity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="68" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1ae52a8251fff93679c6791232b12ab66a" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_SetLinearVelocity(&quot;setLinearVelocity&quot;,&quot;v&quot;)</definition>
        <argsstring>(&quot;setLinearVelocity&quot;,&quot;v&quot;)</argsstring>
        <name>EV_SetLinearVelocity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="69" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1ab1cb53114d58db776841393d24813705" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_GetAngularVelocity(&quot;getAngularVelocity&quot;, NULL, &apos;v&apos;)</definition>
        <argsstring>(&quot;getAngularVelocity&quot;, NULL, &apos;v&apos;)</argsstring>
        <name>EV_GetAngularVelocity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="70" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1ad61f674ec4091d421bcb64e939b1a767" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_SetAngularVelocity(&quot;setAngularVelocity&quot;,&quot;v&quot;)</definition>
        <argsstring>(&quot;setAngularVelocity&quot;,&quot;v&quot;)</argsstring>
        <name>EV_SetAngularVelocity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="71" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1ae2cd83c8f357b7556b580001ebe5586d" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_GetSize(&quot;getSize&quot;, NULL, &apos;v&apos;)</definition>
        <argsstring>(&quot;getSize&quot;, NULL, &apos;v&apos;)</argsstring>
        <name>EV_GetSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="72" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1ae9b7771a062a49e0b3ca882ab6ccf071" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_SetSize(&quot;setSize&quot;,&quot;vv&quot;)</definition>
        <argsstring>(&quot;setSize&quot;,&quot;vv&quot;)</argsstring>
        <name>EV_SetSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="73" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1acb48390a2ab2b0b538ba74d3122b467a" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_GetMins(&quot;getMins&quot;, NULL, &apos;v&apos;)</definition>
        <argsstring>(&quot;getMins&quot;, NULL, &apos;v&apos;)</argsstring>
        <name>EV_GetMins</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="74" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a7a6eaea8a0f79abb49a8824d09d1ed10" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_GetMaxs(&quot;getMaxs&quot;, NULL, &apos;v&apos;)</definition>
        <argsstring>(&quot;getMaxs&quot;, NULL, &apos;v&apos;)</argsstring>
        <name>EV_GetMaxs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="75" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a06628c0d7aca43cbeecedceb6c19e8c8" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_IsHidden(&quot;isHidden&quot;, NULL, &apos;d&apos;)</definition>
        <argsstring>(&quot;isHidden&quot;, NULL, &apos;d&apos;)</argsstring>
        <name>EV_IsHidden</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="76" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1afeb3b09844ed05d14908b8a7cfc0c418" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Hide(&quot;hide&quot;, NULL)</definition>
        <argsstring>(&quot;hide&quot;, NULL)</argsstring>
        <name>EV_Hide</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="77" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1ad9aa4340089a91c9f0c35e1c7781ffbf" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Show(&quot;show&quot;, NULL)</definition>
        <argsstring>(&quot;show&quot;, NULL)</argsstring>
        <name>EV_Show</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="78" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a5791eaa459245be4c90a426d0faef688" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Touches(&quot;touches&quot;,&quot;E&quot;, &apos;d&apos;)</definition>
        <argsstring>(&quot;touches&quot;,&quot;E&quot;, &apos;d&apos;)</argsstring>
        <name>EV_Touches</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="79" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a6bdf9ad30467656154923b011d769752" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_ClearSignal(&quot;clearSignal&quot;,&quot;d&quot;)</definition>
        <argsstring>(&quot;clearSignal&quot;,&quot;d&quot;)</argsstring>
        <name>EV_ClearSignal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="80" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1accea7ee0988bee126efc9534afe06613" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_GetShaderParm(&quot;getShaderParm&quot;,&quot;d&quot;, &apos;f&apos;)</definition>
        <argsstring>(&quot;getShaderParm&quot;,&quot;d&quot;, &apos;f&apos;)</argsstring>
        <name>EV_GetShaderParm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="81" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1aacb28140558eab80b0e3e0969c432865" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_SetShaderParm(&quot;setShaderParm&quot;,&quot;df&quot;)</definition>
        <argsstring>(&quot;setShaderParm&quot;,&quot;df&quot;)</argsstring>
        <name>EV_SetShaderParm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="82" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a52c7251d85585bf2d2d8d7b4b5272eb9" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_SetShaderParms(&quot;setShaderParms&quot;,&quot;ffff&quot;)</definition>
        <argsstring>(&quot;setShaderParms&quot;,&quot;ffff&quot;)</argsstring>
        <name>EV_SetShaderParms</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="83" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1ae56f9efb3f0dd00c5c1b8d2f64880f19" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_SetColor(&quot;setColor&quot;,&quot;fff&quot;)</definition>
        <argsstring>(&quot;setColor&quot;,&quot;fff&quot;)</argsstring>
        <name>EV_SetColor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="84" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1ad722aee8549198a194f7886301a76507" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_GetColor(&quot;getColor&quot;, NULL, &apos;v&apos;)</definition>
        <argsstring>(&quot;getColor&quot;, NULL, &apos;v&apos;)</argsstring>
        <name>EV_GetColor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="85" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1aa4eb801d2fd943ab136a2f98383bc8a6" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_CacheSoundShader(&quot;cacheSoundShader&quot;,&quot;s&quot;)</definition>
        <argsstring>(&quot;cacheSoundShader&quot;,&quot;s&quot;)</argsstring>
        <name>EV_CacheSoundShader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="86" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a302789459b9f20b81fad0d8e6a0bcffc" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_StartSoundShader(&quot;startSoundShader&quot;,&quot;sd&quot;, &apos;f&apos;)</definition>
        <argsstring>(&quot;startSoundShader&quot;,&quot;sd&quot;, &apos;f&apos;)</argsstring>
        <name>EV_StartSoundShader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="87" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1aa5b0cb1a0341537e01f651a1dfa3fab0" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_StartSound(&quot;startSound&quot;,&quot;sdd&quot;, &apos;f&apos;)</definition>
        <argsstring>(&quot;startSound&quot;,&quot;sdd&quot;, &apos;f&apos;)</argsstring>
        <name>EV_StartSound</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="88" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1ac582615d58c6a220ca0ae3e3a2e1867b" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_StopSound(&quot;stopSound&quot;,&quot;dd&quot;)</definition>
        <argsstring>(&quot;stopSound&quot;,&quot;dd&quot;)</argsstring>
        <name>EV_StopSound</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="89" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a3084c9816b369a0a4f4e92c01c5a74d5" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_FadeSound(&quot;fadeSound&quot;,&quot;dff&quot;)</definition>
        <argsstring>(&quot;fadeSound&quot;,&quot;dff&quot;)</argsstring>
        <name>EV_FadeSound</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="90" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a0a3633a20a3796fe14e59dc11eb0cacb" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_SetGuiParm(&quot;setGuiParm&quot;,&quot;ss&quot;)</definition>
        <argsstring>(&quot;setGuiParm&quot;,&quot;ss&quot;)</argsstring>
        <name>EV_SetGuiParm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="91" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a7de69e57a4356d45c2e99a995bfa1073" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_SetGuiFloat(&quot;setGuiFloat&quot;,&quot;sf&quot;)</definition>
        <argsstring>(&quot;setGuiFloat&quot;,&quot;sf&quot;)</argsstring>
        <name>EV_SetGuiFloat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="92" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1ae2ca57722fda8ac01df05cddadf49a5f" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_GetNextKey(&quot;getNextKey&quot;,&quot;ss&quot;, &apos;s&apos;)</definition>
        <argsstring>(&quot;getNextKey&quot;,&quot;ss&quot;, &apos;s&apos;)</argsstring>
        <name>EV_GetNextKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="93" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a5bb9174555f34ae00110dde494004fc3" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_SetKey(&quot;setKey&quot;,&quot;ss&quot;)</definition>
        <argsstring>(&quot;setKey&quot;,&quot;ss&quot;)</argsstring>
        <name>EV_SetKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="94" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1ab2b5dd4c47a0dddaca35bdccb08c39ea" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_GetKey(&quot;getKey&quot;,&quot;s&quot;, &apos;s&apos;)</definition>
        <argsstring>(&quot;getKey&quot;,&quot;s&quot;, &apos;s&apos;)</argsstring>
        <name>EV_GetKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="95" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a2d34fa14b006fbebcda4e89f9dc8aaf5" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_GetIntKey(&quot;getIntKey&quot;,&quot;s&quot;, &apos;f&apos;)</definition>
        <argsstring>(&quot;getIntKey&quot;,&quot;s&quot;, &apos;f&apos;)</argsstring>
        <name>EV_GetIntKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="96" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a3b20b4daf5606c1c1f50186de49736c4" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_GetFloatKey(&quot;getFloatKey&quot;,&quot;s&quot;, &apos;f&apos;)</definition>
        <argsstring>(&quot;getFloatKey&quot;,&quot;s&quot;, &apos;f&apos;)</argsstring>
        <name>EV_GetFloatKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="97" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a15aed3f82bcb65600fc12d205b27cee8" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_GetVectorKey(&quot;getVectorKey&quot;,&quot;s&quot;, &apos;v&apos;)</definition>
        <argsstring>(&quot;getVectorKey&quot;,&quot;s&quot;, &apos;v&apos;)</argsstring>
        <name>EV_GetVectorKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="98" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a67af9477c91306b43b45f13e9f84be33" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_GetEntityKey(&quot;getEntityKey&quot;,&quot;s&quot;, &apos;e&apos;)</definition>
        <argsstring>(&quot;getEntityKey&quot;,&quot;s&quot;, &apos;e&apos;)</argsstring>
        <name>EV_GetEntityKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="99" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a09e425130a13db7737ee12e1d62b8d73" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_RestorePosition(&quot;restorePosition&quot;)</definition>
        <argsstring>(&quot;restorePosition&quot;)</argsstring>
        <name>EV_RestorePosition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="100" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1ac0a960ad31cb250dde5af02fdba27c02" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_UpdateCameraTarget(&quot;&lt;updateCameraTarget&gt;&quot;, NULL)</definition>
        <argsstring>(&quot;&lt;updateCameraTarget&gt;&quot;, NULL)</argsstring>
        <name>EV_UpdateCameraTarget</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="101" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a23822aeb0d00e222c5cd7771f84ce2a3" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_DistanceTo(&quot;distanceTo&quot;,&quot;E&quot;, &apos;f&apos;)</definition>
        <argsstring>(&quot;distanceTo&quot;,&quot;E&quot;, &apos;f&apos;)</argsstring>
        <name>EV_DistanceTo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="102" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a51f987c959afc9cf7448d046ed113d73" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_DistanceToPoint(&quot;distanceToPoint&quot;,&quot;v&quot;, &apos;f&apos;)</definition>
        <argsstring>(&quot;distanceToPoint&quot;,&quot;v&quot;, &apos;f&apos;)</argsstring>
        <name>EV_DistanceToPoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="103" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a0873ea367f57be4fc66d3760d8d49161" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_StartFx(&quot;startFx&quot;,&quot;s&quot;)</definition>
        <argsstring>(&quot;startFx&quot;,&quot;s&quot;)</argsstring>
        <name>EV_StartFx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="104" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a0426f04cb7af03ed5d1b326abd12c18a" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_HasFunction(&quot;hasFunction&quot;,&quot;s&quot;, &apos;d&apos;)</definition>
        <argsstring>(&quot;hasFunction&quot;,&quot;s&quot;, &apos;d&apos;)</argsstring>
        <name>EV_HasFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="105" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a32913364517ec289e6450cb9de727244" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_CallFunction(&quot;callFunction&quot;,&quot;s&quot;)</definition>
        <argsstring>(&quot;callFunction&quot;,&quot;s&quot;)</argsstring>
        <name>EV_CallFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="106" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1ad94337c1e8f7061973925902ba2094ee" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_SetNeverDormant(&quot;setNeverDormant&quot;,&quot;d&quot;)</definition>
        <argsstring>(&quot;setNeverDormant&quot;,&quot;d&quot;)</argsstring>
        <name>EV_SetNeverDormant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="107" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a852e97c77510f67759f166bbeba27ac9" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_GetJointHandle(&quot;getJointHandle&quot;,&quot;s&quot;, &apos;d&apos;)</definition>
        <argsstring>(&quot;getJointHandle&quot;,&quot;s&quot;, &apos;d&apos;)</argsstring>
        <name>EV_GetJointHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="5066" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1afeee3a6c889ac7e219243fc9c70de390" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_ClearAllJoints(&quot;clearAllJoints&quot;)</definition>
        <argsstring>(&quot;clearAllJoints&quot;)</argsstring>
        <name>EV_ClearAllJoints</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="5067" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a8304d888002eca12f28321e5d553b371" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_ClearJoint(&quot;clearJoint&quot;,&quot;d&quot;)</definition>
        <argsstring>(&quot;clearJoint&quot;,&quot;d&quot;)</argsstring>
        <name>EV_ClearJoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="5068" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a0398f2685bc39b6e4d8b5320944fc8e4" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_SetJointPos(&quot;setJointPos&quot;,&quot;ddv&quot;)</definition>
        <argsstring>(&quot;setJointPos&quot;,&quot;ddv&quot;)</argsstring>
        <name>EV_SetJointPos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="5069" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1acb3bc09035259f68e755dae19ede0c18" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_SetJointAngle(&quot;setJointAngle&quot;,&quot;ddv&quot;)</definition>
        <argsstring>(&quot;setJointAngle&quot;,&quot;ddv&quot;)</argsstring>
        <name>EV_SetJointAngle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="5070" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a81a635d559ff35019dfacdf2e858c004" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_GetJointPos(&quot;getJointPos&quot;,&quot;d&quot;, &apos;v&apos;)</definition>
        <argsstring>(&quot;getJointPos&quot;,&quot;d&quot;, &apos;v&apos;)</argsstring>
        <name>EV_GetJointPos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="5071" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2_entity_8cpp_1a126d01e305413696450bc8ef3fc0cf32" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_GetJointAngle(&quot;getJointAngle&quot;,&quot;d&quot;, &apos;v&apos;)</definition>
        <argsstring>(&quot;getJointAngle&quot;,&quot;d&quot;, &apos;v&apos;)</argsstring>
        <name>EV_GetJointAngle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="5072" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d3xp_2_entity_8cpp_1af5161c2eb9223d7c1eed7b7fc04358c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UpdateGuiParms</definition>
        <argsstring>(idUserInterface *gui, const idDict *args)</argsstring>
        <name>UpdateGuiParms</name>
        <param>
          <type><ref refid="classid_user_interface" kindref="compound">idUserInterface</ref> *</type>
          <declname>gui</declname>
        </param>
        <param>
          <type>const <ref refid="classid_dict" kindref="compound">idDict</ref> *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="196" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" bodystart="196" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="d3xp_2_entity_8cpp_1a5e1d3ab8f9490f89478d61097668954b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AddRenderGui</definition>
        <argsstring>(const char *name, idUserInterface **gui, const idDict *args)</argsstring>
        <name>AddRenderGui</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classid_user_interface" kindref="compound">idUserInterface</ref> **</type>
          <declname>gui</declname>
        </param>
        <param>
          <type>const <ref refid="classid_dict" kindref="compound">idDict</ref> *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" line="214" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp" bodystart="214" bodyend="218"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Game_local.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="35"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="36"><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/>idEntity</highlight></codeline>
<codeline lineno="38"><highlight class="comment"></highlight></codeline>
<codeline lineno="39"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="40"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>overridable<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_PostSpawn(<sp/></highlight><highlight class="stringliteral">&quot;&lt;postspawn&gt;&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_FindTargets(<sp/></highlight><highlight class="stringliteral">&quot;&lt;findTargets&gt;&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Touch(<sp/></highlight><highlight class="stringliteral">&quot;&lt;touch&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;et&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GetName(<sp/></highlight><highlight class="stringliteral">&quot;getName&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_SetName(<sp/></highlight><highlight class="stringliteral">&quot;setName&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Activate(<sp/></highlight><highlight class="stringliteral">&quot;activate&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_ActivateTargets(<sp/></highlight><highlight class="stringliteral">&quot;activateTargets&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_NumTargets(<sp/></highlight><highlight class="stringliteral">&quot;numTargets&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GetTarget(<sp/></highlight><highlight class="stringliteral">&quot;getTarget&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_RandomTarget(<sp/></highlight><highlight class="stringliteral">&quot;randomTarget&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Bind(<sp/></highlight><highlight class="stringliteral">&quot;bind&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_BindPosition(<sp/></highlight><highlight class="stringliteral">&quot;bindPosition&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_BindToJoint(<sp/></highlight><highlight class="stringliteral">&quot;bindToJoint&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;esf&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Unbind(<sp/></highlight><highlight class="stringliteral">&quot;unbind&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_RemoveBinds(<sp/></highlight><highlight class="stringliteral">&quot;removeBinds&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_SpawnBind(<sp/></highlight><highlight class="stringliteral">&quot;&lt;spawnbind&gt;&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_SetOwner(<sp/></highlight><highlight class="stringliteral">&quot;setOwner&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_SetModel(<sp/></highlight><highlight class="stringliteral">&quot;setModel&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_SetSkin(<sp/></highlight><highlight class="stringliteral">&quot;setSkin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GetWorldOrigin(<sp/></highlight><highlight class="stringliteral">&quot;getWorldOrigin&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_SetWorldOrigin(<sp/></highlight><highlight class="stringliteral">&quot;setWorldOrigin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GetOrigin(<sp/></highlight><highlight class="stringliteral">&quot;getOrigin&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_SetOrigin(<sp/></highlight><highlight class="stringliteral">&quot;setOrigin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GetAngles(<sp/></highlight><highlight class="stringliteral">&quot;getAngles&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_SetAngles(<sp/></highlight><highlight class="stringliteral">&quot;setAngles&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GetLinearVelocity(<sp/></highlight><highlight class="stringliteral">&quot;getLinearVelocity&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_SetLinearVelocity(<sp/></highlight><highlight class="stringliteral">&quot;setLinearVelocity&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GetAngularVelocity(<sp/></highlight><highlight class="stringliteral">&quot;getAngularVelocity&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_SetAngularVelocity(<sp/></highlight><highlight class="stringliteral">&quot;setAngularVelocity&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GetSize(<sp/></highlight><highlight class="stringliteral">&quot;getSize&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_SetSize(<sp/></highlight><highlight class="stringliteral">&quot;setSize&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;vv&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GetMins(<sp/></highlight><highlight class="stringliteral">&quot;getMins&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GetMaxs(<sp/></highlight><highlight class="stringliteral">&quot;getMaxs&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_IsHidden(<sp/></highlight><highlight class="stringliteral">&quot;isHidden&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Hide(<sp/></highlight><highlight class="stringliteral">&quot;hide&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Show(<sp/></highlight><highlight class="stringliteral">&quot;show&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Touches(<sp/></highlight><highlight class="stringliteral">&quot;touches&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;E&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_ClearSignal(<sp/></highlight><highlight class="stringliteral">&quot;clearSignal&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GetShaderParm(<sp/></highlight><highlight class="stringliteral">&quot;getShaderParm&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_SetShaderParm(<sp/></highlight><highlight class="stringliteral">&quot;setShaderParm&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;df&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_SetShaderParms(<sp/></highlight><highlight class="stringliteral">&quot;setShaderParms&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ffff&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_SetColor(<sp/></highlight><highlight class="stringliteral">&quot;setColor&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;fff&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GetColor(<sp/></highlight><highlight class="stringliteral">&quot;getColor&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_CacheSoundShader(<sp/></highlight><highlight class="stringliteral">&quot;cacheSoundShader&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_StartSoundShader(<sp/></highlight><highlight class="stringliteral">&quot;startSoundShader&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;sd&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_StartSound(<sp/></highlight><highlight class="stringliteral">&quot;startSound&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;sdd&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_StopSound(<sp/></highlight><highlight class="stringliteral">&quot;stopSound&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dd&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_FadeSound(<sp/></highlight><highlight class="stringliteral">&quot;fadeSound&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dff&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_SetGuiParm(<sp/></highlight><highlight class="stringliteral">&quot;setGuiParm&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ss&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_SetGuiFloat(<sp/></highlight><highlight class="stringliteral">&quot;setGuiFloat&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;sf&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GetNextKey(<sp/></highlight><highlight class="stringliteral">&quot;getNextKey&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ss&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_SetKey(<sp/></highlight><highlight class="stringliteral">&quot;setKey&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ss&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GetKey(<sp/></highlight><highlight class="stringliteral">&quot;getKey&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GetIntKey(<sp/></highlight><highlight class="stringliteral">&quot;getIntKey&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GetFloatKey(<sp/></highlight><highlight class="stringliteral">&quot;getFloatKey&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GetVectorKey(<sp/></highlight><highlight class="stringliteral">&quot;getVectorKey&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GetEntityKey(<sp/></highlight><highlight class="stringliteral">&quot;getEntityKey&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_RestorePosition(<sp/></highlight><highlight class="stringliteral">&quot;restorePosition&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_UpdateCameraTarget(<sp/></highlight><highlight class="stringliteral">&quot;&lt;updateCameraTarget&gt;&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_DistanceTo(<sp/></highlight><highlight class="stringliteral">&quot;distanceTo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;E&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_DistanceToPoint(<sp/></highlight><highlight class="stringliteral">&quot;distanceToPoint&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_StartFx(<sp/></highlight><highlight class="stringliteral">&quot;startFx&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_HasFunction(<sp/></highlight><highlight class="stringliteral">&quot;hasFunction&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_CallFunction(<sp/></highlight><highlight class="stringliteral">&quot;callFunction&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_SetNeverDormant(<sp/></highlight><highlight class="stringliteral">&quot;setNeverDormant&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_SetGui<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;setGui&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ds&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_PrecacheGui<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;precacheGui&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GetGuiParm<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;getGuiParm&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ds&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GetGuiParmFloat<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;getGuiParmFloat&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ds&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_MotionBlurOn(<sp/></highlight><highlight class="stringliteral">&quot;motionBlurOn&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_MotionBlurOff(<sp/></highlight><highlight class="stringliteral">&quot;motionBlurOff&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GuiNamedEvent<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;guiNamedEvent&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ds&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">ABSTRACT_DECLARATION(<sp/><ref refid="classid_class" kindref="compound">idClass</ref>,<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GetName,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_GetName<sp/>)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_SetName,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_SetName<sp/>)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_FindTargets,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_FindTargets<sp/>)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_ActivateTargets,<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_ActivateTargets<sp/>)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_NumTargets,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_NumTargets<sp/>)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GetTarget,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_GetTarget<sp/>)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_RandomTarget,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_RandomTarget<sp/>)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_BindToJoint,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_BindToJoint<sp/>)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_RemoveBinds,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_RemoveBinds<sp/>)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Bind,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_Bind<sp/>)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_BindPosition,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_BindPosition<sp/>)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Unbind,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_Unbind<sp/>)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_SpawnBind,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_SpawnBind<sp/>)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_SetOwner,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_SetOwner<sp/>)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_SetModel,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_SetModel<sp/>)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_SetSkin,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_SetSkin<sp/>)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GetShaderParm,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_GetShaderParm<sp/>)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_SetShaderParm,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_SetShaderParm<sp/>)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_SetShaderParms,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_SetShaderParms<sp/>)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_SetColor,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_SetColor<sp/>)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GetColor,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_GetColor<sp/>)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_IsHidden,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_IsHidden<sp/>)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Hide,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_Hide<sp/>)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Show,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_Show<sp/>)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_CacheSoundShader,<sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_CacheSoundShader<sp/>)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_StartSoundShader,<sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_StartSoundShader<sp/>)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_StartSound,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_StartSound<sp/>)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_StopSound,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_StopSound<sp/>)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_FadeSound,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_FadeSound<sp/>)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GetWorldOrigin,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_GetWorldOrigin<sp/>)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_SetWorldOrigin,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_SetWorldOrigin<sp/>)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GetOrigin,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_GetOrigin<sp/>)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_SetOrigin,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_SetOrigin<sp/>)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GetAngles,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_GetAngles<sp/>)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_SetAngles,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_SetAngles<sp/>)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GetLinearVelocity,<sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_GetLinearVelocity<sp/>)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_SetLinearVelocity,<sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_SetLinearVelocity<sp/>)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GetAngularVelocity,<sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_GetAngularVelocity<sp/>)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_SetAngularVelocity,<sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_SetAngularVelocity<sp/>)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GetSize,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_GetSize<sp/>)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_SetSize,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_SetSize<sp/>)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GetMins,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_GetMins)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GetMaxs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_GetMaxs<sp/>)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Touches,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_Touches<sp/>)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_SetGuiParm,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_SetGuiParm<sp/>)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_SetGuiFloat,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_SetGuiFloat<sp/>)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GetNextKey,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_GetNextKey<sp/>)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_SetKey,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_SetKey<sp/>)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GetKey,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_GetKey<sp/>)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GetIntKey,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_GetIntKey<sp/>)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GetFloatKey,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_GetFloatKey<sp/>)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GetVectorKey,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_GetVectorKey<sp/>)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GetEntityKey,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_GetEntityKey<sp/>)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_RestorePosition,<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_RestorePosition<sp/>)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_UpdateCameraTarget,<sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_UpdateCameraTarget<sp/>)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_DistanceTo,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_DistanceTo<sp/>)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_DistanceToPoint,<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_DistanceToPoint<sp/>)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_StartFx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_StartFx<sp/>)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_WaitFrame,<sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_WaitFrame<sp/>)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_Wait,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_Wait<sp/>)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_HasFunction,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_HasFunction<sp/>)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_CallFunction,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_CallFunction<sp/>)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_SetNeverDormant,<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_SetNeverDormant<sp/>)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_SetGui,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idEntity::Event_SetGui<sp/>)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_PrecacheGui,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_PrecacheGui<sp/>)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GetGuiParm,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_GetGuiParm<sp/>)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GetGuiParmFloat,<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_GetGuiParmFloat<sp/>)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GuiNamedEvent,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>::Event_GuiNamedEvent<sp/>)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"></highlight><highlight class="normal">END_CLASS</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="192"><highlight class="comment">================</highlight></codeline>
<codeline lineno="193"><highlight class="comment">UpdateGuiParms</highlight></codeline>
<codeline lineno="194"><highlight class="comment">================</highlight></codeline>
<codeline lineno="195"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UpdateGuiParms(<sp/><ref refid="classid_user_interface" kindref="compound">idUserInterface</ref><sp/>*gui,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>*args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gui<sp/>==<sp/>NULL<sp/>||<sp/>args<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_key_value" kindref="compound">idKeyValue</ref><sp/>*kv<sp/>=<sp/>args-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;gui_parm&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>kv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gui-&gt;SetStateString(<sp/>kv-&gt;GetKey(),<sp/>kv-&gt;GetValue()<sp/>);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>args-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;gui_parm&quot;</highlight><highlight class="normal">,<sp/>kv<sp/>);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>gui-&gt;SetStateBool(<sp/></highlight><highlight class="stringliteral">&quot;noninteractive&quot;</highlight><highlight class="normal">,<sp/><sp/>args-&gt;GetBool(<sp/></highlight><highlight class="stringliteral">&quot;gui_noninteractive&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>gui-&gt;StateChanged(<sp/>gameLocal.time<sp/>);</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="210"><highlight class="comment">================</highlight></codeline>
<codeline lineno="211"><highlight class="comment">AddRenderGui</highlight></codeline>
<codeline lineno="212"><highlight class="comment">================</highlight></codeline>
<codeline lineno="213"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddRenderGui(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="classid_user_interface" kindref="compound">idUserInterface</ref><sp/>**gui,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>*args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_key_value" kindref="compound">idKeyValue</ref><sp/>*kv<sp/>=<sp/>args-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;gui_parm&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>*gui<sp/>=<sp/>uiManager-&gt;FindGui(<sp/>name,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>(<sp/>kv<sp/>!=<sp/>NULL<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateGuiParms(<sp/>*gui,<sp/>args<sp/>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="221"><highlight class="comment">================</highlight></codeline>
<codeline lineno="222"><highlight class="comment">idGameEdit::ParseSpawnArgsToRenderEntity</highlight></codeline>
<codeline lineno="223"><highlight class="comment"></highlight></codeline>
<codeline lineno="224"><highlight class="comment">parse<sp/>the<sp/>static<sp/>model<sp/>parameters</highlight></codeline>
<codeline lineno="225"><highlight class="comment">this<sp/>is<sp/>the<sp/>canonical<sp/>renderEntity<sp/>parm<sp/>parsing,</highlight></codeline>
<codeline lineno="226"><highlight class="comment">which<sp/>should<sp/>be<sp/>used<sp/>by<sp/>dmap<sp/>and<sp/>the<sp/>editor</highlight></codeline>
<codeline lineno="227"><highlight class="comment">================</highlight></codeline>
<codeline lineno="228"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameEdit::ParseSpawnArgsToRenderEntity(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>*args,<sp/><ref refid="structrender_entity__s" kindref="compound">renderEntity_t</ref><sp/>*renderEntity<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*temp;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/>color;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_decl_model_def" kindref="compound">idDeclModelDef</ref><sp/>*modelDef;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>renderEntity,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>*renderEntity<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>args-&gt;GetString(<sp/></highlight><highlight class="stringliteral">&quot;model&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>modelDef<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>temp[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modelDef<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classid_decl_model_def" kindref="compound">idDeclModelDef</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>declManager-&gt;FindType(<sp/>DECL_MODELDEF,<sp/>temp,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>modelDef<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity-&gt;hModel<sp/>=<sp/>modelDef-&gt;ModelHandle();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!renderEntity-&gt;hModel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity-&gt;hModel<sp/>=<sp/>renderModelManager-&gt;FindModel(<sp/>temp<sp/>);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>renderEntity-&gt;hModel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity-&gt;bounds<sp/>=<sp/>renderEntity-&gt;hModel-&gt;Bounds(<sp/>renderEntity<sp/>);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity-&gt;bounds.Zero();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>args-&gt;GetString(<sp/></highlight><highlight class="stringliteral">&quot;skin&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>temp[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity-&gt;customSkin<sp/>=<sp/>declManager-&gt;FindSkin(<sp/>temp<sp/>);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>modelDef<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity-&gt;customSkin<sp/>=<sp/>modelDef-&gt;GetDefaultSkin();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>args-&gt;GetString(<sp/></highlight><highlight class="stringliteral">&quot;shader&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>temp[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity-&gt;customShader<sp/>=<sp/>declManager-&gt;FindMaterial(<sp/>temp<sp/>);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>args-&gt;GetVector(<sp/></highlight><highlight class="stringliteral">&quot;origin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0<sp/>0<sp/>0&quot;</highlight><highlight class="normal">,<sp/>renderEntity-&gt;origin<sp/>);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>rotation<sp/>matrix<sp/>in<sp/>either<sp/>full<sp/>form,<sp/>or<sp/>single<sp/>angle<sp/>form</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!args-&gt;GetMatrix(<sp/></highlight><highlight class="stringliteral">&quot;rotation&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1<sp/>0<sp/>0<sp/>0<sp/>1<sp/>0<sp/>0<sp/>0<sp/>1&quot;</highlight><highlight class="normal">,<sp/>renderEntity-&gt;axis<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>args-&gt;GetFloat(<sp/></highlight><highlight class="stringliteral">&quot;angle&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>angle<sp/>!=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity-&gt;axis<sp/>=<sp/><ref refid="classid_angles" kindref="compound">idAngles</ref>(<sp/>0.0f,<sp/>angle,<sp/>0.0f<sp/>).ToMat3();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity-&gt;axis.Identity();</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity-&gt;referenceSound<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>shader<sp/>parms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>args-&gt;GetVector(<sp/></highlight><highlight class="stringliteral">&quot;_color&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1<sp/>1<sp/>1&quot;</highlight><highlight class="normal">,<sp/>color<sp/>);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity-&gt;shaderParms[<sp/>SHADERPARM_RED<sp/>]<sp/><sp/><sp/><sp/><sp/>=<sp/>color[0];</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity-&gt;shaderParms[<sp/>SHADERPARM_GREEN<sp/>]<sp/><sp/><sp/>=<sp/>color[1];</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity-&gt;shaderParms[<sp/>SHADERPARM_BLUE<sp/>]<sp/><sp/><sp/><sp/>=<sp/>color[2];</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity-&gt;shaderParms[<sp/>3<sp/>]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>args-&gt;GetFloat(<sp/></highlight><highlight class="stringliteral">&quot;shaderParm3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity-&gt;shaderParms[<sp/>4<sp/>]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>args-&gt;GetFloat(<sp/></highlight><highlight class="stringliteral">&quot;shaderParm4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity-&gt;shaderParms[<sp/>5<sp/>]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>args-&gt;GetFloat(<sp/></highlight><highlight class="stringliteral">&quot;shaderParm5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity-&gt;shaderParms[<sp/>6<sp/>]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>args-&gt;GetFloat(<sp/></highlight><highlight class="stringliteral">&quot;shaderParm6&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity-&gt;shaderParms[<sp/>7<sp/>]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>args-&gt;GetFloat(<sp/></highlight><highlight class="stringliteral">&quot;shaderParm7&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity-&gt;shaderParms[<sp/>8<sp/>]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>args-&gt;GetFloat(<sp/></highlight><highlight class="stringliteral">&quot;shaderParm8&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity-&gt;shaderParms[<sp/>9<sp/>]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>args-&gt;GetFloat(<sp/></highlight><highlight class="stringliteral">&quot;shaderParm9&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity-&gt;shaderParms[<sp/>10<sp/>]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>args-&gt;GetFloat(<sp/></highlight><highlight class="stringliteral">&quot;shaderParm10&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity-&gt;shaderParms[<sp/>11<sp/>]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>args-&gt;GetFloat(<sp/></highlight><highlight class="stringliteral">&quot;shaderParm11&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>noDynamicInteractions<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity-&gt;noDynamicInteractions<sp/>=<sp/>args-&gt;GetBool(<sp/></highlight><highlight class="stringliteral">&quot;noDynamicInteractions&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>noshadows<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity-&gt;noShadow<sp/>=<sp/>args-&gt;GetBool(<sp/></highlight><highlight class="stringliteral">&quot;noshadows&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>noselfshadows<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity-&gt;noSelfShadow<sp/>=<sp/>args-&gt;GetBool(<sp/></highlight><highlight class="stringliteral">&quot;noselfshadows&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>any<sp/>guis,<sp/>including<sp/>entity-specific<sp/>states</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_RENDERENTITY_GUI;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>args-&gt;GetString(<sp/>i<sp/>==<sp/>0<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;gui&quot;</highlight><highlight class="normal"><sp/>:<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;gui%d&quot;</highlight><highlight class="normal">,<sp/>i<sp/>+<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>temp[<sp/>0<sp/>]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddRenderGui(<sp/>temp,<sp/>&amp;renderEntity-&gt;gui[<sp/>i<sp/>],<sp/>args<sp/>);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="316"><highlight class="comment">================</highlight></codeline>
<codeline lineno="317"><highlight class="comment">idGameEdit::ParseSpawnArgsToRefSound</highlight></codeline>
<codeline lineno="318"><highlight class="comment"></highlight></codeline>
<codeline lineno="319"><highlight class="comment">parse<sp/>the<sp/>sound<sp/>parameters</highlight></codeline>
<codeline lineno="320"><highlight class="comment">this<sp/>is<sp/>the<sp/>canonical<sp/>refSound<sp/>parm<sp/>parsing,</highlight></codeline>
<codeline lineno="321"><highlight class="comment">which<sp/>should<sp/>be<sp/>used<sp/>by<sp/>dmap<sp/>and<sp/>the<sp/>editor</highlight></codeline>
<codeline lineno="322"><highlight class="comment">================</highlight></codeline>
<codeline lineno="323"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameEdit::ParseSpawnArgsToRefSound(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>*args,<sp/><ref refid="structref_sound__t" kindref="compound">refSound_t</ref><sp/>*refSound<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*temp;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>refSound,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>*refSound<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>refSound-&gt;parms.minDistance<sp/>=<sp/>args-&gt;GetFloat(<sp/></highlight><highlight class="stringliteral">&quot;s_mindistance&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>refSound-&gt;parms.maxDistance<sp/>=<sp/>args-&gt;GetFloat(<sp/></highlight><highlight class="stringliteral">&quot;s_maxdistance&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>refSound-&gt;parms.volume<sp/>=<sp/>args-&gt;GetFloat(<sp/></highlight><highlight class="stringliteral">&quot;s_volume&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>refSound-&gt;parms.shakes<sp/>=<sp/>args-&gt;GetFloat(<sp/></highlight><highlight class="stringliteral">&quot;s_shakes&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>args-&gt;GetVector(<sp/></highlight><highlight class="stringliteral">&quot;origin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0<sp/>0<sp/>0&quot;</highlight><highlight class="normal">,<sp/>refSound-&gt;origin<sp/>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>refSound-&gt;referenceSound<sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>a<sp/>diversity<sp/>is<sp/>not<sp/>specified,<sp/>every<sp/>sound<sp/>start<sp/>will<sp/>make</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>random<sp/>one.<sp/><sp/>Specifying<sp/>diversity<sp/>is<sp/>usefull<sp/>to<sp/>make<sp/>multiple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lights<sp/>all<sp/>share<sp/>the<sp/>same<sp/>buzz<sp/>sound<sp/>offset,<sp/>for<sp/>instance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>refSound-&gt;diversity<sp/>=<sp/>args-&gt;GetFloat(<sp/></highlight><highlight class="stringliteral">&quot;s_diversity&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-1&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>refSound-&gt;waitfortrigger<sp/>=<sp/>args-&gt;GetBool(<sp/></highlight><highlight class="stringliteral">&quot;s_waitfortrigger&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>args-&gt;GetBool(<sp/></highlight><highlight class="stringliteral">&quot;s_omni&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refSound-&gt;parms.soundShaderFlags<sp/>|=<sp/>SSF_OMNIDIRECTIONAL;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>args-&gt;GetBool(<sp/></highlight><highlight class="stringliteral">&quot;s_looping&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refSound-&gt;parms.soundShaderFlags<sp/>|=<sp/>SSF_LOOPING;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>args-&gt;GetBool(<sp/></highlight><highlight class="stringliteral">&quot;s_occlusion&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refSound-&gt;parms.soundShaderFlags<sp/>|=<sp/>SSF_NO_OCCLUSION;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>args-&gt;GetBool(<sp/></highlight><highlight class="stringliteral">&quot;s_global&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refSound-&gt;parms.soundShaderFlags<sp/>|=<sp/>SSF_GLOBAL;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>args-&gt;GetBool(<sp/></highlight><highlight class="stringliteral">&quot;s_unclamped&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refSound-&gt;parms.soundShaderFlags<sp/>|=<sp/>SSF_UNCLAMPED;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>refSound-&gt;parms.soundClass<sp/>=<sp/>args-&gt;GetInt(<sp/></highlight><highlight class="stringliteral">&quot;s_soundClass&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>args-&gt;GetString(<sp/></highlight><highlight class="stringliteral">&quot;s_shader&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>temp[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refSound-&gt;shader<sp/>=<sp/>declManager-&gt;FindSound(<sp/>temp<sp/>);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="368"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="369"><highlight class="comment">idEntity::UpdateChangeableSpawnArgs</highlight></codeline>
<codeline lineno="370"><highlight class="comment"></highlight></codeline>
<codeline lineno="371"><highlight class="comment">Any<sp/>key<sp/>val<sp/>pair<sp/>that<sp/>might<sp/>change<sp/>during<sp/>the<sp/>course<sp/>of<sp/>the<sp/>game<sp/>(<sp/>via<sp/>a<sp/>gui<sp/>or<sp/>whatever<sp/>)</highlight></codeline>
<codeline lineno="372"><highlight class="comment">should<sp/>be<sp/>initialize<sp/>here<sp/>so<sp/>a<sp/>gui<sp/>or<sp/>other<sp/>trigger<sp/>can<sp/>change<sp/>something<sp/>and<sp/>have<sp/>it<sp/>updated</highlight></codeline>
<codeline lineno="373"><highlight class="comment">properly.<sp/>An<sp/>optional<sp/>source<sp/>may<sp/>be<sp/>provided<sp/>if<sp/>the<sp/>values<sp/>reside<sp/>in<sp/>an<sp/>outside<sp/>dictionary<sp/>and</highlight></codeline>
<codeline lineno="374"><highlight class="comment">first<sp/>need<sp/>copied<sp/>over<sp/>to<sp/>spawnArgs</highlight></codeline>
<codeline lineno="375"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="376"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::UpdateChangeableSpawnArgs(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>*source<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*target;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!source<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source<sp/>=<sp/>&amp;spawnArgs;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>cameraTarget<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/>source-&gt;GetString(<sp/></highlight><highlight class="stringliteral">&quot;cameraTarget&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>target<sp/>&amp;&amp;<sp/>target[0]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>camera<sp/>taget</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PostEventMS(<sp/>&amp;EV_UpdateCameraTarget,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_RENDERENTITY_GUI;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpdateGuiParms(<sp/>renderEntity.gui[<sp/>i<sp/>],<sp/>source<sp/>);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="397"><highlight class="comment">================</highlight></codeline>
<codeline lineno="398"><highlight class="comment">idEntity::idEntity</highlight></codeline>
<codeline lineno="399"><highlight class="comment">================</highlight></codeline>
<codeline lineno="400"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal">idEntity::idEntity()<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>entityNumber<sp/><sp/><sp/><sp/>=<sp/>ENTITYNUM_NONE;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>entityDefNumber<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnNode.SetOwner(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>activeNode.SetOwner(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>snapshotNode.SetOwner(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>snapshotSequence<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>snapshotBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>thinkFlags<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>dormantStart<sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>cinematic<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>renderView<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>cameraTarget<sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>health<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>physics<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>bindMaster<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>bindJoint<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>INVALID_JOINT;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>bindBody<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>teamMaster<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>teamChain<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>signals<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>PVSAreas,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>PVSAreas<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>numPVSAreas<sp/><sp/><sp/><sp/><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>&amp;fl,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>fl<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.neverDormant<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>most<sp/>entities<sp/>never<sp/>go<sp/>dormant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>&amp;renderEntity,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>renderEntity<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>modelDefHandle<sp/><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>&amp;refSound,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>refSound<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>mpGUIState<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="441"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>&amp;xrayEntity,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>xrayEntity<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>timeGroup<sp/>=<sp/>TIME_GROUP1;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>xrayEntityHandle<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>xraySkin<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>noGrab<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="449"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="452"><highlight class="comment">================</highlight></codeline>
<codeline lineno="453"><highlight class="comment">idEntity::FixupLocalizedStrings</highlight></codeline>
<codeline lineno="454"><highlight class="comment">================</highlight></codeline>
<codeline lineno="455"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::FixupLocalizedStrings()<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>spawnArgs.GetNumKeyVals();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_key_value" kindref="compound">idKeyValue</ref><sp/>*kv<sp/>=<sp/>spawnArgs.GetKeyVal(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idStr::Cmpn(<sp/>kv-&gt;GetValue(),<sp/>STRTABLE_ID,<sp/>STRTABLE_ID_LENGTH<sp/>)<sp/>==<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spawnArgs.Set(<sp/>kv-&gt;GetKey(),<sp/>common-&gt;GetLanguageDict()-&gt;GetString(<sp/>kv-&gt;GetValue()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="466"><highlight class="comment">================</highlight></codeline>
<codeline lineno="467"><highlight class="comment">idEntity::Spawn</highlight></codeline>
<codeline lineno="468"><highlight class="comment">================</highlight></codeline>
<codeline lineno="469"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Spawn(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*temp;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>origin;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_key_value" kindref="compound">idKeyValue</ref><sp/><sp/><sp/><sp/>*networkSync;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*classname;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*scriptObjectName;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.RegisterEntity(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;classname&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>&amp;classname<sp/>);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_decl_entity_def" kindref="compound">idDeclEntityDef</ref><sp/>*def<sp/>=<sp/>gameLocal.FindEntityDef(<sp/>classname,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>def<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entityDefNumber<sp/>=<sp/>def-&gt;Index();</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>FixupLocalizedStrings();</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>static<sp/>models<sp/>the<sp/>same<sp/>way<sp/>the<sp/>editor<sp/>display<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>gameEdit-&gt;ParseSpawnArgsToRenderEntity(<sp/>&amp;spawnArgs,<sp/>&amp;renderEntity<sp/>);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.entityNum<sp/>=<sp/>entityNumber;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="495"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>noGrab<sp/>=<sp/>spawnArgs.GetBool(<sp/></highlight><highlight class="stringliteral">&quot;noGrab&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>xraySkin<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.xrayIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>str;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;skin_xray&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>str<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xraySkin<sp/>=<sp/>declManager-&gt;FindSkin(<sp/>str.c_str()<sp/>);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="505"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>dormant<sp/>within<sp/>5<sp/>frames<sp/>so<sp/>that<sp/>when<sp/>the<sp/>map<sp/>starts<sp/>most<sp/>monsters<sp/>are<sp/>dormant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>dormantStart<sp/>=<sp/>gameLocal.time<sp/>-<sp/>DELAY_DORMANT_TIME<sp/>+<sp/>gameLocal.msec<sp/>*<sp/>5;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>origin<sp/>=<sp/>renderEntity.origin;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>axis<sp/>=<sp/>renderEntity.axis;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>the<sp/>audio<sp/>parsing<sp/>the<sp/>same<sp/>way<sp/>dmap<sp/>and<sp/>the<sp/>editor<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>gameEdit-&gt;ParseSpawnArgsToRefSound(<sp/>&amp;spawnArgs,<sp/>&amp;refSound<sp/>);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>play<sp/>SCHANNEL_PRIVATE<sp/>when<sp/>sndworld-&gt;PlaceListener()<sp/>is<sp/>called<sp/>with<sp/>this<sp/>listenerId</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>spatialize<sp/>sounds<sp/>from<sp/>the<sp/>same<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>refSound.listenerId<sp/>=<sp/>entityNumber<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>cameraTarget<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;cameraTarget&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>temp<sp/>&amp;&amp;<sp/>temp[0]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>camera<sp/>taget</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PostEventMS(<sp/>&amp;EV_UpdateCameraTarget,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_RENDERENTITY_GUI;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpdateGuiParms(<sp/>renderEntity.gui[<sp/>i<sp/>],<sp/>&amp;spawnArgs<sp/>);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.solidForTeam<sp/>=<sp/>spawnArgs.GetBool(<sp/></highlight><highlight class="stringliteral">&quot;solidForTeam&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.neverDormant<sp/>=<sp/>spawnArgs.GetBool(<sp/></highlight><highlight class="stringliteral">&quot;neverDormant&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.hidden<sp/>=<sp/>spawnArgs.GetBool(<sp/></highlight><highlight class="stringliteral">&quot;hide&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fl.hidden<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>we&apos;re<sp/>hidden,<sp/>since<sp/>a<sp/>spawn<sp/>function<sp/>might<sp/>not<sp/>set<sp/>it<sp/>up<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PostEventMS(<sp/>&amp;EV_Hide,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>cinematic<sp/>=<sp/>spawnArgs.GetBool(<sp/></highlight><highlight class="stringliteral">&quot;cinematic&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>networkSync<sp/>=<sp/>spawnArgs.FindKey(<sp/></highlight><highlight class="stringliteral">&quot;networkSync&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>networkSync<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fl.networkSync<sp/>=<sp/>(<sp/>atoi(<sp/>networkSync-&gt;GetValue()<sp/>)<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="545"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!gameLocal.isClient<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>common-&gt;DPrintf(<sp/>&quot;NET:<sp/>DBG<sp/>%s<sp/>-<sp/>%s<sp/>is<sp/>synced:<sp/>%s\n&quot;,<sp/>spawnArgs.GetString(<sp/>&quot;classname&quot;,<sp/>&quot;&quot;<sp/>),<sp/>GetType()-&gt;classname,<sp/>fl.networkSync<sp/>?<sp/>&quot;true&quot;<sp/>:<sp/>&quot;false&quot;<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;classname&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>)[<sp/>0<sp/>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>!fl.networkSync<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;NET:<sp/>WRN<sp/>%s<sp/>entity,<sp/>no<sp/>classname,<sp/>and<sp/>no<sp/>networkSync?\n&quot;</highlight><highlight class="normal">,<sp/>GetType()-&gt;classname<sp/>);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="552"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>every<sp/>object<sp/>will<sp/>have<sp/>a<sp/>unique<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;%s_%s_%d&quot;</highlight><highlight class="normal">,<sp/>GetClassname(),<sp/>spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;classname&quot;</highlight><highlight class="normal"><sp/>),<sp/>entityNumber<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>SetName(<sp/>temp<sp/>);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>have<sp/>targets,<sp/>wait<sp/>until<sp/>all<sp/>entities<sp/>are<sp/>spawned<sp/>to<sp/>get<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>spawnArgs.MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;target&quot;</highlight><highlight class="normal"><sp/>)<sp/>||<sp/>spawnArgs.MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;guiTarget&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.GameState()<sp/>==<sp/>GAMESTATE_STARTUP<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PostEventMS(<sp/>&amp;EV_FindTargets,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>during<sp/>spawn,<sp/>so<sp/>it&apos;s<sp/>ok<sp/>to<sp/>get<sp/>the<sp/>targets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FindTargets();</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>health<sp/>=<sp/>spawnArgs.GetInt(<sp/></highlight><highlight class="stringliteral">&quot;health&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>InitDefaultPhysics(<sp/>origin,<sp/>axis<sp/>);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>SetOrigin(<sp/>origin<sp/>);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>SetAxis(<sp/>axis<sp/>);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;model&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>temp<sp/>&amp;&amp;<sp/>*temp<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetModel(<sp/>temp<sp/>);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;bind&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>&amp;temp<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PostEventMS(<sp/>&amp;EV_SpawnBind,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto-start<sp/>a<sp/>sound<sp/>on<sp/>the<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>refSound.shader<sp/>&amp;&amp;<sp/>!refSound.waitfortrigger<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StartSoundShader(<sp/>refSound.shader,<sp/>SND_CHANNEL_ANY,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>script<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ShouldConstructScriptObjectAtSpawn()<sp/>&amp;&amp;<sp/>spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;scriptobject&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>&amp;scriptObjectName<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!scriptObject.SetType(<sp/>scriptObjectName<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Script<sp/>object<sp/>&apos;%s&apos;<sp/>not<sp/>found<sp/>on<sp/>entity<sp/>&apos;%s&apos;.&quot;</highlight><highlight class="normal">,<sp/>scriptObjectName,<sp/>name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConstructScriptObject();</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="598"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determine<sp/>time<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>DetermineTimeGroup(<sp/>spawnArgs.GetBool(<sp/></highlight><highlight class="stringliteral">&quot;slowmo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="601"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="604"><highlight class="comment">================</highlight></codeline>
<codeline lineno="605"><highlight class="comment">idEntity::~idEntity</highlight></codeline>
<codeline lineno="606"><highlight class="comment">================</highlight></codeline>
<codeline lineno="607"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal">idEntity::~idEntity(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.GameState()<sp/>!=<sp/>GAMESTATE_SHUTDOWN<sp/>&amp;&amp;<sp/>!gameLocal.isClient<sp/>&amp;&amp;<sp/>fl.networkSync<sp/>&amp;&amp;<sp/>entityNumber<sp/>&gt;=<sp/>MAX_CLIENTS<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>msg;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[<sp/>MAX_GAME_MESSAGE_SIZE<sp/>];</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>GAME_RELIABLE_MESSAGE_DELETE_ENT<sp/>);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteBits(<sp/>gameLocal.GetSpawnId(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>),<sp/>32<sp/>);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>networkSystem-&gt;ServerSendReliableMessage(<sp/>-1,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>DeconstructScriptObject();</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>scriptObject.Free();</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>thinkFlags<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BecomeInactive(<sp/>thinkFlags<sp/>);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>activeNode.Remove();</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>Signal(<sp/>SIG_REMOVED<sp/>);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>to<sp/>set<sp/>back<sp/>the<sp/>default<sp/>physics<sp/>object<sp/>before<sp/>unbinding<sp/>because<sp/>the<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>specific<sp/>physics<sp/>object<sp/>might<sp/>be<sp/>an<sp/>entity<sp/>variable<sp/>and<sp/>as<sp/>such<sp/>could<sp/>already<sp/>be<sp/>destroyed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPhysics(<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>any<sp/>entities<sp/>that<sp/>are<sp/>bound<sp/>to<sp/>me</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>RemoveBinds();</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unbind<sp/>from<sp/>master</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>Unbind();</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>QuitTeam();</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.RemoveEntityFromHash(<sp/>name.c_str(),<sp/>this<sp/>);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>renderView;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>renderView<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>signals;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>signals<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>FreeModelDef();</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>FreeSoundEmitter(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="653"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>xrayEntityHandle<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;FreeEntityDef(<sp/>xrayEntityHandle<sp/>);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xrayEntityHandle<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="658"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.UnregisterEntity(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="663"><highlight class="comment">================</highlight></codeline>
<codeline lineno="664"><highlight class="comment">idEntity::Save</highlight></codeline>
<codeline lineno="665"><highlight class="comment">================</highlight></codeline>
<codeline lineno="666"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Save(<sp/><ref refid="classid_save_game" kindref="compound">idSaveGame</ref><sp/>*savefile<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteInt(<sp/>entityNumber<sp/>);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteInt(<sp/>entityDefNumber<sp/>);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>spawnNode<sp/>and<sp/>activeNode<sp/>are<sp/>restored<sp/>by<sp/>gameLocal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteInt(<sp/>snapshotSequence<sp/>);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteInt(<sp/>snapshotBits<sp/>);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteDict(<sp/>&amp;spawnArgs<sp/>);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteString(<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>scriptObject.Save(<sp/>savefile<sp/>);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteInt(<sp/>thinkFlags<sp/>);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteInt(<sp/>dormantStart<sp/>);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteBool(<sp/>cinematic<sp/>);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteObject(<sp/>cameraTarget<sp/>);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteInt(<sp/>health<sp/>);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteInt(<sp/>targets.Num()<sp/>);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>targets.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targets[<sp/>i<sp/>].Save(<sp/>savefile<sp/>);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>entityFlags_s<sp/>flags<sp/>=<sp/>fl;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>LittleBitField(<sp/>&amp;flags,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>flags<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;Write(<sp/>&amp;flags,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>flags<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="700"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteInt(<sp/>timeGroup<sp/>);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteBool(<sp/>noGrab<sp/>);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteRenderEntity(<sp/>xrayEntity<sp/>);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteInt(<sp/>xrayEntityHandle<sp/>);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteSkin(<sp/>xraySkin<sp/>);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="706"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteRenderEntity(<sp/>renderEntity<sp/>);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteInt(<sp/>modelDefHandle<sp/>);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteRefSound(<sp/>refSound<sp/>);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteObject(<sp/>bindMaster<sp/>);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteJoint(<sp/>bindJoint<sp/>);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteInt(<sp/>bindBody<sp/>);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteObject(<sp/>teamMaster<sp/>);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteObject(<sp/>teamChain<sp/>);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteStaticObject(<sp/>defaultPhysicsObj<sp/>);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteInt(<sp/>numPVSAreas<sp/>);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_PVS_AREAS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savefile-&gt;WriteInt(<sp/>PVSAreas[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!signals<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savefile-&gt;WriteBool(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savefile-&gt;WriteBool(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NUM_SIGNALS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savefile-&gt;WriteInt(<sp/>signals-&gt;signal[<sp/>i<sp/>].Num()<sp/>);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>signals-&gt;signal[<sp/>i<sp/>].Num();<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savefile-&gt;WriteInt(<sp/>signals-&gt;signal[<sp/>i<sp/>][<sp/>j<sp/>].threadnum<sp/>);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savefile-&gt;WriteString(<sp/>signals-&gt;signal[<sp/>i<sp/>][<sp/>j<sp/>].function-&gt;Name()<sp/>);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteInt(<sp/>mpGUIState<sp/>);</highlight></codeline>
<codeline lineno="738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="741"><highlight class="comment">================</highlight></codeline>
<codeline lineno="742"><highlight class="comment">idEntity::Restore</highlight></codeline>
<codeline lineno="743"><highlight class="comment">================</highlight></codeline>
<codeline lineno="744"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Restore(<sp/><ref refid="classid_restore_game" kindref="compound">idRestoreGame</ref><sp/>*savefile<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcname;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadInt(<sp/>entityNumber<sp/>);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadInt(<sp/>entityDefNumber<sp/>);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>spawnNode<sp/>and<sp/>activeNode<sp/>are<sp/>restored<sp/>by<sp/>gameLocal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadInt(<sp/>snapshotSequence<sp/>);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadInt(<sp/>snapshotBits<sp/>);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadDict(<sp/>&amp;spawnArgs<sp/>);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadString(<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>SetName(<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>scriptObject.Restore(<sp/>savefile<sp/>);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadInt(<sp/>thinkFlags<sp/>);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadInt(<sp/>dormantStart<sp/>);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadBool(<sp/>cinematic<sp/>);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadObject(<sp/>reinterpret_cast&lt;idClass<sp/>*&amp;&gt;(<sp/>cameraTarget<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadInt(<sp/>health<sp/>);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>targets.Clear();</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadInt(<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>targets.SetNum(<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targets[<sp/>i<sp/>].Restore(<sp/>savefile<sp/>);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;Read(<sp/>&amp;fl,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>fl<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>LittleBitField(<sp/>&amp;fl,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>fl<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="783"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadInt(<sp/>timeGroup<sp/>);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadBool(<sp/>noGrab<sp/>);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadRenderEntity(<sp/>xrayEntity<sp/>);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadInt(<sp/>xrayEntityHandle<sp/>);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>xrayEntityHandle<sp/>!=<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xrayEntityHandle<sp/>=<sp/><sp/>gameRenderWorld-&gt;AddEntityDef(<sp/>&amp;xrayEntity<sp/>);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadSkin(<sp/>xraySkin<sp/>);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="792"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadRenderEntity(<sp/>renderEntity<sp/>);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadInt(<sp/>modelDefHandle<sp/>);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadRefSound(<sp/>refSound<sp/>);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadObject(<sp/>reinterpret_cast&lt;idClass<sp/>*&amp;&gt;(<sp/>bindMaster<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadJoint(<sp/>bindJoint<sp/>);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadInt(<sp/>bindBody<sp/>);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadObject(<sp/>reinterpret_cast&lt;idClass<sp/>*&amp;&gt;(<sp/>teamMaster<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadObject(<sp/>reinterpret_cast&lt;idClass<sp/>*&amp;&gt;(<sp/>teamChain<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadStaticObject(<sp/>defaultPhysicsObj<sp/>);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>RestorePhysics(<sp/>&amp;defaultPhysicsObj<sp/>);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadInt(<sp/>numPVSAreas<sp/>);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_PVS_AREAS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savefile-&gt;ReadInt(<sp/>PVSAreas[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>readsignals;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadBool(<sp/>readsignals<sp/>);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>readsignals<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signals<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classsignal_list__t" kindref="compound">signalList_t</ref>;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NUM_SIGNALS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savefile-&gt;ReadInt(<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signals-&gt;signal[<sp/>i<sp/>].SetNum(<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>num;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savefile-&gt;ReadInt(<sp/>signals-&gt;signal[<sp/>i<sp/>][<sp/>j<sp/>].threadnum<sp/>);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savefile-&gt;ReadString(<sp/>funcname<sp/>);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signals-&gt;signal[<sp/>i<sp/>][<sp/>j<sp/>].function<sp/>=<sp/>gameLocal.program.FindFunction(<sp/>funcname<sp/>);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!signals-&gt;signal[<sp/>i<sp/>][<sp/>j<sp/>].function<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savefile-&gt;Error(<sp/></highlight><highlight class="stringliteral">&quot;Function<sp/>&apos;%s&apos;<sp/>not<sp/>found&quot;</highlight><highlight class="normal">,<sp/>funcname.c_str()<sp/>);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadInt(<sp/>mpGUIState<sp/>);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>must<sp/>retrieve<sp/>modelDefHandle<sp/>from<sp/>the<sp/>renderer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>modelDefHandle<sp/>!=<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modelDefHandle<sp/>=<sp/>gameRenderWorld-&gt;AddEntityDef(<sp/>&amp;renderEntity<sp/>);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="838"><highlight class="comment">================</highlight></codeline>
<codeline lineno="839"><highlight class="comment">idEntity::GetEntityDefName</highlight></codeline>
<codeline lineno="840"><highlight class="comment">================</highlight></codeline>
<codeline lineno="841"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>idEntity::GetEntityDefName(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>entityDefNumber<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;*unknown*&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>declManager-&gt;DeclByIndex(<sp/>DECL_ENTITYDEF,<sp/>entityDefNumber,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)-&gt;GetName();</highlight></codeline>
<codeline lineno="847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="850"><highlight class="comment">================</highlight></codeline>
<codeline lineno="851"><highlight class="comment">idEntity::SetName</highlight></codeline>
<codeline lineno="852"><highlight class="comment">================</highlight></codeline>
<codeline lineno="853"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::SetName(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*newname<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>name.Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.RemoveEntityFromHash(<sp/>name.c_str(),<sp/>this<sp/>);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.program.SetEntity(<sp/>name,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/>newname;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>name.Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal"><sp/>)<sp/>||<sp/>(<sp/>name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;null_entity&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>name<sp/>entity<sp/>&apos;%s&apos;.<sp/><sp/>&apos;%s&apos;<sp/>is<sp/>reserved<sp/>for<sp/>script.&quot;</highlight><highlight class="normal">,<sp/>name.c_str(),<sp/>name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.AddEntityToHash(<sp/>name.c_str(),<sp/>this<sp/>);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.program.SetEntity(<sp/>name,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="871"><highlight class="comment">================</highlight></codeline>
<codeline lineno="872"><highlight class="comment">idEntity::GetName</highlight></codeline>
<codeline lineno="873"><highlight class="comment">================</highlight></codeline>
<codeline lineno="874"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>idEntity::GetName(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name.c_str();</highlight></codeline>
<codeline lineno="877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="comment">/***********************************************************************</highlight></codeline>
<codeline lineno="881"><highlight class="comment"></highlight></codeline>
<codeline lineno="882"><highlight class="comment"><sp/><sp/><sp/><sp/>Thinking</highlight></codeline>
<codeline lineno="883"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="884"><highlight class="comment">***********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="887"><highlight class="comment">================</highlight></codeline>
<codeline lineno="888"><highlight class="comment">idEntity::Think</highlight></codeline>
<codeline lineno="889"><highlight class="comment">================</highlight></codeline>
<codeline lineno="890"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Think(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>RunPhysics();</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>Present();</highlight></codeline>
<codeline lineno="894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="897"><highlight class="comment">================</highlight></codeline>
<codeline lineno="898"><highlight class="comment">idEntity::DoDormantTests</highlight></codeline>
<codeline lineno="899"><highlight class="comment"></highlight></codeline>
<codeline lineno="900"><highlight class="comment">Monsters<sp/>and<sp/>other<sp/>expensive<sp/>entities<sp/>that<sp/>are<sp/>completely<sp/>closed</highlight></codeline>
<codeline lineno="901"><highlight class="comment">off<sp/>from<sp/>the<sp/>player<sp/>can<sp/>skip<sp/>all<sp/>of<sp/>their<sp/>work</highlight></codeline>
<codeline lineno="902"><highlight class="comment">================</highlight></codeline>
<codeline lineno="903"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::DoDormantTests(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fl.neverDormant<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>monster<sp/>area<sp/>is<sp/>not<sp/>topologically<sp/>connected<sp/>to<sp/>a<sp/>player</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!gameLocal.InPlayerConnectedArea(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dormantStart<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dormantStart<sp/>=<sp/>gameLocal.time;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.time<sp/>-<sp/>dormantStart<sp/>&lt;<sp/>DELAY_DORMANT_TIME<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>got<sp/>closed<sp/>off,<sp/>don&apos;t<sp/>go<sp/>dormant<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>monster<sp/>area<sp/>is<sp/>topologically<sp/>connected<sp/>to<sp/>a<sp/>player,<sp/>but<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>monster<sp/>hasn&apos;t<sp/>been<sp/>woken<sp/>up<sp/>before,<sp/>do<sp/>the<sp/>more<sp/>precise<sp/>PVS<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!fl.hasAwakened<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!gameLocal.InPlayerPVS(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stay<sp/>dormant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wake<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dormantStart<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fl.hasAwakened<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>go<sp/>dormant<sp/>when<sp/>area<sp/>closed<sp/>off<sp/>now,<sp/>not<sp/>just<sp/>out<sp/>of<sp/>PVS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="936"><highlight class="normal">}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="939"><highlight class="comment">================</highlight></codeline>
<codeline lineno="940"><highlight class="comment">idEntity::CheckDormant</highlight></codeline>
<codeline lineno="941"><highlight class="comment"></highlight></codeline>
<codeline lineno="942"><highlight class="comment">Monsters<sp/>and<sp/>other<sp/>expensive<sp/>entities<sp/>that<sp/>are<sp/>completely<sp/>closed</highlight></codeline>
<codeline lineno="943"><highlight class="comment">off<sp/>from<sp/>the<sp/>player<sp/>can<sp/>skip<sp/>all<sp/>of<sp/>their<sp/>work</highlight></codeline>
<codeline lineno="944"><highlight class="comment">================</highlight></codeline>
<codeline lineno="945"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::CheckDormant(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dormant;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>dormant<sp/>=<sp/>DoDormantTests();</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dormant<sp/>&amp;&amp;<sp/>!fl.isDormant<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fl.isDormant<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DormantBegin();</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!dormant<sp/>&amp;&amp;<sp/>fl.isDormant<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fl.isDormant<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DormantEnd();</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dormant;</highlight></codeline>
<codeline lineno="959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="962"><highlight class="comment">================</highlight></codeline>
<codeline lineno="963"><highlight class="comment">idEntity::DormantBegin</highlight></codeline>
<codeline lineno="964"><highlight class="comment"></highlight></codeline>
<codeline lineno="965"><highlight class="comment">called<sp/>when<sp/>entity<sp/>becomes<sp/>dormant</highlight></codeline>
<codeline lineno="966"><highlight class="comment">================</highlight></codeline>
<codeline lineno="967"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::DormantBegin(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal">}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="972"><highlight class="comment">================</highlight></codeline>
<codeline lineno="973"><highlight class="comment">idEntity::DormantEnd</highlight></codeline>
<codeline lineno="974"><highlight class="comment"></highlight></codeline>
<codeline lineno="975"><highlight class="comment">called<sp/>when<sp/>entity<sp/>wakes<sp/>from<sp/>being<sp/>dormant</highlight></codeline>
<codeline lineno="976"><highlight class="comment">================</highlight></codeline>
<codeline lineno="977"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::DormantEnd(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal">}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="982"><highlight class="comment">================</highlight></codeline>
<codeline lineno="983"><highlight class="comment">idEntity::IsActive</highlight></codeline>
<codeline lineno="984"><highlight class="comment">================</highlight></codeline>
<codeline lineno="985"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::IsActive(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>activeNode.InList();</highlight></codeline>
<codeline lineno="988"><highlight class="normal">}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="991"><highlight class="comment">================</highlight></codeline>
<codeline lineno="992"><highlight class="comment">idEntity::BecomeActive</highlight></codeline>
<codeline lineno="993"><highlight class="comment">================</highlight></codeline>
<codeline lineno="994"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::BecomeActive(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>flags<sp/>&amp;<sp/>TH_PHYSICS<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enable<sp/>the<sp/>team<sp/>master<sp/>if<sp/>this<sp/>entity<sp/>is<sp/>part<sp/>of<sp/>a<sp/>physics<sp/>team</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>teamMaster<sp/>&amp;&amp;<sp/>teamMaster<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>teamMaster-&gt;BecomeActive(<sp/>TH_PHYSICS<sp/>);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!(<sp/>thinkFlags<sp/>&amp;<sp/>TH_PHYSICS<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>is<sp/>a<sp/>pusher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>physics-&gt;IsType(<sp/>idPhysics_Parametric::Type<sp/>)<sp/>||<sp/>physics-&gt;IsType(<sp/>idPhysics_Actor::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.sortPushers<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldFlags<sp/>=<sp/>thinkFlags;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>thinkFlags<sp/>|=<sp/>flags;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>thinkFlags<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!IsActive()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>activeNode.AddToEnd(<sp/>gameLocal.activeEntities<sp/>);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!oldFlags<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>became<sp/>inactive<sp/>this<sp/>frame,<sp/>so<sp/>we<sp/>have<sp/>to<sp/>decrease<sp/>the<sp/>count<sp/>of<sp/>entities<sp/>to<sp/>deactivate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.numEntitiesToDeactivate--;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1021"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1022"><highlight class="comment">idEntity::BecomeInactive</highlight></codeline>
<codeline lineno="1023"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1024"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::BecomeInactive(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>flags<sp/>&amp;<sp/>TH_PHYSICS<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>may<sp/>only<sp/>disable<sp/>physics<sp/>on<sp/>a<sp/>team<sp/>master<sp/>if<sp/>no<sp/>team<sp/>members<sp/>are<sp/>running<sp/>physics<sp/>or<sp/>bound<sp/>to<sp/>a<sp/>joints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>teamMaster<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>=<sp/>teamMaster-&gt;teamChain;<sp/>ent;<sp/>ent<sp/>=<sp/>ent-&gt;teamChain<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>ent-&gt;thinkFlags<sp/>&amp;<sp/>TH_PHYSICS<sp/>)<sp/>||<sp/>(<sp/>(<sp/>ent-&gt;bindMaster<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>&amp;&amp;<sp/>(<sp/>ent-&gt;bindJoint<sp/>!=<sp/>INVALID_JOINT<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>&amp;=<sp/>~TH_PHYSICS;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>thinkFlags<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thinkFlags<sp/>&amp;=<sp/>~flags;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!thinkFlags<sp/>&amp;&amp;<sp/>IsActive()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.numEntitiesToDeactivate++;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>flags<sp/>&amp;<sp/>TH_PHYSICS<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>entity<sp/>has<sp/>a<sp/>team<sp/>master</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>teamMaster<sp/>&amp;&amp;<sp/>teamMaster<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>team<sp/>master<sp/>is<sp/>at<sp/>rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>teamMaster-&gt;IsAtRest()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>teamMaster-&gt;BecomeInactive(<sp/>TH_PHYSICS<sp/>);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="comment">/***********************************************************************</highlight></codeline>
<codeline lineno="1057"><highlight class="comment"></highlight></codeline>
<codeline lineno="1058"><highlight class="comment"><sp/><sp/><sp/><sp/>Visuals</highlight></codeline>
<codeline lineno="1059"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1060"><highlight class="comment">***********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1063"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1064"><highlight class="comment">idEntity::SetShaderParm</highlight></codeline>
<codeline lineno="1065"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1066"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::SetShaderParm(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parmnum,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>parmnum<sp/>&lt;<sp/>0<sp/>)<sp/>||<sp/>(<sp/>parmnum<sp/>&gt;=<sp/>MAX_ENTITY_SHADER_PARMS<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;shader<sp/>parm<sp/>index<sp/>(%d)<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">,<sp/>parmnum<sp/>);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.shaderParms[<sp/>parmnum<sp/>]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateVisuals();</highlight></codeline>
<codeline lineno="1075"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1078"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1079"><highlight class="comment">idEntity::SetColor</highlight></codeline>
<codeline lineno="1080"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1081"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::SetColor(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>red,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>green,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>blue<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.shaderParms[<sp/>SHADERPARM_RED<sp/>]<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>red;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.shaderParms[<sp/>SHADERPARM_GREEN<sp/>]<sp/><sp/><sp/><sp/>=<sp/>green;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.shaderParms[<sp/>SHADERPARM_BLUE<sp/>]<sp/><sp/><sp/><sp/><sp/>=<sp/>blue;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateVisuals();</highlight></codeline>
<codeline lineno="1087"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1090"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1091"><highlight class="comment">idEntity::SetColor</highlight></codeline>
<codeline lineno="1092"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1093"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::SetColor(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;color<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>SetColor(<sp/>color[<sp/>0<sp/>],<sp/>color[<sp/>1<sp/>],<sp/>color[<sp/>2<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateVisuals();</highlight></codeline>
<codeline lineno="1097"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1100"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1101"><highlight class="comment">idEntity::GetColor</highlight></codeline>
<codeline lineno="1102"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1103"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::GetColor(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;out<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>out[<sp/>0<sp/>]<sp/>=<sp/>renderEntity.shaderParms[<sp/>SHADERPARM_RED<sp/>];</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/>out[<sp/>1<sp/>]<sp/>=<sp/>renderEntity.shaderParms[<sp/>SHADERPARM_GREEN<sp/>];</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>out[<sp/>2<sp/>]<sp/>=<sp/>renderEntity.shaderParms[<sp/>SHADERPARM_BLUE<sp/>];</highlight></codeline>
<codeline lineno="1108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1111"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1112"><highlight class="comment">idEntity::SetColor</highlight></codeline>
<codeline lineno="1113"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1114"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::SetColor(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/>&amp;color<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.shaderParms[<sp/>SHADERPARM_RED<sp/>]<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>color[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.shaderParms[<sp/>SHADERPARM_GREEN<sp/>]<sp/><sp/><sp/><sp/>=<sp/>color[<sp/>1<sp/>];</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.shaderParms[<sp/>SHADERPARM_BLUE<sp/>]<sp/><sp/><sp/><sp/><sp/>=<sp/>color[<sp/>2<sp/>];</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.shaderParms[<sp/>SHADERPARM_ALPHA<sp/>]<sp/><sp/><sp/><sp/>=<sp/>color[<sp/>3<sp/>];</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateVisuals();</highlight></codeline>
<codeline lineno="1121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1124"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1125"><highlight class="comment">idEntity::GetColor</highlight></codeline>
<codeline lineno="1126"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1127"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::GetColor(<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/>&amp;out<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>out[<sp/>0<sp/>]<sp/>=<sp/>renderEntity.shaderParms[<sp/>SHADERPARM_RED<sp/>];</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/>out[<sp/>1<sp/>]<sp/>=<sp/>renderEntity.shaderParms[<sp/>SHADERPARM_GREEN<sp/>];</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>out[<sp/>2<sp/>]<sp/>=<sp/>renderEntity.shaderParms[<sp/>SHADERPARM_BLUE<sp/>];</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/>out[<sp/>3<sp/>]<sp/>=<sp/>renderEntity.shaderParms[<sp/>SHADERPARM_ALPHA<sp/>];</highlight></codeline>
<codeline lineno="1133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1136"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1137"><highlight class="comment">idEntity::UpdateAnimationControllers</highlight></codeline>
<codeline lineno="1138"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1139"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::UpdateAnimationControllers(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>any<sp/>ragdoll<sp/>and<sp/>IK<sp/>animation<sp/>controllers<sp/>should<sp/>be<sp/>updated<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1146"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1147"><highlight class="comment">idEntity::SetModel</highlight></codeline>
<codeline lineno="1148"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1149"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::SetModel(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*modelname<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>modelname<sp/>);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/>FreeModelDef();</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.hModel<sp/>=<sp/>renderModelManager-&gt;FindModel(<sp/>modelname<sp/>);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>renderEntity.hModel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity.hModel-&gt;Reset();</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.callback<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.numJoints<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.joints<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>renderEntity.hModel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity.bounds<sp/>=<sp/>renderEntity.hModel-&gt;Bounds(<sp/>&amp;renderEntity<sp/>);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity.bounds.Zero();</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateVisuals();</highlight></codeline>
<codeline lineno="1171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1174"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1175"><highlight class="comment">idEntity::SetSkin</highlight></codeline>
<codeline lineno="1176"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1177"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::SetSkin(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_decl_skin" kindref="compound">idDeclSkin</ref><sp/>*skin<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.customSkin<sp/>=<sp/>skin;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateVisuals();</highlight></codeline>
<codeline lineno="1181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1184"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1185"><highlight class="comment">idEntity::GetSkin</highlight></codeline>
<codeline lineno="1186"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1187"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_decl_skin" kindref="compound">idDeclSkin</ref><sp/>*idEntity::GetSkin(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>renderEntity.customSkin;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1193"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1194"><highlight class="comment">idEntity::FreeModelDef</highlight></codeline>
<codeline lineno="1195"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1196"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::FreeModelDef(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>modelDefHandle<sp/>!=<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;FreeEntityDef(<sp/>modelDefHandle<sp/>);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modelDefHandle<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1205"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1206"><highlight class="comment">idEntity::FreeLightDef</highlight></codeline>
<codeline lineno="1207"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1208"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::FreeLightDef(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1213"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1214"><highlight class="comment">idEntity::IsHidden</highlight></codeline>
<codeline lineno="1215"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1216"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::IsHidden(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fl.hidden;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1222"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1223"><highlight class="comment">idEntity::Hide</highlight></codeline>
<codeline lineno="1224"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1225"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Hide(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!IsHidden()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fl.hidden<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FreeModelDef();</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpdateVisuals();</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1235"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1236"><highlight class="comment">idEntity::Show</highlight></codeline>
<codeline lineno="1237"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1238"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Show(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>IsHidden()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fl.hidden<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpdateVisuals();</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1247"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1248"><highlight class="comment">idEntity::UpdateModelTransform</highlight></codeline>
<codeline lineno="1249"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1250"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::UpdateModelTransform(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>origin;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>axis;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>GetPhysicsToVisualTransform(<sp/>origin,<sp/>axis<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity.axis<sp/>=<sp/>axis<sp/>*<sp/>GetPhysics()-&gt;GetAxis();</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity.origin<sp/>=<sp/>GetPhysics()-&gt;GetOrigin()<sp/>+<sp/>origin<sp/>*<sp/>renderEntity.axis;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity.axis<sp/>=<sp/>GetPhysics()-&gt;GetAxis();</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity.origin<sp/>=<sp/>GetPhysics()-&gt;GetOrigin();</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1265"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1266"><highlight class="comment">idEntity::UpdateModel</highlight></codeline>
<codeline lineno="1267"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1268"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::UpdateModel(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="1271"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.timeGroup<sp/>=<sp/>timeGroup;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1273"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateModelTransform();</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>the<sp/>entity<sp/>has<sp/>an<sp/>MD5<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_animator" kindref="compound">idAnimator</ref><sp/>*animator<sp/>=<sp/>GetAnimator();</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>animator<sp/>&amp;&amp;<sp/>animator-&gt;ModelHandle()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>callback<sp/>to<sp/>update<sp/>the<sp/>joints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity.callback<sp/>=<sp/>idEntity::ModelCallback;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>to<sp/>invalid<sp/>number<sp/>to<sp/>force<sp/>an<sp/>update<sp/>the<sp/>next<sp/>time<sp/>the<sp/>PVS<sp/>areas<sp/>are<sp/>retrieved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>ClearPVSAreas();</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>that<sp/>we<sp/>call<sp/>Present<sp/>this<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>BecomeActive(<sp/>TH_UPDATEVISUALS<sp/>);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="1290"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>entity<sp/>has<sp/>an<sp/>xray<sp/>skin,<sp/>go<sp/>ahead<sp/>and<sp/>add<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>xraySkin<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xrayEntity<sp/>=<sp/>renderEntity;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xrayEntity.xrayIndex<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xrayEntity.customSkin<sp/>=<sp/>xraySkin;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>xrayEntityHandle<sp/>==<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xrayEntityHandle<sp/>=<sp/>gameRenderWorld-&gt;AddEntityDef(<sp/>&amp;xrayEntity<sp/>);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;UpdateEntityDef(<sp/>xrayEntityHandle,<sp/>&amp;xrayEntity<sp/>);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1303"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1306"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1307"><highlight class="comment">idEntity::UpdateVisuals</highlight></codeline>
<codeline lineno="1308"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1309"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::UpdateVisuals(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateModel();</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateSound();</highlight></codeline>
<codeline lineno="1313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1316"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1317"><highlight class="comment">idEntity::UpdatePVSAreas</highlight></codeline>
<codeline lineno="1318"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1319"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::UpdatePVSAreas(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>localNumPVSAreas,<sp/>localPVSAreas[32];</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>modelAbsBounds;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>modelAbsBounds.FromTransformedBounds(<sp/>renderEntity.bounds,<sp/>renderEntity.origin,<sp/>renderEntity.axis<sp/>);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>localNumPVSAreas<sp/>=<sp/>gameLocal.pvs.GetPVSAreas(<sp/>modelAbsBounds,<sp/>localPVSAreas,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>localPVSAreas<sp/>)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>localPVSAreas[0]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>some<sp/>particle<sp/>systems<sp/>may<sp/>have<sp/>huge<sp/>bounds<sp/>and<sp/>end<sp/>up<sp/>in<sp/>many<sp/>PVS<sp/>areas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>first<sp/>MAX_PVS_AREAS<sp/>may<sp/>not<sp/>be<sp/>visible<sp/>to<sp/>a<sp/>network<sp/>client<sp/>and<sp/>as<sp/>a<sp/>result<sp/>the<sp/>particle<sp/>system<sp/>may<sp/>not<sp/>show<sp/>up<sp/>when<sp/>it<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>localNumPVSAreas<sp/>&gt;<sp/>MAX_PVS_AREAS<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localNumPVSAreas<sp/>=<sp/>gameLocal.pvs.GetPVSAreas(<sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref>(<sp/>renderEntity.origin<sp/>).Expand(<sp/>64.0f<sp/>),<sp/>localPVSAreas,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>localPVSAreas<sp/>)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>localPVSAreas[0]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>numPVSAreas<sp/>=<sp/>0;<sp/>numPVSAreas<sp/>&lt;<sp/>MAX_PVS_AREAS<sp/>&amp;&amp;<sp/>numPVSAreas<sp/>&lt;<sp/>localNumPVSAreas;<sp/>numPVSAreas++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PVSAreas[numPVSAreas]<sp/>=<sp/>localPVSAreas[numPVSAreas];</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>numPVSAreas;<sp/>i<sp/>&lt;<sp/>MAX_PVS_AREAS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PVSAreas[<sp/>i<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1344"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1345"><highlight class="comment">idEntity::UpdatePVSAreas</highlight></codeline>
<codeline lineno="1346"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1347"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::UpdatePVSAreas(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>numPVSAreas<sp/>=<sp/>gameLocal.pvs.GetPVSAreas(<sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref>(<sp/>pos<sp/>),<sp/>PVSAreas,<sp/>MAX_PVS_AREAS<sp/>);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>numPVSAreas;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>&lt;<sp/>MAX_PVS_AREAS<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PVSAreas[<sp/>i++<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1359"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1360"><highlight class="comment">idEntity::GetNumPVSAreas</highlight></codeline>
<codeline lineno="1361"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1362"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idEntity::GetNumPVSAreas(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numPVSAreas<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpdatePVSAreas();</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>numPVSAreas;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1371"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1372"><highlight class="comment">idEntity::GetPVSAreas</highlight></codeline>
<codeline lineno="1373"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1374"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*idEntity::GetPVSAreas(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numPVSAreas<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpdatePVSAreas();</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PVSAreas;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1383"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1384"><highlight class="comment">idEntity::ClearPVSAreas</highlight></codeline>
<codeline lineno="1385"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1386"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::ClearPVSAreas(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/>numPVSAreas<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1392"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1393"><highlight class="comment">idEntity::PhysicsTeamInPVS</highlight></codeline>
<codeline lineno="1394"><highlight class="comment"></highlight></codeline>
<codeline lineno="1395"><highlight class="comment"><sp/><sp/>FIXME:<sp/>for<sp/>networking<sp/>also<sp/>return<sp/>true<sp/>if<sp/>any<sp/>of<sp/>the<sp/>entity<sp/>shadows<sp/>is<sp/>in<sp/>the<sp/>PVS</highlight></codeline>
<codeline lineno="1396"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1397"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::PhysicsTeamInPVS(<sp/><ref refid="structpvs_handle__s" kindref="compound">pvsHandle_t</ref><sp/>pvsHandle<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*part;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>teamMaster<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>part<sp/>=<sp/>teamMaster;<sp/>part;<sp/>part<sp/>=<sp/>part-&gt;teamChain<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.pvs.InCurrentPVS(<sp/>pvsHandle,<sp/>part-&gt;GetPVSAreas(),<sp/>part-&gt;GetNumPVSAreas()<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gameLocal.pvs.InCurrentPVS(<sp/>pvsHandle,<sp/>GetPVSAreas(),<sp/>GetNumPVSAreas()<sp/>);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1414"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="1415"><highlight class="comment">idEntity::ProjectOverlay</highlight></codeline>
<codeline lineno="1416"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="1417"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::ProjectOverlay(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;origin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;dir,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*material<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s,<sp/>c;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>axis,<sp/>axistemp;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>localOrigin,<sp/>localAxis[2];</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>localPlane[2];</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>the<sp/>entity<sp/>has<sp/>a<sp/>valid<sp/>model<sp/>handle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>modelDefHandle<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>do<sp/>this<sp/>on<sp/>dynamic<sp/>md5<sp/>models</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>renderEntity.hModel-&gt;IsDynamicModel()<sp/>!=<sp/>DM_CACHED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/>idMath::SinCos16(<sp/>gameLocal.random.RandomFloat()<sp/>*<sp/>idMath::TWO_PI,<sp/>s,<sp/>c<sp/>);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[2]<sp/>=<sp/>-dir;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[2].NormalVectors(<sp/>axistemp[0],<sp/>axistemp[1]<sp/>);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[0]<sp/>=<sp/>axistemp[<sp/>0<sp/>]<sp/>*<sp/>c<sp/>+<sp/>axistemp[<sp/>1<sp/>]<sp/>*<sp/>-s;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[1]<sp/>=<sp/>axistemp[<sp/>0<sp/>]<sp/>*<sp/>-s<sp/>+<sp/>axistemp[<sp/>1<sp/>]<sp/>*<sp/>-c;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.axis.ProjectVector(<sp/>origin<sp/>-<sp/>renderEntity.origin,<sp/>localOrigin<sp/>);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.axis.ProjectVector(<sp/>axis[0],<sp/>localAxis[0]<sp/>);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.axis.ProjectVector(<sp/>axis[1],<sp/>localAxis[1]<sp/>);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>1.0f<sp/>/<sp/>size;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/>localAxis[0]<sp/>*=<sp/>size;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>localAxis[1]<sp/>*=<sp/>size;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/>localPlane[0]<sp/>=<sp/>localAxis[0];</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/>localPlane[0][3]<sp/>=<sp/>-(<sp/>localOrigin<sp/>*<sp/>localAxis[0]<sp/>)<sp/>+<sp/>0.5f;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/>localPlane[1]<sp/>=<sp/>localAxis[1];</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/>localPlane[1][3]<sp/>=<sp/>-(<sp/>localOrigin<sp/>*<sp/>localAxis[1]<sp/>)<sp/>+<sp/>0.5f;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_material" kindref="compound">idMaterial</ref><sp/>*mtr<sp/>=<sp/>declManager-&gt;FindMaterial(<sp/>material<sp/>);</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>project<sp/>an<sp/>overlay<sp/>onto<sp/>the<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;ProjectOverlay(<sp/>modelDefHandle,<sp/>localPlane,<sp/>mtr<sp/>);</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>non-animating<sp/>models<sp/>update<sp/>their<sp/>overlay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateVisuals();</highlight></codeline>
<codeline lineno="1462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1465"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1466"><highlight class="comment">idEntity::Present</highlight></codeline>
<codeline lineno="1467"><highlight class="comment"></highlight></codeline>
<codeline lineno="1468"><highlight class="comment">Present<sp/>is<sp/>called<sp/>to<sp/>allow<sp/>entities<sp/>to<sp/>generate<sp/>refEntities,<sp/>lights,<sp/>etc<sp/>for<sp/>the<sp/>renderer.</highlight></codeline>
<codeline lineno="1469"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1470"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Present(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!gameLocal.isNewFrame<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>present<sp/>to<sp/>the<sp/>renderer<sp/>if<sp/>the<sp/>entity<sp/>hasn&apos;t<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!(<sp/>thinkFlags<sp/>&amp;<sp/>TH_UPDATEVISUALS<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/>BecomeInactive(<sp/>TH_UPDATEVISUALS<sp/>);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>camera<sp/>target<sp/>for<sp/>remote<sp/>render<sp/>views</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cameraTarget<sp/>&amp;&amp;<sp/>gameLocal.InPlayerPVS(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity.remoteRenderView<sp/>=<sp/>cameraTarget-&gt;GetRenderView();</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>set<sp/>to<sp/>invisible,<sp/>skip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!renderEntity.hModel<sp/>||<sp/>IsHidden()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>to<sp/>refresh<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>modelDefHandle<sp/>==<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modelDefHandle<sp/>=<sp/>gameRenderWorld-&gt;AddEntityDef(<sp/>&amp;renderEntity<sp/>);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;UpdateEntityDef(<sp/>modelDefHandle,<sp/>&amp;renderEntity<sp/>);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1502"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1503"><highlight class="comment">idEntity::GetRenderEntity</highlight></codeline>
<codeline lineno="1504"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1505"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><ref refid="structrender_entity__s" kindref="compound">renderEntity_t</ref><sp/>*idEntity::GetRenderEntity(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;renderEntity;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1511"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1512"><highlight class="comment">idEntity::GetModelDefHandle</highlight></codeline>
<codeline lineno="1513"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1514"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idEntity::GetModelDefHandle(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>modelDefHandle;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1520"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1521"><highlight class="comment">idEntity::UpdateRenderEntity</highlight></codeline>
<codeline lineno="1522"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1523"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::UpdateRenderEntity(<sp/><ref refid="structrender_entity__s" kindref="compound">renderEntity_s</ref><sp/>*renderEntity,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrender_view__s" kindref="compound">renderView_t</ref><sp/>*renderView<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.inCinematic<sp/>&amp;&amp;<sp/>gameLocal.skipCinematic<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_animator" kindref="compound">idAnimator</ref><sp/>*animator<sp/>=<sp/>GetAnimator();</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>animator<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="1532"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetTimeState<sp/>ts(<sp/>timeGroup<sp/>);</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1534"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>animator-&gt;CreateFrame(<sp/>gameLocal.time,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1542"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1543"><highlight class="comment">idEntity::ModelCallback</highlight></codeline>
<codeline lineno="1544"><highlight class="comment"></highlight></codeline>
<codeline lineno="1545"><highlight class="comment"><sp/><sp/><sp/><sp/>NOTE:<sp/>may<sp/>not<sp/>change<sp/>the<sp/>game<sp/>state<sp/>whatsoever!</highlight></codeline>
<codeline lineno="1546"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1547"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::ModelCallback(<sp/><ref refid="structrender_entity__s" kindref="compound">renderEntity_s</ref><sp/>*renderEntity,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrender_view__s" kindref="compound">renderView_t</ref><sp/>*renderView<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>gameLocal.entities[<sp/>renderEntity-&gt;entityNum<sp/>];</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;idEntity::ModelCallback:<sp/>callback<sp/>with<sp/>NULL<sp/>game<sp/>entity&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ent-&gt;UpdateRenderEntity(<sp/>renderEntity,<sp/>renderView<sp/>);</highlight></codeline>
<codeline lineno="1557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1560"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1561"><highlight class="comment">idEntity::GetAnimator</highlight></codeline>
<codeline lineno="1562"><highlight class="comment"></highlight></codeline>
<codeline lineno="1563"><highlight class="comment">Subclasses<sp/>will<sp/>be<sp/>responsible<sp/>for<sp/>allocating<sp/>animator.</highlight></codeline>
<codeline lineno="1564"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1565"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><ref refid="classid_animator" kindref="compound">idAnimator</ref><sp/>*idEntity::GetAnimator(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1571"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="1572"><highlight class="comment">idEntity::GetRenderView</highlight></codeline>
<codeline lineno="1573"><highlight class="comment"></highlight></codeline>
<codeline lineno="1574"><highlight class="comment">This<sp/>is<sp/>used<sp/>by<sp/>remote<sp/>camera<sp/>views<sp/>to<sp/>look<sp/>from<sp/>an<sp/>entity</highlight></codeline>
<codeline lineno="1575"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="1576"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><ref refid="structrender_view__s" kindref="compound">renderView_t</ref><sp/>*idEntity::GetRenderView(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!renderView<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderView<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structrender_view__s" kindref="compound">renderView_t</ref>;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>renderView,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>*renderView<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>renderView-&gt;vieworg<sp/>=<sp/>GetPhysics()-&gt;GetOrigin();</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/>renderView-&gt;fov_x<sp/>=<sp/>120;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/>renderView-&gt;fov_y<sp/>=<sp/>120;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/>renderView-&gt;viewaxis<sp/>=<sp/>GetPhysics()-&gt;GetAxis();</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>global<sp/>shader<sp/>parms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_GLOBAL_SHADER_PARMS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderView-&gt;shaderParms[<sp/>i<sp/>]<sp/>=<sp/>gameLocal.globalShaderParms[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/>renderView-&gt;globalMaterial<sp/>=<sp/>gameLocal.GetGlobalMaterial();</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>renderView-&gt;time<sp/>=<sp/>gameLocal.time;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>renderView;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight><highlight class="comment">/***********************************************************************</highlight></codeline>
<codeline lineno="1601"><highlight class="comment"></highlight></codeline>
<codeline lineno="1602"><highlight class="comment"><sp/><sp/>Sound</highlight></codeline>
<codeline lineno="1603"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1604"><highlight class="comment">***********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1607"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1608"><highlight class="comment">idEntity::CanPlayChatterSounds</highlight></codeline>
<codeline lineno="1609"><highlight class="comment"></highlight></codeline>
<codeline lineno="1610"><highlight class="comment">Used<sp/>for<sp/>playing<sp/>chatter<sp/>sounds<sp/>on<sp/>monsters.</highlight></codeline>
<codeline lineno="1611"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1612"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::CanPlayChatterSounds(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1618"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1619"><highlight class="comment">idEntity::StartSound</highlight></codeline>
<codeline lineno="1620"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1621"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::StartSound(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*soundName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>s_channelType<sp/>channel,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>soundShaderFlags,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>broadcast,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*length<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_sound_shader" kindref="compound">idSoundShader</ref><sp/>*shader;</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sound;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>length<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>should<sp/>ALWAYS<sp/>be<sp/>playing<sp/>sounds<sp/>from<sp/>the<sp/>def.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hardcoded<sp/>sounds<sp/>MUST<sp/>be<sp/>avoided<sp/>at<sp/>all<sp/>times<sp/>because<sp/>they<sp/>won&apos;t<sp/>get<sp/>precached.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>idStr::Icmpn(<sp/>soundName,<sp/></highlight><highlight class="stringliteral">&quot;snd_&quot;</highlight><highlight class="normal">,<sp/>4<sp/>)<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!spawnArgs.GetString(<sp/>soundName,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>&amp;sound<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sound[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!gameLocal.isNewFrame<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>play<sp/>the<sp/>sound,<sp/>but<sp/>don&apos;t<sp/>report<sp/>an<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/>shader<sp/>=<sp/>declManager-&gt;FindSound(<sp/>sound<sp/>);</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StartSoundShader(<sp/>shader,<sp/>channel,<sp/>soundShaderFlags,<sp/>broadcast,<sp/>length<sp/>);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1652"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1653"><highlight class="comment">idEntity::StartSoundShader</highlight></codeline>
<codeline lineno="1654"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1655"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::StartSoundShader(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_sound_shader" kindref="compound">idSoundShader</ref><sp/>*shader,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>s_channelType<sp/>channel,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>soundShaderFlags,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>broadcast,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*length<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>diversity;</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>length<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!shader<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!gameLocal.isNewFrame<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.isServer<sp/>&amp;&amp;<sp/>broadcast<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>msg;</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_EVENT_PARAM_SIZE];</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.BeginWriting();</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>gameLocal.ServerRemapDecl(<sp/>-1,<sp/>DECL_SOUND,<sp/>shader-&gt;Index()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>channel<sp/>);</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ServerSendEvent(<sp/>EVENT_STARTSOUNDSHADER,<sp/>&amp;msg,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>-1<sp/>);</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>a<sp/>random<sp/>value<sp/>for<sp/>diversity<sp/>unless<sp/>one<sp/>was<sp/>parsed<sp/>from<sp/>the<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>refSound.diversity<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diversity<sp/>=<sp/>gameLocal.random.RandomFloat();</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diversity<sp/>=<sp/>refSound.diversity;</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>don&apos;t<sp/>have<sp/>a<sp/>soundEmitter<sp/>allocated<sp/>yet,<sp/>get<sp/>one<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!refSound.referenceSound<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refSound.referenceSound<sp/>=<sp/>gameSoundWorld-&gt;AllocSoundEmitter();</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateSound();</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>refSound.referenceSound-&gt;StartSound(<sp/>shader,<sp/>channel,<sp/>diversity,<sp/>soundShaderFlags,<sp/>!timeGroup<sp/></highlight><highlight class="comment">/*_D3XP*/</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>length<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*length<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>reference<sp/>to<sp/>the<sp/>sound<sp/>for<sp/>shader<sp/>synced<sp/>effects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.referenceSound<sp/>=<sp/>refSound.referenceSound;</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1709"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1710"><highlight class="comment">idEntity::StopSound</highlight></codeline>
<codeline lineno="1711"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1712"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::StopSound(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>s_channelType<sp/>channel,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>broadcast<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!gameLocal.isNewFrame<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.isServer<sp/>&amp;&amp;<sp/>broadcast<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>msg;</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_EVENT_PARAM_SIZE];</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.BeginWriting();</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>channel<sp/>);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ServerSendEvent(<sp/>EVENT_STOPSOUNDSHADER,<sp/>&amp;msg,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>-1<sp/>);</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>refSound.referenceSound<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refSound.referenceSound-&gt;StopSound(<sp/>channel<sp/>);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1734"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1735"><highlight class="comment">idEntity::SetSoundVolume</highlight></codeline>
<codeline lineno="1736"><highlight class="comment"></highlight></codeline>
<codeline lineno="1737"><highlight class="comment"><sp/><sp/>Must<sp/>be<sp/>called<sp/>before<sp/>starting<sp/>a<sp/>new<sp/>sound.</highlight></codeline>
<codeline lineno="1738"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1739"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::SetSoundVolume(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>volume<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/>refSound.parms.volume<sp/>=<sp/>volume;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1745"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1746"><highlight class="comment">idEntity::UpdateSound</highlight></codeline>
<codeline lineno="1747"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1748"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::UpdateSound(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>refSound.referenceSound<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>origin;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>axis;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>GetPhysicsToSoundTransform(<sp/>origin,<sp/>axis<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refSound.origin<sp/>=<sp/>GetPhysics()-&gt;GetOrigin()<sp/>+<sp/>origin<sp/>*<sp/>axis;</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refSound.origin<sp/>=<sp/>GetPhysics()-&gt;GetOrigin();</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refSound.referenceSound-&gt;UpdateEmitter(<sp/>refSound.origin,<sp/>refSound.listenerId,<sp/>&amp;refSound.parms<sp/>);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1762"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1765"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1766"><highlight class="comment">idEntity::GetListenerId</highlight></codeline>
<codeline lineno="1767"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1768"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idEntity::GetListenerId(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>refSound.listenerId;</highlight></codeline>
<codeline lineno="1771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1774"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1775"><highlight class="comment">idEntity::GetSoundEmitter</highlight></codeline>
<codeline lineno="1776"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1777"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><ref refid="classid_sound_emitter" kindref="compound">idSoundEmitter</ref><sp/>*idEntity::GetSoundEmitter(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>refSound.referenceSound;</highlight></codeline>
<codeline lineno="1780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1783"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1784"><highlight class="comment">idEntity::FreeSoundEmitter</highlight></codeline>
<codeline lineno="1785"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1786"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::FreeSoundEmitter(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>immediate<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>refSound.referenceSound<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refSound.referenceSound-&gt;Free(<sp/>immediate<sp/>);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refSound.referenceSound<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight><highlight class="comment">/***********************************************************************</highlight></codeline>
<codeline lineno="1795"><highlight class="comment"></highlight></codeline>
<codeline lineno="1796"><highlight class="comment"><sp/><sp/>entity<sp/>binding</highlight></codeline>
<codeline lineno="1797"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1798"><highlight class="comment">***********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1801"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1802"><highlight class="comment">idEntity::PreBind</highlight></codeline>
<codeline lineno="1803"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1804"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::PreBind(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1806"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1809"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1810"><highlight class="comment">idEntity::PostBind</highlight></codeline>
<codeline lineno="1811"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1812"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::PostBind(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1817"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1818"><highlight class="comment">idEntity::PreUnbind</highlight></codeline>
<codeline lineno="1819"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1820"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::PreUnbind(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1822"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1825"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1826"><highlight class="comment">idEntity::PostUnbind</highlight></codeline>
<codeline lineno="1827"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1828"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::PostUnbind(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1833"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1834"><highlight class="comment">idEntity::InitBind</highlight></codeline>
<codeline lineno="1835"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1836"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::InitBind(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Tried<sp/>to<sp/>bind<sp/>an<sp/>object<sp/>to<sp/>itself.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>gameLocal.world<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Tried<sp/>to<sp/>bind<sp/>world<sp/>to<sp/>another<sp/>entity&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unbind<sp/>myself<sp/>from<sp/>my<sp/>master</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/>Unbind();</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>any<sp/>bind<sp/>constraints<sp/>to<sp/>an<sp/>articulated<sp/>figure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>&amp;&amp;<sp/>IsType(<sp/>idAFEntity_Base::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_a_f_entity___base" kindref="compound">idAFEntity_Base</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;AddBindConstraints();</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!master<sp/>||<sp/>master<sp/>==<sp/>gameLocal.world<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>can<sp/>happen<sp/>in<sp/>scripts,<sp/>so<sp/>safely<sp/>exit<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1866"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1867"><highlight class="comment">idEntity::FinishBind</highlight></codeline>
<codeline lineno="1868"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1869"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::FinishBind(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>master<sp/>on<sp/>the<sp/>physics<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/>physics-&gt;SetMaster(<sp/>bindMaster,<sp/>fl.bindOrientated<sp/>);</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>are<sp/>now<sp/>separated<sp/>from<sp/>our<sp/>previous<sp/>team<sp/>and<sp/>are<sp/>either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>individual,<sp/>or<sp/>have<sp/>a<sp/>team<sp/>of<sp/>our<sp/>own.<sp/><sp/>Now<sp/>we<sp/>can<sp/>join</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>new<sp/>bindMaster&apos;s<sp/>team.<sp/><sp/>Bindmaster<sp/>must<sp/>be<sp/>set<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>joining<sp/>the<sp/>team,<sp/>or<sp/>we<sp/>will<sp/>be<sp/>placed<sp/>in<sp/>the<sp/>wrong<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>team.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/>JoinTeam(<sp/>bindMaster<sp/>);</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>our<sp/>bindMaster<sp/>is<sp/>enabled<sp/>during<sp/>a<sp/>cinematic,<sp/>we<sp/>must<sp/>be,<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/>cinematic<sp/>=<sp/>bindMaster-&gt;cinematic;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>the<sp/>team<sp/>master<sp/>is<sp/>active<sp/>so<sp/>that<sp/>physics<sp/>get<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/>teamMaster-&gt;BecomeActive(<sp/>TH_PHYSICS<sp/>);</highlight></codeline>
<codeline lineno="1887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1890"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1891"><highlight class="comment">idEntity::Bind</highlight></codeline>
<codeline lineno="1892"><highlight class="comment"></highlight></codeline>
<codeline lineno="1893"><highlight class="comment"><sp/><sp/>bind<sp/>relative<sp/>to<sp/>the<sp/>visual<sp/>position<sp/>of<sp/>the<sp/>master</highlight></codeline>
<codeline lineno="1894"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1895"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Bind(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*master,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>orientated<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!InitBind(<sp/>master<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/>PreBind();</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/>bindJoint<sp/>=<sp/>INVALID_JOINT;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/>bindBody<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/>bindMaster<sp/>=<sp/>master;</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.bindOrientated<sp/>=<sp/>orientated;</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/>FinishBind();</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"></highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/>PostBind(<sp/>);</highlight></codeline>
<codeline lineno="1912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1915"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1916"><highlight class="comment">idEntity::BindToJoint</highlight></codeline>
<codeline lineno="1917"><highlight class="comment"></highlight></codeline>
<codeline lineno="1918"><highlight class="comment"><sp/><sp/>bind<sp/>relative<sp/>to<sp/>a<sp/>joint<sp/>of<sp/>the<sp/>md5<sp/>model<sp/>used<sp/>by<sp/>the<sp/>master</highlight></codeline>
<codeline lineno="1919"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1920"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::BindToJoint(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*master,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*jointname,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>orientated<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/>jointHandle_t<sp/><sp/><sp/>jointnum;</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_animator" kindref="compound">idAnimator</ref><sp/><sp/><sp/><sp/><sp/><sp/>*masterAnimator;</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!InitBind(<sp/>master<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/>masterAnimator<sp/>=<sp/>master-&gt;GetAnimator();</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!masterAnimator<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;idEntity::BindToJoint:<sp/>entity<sp/>&apos;%s&apos;<sp/>cannot<sp/>support<sp/>skeletal<sp/>models.&quot;</highlight><highlight class="normal">,<sp/>master-&gt;GetName()<sp/>);</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/>jointnum<sp/>=<sp/>masterAnimator-&gt;GetJointHandle(<sp/>jointname<sp/>);</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>jointnum<sp/>==<sp/>INVALID_JOINT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;idEntity::BindToJoint:<sp/>joint<sp/>&apos;%s&apos;<sp/>not<sp/>found<sp/>on<sp/>entity<sp/>&apos;%s&apos;.&quot;</highlight><highlight class="normal">,<sp/>jointname,<sp/>master-&gt;GetName()<sp/>);</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/>PreBind();</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/>bindJoint<sp/>=<sp/>jointnum;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/>bindBody<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/>bindMaster<sp/>=<sp/>master;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.bindOrientated<sp/>=<sp/>orientated;</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/>FinishBind();</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/>PostBind();</highlight></codeline>
<codeline lineno="1950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1953"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1954"><highlight class="comment">idEntity::BindToJoint</highlight></codeline>
<codeline lineno="1955"><highlight class="comment"></highlight></codeline>
<codeline lineno="1956"><highlight class="comment"><sp/><sp/>bind<sp/>relative<sp/>to<sp/>a<sp/>joint<sp/>of<sp/>the<sp/>md5<sp/>model<sp/>used<sp/>by<sp/>the<sp/>master</highlight></codeline>
<codeline lineno="1957"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1958"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::BindToJoint(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*master,<sp/>jointHandle_t<sp/>jointnum,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>orientated<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!InitBind(<sp/>master<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/>PreBind();</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/>bindJoint<sp/>=<sp/>jointnum;</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>bindBody<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/>bindMaster<sp/>=<sp/>master;</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.bindOrientated<sp/>=<sp/>orientated;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/>FinishBind();</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/>PostBind();</highlight></codeline>
<codeline lineno="1975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1978"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1979"><highlight class="comment">idEntity::BindToBody</highlight></codeline>
<codeline lineno="1980"><highlight class="comment"></highlight></codeline>
<codeline lineno="1981"><highlight class="comment"><sp/><sp/>bind<sp/>relative<sp/>to<sp/>a<sp/>collision<sp/>model<sp/>used<sp/>by<sp/>the<sp/>physics<sp/>of<sp/>the<sp/>master</highlight></codeline>
<codeline lineno="1982"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1983"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::BindToBody(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*master,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bodyId,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>orientated<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!InitBind(<sp/>master<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bodyId<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;idEntity::BindToBody:<sp/>body<sp/>&apos;%d&apos;<sp/>not<sp/>found.&quot;</highlight><highlight class="normal">,<sp/>bodyId<sp/>);</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"></highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/>PreBind();</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/>bindJoint<sp/>=<sp/>INVALID_JOINT;</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/>bindBody<sp/>=<sp/>bodyId;</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/>bindMaster<sp/>=<sp/>master;</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.bindOrientated<sp/>=<sp/>orientated;</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"></highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/>FinishBind();</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/>PostBind();</highlight></codeline>
<codeline lineno="2004"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2007"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2008"><highlight class="comment">idEntity::Unbind</highlight></codeline>
<codeline lineno="2009"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2010"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Unbind(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*<sp/><sp/>prev;</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*<sp/><sp/>next;</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*<sp/><sp/>last;</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*<sp/><sp/>ent;</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>any<sp/>bind<sp/>constraints<sp/>from<sp/>an<sp/>articulated<sp/>figure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>IsType(<sp/>idAFEntity_Base::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_a_f_entity___base" kindref="compound">idAFEntity_Base</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;RemoveBindConstraints();</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!bindMaster<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!teamMaster<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Teammaster<sp/>already<sp/>has<sp/>been<sp/>freed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bindMaster<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/>PreUnbind();</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>physics<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>physics-&gt;SetMaster(<sp/>NULL,<sp/>fl.bindOrientated<sp/>);</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>still<sp/>part<sp/>of<sp/>a<sp/>team,<sp/>so<sp/>that<sp/>means<sp/>I<sp/>have<sp/>to<sp/>extricate<sp/>myself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>any<sp/>entities<sp/>that<sp/>are<sp/>bound<sp/>to<sp/>me<sp/>from<sp/>the<sp/>old<sp/>team.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>node<sp/>previous<sp/>to<sp/>me<sp/>in<sp/>the<sp/>team</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>teamMaster;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>ent<sp/>=<sp/>teamMaster-&gt;teamChain;<sp/>ent<sp/>&amp;&amp;<sp/>(<sp/>ent<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);<sp/>ent<sp/>=<sp/>ent-&gt;teamChain<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>ent;</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>ent<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);<sp/></highlight><highlight class="comment">//<sp/>If<sp/>ent<sp/>is<sp/>not<sp/>pointing<sp/>to<sp/>this,<sp/>then<sp/>something<sp/>is<sp/>very<sp/>wrong.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>last<sp/>node<sp/>in<sp/>my<sp/>team<sp/>that<sp/>is<sp/>bound<sp/>to<sp/>me.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>find<sp/>the<sp/>first<sp/>node<sp/>not<sp/>bound<sp/>to<sp/>me,<sp/>if<sp/>one<sp/>exists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/>last<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>next<sp/>=<sp/>teamChain;<sp/>next<sp/>!=<sp/>NULL;<sp/>next<sp/>=<sp/>next-&gt;teamChain<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!next-&gt;IsBoundTo(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tell<sp/>them<sp/>I&apos;m<sp/>now<sp/>the<sp/>teamMaster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next-&gt;teamMaster<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disconnect<sp/>the<sp/>last<sp/>member<sp/>of<sp/>our<sp/>team<sp/>from<sp/>the<sp/>old<sp/>team</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/>last-&gt;teamChain<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>connect<sp/>up<sp/>the<sp/>previous<sp/>member<sp/>of<sp/>the<sp/>old<sp/>team<sp/>to<sp/>the<sp/>node<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>follow<sp/>the<sp/>last<sp/>node<sp/>bound<sp/>to<sp/>me<sp/>(if<sp/>one<sp/>exists).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>teamMaster<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev-&gt;teamChain<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!next<sp/>&amp;&amp;<sp/>(<sp/>teamMaster<sp/>==<sp/>prev<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev-&gt;teamMaster<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>were<sp/>the<sp/>teamMaster,<sp/>then<sp/>the<sp/>nodes<sp/>that<sp/>were<sp/>not<sp/>bound<sp/>to<sp/>me<sp/>are<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>disconnected<sp/>chain.<sp/><sp/>Make<sp/>them<sp/>into<sp/>their<sp/>own<sp/>team.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>ent<sp/>=<sp/>next;<sp/>ent-&gt;teamChain<sp/>!=<sp/>NULL;<sp/>ent<sp/>=<sp/>ent-&gt;teamChain<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;teamMaster<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next-&gt;teamMaster<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>don&apos;t<sp/>have<sp/>anyone<sp/>on<sp/>our<sp/>team,<sp/>then<sp/>clear<sp/>the<sp/>team<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>teamChain<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>myself<sp/>my<sp/>own<sp/>team</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>teamMaster<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>longer<sp/>a<sp/>team</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>teamMaster<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/>bindJoint<sp/>=<sp/>INVALID_JOINT;</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/>bindBody<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/>bindMaster<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/>PostUnbind();</highlight></codeline>
<codeline lineno="2094"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"></highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2097"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2098"><highlight class="comment">idEntity::RemoveBinds</highlight></codeline>
<codeline lineno="2099"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2100"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::RemoveBinds(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*next;</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>ent<sp/>=<sp/>teamChain;<sp/>ent<sp/>!=<sp/>NULL;<sp/>ent<sp/>=<sp/>next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>ent-&gt;teamChain;</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent-&gt;bindMaster<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;Unbind();</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;PostEventMS(<sp/>&amp;EV_Remove,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>teamChain;</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2116"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2117"><highlight class="comment">idEntity::IsBound</highlight></codeline>
<codeline lineno="2118"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2119"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::IsBound(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bindMaster<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2128"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2129"><highlight class="comment">idEntity::IsBoundTo</highlight></codeline>
<codeline lineno="2130"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2131"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::IsBoundTo(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*master<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!bindMaster<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"></highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>=<sp/>bindMaster;<sp/>ent<sp/>!=<sp/>NULL;<sp/>ent<sp/>=<sp/>ent-&gt;bindMaster<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>==<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2149"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2150"><highlight class="comment">idEntity::GetBindMaster</highlight></codeline>
<codeline lineno="2151"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2152"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*idEntity::GetBindMaster(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bindMaster;</highlight></codeline>
<codeline lineno="2155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2158"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2159"><highlight class="comment">idEntity::GetBindJoint</highlight></codeline>
<codeline lineno="2160"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2161"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal">jointHandle_t<sp/>idEntity::GetBindJoint(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bindJoint;</highlight></codeline>
<codeline lineno="2164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2167"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2168"><highlight class="comment">idEntity::GetBindBody</highlight></codeline>
<codeline lineno="2169"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2170"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idEntity::GetBindBody(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bindBody;</highlight></codeline>
<codeline lineno="2173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2176"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2177"><highlight class="comment">idEntity::GetTeamMaster</highlight></codeline>
<codeline lineno="2178"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2179"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*idEntity::GetTeamMaster(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>teamMaster;</highlight></codeline>
<codeline lineno="2182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2185"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2186"><highlight class="comment">idEntity::GetNextTeamEntity</highlight></codeline>
<codeline lineno="2187"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2188"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*idEntity::GetNextTeamEntity(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>teamChain;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2194"><highlight class="comment">=====================</highlight></codeline>
<codeline lineno="2195"><highlight class="comment">idEntity::ConvertLocalToWorldTransform</highlight></codeline>
<codeline lineno="2196"><highlight class="comment">=====================</highlight></codeline>
<codeline lineno="2197"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::ConvertLocalToWorldTransform(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;offset,<sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>&amp;axis<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateModelTransform();</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>renderEntity.origin<sp/>+<sp/>offset<sp/>*<sp/>renderEntity.axis;</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/>axis<sp/>*=<sp/>renderEntity.axis;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"></highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2206"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2207"><highlight class="comment">idEntity::GetLocalVector</highlight></codeline>
<codeline lineno="2208"><highlight class="comment"></highlight></codeline>
<codeline lineno="2209"><highlight class="comment">Takes<sp/>a<sp/>vector<sp/>in<sp/>worldspace<sp/>and<sp/>transforms<sp/>it<sp/>into<sp/>the<sp/>parent</highlight></codeline>
<codeline lineno="2210"><highlight class="comment">object&apos;s<sp/>localspace.</highlight></codeline>
<codeline lineno="2211"><highlight class="comment"></highlight></codeline>
<codeline lineno="2212"><highlight class="comment">Note:<sp/>Does<sp/>not<sp/>take<sp/>origin<sp/>into<sp/>acount.<sp/><sp/>Use<sp/>getLocalCoordinate<sp/>to</highlight></codeline>
<codeline lineno="2213"><highlight class="comment">convert<sp/>coordinates.</highlight></codeline>
<codeline lineno="2214"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2215"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>idEntity::GetLocalVector(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;vec<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>pos;</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!bindMaster<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec;</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>masterOrigin;</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/><sp/>masterAxis;</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/>GetMasterPosition(<sp/>masterOrigin,<sp/>masterAxis<sp/>);</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/>masterAxis.ProjectVector(<sp/>vec,<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos;</highlight></codeline>
<codeline lineno="2230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2233"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2234"><highlight class="comment">idEntity::GetLocalCoordinates</highlight></codeline>
<codeline lineno="2235"><highlight class="comment"></highlight></codeline>
<codeline lineno="2236"><highlight class="comment">Takes<sp/>a<sp/>vector<sp/>in<sp/>world<sp/>coordinates<sp/>and<sp/>transforms<sp/>it<sp/>into<sp/>the<sp/>parent</highlight></codeline>
<codeline lineno="2237"><highlight class="comment">object&apos;s<sp/>local<sp/>coordinates.</highlight></codeline>
<codeline lineno="2238"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2239"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>idEntity::GetLocalCoordinates(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;vec<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>pos;</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!bindMaster<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec;</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>masterOrigin;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/><sp/>masterAxis;</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/>GetMasterPosition(<sp/>masterOrigin,<sp/>masterAxis<sp/>);</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/>masterAxis.ProjectVector(<sp/>vec<sp/>-<sp/>masterOrigin,<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos;</highlight></codeline>
<codeline lineno="2254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2257"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2258"><highlight class="comment">idEntity::GetWorldVector</highlight></codeline>
<codeline lineno="2259"><highlight class="comment"></highlight></codeline>
<codeline lineno="2260"><highlight class="comment">Takes<sp/>a<sp/>vector<sp/>in<sp/>the<sp/>parent<sp/>object&apos;s<sp/>local<sp/>coordinates<sp/>and<sp/>transforms</highlight></codeline>
<codeline lineno="2261"><highlight class="comment">it<sp/>into<sp/>world<sp/>coordinates.</highlight></codeline>
<codeline lineno="2262"><highlight class="comment"></highlight></codeline>
<codeline lineno="2263"><highlight class="comment">Note:<sp/>Does<sp/>not<sp/>take<sp/>origin<sp/>into<sp/>acount.<sp/><sp/>Use<sp/>getWorldCoordinate<sp/>to</highlight></codeline>
<codeline lineno="2264"><highlight class="comment">convert<sp/>coordinates.</highlight></codeline>
<codeline lineno="2265"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2266"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>idEntity::GetWorldVector(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;vec<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>pos;</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!bindMaster<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec;</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>masterOrigin;</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/><sp/>masterAxis;</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/>GetMasterPosition(<sp/>masterOrigin,<sp/>masterAxis<sp/>);</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/>masterAxis.UnprojectVector(<sp/>vec,<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"></highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos;</highlight></codeline>
<codeline lineno="2281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2284"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2285"><highlight class="comment">idEntity::GetWorldCoordinates</highlight></codeline>
<codeline lineno="2286"><highlight class="comment"></highlight></codeline>
<codeline lineno="2287"><highlight class="comment">Takes<sp/>a<sp/>vector<sp/>in<sp/>the<sp/>parent<sp/>object&apos;s<sp/>local<sp/>coordinates<sp/>and<sp/>transforms</highlight></codeline>
<codeline lineno="2288"><highlight class="comment">it<sp/>into<sp/>world<sp/>coordinates.</highlight></codeline>
<codeline lineno="2289"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2290"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>idEntity::GetWorldCoordinates(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;vec<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>pos;</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!bindMaster<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec;</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"></highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>masterOrigin;</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/><sp/>masterAxis;</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/>GetMasterPosition(<sp/>masterOrigin,<sp/>masterAxis<sp/>);</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/>masterAxis.UnprojectVector(<sp/>vec,<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>+=<sp/>masterOrigin;</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos;</highlight></codeline>
<codeline lineno="2306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2309"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2310"><highlight class="comment">idEntity::GetMasterPosition</highlight></codeline>
<codeline lineno="2311"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2312"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::GetMasterPosition(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;masterOrigin,<sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>&amp;masterAxis<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/>localOrigin;</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/><sp/><sp/><sp/><sp/><sp/>localAxis;</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_animator" kindref="compound">idAnimator</ref><sp/><sp/>*masterAnimator;</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"></highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bindMaster<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>bound<sp/>to<sp/>a<sp/>joint<sp/>of<sp/>an<sp/>animated<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bindJoint<sp/>!=<sp/>INVALID_JOINT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterAnimator<sp/>=<sp/>bindMaster-&gt;GetAnimator();</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!masterAnimator<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterOrigin<sp/>=<sp/>vec3_origin;</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterAxis<sp/>=<sp/>mat3_identity;</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterAnimator-&gt;GetJointTransform(<sp/>bindJoint,<sp/>gameLocal.time,<sp/>masterOrigin,<sp/>masterAxis<sp/>);</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterAxis<sp/>*=<sp/>bindMaster-&gt;renderEntity.axis;</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterOrigin<sp/>=<sp/>bindMaster-&gt;renderEntity.origin<sp/>+<sp/>masterOrigin<sp/>*<sp/>bindMaster-&gt;renderEntity.axis;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bindBody<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>bindMaster-&gt;GetPhysics()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterOrigin<sp/>=<sp/>bindMaster-&gt;GetPhysics()-&gt;GetOrigin(<sp/>bindBody<sp/>);</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterAxis<sp/>=<sp/>bindMaster-&gt;GetPhysics()-&gt;GetAxis(<sp/>bindBody<sp/>);</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterOrigin<sp/>=<sp/>bindMaster-&gt;renderEntity.origin;</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterAxis<sp/>=<sp/>bindMaster-&gt;renderEntity.axis;</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterOrigin<sp/>=<sp/>vec3_origin;</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterAxis<sp/>=<sp/>mat3_identity;</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2347"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2348"><highlight class="comment">idEntity::GetWorldVelocities</highlight></codeline>
<codeline lineno="2349"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2350"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::GetWorldVelocities(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;linearVelocity,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;angularVelocity<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/>linearVelocity<sp/>=<sp/>physics-&gt;GetLinearVelocity();</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/>angularVelocity<sp/>=<sp/>physics-&gt;GetAngularVelocity();</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bindMaster<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>masterOrigin,<sp/>masterLinearVelocity,<sp/>masterAngularVelocity;</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>masterAxis;</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>position<sp/>of<sp/>master</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetMasterPosition(<sp/>masterOrigin,<sp/>masterAxis<sp/>);</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"></highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>master<sp/>velocities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bindMaster-&gt;GetWorldVelocities(<sp/>masterLinearVelocity,<sp/>masterAngularVelocity<sp/>);</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>linear<sp/>velocity<sp/>relative<sp/>to<sp/>master<sp/>plus<sp/>master<sp/>linear<sp/>and<sp/>angular<sp/>velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linearVelocity<sp/>=<sp/>linearVelocity<sp/>*<sp/>masterAxis<sp/>+<sp/>masterLinearVelocity<sp/>+</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masterAngularVelocity.Cross(<sp/>GetPhysics()-&gt;GetOrigin()<sp/>-<sp/>masterOrigin<sp/>);</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2373"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2374"><highlight class="comment">idEntity::JoinTeam</highlight></codeline>
<codeline lineno="2375"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2376"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2377"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::JoinTeam(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*teammember<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*master;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*prev;</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*next;</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"></highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we&apos;re<sp/>already<sp/>on<sp/>a<sp/>team,<sp/>quit<sp/>it<sp/>so<sp/>we<sp/>can<sp/>join<sp/>this<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>teamMaster<sp/>&amp;&amp;<sp/>(<sp/>teamMaster<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QuitTeam();</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"></highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>teammember<sp/>);</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>teammember<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>teamMaster<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>our<sp/>new<sp/>team<sp/>mate<sp/>is<sp/>already<sp/>on<sp/>a<sp/>team</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/>master<sp/>=<sp/>teammember-&gt;teamMaster;</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>he&apos;s<sp/>not<sp/>on<sp/>a<sp/>team,<sp/>so<sp/>he&apos;s<sp/>the<sp/>new<sp/>teamMaster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>master<sp/>=<sp/>teammember;</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>teammember-&gt;teamMaster<sp/>=<sp/>teammember;</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>teammember-&gt;teamChain<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"></highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>anyone<sp/>who&apos;s<sp/>bound<sp/>to<sp/>me<sp/>part<sp/>of<sp/>the<sp/>new<sp/>team</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>ent<sp/>=<sp/>teamChain;<sp/>ent<sp/>!=<sp/>NULL;<sp/>ent<sp/>=<sp/>ent-&gt;teamChain<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;teamMaster<sp/>=<sp/>master;</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>past<sp/>the<sp/>chain<sp/>members<sp/>bound<sp/>to<sp/>the<sp/>entity<sp/>we&apos;re<sp/>teaming<sp/>up<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>teammember;</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>teammember-&gt;teamChain;</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bindMaster<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>have<sp/>a<sp/>bindMaster,<sp/>join<sp/>after<sp/>any<sp/>entities<sp/>bound<sp/>to<sp/>the<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we&apos;re<sp/>joining</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>next<sp/>&amp;&amp;<sp/>next-&gt;IsBoundTo(<sp/>teammember<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>next-&gt;teamChain;</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we&apos;re<sp/>not<sp/>bound<sp/>to<sp/>someone,<sp/>then<sp/>put<sp/>us<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>team</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>next-&gt;teamChain;</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"></highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>anyone<sp/>who&apos;s<sp/>bound<sp/>to<sp/>me<sp/>part<sp/>of<sp/>the<sp/>new<sp/>team<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>find<sp/>the<sp/>last<sp/>member<sp/>of<sp/>my<sp/>team</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>ent<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>ent-&gt;teamChain<sp/>!=<sp/>NULL;<sp/>ent<sp/>=<sp/>ent-&gt;teamChain<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;teamChain-&gt;teamMaster<sp/>=<sp/>master;</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev-&gt;teamChain<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;teamChain<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/>teamMaster<sp/>=<sp/>master;</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reorder<sp/>the<sp/>active<sp/>entity<sp/>list<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.sortTeamMasters<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2443"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2444"><highlight class="comment">idEntity::QuitTeam</highlight></codeline>
<codeline lineno="2445"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2446"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::QuitTeam(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!teamMaster<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>I&apos;m<sp/>the<sp/>teamMaster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>teamMaster<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>we<sp/>have<sp/>more<sp/>than<sp/>one<sp/>teammate?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!teamChain-&gt;teamChain<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no,<sp/>break<sp/>up<sp/>the<sp/>team</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>teamChain-&gt;teamMaster<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>yes,<sp/>so<sp/>make<sp/>the<sp/>first<sp/>teammate<sp/>the<sp/>teamMaster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>ent<sp/>=<sp/>teamChain;<sp/>ent;<sp/>ent<sp/>=<sp/>ent-&gt;teamChain<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;teamMaster<sp/>=<sp/>teamChain;</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>teamMaster<sp/>);</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>teamMaster-&gt;teamChain<sp/>);</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>previous<sp/>member<sp/>of<sp/>the<sp/>teamChain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>teamMaster;</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>ent-&gt;teamChain<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>ent-&gt;teamChain<sp/>);<sp/></highlight><highlight class="comment">//<sp/>this<sp/>should<sp/>never<sp/>happen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>ent-&gt;teamChain;</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>this<sp/>from<sp/>the<sp/>teamChain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;teamChain<sp/>=<sp/>teamChain;</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>no<sp/>one<sp/>is<sp/>left<sp/>on<sp/>the<sp/>team,<sp/>break<sp/>it<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!teamMaster-&gt;teamChain<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>teamMaster-&gt;teamMaster<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"></highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/>teamMaster<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/>teamChain<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"></highlight></codeline>
<codeline lineno="2490"><highlight class="normal"></highlight><highlight class="comment">/***********************************************************************</highlight></codeline>
<codeline lineno="2491"><highlight class="comment"></highlight></codeline>
<codeline lineno="2492"><highlight class="comment"><sp/><sp/>Physics.</highlight></codeline>
<codeline lineno="2493"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2494"><highlight class="comment">***********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight></codeline>
<codeline lineno="2496"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2497"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2498"><highlight class="comment">idEntity::InitDefaultPhysics</highlight></codeline>
<codeline lineno="2499"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2500"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2501"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::InitDefaultPhysics(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;origin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>&amp;axis<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*temp;</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref><sp/>*clipModel<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"></highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>a<sp/>clipmodel<sp/>key/value<sp/>pair<sp/>is<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;clipmodel&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>&amp;temp<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idClipModel::CheckModel(<sp/>temp<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clipModel<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref>(<sp/>temp<sp/>);</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!spawnArgs.GetBool(<sp/></highlight><highlight class="stringliteral">&quot;noclipmodel&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>mins/maxs<sp/>or<sp/>size<sp/>key/value<sp/>pairs<sp/>are<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!clipModel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>size;</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>bounds;</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setClipModel<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>spawnArgs.GetVector(<sp/></highlight><highlight class="stringliteral">&quot;mins&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>bounds[0]<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spawnArgs.GetVector(<sp/></highlight><highlight class="stringliteral">&quot;maxs&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>bounds[1]<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setClipModel<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bounds[0][0]<sp/>&gt;<sp/>bounds[1][0]<sp/>||<sp/>bounds[0][1]<sp/>&gt;<sp/>bounds[1][1]<sp/>||<sp/>bounds[0][2]<sp/>&gt;<sp/>bounds[1][2]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>bounds<sp/>&apos;%s&apos;-&apos;%s&apos;<sp/>on<sp/>entity<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>bounds[0].ToString(),<sp/>bounds[1].ToString(),<sp/>name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>spawnArgs.GetVector(<sp/></highlight><highlight class="stringliteral">&quot;size&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>size<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>size.x<sp/>&lt;<sp/>0.0f<sp/>)<sp/>||<sp/>(<sp/>size.y<sp/>&lt;<sp/>0.0f<sp/>)<sp/>||<sp/>(<sp/>size.z<sp/>&lt;<sp/>0.0f<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>size<sp/>&apos;%s&apos;<sp/>on<sp/>entity<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>size.ToString(),<sp/>name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bounds[0].Set(<sp/>size.x<sp/>*<sp/>-0.5f,<sp/>size.y<sp/>*<sp/>-0.5f,<sp/>0.0f<sp/>);</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bounds[1].Set(<sp/>size.x<sp/>*<sp/>0.5f,<sp/>size.y<sp/>*<sp/>0.5f,<sp/>size.z<sp/>);</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setClipModel<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>setClipModel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numSides;</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_trace_model" kindref="compound">idTraceModel</ref><sp/>trm;</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>spawnArgs.GetInt(<sp/></highlight><highlight class="stringliteral">&quot;cylinder&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>numSides<sp/>)<sp/>&amp;&amp;<sp/>numSides<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trm.SetupCylinder(<sp/>bounds,<sp/>numSides<sp/>&lt;<sp/>3<sp/>?<sp/>3<sp/>:<sp/>numSides<sp/>);</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>spawnArgs.GetInt(<sp/></highlight><highlight class="stringliteral">&quot;cone&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>numSides<sp/>)<sp/>&amp;&amp;<sp/>numSides<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trm.SetupCone(<sp/>bounds,<sp/>numSides<sp/>&lt;<sp/>3<sp/>?<sp/>3<sp/>:<sp/>numSides<sp/>);</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trm.SetupBox(<sp/>bounds<sp/>);</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clipModel<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref>(<sp/>trm<sp/>);</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"></highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>the<sp/>visual<sp/>model<sp/>can<sp/>be<sp/>used<sp/>as<sp/>collision<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!clipModel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;model&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>temp<sp/>!=<sp/>NULL<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>*temp<sp/>!=<sp/>0<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idClipModel::CheckModel(<sp/>temp<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clipModel<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref>(<sp/>temp<sp/>);</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultPhysicsObj.SetSelf(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultPhysicsObj.SetClipModel(<sp/>clipModel,<sp/>1.0f<sp/>);</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultPhysicsObj.SetOrigin(<sp/>origin<sp/>);</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultPhysicsObj.SetAxis(<sp/>axis<sp/>);</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/>physics<sp/>=<sp/>&amp;defaultPhysicsObj;</highlight></codeline>
<codeline lineno="2567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2570"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2571"><highlight class="comment">idEntity::SetPhysics</highlight></codeline>
<codeline lineno="2572"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2573"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2574"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::SetPhysics(<sp/><ref refid="classid_physics" kindref="compound">idPhysics</ref><sp/>*phys<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>any<sp/>contacts<sp/>the<sp/>current<sp/>physics<sp/>object<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>physics<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>physics-&gt;ClearContacts();</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>new<sp/>physics<sp/>object<sp/>or<sp/>set<sp/>the<sp/>default<sp/>physics<sp/>if<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>phys<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defaultPhysicsObj.SetClipModel(<sp/>NULL,<sp/>1.0f<sp/>);</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>physics<sp/>=<sp/>phys;</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>physics-&gt;Activate();</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>physics<sp/>=<sp/>&amp;defaultPhysicsObj;</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/>physics-&gt;UpdateTime(<sp/>gameLocal.time<sp/>);</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/>physics-&gt;SetMaster(<sp/>bindMaster,<sp/>fl.bindOrientated<sp/>);</highlight></codeline>
<codeline lineno="2589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"></highlight></codeline>
<codeline lineno="2591"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2592"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2593"><highlight class="comment">idEntity::RestorePhysics</highlight></codeline>
<codeline lineno="2594"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2595"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::RestorePhysics(<sp/><ref refid="classid_physics" kindref="compound">idPhysics</ref><sp/>*phys<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>phys<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>physics<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/>physics<sp/>=<sp/>phys;</highlight></codeline>
<codeline lineno="2600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2603"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2604"><highlight class="comment">idEntity::GetPhysics</highlight></codeline>
<codeline lineno="2605"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2606"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><ref refid="classid_physics" kindref="compound">idPhysics</ref><sp/>*idEntity::GetPhysics(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>physics;</highlight></codeline>
<codeline lineno="2609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"></highlight></codeline>
<codeline lineno="2611"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2612"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2613"><highlight class="comment">idEntity::RunPhysics</highlight></codeline>
<codeline lineno="2614"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2615"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2616"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::RunPhysics(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>reachedTime,<sp/>startTime,<sp/>endTime;</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*<sp/><sp/>part,<sp/>*blockedPart,<sp/>*blockingEntity;</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtrace__s" kindref="compound">trace_t</ref><sp/><sp/><sp/><sp/><sp/>results;</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moved;</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"></highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>run<sp/>physics<sp/>if<sp/>not<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!(<sp/>thinkFlags<sp/>&amp;<sp/>TH_PHYSICS<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>however<sp/>do<sp/>update<sp/>any<sp/>animation<sp/>controllers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>UpdateAnimationControllers()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BecomeActive(<sp/>TH_ANIMATE<sp/>);</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"></highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>entity<sp/>is<sp/>a<sp/>team<sp/>slave<sp/>don&apos;t<sp/>do<sp/>anything<sp/>because<sp/>the<sp/>team<sp/>master<sp/>will<sp/>handle<sp/>everything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>teamMaster<sp/>&amp;&amp;<sp/>teamMaster<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/>startTime<sp/>=<sp/>gameLocal.previousTime;</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/>endTime<sp/>=<sp/>gameLocal.time;</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.push.InitSavingPushedEntityPositions();</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/>blockedPart<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"></highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>the<sp/>physics<sp/>state<sp/>of<sp/>the<sp/>whole<sp/>team<sp/>and<sp/>disable<sp/>the<sp/>team<sp/>for<sp/>collision<sp/>detection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>part<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>part<sp/>!=<sp/>NULL;<sp/>part<sp/>=<sp/>part-&gt;teamChain<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>part-&gt;physics<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!part-&gt;fl.solidForTeam<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part-&gt;physics-&gt;DisableClip();</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part-&gt;physics-&gt;SaveState();</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>the<sp/>whole<sp/>team</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>part<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>part<sp/>!=<sp/>NULL;<sp/>part<sp/>=<sp/>part-&gt;teamChain<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>part-&gt;physics<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"></highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>physics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moved<sp/>=<sp/>part-&gt;physics-&gt;Evaluate(<sp/>endTime<sp/>-<sp/>startTime,<sp/>endTime<sp/>);</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>the<sp/>object<sp/>is<sp/>blocked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockingEntity<sp/>=<sp/>part-&gt;physics-&gt;GetBlockingEntity();</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>blockingEntity<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockedPart<sp/>=<sp/>part;</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"></highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>moved<sp/>or<sp/>forced<sp/>to<sp/>update<sp/>the<sp/>visual<sp/>position<sp/>and<sp/>orientation<sp/>from<sp/>the<sp/>physics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>moved<sp/>||<sp/>part-&gt;fl.forcePhysicsUpdate<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part-&gt;UpdateFromPhysics(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"></highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>any<sp/>animation<sp/>controllers<sp/>here<sp/>so<sp/>an<sp/>entity<sp/>bound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>a<sp/>joint<sp/>of<sp/>this<sp/>entity<sp/>gets<sp/>the<sp/>correct<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>part-&gt;UpdateAnimationControllers()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part-&gt;BecomeActive(<sp/>TH_ANIMATE<sp/>);</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"></highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enable<sp/>the<sp/>whole<sp/>team<sp/>for<sp/>collision<sp/>detection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>part<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>part<sp/>!=<sp/>NULL;<sp/>part<sp/>=<sp/>part-&gt;teamChain<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>part-&gt;physics<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!part-&gt;fl.solidForTeam<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part-&gt;physics-&gt;EnableClip();</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"></highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>one<sp/>of<sp/>the<sp/>team<sp/>entities<sp/>is<sp/>a<sp/>pusher<sp/>and<sp/>blocked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>blockedPart<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>the<sp/>parts<sp/>back<sp/>to<sp/>the<sp/>previous<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>part<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>part<sp/>!=<sp/>blockedPart;<sp/>part<sp/>=<sp/>part-&gt;teamChain<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"></highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>part-&gt;physics<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"></highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>the<sp/>physics<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part-&gt;physics-&gt;RestoreState();</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>back<sp/>the<sp/>visual<sp/>position<sp/>and<sp/>orientation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part-&gt;UpdateFromPhysics(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>part<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>part<sp/>!=<sp/>NULL;<sp/>part<sp/>=<sp/>part-&gt;teamChain<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>part-&gt;physics<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>physics<sp/>time<sp/>without<sp/>moving</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part-&gt;physics-&gt;UpdateTime(<sp/>endTime<sp/>);</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"></highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>the<sp/>positions<sp/>of<sp/>any<sp/>pushed<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.push.RestorePushedEntityPositions();</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"></highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.isClient<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"></highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>master<sp/>pusher<sp/>has<sp/>a<sp/>&quot;blocked&quot;<sp/>function,<sp/>call<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Signal(<sp/>SIG_BLOCKED<sp/>);</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProcessEvent(<sp/>&amp;EV_TeamBlocked,<sp/>blockedPart,<sp/>blockingEntity<sp/>);</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>the<sp/>blocked<sp/>function<sp/>on<sp/>the<sp/>blocked<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockedPart-&gt;ProcessEvent(<sp/>&amp;EV_PartBlocked,<sp/>blockingEntity<sp/>);</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"></highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>pushed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gameLocal.push.GetNumPushedEntities();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>=<sp/>gameLocal.push.GetPushedEntity(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;physics-&gt;SetPushed(<sp/>endTime<sp/>-<sp/>startTime<sp/>);</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"></highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.isClient<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"></highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>post<sp/>reached<sp/>event<sp/>if<sp/>the<sp/>current<sp/>time<sp/>is<sp/>at<sp/>or<sp/>past<sp/>the<sp/>end<sp/>point<sp/>of<sp/>the<sp/>motion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>part<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>part<sp/>!=<sp/>NULL;<sp/>part<sp/>=<sp/>part-&gt;teamChain<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"></highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>part-&gt;physics<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reachedTime<sp/>=<sp/>part-&gt;physics-&gt;GetLinearEndTime();</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>startTime<sp/>&lt;<sp/>reachedTime<sp/>&amp;&amp;<sp/>endTime<sp/>&gt;=<sp/>reachedTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part-&gt;ProcessEvent(<sp/>&amp;EV_ReachedPos<sp/>);</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reachedTime<sp/>=<sp/>part-&gt;physics-&gt;GetAngularEndTime();</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>startTime<sp/>&lt;<sp/>reachedTime<sp/>&amp;&amp;<sp/>endTime<sp/>&gt;=<sp/>reachedTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part-&gt;ProcessEvent(<sp/>&amp;EV_ReachedAng<sp/>);</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"></highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"></highlight></codeline>
<codeline lineno="2754"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2755"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2756"><highlight class="comment">idEntity::UpdateFromPhysics</highlight></codeline>
<codeline lineno="2757"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2758"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2759"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::UpdateFromPhysics(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>moveBack<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"></highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>IsType(<sp/>idActor::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_actor" kindref="compound">idActor</ref><sp/>*actor<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_actor" kindref="compound">idActor</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>this<sp/>);</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"></highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>master<sp/>delta<sp/>angles<sp/>for<sp/>actors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>GetBindMaster()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_angles" kindref="compound">idAngles</ref><sp/>delta<sp/>=<sp/>actor-&gt;GetDeltaViewAngles();</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>moveBack<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta.yaw<sp/>-=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_physics___actor" kindref="compound">idPhysics_Actor</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(physics)-&gt;GetMasterDeltaYaw();</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta.yaw<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_physics___actor" kindref="compound">idPhysics_Actor</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(physics)-&gt;GetMasterDeltaYaw();</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actor-&gt;SetDeltaViewAngles(<sp/>delta<sp/>);</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"></highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateVisuals();</highlight></codeline>
<codeline lineno="2777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"></highlight></codeline>
<codeline lineno="2779"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2780"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2781"><highlight class="comment">idEntity::SetOrigin</highlight></codeline>
<codeline lineno="2782"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2783"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::SetOrigin(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;org<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"></highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/>GetPhysics()-&gt;SetOrigin(<sp/>org<sp/>);</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"></highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateVisuals();</highlight></codeline>
<codeline lineno="2789"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"></highlight></codeline>
<codeline lineno="2791"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2792"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2793"><highlight class="comment">idEntity::SetAxis</highlight></codeline>
<codeline lineno="2794"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2795"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2796"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::SetAxis(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>&amp;axis<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"></highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>GetPhysics()-&gt;IsType(<sp/>idPhysics_Actor::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_actor" kindref="compound">idActor</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;viewAxis<sp/>=<sp/>axis;</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetPhysics()-&gt;SetAxis(<sp/>axis<sp/>);</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"></highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateVisuals();</highlight></codeline>
<codeline lineno="2805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"></highlight></codeline>
<codeline lineno="2807"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2808"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2809"><highlight class="comment">idEntity::SetAngles</highlight></codeline>
<codeline lineno="2810"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2811"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2812"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::SetAngles(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_angles" kindref="compound">idAngles</ref><sp/>&amp;ang<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/>SetAxis(<sp/>ang.ToMat3()<sp/>);</highlight></codeline>
<codeline lineno="2814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"></highlight></codeline>
<codeline lineno="2816"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2817"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2818"><highlight class="comment">idEntity::GetFloorPos</highlight></codeline>
<codeline lineno="2819"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2820"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::GetFloorPos(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max_dist,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;floorpos<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtrace__s" kindref="compound">trace_t</ref><sp/>result;</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"></highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!GetPhysics()-&gt;HasGroundContacts()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetPhysics()-&gt;ClipTranslation(<sp/>result,<sp/>GetPhysics()-&gt;GetGravityNormal()<sp/>*<sp/>max_dist,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>result.fraction<sp/>&lt;<sp/>1.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>floorpos<sp/>=<sp/>result.endpos;</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>floorpos<sp/>=<sp/>GetPhysics()-&gt;GetOrigin();</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>floorpos<sp/>=<sp/>GetPhysics()-&gt;GetOrigin();</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"></highlight></codeline>
<codeline lineno="2839"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2840"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2841"><highlight class="comment">idEntity::GetPhysicsToVisualTransform</highlight></codeline>
<codeline lineno="2842"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2843"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2844"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::GetPhysicsToVisualTransform(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;origin,<sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>&amp;axis<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2846"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"></highlight></codeline>
<codeline lineno="2848"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2849"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2850"><highlight class="comment">idEntity::GetPhysicsToSoundTransform</highlight></codeline>
<codeline lineno="2851"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2852"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2853"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::GetPhysicsToSoundTransform(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;origin,<sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>&amp;axis<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>default<sp/>play<sp/>the<sp/>sound<sp/>at<sp/>the<sp/>center<sp/>of<sp/>the<sp/>bounding<sp/>box<sp/>of<sp/>the<sp/>first<sp/>clip<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>GetPhysics()-&gt;GetNumClipModels()<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>origin<sp/>=<sp/>GetPhysics()-&gt;GetBounds().GetCenter();</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis.Identity();</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"></highlight></codeline>
<codeline lineno="2863"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2864"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2865"><highlight class="comment">idEntity::Collide</highlight></codeline>
<codeline lineno="2866"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2867"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2868"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::Collide(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtrace__s" kindref="compound">trace_t</ref><sp/>&amp;collision,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;velocity<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>entity<sp/>collides<sp/>with<sp/>collision.c.entityNum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"></highlight></codeline>
<codeline lineno="2873"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2874"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2875"><highlight class="comment">idEntity::GetImpactInfo</highlight></codeline>
<codeline lineno="2876"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2877"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2878"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::GetImpactInfo(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;point,<sp/><ref refid="structimpact_info__s" kindref="compound">impactInfo_t</ref><sp/>*info<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/>GetPhysics()-&gt;GetImpactInfo(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>point,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="2880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"></highlight></codeline>
<codeline lineno="2882"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2883"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2884"><highlight class="comment">idEntity::ApplyImpulse</highlight></codeline>
<codeline lineno="2885"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2886"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2887"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::ApplyImpulse(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;point,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;impulse<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/>GetPhysics()-&gt;ApplyImpulse(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>point,<sp/>impulse<sp/>);</highlight></codeline>
<codeline lineno="2889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"></highlight></codeline>
<codeline lineno="2891"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2892"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2893"><highlight class="comment">idEntity::AddForce</highlight></codeline>
<codeline lineno="2894"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2895"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2896"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::AddForce(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;point,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;force<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/>GetPhysics()-&gt;AddForce(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>point,<sp/>force<sp/>);</highlight></codeline>
<codeline lineno="2898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"></highlight></codeline>
<codeline lineno="2900"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2901"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2902"><highlight class="comment">idEntity::ActivatePhysics</highlight></codeline>
<codeline lineno="2903"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2904"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2905"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::ActivatePhysics(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/>GetPhysics()-&gt;Activate();</highlight></codeline>
<codeline lineno="2907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"></highlight></codeline>
<codeline lineno="2909"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2910"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2911"><highlight class="comment">idEntity::IsAtRest</highlight></codeline>
<codeline lineno="2912"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2913"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2914"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::IsAtRest(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetPhysics()-&gt;IsAtRest();</highlight></codeline>
<codeline lineno="2916"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"></highlight></codeline>
<codeline lineno="2918"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2919"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2920"><highlight class="comment">idEntity::GetRestStartTime</highlight></codeline>
<codeline lineno="2921"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2922"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2923"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idEntity::GetRestStartTime(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetPhysics()-&gt;GetRestStartTime();</highlight></codeline>
<codeline lineno="2925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"></highlight></codeline>
<codeline lineno="2927"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2928"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2929"><highlight class="comment">idEntity::AddContactEntity</highlight></codeline>
<codeline lineno="2930"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2931"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2932"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::AddContactEntity(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/>GetPhysics()-&gt;AddContactEntity(<sp/>ent<sp/>);</highlight></codeline>
<codeline lineno="2934"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"></highlight></codeline>
<codeline lineno="2936"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2937"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2938"><highlight class="comment">idEntity::RemoveContactEntity</highlight></codeline>
<codeline lineno="2939"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2940"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::RemoveContactEntity(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/>GetPhysics()-&gt;RemoveContactEntity(<sp/>ent<sp/>);</highlight></codeline>
<codeline lineno="2943"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"></highlight></codeline>
<codeline lineno="2945"><highlight class="normal"></highlight></codeline>
<codeline lineno="2946"><highlight class="normal"></highlight></codeline>
<codeline lineno="2947"><highlight class="normal"></highlight><highlight class="comment">/***********************************************************************</highlight></codeline>
<codeline lineno="2948"><highlight class="comment"></highlight></codeline>
<codeline lineno="2949"><highlight class="comment"><sp/><sp/><sp/><sp/>Damage</highlight></codeline>
<codeline lineno="2950"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2951"><highlight class="comment">***********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2952"><highlight class="normal"></highlight></codeline>
<codeline lineno="2953"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2954"><highlight class="comment">============</highlight></codeline>
<codeline lineno="2955"><highlight class="comment">idEntity::CanDamage</highlight></codeline>
<codeline lineno="2956"><highlight class="comment"></highlight></codeline>
<codeline lineno="2957"><highlight class="comment">Returns<sp/>true<sp/>if<sp/>the<sp/>inflictor<sp/>can<sp/>directly<sp/>damage<sp/>the<sp/>target.<sp/><sp/>Used<sp/>for</highlight></codeline>
<codeline lineno="2958"><highlight class="comment">explosions<sp/>and<sp/>melee<sp/>attacks.</highlight></codeline>
<codeline lineno="2959"><highlight class="comment">============</highlight></codeline>
<codeline lineno="2960"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2961"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::CanDamage(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;origin,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;damagePoint<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>dest;</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtrace__s" kindref="compound">trace_t</ref><sp/>tr;</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>midpoint;</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"></highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>the<sp/>midpoint<sp/>of<sp/>the<sp/>bounds<sp/>instead<sp/>of<sp/>the<sp/>origin,<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bmodels<sp/>may<sp/>have<sp/>their<sp/>origin<sp/>at<sp/>0,0,0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/>midpoint<sp/>=<sp/>(<sp/>GetPhysics()-&gt;GetAbsBounds()[0]<sp/>+<sp/>GetPhysics()-&gt;GetAbsBounds()[1]<sp/>)<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"></highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/>dest<sp/>=<sp/>midpoint;</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.clip.TracePoint(<sp/>tr,<sp/>origin,<sp/>dest,<sp/>MASK_SOLID,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tr.fraction<sp/>==<sp/>1.0<sp/>||<sp/>(<sp/>gameLocal.GetTraceEntity(<sp/>tr<sp/>)<sp/>==<sp/>this<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>damagePoint<sp/>=<sp/>tr.endpos;</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"></highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>should<sp/>probably<sp/>check<sp/>in<sp/>the<sp/>plane<sp/>of<sp/>projection,<sp/>rather<sp/>than<sp/>in<sp/>world<sp/>coordinate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/>dest<sp/>=<sp/>midpoint;</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/>dest[0]<sp/>+=<sp/>15.0;</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/>dest[1]<sp/>+=<sp/>15.0;</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.clip.TracePoint(<sp/>tr,<sp/>origin,<sp/>dest,<sp/>MASK_SOLID,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tr.fraction<sp/>==<sp/>1.0<sp/>||<sp/>(<sp/>gameLocal.GetTraceEntity(<sp/>tr<sp/>)<sp/>==<sp/>this<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>damagePoint<sp/>=<sp/>tr.endpos;</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"></highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/>dest<sp/>=<sp/>midpoint;</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/>dest[0]<sp/>+=<sp/>15.0;</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/>dest[1]<sp/>-=<sp/>15.0;</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.clip.TracePoint(<sp/>tr,<sp/>origin,<sp/>dest,<sp/>MASK_SOLID,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tr.fraction<sp/>==<sp/>1.0<sp/>||<sp/>(<sp/>gameLocal.GetTraceEntity(<sp/>tr<sp/>)<sp/>==<sp/>this<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>damagePoint<sp/>=<sp/>tr.endpos;</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"></highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/>dest<sp/>=<sp/>midpoint;</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/>dest[0]<sp/>-=<sp/>15.0;</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/>dest[1]<sp/>+=<sp/>15.0;</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.clip.TracePoint(<sp/>tr,<sp/>origin,<sp/>dest,<sp/>MASK_SOLID,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tr.fraction<sp/>==<sp/>1.0<sp/>||<sp/>(<sp/>gameLocal.GetTraceEntity(<sp/>tr<sp/>)<sp/>==<sp/>this<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>damagePoint<sp/>=<sp/>tr.endpos;</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"></highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/>dest<sp/>=<sp/>midpoint;</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/>dest[0]<sp/>-=<sp/>15.0;</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/>dest[1]<sp/>-=<sp/>15.0;</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.clip.TracePoint(<sp/>tr,<sp/>origin,<sp/>dest,<sp/>MASK_SOLID,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tr.fraction<sp/>==<sp/>1.0<sp/>||<sp/>(<sp/>gameLocal.GetTraceEntity(<sp/>tr<sp/>)<sp/>==<sp/>this<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>damagePoint<sp/>=<sp/>tr.endpos;</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"></highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/>dest<sp/>=<sp/>midpoint;</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/>dest[2]<sp/>+=<sp/>15.0;</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.clip.TracePoint(<sp/>tr,<sp/>origin,<sp/>dest,<sp/>MASK_SOLID,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tr.fraction<sp/>==<sp/>1.0<sp/>||<sp/>(<sp/>gameLocal.GetTraceEntity(<sp/>tr<sp/>)<sp/>==<sp/>this<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>damagePoint<sp/>=<sp/>tr.endpos;</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"></highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/>dest<sp/>=<sp/>midpoint;</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/>dest[2]<sp/>-=<sp/>15.0;</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.clip.TracePoint(<sp/>tr,<sp/>origin,<sp/>dest,<sp/>MASK_SOLID,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tr.fraction<sp/>==<sp/>1.0<sp/>||<sp/>(<sp/>gameLocal.GetTraceEntity(<sp/>tr<sp/>)<sp/>==<sp/>this<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>damagePoint<sp/>=<sp/>tr.endpos;</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"></highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3031"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"></highlight></codeline>
<codeline lineno="3033"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3034"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3035"><highlight class="comment">idEntity::DamageFeedback</highlight></codeline>
<codeline lineno="3036"><highlight class="comment"></highlight></codeline>
<codeline lineno="3037"><highlight class="comment">callback<sp/>function<sp/>for<sp/>when<sp/>another<sp/>entity<sp/>received<sp/>damage<sp/>from<sp/>this<sp/>entity.<sp/><sp/>damage<sp/>can<sp/>be<sp/>adjusted<sp/>and<sp/>returned<sp/>to<sp/>the<sp/>caller.</highlight></codeline>
<codeline lineno="3038"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3039"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3040"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::DamageFeedback(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*victim,<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*inflictor,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;damage<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>implemented<sp/>in<sp/>subclasses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3042"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"></highlight></codeline>
<codeline lineno="3044"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3045"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3046"><highlight class="comment">Damage</highlight></codeline>
<codeline lineno="3047"><highlight class="comment"></highlight></codeline>
<codeline lineno="3048"><highlight class="comment">this<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entity<sp/>that<sp/>is<sp/>being<sp/>damaged</highlight></codeline>
<codeline lineno="3049"><highlight class="comment">inflictor<sp/><sp/><sp/>entity<sp/>that<sp/>is<sp/>causing<sp/>the<sp/>damage</highlight></codeline>
<codeline lineno="3050"><highlight class="comment">attacker<sp/><sp/><sp/><sp/>entity<sp/>that<sp/>caused<sp/>the<sp/>inflictor<sp/>to<sp/>damage<sp/>targ</highlight></codeline>
<codeline lineno="3051"><highlight class="comment"><sp/><sp/><sp/><sp/>example:<sp/>this=monster,<sp/>inflictor=rocket,<sp/>attacker=player</highlight></codeline>
<codeline lineno="3052"><highlight class="comment"></highlight></codeline>
<codeline lineno="3053"><highlight class="comment">dir<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>direction<sp/>of<sp/>the<sp/>attack<sp/>for<sp/>knockback<sp/>in<sp/>global<sp/>space</highlight></codeline>
<codeline lineno="3054"><highlight class="comment">point<sp/><sp/><sp/><sp/><sp/><sp/><sp/>point<sp/>at<sp/>which<sp/>the<sp/>damage<sp/>is<sp/>being<sp/>inflicted,<sp/>used<sp/>for<sp/>headshots</highlight></codeline>
<codeline lineno="3055"><highlight class="comment">damage<sp/><sp/><sp/><sp/><sp/><sp/>amount<sp/>of<sp/>damage<sp/>being<sp/>inflicted</highlight></codeline>
<codeline lineno="3056"><highlight class="comment"></highlight></codeline>
<codeline lineno="3057"><highlight class="comment">inflictor,<sp/>attacker,<sp/>dir,<sp/>and<sp/>point<sp/>can<sp/>be<sp/>NULL<sp/>for<sp/>environmental<sp/>effects</highlight></codeline>
<codeline lineno="3058"><highlight class="comment"></highlight></codeline>
<codeline lineno="3059"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3060"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3061"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Damage(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*inflictor,<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*attacker,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;dir,<sp/></highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*damageDefName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>damageScale,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>location<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!fl.takedamage<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"></highlight></codeline>
<codeline lineno="3067"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="3068"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>SetTimeState<sp/>ts(<sp/>timeGroup<sp/>);</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3070"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!inflictor<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inflictor<sp/>=<sp/>gameLocal.world;</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"></highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!attacker<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attacker<sp/>=<sp/>gameLocal.world;</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"></highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>*damageDef<sp/>=<sp/>gameLocal.FindEntityDefDict(<sp/>damageDefName<sp/>);</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!damageDef<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>damageDef<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>damageDefName<sp/>);</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"></highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>damage<sp/>=<sp/>damageDef-&gt;GetInt(<sp/></highlight><highlight class="stringliteral">&quot;damage&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"></highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inform<sp/>the<sp/>attacker<sp/>that<sp/>they<sp/>hit<sp/>someone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/>attacker-&gt;DamageFeedback(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>inflictor,<sp/>damage<sp/>);</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>damage<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>the<sp/>damage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>health<sp/>-=<sp/>damage;</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>health<sp/>&lt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>health<sp/>&lt;<sp/>-999<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>health<sp/>=<sp/>-999;</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"></highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Killed(<sp/>inflictor,<sp/>attacker,<sp/>damage,<sp/>dir,<sp/>location<sp/>);</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pain(<sp/>inflictor,<sp/>attacker,<sp/>damage,<sp/>dir,<sp/>location<sp/>);</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"></highlight></codeline>
<codeline lineno="3103"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3104"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3105"><highlight class="comment">idEntity::AddDamageEffect</highlight></codeline>
<codeline lineno="3106"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3107"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3108"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::AddDamageEffect(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtrace__s" kindref="compound">trace_t</ref><sp/>&amp;collision,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;velocity,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*damageDefName<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sound,<sp/>*decal,<sp/>*key;</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"></highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_decl_entity_def" kindref="compound">idDeclEntityDef</ref><sp/>*def<sp/>=<sp/>gameLocal.FindEntityDef(<sp/>damageDefName,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>def<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*materialType<sp/>=<sp/>gameLocal.sufaceTypeNames[<sp/>collision.c.material-&gt;GetSurfaceType()<sp/>];</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"></highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>impact<sp/>sound<sp/>based<sp/>on<sp/>material<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/>key<sp/>=<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;snd_%s&quot;</highlight><highlight class="normal">,<sp/>materialType<sp/>);</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/>sound<sp/>=<sp/>spawnArgs.GetString(<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*sound<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sound<sp/>=<sp/>def-&gt;dict.GetString(<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*sound<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StartSoundShader(<sp/>declManager-&gt;FindSound(<sp/>sound<sp/>),<sp/>SND_CHANNEL_BODY,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"></highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_decals.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>place<sp/>a<sp/>wound<sp/>overlay<sp/>on<sp/>the<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;mtr_wound_%s&quot;</highlight><highlight class="normal">,<sp/>materialType<sp/>);</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decal<sp/>=<sp/>spawnArgs.RandomPrefix(<sp/>key,<sp/>gameLocal.random<sp/>);</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*decal<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decal<sp/>=<sp/>def-&gt;dict.RandomPrefix(<sp/>key,<sp/>gameLocal.random<sp/>);</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*decal<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>dir<sp/>=<sp/>velocity;</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir.Normalize();</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProjectOverlay(<sp/>collision.c.point,<sp/>dir,<sp/>20.0f,<sp/>decal<sp/>);</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"></highlight></codeline>
<codeline lineno="3143"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3144"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3145"><highlight class="comment">idEntity::Pain</highlight></codeline>
<codeline lineno="3146"><highlight class="comment"></highlight></codeline>
<codeline lineno="3147"><highlight class="comment">Called<sp/>whenever<sp/>an<sp/>entity<sp/>recieves<sp/>damage.<sp/><sp/>Returns<sp/>whether<sp/>the<sp/>entity<sp/>responds<sp/>to<sp/>the<sp/>pain.</highlight></codeline>
<codeline lineno="3148"><highlight class="comment">This<sp/>is<sp/>a<sp/>virtual<sp/>function<sp/>that<sp/>subclasses<sp/>are<sp/>expected<sp/>to<sp/>implement.</highlight></codeline>
<codeline lineno="3149"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3150"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3151"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::Pain(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*inflictor,<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*attacker,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>damage,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;dir,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>location<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"></highlight></codeline>
<codeline lineno="3155"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3156"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3157"><highlight class="comment">idEntity::Killed</highlight></codeline>
<codeline lineno="3158"><highlight class="comment"></highlight></codeline>
<codeline lineno="3159"><highlight class="comment">Called<sp/>whenever<sp/>an<sp/>entity&apos;s<sp/>health<sp/>is<sp/>reduced<sp/>to<sp/>0<sp/>or<sp/>less.</highlight></codeline>
<codeline lineno="3160"><highlight class="comment">This<sp/>is<sp/>a<sp/>virtual<sp/>function<sp/>that<sp/>subclasses<sp/>are<sp/>expected<sp/>to<sp/>implement.</highlight></codeline>
<codeline lineno="3161"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3162"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3163"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Killed(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*inflictor,<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*attacker,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>damage,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;dir,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>location<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"></highlight></codeline>
<codeline lineno="3166"><highlight class="normal"></highlight></codeline>
<codeline lineno="3167"><highlight class="normal"></highlight><highlight class="comment">/***********************************************************************</highlight></codeline>
<codeline lineno="3168"><highlight class="comment"></highlight></codeline>
<codeline lineno="3169"><highlight class="comment"><sp/><sp/>Script<sp/>functions</highlight></codeline>
<codeline lineno="3170"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3171"><highlight class="comment">***********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3172"><highlight class="normal"></highlight></codeline>
<codeline lineno="3173"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3174"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3175"><highlight class="comment">idEntity::ShouldConstructScriptObjectAtSpawn</highlight></codeline>
<codeline lineno="3176"><highlight class="comment"></highlight></codeline>
<codeline lineno="3177"><highlight class="comment">Called<sp/>during<sp/>idEntity::Spawn<sp/>to<sp/>see<sp/>if<sp/>it<sp/>should<sp/>construct<sp/>the<sp/>script<sp/>object<sp/>or<sp/>not.</highlight></codeline>
<codeline lineno="3178"><highlight class="comment">Overridden<sp/>by<sp/>subclasses<sp/>that<sp/>need<sp/>to<sp/>spawn<sp/>the<sp/>script<sp/>object<sp/>themselves.</highlight></codeline>
<codeline lineno="3179"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3180"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3181"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::ShouldConstructScriptObjectAtSpawn(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"></highlight></codeline>
<codeline lineno="3185"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3186"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3187"><highlight class="comment">idEntity::ConstructScriptObject</highlight></codeline>
<codeline lineno="3188"><highlight class="comment"></highlight></codeline>
<codeline lineno="3189"><highlight class="comment">Called<sp/>during<sp/>idEntity::Spawn.<sp/><sp/>Calls<sp/>the<sp/>constructor<sp/>on<sp/>the<sp/>script<sp/>object.</highlight></codeline>
<codeline lineno="3190"><highlight class="comment">Can<sp/>be<sp/>overridden<sp/>by<sp/>subclasses<sp/>when<sp/>a<sp/>thread<sp/>doesn&apos;t<sp/>need<sp/>to<sp/>be<sp/>allocated.</highlight></codeline>
<codeline lineno="3191"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3192"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><ref refid="classid_thread" kindref="compound">idThread</ref><sp/>*idEntity::ConstructScriptObject(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*thread;</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfunction__t" kindref="compound">function_t</ref><sp/>*constructor;</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"></highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>the<sp/>script<sp/>object&apos;s<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/>scriptObject.ClearObject();</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"></highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>script<sp/>object&apos;s<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/>constructor<sp/>=<sp/>scriptObject.GetConstructor();</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>constructor<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>a<sp/>thread<sp/>that<sp/>will<sp/>initialize<sp/>after<sp/>Spawn<sp/>is<sp/>done<sp/>being<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>();</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;SetThreadName(<sp/>name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;CallFunction(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>constructor,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;DelayedStart(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"></highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>out<sp/>the<sp/>object&apos;s<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/>scriptObject.ClearObject();</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"></highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>thread;</highlight></codeline>
<codeline lineno="3216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"></highlight></codeline>
<codeline lineno="3218"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3219"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3220"><highlight class="comment">idEntity::DeconstructScriptObject</highlight></codeline>
<codeline lineno="3221"><highlight class="comment"></highlight></codeline>
<codeline lineno="3222"><highlight class="comment">Called<sp/>during<sp/>idEntity::~idEntity.<sp/><sp/>Calls<sp/>the<sp/>destructor<sp/>on<sp/>the<sp/>script<sp/>object.</highlight></codeline>
<codeline lineno="3223"><highlight class="comment">Can<sp/>be<sp/>overridden<sp/>by<sp/>subclasses<sp/>when<sp/>a<sp/>thread<sp/>doesn&apos;t<sp/>need<sp/>to<sp/>be<sp/>allocated.</highlight></codeline>
<codeline lineno="3224"><highlight class="comment">Not<sp/>called<sp/>during<sp/>idGameLocal::MapShutdown.</highlight></codeline>
<codeline lineno="3225"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3226"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3227"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::DeconstructScriptObject(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*thread;</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfunction__t" kindref="compound">function_t</ref><sp/>*destructor;</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"></highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>bother<sp/>calling<sp/>the<sp/>script<sp/>object&apos;s<sp/>destructor<sp/>on<sp/>map<sp/>shutdown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.GameState()<sp/>==<sp/>GAMESTATE_SHUTDOWN<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"></highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>script<sp/>object&apos;s<sp/>destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/>destructor<sp/>=<sp/>scriptObject.GetDestructor();</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>destructor<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>a<sp/>thread<sp/>that<sp/>will<sp/>run<sp/>immediately<sp/>and<sp/>be<sp/>destroyed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>();</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;SetThreadName(<sp/>name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;CallFunction(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>destructor,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;Execute();</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>thread;</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"></highlight></codeline>
<codeline lineno="3248"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3249"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3250"><highlight class="comment">idEntity::HasSignal</highlight></codeline>
<codeline lineno="3251"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3252"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3253"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::HasSignal(<sp/>signalNum_t<sp/>signalnum<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!signals<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>(<sp/>signalnum<sp/>&gt;=<sp/>0<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>signalnum<sp/>&lt;<sp/>NUM_SIGNALS<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>signals-&gt;signal[<sp/>signalnum<sp/>].Num()<sp/>&gt;<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"></highlight></codeline>
<codeline lineno="3261"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3262"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3263"><highlight class="comment">idEntity::SetSignal</highlight></codeline>
<codeline lineno="3264"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3265"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3266"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::SetSignal(<sp/>signalNum_t<sp/>signalnum,<sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/>*thread,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfunction__t" kindref="compound">function_t</ref><sp/>*</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num;</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsignal__t" kindref="compound">signal_t</ref><sp/><sp/><sp/><sp/>sig;</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threadnum;</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"></highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>(<sp/>signalnum<sp/>&gt;=<sp/>0<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>signalnum<sp/>&lt;<sp/>NUM_SIGNALS<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"></highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!signals<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signals<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classsignal_list__t" kindref="compound">signalList_t</ref>;</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"></highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>thread<sp/>);</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/>threadnum<sp/>=<sp/>thread-&gt;GetThreadNum();</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"></highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>signals-&gt;signal[<sp/>signalnum<sp/>].Num();</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>signals-&gt;signal[<sp/>signalnum<sp/>][<sp/>i<sp/>].threadnum<sp/>==<sp/>threadnum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signals-&gt;signal[<sp/>signalnum<sp/>][<sp/>i<sp/>].function<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>num<sp/>&gt;=<sp/>MAX_SIGNAL_THREADS<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;Error(<sp/></highlight><highlight class="stringliteral">&quot;Exceeded<sp/>maximum<sp/>number<sp/>of<sp/>signals<sp/>per<sp/>object&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"></highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/>sig.threadnum<sp/>=<sp/>threadnum;</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/>sig.function<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/>signals-&gt;signal[<sp/>signalnum<sp/>].Append(<sp/>sig<sp/>);</highlight></codeline>
<codeline lineno="3296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"></highlight></codeline>
<codeline lineno="3298"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3299"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3300"><highlight class="comment">idEntity::ClearSignal</highlight></codeline>
<codeline lineno="3301"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3302"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3303"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::ClearSignal(<sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/>*thread,<sp/>signalNum_t<sp/>signalnum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>thread<sp/>);</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>signalnum<sp/>&lt;<sp/>0<sp/>)<sp/>||<sp/>(<sp/>signalnum<sp/>&gt;=<sp/>NUM_SIGNALS<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Signal<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"></highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!signals<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"></highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/>signals-&gt;signal[<sp/>signalnum<sp/>].Clear();</highlight></codeline>
<codeline lineno="3314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"></highlight></codeline>
<codeline lineno="3316"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3317"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3318"><highlight class="comment">idEntity::ClearSignalThread</highlight></codeline>
<codeline lineno="3319"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3320"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3321"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::ClearSignalThread(<sp/>signalNum_t<sp/>signalnum,<sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/>*thread<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threadnum;</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"></highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>thread<sp/>);</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"></highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>signalnum<sp/>&lt;<sp/>0<sp/>)<sp/>||<sp/>(<sp/>signalnum<sp/>&gt;=<sp/>NUM_SIGNALS<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Signal<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"></highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!signals<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"></highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/>threadnum<sp/>=<sp/>thread-&gt;GetThreadNum();</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"></highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>signals-&gt;signal[<sp/>signalnum<sp/>].Num();</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>signals-&gt;signal[<sp/>signalnum<sp/>][<sp/>i<sp/>].threadnum<sp/>==<sp/>threadnum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signals-&gt;signal[<sp/>signalnum<sp/>].RemoveIndex(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"></highlight></codeline>
<codeline lineno="3347"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3348"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3349"><highlight class="comment">idEntity::Signal</highlight></codeline>
<codeline lineno="3350"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3351"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3352"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Signal(<sp/>signalNum_t<sp/>signalnum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num;</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsignal__t" kindref="compound">signal_t</ref><sp/><sp/><sp/><sp/>sigs[<sp/>MAX_SIGNAL_THREADS<sp/>];</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/><sp/><sp/><sp/>*thread;</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"></highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>(<sp/>signalnum<sp/>&gt;=<sp/>0<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>signalnum<sp/>&lt;<sp/>NUM_SIGNALS<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"></highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!signals<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"></highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>copy<sp/>the<sp/>signal<sp/>list<sp/>since<sp/>each<sp/>thread<sp/>has<sp/>the<sp/>potential</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>end<sp/>any<sp/>of<sp/>the<sp/>threads<sp/>in<sp/>the<sp/>list.<sp/><sp/>By<sp/>copying<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>don&apos;t<sp/>have<sp/>to<sp/>worry<sp/>about<sp/>the<sp/>list<sp/>changing<sp/>as<sp/>we&apos;re</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>processing<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>signals-&gt;signal[<sp/>signalnum<sp/>].Num();</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigs[<sp/>i<sp/>]<sp/>=<sp/>signals-&gt;signal[<sp/>signalnum<sp/>][<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"></highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>out<sp/>the<sp/>signal<sp/>list<sp/>so<sp/>that<sp/>we<sp/>don&apos;t<sp/>get<sp/>into<sp/>an<sp/>infinite<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/>signals-&gt;signal[<sp/>signalnum<sp/>].Clear();</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"></highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread<sp/>=<sp/>idThread::GetThread(<sp/>sigs[<sp/>i<sp/>].threadnum<sp/>);</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>thread<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;CallFunction(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>sigs[<sp/>i<sp/>].</highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;Execute();</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"></highlight></codeline>
<codeline lineno="3385"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3386"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3387"><highlight class="comment">idEntity::SignalEvent</highlight></codeline>
<codeline lineno="3388"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3389"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3390"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::SignalEvent(<sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/>*thread,<sp/>signalNum_t<sp/>signalnum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>signalnum<sp/>&lt;<sp/>0<sp/>)<sp/>||<sp/>(<sp/>signalnum<sp/>&gt;=<sp/>NUM_SIGNALS<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Signal<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"></highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!signals<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"></highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/>Signal(<sp/>signalnum<sp/>);</highlight></codeline>
<codeline lineno="3400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"></highlight></codeline>
<codeline lineno="3402"><highlight class="normal"></highlight><highlight class="comment">/***********************************************************************</highlight></codeline>
<codeline lineno="3403"><highlight class="comment"></highlight></codeline>
<codeline lineno="3404"><highlight class="comment"><sp/><sp/>Guis.</highlight></codeline>
<codeline lineno="3405"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3406"><highlight class="comment">***********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3407"><highlight class="normal"></highlight></codeline>
<codeline lineno="3408"><highlight class="normal"></highlight></codeline>
<codeline lineno="3409"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3410"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3411"><highlight class="comment">idEntity::TriggerGuis</highlight></codeline>
<codeline lineno="3412"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3413"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3414"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::TriggerGuis(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_RENDERENTITY_GUI;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>renderEntity.gui[<sp/>i<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity.gui[<sp/>i<sp/>]-&gt;Trigger(<sp/>gameLocal.time<sp/>);</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"></highlight></codeline>
<codeline lineno="3423"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3424"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3425"><highlight class="comment">idEntity::HandleGuiCommands</highlight></codeline>
<codeline lineno="3426"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3427"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3428"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::HandleGuiCommands(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*entityGui,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cmds<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*targetEnt;</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>entityGui<sp/>&amp;&amp;<sp/>cmds<sp/>&amp;&amp;<sp/>*cmds<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_lexer" kindref="compound">idLexer</ref><sp/>src;</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_token" kindref="compound">idToken</ref><sp/>token,<sp/>token2,<sp/>token3,<sp/>token4;</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src.LoadMemory(<sp/>cmds,<sp/>strlen(<sp/>cmds<sp/>),<sp/></highlight><highlight class="stringliteral">&quot;guiCommands&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"></highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!src.ReadToken(<sp/>&amp;token<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"></highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>token<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"></highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>token.Icmp(<sp/></highlight><highlight class="stringliteral">&quot;activate&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>targets<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>src.ReadToken(<sp/>&amp;token2<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>token2<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src.UnreadToken(<sp/>&amp;token2<sp/>);</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targets<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"></highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>targets<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entityGui-&gt;ActivateTargets(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>=<sp/>gameLocal.FindEntity(<sp/>token2<sp/>);</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;Signal(<sp/>SIG_TRIGGER<sp/>);</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;PostEventMS(<sp/>&amp;EV_Activate,<sp/>0,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"></highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entityGui-&gt;renderEntity.shaderParms[<sp/>SHADERPARM_MODE<sp/>]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"></highlight></codeline>
<codeline lineno="3469"><highlight class="normal"></highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>token.Icmp(<sp/></highlight><highlight class="stringliteral">&quot;runScript&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>src.ReadToken(<sp/>&amp;token2<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>src.CheckTokenString(<sp/></highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_token" kindref="compound">idToken</ref><sp/>token3;</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!src.ReadToken(<sp/>&amp;token3<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Expecting<sp/>function<sp/>name<sp/>following<sp/>&apos;::&apos;<sp/>in<sp/>gui<sp/>for<sp/>entity<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>entityGui-&gt;name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token2<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal"><sp/>+<sp/>token3;</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfunction__t" kindref="compound">function_t</ref><sp/>*func<sp/>=<sp/>gameLocal.program.FindFunction(<sp/>token2<sp/>);</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!func<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>find<sp/>function<sp/>&apos;%s&apos;<sp/>for<sp/>gui<sp/>in<sp/>entity<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>token2.c_str(),<sp/>entityGui-&gt;name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/>*thread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>(<sp/>func<sp/>);</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;DelayedStart(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"></highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>token.Icmp(</highlight><highlight class="stringliteral">&quot;play&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>src.ReadToken(<sp/>&amp;token2<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_sound_shader" kindref="compound">idSoundShader</ref><sp/>*shader<sp/>=<sp/>declManager-&gt;FindSound(token2);</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entityGui-&gt;StartSoundShader(<sp/>shader,<sp/>SND_CHANNEL_ANY,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"></highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>token.Icmp(<sp/></highlight><highlight class="stringliteral">&quot;setkeyval&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>src.ReadToken(<sp/>&amp;token2<sp/>)<sp/>&amp;&amp;<sp/>src.ReadToken(&amp;token3)<sp/>&amp;&amp;<sp/>src.ReadToken(<sp/>&amp;token4<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>=<sp/>gameLocal.FindEntity(<sp/>token2<sp/>);</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;spawnArgs.Set(<sp/>token3,<sp/>token4<sp/>);</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;UpdateChangeableSpawnArgs(<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;UpdateVisuals();</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"></highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>token.Icmp(<sp/></highlight><highlight class="stringliteral">&quot;setshaderparm&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>src.ReadToken(<sp/>&amp;token2<sp/>)<sp/>&amp;&amp;<sp/>src.ReadToken(&amp;token3)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entityGui-&gt;SetShaderParm(<sp/>atoi(<sp/>token2<sp/>),<sp/>atof(<sp/>token3<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entityGui-&gt;UpdateVisuals();</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"></highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>token.Icmp(</highlight><highlight class="stringliteral">&quot;close&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"></highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!token.Icmp(<sp/></highlight><highlight class="stringliteral">&quot;turkeyscore&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>src.ReadToken(<sp/>&amp;token2<sp/>)<sp/>&amp;&amp;<sp/>entityGui-&gt;renderEntity.gui[0]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>score<sp/>=<sp/>entityGui-&gt;renderEntity.gui[0]-&gt;State().GetInt(<sp/></highlight><highlight class="stringliteral">&quot;score&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>score<sp/>+=<sp/>atoi(<sp/>token2<sp/>);</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entityGui-&gt;renderEntity.gui[0]-&gt;SetStateInt(<sp/></highlight><highlight class="stringliteral">&quot;score&quot;</highlight><highlight class="normal">,<sp/>score<sp/>);</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.GetLocalPlayer()<sp/>&amp;&amp;<sp/>score<sp/>&gt;=<sp/>25000<sp/>&amp;&amp;<sp/>!gameLocal.GetLocalPlayer()-&gt;inventory.turkeyScore<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.GetLocalPlayer()-&gt;GiveEmail(<sp/></highlight><highlight class="stringliteral">&quot;highScore&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.GetLocalPlayer()-&gt;inventory.turkeyScore<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"></highlight></codeline>
<codeline lineno="3536"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="3537"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!token.Icmp(<sp/></highlight><highlight class="stringliteral">&quot;martianbuddycomplete&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.GetLocalPlayer()-&gt;GiveEmail(<sp/></highlight><highlight class="stringliteral">&quot;MartianBuddyGameComplete&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"></highlight></codeline>
<codeline lineno="3543"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3544"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3545"><highlight class="normal"></highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handy<sp/>for<sp/>debugging<sp/>GUI<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!token.Icmp(<sp/></highlight><highlight class="stringliteral">&quot;print&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>msg;</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>src.ReadToken(<sp/>&amp;token2<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>token2<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src.UnreadToken(<sp/>&amp;token2<sp/>);</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>+=<sp/>token2.c_str();</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;ent<sp/>gui<sp/>0x%x<sp/>&apos;%s&apos;:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>entityNumber,<sp/>name.c_str(),<sp/>msg.c_str()<sp/>);</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"></highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>get<sp/>to<sp/>this<sp/>point<sp/>we<sp/>don&apos;t<sp/>know<sp/>how<sp/>to<sp/>handle<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src.UnreadToken(&amp;token);</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!HandleSingleGuiCommand(<sp/>entityGui,<sp/>&amp;src<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>handled<sp/>there<sp/>see<sp/>if<sp/>entity<sp/>or<sp/>any<sp/>of<sp/>its<sp/>targets<sp/>can<sp/>handle<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>only<sp/>work<sp/>for<sp/>one<sp/>target<sp/>atm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>entityGui-&gt;HandleSingleGuiCommand(<sp/>entityGui,<sp/>&amp;src<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"></highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>entityGui-&gt;targets.Num();</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>c;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targetEnt<sp/>=<sp/>entityGui-&gt;targets[<sp/>i<sp/>].GetEntity();</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>targetEnt<sp/>&amp;&amp;<sp/>targetEnt-&gt;HandleSingleGuiCommand(<sp/>entityGui,<sp/>&amp;src<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"></highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>==<sp/>c<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>handled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;idEntity::HandleGuiCommands:<sp/>&apos;%s&apos;<sp/>not<sp/>handled\n&quot;</highlight><highlight class="normal">,<sp/>token.c_str()<sp/>);</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src.ReadToken(<sp/>&amp;token<sp/>);</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"></highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="3588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"></highlight></codeline>
<codeline lineno="3590"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3591"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3592"><highlight class="comment">idEntity::HandleSingleGuiCommand</highlight></codeline>
<codeline lineno="3593"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3594"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3595"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::HandleSingleGuiCommand(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*entityGui,<sp/><ref refid="classid_lexer" kindref="compound">idLexer</ref><sp/>*src<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"></highlight></codeline>
<codeline lineno="3599"><highlight class="normal"></highlight><highlight class="comment">/***********************************************************************</highlight></codeline>
<codeline lineno="3600"><highlight class="comment"></highlight></codeline>
<codeline lineno="3601"><highlight class="comment"><sp/><sp/>Targets</highlight></codeline>
<codeline lineno="3602"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3603"><highlight class="comment">***********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3604"><highlight class="normal"></highlight></codeline>
<codeline lineno="3605"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3606"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="3607"><highlight class="comment">idEntity::FindTargets</highlight></codeline>
<codeline lineno="3608"><highlight class="comment"></highlight></codeline>
<codeline lineno="3609"><highlight class="comment">We<sp/>have<sp/>to<sp/>wait<sp/>until<sp/>all<sp/>entities<sp/>are<sp/>spawned</highlight></codeline>
<codeline lineno="3610"><highlight class="comment">Used<sp/>to<sp/>build<sp/>lists<sp/>of<sp/>targets<sp/>after<sp/>the<sp/>entity<sp/>is<sp/>spawned.<sp/><sp/>Since<sp/>not<sp/>all<sp/>entities</highlight></codeline>
<codeline lineno="3611"><highlight class="comment">have<sp/>been<sp/>spawned<sp/>when<sp/>the<sp/>entity<sp/>is<sp/>created<sp/>at<sp/>map<sp/>load<sp/>time,<sp/>we<sp/>have<sp/>to<sp/>wait</highlight></codeline>
<codeline lineno="3612"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="3613"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3614"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::FindTargets(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"></highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>targets<sp/>can<sp/>be<sp/>a<sp/>list<sp/>of<sp/>multiple<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.GetTargets(<sp/>spawnArgs,<sp/>targets,<sp/></highlight><highlight class="stringliteral">&quot;target&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"></highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>that<sp/>we<sp/>don&apos;t<sp/>target<sp/>ourselves<sp/>since<sp/>that<sp/>could<sp/>cause<sp/>an<sp/>infinite<sp/>loop<sp/>when<sp/>activating<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>targets.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>targets[<sp/>i<sp/>].GetEntity()<sp/>==<sp/>this<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Entity<sp/>&apos;%s&apos;<sp/>is<sp/>targeting<sp/>itself&quot;</highlight><highlight class="normal">,<sp/>name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3629"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3630"><highlight class="comment">idEntity::RemoveNullTargets</highlight></codeline>
<codeline lineno="3631"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3632"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3633"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::RemoveNullTargets(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"></highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>targets.Num()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!targets[<sp/>i<sp/>].GetEntity()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targets.RemoveIndex(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"></highlight></codeline>
<codeline lineno="3643"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3644"><highlight class="comment">==============================</highlight></codeline>
<codeline lineno="3645"><highlight class="comment">idEntity::ActivateTargets</highlight></codeline>
<codeline lineno="3646"><highlight class="comment"></highlight></codeline>
<codeline lineno="3647"><highlight class="comment">&quot;activator&quot;<sp/>should<sp/>be<sp/>set<sp/>to<sp/>the<sp/>entity<sp/>that<sp/>initiated<sp/>the<sp/>firing.</highlight></codeline>
<codeline lineno="3648"><highlight class="comment">==============================</highlight></codeline>
<codeline lineno="3649"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3650"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::ActivateTargets(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*activator<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/><sp/><sp/><sp/>*ent;</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>targets.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>targets[<sp/>i<sp/>].GetEntity();</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent-&gt;RespondsTo(<sp/>EV_Activate<sp/>)<sp/>||<sp/>ent-&gt;HasSignal(<sp/>SIG_TRIGGER<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;Signal(<sp/>SIG_TRIGGER<sp/>);</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;ProcessEvent(<sp/>&amp;EV_Activate,<sp/>activator<sp/>);</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>MAX_RENDERENTITY_GUI;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent-&gt;renderEntity.gui[<sp/>j<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;renderEntity.gui[<sp/>j<sp/>]-&gt;Trigger(<sp/>gameLocal.time<sp/>);</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"></highlight></codeline>
<codeline lineno="3671"><highlight class="normal"></highlight><highlight class="comment">/***********************************************************************</highlight></codeline>
<codeline lineno="3672"><highlight class="comment"></highlight></codeline>
<codeline lineno="3673"><highlight class="comment"><sp/><sp/>Misc.</highlight></codeline>
<codeline lineno="3674"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3675"><highlight class="comment">***********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3676"><highlight class="normal"></highlight></codeline>
<codeline lineno="3677"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3678"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3679"><highlight class="comment">idEntity::Teleport</highlight></codeline>
<codeline lineno="3680"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3681"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3682"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Teleport(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;origin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_angles" kindref="compound">idAngles</ref><sp/>&amp;angles,<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*destination<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/>GetPhysics()-&gt;SetOrigin(<sp/>origin<sp/>);</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/>GetPhysics()-&gt;SetAxis(<sp/>angles.ToMat3()<sp/>);</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"></highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateVisuals();</highlight></codeline>
<codeline lineno="3687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"></highlight></codeline>
<codeline lineno="3689"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3690"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3691"><highlight class="comment">idEntity::TouchTriggers</highlight></codeline>
<codeline lineno="3692"><highlight class="comment"></highlight></codeline>
<codeline lineno="3693"><highlight class="comment"><sp/><sp/>Activate<sp/>all<sp/>trigger<sp/>entities<sp/>touched<sp/>at<sp/>the<sp/>current<sp/>position.</highlight></codeline>
<codeline lineno="3694"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3695"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3696"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::TouchTriggers(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>numClipModels,<sp/>numEntities;</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref><sp/>*<sp/><sp/><sp/>cm;</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref><sp/>*<sp/><sp/><sp/>clipModels[<sp/>MAX_GENTITIES<sp/>];</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>ent;</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtrace__s" kindref="compound">trace_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trace;</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"></highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>&amp;trace,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>trace<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/>trace.endpos<sp/>=<sp/>GetPhysics()-&gt;GetOrigin();</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/>trace.endAxis<sp/>=<sp/>GetPhysics()-&gt;GetAxis();</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"></highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/>numClipModels<sp/>=<sp/>gameLocal.clip.ClipModelsTouchingBounds(<sp/>GetPhysics()-&gt;GetAbsBounds(),<sp/>CONTENTS_TRIGGER,<sp/>clipModels,<sp/>MAX_GENTITIES<sp/>);</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/>numEntities<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"></highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numClipModels;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cm<sp/>=<sp/>clipModels[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"></highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>touch<sp/>it<sp/>if<sp/>we&apos;re<sp/>the<sp/>owner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cm-&gt;GetOwner()<sp/>==<sp/>this<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"></highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>cm-&gt;GetEntity();</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"></highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ent-&gt;RespondsTo(<sp/>EV_Touch<sp/>)<sp/>&amp;&amp;<sp/>!ent-&gt;HasSignal(<sp/>SIG_TOUCH<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"></highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!GetPhysics()-&gt;ClipContents(<sp/>cm<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"></highlight></codeline>
<codeline lineno="3728"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="3729"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetTimeState<sp/>ts(<sp/>ent-&gt;timeGroup<sp/>);</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3731"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numEntities++;</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"></highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trace.c.contents<sp/>=<sp/>cm-&gt;GetContents();</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trace.c.entityNum<sp/>=<sp/>cm-&gt;GetEntity()-&gt;entityNumber;</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trace.c.id<sp/>=<sp/>cm-&gt;GetId();</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"></highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;Signal(<sp/>SIG_TOUCH<sp/>);</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;ProcessEvent(<sp/>&amp;EV_Touch,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;trace<sp/>);</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"></highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!gameLocal.entities[<sp/>entityNumber<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;entity<sp/>was<sp/>removed<sp/>while<sp/>touching<sp/>triggers\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"></highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>numEntities<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3748"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"></highlight></codeline>
<codeline lineno="3750"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3751"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3752"><highlight class="comment">idEntity::GetSpline</highlight></codeline>
<codeline lineno="3753"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3754"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><ref refid="classid_curve___spline" kindref="compound">idCurve_Spline&lt;idVec3&gt;</ref><sp/>*idEntity::GetSpline(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>numPoints,<sp/>t;</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_key_value" kindref="compound">idKeyValue</ref><sp/>*kv;</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_lexer" kindref="compound">idLexer</ref><sp/>lex;</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>v;</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_curve___spline" kindref="compound">idCurve_Spline&lt;idVec3&gt;</ref><sp/>*spline;</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*curveTag<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;curve_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"></highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>spawnArgs.MatchPrefix(<sp/>curveTag<sp/>);</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!kv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"></highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>str<sp/>=<sp/>kv-&gt;GetKey().Right(<sp/>kv-&gt;GetKey().Length()<sp/>-<sp/>strlen(<sp/>curveTag<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>str.Icmp(<sp/></highlight><highlight class="stringliteral">&quot;CatmullRomSpline&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spline<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_curve___catmull_rom_spline" kindref="compound">idCurve_CatmullRomSpline&lt;idVec3&gt;</ref>();</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>str.Icmp(<sp/></highlight><highlight class="stringliteral">&quot;nubs&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spline<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_curve___non_uniform_b_spline" kindref="compound">idCurve_NonUniformBSpline&lt;idVec3&gt;</ref>();</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>str.Icmp(<sp/></highlight><highlight class="stringliteral">&quot;nurbs&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spline<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_curve___n_u_r_b_s" kindref="compound">idCurve_NURBS&lt;idVec3&gt;</ref>();</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spline<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_curve___b_spline" kindref="compound">idCurve_BSpline&lt;idVec3&gt;</ref>();</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"></highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/>spline-&gt;SetBoundaryType(<sp/><ref refid="classid_curve___spline" kindref="compound">idCurve_Spline&lt;idVec3&gt;::BT_CLAMPED</ref><sp/>);</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"></highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/>lex.LoadMemory(<sp/>kv-&gt;GetValue(),<sp/>kv-&gt;GetValue().Length(),<sp/>curveTag<sp/>);</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/><sp/>numPoints<sp/>=<sp/>lex.ParseInt();</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/>lex.ExpectTokenString(<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>t<sp/>=<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numPoints;<sp/>i++,<sp/>t<sp/>+=<sp/>100<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.x<sp/>=<sp/>lex.ParseFloat();</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.y<sp/>=<sp/>lex.ParseFloat();</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.z<sp/>=<sp/>lex.ParseFloat();</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spline-&gt;AddValue(<sp/>t,<sp/>v<sp/>);</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/>lex.ExpectTokenString(<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"></highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spline;</highlight></codeline>
<codeline lineno="3793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"></highlight></codeline>
<codeline lineno="3795"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3796"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="3797"><highlight class="comment">idEntity::ShowEditingDialog</highlight></codeline>
<codeline lineno="3798"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="3799"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3800"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::ShowEditingDialog(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"></highlight></codeline>
<codeline lineno="3803"><highlight class="normal"></highlight><highlight class="comment">/***********************************************************************</highlight></codeline>
<codeline lineno="3804"><highlight class="comment"></highlight></codeline>
<codeline lineno="3805"><highlight class="comment"><sp/><sp/><sp/>Events</highlight></codeline>
<codeline lineno="3806"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3807"><highlight class="comment">***********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3808"><highlight class="normal"></highlight></codeline>
<codeline lineno="3809"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3810"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3811"><highlight class="comment">idEntity::Event_GetName</highlight></codeline>
<codeline lineno="3812"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3813"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3814"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_GetName(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnString(<sp/>name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="3816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"></highlight></codeline>
<codeline lineno="3818"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3819"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3820"><highlight class="comment">idEntity::Event_SetName</highlight></codeline>
<codeline lineno="3821"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3822"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3823"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_SetName(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*newname<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/><sp/><sp/>SetName(<sp/>newname<sp/>);</highlight></codeline>
<codeline lineno="3825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"></highlight></codeline>
<codeline lineno="3827"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3828"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="3829"><highlight class="comment">idEntity::Event_FindTargets</highlight></codeline>
<codeline lineno="3830"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="3831"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3832"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_FindTargets(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/>FindTargets();</highlight></codeline>
<codeline lineno="3834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"></highlight></codeline>
<codeline lineno="3836"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3837"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3838"><highlight class="comment">idEntity::Event_ActivateTargets</highlight></codeline>
<codeline lineno="3839"><highlight class="comment"></highlight></codeline>
<codeline lineno="3840"><highlight class="comment">Activates<sp/>any<sp/>entities<sp/>targeted<sp/>by<sp/>this<sp/>entity.<sp/><sp/>Mainly<sp/>used<sp/>as<sp/>an</highlight></codeline>
<codeline lineno="3841"><highlight class="comment">event<sp/>to<sp/>delay<sp/>activating<sp/>targets.</highlight></codeline>
<codeline lineno="3842"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3843"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3844"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_ActivateTargets(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*activator<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/>ActivateTargets(<sp/>activator<sp/>);</highlight></codeline>
<codeline lineno="3846"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"></highlight></codeline>
<codeline lineno="3848"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3849"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3850"><highlight class="comment">idEntity::Event_NumTargets</highlight></codeline>
<codeline lineno="3851"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3852"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3853"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_NumTargets(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnFloat(<sp/>targets.Num()<sp/>);</highlight></codeline>
<codeline lineno="3855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"></highlight></codeline>
<codeline lineno="3857"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3858"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3859"><highlight class="comment">idEntity::Event_GetTarget</highlight></codeline>
<codeline lineno="3860"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3861"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3862"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_GetTarget(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>index<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"></highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>(<sp/>int<sp/>)index;</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>i<sp/>&lt;<sp/>0<sp/>)<sp/>||<sp/>i<sp/>&gt;=<sp/>targets.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::ReturnEntity(<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::ReturnEntity(<sp/>targets[<sp/>i<sp/>].GetEntity()<sp/>);</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"></highlight></codeline>
<codeline lineno="3873"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3874"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3875"><highlight class="comment">idEntity::Event_RandomTarget</highlight></codeline>
<codeline lineno="3876"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3877"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3878"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_RandomTarget(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ignore<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num;</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/><sp/><sp/><sp/>*ent;</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ignoreNum;</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"></highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/>RemoveNullTargets();</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!targets.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::ReturnEntity(<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"></highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/><sp/>ignoreNum<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ignore<sp/>&amp;&amp;<sp/>(<sp/>ignore[<sp/>0<sp/>]<sp/>!=<sp/>0<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>targets.Num()<sp/>&gt;<sp/>1<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>targets.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>targets[<sp/>i<sp/>].GetEntity();</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>&amp;&amp;<sp/>(<sp/>ent-&gt;name<sp/>==<sp/>ignore<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ignoreNum<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"></highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ignoreNum<sp/>&gt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>gameLocal.random.RandomInt(<sp/>targets.Num()<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>num<sp/>&gt;=<sp/>ignoreNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>gameLocal.random.RandomInt(<sp/>targets.Num()<sp/>);</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"></highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>targets[<sp/>num<sp/>].GetEntity();</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnEntity(<sp/>ent<sp/>);</highlight></codeline>
<codeline lineno="3912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"></highlight></codeline>
<codeline lineno="3914"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3915"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3916"><highlight class="comment">idEntity::Event_BindToJoint</highlight></codeline>
<codeline lineno="3917"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3918"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3919"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_BindToJoint(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*master,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*jointname,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>orientated<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/>BindToJoint(<sp/>master,<sp/>jointname,<sp/>(<sp/>orientated<sp/>!=<sp/>0.0f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3921"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"></highlight></codeline>
<codeline lineno="3923"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3924"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3925"><highlight class="comment">idEntity::Event_RemoveBinds</highlight></codeline>
<codeline lineno="3926"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3927"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3928"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_RemoveBinds(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/>RemoveBinds();</highlight></codeline>
<codeline lineno="3930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"></highlight></codeline>
<codeline lineno="3932"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3933"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3934"><highlight class="comment">idEntity::Event_Bind</highlight></codeline>
<codeline lineno="3935"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3936"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3937"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_Bind(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/><sp/><sp/>Bind(<sp/>master,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"></highlight></codeline>
<codeline lineno="3941"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3942"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3943"><highlight class="comment">idEntity::Event_BindPosition</highlight></codeline>
<codeline lineno="3944"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3945"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3946"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_BindPosition(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/><sp/><sp/>Bind(<sp/>master,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3948"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"></highlight></codeline>
<codeline lineno="3950"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3951"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3952"><highlight class="comment">idEntity::Event_Unbind</highlight></codeline>
<codeline lineno="3953"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3954"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3955"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_Unbind(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/>Unbind();</highlight></codeline>
<codeline lineno="3957"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"></highlight></codeline>
<codeline lineno="3959"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3960"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3961"><highlight class="comment">idEntity::Event_SpawnBind</highlight></codeline>
<codeline lineno="3962"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3963"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3964"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_SpawnBind(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*parent;</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*bind,<sp/>*joint,<sp/>*bindanim;</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/>jointHandle_t<sp/><sp/><sp/>bindJoint;</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bindOrientated;</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id;</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_anim" kindref="compound">idAnim</ref><sp/><sp/><sp/><sp/>*anim;</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>animNum;</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_animator" kindref="compound">idAnimator</ref><sp/><sp/><sp/><sp/><sp/><sp/>*parentAnimator;</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;bind&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>&amp;bind<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idStr::Icmp(<sp/>bind,<sp/></highlight><highlight class="stringliteral">&quot;worldspawn&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//FIXME:<sp/>Completely<sp/>unneccessary<sp/>since<sp/>the<sp/>worldspawn<sp/>is<sp/>called<sp/>&quot;world&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent<sp/>=<sp/>gameLocal.world;</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent<sp/>=<sp/>gameLocal.FindEntity(<sp/>bind<sp/>);</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bindOrientated<sp/>=<sp/>spawnArgs.GetBool(<sp/></highlight><highlight class="stringliteral">&quot;bindOrientated&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>parent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bind<sp/>to<sp/>a<sp/>joint<sp/>of<sp/>the<sp/>skeletal<sp/>model<sp/>of<sp/>the<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;bindToJoint&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>&amp;joint<sp/>)<sp/>&amp;&amp;<sp/>*joint<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parentAnimator<sp/>=<sp/>parent-&gt;GetAnimator();</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!parentAnimator<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>bind<sp/>to<sp/>joint<sp/>&apos;%s&apos;<sp/>on<sp/>&apos;%s&apos;.<sp/><sp/>Entity<sp/>does<sp/>not<sp/>support<sp/>skeletal<sp/>models.&quot;</highlight><highlight class="normal">,<sp/>joint,<sp/>name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bindJoint<sp/>=<sp/>parentAnimator-&gt;GetJointHandle(<sp/>joint<sp/>);</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bindJoint<sp/>==<sp/>INVALID_JOINT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Joint<sp/>&apos;%s&apos;<sp/>not<sp/>found<sp/>for<sp/>bind<sp/>on<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>joint,<sp/>name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"></highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bind<sp/>it<sp/>relative<sp/>to<sp/>a<sp/>specific<sp/>anim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>parent-&gt;spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;bindanim&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>&amp;bindanim<sp/>)<sp/>||<sp/>parent-&gt;spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;anim&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>&amp;bindanim<sp/>)<sp/>)<sp/>&amp;&amp;<sp/>*bindanim<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>animNum<sp/>=<sp/>parentAnimator-&gt;GetAnim(<sp/>bindanim<sp/>);</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!animNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Anim<sp/>&apos;%s&apos;<sp/>not<sp/>found<sp/>for<sp/>bind<sp/>on<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>bindanim,<sp/>name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anim<sp/>=<sp/>parentAnimator-&gt;GetAnim(<sp/>animNum<sp/>);</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!anim<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Anim<sp/>&apos;%s&apos;<sp/>not<sp/>found<sp/>for<sp/>bind<sp/>on<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>bindanim,<sp/>name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"></highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>parent&apos;s<sp/>render<sp/>origin<sp/>has<sp/>been<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent-&gt;UpdateModelTransform();</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"></highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//FIXME:<sp/>need<sp/>a<sp/>BindToJoint<sp/>that<sp/>accepts<sp/>a<sp/>joint<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parentAnimator-&gt;CreateFrame(<sp/>gameLocal.time,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_joint_mat" kindref="compound">idJointMat</ref><sp/>*frame<sp/>=<sp/>parent-&gt;renderEntity.joints;</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameEdit-&gt;ANIM_CreateAnimFrame(<sp/>parentAnimator-&gt;ModelHandle(),<sp/>anim-&gt;MD5Anim(<sp/>0<sp/>),<sp/>parent-&gt;renderEntity.numJoints,<sp/>frame,<sp/>0,<sp/>parentAnimator-&gt;ModelDef()-&gt;GetVisualOffset(),<sp/>parentAnimator-&gt;RemoveOrigin()<sp/>);</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BindToJoint(<sp/>parent,<sp/>joint,<sp/>bindOrientated<sp/>);</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parentAnimator-&gt;ForceUpdate();</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BindToJoint(<sp/>parent,<sp/>joint,<sp/>bindOrientated<sp/>);</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bind<sp/>to<sp/>a<sp/>body<sp/>of<sp/>the<sp/>physics<sp/>object<sp/>of<sp/>the<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>spawnArgs.GetInt(<sp/></highlight><highlight class="stringliteral">&quot;bindToBody&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BindToBody(<sp/>parent,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>bindOrientated<sp/>);</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bind<sp/>to<sp/>the<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bind(<sp/>parent,<sp/>bindOrientated<sp/>);</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4028"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"></highlight></codeline>
<codeline lineno="4030"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4031"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4032"><highlight class="comment">idEntity::Event_SetOwner</highlight></codeline>
<codeline lineno="4033"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4034"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4035"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_SetOwner(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*owner<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"></highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>GetPhysics()-&gt;GetNumClipModels();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetPhysics()-&gt;GetClipModel(<sp/>i<sp/>)-&gt;SetOwner(<sp/>owner<sp/>);</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"></highlight></codeline>
<codeline lineno="4043"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4044"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4045"><highlight class="comment">idEntity::Event_SetModel</highlight></codeline>
<codeline lineno="4046"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4047"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4048"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_SetModel(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*modelname<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/>SetModel(<sp/>modelname<sp/>);</highlight></codeline>
<codeline lineno="4050"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"></highlight></codeline>
<codeline lineno="4052"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4053"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4054"><highlight class="comment">idEntity::Event_SetSkin</highlight></codeline>
<codeline lineno="4055"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4056"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4057"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_SetSkin(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*skinname<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.customSkin<sp/>=<sp/>declManager-&gt;FindSkin(<sp/>skinname<sp/>);</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateVisuals();</highlight></codeline>
<codeline lineno="4060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"></highlight></codeline>
<codeline lineno="4062"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4063"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4064"><highlight class="comment">idEntity::Event_GetShaderParm</highlight></codeline>
<codeline lineno="4065"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4066"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4067"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_GetShaderParm(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parmnum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>parmnum<sp/>&lt;<sp/>0<sp/>)<sp/>||<sp/>(<sp/>parmnum<sp/>&gt;=<sp/>MAX_ENTITY_SHADER_PARMS<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;shader<sp/>parm<sp/>index<sp/>(%d)<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">,<sp/>parmnum<sp/>);</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"></highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnFloat(<sp/>renderEntity.shaderParms[<sp/>parmnum<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="4073"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"></highlight></codeline>
<codeline lineno="4075"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4076"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4077"><highlight class="comment">idEntity::Event_SetShaderParm</highlight></codeline>
<codeline lineno="4078"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4079"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4080"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_SetShaderParm(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parmnum,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/><sp/><sp/>SetShaderParm(<sp/>parmnum,<sp/>value<sp/>);</highlight></codeline>
<codeline lineno="4082"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"></highlight></codeline>
<codeline lineno="4084"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4085"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4086"><highlight class="comment">idEntity::Event_SetShaderParms</highlight></codeline>
<codeline lineno="4087"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4088"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4089"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_SetShaderParms(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>parm0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>parm1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>parm2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>parm3<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.shaderParms[<sp/>SHADERPARM_RED<sp/>]<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>parm0;</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.shaderParms[<sp/>SHADERPARM_GREEN<sp/>]<sp/><sp/><sp/><sp/>=<sp/>parm1;</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.shaderParms[<sp/>SHADERPARM_BLUE<sp/>]<sp/><sp/><sp/><sp/><sp/>=<sp/>parm2;</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.shaderParms[<sp/>SHADERPARM_ALPHA<sp/>]<sp/><sp/><sp/><sp/>=<sp/>parm3;</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateVisuals();</highlight></codeline>
<codeline lineno="4095"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"></highlight></codeline>
<codeline lineno="4097"><highlight class="normal"></highlight></codeline>
<codeline lineno="4098"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4099"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4100"><highlight class="comment">idEntity::Event_SetColor</highlight></codeline>
<codeline lineno="4101"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4102"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4103"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_SetColor(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>red,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>green,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>blue<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/><sp/>SetColor(<sp/>red,<sp/>green,<sp/>blue<sp/>);</highlight></codeline>
<codeline lineno="4105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"></highlight></codeline>
<codeline lineno="4107"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4108"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4109"><highlight class="comment">idEntity::Event_GetColor</highlight></codeline>
<codeline lineno="4110"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4111"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4112"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_GetColor(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>out;</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"></highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/><sp/>GetColor(<sp/>out<sp/>);</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnVector(<sp/>out<sp/>);</highlight></codeline>
<codeline lineno="4117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"></highlight></codeline>
<codeline lineno="4119"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4120"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4121"><highlight class="comment">idEntity::Event_IsHidden</highlight></codeline>
<codeline lineno="4122"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4123"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4124"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_IsHidden(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnInt(<sp/>fl.hidden<sp/>);</highlight></codeline>
<codeline lineno="4126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"></highlight></codeline>
<codeline lineno="4128"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4129"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4130"><highlight class="comment">idEntity::Event_Hide</highlight></codeline>
<codeline lineno="4131"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4132"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4133"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_Hide(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/>Hide();</highlight></codeline>
<codeline lineno="4135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"></highlight></codeline>
<codeline lineno="4137"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4138"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4139"><highlight class="comment">idEntity::Event_Show</highlight></codeline>
<codeline lineno="4140"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4141"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4142"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_Show(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/><sp/><sp/>Show();</highlight></codeline>
<codeline lineno="4144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"></highlight></codeline>
<codeline lineno="4146"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4147"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4148"><highlight class="comment">idEntity::Event_CacheSoundShader</highlight></codeline>
<codeline lineno="4149"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4150"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4151"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_CacheSoundShader(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*soundName<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/>declManager-&gt;FindSound(<sp/>soundName<sp/>);</highlight></codeline>
<codeline lineno="4153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"></highlight></codeline>
<codeline lineno="4155"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4156"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4157"><highlight class="comment">idEntity::Event_StartSoundShader</highlight></codeline>
<codeline lineno="4158"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4159"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4160"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_StartSoundShader(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*soundName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"></highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/>StartSoundShader(<sp/>declManager-&gt;FindSound(<sp/>soundName<sp/>),<sp/>(s_channelType)channel,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>&amp;length<sp/>);</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnFloat(<sp/>MS2SEC(<sp/>length<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"></highlight></codeline>
<codeline lineno="4167"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4168"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4169"><highlight class="comment">idEntity::Event_StopSound</highlight></codeline>
<codeline lineno="4170"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4171"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4172"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_StopSound(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>netSync<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/><sp/><sp/>StopSound(<sp/>channel,<sp/>(<sp/>netSync<sp/>!=<sp/>0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"></highlight></codeline>
<codeline lineno="4176"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4177"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4178"><highlight class="comment">idEntity::Event_StartSound<sp/></highlight></codeline>
<codeline lineno="4179"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4180"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4181"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_StartSound(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*soundName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>netSync<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time;</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/>StartSound(<sp/>soundName,<sp/>(<sp/>s_channelType<sp/>)channel,<sp/>0,<sp/>(<sp/>netSync<sp/>!=<sp/>0<sp/>),<sp/>&amp;time<sp/>);</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnFloat(<sp/>MS2SEC(<sp/>time<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"></highlight></codeline>
<codeline lineno="4188"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4189"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4190"><highlight class="comment">idEntity::Event_FadeSound</highlight></codeline>
<codeline lineno="4191"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4192"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4193"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_FadeSound(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>to,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>over<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>refSound.referenceSound<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refSound.referenceSound-&gt;FadeSound(<sp/>channel,<sp/>to,<sp/>over<sp/>);</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"></highlight></codeline>
<codeline lineno="4199"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4200"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4201"><highlight class="comment">idEntity::Event_GetWorldOrigin</highlight></codeline>
<codeline lineno="4202"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4203"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4204"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_GetWorldOrigin(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnVector(<sp/>GetPhysics()-&gt;GetOrigin()<sp/>);</highlight></codeline>
<codeline lineno="4206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"></highlight></codeline>
<codeline lineno="4208"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4209"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4210"><highlight class="comment">idEntity::Event_SetWorldOrigin</highlight></codeline>
<codeline lineno="4211"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4212"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4213"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_SetWorldOrigin(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;org<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>neworg<sp/>=<sp/>GetLocalCoordinates(<sp/>org<sp/>);</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/><sp/><sp/>SetOrigin(<sp/>neworg<sp/>);</highlight></codeline>
<codeline lineno="4216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"></highlight></codeline>
<codeline lineno="4218"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4219"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4220"><highlight class="comment">idEntity::Event_SetOrigin</highlight></codeline>
<codeline lineno="4221"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4222"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4223"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_SetOrigin(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;org<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/><sp/>SetOrigin(<sp/>org<sp/>);</highlight></codeline>
<codeline lineno="4225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"></highlight></codeline>
<codeline lineno="4227"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4228"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4229"><highlight class="comment">idEntity::Event_GetOrigin</highlight></codeline>
<codeline lineno="4230"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4231"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4232"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_GetOrigin(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnVector(<sp/>GetLocalCoordinates(<sp/>GetPhysics()-&gt;GetOrigin()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"></highlight></codeline>
<codeline lineno="4236"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4237"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4238"><highlight class="comment">idEntity::Event_SetAngles</highlight></codeline>
<codeline lineno="4239"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4240"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4241"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_SetAngles(<sp/><ref refid="classid_angles" kindref="compound">idAngles</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;ang<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/><sp/><sp/>SetAngles(<sp/>ang<sp/>);</highlight></codeline>
<codeline lineno="4243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"></highlight></codeline>
<codeline lineno="4245"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4246"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4247"><highlight class="comment">idEntity::Event_GetAngles</highlight></codeline>
<codeline lineno="4248"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4249"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4250"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_GetAngles(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_angles" kindref="compound">idAngles</ref><sp/>ang<sp/>=<sp/>GetPhysics()-&gt;GetAxis().ToAngles();</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnVector(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>ang[0],<sp/>ang[1],<sp/>ang[2]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"></highlight></codeline>
<codeline lineno="4255"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4256"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4257"><highlight class="comment">idEntity::Event_SetLinearVelocity</highlight></codeline>
<codeline lineno="4258"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4259"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4260"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_SetLinearVelocity(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;velocity<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/><sp/>GetPhysics()-&gt;SetLinearVelocity(<sp/>velocity<sp/>);</highlight></codeline>
<codeline lineno="4262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"></highlight></codeline>
<codeline lineno="4264"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4265"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4266"><highlight class="comment">idEntity::Event_GetLinearVelocity</highlight></codeline>
<codeline lineno="4267"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4268"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4269"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_GetLinearVelocity(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnVector(<sp/>GetPhysics()-&gt;GetLinearVelocity()<sp/>);</highlight></codeline>
<codeline lineno="4271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"></highlight></codeline>
<codeline lineno="4273"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4274"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4275"><highlight class="comment">idEntity::Event_SetAngularVelocity</highlight></codeline>
<codeline lineno="4276"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4277"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4278"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_SetAngularVelocity(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;velocity<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/><sp/><sp/>GetPhysics()-&gt;SetAngularVelocity(<sp/>velocity<sp/>);</highlight></codeline>
<codeline lineno="4280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"></highlight></codeline>
<codeline lineno="4282"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4283"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4284"><highlight class="comment">idEntity::Event_GetAngularVelocity</highlight></codeline>
<codeline lineno="4285"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4286"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4287"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_GetAngularVelocity(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnVector(<sp/>GetPhysics()-&gt;GetAngularVelocity()<sp/>);</highlight></codeline>
<codeline lineno="4289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"></highlight></codeline>
<codeline lineno="4291"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4292"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4293"><highlight class="comment">idEntity::Event_SetSize</highlight></codeline>
<codeline lineno="4294"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4295"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4296"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_SetSize(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;mins,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;maxs<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/>GetPhysics()-&gt;SetClipBox(<sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref>(<sp/>mins,<sp/>maxs<sp/>),<sp/>1.0f<sp/>);</highlight></codeline>
<codeline lineno="4298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"></highlight></codeline>
<codeline lineno="4300"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4301"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4302"><highlight class="comment">idEntity::Event_GetSize</highlight></codeline>
<codeline lineno="4303"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4304"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4305"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_GetSize(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>bounds;</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"></highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds<sp/>=<sp/>GetPhysics()-&gt;GetBounds();</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnVector(<sp/>bounds[1]<sp/>-<sp/>bounds[0]<sp/>);</highlight></codeline>
<codeline lineno="4310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"></highlight></codeline>
<codeline lineno="4312"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4313"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4314"><highlight class="comment">idEntity::Event_GetMins</highlight></codeline>
<codeline lineno="4315"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4316"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4317"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_GetMins(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnVector(<sp/>GetPhysics()-&gt;GetBounds()[0]<sp/>);</highlight></codeline>
<codeline lineno="4319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"></highlight></codeline>
<codeline lineno="4321"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4322"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4323"><highlight class="comment">idEntity::Event_GetMaxs</highlight></codeline>
<codeline lineno="4324"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4325"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4326"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_GetMaxs(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnVector(<sp/>GetPhysics()-&gt;GetBounds()[1]<sp/>);</highlight></codeline>
<codeline lineno="4328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"></highlight></codeline>
<codeline lineno="4330"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4331"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4332"><highlight class="comment">idEntity::Event_Touches</highlight></codeline>
<codeline lineno="4333"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4334"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4335"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_Touches(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::ReturnInt(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"></highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>&amp;myBounds<sp/>=<sp/>GetPhysics()-&gt;GetAbsBounds();</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>&amp;entBounds<sp/>=<sp/>ent-&gt;GetPhysics()-&gt;GetAbsBounds();</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"></highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnInt(<sp/>myBounds.IntersectsBounds(<sp/>entBounds<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"></highlight></codeline>
<codeline lineno="4347"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4348"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4349"><highlight class="comment">idEntity::Event_SetGuiParm</highlight></codeline>
<codeline lineno="4350"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4351"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4352"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_SetGuiParm(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*val<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_RENDERENTITY_GUI;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>renderEntity.gui[<sp/>i<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idStr::Icmpn(<sp/>key,<sp/></highlight><highlight class="stringliteral">&quot;gui_&quot;</highlight><highlight class="normal">,<sp/>4<sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spawnArgs.Set(<sp/>key,<sp/>val<sp/>);</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity.gui[<sp/>i<sp/>]-&gt;SetStateString(<sp/>key,<sp/>val<sp/>);</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity.gui[<sp/>i<sp/>]-&gt;StateChanged(<sp/>gameLocal.time<sp/>);</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"></highlight></codeline>
<codeline lineno="4364"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4365"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4366"><highlight class="comment">idEntity::Event_SetGuiParm</highlight></codeline>
<codeline lineno="4367"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4368"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4369"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_SetGuiFloat(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_RENDERENTITY_GUI;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>renderEntity.gui[<sp/>i<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity.gui[<sp/>i<sp/>]-&gt;SetStateString(<sp/>key,<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;%f&quot;</highlight><highlight class="normal">,<sp/>f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity.gui[<sp/>i<sp/>]-&gt;StateChanged(<sp/>gameLocal.time<sp/>);</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"></highlight></codeline>
<codeline lineno="4378"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4379"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4380"><highlight class="comment">idEntity::Event_GetNextKey</highlight></codeline>
<codeline lineno="4381"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4382"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4383"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_GetNextKey(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prefix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*lastMatch<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_key_value" kindref="compound">idKeyValue</ref><sp/>*kv;</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_key_value" kindref="compound">idKeyValue</ref><sp/>*previous;</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"></highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*lastMatch<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous<sp/>=<sp/>spawnArgs.FindKey(<sp/>lastMatch<sp/>);</highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"></highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>spawnArgs.MatchPrefix(<sp/>prefix,<sp/>previous<sp/>);</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!kv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::ReturnString(<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::ReturnString(<sp/>kv-&gt;GetKey()<sp/>);</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"></highlight></codeline>
<codeline lineno="4401"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4402"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4403"><highlight class="comment">idEntity::Event_SetKey</highlight></codeline>
<codeline lineno="4404"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4405"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4406"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_SetKey(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnArgs.Set(<sp/>key,<sp/>value<sp/>);</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="4409"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateChangeableSpawnArgs(<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="4410"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="4411"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"></highlight></codeline>
<codeline lineno="4413"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4414"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4415"><highlight class="comment">idEntity::Event_GetKey</highlight></codeline>
<codeline lineno="4416"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4417"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4418"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_GetKey(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value;</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"></highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnArgs.GetString(<sp/>key,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>&amp;value<sp/>);</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnString(<sp/>value<sp/>);</highlight></codeline>
<codeline lineno="4423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"></highlight></codeline>
<codeline lineno="4425"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4426"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4427"><highlight class="comment">idEntity::Event_GetIntKey</highlight></codeline>
<codeline lineno="4428"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4429"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4430"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_GetIntKey(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"></highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnArgs.GetInt(<sp/>key,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>value<sp/>);</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"></highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scripts<sp/>only<sp/>support<sp/>floats</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnFloat(<sp/>value<sp/>);</highlight></codeline>
<codeline lineno="4437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"></highlight></codeline>
<codeline lineno="4439"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4440"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4441"><highlight class="comment">idEntity::Event_GetFloatKey</highlight></codeline>
<codeline lineno="4442"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4443"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4444"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_GetFloatKey(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"></highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnArgs.GetFloat(<sp/>key,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>value<sp/>);</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnFloat(<sp/>value<sp/>);</highlight></codeline>
<codeline lineno="4449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"></highlight></codeline>
<codeline lineno="4451"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4452"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4453"><highlight class="comment">idEntity::Event_GetVectorKey</highlight></codeline>
<codeline lineno="4454"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4455"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4456"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_GetVectorKey(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>value;</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"></highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnArgs.GetVector(<sp/>key,<sp/></highlight><highlight class="stringliteral">&quot;0<sp/>0<sp/>0&quot;</highlight><highlight class="normal">,<sp/>value<sp/>);</highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnVector(<sp/>value<sp/>);</highlight></codeline>
<codeline lineno="4461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"></highlight></codeline>
<codeline lineno="4463"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4464"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4465"><highlight class="comment">idEntity::Event_GetEntityKey</highlight></codeline>
<codeline lineno="4466"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4467"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4468"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_GetEntityKey(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*entname;</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"></highlight></codeline>
<codeline lineno="4472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!spawnArgs.GetString(<sp/>key,<sp/>NULL,<sp/>&amp;entname<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::ReturnEntity(<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="4474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"></highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>gameLocal.FindEntity(<sp/>entname<sp/>);</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>find<sp/>entity<sp/>&apos;%s&apos;<sp/>specified<sp/>in<sp/>&apos;%s&apos;<sp/>key<sp/>in<sp/>entity<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>entname,<sp/>key,<sp/>name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"></highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnEntity(<sp/>ent<sp/>);</highlight></codeline>
<codeline lineno="4483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"></highlight></codeline>
<codeline lineno="4485"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4486"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4487"><highlight class="comment">idEntity::Event_RestorePosition</highlight></codeline>
<codeline lineno="4488"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4489"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4490"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_RestorePosition(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/>org;</highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_angles" kindref="compound">idAngles</ref><sp/><sp/><sp/><sp/>angles;</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/><sp/><sp/><sp/><sp/><sp/>axis;</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*<sp/><sp/>part;</highlight></codeline>
<codeline lineno="4495"><highlight class="normal"></highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnArgs.GetVector(<sp/></highlight><highlight class="stringliteral">&quot;origin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0<sp/>0<sp/>0&quot;</highlight><highlight class="normal">,<sp/>org<sp/>);</highlight></codeline>
<codeline lineno="4497"><highlight class="normal"></highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>rotation<sp/>matrix<sp/>in<sp/>either<sp/>full<sp/>form,<sp/>or<sp/>single<sp/>angle<sp/>form</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>spawnArgs.GetMatrix(<sp/></highlight><highlight class="stringliteral">&quot;rotation&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1<sp/>0<sp/>0<sp/>0<sp/>1<sp/>0<sp/>0<sp/>0<sp/>1&quot;</highlight><highlight class="normal">,<sp/>axis<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angles<sp/>=<sp/>axis.ToAngles();</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angles[<sp/>0<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angles[<sp/>1<sp/>]<sp/>=<sp/>spawnArgs.GetFloat(<sp/></highlight><highlight class="stringliteral">&quot;angle&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angles[<sp/>2<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"></highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/><sp/><sp/>Teleport(<sp/>org,<sp/>angles,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"></highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>part<sp/>=<sp/>teamChain;<sp/>part<sp/>!=<sp/>NULL;<sp/>part<sp/>=<sp/>part-&gt;teamChain<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>part-&gt;bindMaster<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>part-&gt;GetPhysics()-&gt;IsType(<sp/>idPhysics_Parametric::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>static_cast&lt;idPhysics_Parametric<sp/>*&gt;(part-&gt;GetPhysics())-&gt;IsPusher()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;teleported<sp/>&apos;%s&apos;<sp/>which<sp/>has<sp/>the<sp/>pushing<sp/>mover<sp/>&apos;%s&apos;<sp/>bound<sp/>to<sp/>it\n&quot;</highlight><highlight class="normal">,<sp/>GetName(),<sp/>part-&gt;GetName()<sp/>);</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>part-&gt;GetPhysics()-&gt;IsType(<sp/>idPhysics_AF::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;teleported<sp/>&apos;%s&apos;<sp/>which<sp/>has<sp/>the<sp/>articulated<sp/>figure<sp/>&apos;%s&apos;<sp/>bound<sp/>to<sp/>it\n&quot;</highlight><highlight class="normal">,<sp/>GetName(),<sp/>part-&gt;GetName()<sp/>);</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"></highlight></codeline>
<codeline lineno="4523"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4524"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4525"><highlight class="comment">idEntity::Event_UpdateCameraTarget</highlight></codeline>
<codeline lineno="4526"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4527"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4528"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_UpdateCameraTarget(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*target;</highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_key_value" kindref="compound">idKeyValue</ref><sp/>*kv;</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>dir;</highlight></codeline>
<codeline lineno="4532"><highlight class="normal"></highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/>spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;cameraTarget&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"></highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/><sp/><sp/>cameraTarget<sp/>=<sp/>gameLocal.FindEntity(<sp/>target<sp/>);</highlight></codeline>
<codeline lineno="4536"><highlight class="normal"></highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cameraTarget<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>cameraTarget-&gt;spawnArgs.MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;target&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>kv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>=<sp/>gameLocal.FindEntity(<sp/>kv-&gt;GetValue()<sp/>);</highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>&amp;&amp;<sp/>idStr::Icmp(<sp/>ent-&gt;GetEntityDefName(),<sp/></highlight><highlight class="stringliteral">&quot;target_null&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>ent-&gt;GetPhysics()-&gt;GetOrigin()<sp/>-<sp/>cameraTarget-&gt;GetPhysics()-&gt;GetOrigin();</highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir.Normalize();</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cameraTarget-&gt;SetAxis(<sp/>dir.ToMat3()<sp/>);</highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetAxis(dir.ToMat3());</highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>cameraTarget-&gt;spawnArgs.MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;target&quot;</highlight><highlight class="normal">,<sp/>kv<sp/>);</highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateVisuals();</highlight></codeline>
<codeline lineno="4552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"></highlight></codeline>
<codeline lineno="4554"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4555"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4556"><highlight class="comment">idEntity::Event_DistanceTo</highlight></codeline>
<codeline lineno="4557"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4558"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4559"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_DistanceTo(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>say<sp/>it&apos;s<sp/>really<sp/>far<sp/>away</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::ReturnFloat(<sp/>MAX_WORLD_SIZE<sp/>);</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>(<sp/>GetPhysics()-&gt;GetOrigin()<sp/>-<sp/>ent-&gt;GetPhysics()-&gt;GetOrigin()<sp/>).LengthFast();</highlight></codeline>
<codeline lineno="4565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::ReturnFloat(<sp/>dist<sp/>);</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4568"><highlight class="normal"></highlight></codeline>
<codeline lineno="4569"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4570"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4571"><highlight class="comment">idEntity::Event_DistanceToPoint</highlight></codeline>
<codeline lineno="4572"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4573"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4574"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_DistanceToPoint(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;point<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>(<sp/>GetPhysics()-&gt;GetOrigin()<sp/>-<sp/>point<sp/>).LengthFast();</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnFloat(<sp/>dist<sp/>);</highlight></codeline>
<codeline lineno="4577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"></highlight></codeline>
<codeline lineno="4579"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4580"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4581"><highlight class="comment">idEntity::Event_StartFx</highlight></codeline>
<codeline lineno="4582"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4583"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4584"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_StartFx(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fx<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/><sp/><sp/>idEntityFx::StartFx(<sp/>fx,<sp/>NULL,<sp/>NULL,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"></highlight></codeline>
<codeline lineno="4588"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4589"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4590"><highlight class="comment">idEntity::Event_WaitFrame</highlight></codeline>
<codeline lineno="4591"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4592"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4593"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_WaitFrame(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/>*thread;</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/><sp/><sp/>thread<sp/>=<sp/>idThread::CurrentThread();</highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>thread<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;WaitFrame();</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"></highlight></codeline>
<codeline lineno="4602"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4603"><highlight class="comment">=====================</highlight></codeline>
<codeline lineno="4604"><highlight class="comment">idEntity::Event_Wait</highlight></codeline>
<codeline lineno="4605"><highlight class="comment">=====================</highlight></codeline>
<codeline lineno="4606"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4607"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_Wait(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/>*thread<sp/>=<sp/>idThread::CurrentThread();</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"></highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!thread<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Event<sp/>&apos;wait&apos;<sp/>called<sp/>from<sp/>outside<sp/>thread&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"></highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/><sp/><sp/>thread-&gt;WaitSec(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="4615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"></highlight></codeline>
<codeline lineno="4617"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4618"><highlight class="comment">=====================</highlight></codeline>
<codeline lineno="4619"><highlight class="comment">idEntity::Event_HasFunction</highlight></codeline>
<codeline lineno="4620"><highlight class="comment">=====================</highlight></codeline>
<codeline lineno="4621"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4622"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_HasFunction(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfunction__t" kindref="compound">function_t</ref><sp/>*func;</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"></highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/><sp/><sp/>func<sp/>=<sp/>scriptObject.GetFunction(<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>func<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::ReturnInt(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::ReturnInt(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"></highlight></codeline>
<codeline lineno="4633"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4634"><highlight class="comment">=====================</highlight></codeline>
<codeline lineno="4635"><highlight class="comment">idEntity::Event_CallFunction</highlight></codeline>
<codeline lineno="4636"><highlight class="comment">=====================</highlight></codeline>
<codeline lineno="4637"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4638"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_CallFunction(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*funcname<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfunction__t" kindref="compound">function_t</ref><sp/>*func;</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/>*thread;</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"></highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/><sp/><sp/>thread<sp/>=<sp/>idThread::CurrentThread();</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!thread<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Event<sp/>&apos;callFunction&apos;<sp/>called<sp/>from<sp/>outside<sp/>thread&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"></highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/>func<sp/>=<sp/>scriptObject.GetFunction(<sp/>funcname<sp/>);</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!func<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>function<sp/>&apos;%s&apos;<sp/>in<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>funcname,<sp/>scriptObject.GetTypeName()<sp/>);</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"></highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>func-&gt;type-&gt;NumParameters()<sp/>!=<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Function<sp/>&apos;%s&apos;<sp/>has<sp/>the<sp/>wrong<sp/>number<sp/>of<sp/>parameters<sp/>for<sp/>&apos;callFunction&apos;&quot;</highlight><highlight class="normal">,<sp/>funcname<sp/>);</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!scriptObject.GetTypeDef()-&gt;Inherits(<sp/>func-&gt;type-&gt;GetParmType(<sp/>0<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Function<sp/>&apos;%s&apos;<sp/>is<sp/>the<sp/>wrong<sp/>type<sp/>for<sp/>&apos;callFunction&apos;&quot;</highlight><highlight class="normal">,<sp/>funcname<sp/>);</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"></highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>args<sp/>will<sp/>be<sp/>invalid<sp/>after<sp/>this<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/><sp/><sp/>thread-&gt;CallFunction(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>func,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"></highlight></codeline>
<codeline lineno="4663"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4664"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4665"><highlight class="comment">idEntity::Event_SetNeverDormant</highlight></codeline>
<codeline lineno="4666"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4667"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4668"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_SetNeverDormant(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>enable<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.neverDormant<sp/>=<sp/>(<sp/>enable<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/>dormantStart<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"></highlight></codeline>
<codeline lineno="4673"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="4674"><highlight class="preprocessor"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4675"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4676"><highlight class="comment">idEntity::Event_SetGui</highlight></codeline>
<codeline lineno="4677"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4678"><highlight class="comment">*<sp/>BSM<sp/>Nerve:<sp/>Allows<sp/>guis<sp/>to<sp/>be<sp/>changed<sp/>at<sp/>runtime.<sp/>Guis<sp/>that<sp/>are</highlight></codeline>
<codeline lineno="4679"><highlight class="comment">*<sp/>loaded<sp/>after<sp/>the<sp/>level<sp/>loads<sp/>should<sp/>be<sp/>precahced<sp/>using<sp/>PrecacheGui.</highlight></codeline>
<codeline lineno="4680"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4681"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_SetGui(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>guiNum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*guiName)<sp/>{</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_user_interface" kindref="compound">idUserInterface</ref>**<sp/>gui<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"></highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>guiNum<sp/>&gt;=<sp/>1<sp/>&amp;&amp;<sp/>guiNum<sp/>&lt;=<sp/>MAX_RENDERENTITY_GUI<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gui<sp/>=<sp/>&amp;renderEntity.gui[<sp/>guiNum-1<sp/>];</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"></highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>gui<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*gui<sp/>=<sp/>uiManager-&gt;FindGui(<sp/>guiName,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpdateGuiParms(<sp/>*gui,<sp/>&amp;spawnArgs<sp/>);</highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpdateChangeableSpawnArgs(<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;UpdateEntityDef(modelDefHandle,<sp/>&amp;renderEntity);</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"></highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;Entity<sp/>&apos;%s&apos;<sp/>doesn&apos;t<sp/>have<sp/>a<sp/>GUI<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>name.c_str(),<sp/>guiNum<sp/>);</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"></highlight></codeline>
<codeline lineno="4698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"></highlight></codeline>
<codeline lineno="4700"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4701"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4702"><highlight class="comment">idEntity::Event_PrecacheGui</highlight></codeline>
<codeline lineno="4703"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4704"><highlight class="comment">*<sp/>BSM<sp/>Nerve:<sp/>Forces<sp/>the<sp/>engine<sp/>to<sp/>initialize<sp/>a<sp/>gui<sp/>even<sp/>if<sp/>it<sp/>is<sp/>not<sp/>specified<sp/>as<sp/>used<sp/>in<sp/>a<sp/>level.</highlight></codeline>
<codeline lineno="4705"><highlight class="comment">*<sp/>This<sp/>is<sp/>useful<sp/>for<sp/>preventing<sp/>load<sp/>hitches<sp/>when<sp/>switching<sp/>guis<sp/>during<sp/>the<sp/>game<sp/>using<sp/>&quot;setGui&quot;</highlight></codeline>
<codeline lineno="4706"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4707"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_PrecacheGui(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*guiName<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/><sp/><sp/>uiManager-&gt;FindGui(<sp/>guiName,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4710"><highlight class="normal"></highlight></codeline>
<codeline lineno="4711"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_GetGuiParm(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>guiNum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)<sp/>{</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(renderEntity.gui[guiNum-1])<sp/>{</highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::ReturnString(renderEntity.gui[guiNum-1]-&gt;GetStateString(key));</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnString(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"></highlight></codeline>
<codeline lineno="4719"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_GetGuiParmFloat(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>guiNum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)<sp/>{</highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(renderEntity.gui[guiNum-1])<sp/>{</highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::ReturnFloat(renderEntity.gui[guiNum-1]-&gt;GetStateFloat(key));</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnFloat(0.0f);</highlight></codeline>
<codeline lineno="4725"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"></highlight></codeline>
<codeline lineno="4727"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::Event_GuiNamedEvent(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>guiNum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*event)<sp/>{</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(renderEntity.gui[guiNum-1])<sp/>{</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity.gui[guiNum-1]-&gt;HandleNamedEvent(event);</highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4732"><highlight class="normal"></highlight></codeline>
<codeline lineno="4733"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="4734"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4735"><highlight class="normal"></highlight><highlight class="comment">/***********************************************************************</highlight></codeline>
<codeline lineno="4736"><highlight class="comment"></highlight></codeline>
<codeline lineno="4737"><highlight class="comment"><sp/><sp/><sp/>Network</highlight></codeline>
<codeline lineno="4738"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4739"><highlight class="comment">***********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4740"><highlight class="normal"></highlight></codeline>
<codeline lineno="4741"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4742"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4743"><highlight class="comment">idEntity::ClientPredictionThink</highlight></codeline>
<codeline lineno="4744"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4745"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4746"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::ClientPredictionThink(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/><sp/><sp/>RunPhysics();</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/>Present();</highlight></codeline>
<codeline lineno="4749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"></highlight></codeline>
<codeline lineno="4751"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4752"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4753"><highlight class="comment">idEntity::WriteBindToSnapshot</highlight></codeline>
<codeline lineno="4754"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4755"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4756"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::WriteBindToSnapshot(<sp/><ref refid="classid_bit_msg_delta" kindref="compound">idBitMsgDelta</ref><sp/>&amp;msg<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bindInfo;</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"></highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bindMaster<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bindInfo<sp/>=<sp/>bindMaster-&gt;entityNumber;</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bindInfo<sp/>|=<sp/>(<sp/>fl.bindOrientated<sp/>&amp;<sp/>1<sp/>)<sp/>&lt;&lt;<sp/>GENTITYNUM_BITS;</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bindJoint<sp/>!=<sp/>INVALID_JOINT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bindInfo<sp/>|=<sp/>1<sp/>&lt;&lt;<sp/>(<sp/>GENTITYNUM_BITS<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bindInfo<sp/>|=<sp/>bindJoint<sp/>&lt;&lt;<sp/>(<sp/>3<sp/>+<sp/>GENTITYNUM_BITS<sp/>);</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bindBody<sp/>!=<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bindInfo<sp/>|=<sp/>2<sp/>&lt;&lt;<sp/>(<sp/>GENTITYNUM_BITS<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bindInfo<sp/>|=<sp/>bindBody<sp/>&lt;&lt;<sp/>(<sp/>3<sp/>+<sp/>GENTITYNUM_BITS<sp/>);</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bindInfo<sp/>=<sp/>ENTITYNUM_NONE;</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteBits(<sp/>bindInfo,<sp/>GENTITYNUM_BITS<sp/>+<sp/>3<sp/>+<sp/>9<sp/>);</highlight></codeline>
<codeline lineno="4773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"></highlight></codeline>
<codeline lineno="4775"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4776"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4777"><highlight class="comment">idEntity::ReadBindFromSnapshot</highlight></codeline>
<codeline lineno="4778"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4779"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4780"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::ReadBindFromSnapshot(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg_delta" kindref="compound">idBitMsgDelta</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bindInfo,<sp/>bindEntityNum,<sp/>bindPos;</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bindOrientated;</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*master;</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"></highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/><sp/><sp/>bindInfo<sp/>=<sp/>msg.ReadBits(<sp/>GENTITYNUM_BITS<sp/>+<sp/>3<sp/>+<sp/>9<sp/>);</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/><sp/><sp/>bindEntityNum<sp/>=<sp/>bindInfo<sp/>&amp;<sp/>(<sp/>(<sp/>1<sp/>&lt;&lt;<sp/>GENTITYNUM_BITS<sp/>)<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"></highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bindEntityNum<sp/>!=<sp/>ENTITYNUM_NONE<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>master<sp/>=<sp/>gameLocal.entities[<sp/>bindEntityNum<sp/>];</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"></highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bindOrientated<sp/>=<sp/>(<sp/>bindInfo<sp/>&gt;&gt;<sp/>GENTITYNUM_BITS<sp/>)<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bindPos<sp/>=<sp/>(<sp/>bindInfo<sp/>&gt;&gt;<sp/>(<sp/>GENTITYNUM_BITS<sp/>+<sp/>3<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>(<sp/>bindInfo<sp/>&gt;&gt;<sp/>(<sp/>GENTITYNUM_BITS<sp/>+<sp/>1<sp/>)<sp/>)<sp/>&amp;<sp/>3<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>{</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BindToJoint(<sp/>master,<sp/>(jointHandle_t)<sp/>bindPos,<sp/>bindOrientated<sp/>);</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/>{</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BindToBody(<sp/>master,<sp/>bindPos,<sp/>bindOrientated<sp/>);</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bind(<sp/>master,<sp/>bindOrientated<sp/>);</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bindMaster<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Unbind();</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"></highlight></codeline>
<codeline lineno="4812"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4813"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4814"><highlight class="comment">idEntity::WriteColorToSnapshot</highlight></codeline>
<codeline lineno="4815"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4816"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4817"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::WriteColorToSnapshot(<sp/><ref refid="classid_bit_msg_delta" kindref="compound">idBitMsgDelta</ref><sp/>&amp;msg<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/>color;</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"></highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/>color[0]<sp/>=<sp/>renderEntity.shaderParms[<sp/>SHADERPARM_RED<sp/>];</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/><sp/><sp/>color[1]<sp/>=<sp/>renderEntity.shaderParms[<sp/>SHADERPARM_GREEN<sp/>];</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/><sp/><sp/>color[2]<sp/>=<sp/>renderEntity.shaderParms[<sp/>SHADERPARM_BLUE<sp/>];</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/>color[3]<sp/>=<sp/>renderEntity.shaderParms[<sp/>SHADERPARM_ALPHA<sp/>];</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>PackColor(<sp/>color<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"></highlight></codeline>
<codeline lineno="4827"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4828"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4829"><highlight class="comment">idEntity::ReadColorFromSnapshot</highlight></codeline>
<codeline lineno="4830"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4831"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4832"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::ReadColorFromSnapshot(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg_delta" kindref="compound">idBitMsgDelta</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/>color;</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"></highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/>UnpackColor(<sp/>msg.ReadLong(),<sp/>color<sp/>);</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.shaderParms[<sp/>SHADERPARM_RED<sp/>]<sp/>=<sp/>color[0];</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.shaderParms[<sp/>SHADERPARM_GREEN<sp/>]<sp/>=<sp/>color[1];</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.shaderParms[<sp/>SHADERPARM_BLUE<sp/>]<sp/>=<sp/>color[2];</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.shaderParms[<sp/>SHADERPARM_ALPHA<sp/>]<sp/>=<sp/>color[3];</highlight></codeline>
<codeline lineno="4840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"></highlight></codeline>
<codeline lineno="4842"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4843"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4844"><highlight class="comment">idEntity::WriteGUIToSnapshot</highlight></codeline>
<codeline lineno="4845"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4846"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4847"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::WriteGUIToSnapshot(<sp/><ref refid="classid_bit_msg_delta" kindref="compound">idBitMsgDelta</ref><sp/>&amp;msg<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>need<sp/>to<sp/>loop<sp/>over<sp/>MAX_RENDERENTITY_GUI<sp/>at<sp/>this<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>renderEntity.gui[<sp/>0<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>renderEntity.gui[<sp/>0<sp/>]-&gt;State().GetInt(<sp/></highlight><highlight class="stringliteral">&quot;networkState&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteByte(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"></highlight></codeline>
<codeline lineno="4856"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4857"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4858"><highlight class="comment">idEntity::ReadGUIFromSnapshot</highlight></codeline>
<codeline lineno="4859"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4860"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4861"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::ReadGUIFromSnapshot(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg_delta" kindref="compound">idBitMsgDelta</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>state;</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_user_interface" kindref="compound">idUserInterface</ref><sp/>*gui;</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/>state<sp/>=<sp/>msg.ReadByte(<sp/>);</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/><sp/><sp/>gui<sp/>=<sp/>renderEntity.gui[<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gui<sp/>&amp;&amp;<sp/>state<sp/>!=<sp/>mpGUIState<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpGUIState<sp/>=<sp/>state;</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gui-&gt;SetStateInt(<sp/></highlight><highlight class="stringliteral">&quot;networkState&quot;</highlight><highlight class="normal">,<sp/>state<sp/>);</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gui-&gt;HandleNamedEvent(<sp/></highlight><highlight class="stringliteral">&quot;networkState&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"></highlight></codeline>
<codeline lineno="4873"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4874"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4875"><highlight class="comment">idEntity::WriteToSnapshot</highlight></codeline>
<codeline lineno="4876"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4877"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4878"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::WriteToSnapshot(<sp/><ref refid="classid_bit_msg_delta" kindref="compound">idBitMsgDelta</ref><sp/>&amp;msg<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"></highlight></codeline>
<codeline lineno="4881"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4882"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4883"><highlight class="comment">idEntity::ReadFromSnapshot</highlight></codeline>
<codeline lineno="4884"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4885"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4886"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::ReadFromSnapshot(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg_delta" kindref="compound">idBitMsgDelta</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"></highlight></codeline>
<codeline lineno="4889"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4890"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4891"><highlight class="comment">idEntity::ServerSendEvent</highlight></codeline>
<codeline lineno="4892"><highlight class="comment"></highlight></codeline>
<codeline lineno="4893"><highlight class="comment"><sp/><sp/><sp/>Saved<sp/>events<sp/>are<sp/>also<sp/>sent<sp/>to<sp/>any<sp/>client<sp/>that<sp/>connects<sp/>late<sp/>so<sp/>all<sp/>clients</highlight></codeline>
<codeline lineno="4894"><highlight class="comment"><sp/><sp/><sp/>always<sp/>receive<sp/>the<sp/>events<sp/>nomatter<sp/>what<sp/>time<sp/>they<sp/>join<sp/>the<sp/>game.</highlight></codeline>
<codeline lineno="4895"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4896"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4897"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::ServerSendEvent(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eventId,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>*msg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>saveEvent,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>excludeClient<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>outMsg;</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_GAME_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"></highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!gameLocal.isServer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"></highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prevent<sp/>dupe<sp/>events<sp/>caused<sp/>by<sp/>frame<sp/>re-runs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!gameLocal.isNewFrame<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"></highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.BeginWriting();</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteByte(<sp/>GAME_RELIABLE_MESSAGE_EVENT<sp/>);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteBits(<sp/>gameLocal.GetSpawnId(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>),<sp/>32<sp/>);</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteByte(<sp/>eventId<sp/>);</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteLong(<sp/>gameLocal.time<sp/>);</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteBits(<sp/>msg-&gt;GetSize(),<sp/>idMath::BitsForInteger(<sp/>MAX_EVENT_PARAM_SIZE<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteData(<sp/>msg-&gt;GetData(),<sp/>msg-&gt;GetSize()<sp/>);</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteBits(<sp/>0,<sp/>idMath::BitsForInteger(<sp/>MAX_EVENT_PARAM_SIZE<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4922"><highlight class="normal"></highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>excludeClient<sp/>!=<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>networkSystem-&gt;ServerSendReliableMessageExcluding(<sp/>excludeClient,<sp/>outMsg<sp/>);</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>networkSystem-&gt;ServerSendReliableMessage(<sp/>-1,<sp/>outMsg<sp/>);</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"></highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>saveEvent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.SaveEntityNetworkEvent(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>eventId,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"></highlight></codeline>
<codeline lineno="4934"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4935"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4936"><highlight class="comment">idEntity::ClientSendEvent</highlight></codeline>
<codeline lineno="4937"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4938"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4939"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::ClientSendEvent(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eventId,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>*msg<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>outMsg;</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_GAME_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"></highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!gameLocal.isClient<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"></highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prevent<sp/>dupe<sp/>events<sp/>caused<sp/>by<sp/>frame<sp/>re-runs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!gameLocal.isNewFrame<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"></highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.BeginWriting();</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteByte(<sp/>GAME_RELIABLE_MESSAGE_EVENT<sp/>);</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteBits(<sp/>gameLocal.GetSpawnId(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>),<sp/>32<sp/>);</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteByte(<sp/>eventId<sp/>);</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/><sp/><sp/>outMsg.WriteLong(<sp/>gameLocal.time<sp/>);</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteBits(<sp/>msg-&gt;GetSize(),<sp/>idMath::BitsForInteger(<sp/>MAX_EVENT_PARAM_SIZE<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteData(<sp/>msg-&gt;GetData(),<sp/>msg-&gt;GetSize()<sp/>);</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteBits(<sp/>0,<sp/>idMath::BitsForInteger(<sp/>MAX_EVENT_PARAM_SIZE<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"></highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/>networkSystem-&gt;ClientSendReliableMessage(<sp/>outMsg<sp/>);</highlight></codeline>
<codeline lineno="4966"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"></highlight></codeline>
<codeline lineno="4968"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4969"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4970"><highlight class="comment">idEntity::ServerReceiveEvent</highlight></codeline>
<codeline lineno="4971"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4972"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4973"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::ServerReceiveEvent(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>event,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>event<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/>{</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4981"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4982"><highlight class="normal"></highlight></codeline>
<codeline lineno="4983"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4984"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4985"><highlight class="comment">idEntity::ClientReceiveEvent</highlight></codeline>
<codeline lineno="4986"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4987"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4988"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::ClientReceiveEvent(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>event,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index;</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_sound_shader" kindref="compound">idSoundShader</ref><sp/>*shader;</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/><sp/><sp/>s_channelType<sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel;</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"></highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>event<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EVENT_STARTSOUNDSHADER:<sp/>{</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>sound<sp/>stuff<sp/>would<sp/>early<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>gameLocal.isNewFrame<sp/>);</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>time<sp/>&lt;<sp/>gameLocal.realClientTime<sp/>-<sp/>1000<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>too<sp/>old,<sp/>skip<sp/>it<sp/>(<sp/>reliable<sp/>messages<sp/>don&apos;t<sp/>need<sp/>to<sp/>be<sp/>parsed<sp/>in<sp/>full<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;ent<sp/>0x%x:<sp/>start<sp/>sound<sp/>shader<sp/>too<sp/>old<sp/>(%d<sp/>ms)\n&quot;</highlight><highlight class="normal">,<sp/>entityNumber,<sp/>gameLocal.realClientTime<sp/>-<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>gameLocal.ClientRemapDecl(<sp/>DECL_SOUND,<sp/>msg.ReadLong()<sp/>);</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>index<sp/>&lt;<sp/>declManager-&gt;GetNumDecls(<sp/>DECL_SOUND<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shader<sp/>=<sp/>declManager-&gt;SoundByIndex(<sp/>index,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel<sp/>=<sp/>(s_channelType)msg.ReadByte();</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StartSoundShader(<sp/>shader,<sp/>channel,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EVENT_STOPSOUNDSHADER:<sp/>{</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>sound<sp/>stuff<sp/>would<sp/>early<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>gameLocal.isNewFrame<sp/>);</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel<sp/>=<sp/>(s_channelType)msg.ReadByte();</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StopSound(<sp/>channel,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"></highlight></codeline>
<codeline lineno="5024"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="5025"><highlight class="preprocessor"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5026"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5027"><highlight class="comment">idEntity::DetermineTimeGroup</highlight></codeline>
<codeline lineno="5028"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5029"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5030"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::DetermineTimeGroup(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>slowmo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>slowmo<sp/>||<sp/>gameLocal.isMultiplayer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeGroup<sp/>=<sp/>TIME_GROUP1;</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeGroup<sp/>=<sp/>TIME_GROUP2;</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5037"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"></highlight></codeline>
<codeline lineno="5039"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5040"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5041"><highlight class="comment">idEntity::SetGrabbedState</highlight></codeline>
<codeline lineno="5042"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5043"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5044"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idEntity::SetGrabbedState(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>grabbed<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/><sp/><sp/>fl.grabbed<sp/>=<sp/>grabbed;</highlight></codeline>
<codeline lineno="5046"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"></highlight></codeline>
<codeline lineno="5048"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5049"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5050"><highlight class="comment">idEntity::IsGrabbed</highlight></codeline>
<codeline lineno="5051"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5052"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5053"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idEntity::IsGrabbed()<sp/>{</highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fl.grabbed;</highlight></codeline>
<codeline lineno="5055"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5056"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="5057"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5058"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5059"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="5060"><highlight class="comment"></highlight></codeline>
<codeline lineno="5061"><highlight class="comment"><sp/><sp/>idAnimatedEntity</highlight></codeline>
<codeline lineno="5062"><highlight class="comment"></highlight></codeline>
<codeline lineno="5063"><highlight class="comment">===============================================================================</highlight></codeline>
<codeline lineno="5064"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5065"><highlight class="normal"></highlight></codeline>
<codeline lineno="5066"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GetJointHandle(<sp/></highlight><highlight class="stringliteral">&quot;getJointHandle&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_ClearAllJoints(<sp/></highlight><highlight class="stringliteral">&quot;clearAllJoints&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_ClearJoint(<sp/></highlight><highlight class="stringliteral">&quot;clearJoint&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_SetJointPos(<sp/></highlight><highlight class="stringliteral">&quot;setJointPos&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ddv&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_SetJointAngle(<sp/></highlight><highlight class="stringliteral">&quot;setJointAngle&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ddv&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GetJointPos(<sp/></highlight><highlight class="stringliteral">&quot;getJointPos&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="5072"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_GetJointAngle(<sp/></highlight><highlight class="stringliteral">&quot;getJointAngle&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"></highlight></codeline>
<codeline lineno="5074"><highlight class="normal">CLASS_DECLARATION(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>,<sp/><ref refid="classid_animated_entity" kindref="compound">idAnimatedEntity</ref><sp/>)</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GetJointHandle,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_animated_entity" kindref="compound">idAnimatedEntity</ref>::Event_GetJointHandle<sp/>)</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_ClearAllJoints,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_animated_entity" kindref="compound">idAnimatedEntity</ref>::Event_ClearAllJoints<sp/>)</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_ClearJoint,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_animated_entity" kindref="compound">idAnimatedEntity</ref>::Event_ClearJoint<sp/>)</highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_SetJointPos,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_animated_entity" kindref="compound">idAnimatedEntity</ref>::Event_SetJointPos<sp/>)</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_SetJointAngle,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_animated_entity" kindref="compound">idAnimatedEntity</ref>::Event_SetJointAngle<sp/>)</highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GetJointPos,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_animated_entity" kindref="compound">idAnimatedEntity</ref>::Event_GetJointPos<sp/>)</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_GetJointAngle,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_animated_entity" kindref="compound">idAnimatedEntity</ref>::Event_GetJointAngle<sp/>)</highlight></codeline>
<codeline lineno="5082"><highlight class="normal">END_CLASS</highlight></codeline>
<codeline lineno="5083"><highlight class="normal"></highlight></codeline>
<codeline lineno="5084"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5085"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5086"><highlight class="comment">idAnimatedEntity::idAnimatedEntity</highlight></codeline>
<codeline lineno="5087"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5088"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><ref refid="classid_animated_entity" kindref="compound">idAnimatedEntity</ref>::<ref refid="classid_animated_entity" kindref="compound">idAnimatedEntity</ref>()<sp/>{</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"><sp/><sp/><sp/><sp/>animator.SetEntity(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"><sp/><sp/><sp/><sp/>damageEffects<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5092"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"></highlight></codeline>
<codeline lineno="5094"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5095"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5096"><highlight class="comment">idAnimatedEntity::~idAnimatedEntity</highlight></codeline>
<codeline lineno="5097"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5098"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5099"><highlight class="normal">idAnimatedEntity::~idAnimatedEntity()<sp/>{</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdamage_effect__s" kindref="compound">damageEffect_t</ref><sp/><sp/>*de;</highlight></codeline>
<codeline lineno="5101"><highlight class="normal"></highlight></codeline>
<codeline lineno="5102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>de<sp/>=<sp/>damageEffects;<sp/>de;<sp/>de<sp/>=<sp/>damageEffects<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>damageEffects<sp/>=<sp/>de-&gt;next;</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>de;</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"></highlight></codeline>
<codeline lineno="5108"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5109"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5110"><highlight class="comment">idAnimatedEntity::Save</highlight></codeline>
<codeline lineno="5111"><highlight class="comment"></highlight></codeline>
<codeline lineno="5112"><highlight class="comment">archives<sp/>object<sp/>for<sp/>save<sp/>game<sp/>file</highlight></codeline>
<codeline lineno="5113"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5114"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5115"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAnimatedEntity::Save(<sp/><ref refid="classid_save_game" kindref="compound">idSaveGame</ref><sp/>*savefile<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5116"><highlight class="normal"><sp/><sp/><sp/><sp/>animator.Save(<sp/>savefile<sp/>);</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"></highlight></codeline>
<codeline lineno="5118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wounds<sp/>are<sp/>very<sp/>temporary,<sp/>ignored<sp/>at<sp/>this<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//damageEffect_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*damageEffects;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5121"><highlight class="normal"></highlight></codeline>
<codeline lineno="5122"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5123"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5124"><highlight class="comment">idAnimatedEntity::Restore</highlight></codeline>
<codeline lineno="5125"><highlight class="comment"></highlight></codeline>
<codeline lineno="5126"><highlight class="comment">unarchives<sp/>object<sp/>from<sp/>save<sp/>game<sp/>file</highlight></codeline>
<codeline lineno="5127"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5128"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5129"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAnimatedEntity::Restore(<sp/><ref refid="classid_restore_game" kindref="compound">idRestoreGame</ref><sp/>*savefile<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/><sp/><sp/>animator.Restore(<sp/>savefile<sp/>);</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"></highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>the<sp/>entity<sp/>has<sp/>an<sp/>MD5<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>animator.ModelHandle()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>callback<sp/>to<sp/>update<sp/>the<sp/>joints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity.callback<sp/>=<sp/>idEntity::ModelCallback;</highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>animator.GetJoints(<sp/>&amp;renderEntity.numJoints,<sp/>&amp;renderEntity.joints<sp/>);</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>animator.GetBounds(<sp/>gameLocal.time,<sp/>renderEntity.bounds<sp/>);</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>modelDefHandle<sp/>!=<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;UpdateEntityDef(<sp/>modelDefHandle,<sp/>&amp;renderEntity<sp/>);</highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"></highlight></codeline>
<codeline lineno="5144"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5145"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5146"><highlight class="comment">idAnimatedEntity::ClientPredictionThink</highlight></codeline>
<codeline lineno="5147"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5148"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5149"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAnimatedEntity::ClientPredictionThink(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/><sp/><sp/>RunPhysics();</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateAnimation();</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/>Present();</highlight></codeline>
<codeline lineno="5153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"></highlight></codeline>
<codeline lineno="5155"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5156"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5157"><highlight class="comment">idAnimatedEntity::Think</highlight></codeline>
<codeline lineno="5158"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5159"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5160"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAnimatedEntity::Think(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/><sp/><sp/>RunPhysics();</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateAnimation();</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"><sp/><sp/><sp/><sp/>Present();</highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateDamageEffects();</highlight></codeline>
<codeline lineno="5165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5166"><highlight class="normal"></highlight></codeline>
<codeline lineno="5167"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5168"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5169"><highlight class="comment">idAnimatedEntity::UpdateAnimation</highlight></codeline>
<codeline lineno="5170"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5171"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5172"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAnimatedEntity::UpdateAnimation(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>do<sp/>animations<sp/>if<sp/>they&apos;re<sp/>not<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!(<sp/>thinkFlags<sp/>&amp;<sp/>TH_ANIMATE<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5177"><highlight class="normal"></highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>the<sp/>model<sp/>an<sp/>MD5?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!animator.ModelHandle()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no,<sp/>so<sp/>nothing<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5183"><highlight class="normal"></highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>any<sp/>frame<sp/>commands<sp/>that<sp/>have<sp/>happened<sp/>in<sp/>the<sp/>past<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!fl.hidden<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>animator.ServiceAnims(<sp/>gameLocal.previousTime,<sp/>gameLocal.time<sp/>);</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"></highlight></codeline>
<codeline lineno="5189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>model<sp/>is<sp/>animating<sp/>then<sp/>we<sp/>have<sp/>to<sp/>update<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!animator.FrameHasChanged(<sp/>gameLocal.time<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>still<sp/>fine<sp/>the<sp/>way<sp/>it<sp/>was</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5194"><highlight class="normal"></highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>latest<sp/>frame<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5196"><highlight class="normal"><sp/><sp/><sp/><sp/>animator.GetBounds(<sp/>gameLocal.time,<sp/>renderEntity.bounds<sp/>);</highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>renderEntity.bounds.IsCleared()<sp/>&amp;&amp;<sp/>!fl.hidden<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;%d:<sp/>inside<sp/>out<sp/>bounds\n&quot;</highlight><highlight class="normal">,<sp/>gameLocal.time<sp/>);</highlight></codeline>
<codeline lineno="5199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5200"><highlight class="normal"></highlight></codeline>
<codeline lineno="5201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>renderEntity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5202"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateVisuals();</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"></highlight></codeline>
<codeline lineno="5204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>animation<sp/>is<sp/>updated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5205"><highlight class="normal"><sp/><sp/><sp/><sp/>animator.ClearForceUpdate();</highlight></codeline>
<codeline lineno="5206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5207"><highlight class="normal"></highlight></codeline>
<codeline lineno="5208"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5209"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5210"><highlight class="comment">idAnimatedEntity::GetAnimator</highlight></codeline>
<codeline lineno="5211"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5212"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5213"><highlight class="normal"><ref refid="classid_animator" kindref="compound">idAnimator</ref><sp/>*idAnimatedEntity::GetAnimator(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;animator;</highlight></codeline>
<codeline lineno="5215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5216"><highlight class="normal"></highlight></codeline>
<codeline lineno="5217"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5218"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5219"><highlight class="comment">idAnimatedEntity::SetModel</highlight></codeline>
<codeline lineno="5220"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5221"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5222"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAnimatedEntity::SetModel(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*modelname<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5223"><highlight class="normal"><sp/><sp/><sp/><sp/>FreeModelDef();</highlight></codeline>
<codeline lineno="5224"><highlight class="normal"></highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.hModel<sp/>=<sp/>animator.SetModel(<sp/>modelname<sp/>);</highlight></codeline>
<codeline lineno="5226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!renderEntity.hModel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idEntity::SetModel(<sp/>modelname<sp/>);</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5230"><highlight class="normal"></highlight></codeline>
<codeline lineno="5231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!renderEntity.customSkin<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderEntity.customSkin<sp/>=<sp/>animator.ModelDef()-&gt;GetDefaultSkin();</highlight></codeline>
<codeline lineno="5233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"></highlight></codeline>
<codeline lineno="5235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>callback<sp/>to<sp/>update<sp/>the<sp/>joints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5236"><highlight class="normal"><sp/><sp/><sp/><sp/>renderEntity.callback<sp/>=<sp/>idEntity::ModelCallback;</highlight></codeline>
<codeline lineno="5237"><highlight class="normal"><sp/><sp/><sp/><sp/>animator.GetJoints(<sp/>&amp;renderEntity.numJoints,<sp/>&amp;renderEntity.joints<sp/>);</highlight></codeline>
<codeline lineno="5238"><highlight class="normal"><sp/><sp/><sp/><sp/>animator.GetBounds(<sp/>gameLocal.time,<sp/>renderEntity.bounds<sp/>);</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"></highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateVisuals();</highlight></codeline>
<codeline lineno="5241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5242"><highlight class="normal"></highlight></codeline>
<codeline lineno="5243"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5244"><highlight class="comment">=====================</highlight></codeline>
<codeline lineno="5245"><highlight class="comment">idAnimatedEntity::GetJointWorldTransform</highlight></codeline>
<codeline lineno="5246"><highlight class="comment">=====================</highlight></codeline>
<codeline lineno="5247"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5248"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAnimatedEntity::GetJointWorldTransform(<sp/>jointHandle_t<sp/>jointHandle,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentTime,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;offset,<sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>&amp;axis<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!animator.GetJointTransform(<sp/>jointHandle,<sp/>currentTime,<sp/>offset,<sp/>axis<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5252"><highlight class="normal"></highlight></codeline>
<codeline lineno="5253"><highlight class="normal"><sp/><sp/><sp/><sp/>ConvertLocalToWorldTransform(<sp/>offset,<sp/>axis<sp/>);</highlight></codeline>
<codeline lineno="5254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5256"><highlight class="normal"></highlight></codeline>
<codeline lineno="5257"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5258"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="5259"><highlight class="comment">idAnimatedEntity::GetJointTransformForAnim</highlight></codeline>
<codeline lineno="5260"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="5261"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5262"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAnimatedEntity::GetJointTransformForAnim(<sp/>jointHandle_t<sp/>jointHandle,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>animNum,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frameTime,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;offset,<sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>&amp;axis<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_anim" kindref="compound">idAnim</ref><sp/><sp/><sp/><sp/>*anim;</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numJoints;</highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_joint_mat" kindref="compound">idJointMat</ref><sp/><sp/><sp/><sp/><sp/><sp/>*frame;</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"></highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/><sp/><sp/>anim<sp/>=<sp/>animator.GetAnim(<sp/>animNum<sp/>);</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!anim<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"></highlight></codeline>
<codeline lineno="5273"><highlight class="normal"><sp/><sp/><sp/><sp/>numJoints<sp/>=<sp/>animator.NumJoints();</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>jointHandle<sp/>&lt;<sp/>0<sp/>)<sp/>||<sp/>(<sp/>jointHandle<sp/>&gt;=<sp/>numJoints<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5278"><highlight class="normal"></highlight></codeline>
<codeline lineno="5279"><highlight class="normal"><sp/><sp/><sp/><sp/>frame<sp/>=<sp/>(<sp/><ref refid="classid_joint_mat" kindref="compound">idJointMat</ref><sp/>*<sp/>)_alloca16(<sp/>numJoints<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="classid_joint_mat" kindref="compound">idJointMat</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"><sp/><sp/><sp/><sp/>gameEdit-&gt;ANIM_CreateAnimFrame(<sp/>animator.ModelHandle(),<sp/>anim-&gt;MD5Anim(<sp/>0<sp/>),<sp/>renderEntity.numJoints,<sp/>frame,<sp/>frameTime,<sp/>animator.ModelDef()-&gt;GetVisualOffset(),<sp/>animator.RemoveOrigin()<sp/>);</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"></highlight></codeline>
<codeline lineno="5282"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>frame[<sp/>jointHandle<sp/>].ToVec3();</highlight></codeline>
<codeline lineno="5283"><highlight class="normal"><sp/><sp/><sp/><sp/>axis<sp/>=<sp/>frame[<sp/>jointHandle<sp/>].ToMat3();</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"></highlight></codeline>
<codeline lineno="5288"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5289"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="5290"><highlight class="comment">idAnimatedEntity::AddDamageEffect</highlight></codeline>
<codeline lineno="5291"><highlight class="comment"></highlight></codeline>
<codeline lineno="5292"><highlight class="comment"><sp/><sp/>Dammage<sp/>effects<sp/>track<sp/>the<sp/>animating<sp/>impact<sp/>position,<sp/>spitting<sp/>out<sp/>particles.</highlight></codeline>
<codeline lineno="5293"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="5294"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5295"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAnimatedEntity::AddDamageEffect(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtrace__s" kindref="compound">trace_t</ref><sp/>&amp;collision,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;velocity,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*damageDefName<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/><sp/><sp/>jointHandle_t<sp/>jointNum;</highlight></codeline>
<codeline lineno="5297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>origin,<sp/>dir,<sp/>localDir,<sp/>localOrigin,<sp/>localNormal;</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>axis;</highlight></codeline>
<codeline lineno="5299"><highlight class="normal"></highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!g_bloodEffects.GetBool()<sp/>||<sp/>renderEntity.joints<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5303"><highlight class="normal"></highlight></codeline>
<codeline lineno="5304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_decl_entity_def" kindref="compound">idDeclEntityDef</ref><sp/>*def<sp/>=<sp/>gameLocal.FindEntityDef(<sp/>damageDefName,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>def<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"></highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><sp/><sp/>jointNum<sp/>=<sp/>CLIPMODEL_ID_TO_JOINT_HANDLE(<sp/>collision.c.id<sp/>);</highlight></codeline>
<codeline lineno="5310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>jointNum<sp/>==<sp/>INVALID_JOINT<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5313"><highlight class="normal"></highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>velocity;</highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/><sp/><sp/>dir.Normalize();</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"></highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/><sp/><sp/>axis<sp/>=<sp/>renderEntity.joints[jointNum].ToMat3()<sp/>*<sp/>renderEntity.axis;</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"><sp/><sp/><sp/><sp/>origin<sp/>=<sp/>renderEntity.origin<sp/>+<sp/>renderEntity.joints[jointNum].ToVec3()<sp/>*<sp/>renderEntity.axis;</highlight></codeline>
<codeline lineno="5319"><highlight class="normal"></highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/><sp/><sp/>localOrigin<sp/>=<sp/>(<sp/>collision.c.point<sp/>-<sp/>origin<sp/>)<sp/>*<sp/>axis.Transpose();</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/><sp/><sp/>localNormal<sp/>=<sp/>collision.c.normal<sp/>*<sp/>axis.Transpose();</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"><sp/><sp/><sp/><sp/>localDir<sp/>=<sp/>dir<sp/>*<sp/>axis.Transpose();</highlight></codeline>
<codeline lineno="5323"><highlight class="normal"></highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/><sp/><sp/>AddLocalDamageEffect(<sp/>jointNum,<sp/>localOrigin,<sp/>localNormal,<sp/>localDir,<sp/>def,<sp/>collision.c.material<sp/>);</highlight></codeline>
<codeline lineno="5325"><highlight class="normal"></highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.isServer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>msg;</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_EVENT_PARAM_SIZE];</highlight></codeline>
<codeline lineno="5329"><highlight class="normal"></highlight></codeline>
<codeline lineno="5330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.BeginWriting();</highlight></codeline>
<codeline lineno="5332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteShort(<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)jointNum<sp/>);</highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteFloat(<sp/>localOrigin[0]<sp/>);</highlight></codeline>
<codeline lineno="5334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteFloat(<sp/>localOrigin[1]<sp/>);</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteFloat(<sp/>localOrigin[2]<sp/>);</highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDir(<sp/>localNormal,<sp/>24<sp/>);</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteDir(<sp/>localDir,<sp/>24<sp/>);</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>gameLocal.ServerRemapDecl(<sp/>-1,<sp/>DECL_ENTITYDEF,<sp/>def-&gt;Index()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>gameLocal.ServerRemapDecl(<sp/>-1,<sp/>DECL_MATERIAL,<sp/>collision.c.material-&gt;Index()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ServerSendEvent(<sp/>EVENT_ADD_DAMAGE_EFFECT,<sp/>&amp;msg,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>-1<sp/>);</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5343"><highlight class="normal"></highlight></codeline>
<codeline lineno="5344"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5345"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="5346"><highlight class="comment">idAnimatedEntity::GetDefaultSurfaceType</highlight></codeline>
<codeline lineno="5347"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="5348"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5349"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idAnimatedEntity::GetDefaultSurfaceType(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SURFTYPE_METAL;</highlight></codeline>
<codeline lineno="5351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"></highlight></codeline>
<codeline lineno="5353"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5354"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="5355"><highlight class="comment">idAnimatedEntity::AddLocalDamageEffect</highlight></codeline>
<codeline lineno="5356"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="5357"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5358"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAnimatedEntity::AddLocalDamageEffect(<sp/>jointHandle_t<sp/>jointNum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;localOrigin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;localNormal,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;localDir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_decl_entity_def" kindref="compound">idDeclEntityDef</ref><sp/>*def,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_material" kindref="compound">idMaterial</ref><sp/>*collisionMaterial<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sound,<sp/>*splat,<sp/>*decal,<sp/>*bleed,<sp/>*key;</highlight></codeline>
<codeline lineno="5360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdamage_effect__s" kindref="compound">damageEffect_t</ref><sp/><sp/>*de;</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>origin,<sp/>dir;</highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>axis;</highlight></codeline>
<codeline lineno="5363"><highlight class="normal"></highlight></codeline>
<codeline lineno="5364"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="5365"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>SetTimeState<sp/>ts(<sp/>timeGroup<sp/>);</highlight></codeline>
<codeline lineno="5366"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="5367"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5368"><highlight class="normal"><sp/><sp/><sp/><sp/>axis<sp/>=<sp/>renderEntity.joints[jointNum].ToMat3()<sp/>*<sp/>renderEntity.axis;</highlight></codeline>
<codeline lineno="5369"><highlight class="normal"><sp/><sp/><sp/><sp/>origin<sp/>=<sp/>renderEntity.origin<sp/>+<sp/>renderEntity.joints[jointNum].ToVec3()<sp/>*<sp/>renderEntity.axis;</highlight></codeline>
<codeline lineno="5370"><highlight class="normal"></highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/><sp/><sp/>origin<sp/>=<sp/>origin<sp/>+<sp/>localOrigin<sp/>*<sp/>axis;</highlight></codeline>
<codeline lineno="5372"><highlight class="normal"><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>localDir<sp/>*<sp/>axis;</highlight></codeline>
<codeline lineno="5373"><highlight class="normal"></highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>collisionMaterial-&gt;GetSurfaceType();</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>type<sp/>==<sp/>SURFTYPE_NONE<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/>GetDefaultSurfaceType();</highlight></codeline>
<codeline lineno="5377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5378"><highlight class="normal"></highlight></codeline>
<codeline lineno="5379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*materialType<sp/>=<sp/>gameLocal.sufaceTypeNames[<sp/>type<sp/>];</highlight></codeline>
<codeline lineno="5380"><highlight class="normal"></highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>impact<sp/>sound<sp/>based<sp/>on<sp/>material<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><sp/><sp/><sp/><sp/>key<sp/>=<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;snd_%s&quot;</highlight><highlight class="normal">,<sp/>materialType<sp/>);</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"><sp/><sp/><sp/><sp/>sound<sp/>=<sp/>spawnArgs.GetString(<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="5384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*sound<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sound<sp/>=<sp/>def-&gt;dict.GetString(<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="5386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*sound<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StartSoundShader(<sp/>declManager-&gt;FindSound(<sp/>sound<sp/>),<sp/>SND_CHANNEL_BODY,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="5389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5390"><highlight class="normal"></highlight></codeline>
<codeline lineno="5391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>blood<sp/>splats<sp/>are<sp/>thrown<sp/>onto<sp/>nearby<sp/>surfaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5392"><highlight class="normal"><sp/><sp/><sp/><sp/>key<sp/>=<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;mtr_splat_%s&quot;</highlight><highlight class="normal">,<sp/>materialType<sp/>);</highlight></codeline>
<codeline lineno="5393"><highlight class="normal"><sp/><sp/><sp/><sp/>splat<sp/>=<sp/>spawnArgs.RandomPrefix(<sp/>key,<sp/>gameLocal.random<sp/>);</highlight></codeline>
<codeline lineno="5394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*splat<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splat<sp/>=<sp/>def-&gt;dict.RandomPrefix(<sp/>key,<sp/>gameLocal.random<sp/>);</highlight></codeline>
<codeline lineno="5396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*splat<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.BloodSplat(<sp/>origin,<sp/>dir,<sp/>64.0f,<sp/>splat<sp/>);</highlight></codeline>
<codeline lineno="5399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5400"><highlight class="normal"></highlight></codeline>
<codeline lineno="5401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>see<sp/>wounds<sp/>on<sp/>the<sp/>player<sp/>model<sp/>in<sp/>single<sp/>player<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!(<sp/>IsType(<sp/>idPlayer::Type<sp/>)<sp/>&amp;&amp;<sp/>!gameLocal.isMultiplayer<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>place<sp/>a<sp/>wound<sp/>overlay<sp/>on<sp/>the<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;mtr_wound_%s&quot;</highlight><highlight class="normal">,<sp/>materialType<sp/>);</highlight></codeline>
<codeline lineno="5405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decal<sp/>=<sp/>spawnArgs.RandomPrefix(<sp/>key,<sp/>gameLocal.random<sp/>);</highlight></codeline>
<codeline lineno="5406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*decal<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decal<sp/>=<sp/>def-&gt;dict.RandomPrefix(<sp/>key,<sp/>gameLocal.random<sp/>);</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*decal<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProjectOverlay(<sp/>origin,<sp/>dir,<sp/>20.0f,<sp/>decal<sp/>);</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5413"><highlight class="normal"></highlight></codeline>
<codeline lineno="5414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>blood<sp/>spurting<sp/>wound<sp/>is<sp/>added</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/><sp/><sp/>key<sp/>=<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;smoke_wound_%s&quot;</highlight><highlight class="normal">,<sp/>materialType<sp/>);</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/><sp/><sp/>bleed<sp/>=<sp/>spawnArgs.GetString(<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*bleed<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bleed<sp/>=<sp/>def-&gt;dict.GetString(<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*bleed<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>de<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structdamage_effect__s" kindref="compound">damageEffect_t</ref>;</highlight></codeline>
<codeline lineno="5422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>de-&gt;next<sp/>=<sp/>this-&gt;damageEffects;</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;damageEffects<sp/>=<sp/>de;</highlight></codeline>
<codeline lineno="5424"><highlight class="normal"></highlight></codeline>
<codeline lineno="5425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>de-&gt;jointNum<sp/>=<sp/>jointNum;</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>de-&gt;localOrigin<sp/>=<sp/>localOrigin;</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>de-&gt;localNormal<sp/>=<sp/>localNormal;</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>de-&gt;type<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classid_decl_particle" kindref="compound">idDeclParticle</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>declManager-&gt;FindType(<sp/>DECL_PARTICLE,<sp/>bleed<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>de-&gt;time<sp/>=<sp/>gameLocal.time;</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"></highlight></codeline>
<codeline lineno="5433"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5434"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="5435"><highlight class="comment">idAnimatedEntity::UpdateDamageEffects</highlight></codeline>
<codeline lineno="5436"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="5437"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5438"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAnimatedEntity::UpdateDamageEffects(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5439"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdamage_effect__s" kindref="compound">damageEffect_t</ref><sp/><sp/>*de,<sp/>**prev;</highlight></codeline>
<codeline lineno="5440"><highlight class="normal"></highlight></codeline>
<codeline lineno="5441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>any<sp/>that<sp/>have<sp/>timed<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5442"><highlight class="normal"><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>&amp;this-&gt;damageEffects;</highlight></codeline>
<codeline lineno="5443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>*prev<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>de<sp/>=<sp/>*prev;</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>de-&gt;time<sp/>==<sp/>0<sp/>)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:SMOKE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*prev<sp/>=<sp/>de-&gt;next;</highlight></codeline>
<codeline lineno="5447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>de;</highlight></codeline>
<codeline lineno="5448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>&amp;de-&gt;next;</highlight></codeline>
<codeline lineno="5450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5451"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"></highlight></codeline>
<codeline lineno="5453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!g_bloodEffects.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5456"><highlight class="normal"></highlight></codeline>
<codeline lineno="5457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>emit<sp/>a<sp/>particle<sp/>for<sp/>each<sp/>bleeding<sp/>wound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>de<sp/>=<sp/>this-&gt;damageEffects;<sp/>de;<sp/>de<sp/>=<sp/>de-&gt;next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>origin,<sp/>start;</highlight></codeline>
<codeline lineno="5460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>axis;</highlight></codeline>
<codeline lineno="5461"><highlight class="normal"></highlight></codeline>
<codeline lineno="5462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>animator.GetJointTransform(<sp/>de-&gt;jointNum,<sp/>gameLocal.time,<sp/>origin,<sp/>axis<sp/>);</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis<sp/>*=<sp/>renderEntity.axis;</highlight></codeline>
<codeline lineno="5464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>origin<sp/>=<sp/>renderEntity.origin<sp/>+<sp/>origin<sp/>*<sp/>renderEntity.axis;</highlight></codeline>
<codeline lineno="5465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>origin<sp/>+<sp/>de-&gt;localOrigin<sp/>*<sp/>axis;</highlight></codeline>
<codeline lineno="5466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!gameLocal.smokeParticles-&gt;EmitSmoke(<sp/>de-&gt;type,<sp/>de-&gt;time,<sp/>gameLocal.random.CRandomFloat(),<sp/>start,<sp/>axis,<sp/>timeGroup<sp/></highlight><highlight class="comment">/*_D3XP*/</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>de-&gt;time<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5471"><highlight class="normal"></highlight></codeline>
<codeline lineno="5472"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5473"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5474"><highlight class="comment">idAnimatedEntity::ClientReceiveEvent</highlight></codeline>
<codeline lineno="5475"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5476"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5477"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idAnimatedEntity::ClientReceiveEvent(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>event,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>damageDefIndex;</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>materialIndex;</highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/><sp/><sp/>jointHandle_t<sp/>jointNum;</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>localOrigin,<sp/>localNormal,<sp/>localDir;</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"></highlight></codeline>
<codeline lineno="5483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>event<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EVENT_ADD_DAMAGE_EFFECT:<sp/>{</highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jointNum<sp/>=<sp/>(jointHandle_t)<sp/>msg.ReadShort();</highlight></codeline>
<codeline lineno="5486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localOrigin[0]<sp/>=<sp/>msg.ReadFloat();</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localOrigin[1]<sp/>=<sp/>msg.ReadFloat();</highlight></codeline>
<codeline lineno="5488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localOrigin[2]<sp/>=<sp/>msg.ReadFloat();</highlight></codeline>
<codeline lineno="5489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localNormal<sp/>=<sp/>msg.ReadDir(<sp/>24<sp/>);</highlight></codeline>
<codeline lineno="5490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localDir<sp/>=<sp/>msg.ReadDir(<sp/>24<sp/>);</highlight></codeline>
<codeline lineno="5491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>damageDefIndex<sp/>=<sp/>gameLocal.ClientRemapDecl(<sp/>DECL_ENTITYDEF,<sp/>msg.ReadLong()<sp/>);</highlight></codeline>
<codeline lineno="5492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>materialIndex<sp/>=<sp/>gameLocal.ClientRemapDecl(<sp/>DECL_MATERIAL,<sp/>msg.ReadLong()<sp/>);</highlight></codeline>
<codeline lineno="5493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_decl_entity_def" kindref="compound">idDeclEntityDef</ref><sp/>*damageDef<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classid_decl_entity_def" kindref="compound">idDeclEntityDef</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>declManager-&gt;DeclByIndex(<sp/>DECL_ENTITYDEF,<sp/>damageDefIndex<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_material" kindref="compound">idMaterial</ref><sp/>*collisionMaterial<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classid_material" kindref="compound">idMaterial</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>declManager-&gt;DeclByIndex(<sp/>DECL_MATERIAL,<sp/>materialIndex<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddLocalDamageEffect(<sp/>jointNum,<sp/>localOrigin,<sp/>localNormal,<sp/>localDir,<sp/>damageDef,<sp/>collisionMaterial<sp/>);</highlight></codeline>
<codeline lineno="5496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idEntity::ClientReceiveEvent(<sp/>event,<sp/>time,<sp/>msg<sp/>);</highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"></highlight></codeline>
<codeline lineno="5505"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5506"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5507"><highlight class="comment">idAnimatedEntity::Event_GetJointHandle</highlight></codeline>
<codeline lineno="5508"><highlight class="comment"></highlight></codeline>
<codeline lineno="5509"><highlight class="comment">looks<sp/>up<sp/>the<sp/>number<sp/>of<sp/>the<sp/>specified<sp/>joint.<sp/><sp/>returns<sp/>INVALID_JOINT<sp/>if<sp/>the<sp/>joint<sp/>is<sp/>not<sp/>found.</highlight></codeline>
<codeline lineno="5510"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5511"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5512"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAnimatedEntity::Event_GetJointHandle(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*jointname<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5513"><highlight class="normal"><sp/><sp/><sp/><sp/>jointHandle_t<sp/>joint;</highlight></codeline>
<codeline lineno="5514"><highlight class="normal"></highlight></codeline>
<codeline lineno="5515"><highlight class="normal"><sp/><sp/><sp/><sp/>joint<sp/>=<sp/>animator.GetJointHandle(<sp/>jointname<sp/>);</highlight></codeline>
<codeline lineno="5516"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnInt(<sp/>joint<sp/>);</highlight></codeline>
<codeline lineno="5517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"></highlight></codeline>
<codeline lineno="5519"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5520"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5521"><highlight class="comment">idAnimatedEntity::Event_ClearAllJoints</highlight></codeline>
<codeline lineno="5522"><highlight class="comment"></highlight></codeline>
<codeline lineno="5523"><highlight class="comment">removes<sp/>any<sp/>custom<sp/>transforms<sp/>on<sp/>all<sp/>joints</highlight></codeline>
<codeline lineno="5524"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5525"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5526"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAnimatedEntity::Event_ClearAllJoints(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5527"><highlight class="normal"><sp/><sp/><sp/><sp/>animator.ClearAllJoints();</highlight></codeline>
<codeline lineno="5528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5529"><highlight class="normal"></highlight></codeline>
<codeline lineno="5530"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5531"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5532"><highlight class="comment">idAnimatedEntity::Event_ClearJoint</highlight></codeline>
<codeline lineno="5533"><highlight class="comment"></highlight></codeline>
<codeline lineno="5534"><highlight class="comment">removes<sp/>any<sp/>custom<sp/>transforms<sp/>on<sp/>the<sp/>specified<sp/>joint</highlight></codeline>
<codeline lineno="5535"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5536"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5537"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAnimatedEntity::Event_ClearJoint(<sp/>jointHandle_t<sp/>jointnum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5538"><highlight class="normal"><sp/><sp/><sp/><sp/>animator.ClearJoint(<sp/>jointnum<sp/>);</highlight></codeline>
<codeline lineno="5539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5540"><highlight class="normal"></highlight></codeline>
<codeline lineno="5541"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5542"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5543"><highlight class="comment">idAnimatedEntity::Event_SetJointPos</highlight></codeline>
<codeline lineno="5544"><highlight class="comment"></highlight></codeline>
<codeline lineno="5545"><highlight class="comment">modifies<sp/>the<sp/>position<sp/>of<sp/>the<sp/>joint<sp/>based<sp/>on<sp/>the<sp/>transform<sp/>type</highlight></codeline>
<codeline lineno="5546"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5547"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5548"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAnimatedEntity::Event_SetJointPos(<sp/>jointHandle_t<sp/>jointnum,<sp/>jointModTransform_t<sp/>transform_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5549"><highlight class="normal"><sp/><sp/><sp/><sp/>animator.SetJointPos(<sp/>jointnum,<sp/>transform_type,<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="5550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"></highlight></codeline>
<codeline lineno="5552"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5553"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5554"><highlight class="comment">idAnimatedEntity::Event_SetJointAngle</highlight></codeline>
<codeline lineno="5555"><highlight class="comment"></highlight></codeline>
<codeline lineno="5556"><highlight class="comment">modifies<sp/>the<sp/>orientation<sp/>of<sp/>the<sp/>joint<sp/>based<sp/>on<sp/>the<sp/>transform<sp/>type</highlight></codeline>
<codeline lineno="5557"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5558"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5559"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAnimatedEntity::Event_SetJointAngle(<sp/>jointHandle_t<sp/>jointnum,<sp/>jointModTransform_t<sp/>transform_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_angles" kindref="compound">idAngles</ref><sp/>&amp;angles<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5560"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>mat;</highlight></codeline>
<codeline lineno="5561"><highlight class="normal"></highlight></codeline>
<codeline lineno="5562"><highlight class="normal"><sp/><sp/><sp/><sp/>mat<sp/>=<sp/>angles.ToMat3();</highlight></codeline>
<codeline lineno="5563"><highlight class="normal"><sp/><sp/><sp/><sp/>animator.SetJointAxis(<sp/>jointnum,<sp/>transform_type,<sp/>mat<sp/>);</highlight></codeline>
<codeline lineno="5564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5565"><highlight class="normal"></highlight></codeline>
<codeline lineno="5566"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5567"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5568"><highlight class="comment">idAnimatedEntity::Event_GetJointPos</highlight></codeline>
<codeline lineno="5569"><highlight class="comment"></highlight></codeline>
<codeline lineno="5570"><highlight class="comment">returns<sp/>the<sp/>position<sp/>of<sp/>the<sp/>joint<sp/>in<sp/>worldspace</highlight></codeline>
<codeline lineno="5571"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5572"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5573"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAnimatedEntity::Event_GetJointPos(<sp/>jointHandle_t<sp/>jointnum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>offset;</highlight></codeline>
<codeline lineno="5575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>axis;</highlight></codeline>
<codeline lineno="5576"><highlight class="normal"></highlight></codeline>
<codeline lineno="5577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!GetJointWorldTransform(<sp/>jointnum,<sp/>gameLocal.time,<sp/>offset,<sp/>axis<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;Joint<sp/>#<sp/>%d<sp/>out<sp/>of<sp/>range<sp/>on<sp/>entity<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/><sp/>jointnum,<sp/>name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="5579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5580"><highlight class="normal"></highlight></codeline>
<codeline lineno="5581"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnVector(<sp/>offset<sp/>);</highlight></codeline>
<codeline lineno="5582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5583"><highlight class="normal"></highlight></codeline>
<codeline lineno="5584"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5585"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5586"><highlight class="comment">idAnimatedEntity::Event_GetJointAngle</highlight></codeline>
<codeline lineno="5587"><highlight class="comment"></highlight></codeline>
<codeline lineno="5588"><highlight class="comment">returns<sp/>the<sp/>orientation<sp/>of<sp/>the<sp/>joint<sp/>in<sp/>worldspace</highlight></codeline>
<codeline lineno="5589"><highlight class="comment">================</highlight></codeline>
<codeline lineno="5590"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5591"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idAnimatedEntity::Event_GetJointAngle(<sp/>jointHandle_t<sp/>jointnum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>offset;</highlight></codeline>
<codeline lineno="5593"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>axis;</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"></highlight></codeline>
<codeline lineno="5595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!GetJointWorldTransform(<sp/>jointnum,<sp/>gameLocal.time,<sp/>offset,<sp/>axis<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;Joint<sp/>#<sp/>%d<sp/>out<sp/>of<sp/>range<sp/>on<sp/>entity<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/><sp/>jointnum,<sp/>name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="5597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5598"><highlight class="normal"></highlight></codeline>
<codeline lineno="5599"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_angles" kindref="compound">idAngles</ref><sp/>ang<sp/>=<sp/>axis.ToAngles();</highlight></codeline>
<codeline lineno="5600"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>vec(<sp/>ang[<sp/>0<sp/>],<sp/>ang[<sp/>1<sp/>],<sp/>ang[<sp/>2<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="5601"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnVector(<sp/>vec<sp/>);</highlight></codeline>
<codeline lineno="5602"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/d3xp/Entity.cpp"/>
  </compounddef>
</doxygen>
