<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="d3xp_2physics_2_physics___rigid_body_8cpp" kind="file">
    <compoundname>Physics_RigidBody.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../../idlib/precompiled.h</includes>
    <includes refid="d3xp_2_game__local_8h" local="yes">../Game_local.h</includes>
      <sectiondef kind="define">
      <memberdef kind="define" id="d3xp_2physics_2_physics___rigid_body_8cpp_1aad8539ffe1c6229d0b158033754db024" prot="public" static="no">
        <name>MAX_INERTIA_SCALE</name>
        <initializer>10.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" line="597" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" bodystart="597" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d3xp_2physics_2_physics___rigid_body_8cpp_1a27b8a565916ee388c693889ccdb9f699" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float STOP_SPEED</definition>
        <argsstring></argsstring>
        <name>STOP_SPEED</name>
        <initializer>= 10.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" line="37" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2physics_2_physics___rigid_body_8cpp_1aa88643f696044c1e40030b08f8eb052d" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float RB_VELOCITY_MAX</definition>
        <argsstring></argsstring>
        <name>RB_VELOCITY_MAX</name>
        <initializer>= 16000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" line="1441" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" bodystart="1441" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2physics_2_physics___rigid_body_8cpp_1aa4a8140d5a9a33884a113f9301a77be9" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int RB_VELOCITY_TOTAL_BITS</definition>
        <argsstring></argsstring>
        <name>RB_VELOCITY_TOTAL_BITS</name>
        <initializer>= 16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" line="1442" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" bodystart="1442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2physics_2_physics___rigid_body_8cpp_1ae9f749f57697dfd439beacae8e295ec4" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int RB_VELOCITY_EXPONENT_BITS</definition>
        <argsstring></argsstring>
        <name>RB_VELOCITY_EXPONENT_BITS</name>
        <initializer>= idMath::BitsForInteger( idMath::BitsForFloat( RB_VELOCITY_MAX ) ) + 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" line="1443" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" bodystart="1443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2physics_2_physics___rigid_body_8cpp_1a29877cac89918c8f0569d1ad871bba18" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int RB_VELOCITY_MANTISSA_BITS</definition>
        <argsstring></argsstring>
        <name>RB_VELOCITY_MANTISSA_BITS</name>
        <initializer>= RB_VELOCITY_TOTAL_BITS - 1 - RB_VELOCITY_EXPONENT_BITS</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" line="1444" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" bodystart="1444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2physics_2_physics___rigid_body_8cpp_1aeec89b534fc37c31838ea97b43bf3d79" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float RB_MOMENTUM_MAX</definition>
        <argsstring></argsstring>
        <name>RB_MOMENTUM_MAX</name>
        <initializer>= 1e20f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" line="1445" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" bodystart="1445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2physics_2_physics___rigid_body_8cpp_1a8534049658fb8fd2848e6c16bb60f1bf" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int RB_MOMENTUM_TOTAL_BITS</definition>
        <argsstring></argsstring>
        <name>RB_MOMENTUM_TOTAL_BITS</name>
        <initializer>= 16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" line="1446" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" bodystart="1446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2physics_2_physics___rigid_body_8cpp_1a2c49ca2711e7ffb2b94b0f25c13bc147" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int RB_MOMENTUM_EXPONENT_BITS</definition>
        <argsstring></argsstring>
        <name>RB_MOMENTUM_EXPONENT_BITS</name>
        <initializer>= idMath::BitsForInteger( idMath::BitsForFloat( RB_MOMENTUM_MAX ) ) + 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" line="1447" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" bodystart="1447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2physics_2_physics___rigid_body_8cpp_1abdd067348243090b8416f2807cf60563" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int RB_MOMENTUM_MANTISSA_BITS</definition>
        <argsstring></argsstring>
        <name>RB_MOMENTUM_MANTISSA_BITS</name>
        <initializer>= RB_MOMENTUM_TOTAL_BITS - 1 - RB_MOMENTUM_EXPONENT_BITS</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" line="1448" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" bodystart="1448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2physics_2_physics___rigid_body_8cpp_1acc8e9ae20d0564f473d1a5e682c3bfec" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float RB_FORCE_MAX</definition>
        <argsstring></argsstring>
        <name>RB_FORCE_MAX</name>
        <initializer>= 1e20f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" line="1449" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" bodystart="1449" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2physics_2_physics___rigid_body_8cpp_1ac0228cbe0b25fab70c094fb5565c6516" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int RB_FORCE_TOTAL_BITS</definition>
        <argsstring></argsstring>
        <name>RB_FORCE_TOTAL_BITS</name>
        <initializer>= 16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" line="1450" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" bodystart="1450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2physics_2_physics___rigid_body_8cpp_1ac814df0dbf8d11a3aa4d9b1f6eafdb37" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int RB_FORCE_EXPONENT_BITS</definition>
        <argsstring></argsstring>
        <name>RB_FORCE_EXPONENT_BITS</name>
        <initializer>= idMath::BitsForInteger( idMath::BitsForFloat( RB_FORCE_MAX ) ) + 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" line="1451" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" bodystart="1451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2physics_2_physics___rigid_body_8cpp_1a634a6f6adef6e57a545e735b0834471b" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int RB_FORCE_MANTISSA_BITS</definition>
        <argsstring></argsstring>
        <name>RB_FORCE_MANTISSA_BITS</name>
        <initializer>= RB_FORCE_TOTAL_BITS - 1 - RB_FORCE_EXPONENT_BITS</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" line="1452" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" bodystart="1452" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d3xp_2physics_2_physics___rigid_body_8cpp_1a771ce0a4cd0a2c02c84cebc24427b138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RigidBodyDerivatives</definition>
        <argsstring>(const float t, const void *clientData, const float *state, float *derivatives)</argsstring>
        <name>RigidBodyDerivatives</name>
        <param>
          <type>const float</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>clientData</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>derivatives</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" line="54" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" bodystart="54" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="d3xp_2physics_2_physics___rigid_body_8cpp_1a68e2bf57b1c5549787523e08b9b77b11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idPhysics_RigidBody_SavePState</definition>
        <argsstring>(idSaveGame *savefile, const rigidBodyPState_t &amp;state)</argsstring>
        <name>idPhysics_RigidBody_SavePState</name>
        <param>
          <type><ref refid="classid_save_game" kindref="compound">idSaveGame</ref> *</type>
          <declname>savefile</declname>
        </param>
        <param>
          <type>const <ref refid="structrigid_body_p_state__s" kindref="compound">rigidBodyPState_t</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" line="495" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" bodystart="495" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="d3xp_2physics_2_physics___rigid_body_8cpp_1a3e1228164947e313e55aa1052c795ff3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void idPhysics_RigidBody_RestorePState</definition>
        <argsstring>(idRestoreGame *savefile, rigidBodyPState_t &amp;state)</argsstring>
        <name>idPhysics_RigidBody_RestorePState</name>
        <param>
          <type><ref refid="classid_restore_game" kindref="compound">idRestoreGame</ref> *</type>
          <declname>savefile</declname>
        </param>
        <param>
          <type><ref refid="structrigid_body_p_state__s" kindref="compound">rigidBodyPState_t</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" line="515" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp" bodystart="515" bodyend="528"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../Game_local.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">CLASS_DECLARATION(<sp/><ref refid="classid_physics___base" kindref="compound">idPhysics_Base</ref>,<sp/><ref refid="classid_physics___rigid_body" kindref="compound">idPhysics_RigidBody</ref><sp/>)</highlight></codeline>
<codeline lineno="35"><highlight class="normal">END_CLASS</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>STOP_SPEED<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>10.0f;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>RB_TIMINGS</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>RB_TIMINGS</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastTimerReset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numRigidBodies<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classid_timer" kindref="compound">idTimer</ref><sp/>timer_total,<sp/>timer_collision;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="50"><highlight class="comment">================</highlight></codeline>
<codeline lineno="51"><highlight class="comment">RigidBodyDerivatives</highlight></codeline>
<codeline lineno="52"><highlight class="comment">================</highlight></codeline>
<codeline lineno="53"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RigidBodyDerivatives(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*clientData,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*state,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*derivatives<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_physics___rigid_body" kindref="compound">idPhysics_RigidBody</ref><sp/>*p<sp/>=<sp/>(<ref refid="classid_physics___rigid_body" kindref="compound">idPhysics_RigidBody</ref><sp/>*)<sp/>clientData;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structridid_body_i_state__s" kindref="compound">rigidBodyIState_t</ref><sp/>*s<sp/>=<sp/>(<ref refid="structridid_body_i_state__s" kindref="compound">rigidBodyIState_t</ref><sp/>*)<sp/>state;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>this<sp/>struct<sp/>should<sp/>be<sp/>build<sp/>conform<sp/>rigidBodyIState_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rigidBodyDerivatives_s<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linearVelocity;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angularMatrix;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>force;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torque;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>*d<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rigidBodyDerivatives_s<sp/>*)<sp/>derivatives;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>angularVelocity;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>inverseWorldInertiaTensor;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>inverseWorldInertiaTensor<sp/>=<sp/>s-&gt;orientation<sp/>*<sp/>p-&gt;inverseInertiaTensor<sp/>*<sp/>s-&gt;orientation.Transpose();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>angularVelocity<sp/>=<sp/>inverseWorldInertiaTensor<sp/>*<sp/>s-&gt;angularMomentum;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>derivatives</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>d-&gt;linearVelocity<sp/>=<sp/>p-&gt;inverseMass<sp/>*<sp/>s-&gt;linearMomentum;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>d-&gt;angularMatrix<sp/>=<sp/>SkewSymmetric(<sp/>angularVelocity<sp/>)<sp/>*<sp/>s-&gt;orientation;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>d-&gt;force<sp/>=<sp/>-<sp/>p-&gt;linearFriction<sp/>*<sp/>s-&gt;linearMomentum<sp/>+<sp/>p-&gt;current.externalForce;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>d-&gt;torque<sp/>=<sp/>-<sp/>p-&gt;angularFriction<sp/>*<sp/>s-&gt;angularMomentum<sp/>+<sp/>p-&gt;current.externalTorque;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="77"><highlight class="comment">================</highlight></codeline>
<codeline lineno="78"><highlight class="comment">idPhysics_RigidBody::Integrate</highlight></codeline>
<codeline lineno="79"><highlight class="comment"></highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/>Calculate<sp/>next<sp/>state<sp/>from<sp/>the<sp/>current<sp/>state<sp/>using<sp/>an<sp/>integrator.</highlight></codeline>
<codeline lineno="81"><highlight class="comment">================</highlight></codeline>
<codeline lineno="82"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::Integrate(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deltaTime,<sp/><ref refid="structrigid_body_p_state__s" kindref="compound">rigidBodyPState_t</ref><sp/>&amp;next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>position;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>position<sp/>=<sp/>current.i.position;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.position<sp/>+=<sp/>centerOfMass<sp/>*<sp/>current.i.orientation;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.orientation.TransposeSelf();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>integrator-&gt;Evaluate(<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>&amp;current.i,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>&amp;next.i,<sp/>0,<sp/>deltaTime<sp/>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>next.i.orientation.OrthoNormalizeSelf();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>gravity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>next.i.linearMomentum<sp/>+=<sp/>deltaTime<sp/>*<sp/>gravityVector<sp/>*<sp/>mass;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.orientation.TransposeSelf();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>next.i.orientation.TransposeSelf();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.position<sp/>=<sp/>position;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>next.i.position<sp/>-=<sp/>centerOfMass<sp/>*<sp/>next.i.orientation;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>next.atRest<sp/>=<sp/>current.atRest;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="107"><highlight class="comment">================</highlight></codeline>
<codeline lineno="108"><highlight class="comment">idPhysics_RigidBody::CollisionImpulse</highlight></codeline>
<codeline lineno="109"><highlight class="comment"></highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/>Calculates<sp/>the<sp/>collision<sp/>impulse<sp/>using<sp/>the<sp/>velocity<sp/>relative<sp/>to<sp/>the<sp/>collision<sp/>object.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/>The<sp/>current<sp/>state<sp/>should<sp/>be<sp/>set<sp/>to<sp/>the<sp/>moment<sp/>of<sp/>impact.</highlight></codeline>
<codeline lineno="112"><highlight class="comment">================</highlight></codeline>
<codeline lineno="113"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::CollisionImpulse(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtrace__s" kindref="compound">trace_t</ref><sp/>&amp;collision,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;impulse<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>r,<sp/>linearVelocity,<sp/>angularVelocity,<sp/>velocity;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>inverseWorldInertiaTensor;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>impulseNumerator,<sp/>impulseDenominator,<sp/>vel;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structimpact_info__s" kindref="compound">impactInfo_t</ref><sp/>info;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>info<sp/>from<sp/>other<sp/>entity<sp/>involved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>gameLocal.entities[collision.c.entityNum];</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>ent-&gt;GetImpactInfo(<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>collision.c.id,<sp/>collision.c.point,<sp/>&amp;info<sp/>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>collision<sp/>point<sp/>relative<sp/>to<sp/>the<sp/>body<sp/>center<sp/>of<sp/>mass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>collision.c.point<sp/>-<sp/>(<sp/>current.i.position<sp/>+<sp/>centerOfMass<sp/>*<sp/>current.i.orientation<sp/>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>velocity<sp/>at<sp/>the<sp/>collision<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>linearVelocity<sp/>=<sp/>inverseMass<sp/>*<sp/>current.i.linearMomentum;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>inverseWorldInertiaTensor<sp/>=<sp/>current.i.orientation.Transpose()<sp/>*<sp/>inverseInertiaTensor<sp/>*<sp/>current.i.orientation;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>angularVelocity<sp/>=<sp/>inverseWorldInertiaTensor<sp/>*<sp/>current.i.angularMomentum;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>velocity<sp/>=<sp/>linearVelocity<sp/>+<sp/>angularVelocity.Cross(r);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subtract<sp/>velocity<sp/>of<sp/>other<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>velocity<sp/>-=<sp/>info.velocity;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>velocity<sp/>in<sp/>normal<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>vel<sp/>=<sp/>velocity<sp/>*<sp/>collision.c.normal;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vel<sp/>&gt;<sp/>-STOP_SPEED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulseNumerator<sp/>=<sp/>STOP_SPEED;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulseNumerator<sp/>=<sp/>-(<sp/>1.0f<sp/>+<sp/>bouncyness<sp/>)<sp/>*<sp/>vel;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>impulseDenominator<sp/>=<sp/>inverseMass<sp/>+<sp/>(<sp/>(<sp/>inverseWorldInertiaTensor<sp/>*<sp/>r.Cross(<sp/>collision.c.normal<sp/>)<sp/>).Cross(<sp/>r<sp/>)<sp/>*<sp/>collision.c.normal<sp/>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>info.invMass<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulseDenominator<sp/>+=<sp/>info.invMass<sp/>+<sp/>(<sp/>(<sp/>info.invInertiaTensor<sp/>*<sp/>info.position.Cross(<sp/>collision.c.normal<sp/>)<sp/>).Cross(<sp/>info.position<sp/>)<sp/>*<sp/>collision.c.normal<sp/>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>impulse<sp/>=<sp/>(impulseNumerator<sp/>/<sp/>impulseDenominator)<sp/>*<sp/>collision.c.normal;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>linear<sp/>and<sp/>angular<sp/>momentum<sp/>with<sp/>impulse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.linearMomentum<sp/>+=<sp/>impulse;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.angularMomentum<sp/>+=<sp/>r.Cross(impulse);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>no<sp/>movement<sp/>at<sp/>all<sp/>don&apos;t<sp/>blow<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>collision.fraction<sp/>&lt;<sp/>0.0001f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.i.linearMomentum<sp/>*=<sp/>0.5f;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.i.angularMomentum<sp/>*=<sp/>0.5f;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>callback<sp/>to<sp/>self<sp/>to<sp/>let<sp/>the<sp/>entity<sp/>know<sp/>about<sp/>the<sp/>collision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;Collide(<sp/>collision,<sp/>velocity<sp/>);</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="165"><highlight class="comment">================</highlight></codeline>
<codeline lineno="166"><highlight class="comment">idPhysics_RigidBody::CheckForCollisions</highlight></codeline>
<codeline lineno="167"><highlight class="comment"></highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/>Check<sp/>for<sp/>collisions<sp/>between<sp/>the<sp/>current<sp/>and<sp/>next<sp/>state.</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/>If<sp/>there<sp/>is<sp/>a<sp/>collision<sp/>the<sp/>next<sp/>state<sp/>is<sp/>set<sp/>to<sp/>the<sp/>state<sp/>at<sp/>the<sp/>moment<sp/>of<sp/>impact.</highlight></codeline>
<codeline lineno="170"><highlight class="comment">================</highlight></codeline>
<codeline lineno="171"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::CheckForCollisions(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deltaTime,<sp/><ref refid="structrigid_body_p_state__s" kindref="compound">rigidBodyPState_t</ref><sp/>&amp;next,<sp/><ref refid="structtrace__s" kindref="compound">trace_t</ref><sp/>&amp;collision<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>TEST_COLLISION_DETECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>axis;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>rotation;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>collided<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TEST_COLLISION_DETECTION</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>startsolid;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.clip.Contents(<sp/>current.i.position,<sp/>clipModel,<sp/>current.i.orientation,<sp/>clipMask,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startsolid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>TransposeMultiply(<sp/>current.i.orientation,<sp/>next.i.orientation,<sp/>axis<sp/>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>rotation<sp/>=<sp/>axis.ToRotation();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>rotation.SetOrigin(<sp/>current.i.position<sp/>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>was<sp/>a<sp/>collision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.clip.Motion(<sp/>collision,<sp/>current.i.position,<sp/>next.i.position,<sp/>rotation,<sp/>clipModel,<sp/>current.i.orientation,<sp/>clipMask,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>next<sp/>state<sp/>to<sp/>the<sp/>state<sp/>at<sp/>the<sp/>moment<sp/>of<sp/>impact</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next.i.position<sp/>=<sp/>collision.endpos;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next.i.orientation<sp/>=<sp/>collision.endAxis;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next.i.linearMomentum<sp/>=<sp/>current.i.linearMomentum;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next.i.angularMomentum<sp/>=<sp/>current.i.angularMomentum;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collided<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TEST_COLLISION_DETECTION</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.clip.Contents(<sp/>next.i.position,<sp/>clipModel,<sp/>next.i.orientation,<sp/>clipMask,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!startsolid<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bah<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>collided;</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="210"><highlight class="comment">================</highlight></codeline>
<codeline lineno="211"><highlight class="comment">idPhysics_RigidBody::ContactFriction</highlight></codeline>
<codeline lineno="212"><highlight class="comment"></highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/>Does<sp/>not<sp/>solve<sp/>friction<sp/>for<sp/>multiple<sp/>simultaneous<sp/>contacts<sp/>but<sp/>applies<sp/>contact<sp/>friction<sp/>in<sp/>isolation.</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/>Uses<sp/>absolute<sp/>velocity<sp/>at<sp/>the<sp/>contact<sp/>points<sp/>instead<sp/>of<sp/>the<sp/>velocity<sp/>relative<sp/>to<sp/>the<sp/>contact<sp/>object.</highlight></codeline>
<codeline lineno="215"><highlight class="comment">================</highlight></codeline>
<codeline lineno="216"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::ContactFriction(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deltaTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>magnitude,<sp/>impulseNumerator,<sp/>impulseDenominator;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>inverseWorldInertiaTensor;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>linearVelocity,<sp/>angularVelocity;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>massCenter,<sp/>r,<sp/>velocity,<sp/>normal,<sp/>impulse,<sp/>normalVelocity;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>inverseWorldInertiaTensor<sp/>=<sp/>current.i.orientation.Transpose()<sp/>*<sp/>inverseInertiaTensor<sp/>*<sp/>current.i.orientation;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>massCenter<sp/>=<sp/>current.i.position<sp/>+<sp/>centerOfMass<sp/>*<sp/>current.i.orientation;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>contacts.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>contacts[i].point<sp/>-<sp/>massCenter;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>velocity<sp/>at<sp/>contact<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linearVelocity<sp/>=<sp/>inverseMass<sp/>*<sp/>current.i.linearMomentum;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angularVelocity<sp/>=<sp/>inverseWorldInertiaTensor<sp/>*<sp/>current.i.angularMomentum;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocity<sp/>=<sp/>linearVelocity<sp/>+<sp/>angularVelocity.Cross(r);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>velocity<sp/>along<sp/>normal<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalVelocity<sp/>=<sp/>(<sp/>velocity<sp/>*<sp/>contacts[i].normal<sp/>)<sp/>*<sp/>contacts[i].normal;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>friction<sp/>impulse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normal<sp/>=<sp/>-(<sp/>velocity<sp/>-<sp/>normalVelocity<sp/>);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>magnitude<sp/>=<sp/>normal.Normalize();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulseNumerator<sp/>=<sp/>contactFriction<sp/>*<sp/>magnitude;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulseDenominator<sp/>=<sp/>inverseMass<sp/>+<sp/>(<sp/>(<sp/>inverseWorldInertiaTensor<sp/>*<sp/>r.Cross(<sp/>normal<sp/>)<sp/>).Cross(<sp/>r<sp/>)<sp/>*<sp/>normal<sp/>);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulse<sp/>=<sp/>(impulseNumerator<sp/>/<sp/>impulseDenominator)<sp/>*<sp/>normal;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>friction<sp/>impulse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.i.linearMomentum<sp/>+=<sp/>impulse;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.i.angularMomentum<sp/>+=<sp/>r.Cross(impulse);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>moving<sp/>towards<sp/>the<sp/>surface<sp/>at<sp/>the<sp/>contact<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>normalVelocity<sp/>*<sp/>contacts[i].normal<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>impulse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normal<sp/>=<sp/>-normalVelocity;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulseNumerator<sp/>=<sp/>normal.Normalize();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulseDenominator<sp/>=<sp/>inverseMass<sp/>+<sp/>(<sp/>(<sp/>inverseWorldInertiaTensor<sp/>*<sp/>r.Cross(<sp/>normal<sp/>)<sp/>).Cross(<sp/>r<sp/>)<sp/>*<sp/>normal<sp/>);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulse<sp/>=<sp/>(impulseNumerator<sp/>/<sp/>impulseDenominator)<sp/>*<sp/>normal;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>impulse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.i.linearMomentum<sp/>+=<sp/>impulse;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.i.angularMomentum<sp/>+=<sp/>r.Cross(<sp/>impulse<sp/>);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="267"><highlight class="comment">================</highlight></codeline>
<codeline lineno="268"><highlight class="comment">idPhysics_RigidBody::TestIfAtRest</highlight></codeline>
<codeline lineno="269"><highlight class="comment"></highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/>Returns<sp/>true<sp/>if<sp/>the<sp/>body<sp/>is<sp/>considered<sp/>at<sp/>rest.</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/>Does<sp/>not<sp/>catch<sp/>all<sp/>cases<sp/>where<sp/>the<sp/>body<sp/>is<sp/>at<sp/>rest<sp/>but<sp/>is<sp/>generally<sp/>good<sp/>enough.</highlight></codeline>
<codeline lineno="272"><highlight class="comment">================</highlight></codeline>
<codeline lineno="273"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::TestIfAtRest(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gv;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>v,<sp/>av,<sp/>normal,<sp/>point;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>inverseWorldInertiaTensor;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_fixed_winding" kindref="compound">idFixedWinding</ref><sp/>contactWinding;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>current.atRest<sp/>&gt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>at<sp/>least<sp/>3<sp/>contact<sp/>points<sp/>to<sp/>come<sp/>to<sp/>rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>contacts.Num()<sp/>&lt;<sp/>3<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>average<sp/>contact<sp/>plane<sp/>normal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>normal.Zero();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>contacts.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normal<sp/>+=<sp/>contacts[i].normal;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>normal<sp/>/=<sp/>(float)<sp/>contacts.Num();</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>normal.Normalize();</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>on<sp/>a<sp/>too<sp/>steep<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(normal<sp/>*<sp/>gravityNormal)<sp/>&gt;<sp/>-0.7f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>bounds<sp/>for<sp/>contact<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>contactWinding.Clear();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>contacts.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>project<sp/>point<sp/>onto<sp/>plane<sp/>through<sp/>origin<sp/>orthogonal<sp/>to<sp/>the<sp/>gravity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point<sp/>=<sp/>contacts[i].point<sp/>-<sp/>(contacts[i].point<sp/>*<sp/>gravityNormal)<sp/>*<sp/>gravityNormal;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contactWinding.AddToConvexHull(<sp/>point,<sp/>gravityNormal<sp/>);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>at<sp/>least<sp/>3<sp/>contact<sp/>points<sp/>to<sp/>come<sp/>to<sp/>rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>contactWinding.GetNumPoints()<sp/>&lt;<sp/>3<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>center<sp/>of<sp/>mass<sp/>in<sp/>world<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>point<sp/>=<sp/>current.i.position<sp/>+<sp/>centerOfMass<sp/>*<sp/>current.i.orientation;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>point<sp/>-=<sp/>(point<sp/>*<sp/>gravityNormal)<sp/>*<sp/>gravityNormal;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>point<sp/>is<sp/>not<sp/>inside<sp/>the<sp/>winding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!contactWinding.PointInside(<sp/>gravityNormal,<sp/>point,<sp/>0<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>linear<sp/>velocity<sp/>of<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>inverseMass<sp/>*<sp/>current.i.linearMomentum;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>linear<sp/>velocity<sp/>in<sp/>gravity<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>gv<sp/>=<sp/>v<sp/>*<sp/>gravityNormal;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>linear<sp/>velocity<sp/>orthogonal<sp/>to<sp/>gravity<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>-=<sp/>gv<sp/>*<sp/>gravityNormal;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>too<sp/>much<sp/>velocity<sp/>orthogonal<sp/>to<sp/>gravity<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>v.Length()<sp/>&gt;<sp/>STOP_SPEED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>too<sp/>much<sp/>velocity<sp/>in<sp/>gravity<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gv<sp/>&gt;<sp/>2.0f<sp/>*<sp/>STOP_SPEED<sp/>||<sp/>gv<sp/>&lt;<sp/>-2.0f<sp/>*<sp/>STOP_SPEED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>rotational<sp/>velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>inverseWorldInertiaTensor<sp/>=<sp/>current.i.orientation<sp/>*<sp/>inverseInertiaTensor<sp/>*<sp/>current.i.orientation.Transpose();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>av<sp/>=<sp/>inverseWorldInertiaTensor<sp/>*<sp/>current.i.angularMomentum;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>too<sp/>much<sp/>rotational<sp/>velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>av.LengthSqr()<sp/>&gt;<sp/>STOP_SPEED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="354"><highlight class="comment">================</highlight></codeline>
<codeline lineno="355"><highlight class="comment">idPhysics_RigidBody::DropToFloorAndRest</highlight></codeline>
<codeline lineno="356"><highlight class="comment"></highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/><sp/>Drops<sp/>the<sp/>object<sp/>straight<sp/>down<sp/>to<sp/>the<sp/>floor<sp/>and<sp/>verifies<sp/>if<sp/>the<sp/>object<sp/>is<sp/>at<sp/>rest<sp/>on<sp/>the<sp/>floor.</highlight></codeline>
<codeline lineno="358"><highlight class="comment">================</highlight></codeline>
<codeline lineno="359"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::DropToFloorAndRest(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>down;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtrace__s" kindref="compound">trace_t</ref><sp/>tr;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>testSolid<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testSolid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.clip.Contents(<sp/>current.i.position,<sp/>clipModel,<sp/>current.i.orientation,<sp/>clipMask,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.DWarning(<sp/></highlight><highlight class="stringliteral">&quot;rigid<sp/>body<sp/>in<sp/>solid<sp/>for<sp/>entity<sp/>&apos;%s&apos;<sp/>type<sp/>&apos;%s&apos;<sp/>at<sp/>(%s)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self-&gt;name.c_str(),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;GetType()-&gt;classname,<sp/>current.i.position.ToString(0)<sp/>);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rest();</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dropToFloor<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>the<sp/>body<sp/>on<sp/>the<sp/>floor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>down<sp/>=<sp/>current.i.position<sp/>+<sp/>gravityNormal<sp/>*<sp/>128.0f;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.clip.Translation(<sp/>tr,<sp/>current.i.position,<sp/>down,<sp/>clipModel,<sp/>current.i.orientation,<sp/>clipMask,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.position<sp/>=<sp/>tr.endpos;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>clipModel-&gt;Link(<sp/>gameLocal.clip,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>clipModel-&gt;GetId(),<sp/>tr.endpos,<sp/>current.i.orientation<sp/>);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>on<sp/>the<sp/>floor<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tr.fraction<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>if<sp/>we<sp/>are<sp/>really<sp/>at<sp/>rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EvaluateContacts();</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!TestIfAtRest()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.DWarning(<sp/></highlight><highlight class="stringliteral">&quot;rigid<sp/>body<sp/>not<sp/>at<sp/>rest<sp/>for<sp/>entity<sp/>&apos;%s&apos;<sp/>type<sp/>&apos;%s&apos;<sp/>at<sp/>(%s)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self-&gt;name.c_str(),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;GetType()-&gt;classname,<sp/>current.i.position.ToString(0)<sp/>);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rest();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dropToFloor<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>IsOutsideWorld()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;rigid<sp/>body<sp/>outside<sp/>world<sp/>bounds<sp/>for<sp/>entity<sp/>&apos;%s&apos;<sp/>type<sp/>&apos;%s&apos;<sp/>at<sp/>(%s)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self-&gt;name.c_str(),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;GetType()-&gt;classname,<sp/>current.i.position.ToString(0)<sp/>);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rest();</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dropToFloor<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="402"><highlight class="comment">================</highlight></codeline>
<codeline lineno="403"><highlight class="comment">idPhysics_RigidBody::DebugDraw</highlight></codeline>
<codeline lineno="404"><highlight class="comment">================</highlight></codeline>
<codeline lineno="405"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::DebugDraw(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rb_showBodies.GetBool()<sp/>||<sp/>(<sp/>rb_showActive.GetBool()<sp/>&amp;&amp;<sp/>current.atRest<sp/>&lt;<sp/>0<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collisionModelManager-&gt;DrawModel(<sp/>clipModel-&gt;Handle(),<sp/>clipModel-&gt;GetOrigin(),<sp/>clipModel-&gt;GetAxis(),<sp/>vec3_origin,<sp/>0.0f<sp/>);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rb_showMass.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DrawText(<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;\n%1.2f&quot;</highlight><highlight class="normal">,<sp/>mass<sp/>),<sp/>current.i.position,<sp/>0.08f,<sp/>colorCyan,<sp/>gameLocal.GetLocalPlayer()-&gt;viewAngles.ToMat3(),<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rb_showInertia.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>&amp;I<sp/>=<sp/>inertiaTensor;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DrawText(<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;\n\n\n(<sp/>%.1f<sp/>%.1f<sp/>%.1f<sp/>)\n(<sp/>%.1f<sp/>%.1f<sp/>%.1f<sp/>)\n(<sp/>%.1f<sp/>%.1f<sp/>%.1f<sp/>)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I[0].x,<sp/>I[0].y,<sp/>I[0].z,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I[1].x,<sp/>I[1].y,<sp/>I[1].z,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I[2].x,<sp/>I[2].y,<sp/>I[2].z<sp/>),</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.i.position,<sp/>0.05f,<sp/>colorCyan,<sp/>gameLocal.GetLocalPlayer()-&gt;viewAngles.ToMat3(),<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rb_showVelocity.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DrawVelocity(<sp/>clipModel-&gt;GetId(),<sp/>0.1f,<sp/>4.0f<sp/>);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="431"><highlight class="comment">================</highlight></codeline>
<codeline lineno="432"><highlight class="comment">idPhysics_RigidBody::idPhysics_RigidBody</highlight></codeline>
<codeline lineno="433"><highlight class="comment">================</highlight></codeline>
<codeline lineno="434"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal">idPhysics_RigidBody::idPhysics_RigidBody(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>default<sp/>rigid<sp/>body<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>SetClipMask(<sp/>MASK_SOLID<sp/>);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>SetBouncyness(<sp/>0.6f<sp/>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>SetFriction(<sp/>0.6f,<sp/>0.6f,<sp/>0.0f<sp/>);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>clipModel<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>&amp;current,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>current<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>current.atRest<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>current.lastTimeStep<sp/>=<sp/>USERCMD_MSEC;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.position.Zero();</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.orientation.Identity();</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.linearMomentum.Zero();</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.angularMomentum.Zero();</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>saved<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>mass<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>inverseMass<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>centerOfMass.Zero();</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>inertiaTensor.Identity();</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>inverseInertiaTensor.Identity();</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>the<sp/>least<sp/>expensive<sp/>euler<sp/>integrator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>integrator<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_o_d_e___euler" kindref="compound">idODE_Euler</ref>(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structridid_body_i_state__s" kindref="compound">rigidBodyIState_t</ref>)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>RigidBodyDerivatives,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>dropToFloor<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>noImpact<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>noContact<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>hasMaster<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>isOrientated<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>RB_TIMINGS</highlight></codeline>
<codeline lineno="473"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>lastTimerReset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="475"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="478"><highlight class="comment">================</highlight></codeline>
<codeline lineno="479"><highlight class="comment">idPhysics_RigidBody::~idPhysics_RigidBody</highlight></codeline>
<codeline lineno="480"><highlight class="comment">================</highlight></codeline>
<codeline lineno="481"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal">idPhysics_RigidBody::~idPhysics_RigidBody(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clipModel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>clipModel;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clipModel<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>integrator;</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="491"><highlight class="comment">================</highlight></codeline>
<codeline lineno="492"><highlight class="comment">idPhysics_RigidBody_SavePState</highlight></codeline>
<codeline lineno="493"><highlight class="comment">================</highlight></codeline>
<codeline lineno="494"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody_SavePState(<sp/><ref refid="classid_save_game" kindref="compound">idSaveGame</ref><sp/>*savefile,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrigid_body_p_state__s" kindref="compound">rigidBodyPState_t</ref><sp/>&amp;state<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteInt(<sp/>state.atRest<sp/>);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteFloat(<sp/>state.lastTimeStep<sp/>);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteVec3(<sp/>state.localOrigin<sp/>);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteMat3(<sp/>state.localAxis<sp/>);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteVec6(<sp/>state.pushVelocity<sp/>);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteVec3(<sp/>state.externalForce<sp/>);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteVec3(<sp/>state.externalTorque<sp/>);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteVec3(<sp/>state.i.position<sp/>);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteMat3(<sp/>state.i.orientation<sp/>);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteVec3(<sp/>state.i.linearMomentum<sp/>);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteVec3(<sp/>state.i.angularMomentum<sp/>);</highlight></codeline>
<codeline lineno="508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="511"><highlight class="comment">================</highlight></codeline>
<codeline lineno="512"><highlight class="comment">idPhysics_RigidBody_RestorePState</highlight></codeline>
<codeline lineno="513"><highlight class="comment">================</highlight></codeline>
<codeline lineno="514"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody_RestorePState(<sp/><ref refid="classid_restore_game" kindref="compound">idRestoreGame</ref><sp/>*savefile,<sp/><ref refid="structrigid_body_p_state__s" kindref="compound">rigidBodyPState_t</ref><sp/>&amp;state<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadInt(<sp/>state.atRest<sp/>);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadFloat(<sp/>state.lastTimeStep<sp/>);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadVec3(<sp/>state.localOrigin<sp/>);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadMat3(<sp/>state.localAxis<sp/>);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadVec6(<sp/>state.pushVelocity<sp/>);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadVec3(<sp/>state.externalForce<sp/>);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadVec3(<sp/>state.externalTorque<sp/>);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadVec3(<sp/>state.i.position<sp/>);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadMat3(<sp/>state.i.orientation<sp/>);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadVec3(<sp/>state.i.linearMomentum<sp/>);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadVec3(<sp/>state.i.angularMomentum<sp/>);</highlight></codeline>
<codeline lineno="528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="531"><highlight class="comment">================</highlight></codeline>
<codeline lineno="532"><highlight class="comment">idPhysics_RigidBody::Save</highlight></codeline>
<codeline lineno="533"><highlight class="comment">================</highlight></codeline>
<codeline lineno="534"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::Save(<sp/><ref refid="classid_save_game" kindref="compound">idSaveGame</ref><sp/>*savefile<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>idPhysics_RigidBody_SavePState(<sp/>savefile,<sp/>current<sp/>);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>idPhysics_RigidBody_SavePState(<sp/>savefile,<sp/>saved<sp/>);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteFloat(<sp/>linearFriction<sp/>);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteFloat(<sp/>angularFriction<sp/>);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteFloat(<sp/>contactFriction<sp/>);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteFloat(<sp/>bouncyness<sp/>);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteClipModel(<sp/>clipModel<sp/>);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteFloat(<sp/>mass<sp/>);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteFloat(<sp/>inverseMass<sp/>);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteVec3(<sp/>centerOfMass<sp/>);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteMat3(<sp/>inertiaTensor<sp/>);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteMat3(<sp/>inverseInertiaTensor<sp/>);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteBool(<sp/>dropToFloor<sp/>);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteBool(<sp/>testSolid<sp/>);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteBool(<sp/>noImpact<sp/>);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteBool(<sp/>noContact<sp/>);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteBool(<sp/>hasMaster<sp/>);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteBool(<sp/>isOrientated<sp/>);</highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="562"><highlight class="comment">================</highlight></codeline>
<codeline lineno="563"><highlight class="comment">idPhysics_RigidBody::Restore</highlight></codeline>
<codeline lineno="564"><highlight class="comment">================</highlight></codeline>
<codeline lineno="565"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::Restore(<sp/><ref refid="classid_restore_game" kindref="compound">idRestoreGame</ref><sp/>*savefile<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>idPhysics_RigidBody_RestorePState(<sp/>savefile,<sp/>current<sp/>);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>idPhysics_RigidBody_RestorePState(<sp/>savefile,<sp/>saved<sp/>);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadFloat(<sp/>linearFriction<sp/>);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadFloat(<sp/>angularFriction<sp/>);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadFloat(<sp/>contactFriction<sp/>);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadFloat(<sp/>bouncyness<sp/>);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadClipModel(<sp/>clipModel<sp/>);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadFloat(<sp/>mass<sp/>);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadFloat(<sp/>inverseMass<sp/>);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadVec3(<sp/>centerOfMass<sp/>);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadMat3(<sp/>inertiaTensor<sp/>);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadMat3(<sp/>inverseInertiaTensor<sp/>);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadBool(<sp/>dropToFloor<sp/>);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadBool(<sp/>testSolid<sp/>);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadBool(<sp/>noImpact<sp/>);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadBool(<sp/>noContact<sp/>);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadBool(<sp/>hasMaster<sp/>);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadBool(<sp/>isOrientated<sp/>);</highlight></codeline>
<codeline lineno="590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="593"><highlight class="comment">================</highlight></codeline>
<codeline lineno="594"><highlight class="comment">idPhysics_RigidBody::SetClipModel</highlight></codeline>
<codeline lineno="595"><highlight class="comment">================</highlight></codeline>
<codeline lineno="596"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_INERTIA_SCALE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>10.0f</highlight></codeline>
<codeline lineno="598"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::SetClipModel(<sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref><sp/>*model,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>density,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>freeOld<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minIndex;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>inertiaScale;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>model<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>a<sp/>clip<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>model-&gt;IsTraceModel()<sp/>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>it<sp/>should<sp/>be<sp/>a<sp/>trace<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>density<sp/>&gt;<sp/>0.0f<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>density<sp/>should<sp/>be<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clipModel<sp/>&amp;&amp;<sp/>clipModel<sp/>!=<sp/>model<sp/>&amp;&amp;<sp/>freeOld<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>clipModel;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>clipModel<sp/>=<sp/>model;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>clipModel-&gt;Link(<sp/>gameLocal.clip,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>0,<sp/>current.i.position,<sp/>current.i.orientation<sp/>);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>mass<sp/>properties<sp/>from<sp/>the<sp/>trace<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>clipModel-&gt;GetMassProperties(<sp/>density,<sp/>mass,<sp/>centerOfMass,<sp/>inertiaTensor<sp/>);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>whether<sp/>or<sp/>not<sp/>the<sp/>clip<sp/>model<sp/>has<sp/>valid<sp/>mass<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mass<sp/>&lt;=<sp/>0.0f<sp/>||<sp/>FLOAT_IS_NAN(<sp/>mass<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;idPhysics_RigidBody::SetClipModel:<sp/>invalid<sp/>mass<sp/>for<sp/>entity<sp/>&apos;%s&apos;<sp/>type<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self-&gt;name.c_str(),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;GetType()-&gt;classname<sp/>);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mass<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centerOfMass.Zero();</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inertiaTensor.Identity();</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>whether<sp/>or<sp/>not<sp/>the<sp/>inertia<sp/>tensor<sp/>is<sp/>balanced</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>minIndex<sp/>=<sp/>Min3Index(<sp/>inertiaTensor[0][0],<sp/>inertiaTensor[1][1],<sp/>inertiaTensor[2][2]<sp/>);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>inertiaScale.Identity();</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>inertiaScale[0][0]<sp/>=<sp/>inertiaTensor[0][0]<sp/>/<sp/>inertiaTensor[minIndex][minIndex];</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>inertiaScale[1][1]<sp/>=<sp/>inertiaTensor[1][1]<sp/>/<sp/>inertiaTensor[minIndex][minIndex];</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>inertiaScale[2][2]<sp/>=<sp/>inertiaTensor[2][2]<sp/>/<sp/>inertiaTensor[minIndex][minIndex];</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>inertiaScale[0][0]<sp/>&gt;<sp/>MAX_INERTIA_SCALE<sp/>||<sp/>inertiaScale[1][1]<sp/>&gt;<sp/>MAX_INERTIA_SCALE<sp/>||<sp/>inertiaScale[2][2]<sp/>&gt;<sp/>MAX_INERTIA_SCALE<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.DWarning(<sp/></highlight><highlight class="stringliteral">&quot;idPhysics_RigidBody::SetClipModel:<sp/>unbalanced<sp/>inertia<sp/>tensor<sp/>for<sp/>entity<sp/>&apos;%s&apos;<sp/>type<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self-&gt;name.c_str(),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;GetType()-&gt;classname<sp/>);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min<sp/>=<sp/>inertiaTensor[minIndex][minIndex]<sp/>*<sp/>MAX_INERTIA_SCALE;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inertiaScale[(minIndex+1)%3][(minIndex+1)%3]<sp/>=<sp/>min<sp/>/<sp/>inertiaTensor[(minIndex+1)%3][(minIndex+1)%3];</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inertiaScale[(minIndex+2)%3][(minIndex+2)%3]<sp/>=<sp/>min<sp/>/<sp/>inertiaTensor[(minIndex+2)%3][(minIndex+2)%3];</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inertiaTensor<sp/>*=<sp/>inertiaScale;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>inverseMass<sp/>=<sp/>1.0f<sp/>/<sp/>mass;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>inverseInertiaTensor<sp/>=<sp/>inertiaTensor.Inverse()<sp/>*<sp/>(<sp/>1.0f<sp/>/<sp/>6.0f<sp/>);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.linearMomentum.Zero();</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.angularMomentum.Zero();</highlight></codeline>
<codeline lineno="647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="650"><highlight class="comment">================</highlight></codeline>
<codeline lineno="651"><highlight class="comment">idPhysics_RigidBody::GetClipModel</highlight></codeline>
<codeline lineno="652"><highlight class="comment">================</highlight></codeline>
<codeline lineno="653"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><ref refid="classid_clip_model" kindref="compound">idClipModel</ref><sp/>*idPhysics_RigidBody::GetClipModel(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clipModel;</highlight></codeline>
<codeline lineno="656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="659"><highlight class="comment">================</highlight></codeline>
<codeline lineno="660"><highlight class="comment">idPhysics_RigidBody::GetNumClipModels</highlight></codeline>
<codeline lineno="661"><highlight class="comment">================</highlight></codeline>
<codeline lineno="662"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::GetNumClipModels(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="668"><highlight class="comment">================</highlight></codeline>
<codeline lineno="669"><highlight class="comment">idPhysics_RigidBody::SetMass</highlight></codeline>
<codeline lineno="670"><highlight class="comment">================</highlight></codeline>
<codeline lineno="671"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::SetMass(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mass,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>mass<sp/>&gt;<sp/>0.0f<sp/>);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>inertiaTensor<sp/>*=<sp/>mass<sp/>/<sp/>this-&gt;mass;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>inverseInertiaTensor<sp/>=<sp/>inertiaTensor.Inverse()<sp/>*<sp/>(1.0f<sp/>/<sp/>6.0f);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;mass<sp/>=<sp/>mass;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>inverseMass<sp/>=<sp/>1.0f<sp/>/<sp/>mass;</highlight></codeline>
<codeline lineno="678"><highlight class="normal">}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="681"><highlight class="comment">================</highlight></codeline>
<codeline lineno="682"><highlight class="comment">idPhysics_RigidBody::GetMass</highlight></codeline>
<codeline lineno="683"><highlight class="comment">================</highlight></codeline>
<codeline lineno="684"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::GetMass(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mass;</highlight></codeline>
<codeline lineno="687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="690"><highlight class="comment">================</highlight></codeline>
<codeline lineno="691"><highlight class="comment">idPhysics_RigidBody::SetFriction</highlight></codeline>
<codeline lineno="692"><highlight class="comment">================</highlight></codeline>
<codeline lineno="693"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::SetFriction(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>linear,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angular,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>contact<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/>linear<sp/>&lt;<sp/>0.0f<sp/>||<sp/>linear<sp/>&gt;<sp/>1.0f<sp/>||</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angular<sp/>&lt;<sp/>0.0f<sp/>||<sp/>angular<sp/>&gt;<sp/>1.0f<sp/>||</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contact<sp/>&lt;<sp/>0.0f<sp/>||<sp/>contact<sp/>&gt;<sp/>1.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>linearFriction<sp/>=<sp/>linear;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>angularFriction<sp/>=<sp/>angular;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>contactFriction<sp/>=<sp/>contact;</highlight></codeline>
<codeline lineno="703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="706"><highlight class="comment">================</highlight></codeline>
<codeline lineno="707"><highlight class="comment">idPhysics_RigidBody::SetBouncyness</highlight></codeline>
<codeline lineno="708"><highlight class="comment">================</highlight></codeline>
<codeline lineno="709"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::SetBouncyness(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b<sp/>&lt;<sp/>0.0f<sp/>||<sp/>b<sp/>&gt;<sp/>1.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>bouncyness<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="718"><highlight class="comment">================</highlight></codeline>
<codeline lineno="719"><highlight class="comment">idPhysics_RigidBody::Rest</highlight></codeline>
<codeline lineno="720"><highlight class="comment">================</highlight></codeline>
<codeline lineno="721"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::Rest(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>current.atRest<sp/>=<sp/>gameLocal.time;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.linearMomentum.Zero();</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.angularMomentum.Zero();</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;BecomeInactive(<sp/>TH_PHYSICS<sp/>);</highlight></codeline>
<codeline lineno="727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="730"><highlight class="comment">================</highlight></codeline>
<codeline lineno="731"><highlight class="comment">idPhysics_RigidBody::DropToFloor</highlight></codeline>
<codeline lineno="732"><highlight class="comment">================</highlight></codeline>
<codeline lineno="733"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::DropToFloor(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>dropToFloor<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>testSolid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="740"><highlight class="comment">================</highlight></codeline>
<codeline lineno="741"><highlight class="comment">idPhysics_RigidBody::NoContact</highlight></codeline>
<codeline lineno="742"><highlight class="comment">================</highlight></codeline>
<codeline lineno="743"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::NoContact(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>noContact<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="746"><highlight class="normal">}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="749"><highlight class="comment">================</highlight></codeline>
<codeline lineno="750"><highlight class="comment">idPhysics_RigidBody::Activate</highlight></codeline>
<codeline lineno="751"><highlight class="comment">================</highlight></codeline>
<codeline lineno="752"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::Activate(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>current.atRest<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;BecomeActive(<sp/>TH_PHYSICS<sp/>);</highlight></codeline>
<codeline lineno="756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="759"><highlight class="comment">================</highlight></codeline>
<codeline lineno="760"><highlight class="comment">idPhysics_RigidBody::PutToRest</highlight></codeline>
<codeline lineno="761"><highlight class="comment"></highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/><sp/>put<sp/>to<sp/>rest<sp/>untill<sp/>something<sp/>collides<sp/>with<sp/>this<sp/>physics<sp/>object</highlight></codeline>
<codeline lineno="763"><highlight class="comment">================</highlight></codeline>
<codeline lineno="764"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::PutToRest(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>Rest();</highlight></codeline>
<codeline lineno="767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="770"><highlight class="comment">================</highlight></codeline>
<codeline lineno="771"><highlight class="comment">idPhysics_RigidBody::EnableImpact</highlight></codeline>
<codeline lineno="772"><highlight class="comment">================</highlight></codeline>
<codeline lineno="773"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::EnableImpact(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>noImpact<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="779"><highlight class="comment">================</highlight></codeline>
<codeline lineno="780"><highlight class="comment">idPhysics_RigidBody::DisableImpact</highlight></codeline>
<codeline lineno="781"><highlight class="comment">================</highlight></codeline>
<codeline lineno="782"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::DisableImpact(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>noImpact<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="788"><highlight class="comment">================</highlight></codeline>
<codeline lineno="789"><highlight class="comment">idPhysics_RigidBody::SetContents</highlight></codeline>
<codeline lineno="790"><highlight class="comment">================</highlight></codeline>
<codeline lineno="791"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::SetContents(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>contents,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>clipModel-&gt;SetContents(<sp/>contents<sp/>);</highlight></codeline>
<codeline lineno="794"><highlight class="normal">}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="797"><highlight class="comment">================</highlight></codeline>
<codeline lineno="798"><highlight class="comment">idPhysics_RigidBody::GetContents</highlight></codeline>
<codeline lineno="799"><highlight class="comment">================</highlight></codeline>
<codeline lineno="800"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::GetContents(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clipModel-&gt;GetContents();</highlight></codeline>
<codeline lineno="803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="806"><highlight class="comment">================</highlight></codeline>
<codeline lineno="807"><highlight class="comment">idPhysics_RigidBody::GetBounds</highlight></codeline>
<codeline lineno="808"><highlight class="comment">================</highlight></codeline>
<codeline lineno="809"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>&amp;idPhysics_RigidBody::GetBounds(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clipModel-&gt;GetBounds();</highlight></codeline>
<codeline lineno="812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="815"><highlight class="comment">================</highlight></codeline>
<codeline lineno="816"><highlight class="comment">idPhysics_RigidBody::GetAbsBounds</highlight></codeline>
<codeline lineno="817"><highlight class="comment">================</highlight></codeline>
<codeline lineno="818"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>&amp;idPhysics_RigidBody::GetAbsBounds(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clipModel-&gt;GetAbsBounds();</highlight></codeline>
<codeline lineno="821"><highlight class="normal">}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="824"><highlight class="comment">================</highlight></codeline>
<codeline lineno="825"><highlight class="comment">idPhysics_RigidBody::Evaluate</highlight></codeline>
<codeline lineno="826"><highlight class="comment"></highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/><sp/>Evaluate<sp/>the<sp/>impulse<sp/>based<sp/>rigid<sp/>body<sp/>physics.</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/><sp/>When<sp/>a<sp/>collision<sp/>occurs<sp/>an<sp/>impulse<sp/>is<sp/>applied<sp/>at<sp/>the<sp/>moment<sp/>of<sp/>impact<sp/>but</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/><sp/>the<sp/>remaining<sp/>time<sp/>after<sp/>the<sp/>collision<sp/>is<sp/>ignored.</highlight></codeline>
<codeline lineno="830"><highlight class="comment">================</highlight></codeline>
<codeline lineno="831"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::Evaluate(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeStepMSec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endTimeMSec<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrigid_body_p_state__s" kindref="compound">rigidBodyPState_t</ref><sp/>next;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_angles" kindref="compound">idAngles</ref><sp/>angles;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtrace__s" kindref="compound">trace_t</ref><sp/>collision;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>impulse;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>oldOrigin,<sp/>masterOrigin;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>oldAxis,<sp/>masterAxis;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeStep;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>collided,<sp/>cameToRest<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>timeStep<sp/>=<sp/>MS2SEC(<sp/>timeStepMSec<sp/>);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>current.lastTimeStep<sp/>=<sp/>timeStep;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>hasMaster<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldOrigin<sp/>=<sp/>current.i.position;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldAxis<sp/>=<sp/>current.i.orientation;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;GetMasterPosition(<sp/>masterOrigin,<sp/>masterAxis<sp/>);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.i.position<sp/>=<sp/>masterOrigin<sp/>+<sp/>current.localOrigin<sp/>*<sp/>masterAxis;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>isOrientated<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.i.orientation<sp/>=<sp/>current.localAxis<sp/>*<sp/>masterAxis;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.i.orientation<sp/>=<sp/>current.localAxis;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clipModel-&gt;Link(<sp/>gameLocal.clip,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>clipModel-&gt;GetId(),<sp/>current.i.position,<sp/>current.i.orientation<sp/>);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.i.linearMomentum<sp/>=<sp/>mass<sp/>*<sp/>(<sp/>(<sp/>current.i.position<sp/>-<sp/>oldOrigin<sp/>)<sp/>/<sp/>timeStep<sp/>);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.i.angularMomentum<sp/>=<sp/>inertiaTensor<sp/>*<sp/>(<sp/>(<sp/>current.i.orientation<sp/>*<sp/>oldAxis.Transpose()<sp/>).ToAngularVelocity()<sp/>/<sp/>timeStep<sp/>);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.externalForce.Zero();</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.externalTorque.Zero();</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>current.i.position<sp/>!=<sp/>oldOrigin<sp/>||<sp/>current.i.orientation<sp/>!=<sp/>oldAxis<sp/>);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>body<sp/>is<sp/>at<sp/>rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>current.atRest<sp/>&gt;=<sp/>0<sp/>||<sp/>timeStep<sp/>&lt;=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DebugDraw();</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>putting<sp/>the<sp/>body<sp/>to<sp/>rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dropToFloor<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DropToFloorAndRest();</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.externalForce.Zero();</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.externalTorque.Zero();</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>RB_TIMINGS</highlight></codeline>
<codeline lineno="881"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>timer_total.Start();</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="883"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>the<sp/>rigid<sp/>body<sp/>velocity<sp/>into<sp/>the<sp/>frame<sp/>of<sp/>a<sp/>pusher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>current.i.linearMomentum<sp/>-=<sp/>current.pushVelocity.SubVec3(<sp/>0<sp/>)<sp/>*<sp/>mass;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>current.i.angularMomentum<sp/>-=<sp/>current.pushVelocity.SubVec3(<sp/>1<sp/>)<sp/>*<sp/>inertiaTensor;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>clipModel-&gt;Unlink();</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>next<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>next<sp/>position<sp/>and<sp/>orientation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>Integrate(<sp/>timeStep,<sp/>next<sp/>);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>RB_TIMINGS</highlight></codeline>
<codeline lineno="896"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>timer_collision.Start();</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="898"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>collisions<sp/>from<sp/>the<sp/>current<sp/>to<sp/>the<sp/>next<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>collided<sp/>=<sp/>CheckForCollisions(<sp/>timeStep,<sp/>next,<sp/>collision<sp/>);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>RB_TIMINGS</highlight></codeline>
<codeline lineno="903"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>timer_collision.Stop();</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="905"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>new<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>collided<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>collision<sp/>impulse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>CollisionImpulse(<sp/>collision,<sp/>impulse<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.atRest<sp/>=<sp/>gameLocal.time;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>position<sp/>of<sp/>the<sp/>clip<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>clipModel-&gt;Link(<sp/>gameLocal.clip,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>clipModel-&gt;GetId(),<sp/>current.i.position,<sp/>current.i.orientation<sp/>);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>DebugDraw();</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!noContact<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>RB_TIMINGS</highlight></codeline>
<codeline lineno="924"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_collision.Start();</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="926"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>contacts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EvaluateContacts();</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>RB_TIMINGS</highlight></codeline>
<codeline lineno="930"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_collision.Stop();</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="932"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>the<sp/>body<sp/>has<sp/>come<sp/>to<sp/>rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>TestIfAtRest()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>to<sp/>rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rest();</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cameToRest<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>contact<sp/>friction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContactFriction(<sp/>timeStep<sp/>);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>current.atRest<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ActivateContactEntities();</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>collided<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>rigid<sp/>body<sp/>didn&apos;t<sp/>come<sp/>to<sp/>rest<sp/>or<sp/>the<sp/>other<sp/>entity<sp/>is<sp/>not<sp/>at<sp/>rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>gameLocal.entities[collision.c.entityNum];</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>&amp;&amp;<sp/>(<sp/>!cameToRest<sp/>||<sp/>!ent-&gt;IsAtRest()<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>impact<sp/>to<sp/>other<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;ApplyImpulse(<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>collision.c.id,<sp/>collision.c.point,<sp/>-impulse<sp/>);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>the<sp/>rigid<sp/>body<sp/>velocity<sp/>back<sp/>into<sp/>the<sp/>world<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>current.i.linearMomentum<sp/>+=<sp/>current.pushVelocity.SubVec3(<sp/>0<sp/>)<sp/>*<sp/>mass;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>current.i.angularMomentum<sp/>+=<sp/>current.pushVelocity.SubVec3(<sp/>1<sp/>)<sp/>*<sp/>inertiaTensor;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>current.pushVelocity.Zero();</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>current.lastTimeStep<sp/>=<sp/>timeStep;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>current.externalForce.Zero();</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>current.externalTorque.Zero();</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>IsOutsideWorld()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;rigid<sp/>body<sp/>moved<sp/>outside<sp/>world<sp/>bounds<sp/>for<sp/>entity<sp/>&apos;%s&apos;<sp/>type<sp/>&apos;%s&apos;<sp/>at<sp/>(%s)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self-&gt;name.c_str(),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;GetType()-&gt;classname,<sp/>current.i.position.ToString(0)<sp/>);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rest();</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>RB_TIMINGS</highlight></codeline>
<codeline lineno="973"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>timer_total.Stop();</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rb_showTimings-&gt;integer<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;%12s:<sp/>t<sp/>%1.4f<sp/>cd<sp/>%1.4f\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self-&gt;name.c_str(),</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_total.Milliseconds(),<sp/>timer_collision.Milliseconds()<sp/>);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastTimerReset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rb_showTimings-&gt;integer<sp/>==<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numRigidBodies++;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>endTimeMSec<sp/>&gt;<sp/>lastTimerReset<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;rb<sp/>%d:<sp/>t<sp/>%1.4f<sp/>cd<sp/>%1.4f\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numRigidBodies,</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_total.Milliseconds(),<sp/>timer_collision.Milliseconds()<sp/>);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>endTimeMSec<sp/>&gt;<sp/>lastTimerReset<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastTimerReset<sp/>=<sp/>endTimeMSec;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numRigidBodies<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_total.Clear();</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_collision.Clear();</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="996"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="998"><highlight class="normal">}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1001"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1002"><highlight class="comment">idPhysics_RigidBody::UpdateTime</highlight></codeline>
<codeline lineno="1003"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1004"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::UpdateTime(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>endTimeMSec<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1009"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1010"><highlight class="comment">idPhysics_RigidBody::GetTime</highlight></codeline>
<codeline lineno="1011"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1012"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::GetTime(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gameLocal.time;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1018"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1019"><highlight class="comment">idPhysics_RigidBody::GetImpactInfo</highlight></codeline>
<codeline lineno="1020"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1021"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::GetImpactInfo(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;point,<sp/><ref refid="structimpact_info__s" kindref="compound">impactInfo_t</ref><sp/>*info<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>linearVelocity,<sp/>angularVelocity;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>inverseWorldInertiaTensor;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>linearVelocity<sp/>=<sp/>inverseMass<sp/>*<sp/>current.i.linearMomentum;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>inverseWorldInertiaTensor<sp/>=<sp/>current.i.orientation.Transpose()<sp/>*<sp/>inverseInertiaTensor<sp/>*<sp/>current.i.orientation;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>angularVelocity<sp/>=<sp/>inverseWorldInertiaTensor<sp/>*<sp/>current.i.angularMomentum;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;invMass<sp/>=<sp/>inverseMass;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;invInertiaTensor<sp/>=<sp/>inverseWorldInertiaTensor;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;position<sp/>=<sp/>point<sp/>-<sp/>(<sp/>current.i.position<sp/>+<sp/>centerOfMass<sp/>*<sp/>current.i.orientation<sp/>);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;velocity<sp/>=<sp/>linearVelocity<sp/>+<sp/>angularVelocity.Cross(<sp/>info-&gt;position<sp/>);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1037"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1038"><highlight class="comment">idPhysics_RigidBody::ApplyImpulse</highlight></codeline>
<codeline lineno="1039"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1040"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::ApplyImpulse(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;point,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;impulse<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>noImpact<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.linearMomentum<sp/>+=<sp/>impulse;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.angularMomentum<sp/>+=<sp/>(<sp/>point<sp/>-<sp/>(<sp/>current.i.position<sp/>+<sp/>centerOfMass<sp/>*<sp/>current.i.orientation<sp/>)<sp/>).Cross(<sp/>impulse<sp/>);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>Activate();</highlight></codeline>
<codeline lineno="1048"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1051"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1052"><highlight class="comment">idPhysics_RigidBody::AddForce</highlight></codeline>
<codeline lineno="1053"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1054"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::AddForce(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;point,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;force<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>noImpact<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>current.externalForce<sp/>+=<sp/>force;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>current.externalTorque<sp/>+=<sp/>(<sp/>point<sp/>-<sp/>(<sp/>current.i.position<sp/>+<sp/>centerOfMass<sp/>*<sp/>current.i.orientation<sp/>)<sp/>).Cross(<sp/>force<sp/>);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>Activate();</highlight></codeline>
<codeline lineno="1062"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1065"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1066"><highlight class="comment">idPhysics_RigidBody::IsAtRest</highlight></codeline>
<codeline lineno="1067"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1068"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::IsAtRest(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current.atRest<sp/>&gt;=<sp/>0;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1074"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1075"><highlight class="comment">idPhysics_RigidBody::GetRestStartTime</highlight></codeline>
<codeline lineno="1076"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1077"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::GetRestStartTime(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current.atRest;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1083"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1084"><highlight class="comment">idPhysics_RigidBody::IsPushable</highlight></codeline>
<codeline lineno="1085"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1086"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::IsPushable(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>!noImpact<sp/>&amp;&amp;<sp/>!hasMaster<sp/>);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1092"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1093"><highlight class="comment">idPhysics_RigidBody::SaveState</highlight></codeline>
<codeline lineno="1094"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1095"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::SaveState(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>saved<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1101"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1102"><highlight class="comment">idPhysics_RigidBody::RestoreState</highlight></codeline>
<codeline lineno="1103"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1104"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::RestoreState(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>saved;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>clipModel-&gt;Link(<sp/>gameLocal.clip,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>clipModel-&gt;GetId(),<sp/>current.i.position,<sp/>current.i.orientation<sp/>);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/>EvaluateContacts();</highlight></codeline>
<codeline lineno="1111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1114"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1115"><highlight class="comment">idPhysics::SetOrigin</highlight></codeline>
<codeline lineno="1116"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1117"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::SetOrigin(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;newOrigin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>masterOrigin;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>masterAxis;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>current.localOrigin<sp/>=<sp/>newOrigin;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>hasMaster<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;GetMasterPosition(<sp/>masterOrigin,<sp/>masterAxis<sp/>);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.i.position<sp/>=<sp/>masterOrigin<sp/>+<sp/>newOrigin<sp/>*<sp/>masterAxis;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.i.position<sp/>=<sp/>newOrigin;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>clipModel-&gt;Link(<sp/>gameLocal.clip,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>clipModel-&gt;GetId(),<sp/>current.i.position,<sp/>clipModel-&gt;GetAxis()<sp/>);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>Activate();</highlight></codeline>
<codeline lineno="1134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1137"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1138"><highlight class="comment">idPhysics::SetAxis</highlight></codeline>
<codeline lineno="1139"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1140"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::SetAxis(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>&amp;newAxis,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>masterOrigin;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>masterAxis;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>current.localAxis<sp/>=<sp/>newAxis;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>hasMaster<sp/>&amp;&amp;<sp/>isOrientated<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;GetMasterPosition(<sp/>masterOrigin,<sp/>masterAxis<sp/>);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.i.orientation<sp/>=<sp/>newAxis<sp/>*<sp/>masterAxis;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.i.orientation<sp/>=<sp/>newAxis;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/>clipModel-&gt;Link(<sp/>gameLocal.clip,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>clipModel-&gt;GetId(),<sp/>clipModel-&gt;GetOrigin(),<sp/>current.i.orientation<sp/>);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>Activate();</highlight></codeline>
<codeline lineno="1157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1160"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1161"><highlight class="comment">idPhysics::Move</highlight></codeline>
<codeline lineno="1162"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1163"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::Translate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/>current.localOrigin<sp/>+=<sp/>translation;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.position<sp/>+=<sp/>translation;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>clipModel-&gt;Link(<sp/>gameLocal.clip,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>clipModel-&gt;GetId(),<sp/>current.i.position,<sp/>clipModel-&gt;GetAxis()<sp/>);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>Activate();</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1175"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1176"><highlight class="comment">idPhysics::Rotate</highlight></codeline>
<codeline lineno="1177"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1178"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::Rotate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>masterOrigin;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>masterAxis;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.orientation<sp/>*=<sp/>rotation.ToMat3();</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.position<sp/>*=<sp/>rotation;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>hasMaster<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;GetMasterPosition(<sp/>masterOrigin,<sp/>masterAxis<sp/>);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.localAxis<sp/>*=<sp/>rotation.ToMat3();</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.localOrigin<sp/>=<sp/>(<sp/>current.i.position<sp/>-<sp/>masterOrigin<sp/>)<sp/>*<sp/>masterAxis.Transpose();</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.localAxis<sp/>=<sp/>current.i.orientation;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.localOrigin<sp/>=<sp/>current.i.position;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>clipModel-&gt;Link(<sp/>gameLocal.clip,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>clipModel-&gt;GetId(),<sp/>current.i.position,<sp/>current.i.orientation<sp/>);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>Activate();</highlight></codeline>
<codeline lineno="1199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1202"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1203"><highlight class="comment">idPhysics_RigidBody::GetOrigin</highlight></codeline>
<codeline lineno="1204"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1205"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;idPhysics_RigidBody::GetOrigin(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current.i.position;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1211"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1212"><highlight class="comment">idPhysics_RigidBody::GetAxis</highlight></codeline>
<codeline lineno="1213"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1214"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>&amp;idPhysics_RigidBody::GetAxis(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current.i.orientation;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1220"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1221"><highlight class="comment">idPhysics_RigidBody::SetLinearVelocity</highlight></codeline>
<codeline lineno="1222"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1223"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::SetLinearVelocity(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;newLinearVelocity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.linearMomentum<sp/>=<sp/>newLinearVelocity<sp/>*<sp/>mass;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>Activate();</highlight></codeline>
<codeline lineno="1227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1230"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1231"><highlight class="comment">idPhysics_RigidBody::SetAngularVelocity</highlight></codeline>
<codeline lineno="1232"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1233"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::SetAngularVelocity(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;newAngularVelocity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.angularMomentum<sp/>=<sp/>newAngularVelocity<sp/>*<sp/>inertiaTensor;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>Activate();</highlight></codeline>
<codeline lineno="1237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1240"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1241"><highlight class="comment">idPhysics_RigidBody::GetLinearVelocity</highlight></codeline>
<codeline lineno="1242"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1243"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;idPhysics_RigidBody::GetLinearVelocity(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>curLinearVelocity;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/>curLinearVelocity<sp/>=<sp/>current.i.linearMomentum<sp/>*<sp/>inverseMass;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>curLinearVelocity;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1251"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1252"><highlight class="comment">idPhysics_RigidBody::GetAngularVelocity</highlight></codeline>
<codeline lineno="1253"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1254"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;idPhysics_RigidBody::GetAngularVelocity(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>curAngularVelocity;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>inverseWorldInertiaTensor;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>inverseWorldInertiaTensor<sp/>=<sp/>current.i.orientation.Transpose()<sp/>*<sp/>inverseInertiaTensor<sp/>*<sp/>current.i.orientation;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>curAngularVelocity<sp/>=<sp/>inverseWorldInertiaTensor<sp/>*<sp/>current.i.angularMomentum;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>curAngularVelocity;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1265"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1266"><highlight class="comment">idPhysics_RigidBody::ClipTranslation</highlight></codeline>
<codeline lineno="1267"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1268"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::ClipTranslation(<sp/><ref refid="structtrace__s" kindref="compound">trace_t</ref><sp/>&amp;results,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;translation,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref><sp/>*model<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>model<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.clip.TranslationModel(<sp/>results,<sp/>clipModel-&gt;GetOrigin(),<sp/>clipModel-&gt;GetOrigin()<sp/>+<sp/>translation,</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clipModel,<sp/>clipModel-&gt;GetAxis(),<sp/>clipMask,</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model-&gt;Handle(),<sp/>model-&gt;GetOrigin(),<sp/>model-&gt;GetAxis()<sp/>);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.clip.Translation(<sp/>results,<sp/>clipModel-&gt;GetOrigin(),<sp/>clipModel-&gt;GetOrigin()<sp/>+<sp/>translation,</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clipModel,<sp/>clipModel-&gt;GetAxis(),<sp/>clipMask,<sp/>self<sp/>);</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1282"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1283"><highlight class="comment">idPhysics_RigidBody::ClipRotation</highlight></codeline>
<codeline lineno="1284"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1285"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::ClipRotation(<sp/><ref refid="structtrace__s" kindref="compound">trace_t</ref><sp/>&amp;results,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>&amp;rotation,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref><sp/>*model<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>model<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.clip.RotationModel(<sp/>results,<sp/>clipModel-&gt;GetOrigin(),<sp/>rotation,</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clipModel,<sp/>clipModel-&gt;GetAxis(),<sp/>clipMask,</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model-&gt;Handle(),<sp/>model-&gt;GetOrigin(),<sp/>model-&gt;GetAxis()<sp/>);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.clip.Rotation(<sp/>results,<sp/>clipModel-&gt;GetOrigin(),<sp/>rotation,</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clipModel,<sp/>clipModel-&gt;GetAxis(),<sp/>clipMask,<sp/>self<sp/>);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1299"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1300"><highlight class="comment">idPhysics_RigidBody::ClipContents</highlight></codeline>
<codeline lineno="1301"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1302"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::ClipContents(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref><sp/>*model<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>model<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gameLocal.clip.ContentsModel(<sp/>clipModel-&gt;GetOrigin(),<sp/>clipModel,<sp/>clipModel-&gt;GetAxis(),<sp/>-1,</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model-&gt;Handle(),<sp/>model-&gt;GetOrigin(),<sp/>model-&gt;GetAxis()<sp/>);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gameLocal.clip.Contents(<sp/>clipModel-&gt;GetOrigin(),<sp/>clipModel,<sp/>clipModel-&gt;GetAxis(),<sp/>-1,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1314"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1315"><highlight class="comment">idPhysics_RigidBody::DisableClip</highlight></codeline>
<codeline lineno="1316"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1317"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::DisableClip(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/>clipModel-&gt;Disable();</highlight></codeline>
<codeline lineno="1320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1323"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1324"><highlight class="comment">idPhysics_RigidBody::EnableClip</highlight></codeline>
<codeline lineno="1325"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1326"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::EnableClip(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>clipModel-&gt;Enable();</highlight></codeline>
<codeline lineno="1329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1332"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1333"><highlight class="comment">idPhysics_RigidBody::UnlinkClip</highlight></codeline>
<codeline lineno="1334"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1335"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::UnlinkClip(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>clipModel-&gt;Unlink();</highlight></codeline>
<codeline lineno="1338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1341"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1342"><highlight class="comment">idPhysics_RigidBody::LinkClip</highlight></codeline>
<codeline lineno="1343"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1344"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::LinkClip(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>clipModel-&gt;Link(<sp/>gameLocal.clip,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>clipModel-&gt;GetId(),<sp/>current.i.position,<sp/>current.i.orientation<sp/>);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1350"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1351"><highlight class="comment">idPhysics_RigidBody::EvaluateContacts</highlight></codeline>
<codeline lineno="1352"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1353"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::EvaluateContacts(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec6" kindref="compound">idVec6</ref><sp/>dir;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/>ClearContacts();</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/>contacts.SetNum(<sp/>10,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/>dir.SubVec3(0)<sp/>=<sp/>current.i.linearMomentum<sp/>+<sp/>current.lastTimeStep<sp/>*<sp/>gravityVector<sp/>*<sp/>mass;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>dir.SubVec3(1)<sp/>=<sp/>current.i.angularMomentum;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>dir.SubVec3(0).Normalize();</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>dir.SubVec3(1).Normalize();</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>gameLocal.clip.Contacts(<sp/>&amp;contacts[0],<sp/>10,<sp/>clipModel-&gt;GetOrigin(),</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir,<sp/>CONTACT_EPSILON,<sp/>clipModel,<sp/>clipModel-&gt;GetAxis(),<sp/>clipMask,<sp/>self<sp/>);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>contacts.SetNum(<sp/>num,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/>AddContactEntitiesForContacts();</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>contacts.Num()<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1376"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1377"><highlight class="comment">idPhysics_RigidBody::SetPushed</highlight></codeline>
<codeline lineno="1378"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1379"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::SetPushed(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deltaTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_rotation" kindref="compound">idRotation</ref><sp/>rotation;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/>rotation<sp/>=<sp/>(<sp/>saved.i.orientation<sp/>*<sp/>current.i.orientation<sp/>).ToRotation();</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>velocity<sp/>with<sp/>which<sp/>the<sp/>af<sp/>is<sp/>pushed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>current.pushVelocity.SubVec3(0)<sp/>+=<sp/>(<sp/>current.i.position<sp/>-<sp/>saved.i.position<sp/>)<sp/>/<sp/>(<sp/>deltaTime<sp/>*<sp/>idMath::M_MS2SEC<sp/>);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/>current.pushVelocity.SubVec3(1)<sp/>+=<sp/>rotation.GetVec()<sp/>*<sp/>-DEG2RAD(<sp/>rotation.GetAngle()<sp/>)<sp/>/<sp/>(<sp/>deltaTime<sp/>*<sp/>idMath::M_MS2SEC<sp/>);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1391"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1392"><highlight class="comment">idPhysics_RigidBody::GetPushedLinearVelocity</highlight></codeline>
<codeline lineno="1393"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1394"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;idPhysics_RigidBody::GetPushedLinearVelocity(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current.pushVelocity.SubVec3(0);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1400"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1401"><highlight class="comment">idPhysics_RigidBody::GetPushedAngularVelocity</highlight></codeline>
<codeline lineno="1402"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1403"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;idPhysics_RigidBody::GetPushedAngularVelocity(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current.pushVelocity.SubVec3(1);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1409"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1410"><highlight class="comment">idPhysics_RigidBody::SetMaster</highlight></codeline>
<codeline lineno="1411"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1412"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::SetMaster(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*master,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>orientated<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>masterOrigin;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>masterAxis;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!hasMaster<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transform<sp/>from<sp/>world<sp/>space<sp/>to<sp/>master<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;GetMasterPosition(<sp/>masterOrigin,<sp/>masterAxis<sp/>);</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.localOrigin<sp/>=<sp/>(<sp/>current.i.position<sp/>-<sp/>masterOrigin<sp/>)<sp/>*<sp/>masterAxis.Transpose();</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>orientated<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.localAxis<sp/>=<sp/>current.i.orientation<sp/>*<sp/>masterAxis.Transpose();</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.localAxis<sp/>=<sp/>current.i.orientation;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hasMaster<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isOrientated<sp/>=<sp/>orientated;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ClearContacts();</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>hasMaster<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hasMaster<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Activate();</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>RB_VELOCITY_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>16000;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>RB_VELOCITY_TOTAL_BITS<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>RB_VELOCITY_EXPONENT_BITS<sp/><sp/><sp/>=<sp/>idMath::BitsForInteger(<sp/>idMath::BitsForFloat(<sp/>RB_VELOCITY_MAX<sp/>)<sp/>)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>RB_VELOCITY_MANTISSA_BITS<sp/><sp/><sp/>=<sp/>RB_VELOCITY_TOTAL_BITS<sp/>-<sp/>1<sp/>-<sp/>RB_VELOCITY_EXPONENT_BITS;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>RB_MOMENTUM_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1e20f;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>RB_MOMENTUM_TOTAL_BITS<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>RB_MOMENTUM_EXPONENT_BITS<sp/><sp/><sp/>=<sp/>idMath::BitsForInteger(<sp/>idMath::BitsForFloat(<sp/>RB_MOMENTUM_MAX<sp/>)<sp/>)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>RB_MOMENTUM_MANTISSA_BITS<sp/><sp/><sp/>=<sp/>RB_MOMENTUM_TOTAL_BITS<sp/>-<sp/>1<sp/>-<sp/>RB_MOMENTUM_EXPONENT_BITS;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>RB_FORCE_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1e20f;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>RB_FORCE_TOTAL_BITS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>RB_FORCE_EXPONENT_BITS<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>idMath::BitsForInteger(<sp/>idMath::BitsForFloat(<sp/>RB_FORCE_MAX<sp/>)<sp/>)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>RB_FORCE_MANTISSA_BITS<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RB_FORCE_TOTAL_BITS<sp/>-<sp/>1<sp/>-<sp/>RB_FORCE_EXPONENT_BITS;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1455"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1456"><highlight class="comment">idPhysics_RigidBody::WriteToSnapshot</highlight></codeline>
<codeline lineno="1457"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1458"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::WriteToSnapshot(<sp/><ref refid="classid_bit_msg_delta" kindref="compound">idBitMsgDelta</ref><sp/>&amp;msg<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_c_quat" kindref="compound">idCQuat</ref><sp/>quat,<sp/>localQuat;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/>quat<sp/>=<sp/>current.i.orientation.ToCQuat();</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>localQuat<sp/>=<sp/>current.localAxis.ToCQuat();</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteLong(<sp/>current.atRest<sp/>);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteFloat(<sp/>current.i.position[0]<sp/>);</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteFloat(<sp/>current.i.position[1]<sp/>);</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteFloat(<sp/>current.i.position[2]<sp/>);</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteFloat(<sp/>quat.x<sp/>);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteFloat(<sp/>quat.y<sp/>);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteFloat(<sp/>quat.z<sp/>);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteFloat(<sp/>current.i.linearMomentum[0],<sp/>RB_MOMENTUM_EXPONENT_BITS,<sp/>RB_MOMENTUM_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteFloat(<sp/>current.i.linearMomentum[1],<sp/>RB_MOMENTUM_EXPONENT_BITS,<sp/>RB_MOMENTUM_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteFloat(<sp/>current.i.linearMomentum[2],<sp/>RB_MOMENTUM_EXPONENT_BITS,<sp/>RB_MOMENTUM_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteFloat(<sp/>current.i.angularMomentum[0],<sp/>RB_MOMENTUM_EXPONENT_BITS,<sp/>RB_MOMENTUM_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteFloat(<sp/>current.i.angularMomentum[1],<sp/>RB_MOMENTUM_EXPONENT_BITS,<sp/>RB_MOMENTUM_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteFloat(<sp/>current.i.angularMomentum[2],<sp/>RB_MOMENTUM_EXPONENT_BITS,<sp/>RB_MOMENTUM_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>current.i.position[0],<sp/>current.localOrigin[0]<sp/>);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>current.i.position[1],<sp/>current.localOrigin[1]<sp/>);</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>current.i.position[2],<sp/>current.localOrigin[2]<sp/>);</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>quat.x,<sp/>localQuat.x<sp/>);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>quat.y,<sp/>localQuat.y<sp/>);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>quat.z,<sp/>localQuat.z<sp/>);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>current.pushVelocity[0],<sp/>RB_VELOCITY_EXPONENT_BITS,<sp/>RB_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>current.pushVelocity[1],<sp/>RB_VELOCITY_EXPONENT_BITS,<sp/>RB_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>current.pushVelocity[2],<sp/>RB_VELOCITY_EXPONENT_BITS,<sp/>RB_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>current.externalForce[0],<sp/>RB_FORCE_EXPONENT_BITS,<sp/>RB_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>current.externalForce[1],<sp/>RB_FORCE_EXPONENT_BITS,<sp/>RB_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>current.externalForce[2],<sp/>RB_FORCE_EXPONENT_BITS,<sp/>RB_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>current.externalTorque[0],<sp/>RB_FORCE_EXPONENT_BITS,<sp/>RB_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>current.externalTorque[1],<sp/>RB_FORCE_EXPONENT_BITS,<sp/>RB_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.WriteDeltaFloat(<sp/>0.0f,<sp/>current.externalTorque[2],<sp/>RB_FORCE_EXPONENT_BITS,<sp/>RB_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1496"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1497"><highlight class="comment">idPhysics_RigidBody::ReadFromSnapshot</highlight></codeline>
<codeline lineno="1498"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1499"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idPhysics_RigidBody::ReadFromSnapshot(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bit_msg_delta" kindref="compound">idBitMsgDelta</ref><sp/>&amp;msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_c_quat" kindref="compound">idCQuat</ref><sp/>quat,<sp/>localQuat;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>current.atRest<sp/>=<sp/>msg.ReadLong();</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.position[0]<sp/>=<sp/>msg.ReadFloat();</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.position[1]<sp/>=<sp/>msg.ReadFloat();</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.position[2]<sp/>=<sp/>msg.ReadFloat();</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/>quat.x<sp/>=<sp/>msg.ReadFloat();</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>quat.y<sp/>=<sp/>msg.ReadFloat();</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/>quat.z<sp/>=<sp/>msg.ReadFloat();</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.linearMomentum[0]<sp/>=<sp/>msg.ReadFloat(<sp/>RB_MOMENTUM_EXPONENT_BITS,<sp/>RB_MOMENTUM_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.linearMomentum[1]<sp/>=<sp/>msg.ReadFloat(<sp/>RB_MOMENTUM_EXPONENT_BITS,<sp/>RB_MOMENTUM_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.linearMomentum[2]<sp/>=<sp/>msg.ReadFloat(<sp/>RB_MOMENTUM_EXPONENT_BITS,<sp/>RB_MOMENTUM_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.angularMomentum[0]<sp/>=<sp/>msg.ReadFloat(<sp/>RB_MOMENTUM_EXPONENT_BITS,<sp/>RB_MOMENTUM_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.angularMomentum[1]<sp/>=<sp/>msg.ReadFloat(<sp/>RB_MOMENTUM_EXPONENT_BITS,<sp/>RB_MOMENTUM_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.angularMomentum[2]<sp/>=<sp/>msg.ReadFloat(<sp/>RB_MOMENTUM_EXPONENT_BITS,<sp/>RB_MOMENTUM_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>current.localOrigin[0]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>current.i.position[0]<sp/>);</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>current.localOrigin[1]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>current.i.position[1]<sp/>);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>current.localOrigin[2]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>current.i.position[2]<sp/>);</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>localQuat.x<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>quat.x<sp/>);</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/>localQuat.y<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>quat.y<sp/>);</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>localQuat.z<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>quat.z<sp/>);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>current.pushVelocity[0]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>RB_VELOCITY_EXPONENT_BITS,<sp/>RB_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/>current.pushVelocity[1]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>RB_VELOCITY_EXPONENT_BITS,<sp/>RB_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>current.pushVelocity[2]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>RB_VELOCITY_EXPONENT_BITS,<sp/>RB_VELOCITY_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>current.externalForce[0]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>RB_FORCE_EXPONENT_BITS,<sp/>RB_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>current.externalForce[1]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>RB_FORCE_EXPONENT_BITS,<sp/>RB_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>current.externalForce[2]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>RB_FORCE_EXPONENT_BITS,<sp/>RB_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>current.externalTorque[0]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>RB_FORCE_EXPONENT_BITS,<sp/>RB_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/>current.externalTorque[1]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>RB_FORCE_EXPONENT_BITS,<sp/>RB_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/>current.externalTorque[2]<sp/>=<sp/>msg.ReadDeltaFloat(<sp/>0.0f,<sp/>RB_FORCE_EXPONENT_BITS,<sp/>RB_FORCE_MANTISSA_BITS<sp/>);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/>current.i.orientation<sp/>=<sp/>quat.ToMat3();</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>current.localAxis<sp/>=<sp/>localQuat.ToMat3();</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clipModel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clipModel-&gt;Link(<sp/>gameLocal.clip,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>clipModel-&gt;GetId(),<sp/>current.i.position,<sp/>current.i.orientation<sp/>);</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1538"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/d3xp/physics/Physics_RigidBody.cpp"/>
  </compounddef>
</doxygen>
