<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="d3xp_2script_2_script___thread_8cpp" kind="file">
    <compoundname>Script_Thread.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../../idlib/precompiled.h</includes>
    <includes refid="d3xp_2_game__local_8h" local="yes">../Game_local.h</includes>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1acb0a59e01b9e1399e9d829767ba2e3c8" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_Execute(&quot;&lt;execute&gt;&quot;, NULL)</definition>
        <argsstring>(&quot;&lt;execute&gt;&quot;, NULL)</argsstring>
        <name>EV_Thread_Execute</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="34" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1afe8a7aa6b5aab325418a7963b32e170f" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_SetCallback(&quot;&lt;script_setcallback&gt;&quot;, NULL)</definition>
        <argsstring>(&quot;&lt;script_setcallback&gt;&quot;, NULL)</argsstring>
        <name>EV_Thread_SetCallback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="35" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a6a0f2d05b22290e1eea7b45b5bea0e19" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_TerminateThread(&quot;terminate&quot;,&quot;d&quot;)</definition>
        <argsstring>(&quot;terminate&quot;,&quot;d&quot;)</argsstring>
        <name>EV_Thread_TerminateThread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="38" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a935719e27c3f82049068c2accef536fd" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_Pause(&quot;pause&quot;, NULL)</definition>
        <argsstring>(&quot;pause&quot;, NULL)</argsstring>
        <name>EV_Thread_Pause</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="39" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a4a181eddd6b00a25f7bd8bbcea158229" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_Wait(&quot;wait&quot;,&quot;f&quot;)</definition>
        <argsstring>(&quot;wait&quot;,&quot;f&quot;)</argsstring>
        <name>EV_Thread_Wait</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="40" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a363987e3b3ee81759ca0f019f85adb5c" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_WaitFrame(&quot;waitFrame&quot;)</definition>
        <argsstring>(&quot;waitFrame&quot;)</argsstring>
        <name>EV_Thread_WaitFrame</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="41" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1aa6d6e1d3f1f5f0bb8baf332afa76bfea" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_WaitFor(&quot;waitFor&quot;,&quot;e&quot;)</definition>
        <argsstring>(&quot;waitFor&quot;,&quot;e&quot;)</argsstring>
        <name>EV_Thread_WaitFor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="42" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a2ac216f00d16da273988df7693b8adbe" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_WaitForThread(&quot;waitForThread&quot;,&quot;d&quot;)</definition>
        <argsstring>(&quot;waitForThread&quot;,&quot;d&quot;)</argsstring>
        <name>EV_Thread_WaitForThread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="43" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a62b59390de2dc4ce14ed0a028d1536a2" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_Print(&quot;print&quot;,&quot;s&quot;)</definition>
        <argsstring>(&quot;print&quot;,&quot;s&quot;)</argsstring>
        <name>EV_Thread_Print</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="44" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1abb7694a3bf103cdef7c763bee7ad9b6e" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_PrintLn(&quot;println&quot;,&quot;s&quot;)</definition>
        <argsstring>(&quot;println&quot;,&quot;s&quot;)</argsstring>
        <name>EV_Thread_PrintLn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="45" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a7d47409a3b880401c1a6a5676fb1b7e5" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_Say(&quot;say&quot;,&quot;s&quot;)</definition>
        <argsstring>(&quot;say&quot;,&quot;s&quot;)</argsstring>
        <name>EV_Thread_Say</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="46" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1acafdfeff9a985b19786096b2544101f0" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_Assert(&quot;assert&quot;,&quot;f&quot;)</definition>
        <argsstring>(&quot;assert&quot;,&quot;f&quot;)</argsstring>
        <name>EV_Thread_Assert</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="47" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1afe90dc06615722b7ea83b76e5dbd4194" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_Trigger(&quot;trigger&quot;,&quot;e&quot;)</definition>
        <argsstring>(&quot;trigger&quot;,&quot;e&quot;)</argsstring>
        <name>EV_Thread_Trigger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="48" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1aaf32a778bb0cf1521b4404ad66259c14" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_SetCvar(&quot;setcvar&quot;,&quot;ss&quot;)</definition>
        <argsstring>(&quot;setcvar&quot;,&quot;ss&quot;)</argsstring>
        <name>EV_Thread_SetCvar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="49" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1ab6ec1d7baddf7d85149857f8f77473cf" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_GetCvar(&quot;getcvar&quot;,&quot;s&quot;, &apos;s&apos;)</definition>
        <argsstring>(&quot;getcvar&quot;,&quot;s&quot;, &apos;s&apos;)</argsstring>
        <name>EV_Thread_GetCvar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="50" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a60e8fda5ce5eed5b06b4884f50aebd52" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_Random(&quot;random&quot;,&quot;f&quot;, &apos;f&apos;)</definition>
        <argsstring>(&quot;random&quot;,&quot;f&quot;, &apos;f&apos;)</argsstring>
        <name>EV_Thread_Random</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="51" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1af8925c69fd1f6ddf4bad1eebd4396f08" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_GetTime(&quot;getTime&quot;, NULL, &apos;f&apos;)</definition>
        <argsstring>(&quot;getTime&quot;, NULL, &apos;f&apos;)</argsstring>
        <name>EV_Thread_GetTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="55" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a9c757bc58cb5402b97f8a1d29dc7bc98" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_KillThread(&quot;killthread&quot;,&quot;s&quot;)</definition>
        <argsstring>(&quot;killthread&quot;,&quot;s&quot;)</argsstring>
        <name>EV_Thread_KillThread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="56" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1ac2ca0e55f19268411a2e48029f7fc8f9" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_SetThreadName(&quot;threadname&quot;,&quot;s&quot;)</definition>
        <argsstring>(&quot;threadname&quot;,&quot;s&quot;)</argsstring>
        <name>EV_Thread_SetThreadName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="57" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a490a2d0598f8d15bebf962f3706ec4bf" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_GetEntity(&quot;getEntity&quot;,&quot;s&quot;, &apos;e&apos;)</definition>
        <argsstring>(&quot;getEntity&quot;,&quot;s&quot;, &apos;e&apos;)</argsstring>
        <name>EV_Thread_GetEntity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="58" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1aaac356dcccf6a5ac4d515a050716e0e9" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_Spawn(&quot;spawn&quot;,&quot;s&quot;, &apos;e&apos;)</definition>
        <argsstring>(&quot;spawn&quot;,&quot;s&quot;, &apos;e&apos;)</argsstring>
        <name>EV_Thread_Spawn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="59" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1adbb8cc63f17f96e76fbb6bcd1dea5b2c" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_CopySpawnArgs(&quot;copySpawnArgs&quot;,&quot;e&quot;)</definition>
        <argsstring>(&quot;copySpawnArgs&quot;,&quot;e&quot;)</argsstring>
        <name>EV_Thread_CopySpawnArgs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="60" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a043c7e31dc1a98759631c1da09303d7d" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_SetSpawnArg(&quot;setSpawnArg&quot;,&quot;ss&quot;)</definition>
        <argsstring>(&quot;setSpawnArg&quot;,&quot;ss&quot;)</argsstring>
        <name>EV_Thread_SetSpawnArg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="61" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1ac2d1b208fac0e2d9f7272396189e10de" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_SpawnString(&quot;SpawnString&quot;,&quot;ss&quot;, &apos;s&apos;)</definition>
        <argsstring>(&quot;SpawnString&quot;,&quot;ss&quot;, &apos;s&apos;)</argsstring>
        <name>EV_Thread_SpawnString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="62" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a37391160c2dbe50312fd8c9c0429a928" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_SpawnFloat(&quot;SpawnFloat&quot;,&quot;sf&quot;, &apos;f&apos;)</definition>
        <argsstring>(&quot;SpawnFloat&quot;,&quot;sf&quot;, &apos;f&apos;)</argsstring>
        <name>EV_Thread_SpawnFloat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="63" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1ae1fc9ac54f50af220c2ccb6fd1f74968" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_SpawnVector(&quot;SpawnVector&quot;,&quot;sv&quot;, &apos;v&apos;)</definition>
        <argsstring>(&quot;SpawnVector&quot;,&quot;sv&quot;, &apos;v&apos;)</argsstring>
        <name>EV_Thread_SpawnVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="64" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a93feb7e5dd5e2f161bac9109f583e8b1" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_ClearPersistantArgs(&quot;clearPersistantArgs&quot;)</definition>
        <argsstring>(&quot;clearPersistantArgs&quot;)</argsstring>
        <name>EV_Thread_ClearPersistantArgs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="65" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1af0c9c8c8e0b55bc762a3a4ff27c04086" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_SetPersistantArg(&quot;setPersistantArg&quot;,&quot;ss&quot;)</definition>
        <argsstring>(&quot;setPersistantArg&quot;,&quot;ss&quot;)</argsstring>
        <name>EV_Thread_SetPersistantArg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="66" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a84fd76becc754e65ab9125417735908f" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_GetPersistantString(&quot;getPersistantString&quot;,&quot;s&quot;, &apos;s&apos;)</definition>
        <argsstring>(&quot;getPersistantString&quot;,&quot;s&quot;, &apos;s&apos;)</argsstring>
        <name>EV_Thread_GetPersistantString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="67" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a10a663f2b6c19ce0a5ec1351b5e9501f" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_GetPersistantFloat(&quot;getPersistantFloat&quot;,&quot;s&quot;, &apos;f&apos;)</definition>
        <argsstring>(&quot;getPersistantFloat&quot;,&quot;s&quot;, &apos;f&apos;)</argsstring>
        <name>EV_Thread_GetPersistantFloat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="68" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1ae8734a711139043aba362113a6c74ed7" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_GetPersistantVector(&quot;getPersistantVector&quot;,&quot;s&quot;, &apos;v&apos;)</definition>
        <argsstring>(&quot;getPersistantVector&quot;,&quot;s&quot;, &apos;v&apos;)</argsstring>
        <name>EV_Thread_GetPersistantVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="69" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a5f7fca1878bac0157e116ba5603d0d91" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_AngToForward(&quot;angToForward&quot;,&quot;v&quot;, &apos;v&apos;)</definition>
        <argsstring>(&quot;angToForward&quot;,&quot;v&quot;, &apos;v&apos;)</argsstring>
        <name>EV_Thread_AngToForward</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="70" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a74642efe2da04bc33edcdfa5eb8a5b47" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_AngToRight(&quot;angToRight&quot;,&quot;v&quot;, &apos;v&apos;)</definition>
        <argsstring>(&quot;angToRight&quot;,&quot;v&quot;, &apos;v&apos;)</argsstring>
        <name>EV_Thread_AngToRight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="71" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a0f203fbd644742d646d93a12b62abd04" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_AngToUp(&quot;angToUp&quot;,&quot;v&quot;, &apos;v&apos;)</definition>
        <argsstring>(&quot;angToUp&quot;,&quot;v&quot;, &apos;v&apos;)</argsstring>
        <name>EV_Thread_AngToUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="72" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a7eb66e92e627ca083dbd777a7597ce89" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_Sine(&quot;sin&quot;,&quot;f&quot;, &apos;f&apos;)</definition>
        <argsstring>(&quot;sin&quot;,&quot;f&quot;, &apos;f&apos;)</argsstring>
        <name>EV_Thread_Sine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="73" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a2b168470bb6f2fb825cbe94a79432987" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_Cosine(&quot;cos&quot;,&quot;f&quot;, &apos;f&apos;)</definition>
        <argsstring>(&quot;cos&quot;,&quot;f&quot;, &apos;f&apos;)</argsstring>
        <name>EV_Thread_Cosine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="74" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a5b99a8325725d72849e226ac3a68f077" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_SquareRoot(&quot;sqrt&quot;,&quot;f&quot;, &apos;f&apos;)</definition>
        <argsstring>(&quot;sqrt&quot;,&quot;f&quot;, &apos;f&apos;)</argsstring>
        <name>EV_Thread_SquareRoot</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="79" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a015aaec335ef886d6fc3017e6b0579e3" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_Normalize(&quot;vecNormalize&quot;,&quot;v&quot;, &apos;v&apos;)</definition>
        <argsstring>(&quot;vecNormalize&quot;,&quot;v&quot;, &apos;v&apos;)</argsstring>
        <name>EV_Thread_Normalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="80" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1adf4a6e56a057a48d0c60856507d7e63d" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_VecLength(&quot;vecLength&quot;,&quot;v&quot;, &apos;f&apos;)</definition>
        <argsstring>(&quot;vecLength&quot;,&quot;v&quot;, &apos;f&apos;)</argsstring>
        <name>EV_Thread_VecLength</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="81" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a967635d08d6d0c231b92f592ac44f4ee" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_VecDotProduct(&quot;DotProduct&quot;,&quot;vv&quot;, &apos;f&apos;)</definition>
        <argsstring>(&quot;DotProduct&quot;,&quot;vv&quot;, &apos;f&apos;)</argsstring>
        <name>EV_Thread_VecDotProduct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="82" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a53e03a29d0a4c492a9f2863512859e2d" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_VecCrossProduct(&quot;CrossProduct&quot;,&quot;vv&quot;, &apos;v&apos;)</definition>
        <argsstring>(&quot;CrossProduct&quot;,&quot;vv&quot;, &apos;v&apos;)</argsstring>
        <name>EV_Thread_VecCrossProduct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="83" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1acf6f5aab6de7a8f11dc861b106c918aa" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_VecToAngles(&quot;VecToAngles&quot;,&quot;v&quot;, &apos;v&apos;)</definition>
        <argsstring>(&quot;VecToAngles&quot;,&quot;v&quot;, &apos;v&apos;)</argsstring>
        <name>EV_Thread_VecToAngles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="84" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1af57a10a91c17034065ef153347cce09e" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_OnSignal(&quot;onSignal&quot;,&quot;des&quot;)</definition>
        <argsstring>(&quot;onSignal&quot;,&quot;des&quot;)</argsstring>
        <name>EV_Thread_OnSignal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="89" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1ac9d3beb0356adad52f51ff8698cf6205" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_ClearSignal(&quot;clearSignalThread&quot;,&quot;de&quot;)</definition>
        <argsstring>(&quot;clearSignalThread&quot;,&quot;de&quot;)</argsstring>
        <name>EV_Thread_ClearSignal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="90" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a05eef3ebe065a594145a179e450cbc43" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_SetCamera(&quot;setCamera&quot;,&quot;e&quot;)</definition>
        <argsstring>(&quot;setCamera&quot;,&quot;e&quot;)</argsstring>
        <name>EV_Thread_SetCamera</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="91" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a2f620f2ae42ca1340900bd243274118b" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_FirstPerson(&quot;firstPerson&quot;, NULL)</definition>
        <argsstring>(&quot;firstPerson&quot;, NULL)</argsstring>
        <name>EV_Thread_FirstPerson</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="92" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a40e37ecd4d74ed95c4e0d1d3bc4a8cda" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_Trace(&quot;trace&quot;,&quot;vvvvde&quot;, &apos;f&apos;)</definition>
        <argsstring>(&quot;trace&quot;,&quot;vvvvde&quot;, &apos;f&apos;)</argsstring>
        <name>EV_Thread_Trace</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="93" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a08ad305252909d10ea5b1c2e55880b11" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_TracePoint(&quot;tracePoint&quot;,&quot;vvde&quot;, &apos;f&apos;)</definition>
        <argsstring>(&quot;tracePoint&quot;,&quot;vvde&quot;, &apos;f&apos;)</argsstring>
        <name>EV_Thread_TracePoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="94" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a69b0dc9cd6344f24053ba9927478f759" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_GetTraceFraction(&quot;getTraceFraction&quot;, NULL, &apos;f&apos;)</definition>
        <argsstring>(&quot;getTraceFraction&quot;, NULL, &apos;f&apos;)</argsstring>
        <name>EV_Thread_GetTraceFraction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="95" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1aa844551f1dde9f9b0db4107ea01d47de" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_GetTraceEndPos(&quot;getTraceEndPos&quot;, NULL, &apos;v&apos;)</definition>
        <argsstring>(&quot;getTraceEndPos&quot;, NULL, &apos;v&apos;)</argsstring>
        <name>EV_Thread_GetTraceEndPos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="96" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a7529bd5f13038a2df2288bd3db4dbdc7" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_GetTraceNormal(&quot;getTraceNormal&quot;, NULL, &apos;v&apos;)</definition>
        <argsstring>(&quot;getTraceNormal&quot;, NULL, &apos;v&apos;)</argsstring>
        <name>EV_Thread_GetTraceNormal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="97" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a30279f0b3e83adf03dabb656ce3ba369" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_GetTraceEntity(&quot;getTraceEntity&quot;, NULL, &apos;e&apos;)</definition>
        <argsstring>(&quot;getTraceEntity&quot;, NULL, &apos;e&apos;)</argsstring>
        <name>EV_Thread_GetTraceEntity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="98" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1af0748eee2e812b33651e8e98cb16a68c" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_GetTraceJoint(&quot;getTraceJoint&quot;, NULL, &apos;s&apos;)</definition>
        <argsstring>(&quot;getTraceJoint&quot;, NULL, &apos;s&apos;)</argsstring>
        <name>EV_Thread_GetTraceJoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="99" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a82be88fa596845d047579a568fb98c41" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_GetTraceBody(&quot;getTraceBody&quot;, NULL, &apos;s&apos;)</definition>
        <argsstring>(&quot;getTraceBody&quot;, NULL, &apos;s&apos;)</argsstring>
        <name>EV_Thread_GetTraceBody</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="100" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a031c4c89a5d68178c92306ac6292f92d" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_FadeIn(&quot;fadeIn&quot;,&quot;vf&quot;)</definition>
        <argsstring>(&quot;fadeIn&quot;,&quot;vf&quot;)</argsstring>
        <name>EV_Thread_FadeIn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="101" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a882729f41a0ada9e12207e8f1fa32815" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_FadeOut(&quot;fadeOut&quot;,&quot;vf&quot;)</definition>
        <argsstring>(&quot;fadeOut&quot;,&quot;vf&quot;)</argsstring>
        <name>EV_Thread_FadeOut</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="102" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a8f2305e30baa98468adf7eea71373d09" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_FadeTo(&quot;fadeTo&quot;,&quot;vff&quot;)</definition>
        <argsstring>(&quot;fadeTo&quot;,&quot;vff&quot;)</argsstring>
        <name>EV_Thread_FadeTo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="103" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a5287b3d6fbb60a28ccfe32a1ad941b28" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_StartMusic(&quot;music&quot;,&quot;s&quot;)</definition>
        <argsstring>(&quot;music&quot;,&quot;s&quot;)</argsstring>
        <name>EV_Thread_StartMusic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="104" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a751a7698c12e19db329655b97f2482e9" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_Error(&quot;error&quot;,&quot;s&quot;)</definition>
        <argsstring>(&quot;error&quot;,&quot;s&quot;)</argsstring>
        <name>EV_Thread_Error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="105" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a83b47b2b2153b034b22cef05f78cfd22" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_Warning(&quot;warning&quot;,&quot;s&quot;)</definition>
        <argsstring>(&quot;warning&quot;,&quot;s&quot;)</argsstring>
        <name>EV_Thread_Warning</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="106" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a423e5bd1dce3ae6b72ec45fdae0c0509" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_StrLen(&quot;strLength&quot;,&quot;s&quot;, &apos;d&apos;)</definition>
        <argsstring>(&quot;strLength&quot;,&quot;s&quot;, &apos;d&apos;)</argsstring>
        <name>EV_Thread_StrLen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="107" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1ae0f2d85bf59b26bdb3d58278a704d353" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_StrLeft(&quot;strLeft&quot;,&quot;sd&quot;, &apos;s&apos;)</definition>
        <argsstring>(&quot;strLeft&quot;,&quot;sd&quot;, &apos;s&apos;)</argsstring>
        <name>EV_Thread_StrLeft</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="108" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1aba158d9907f1532bca2b4754de893a81" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_StrRight(&quot;strRight&quot;,&quot;sd&quot;, &apos;s&apos;)</definition>
        <argsstring>(&quot;strRight&quot;,&quot;sd&quot;, &apos;s&apos;)</argsstring>
        <name>EV_Thread_StrRight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="109" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a28b8e97cffcc0598c350991348ea9877" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_StrSkip(&quot;strSkip&quot;,&quot;sd&quot;, &apos;s&apos;)</definition>
        <argsstring>(&quot;strSkip&quot;,&quot;sd&quot;, &apos;s&apos;)</argsstring>
        <name>EV_Thread_StrSkip</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="110" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a3bd9ee387bf779e10455a77722ec45d5" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_StrMid(&quot;strMid&quot;,&quot;sdd&quot;, &apos;s&apos;)</definition>
        <argsstring>(&quot;strMid&quot;,&quot;sdd&quot;, &apos;s&apos;)</argsstring>
        <name>EV_Thread_StrMid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="111" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a13fe2aa962b84a95877da2441ff5daa6" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_StrToFloat(&quot;strToFloat&quot;,&quot;s&quot;, &apos;f&apos;)</definition>
        <argsstring>(&quot;strToFloat&quot;,&quot;s&quot;, &apos;f&apos;)</argsstring>
        <name>EV_Thread_StrToFloat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="112" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a974f6a19b8686f3750d570dce221b503" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_RadiusDamage(&quot;radiusDamage&quot;,&quot;vEEEsf&quot;)</definition>
        <argsstring>(&quot;radiusDamage&quot;,&quot;vEEEsf&quot;)</argsstring>
        <name>EV_Thread_RadiusDamage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="113" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a86666dca4ea7520ba38d5159bb27cb0b" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_IsClient(&quot;isClient&quot;, NULL, &apos;f&apos;)</definition>
        <argsstring>(&quot;isClient&quot;, NULL, &apos;f&apos;)</argsstring>
        <name>EV_Thread_IsClient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="114" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a6df390d82b8034668f1e865ac4fbd117" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_IsMultiplayer(&quot;isMultiplayer&quot;, NULL, &apos;f&apos;)</definition>
        <argsstring>(&quot;isMultiplayer&quot;, NULL, &apos;f&apos;)</argsstring>
        <name>EV_Thread_IsMultiplayer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="115" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1aaf3a3ccc9cccd8c8a827bd3989b591c8" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_GetFrameTime(&quot;getFrameTime&quot;, NULL, &apos;f&apos;)</definition>
        <argsstring>(&quot;getFrameTime&quot;, NULL, &apos;f&apos;)</argsstring>
        <name>EV_Thread_GetFrameTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="116" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a698058cf2725c3805bd2e2a2a5184ecb" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_GetTicsPerSecond(&quot;getTicsPerSecond&quot;, NULL, &apos;f&apos;)</definition>
        <argsstring>(&quot;getTicsPerSecond&quot;, NULL, &apos;f&apos;)</argsstring>
        <name>EV_Thread_GetTicsPerSecond</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="117" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1aa3eb5a69c18cd6d7200e905b609f2e40" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_DebugLine(&quot;debugLine&quot;,&quot;vvvf&quot;)</definition>
        <argsstring>(&quot;debugLine&quot;,&quot;vvvf&quot;)</argsstring>
        <name>EV_Thread_DebugLine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="118" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a8689952bba8dbb13db854573006cf6e6" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_DebugArrow(&quot;debugArrow&quot;,&quot;vvvdf&quot;)</definition>
        <argsstring>(&quot;debugArrow&quot;,&quot;vvvdf&quot;)</argsstring>
        <name>EV_Thread_DebugArrow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="119" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a0d2b91aef33fb55191419189bfbc9acd" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_DebugCircle(&quot;debugCircle&quot;,&quot;vvvfdf&quot;)</definition>
        <argsstring>(&quot;debugCircle&quot;,&quot;vvvfdf&quot;)</argsstring>
        <name>EV_Thread_DebugCircle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="120" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a96a8e53a4282cb73ec0e44e5d236e6a3" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_DebugBounds(&quot;debugBounds&quot;,&quot;vvvf&quot;)</definition>
        <argsstring>(&quot;debugBounds&quot;,&quot;vvvf&quot;)</argsstring>
        <name>EV_Thread_DebugBounds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="121" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a8359f107bdc52484187ffcd1558beae2" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_DrawText(&quot;drawText&quot;,&quot;svfvdf&quot;)</definition>
        <argsstring>(&quot;drawText&quot;,&quot;svfvdf&quot;)</argsstring>
        <name>EV_Thread_DrawText</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="122" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="d3xp_2script_2_script___thread_8cpp_1a1d8d07b64ab8eeac656f67fc882bdd84" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Thread_InfluenceActive(&quot;influenceActive&quot;, NULL, &apos;d&apos;)</definition>
        <argsstring>(&quot;influenceActive&quot;, NULL, &apos;d&apos;)</argsstring>
        <name>EV_Thread_InfluenceActive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp" line="123" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../Game_local.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_Execute(<sp/></highlight><highlight class="stringliteral">&quot;&lt;execute&gt;&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_SetCallback(<sp/></highlight><highlight class="stringliteral">&quot;&lt;script_setcallback&gt;&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>script<sp/>callable<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_TerminateThread(<sp/></highlight><highlight class="stringliteral">&quot;terminate&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_Pause(<sp/></highlight><highlight class="stringliteral">&quot;pause&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_Wait(<sp/></highlight><highlight class="stringliteral">&quot;wait&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_WaitFrame(<sp/></highlight><highlight class="stringliteral">&quot;waitFrame&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_WaitFor(<sp/></highlight><highlight class="stringliteral">&quot;waitFor&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_WaitForThread(<sp/></highlight><highlight class="stringliteral">&quot;waitForThread&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_Print(<sp/></highlight><highlight class="stringliteral">&quot;print&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_PrintLn(<sp/></highlight><highlight class="stringliteral">&quot;println&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_Say(<sp/></highlight><highlight class="stringliteral">&quot;say&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_Assert(<sp/></highlight><highlight class="stringliteral">&quot;assert&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_Trigger(<sp/></highlight><highlight class="stringliteral">&quot;trigger&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_SetCvar(<sp/></highlight><highlight class="stringliteral">&quot;setcvar&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ss&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_GetCvar(<sp/></highlight><highlight class="stringliteral">&quot;getcvar&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_Random(<sp/></highlight><highlight class="stringliteral">&quot;random&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_RandomInt(<sp/></highlight><highlight class="stringliteral">&quot;randomInt&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_GetTime(<sp/></highlight><highlight class="stringliteral">&quot;getTime&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_KillThread(<sp/></highlight><highlight class="stringliteral">&quot;killthread&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_SetThreadName(<sp/></highlight><highlight class="stringliteral">&quot;threadname&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_GetEntity(<sp/></highlight><highlight class="stringliteral">&quot;getEntity&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_Spawn(<sp/></highlight><highlight class="stringliteral">&quot;spawn&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_CopySpawnArgs(<sp/></highlight><highlight class="stringliteral">&quot;copySpawnArgs&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_SetSpawnArg(<sp/></highlight><highlight class="stringliteral">&quot;setSpawnArg&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ss&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_SpawnString(<sp/></highlight><highlight class="stringliteral">&quot;SpawnString&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ss&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_SpawnFloat(<sp/></highlight><highlight class="stringliteral">&quot;SpawnFloat&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;sf&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_SpawnVector(<sp/></highlight><highlight class="stringliteral">&quot;SpawnVector&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;sv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_ClearPersistantArgs(<sp/></highlight><highlight class="stringliteral">&quot;clearPersistantArgs&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_SetPersistantArg(<sp/></highlight><highlight class="stringliteral">&quot;setPersistantArg&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ss&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_GetPersistantString(<sp/></highlight><highlight class="stringliteral">&quot;getPersistantString&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_GetPersistantFloat(<sp/></highlight><highlight class="stringliteral">&quot;getPersistantFloat&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_GetPersistantVector(<sp/></highlight><highlight class="stringliteral">&quot;getPersistantVector&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_AngToForward(<sp/></highlight><highlight class="stringliteral">&quot;angToForward&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_AngToRight(<sp/></highlight><highlight class="stringliteral">&quot;angToRight&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_AngToUp(<sp/></highlight><highlight class="stringliteral">&quot;angToUp&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_Sine(<sp/></highlight><highlight class="stringliteral">&quot;sin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_Cosine(<sp/></highlight><highlight class="stringliteral">&quot;cos&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_ArcSine(<sp/></highlight><highlight class="stringliteral">&quot;asin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_ArcCosine(<sp/></highlight><highlight class="stringliteral">&quot;acos&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_SquareRoot(<sp/></highlight><highlight class="stringliteral">&quot;sqrt&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_Normalize(<sp/></highlight><highlight class="stringliteral">&quot;vecNormalize&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_VecLength(<sp/></highlight><highlight class="stringliteral">&quot;vecLength&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_VecDotProduct(<sp/></highlight><highlight class="stringliteral">&quot;DotProduct&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;vv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_VecCrossProduct(<sp/></highlight><highlight class="stringliteral">&quot;CrossProduct&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;vv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_VecToAngles(<sp/></highlight><highlight class="stringliteral">&quot;VecToAngles&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_VecToOrthoBasisAngles(<sp/></highlight><highlight class="stringliteral">&quot;VecToOrthoBasisAngles&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_RotateVector(</highlight><highlight class="stringliteral">&quot;rotateVector&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;vv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_OnSignal(<sp/></highlight><highlight class="stringliteral">&quot;onSignal&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;des&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_ClearSignal(<sp/></highlight><highlight class="stringliteral">&quot;clearSignalThread&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;de&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_SetCamera(<sp/></highlight><highlight class="stringliteral">&quot;setCamera&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_FirstPerson(<sp/></highlight><highlight class="stringliteral">&quot;firstPerson&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_Trace(<sp/></highlight><highlight class="stringliteral">&quot;trace&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;vvvvde&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_TracePoint(<sp/></highlight><highlight class="stringliteral">&quot;tracePoint&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;vvde&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_GetTraceFraction(<sp/></highlight><highlight class="stringliteral">&quot;getTraceFraction&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_GetTraceEndPos(<sp/></highlight><highlight class="stringliteral">&quot;getTraceEndPos&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_GetTraceNormal(<sp/></highlight><highlight class="stringliteral">&quot;getTraceNormal&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_GetTraceEntity(<sp/></highlight><highlight class="stringliteral">&quot;getTraceEntity&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_GetTraceJoint(<sp/></highlight><highlight class="stringliteral">&quot;getTraceJoint&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_GetTraceBody(<sp/></highlight><highlight class="stringliteral">&quot;getTraceBody&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_FadeIn(<sp/></highlight><highlight class="stringliteral">&quot;fadeIn&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;vf&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_FadeOut(<sp/></highlight><highlight class="stringliteral">&quot;fadeOut&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;vf&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_FadeTo(<sp/></highlight><highlight class="stringliteral">&quot;fadeTo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;vff&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_StartMusic(<sp/></highlight><highlight class="stringliteral">&quot;music&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_Error(<sp/></highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_Warning(<sp/></highlight><highlight class="stringliteral">&quot;warning&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_StrLen(<sp/></highlight><highlight class="stringliteral">&quot;strLength&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_StrLeft(<sp/></highlight><highlight class="stringliteral">&quot;strLeft&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;sd&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_StrRight(<sp/></highlight><highlight class="stringliteral">&quot;strRight&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;sd&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_StrSkip(<sp/></highlight><highlight class="stringliteral">&quot;strSkip&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;sd&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_StrMid(<sp/></highlight><highlight class="stringliteral">&quot;strMid&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;sdd&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_StrToFloat(<sp/></highlight><highlight class="stringliteral">&quot;strToFloat&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_RadiusDamage(<sp/></highlight><highlight class="stringliteral">&quot;radiusDamage&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;vEEEsf&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_IsClient(<sp/></highlight><highlight class="stringliteral">&quot;isClient&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_IsMultiplayer(<sp/></highlight><highlight class="stringliteral">&quot;isMultiplayer&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_GetFrameTime(<sp/></highlight><highlight class="stringliteral">&quot;getFrameTime&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_GetTicsPerSecond(<sp/></highlight><highlight class="stringliteral">&quot;getTicsPerSecond&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_DebugLine(<sp/></highlight><highlight class="stringliteral">&quot;debugLine&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;vvvf&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_DebugArrow(<sp/></highlight><highlight class="stringliteral">&quot;debugArrow&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;vvvdf&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_DebugCircle(<sp/></highlight><highlight class="stringliteral">&quot;debugCircle&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;vvvfdf&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_DebugBounds(<sp/></highlight><highlight class="stringliteral">&quot;debugBounds&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;vvvf&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_DrawText(<sp/></highlight><highlight class="stringliteral">&quot;drawText&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;svfvdf&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Thread_InfluenceActive(<sp/></highlight><highlight class="stringliteral">&quot;influenceActive&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">CLASS_DECLARATION(<sp/><ref refid="classid_class" kindref="compound">idClass</ref>,<sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/>)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_Execute,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_Execute<sp/>)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_TerminateThread,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_TerminateThread<sp/>)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_Pause,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_Pause<sp/>)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_Wait,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_Wait<sp/>)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_WaitFrame,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_WaitFrame<sp/>)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_WaitFor,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_WaitFor<sp/>)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_WaitForThread,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_WaitForThread<sp/>)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_Print,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_Print<sp/>)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_PrintLn,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_PrintLn<sp/>)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_Say,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_Say<sp/>)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_Assert,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_Assert<sp/>)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_Trigger,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_Trigger<sp/>)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_SetCvar,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_SetCvar<sp/>)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_GetCvar,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_GetCvar<sp/>)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_Random,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_Random<sp/>)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_RandomInt,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::Event_RandomInt<sp/>)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_GetTime,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::Event_GetTime<sp/>)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_KillThread,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_KillThread<sp/>)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_SetThreadName,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_SetThreadName<sp/>)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_GetEntity,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_GetEntity<sp/>)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_Spawn,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_Spawn<sp/>)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_CopySpawnArgs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_CopySpawnArgs<sp/>)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_SetSpawnArg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_SetSpawnArg<sp/>)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_SpawnString,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_SpawnString<sp/>)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_SpawnFloat,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_SpawnFloat<sp/>)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_SpawnVector,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_SpawnVector<sp/>)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_ClearPersistantArgs,<sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_ClearPersistantArgs<sp/>)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_SetPersistantArg,<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_SetPersistantArg<sp/>)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_GetPersistantString,<sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_GetPersistantString<sp/>)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_GetPersistantFloat,<sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_GetPersistantFloat<sp/>)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_GetPersistantVector,<sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_GetPersistantVector<sp/>)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_AngToForward,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_AngToForward<sp/>)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_AngToRight,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_AngToRight<sp/>)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_AngToUp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_AngToUp<sp/>)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_Sine,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_GetSine<sp/>)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_Cosine,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_GetCosine<sp/>)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_ArcSine,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::Event_GetArcSine<sp/>)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_ArcCosine,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_GetArcCosine<sp/>)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_SquareRoot,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::Event_GetSquareRoot<sp/>)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_Normalize,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_VecNormalize<sp/>)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_VecLength,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_VecLength<sp/>)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_VecDotProduct,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_VecDotProduct<sp/>)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_VecCrossProduct,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_VecCrossProduct<sp/>)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_VecToAngles,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_VecToAngles<sp/>)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_VecToOrthoBasisAngles,<sp/>idThread::Event_VecToOrthoBasisAngles<sp/>)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_RotateVector,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_RotateVector<sp/>)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_OnSignal,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::Event_OnSignal<sp/>)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_ClearSignal,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_ClearSignalThread<sp/>)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_SetCamera,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_SetCamera<sp/>)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_FirstPerson,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_FirstPerson<sp/>)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_Trace,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_Trace<sp/>)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_TracePoint,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_TracePoint<sp/>)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_GetTraceFraction,<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_GetTraceFraction<sp/>)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_GetTraceEndPos,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_GetTraceEndPos<sp/>)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_GetTraceNormal,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_GetTraceNormal<sp/>)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_GetTraceEntity,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_GetTraceEntity<sp/>)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_GetTraceJoint,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_GetTraceJoint<sp/>)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_GetTraceBody,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_GetTraceBody<sp/>)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_FadeIn,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_FadeIn<sp/>)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_FadeOut,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_FadeOut<sp/>)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_FadeTo,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_FadeTo<sp/>)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_SetShaderParm,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_SetShaderParm<sp/>)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_StartMusic,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_StartMusic<sp/>)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_Warning,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_Warning<sp/>)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_Error,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_Error<sp/>)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_StrLen,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_StrLen<sp/>)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_StrLeft,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_StrLeft<sp/>)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_StrRight,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_StrRight<sp/>)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_StrSkip,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_StrSkip<sp/>)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_StrMid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_StrMid<sp/>)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_StrToFloat,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_StrToFloat<sp/>)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_RadiusDamage,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_RadiusDamage<sp/>)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_IsClient,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_IsClient<sp/>)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_IsMultiplayer,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_IsMultiplayer<sp/>)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_GetFrameTime,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_GetFrameTime<sp/>)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_GetTicsPerSecond,<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_GetTicsPerSecond<sp/>)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_CacheSoundShader,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_CacheSoundShader<sp/>)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_DebugLine,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_DebugLine<sp/>)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_DebugArrow,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_DebugArrow<sp/>)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_DebugCircle,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_DebugCircle<sp/>)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_DebugBounds,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_DebugBounds<sp/>)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_DrawText,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_DrawText<sp/>)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Thread_InfluenceActive,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::Event_InfluenceActive<sp/>)</highlight></codeline>
<codeline lineno="215"><highlight class="normal">END_CLASS</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><ref refid="classid_thread" kindref="compound">idThread</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="classid_thread" kindref="compound">idThread</ref>::currentThread<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::threadIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><ref refid="classid_list" kindref="compound">idList</ref>&lt;<ref refid="classid_thread" kindref="compound">idThread</ref><sp/>*&gt;<sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::threadList;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><ref refid="structtrace__s" kindref="compound">trace_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>::trace;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="223"><highlight class="comment">================</highlight></codeline>
<codeline lineno="224"><highlight class="comment">idThread::CurrentThread</highlight></codeline>
<codeline lineno="225"><highlight class="comment">================</highlight></codeline>
<codeline lineno="226"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><ref refid="classid_thread" kindref="compound">idThread</ref><sp/>*<ref refid="classid_thread" kindref="compound">idThread</ref>::CurrentThread(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>currentThread;</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="232"><highlight class="comment">================</highlight></codeline>
<codeline lineno="233"><highlight class="comment">idThread::CurrentThreadNum</highlight></codeline>
<codeline lineno="234"><highlight class="comment">================</highlight></codeline>
<codeline lineno="235"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idThread::CurrentThreadNum(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>currentThread<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>currentThread-&gt;GetThreadNum();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="245"><highlight class="comment">================</highlight></codeline>
<codeline lineno="246"><highlight class="comment">idThread::BeginMultiFrameEvent</highlight></codeline>
<codeline lineno="247"><highlight class="comment">================</highlight></codeline>
<codeline lineno="248"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idThread::BeginMultiFrameEvent(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*event<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!currentThread<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;idThread::BeginMultiFrameEvent<sp/>called<sp/>without<sp/>a<sp/>current<sp/>thread&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>currentThread-&gt;interpreter.BeginMultiFrameEvent(<sp/>ent,<sp/>event<sp/>);</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="257"><highlight class="comment">================</highlight></codeline>
<codeline lineno="258"><highlight class="comment">idThread::EndMultiFrameEvent</highlight></codeline>
<codeline lineno="259"><highlight class="comment">================</highlight></codeline>
<codeline lineno="260"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::EndMultiFrameEvent(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*event<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!currentThread<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;idThread::EndMultiFrameEvent<sp/>called<sp/>without<sp/>a<sp/>current<sp/>thread&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>currentThread-&gt;interpreter.EndMultiFrameEvent(<sp/>ent,<sp/>event<sp/>);</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="269"><highlight class="comment">================</highlight></codeline>
<codeline lineno="270"><highlight class="comment">idThread::idThread</highlight></codeline>
<codeline lineno="271"><highlight class="comment">================</highlight></codeline>
<codeline lineno="272"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal">idThread::idThread()<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>Init();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>SetThreadName(<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;thread_%d&quot;</highlight><highlight class="normal">,<sp/>threadIndex<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_debugScript.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;%d:<sp/>create<sp/>thread<sp/>(%d)<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>gameLocal.time,<sp/>threadNum,<sp/>threadName.c_str()<sp/>);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="282"><highlight class="comment">================</highlight></codeline>
<codeline lineno="283"><highlight class="comment">idThread::idThread</highlight></codeline>
<codeline lineno="284"><highlight class="comment">================</highlight></codeline>
<codeline lineno="285"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal">idThread::idThread(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfunction__t" kindref="compound">function_t</ref><sp/>*func<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>Init();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>SetThreadName(<sp/>self-&gt;name<sp/>);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>interpreter.EnterObjectFunction(<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>func,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_debugScript.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;%d:<sp/>create<sp/>thread<sp/>(%d)<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>gameLocal.time,<sp/>threadNum,<sp/>threadName.c_str()<sp/>);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="298"><highlight class="comment">================</highlight></codeline>
<codeline lineno="299"><highlight class="comment">idThread::idThread</highlight></codeline>
<codeline lineno="300"><highlight class="comment">================</highlight></codeline>
<codeline lineno="301"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal">idThread::idThread(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfunction__t" kindref="compound">function_t</ref><sp/>*func<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>func<sp/>);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>Init();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>SetThreadName(<sp/>func-&gt;Name()<sp/>);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>interpreter.EnterFunction(<sp/>func,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_debugScript.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;%d:<sp/>create<sp/>thread<sp/>(%d)<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>gameLocal.time,<sp/>threadNum,<sp/>threadName.c_str()<sp/>);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="314"><highlight class="comment">================</highlight></codeline>
<codeline lineno="315"><highlight class="comment">idThread::idThread</highlight></codeline>
<codeline lineno="316"><highlight class="comment">================</highlight></codeline>
<codeline lineno="317"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal">idThread::idThread(<sp/><ref refid="classid_interpreter" kindref="compound">idInterpreter</ref><sp/>*source,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfunction__t" kindref="compound">function_t</ref><sp/>*func,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>Init();</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>interpreter.ThreadCall(<sp/>source,<sp/>func,<sp/>args<sp/>);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_debugScript.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;%d:<sp/>create<sp/>thread<sp/>(%d)<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>gameLocal.time,<sp/>threadNum,<sp/>threadName.c_str()<sp/>);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="327"><highlight class="comment">================</highlight></codeline>
<codeline lineno="328"><highlight class="comment">idThread::idThread</highlight></codeline>
<codeline lineno="329"><highlight class="comment">================</highlight></codeline>
<codeline lineno="330"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal">idThread::idThread(<sp/><ref refid="classid_interpreter" kindref="compound">idInterpreter</ref><sp/>*source,<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfunction__t" kindref="compound">function_t</ref><sp/>*func,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>Init();</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>SetThreadName(<sp/>self-&gt;name<sp/>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>interpreter.ThreadCall(<sp/>source,<sp/>func,<sp/>args<sp/>);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_debugScript.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;%d:<sp/>create<sp/>thread<sp/>(%d)<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>gameLocal.time,<sp/>threadNum,<sp/>threadName.c_str()<sp/>);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="343"><highlight class="comment">================</highlight></codeline>
<codeline lineno="344"><highlight class="comment">idThread::~idThread</highlight></codeline>
<codeline lineno="345"><highlight class="comment">================</highlight></codeline>
<codeline lineno="346"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal">idThread::~idThread()<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/><sp/><sp/><sp/>*thread;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_debugScript.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;%d:<sp/>end<sp/>thread<sp/>(%d)<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>gameLocal.time,<sp/>threadNum,<sp/>threadName.c_str()<sp/>);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>threadList.Remove(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>threadList.Num();</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread<sp/>=<sp/>threadList[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>thread-&gt;WaitingOnThread()<sp/>==<sp/>this<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;ThreadCallback(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>currentThread<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentThread<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="370"><highlight class="comment">================</highlight></codeline>
<codeline lineno="371"><highlight class="comment">idThread::ManualDelete</highlight></codeline>
<codeline lineno="372"><highlight class="comment">================</highlight></codeline>
<codeline lineno="373"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::ManualDelete(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>interpreter.terminateOnExit<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="379"><highlight class="comment">================</highlight></codeline>
<codeline lineno="380"><highlight class="comment">idThread::Save</highlight></codeline>
<codeline lineno="381"><highlight class="comment">================</highlight></codeline>
<codeline lineno="382"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Save(<sp/><ref refid="classid_save_game" kindref="compound">idSaveGame</ref><sp/>*savefile<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>check<sp/>on<sp/>restore<sp/>that<sp/>threadNum<sp/>is<sp/>still<sp/>the<sp/>same,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>threads<sp/>should<sp/>have<sp/>been<sp/>restored<sp/>in<sp/>the<sp/>same<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteInt(<sp/>threadNum<sp/>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteObject(<sp/>waitingForThread<sp/>);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteInt(<sp/>waitingFor<sp/>);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteInt(<sp/>waitingUntil<sp/>);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>interpreter.Save(<sp/>savefile<sp/>);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteDict(<sp/>&amp;spawnArgs<sp/>);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteString(<sp/>threadName<sp/>);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteInt(<sp/>lastExecuteTime<sp/>);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteInt(<sp/>creationTime<sp/>);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;WriteBool(<sp/>manualControl<sp/>);</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="405"><highlight class="comment">================</highlight></codeline>
<codeline lineno="406"><highlight class="comment">idThread::Restore</highlight></codeline>
<codeline lineno="407"><highlight class="comment">================</highlight></codeline>
<codeline lineno="408"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Restore(<sp/><ref refid="classid_restore_game" kindref="compound">idRestoreGame</ref><sp/>*savefile<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadInt(<sp/>threadNum<sp/>);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadObject(<sp/>reinterpret_cast&lt;idClass<sp/>*&amp;&gt;(<sp/>waitingForThread<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadInt(<sp/>waitingFor<sp/>);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadInt(<sp/>waitingUntil<sp/>);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>interpreter.Restore(<sp/>savefile<sp/>);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadDict(<sp/>&amp;spawnArgs<sp/>);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadString(<sp/>threadName<sp/>);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadInt(<sp/>lastExecuteTime<sp/>);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadInt(<sp/>creationTime<sp/>);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>savefile-&gt;ReadBool(<sp/>manualControl<sp/>);</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="428"><highlight class="comment">================</highlight></codeline>
<codeline lineno="429"><highlight class="comment">idThread::Init</highlight></codeline>
<codeline lineno="430"><highlight class="comment">================</highlight></codeline>
<codeline lineno="431"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Init(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>unique<sp/>threadNum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threadIndex++;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>threadIndex<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threadIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>GetThread(<sp/>threadIndex<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>threadNum<sp/>=<sp/>threadIndex;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>threadList.Append(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>creationTime<sp/>=<sp/>gameLocal.time;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>lastExecuteTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>manualControl<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>ClearWaitFor();</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>interpreter.SetThread(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="454"><highlight class="comment">================</highlight></codeline>
<codeline lineno="455"><highlight class="comment">idThread::GetThread</highlight></codeline>
<codeline lineno="456"><highlight class="comment">================</highlight></codeline>
<codeline lineno="457"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><ref refid="classid_thread" kindref="compound">idThread</ref><sp/>*idThread::GetThread(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/><sp/><sp/><sp/>*thread;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>threadList.Num();</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread<sp/>=<sp/>threadList[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>thread-&gt;GetThreadNum()<sp/>==<sp/>num<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>thread;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="475"><highlight class="comment">================</highlight></codeline>
<codeline lineno="476"><highlight class="comment">idThread::DisplayInfo</highlight></codeline>
<codeline lineno="477"><highlight class="comment">================</highlight></codeline>
<codeline lineno="478"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::DisplayInfo(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%12i:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File:<sp/>%s(%d)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>Created:<sp/>%d<sp/>(%d<sp/>ms<sp/>ago)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Status:<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threadNum,<sp/>threadName.c_str(),<sp/></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interpreter.CurrentFile(),<sp/>interpreter.CurrentLine(),<sp/></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>creationTime,<sp/>gameLocal.time<sp/>-<sp/>creationTime<sp/>);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>interpreter.threadDying<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;Dying\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>interpreter.doneProcessing<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Paused<sp/>since<sp/>%d<sp/>(%d<sp/>ms)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>Reason:<sp/>&quot;</highlight><highlight class="normal">,<sp/><sp/>lastExecuteTime,<sp/>gameLocal.time<sp/>-<sp/>lastExecuteTime<sp/>);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>waitingForThread<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;Waiting<sp/>for<sp/>thread<sp/>#%3i<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>waitingForThread-&gt;GetThreadNum(),<sp/>waitingForThread-&gt;GetThreadName()<sp/>);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>waitingFor<sp/>!=<sp/>ENTITYNUM_NONE<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>gameLocal.entities[<sp/>waitingFor<sp/>]<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;Waiting<sp/>for<sp/>entity<sp/>#%3i<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>waitingFor,<sp/>gameLocal.entities[<sp/>waitingFor<sp/>]-&gt;name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>waitingUntil<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;Waiting<sp/>until<sp/>%d<sp/>(%d<sp/>ms<sp/>total<sp/>wait<sp/>time)\n&quot;</highlight><highlight class="normal">,<sp/>waitingUntil,<sp/>waitingUntil<sp/>-<sp/>lastExecuteTime<sp/>);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;None\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;Processing\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>interpreter.DisplayInfo();</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="514"><highlight class="comment">================</highlight></codeline>
<codeline lineno="515"><highlight class="comment">idThread::ListThreads_f</highlight></codeline>
<codeline lineno="516"><highlight class="comment">================</highlight></codeline>
<codeline lineno="517"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::ListThreads_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>threadList.Num();</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//threadList[<sp/>i<sp/>]-&gt;DisplayInfo();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;%3i:<sp/>%-20s<sp/>:<sp/>%s(%d)\n&quot;</highlight><highlight class="normal">,<sp/>threadList[<sp/>i<sp/>]-&gt;threadNum,<sp/>threadList[<sp/>i<sp/>]-&gt;threadName.c_str(),<sp/>threadList[<sp/>i<sp/>]-&gt;interpreter.CurrentFile(),<sp/>threadList[<sp/>i<sp/>]-&gt;interpreter.CurrentLine()<sp/>);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>active<sp/>threads\n\n&quot;</highlight><highlight class="normal">,<sp/>n<sp/>);</highlight></codeline>
<codeline lineno="528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="531"><highlight class="comment">================</highlight></codeline>
<codeline lineno="532"><highlight class="comment">idThread::Restart</highlight></codeline>
<codeline lineno="533"><highlight class="comment">================</highlight></codeline>
<codeline lineno="534"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Restart(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>the<sp/>threadIndex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>threadIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>currentThread<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>threadList.Num();</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>n<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>threadList[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>threadList.Clear();</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>&amp;trace,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>trace<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>trace.c.entityNum<sp/>=<sp/>ENTITYNUM_NONE;</highlight></codeline>
<codeline lineno="551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="554"><highlight class="comment">================</highlight></codeline>
<codeline lineno="555"><highlight class="comment">idThread::DelayedStart</highlight></codeline>
<codeline lineno="556"><highlight class="comment">================</highlight></codeline>
<codeline lineno="557"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::DelayedStart(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delay<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>CancelEvents(<sp/>&amp;EV_Thread_Execute<sp/>);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.time<sp/>&lt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay++;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>PostEventMS(<sp/>&amp;EV_Thread_Execute,<sp/>delay<sp/>);</highlight></codeline>
<codeline lineno="564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="567"><highlight class="comment">================</highlight></codeline>
<codeline lineno="568"><highlight class="comment">idThread::Start</highlight></codeline>
<codeline lineno="569"><highlight class="comment">================</highlight></codeline>
<codeline lineno="570"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idThread::Start(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>CancelEvents(<sp/>&amp;EV_Thread_Execute<sp/>);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>Execute();</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="581"><highlight class="comment">================</highlight></codeline>
<codeline lineno="582"><highlight class="comment">idThread::SetThreadName</highlight></codeline>
<codeline lineno="583"><highlight class="comment">================</highlight></codeline>
<codeline lineno="584"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::SetThreadName(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>threadName<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="590"><highlight class="comment">================</highlight></codeline>
<codeline lineno="591"><highlight class="comment">idThread::ObjectMoveDone</highlight></codeline>
<codeline lineno="592"><highlight class="comment">================</highlight></codeline>
<codeline lineno="593"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::ObjectMoveDone(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threadnum,<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*obj<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/>*thread;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!threadnum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>thread<sp/>=<sp/>GetThread(<sp/>threadnum<sp/>);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>thread<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;ObjectMoveDone(<sp/>obj<sp/>);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="608"><highlight class="comment">================</highlight></codeline>
<codeline lineno="609"><highlight class="comment">idThread::End</highlight></codeline>
<codeline lineno="610"><highlight class="comment">================</highlight></codeline>
<codeline lineno="611"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::End(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tell<sp/>thread<sp/>to<sp/>die.<sp/><sp/>It<sp/>will<sp/>exit<sp/>on<sp/>its<sp/>own.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>Pause();</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>interpreter.threadDying<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="619"><highlight class="comment">================</highlight></codeline>
<codeline lineno="620"><highlight class="comment">idThread::KillThread</highlight></codeline>
<codeline lineno="621"><highlight class="comment">================</highlight></codeline>
<codeline lineno="622"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::KillThread(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*ptr;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/><sp/><sp/><sp/>*thread;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>the<sp/>name<sp/>uses<sp/>a<sp/>wild<sp/>card</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>strchr(<sp/>name,<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ptr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>ptr<sp/>-<sp/>name;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>strlen(<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kill<sp/>only<sp/>those<sp/>threads<sp/>whose<sp/>name<sp/>matches<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>threadList.Num();</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread<sp/>=<sp/>threadList[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idStr::Cmpn(<sp/>thread-&gt;GetThreadName(),<sp/>name,<sp/>len<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;End();</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="649"><highlight class="comment">================</highlight></codeline>
<codeline lineno="650"><highlight class="comment">idThread::KillThread</highlight></codeline>
<codeline lineno="651"><highlight class="comment">================</highlight></codeline>
<codeline lineno="652"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::KillThread(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/>*thread;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>thread<sp/>=<sp/>GetThread(<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>thread<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tell<sp/>thread<sp/>to<sp/>die.<sp/><sp/>It<sp/>will<sp/>delete<sp/>itself<sp/>on<sp/>it&apos;s<sp/>own.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;End();</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="664"><highlight class="comment">================</highlight></codeline>
<codeline lineno="665"><highlight class="comment">idThread::Execute</highlight></codeline>
<codeline lineno="666"><highlight class="comment">================</highlight></codeline>
<codeline lineno="667"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idThread::Execute(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/><sp/><sp/><sp/>*oldThread;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>done;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>manualControl<sp/>&amp;&amp;<sp/>(<sp/>waitingUntil<sp/>&gt;<sp/>gameLocal.time<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>oldThread<sp/>=<sp/>currentThread;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>currentThread<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>lastExecuteTime<sp/>=<sp/>gameLocal.time;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>ClearWaitFor();</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>done<sp/>=<sp/>interpreter.Execute();</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>done<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>End();</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>interpreter.terminateOnExit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PostEventMS(<sp/>&amp;EV_Remove,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!manualControl<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>waitingUntil<sp/>&gt;<sp/>lastExecuteTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PostEventMS(<sp/>&amp;EV_Thread_Execute,<sp/>waitingUntil<sp/>-<sp/>lastExecuteTime<sp/>);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>interpreter.MultiFrameEventInProgress()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PostEventMS(<sp/>&amp;EV_Thread_Execute,<sp/>gameLocal.msec<sp/>);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>currentThread<sp/>=<sp/>oldThread;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="701"><highlight class="comment">================</highlight></codeline>
<codeline lineno="702"><highlight class="comment">idThread::IsWaiting</highlight></codeline>
<codeline lineno="703"><highlight class="comment"></highlight></codeline>
<codeline lineno="704"><highlight class="comment">Checks<sp/>if<sp/>thread<sp/>is<sp/>still<sp/>waiting<sp/>for<sp/>some<sp/>event<sp/>to<sp/>occur.</highlight></codeline>
<codeline lineno="705"><highlight class="comment">================</highlight></codeline>
<codeline lineno="706"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idThread::IsWaiting(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>waitingForThread<sp/>||<sp/>(<sp/>waitingFor<sp/>!=<sp/>ENTITYNUM_NONE<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>waitingUntil<sp/>&amp;&amp;<sp/>(<sp/>waitingUntil<sp/>&gt;<sp/>gameLocal.time<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="720"><highlight class="comment">================</highlight></codeline>
<codeline lineno="721"><highlight class="comment">idThread::CallFunction</highlight></codeline>
<codeline lineno="722"><highlight class="comment"></highlight></codeline>
<codeline lineno="723"><highlight class="comment">NOTE:<sp/>If<sp/>this<sp/>is<sp/>called<sp/>from<sp/>within<sp/>a<sp/>event<sp/>called<sp/>by<sp/>this<sp/>thread,<sp/>the<sp/>function<sp/>arguments<sp/>will<sp/>be<sp/>invalid<sp/>after<sp/>calling<sp/>this<sp/>function.</highlight></codeline>
<codeline lineno="724"><highlight class="comment">================</highlight></codeline>
<codeline lineno="725"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::CallFunction(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfunction__t" kindref="compound">function_t</ref><sp/>*func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clearStack<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>ClearWaitFor();</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>interpreter.EnterFunction(<sp/>func,<sp/>clearStack<sp/>);</highlight></codeline>
<codeline lineno="729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="732"><highlight class="comment">================</highlight></codeline>
<codeline lineno="733"><highlight class="comment">idThread::CallFunction</highlight></codeline>
<codeline lineno="734"><highlight class="comment"></highlight></codeline>
<codeline lineno="735"><highlight class="comment">NOTE:<sp/>If<sp/>this<sp/>is<sp/>called<sp/>from<sp/>within<sp/>a<sp/>event<sp/>called<sp/>by<sp/>this<sp/>thread,<sp/>the<sp/>function<sp/>arguments<sp/>will<sp/>be<sp/>invalid<sp/>after<sp/>calling<sp/>this<sp/>function.</highlight></codeline>
<codeline lineno="736"><highlight class="comment">================</highlight></codeline>
<codeline lineno="737"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::CallFunction(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfunction__t" kindref="compound">function_t</ref><sp/>*func,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clearStack<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>ClearWaitFor();</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>interpreter.EnterObjectFunction(<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>func,<sp/>clearStack<sp/>);</highlight></codeline>
<codeline lineno="742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="745"><highlight class="comment">================</highlight></codeline>
<codeline lineno="746"><highlight class="comment">idThread::ClearWaitFor</highlight></codeline>
<codeline lineno="747"><highlight class="comment">================</highlight></codeline>
<codeline lineno="748"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::ClearWaitFor(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>waitingFor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ENTITYNUM_NONE;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>waitingForThread<sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>waitingUntil<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="756"><highlight class="comment">================</highlight></codeline>
<codeline lineno="757"><highlight class="comment">idThread::IsWaitingFor</highlight></codeline>
<codeline lineno="758"><highlight class="comment">================</highlight></codeline>
<codeline lineno="759"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idThread::IsWaitingFor(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*obj<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>obj<sp/>);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>waitingFor<sp/>==<sp/>obj-&gt;entityNumber;</highlight></codeline>
<codeline lineno="763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="766"><highlight class="comment">================</highlight></codeline>
<codeline lineno="767"><highlight class="comment">idThread::ObjectMoveDone</highlight></codeline>
<codeline lineno="768"><highlight class="comment">================</highlight></codeline>
<codeline lineno="769"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::ObjectMoveDone(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*obj<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>obj<sp/>);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>IsWaitingFor(<sp/>obj<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ClearWaitFor();</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DelayedStart(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="780"><highlight class="comment">================</highlight></codeline>
<codeline lineno="781"><highlight class="comment">idThread::ThreadCallback</highlight></codeline>
<codeline lineno="782"><highlight class="comment">================</highlight></codeline>
<codeline lineno="783"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::ThreadCallback(<sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/>*thread<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>interpreter.threadDying<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>thread<sp/>==<sp/>waitingForThread<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ClearWaitFor();</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DelayedStart(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="796"><highlight class="comment">================</highlight></codeline>
<codeline lineno="797"><highlight class="comment">idThread::Event_SetThreadName</highlight></codeline>
<codeline lineno="798"><highlight class="comment">================</highlight></codeline>
<codeline lineno="799"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_SetThreadName(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>SetThreadName(<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="805"><highlight class="comment">================</highlight></codeline>
<codeline lineno="806"><highlight class="comment">idThread::Error</highlight></codeline>
<codeline lineno="807"><highlight class="comment">================</highlight></codeline>
<codeline lineno="808"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Error(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>argptr;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>text[<sp/>1024<sp/>];</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(<sp/>argptr,<sp/>fmt<sp/>);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>vsprintf(<sp/>text,<sp/>fmt,<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>interpreter.Error(<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="821"><highlight class="comment">================</highlight></codeline>
<codeline lineno="822"><highlight class="comment">idThread::Warning</highlight></codeline>
<codeline lineno="823"><highlight class="comment">================</highlight></codeline>
<codeline lineno="824"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Warning(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>argptr;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>text[<sp/>1024<sp/>];</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(<sp/>argptr,<sp/>fmt<sp/>);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>vsprintf(<sp/>text,<sp/>fmt,<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>interpreter.Warning(<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="837"><highlight class="comment">================</highlight></codeline>
<codeline lineno="838"><highlight class="comment">idThread::ReturnString</highlight></codeline>
<codeline lineno="839"><highlight class="comment">================</highlight></codeline>
<codeline lineno="840"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::ReturnString(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.program.ReturnString(<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="843"><highlight class="normal">}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="846"><highlight class="comment">================</highlight></codeline>
<codeline lineno="847"><highlight class="comment">idThread::ReturnFloat</highlight></codeline>
<codeline lineno="848"><highlight class="comment">================</highlight></codeline>
<codeline lineno="849"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::ReturnFloat(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.program.ReturnFloat(<sp/>value<sp/>);</highlight></codeline>
<codeline lineno="852"><highlight class="normal">}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="855"><highlight class="comment">================</highlight></codeline>
<codeline lineno="856"><highlight class="comment">idThread::ReturnInt</highlight></codeline>
<codeline lineno="857"><highlight class="comment">================</highlight></codeline>
<codeline lineno="858"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::ReturnInt(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>true<sp/>integers<sp/>aren&apos;t<sp/>supported<sp/>in<sp/>the<sp/>compiler,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>int<sp/>values<sp/>are<sp/>stored<sp/>as<sp/>floats</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.program.ReturnFloat(<sp/>value<sp/>);</highlight></codeline>
<codeline lineno="863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="866"><highlight class="comment">================</highlight></codeline>
<codeline lineno="867"><highlight class="comment">idThread::ReturnVector</highlight></codeline>
<codeline lineno="868"><highlight class="comment">================</highlight></codeline>
<codeline lineno="869"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::ReturnVector(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;vec<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.program.ReturnVector(<sp/>vec<sp/>);</highlight></codeline>
<codeline lineno="872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="875"><highlight class="comment">================</highlight></codeline>
<codeline lineno="876"><highlight class="comment">idThread::ReturnEntity</highlight></codeline>
<codeline lineno="877"><highlight class="comment">================</highlight></codeline>
<codeline lineno="878"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::ReturnEntity(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.program.ReturnEntity(<sp/>ent<sp/>);</highlight></codeline>
<codeline lineno="881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="884"><highlight class="comment">================</highlight></codeline>
<codeline lineno="885"><highlight class="comment">idThread::Event_Execute</highlight></codeline>
<codeline lineno="886"><highlight class="comment">================</highlight></codeline>
<codeline lineno="887"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_Execute(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>Execute();</highlight></codeline>
<codeline lineno="890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="893"><highlight class="comment">================</highlight></codeline>
<codeline lineno="894"><highlight class="comment">idThread::Pause</highlight></codeline>
<codeline lineno="895"><highlight class="comment">================</highlight></codeline>
<codeline lineno="896"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Pause(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>ClearWaitFor();</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>interpreter.doneProcessing<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="900"><highlight class="normal">}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="903"><highlight class="comment">================</highlight></codeline>
<codeline lineno="904"><highlight class="comment">idThread::WaitMS</highlight></codeline>
<codeline lineno="905"><highlight class="comment">================</highlight></codeline>
<codeline lineno="906"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::WaitMS(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>Pause();</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>waitingUntil<sp/>=<sp/>gameLocal.time<sp/>+<sp/>time;</highlight></codeline>
<codeline lineno="910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="913"><highlight class="comment">================</highlight></codeline>
<codeline lineno="914"><highlight class="comment">idThread::WaitSec</highlight></codeline>
<codeline lineno="915"><highlight class="comment">================</highlight></codeline>
<codeline lineno="916"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::WaitSec(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>WaitMS(<sp/>SEC2MS(<sp/>time<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="919"><highlight class="normal">}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="922"><highlight class="comment">================</highlight></codeline>
<codeline lineno="923"><highlight class="comment">idThread::WaitFrame</highlight></codeline>
<codeline lineno="924"><highlight class="comment">================</highlight></codeline>
<codeline lineno="925"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::WaitFrame(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>Pause();</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>manual<sp/>control<sp/>threads<sp/>don&apos;t<sp/>set<sp/>waitingUntil<sp/>so<sp/>that<sp/>they<sp/>can<sp/>be<sp/>run<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>frame<sp/>if<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!manualControl<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waitingUntil<sp/>=<sp/>gameLocal.time<sp/>+<sp/>gameLocal.msec;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal">}</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="comment">/***********************************************************************</highlight></codeline>
<codeline lineno="937"><highlight class="comment"></highlight></codeline>
<codeline lineno="938"><highlight class="comment"><sp/><sp/>Script<sp/>callable<sp/>events<sp/><sp/></highlight></codeline>
<codeline lineno="939"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="940"><highlight class="comment">***********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="943"><highlight class="comment">================</highlight></codeline>
<codeline lineno="944"><highlight class="comment">idThread::Event_TerminateThread</highlight></codeline>
<codeline lineno="945"><highlight class="comment">================</highlight></codeline>
<codeline lineno="946"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_TerminateThread(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/>*thread;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>thread<sp/>=<sp/>GetThread(<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>KillThread(<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="952"><highlight class="normal">}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="955"><highlight class="comment">================</highlight></codeline>
<codeline lineno="956"><highlight class="comment">idThread::Event_Pause</highlight></codeline>
<codeline lineno="957"><highlight class="comment">================</highlight></codeline>
<codeline lineno="958"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_Pause(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>Pause();</highlight></codeline>
<codeline lineno="961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="964"><highlight class="comment">================</highlight></codeline>
<codeline lineno="965"><highlight class="comment">idThread::Event_Wait</highlight></codeline>
<codeline lineno="966"><highlight class="comment">================</highlight></codeline>
<codeline lineno="967"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_Wait(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>WaitSec(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="973"><highlight class="comment">================</highlight></codeline>
<codeline lineno="974"><highlight class="comment">idThread::Event_WaitFrame</highlight></codeline>
<codeline lineno="975"><highlight class="comment">================</highlight></codeline>
<codeline lineno="976"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_WaitFrame(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>WaitFrame();</highlight></codeline>
<codeline lineno="979"><highlight class="normal">}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="982"><highlight class="comment">================</highlight></codeline>
<codeline lineno="983"><highlight class="comment">idThread::Event_WaitFor</highlight></codeline>
<codeline lineno="984"><highlight class="comment">================</highlight></codeline>
<codeline lineno="985"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_WaitFor(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>&amp;&amp;<sp/>ent-&gt;RespondsTo(<sp/>EV_Thread_SetCallback<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;ProcessEvent(<sp/>&amp;EV_Thread_SetCallback<sp/>);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.program.GetReturnedInteger()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pause();</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waitingFor<sp/>=<sp/>ent-&gt;entityNumber;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="994"><highlight class="normal">}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="997"><highlight class="comment">================</highlight></codeline>
<codeline lineno="998"><highlight class="comment">idThread::Event_WaitForThread</highlight></codeline>
<codeline lineno="999"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1000"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_WaitForThread(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/>*thread;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>thread<sp/>=<sp/>GetThread(<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!thread<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_debugScript.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>print<sp/>a<sp/>warning<sp/>and<sp/>continue<sp/>executing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Warning(<sp/></highlight><highlight class="stringliteral">&quot;Thread<sp/>%d<sp/>not<sp/>running&quot;</highlight><highlight class="normal">,<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pause();</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waitingForThread<sp/>=<sp/>thread;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1014"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1017"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1018"><highlight class="comment">idThread::Event_Print</highlight></codeline>
<codeline lineno="1019"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1020"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_Print(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1026"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1027"><highlight class="comment">idThread::Event_PrintLn</highlight></codeline>
<codeline lineno="1028"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1029"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_PrintLn(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1035"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1036"><highlight class="comment">idThread::Event_Say</highlight></codeline>
<codeline lineno="1037"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1038"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_Say(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;BufferCommandText(<sp/>CMD_EXEC_NOW,<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;say<sp/>\&quot;%s\&quot;&quot;</highlight><highlight class="normal">,<sp/>text<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1044"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1045"><highlight class="comment">idThread::Event_Assert</highlight></codeline>
<codeline lineno="1046"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1047"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_Assert(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>value<sp/>);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1053"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1054"><highlight class="comment">idThread::Event_Trigger</highlight></codeline>
<codeline lineno="1055"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1056"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_Trigger(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;Signal(<sp/>SIG_TRIGGER<sp/>);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;ProcessEvent(<sp/>&amp;EV_Activate,<sp/>gameLocal.GetLocalPlayer()<sp/>);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;TriggerGuis();</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1063"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1066"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1067"><highlight class="comment">idThread::Event_SetCvar</highlight></codeline>
<codeline lineno="1068"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1069"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_SetCvar(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>cvarSystem-&gt;SetCVarString(<sp/>name,<sp/>value<sp/>);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1075"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1076"><highlight class="comment">idThread::Event_GetCvar</highlight></codeline>
<codeline lineno="1077"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1078"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_GetCvar(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnString(<sp/>cvarSystem-&gt;GetCVarString(<sp/>name<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1084"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1085"><highlight class="comment">idThread::Event_Random</highlight></codeline>
<codeline lineno="1086"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1087"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_Random(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>range<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>gameLocal.random.RandomFloat();</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnFloat(<sp/>range<sp/>*<sp/>result<sp/>);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="1096"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_RandomInt(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>range<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>gameLocal.random.RandomInt(range);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnFloat(result);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1104"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1106"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1107"><highlight class="comment">idThread::Event_GetTime</highlight></codeline>
<codeline lineno="1108"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1109"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_GetTime(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnFloat(<sp/>MS2SEC(<sp/>gameLocal.realClientTime<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1115"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1116"><highlight class="comment">idThread::Event_KillThread</highlight></codeline>
<codeline lineno="1117"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1118"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_KillThread(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>KillThread(<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1124"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1125"><highlight class="comment">idThread::Event_GetEntity</highlight></codeline>
<codeline lineno="1126"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1127"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_GetEntity(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entnum;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/><sp/><sp/><sp/>*ent;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>name[<sp/>0<sp/>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entnum<sp/>=<sp/>atoi(<sp/>&amp;name[<sp/>1<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>entnum<sp/>&lt;<sp/>0<sp/>)<sp/>||<sp/>(<sp/>entnum<sp/>&gt;=<sp/>MAX_GENTITIES<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;Entity<sp/>number<sp/>in<sp/>string<sp/>out<sp/>of<sp/>range.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReturnEntity(<sp/>gameLocal.entities[<sp/>entnum<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>gameLocal.FindEntity(<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReturnEntity(<sp/>ent<sp/>);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1147"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1148"><highlight class="comment">idThread::Event_Spawn</highlight></codeline>
<codeline lineno="1149"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1150"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_Spawn(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*classname<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnArgs.Set(<sp/></highlight><highlight class="stringliteral">&quot;classname&quot;</highlight><highlight class="normal">,<sp/>classname<sp/>);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.SpawnEntityDef(<sp/>spawnArgs,<sp/>&amp;ent<sp/>);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnEntity(<sp/>ent<sp/>);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnArgs.Clear();</highlight></codeline>
<codeline lineno="1158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1161"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1162"><highlight class="comment">idThread::Event_CopySpawnArgs</highlight></codeline>
<codeline lineno="1163"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1164"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_CopySpawnArgs(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnArgs.Copy(<sp/>ent-&gt;spawnArgs<sp/>);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1170"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1171"><highlight class="comment">idThread::Event_SetSpawnArg</highlight></codeline>
<codeline lineno="1172"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1173"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_SetSpawnArg(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnArgs.Set(<sp/>key,<sp/>value<sp/>);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1179"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1180"><highlight class="comment">idThread::Event_SpawnString</highlight></codeline>
<codeline lineno="1181"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1182"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_SpawnString(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*defaultvalue<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*result;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnArgs.GetString(<sp/>key,<sp/>defaultvalue,<sp/>&amp;result<sp/>);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnString(<sp/>result<sp/>);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1191"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1192"><highlight class="comment">idThread::Event_SpawnFloat</highlight></codeline>
<codeline lineno="1193"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1194"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_SpawnFloat(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>defaultvalue<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnArgs.GetFloat(<sp/>key,<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;%f&quot;</highlight><highlight class="normal">,<sp/>defaultvalue<sp/>),<sp/>result<sp/>);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnFloat(<sp/>result<sp/>);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1203"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1204"><highlight class="comment">idThread::Event_SpawnVector</highlight></codeline>
<codeline lineno="1205"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1206"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_SpawnVector(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;defaultvalue<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>result;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnArgs.GetVector(<sp/>key,<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;%f<sp/>%f<sp/>%f&quot;</highlight><highlight class="normal">,<sp/>defaultvalue.x,<sp/>defaultvalue.y,<sp/>defaultvalue.z<sp/>),<sp/>result<sp/>);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnVector(<sp/>result<sp/>);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1215"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1216"><highlight class="comment">idThread::Event_ClearPersistantArgs</highlight></codeline>
<codeline lineno="1217"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1218"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_ClearPersistantArgs(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.persistentLevelInfo.Clear();</highlight></codeline>
<codeline lineno="1221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1225"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1226"><highlight class="comment">idThread::Event_SetPersistantArg</highlight></codeline>
<codeline lineno="1227"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1228"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_SetPersistantArg(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.persistentLevelInfo.Set(<sp/>key,<sp/>value<sp/>);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1234"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1235"><highlight class="comment">idThread::Event_GetPersistantString</highlight></codeline>
<codeline lineno="1236"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1237"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_GetPersistantString(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*result;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.persistentLevelInfo.GetString(<sp/>key,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>&amp;result<sp/>);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnString(<sp/>result<sp/>);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1246"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1247"><highlight class="comment">idThread::Event_GetPersistantFloat</highlight></codeline>
<codeline lineno="1248"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1249"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_GetPersistantFloat(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.persistentLevelInfo.GetFloat(<sp/>key,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>result<sp/>);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnFloat(<sp/>result<sp/>);</highlight></codeline>
<codeline lineno="1255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1258"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1259"><highlight class="comment">idThread::Event_GetPersistantVector</highlight></codeline>
<codeline lineno="1260"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1261"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_GetPersistantVector(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>result;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.persistentLevelInfo.GetVector(<sp/>key,<sp/></highlight><highlight class="stringliteral">&quot;0<sp/>0<sp/>0&quot;</highlight><highlight class="normal">,<sp/>result<sp/>);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnVector(<sp/>result<sp/>);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1270"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1271"><highlight class="comment">idThread::Event_AngToForward</highlight></codeline>
<codeline lineno="1272"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1273"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_AngToForward(<sp/><ref refid="classid_angles" kindref="compound">idAngles</ref><sp/>&amp;ang<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnVector(<sp/>ang.ToForward()<sp/>);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1279"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1280"><highlight class="comment">idThread::Event_AngToRight</highlight></codeline>
<codeline lineno="1281"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1282"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_AngToRight(<sp/><ref refid="classid_angles" kindref="compound">idAngles</ref><sp/>&amp;ang<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>vec;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>ang.ToVectors(<sp/>NULL,<sp/>&amp;vec<sp/>);</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnVector(<sp/>vec<sp/>);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1291"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1292"><highlight class="comment">idThread::Event_AngToUp</highlight></codeline>
<codeline lineno="1293"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1294"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_AngToUp(<sp/><ref refid="classid_angles" kindref="compound">idAngles</ref><sp/>&amp;ang<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>vec;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>ang.ToVectors(<sp/>NULL,<sp/>NULL,<sp/>&amp;vec<sp/>);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnVector(<sp/>vec<sp/>);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1303"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1304"><highlight class="comment">idThread::Event_GetSine</highlight></codeline>
<codeline lineno="1305"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1306"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_GetSine(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnFloat(<sp/>idMath::Sin(<sp/>DEG2RAD(<sp/>angle<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1312"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1313"><highlight class="comment">idThread::Event_GetCosine</highlight></codeline>
<codeline lineno="1314"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1315"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_GetCosine(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnFloat(<sp/>idMath::Cos(<sp/>DEG2RAD(<sp/>angle<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="1321"><highlight class="preprocessor"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1322"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1323"><highlight class="comment">idThread::Event_GetArcSine</highlight></codeline>
<codeline lineno="1324"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1325"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_GetArcSine(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnFloat(RAD2DEG(idMath::ASin(a)));</highlight></codeline>
<codeline lineno="1328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1331"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1332"><highlight class="comment">idThread::Event_GetArcCosine</highlight></codeline>
<codeline lineno="1333"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1334"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_GetArcCosine(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnFloat(RAD2DEG(idMath::ACos(a)));</highlight></codeline>
<codeline lineno="1337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1339"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1341"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1342"><highlight class="comment">idThread::Event_GetSquareRoot</highlight></codeline>
<codeline lineno="1343"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1344"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_GetSquareRoot(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>theSquare<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnFloat(<sp/>idMath::Sqrt(<sp/>theSquare<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1350"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1351"><highlight class="comment">idThread::Event_VecNormalize</highlight></codeline>
<codeline lineno="1352"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1353"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_VecNormalize(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;vec<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>n;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>vec;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/>n.Normalize();</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnVector(<sp/>n<sp/>);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1363"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1364"><highlight class="comment">idThread::Event_VecLength</highlight></codeline>
<codeline lineno="1365"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1366"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_VecLength(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;vec<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnFloat(<sp/>vec.Length()<sp/>);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1372"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1373"><highlight class="comment">idThread::Event_VecDotProduct</highlight></codeline>
<codeline lineno="1374"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1375"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_VecDotProduct(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;vec1,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;vec2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnFloat(<sp/>vec1<sp/>*<sp/>vec2<sp/>);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1381"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1382"><highlight class="comment">idThread::Event_VecCrossProduct</highlight></codeline>
<codeline lineno="1383"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1384"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_VecCrossProduct(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;vec1,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;vec2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnVector(<sp/>vec1.Cross(<sp/>vec2<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1390"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1391"><highlight class="comment">idThread::Event_VecToAngles</highlight></codeline>
<codeline lineno="1392"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1393"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_VecToAngles(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;vec<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_angles" kindref="compound">idAngles</ref><sp/>ang<sp/>=<sp/>vec.ToAngles();</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnVector(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>ang[0],<sp/>ang[1],<sp/>ang[2]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_D3XP</highlight></codeline>
<codeline lineno="1400"><highlight class="preprocessor"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1401"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1402"><highlight class="comment">idThread::Event_VecToOrthoBasisAngles</highlight></codeline>
<codeline lineno="1403"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1404"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_VecToOrthoBasisAngles(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;vec<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>left,<sp/>up;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_angles" kindref="compound">idAngles</ref><sp/>ang;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>vec.OrthogonalBasis(<sp/>left,<sp/>up<sp/>);</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>axis(<sp/>left,<sp/>up,<sp/>vec<sp/>);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/>ang<sp/>=<sp/>axis.ToAngles();</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnVector(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>ang[0],<sp/>ang[1],<sp/>ang[2]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_RotateVector(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;vec,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;ang<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_angles" kindref="compound">idAngles</ref><sp/>tempAng(ang);</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>axis<sp/>=<sp/>tempAng.ToMat3();</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>ret<sp/>=<sp/>vec<sp/>*<sp/>axis;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnVector(ret);</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1426"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1428"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1429"><highlight class="comment">idThread::Event_OnSignal</highlight></codeline>
<codeline lineno="1430"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1431"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_OnSignal(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signal,<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*func<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfunction__t" kindref="compound">function_t</ref><sp/>*</highlight><highlight class="keyword">function</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>func<sp/>);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;Entity<sp/>not<sp/>found&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>signal<sp/>&lt;<sp/>0<sp/>)<sp/>||<sp/>(<sp/>signal<sp/>&gt;=<sp/>NUM_SIGNALS<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;Signal<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>=<sp/>gameLocal.program.FindFunction(<sp/>func<sp/>);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;Function<sp/>&apos;%s&apos;<sp/>not<sp/>found&quot;</highlight><highlight class="normal">,<sp/>func<sp/>);</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/>ent-&gt;SetSignal(<sp/>(<sp/>signalNum_t<sp/>)signal,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1454"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1455"><highlight class="comment">idThread::Event_ClearSignalThread</highlight></codeline>
<codeline lineno="1456"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1457"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_ClearSignalThread(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signal,<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;Entity<sp/>not<sp/>found&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>signal<sp/>&lt;<sp/>0<sp/>)<sp/>||<sp/>(<sp/>signal<sp/>&gt;=<sp/>NUM_SIGNALS<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;Signal<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>ent-&gt;ClearSignalThread(<sp/>(<sp/>signalNum_t<sp/>)signal,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1471"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1472"><highlight class="comment">idThread::Event_SetCamera</highlight></codeline>
<codeline lineno="1473"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1474"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_SetCamera(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;Entity<sp/>not<sp/>found&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ent-&gt;IsType(<sp/>idCamera::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;Entity<sp/>is<sp/>not<sp/>a<sp/>camera&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.SetCamera(<sp/>(<sp/><ref refid="classid_camera" kindref="compound">idCamera</ref><sp/>*<sp/>)ent<sp/>);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1490"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1491"><highlight class="comment">idThread::Event_FirstPerson</highlight></codeline>
<codeline lineno="1492"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1493"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_FirstPerson(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.SetCamera(<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1499"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1500"><highlight class="comment">idThread::Event_Trace</highlight></codeline>
<codeline lineno="1501"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1502"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_Trace(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;mins,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;maxs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>contents_mask,<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*passEntity<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mins<sp/>==<sp/>vec3_origin<sp/>&amp;&amp;<sp/>maxs<sp/>==<sp/>vec3_origin<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.clip.TracePoint(<sp/>trace,<sp/>start,<sp/>end,<sp/>contents_mask,<sp/>passEntity<sp/>);</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.clip.TraceBounds(<sp/>trace,<sp/>start,<sp/>end,<sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref>(<sp/>mins,<sp/>maxs<sp/>),<sp/>contents_mask,<sp/>passEntity<sp/>);</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnFloat(<sp/>trace.fraction<sp/>);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1513"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1514"><highlight class="comment">idThread::Event_TracePoint</highlight></codeline>
<codeline lineno="1515"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1516"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_TracePoint(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;end,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>contents_mask,<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*passEntity<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.clip.TracePoint(<sp/>trace,<sp/>start,<sp/>end,<sp/>contents_mask,<sp/>passEntity<sp/>);</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnFloat(<sp/>trace.fraction<sp/>);</highlight></codeline>
<codeline lineno="1520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1523"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1524"><highlight class="comment">idThread::Event_GetTraceFraction</highlight></codeline>
<codeline lineno="1525"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1526"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_GetTraceFraction(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnFloat(<sp/>trace.fraction<sp/>);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1532"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1533"><highlight class="comment">idThread::Event_GetTraceEndPos</highlight></codeline>
<codeline lineno="1534"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1535"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_GetTraceEndPos(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnVector(<sp/>trace.endpos<sp/>);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1541"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1542"><highlight class="comment">idThread::Event_GetTraceNormal</highlight></codeline>
<codeline lineno="1543"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1544"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_GetTraceNormal(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>trace.fraction<sp/>&lt;<sp/>1.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReturnVector(<sp/>trace.c.normal<sp/>);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReturnVector(<sp/>vec3_origin<sp/>);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1554"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1555"><highlight class="comment">idThread::Event_GetTraceEntity</highlight></codeline>
<codeline lineno="1556"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1557"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_GetTraceEntity(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>trace.fraction<sp/>&lt;<sp/>1.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReturnEntity(<sp/>gameLocal.entities[<sp/>trace.c.entityNum<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReturnEntity(<sp/>(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*<sp/>)NULL<sp/>);</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1567"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1568"><highlight class="comment">idThread::Event_GetTraceJoint</highlight></codeline>
<codeline lineno="1569"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1570"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_GetTraceJoint(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>trace.fraction<sp/>&lt;<sp/>1.0f<sp/>&amp;&amp;<sp/>trace.c.id<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_a_f_entity___base" kindref="compound">idAFEntity_Base</ref><sp/>*af<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_a_f_entity___base" kindref="compound">idAFEntity_Base</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>gameLocal.entities[<sp/>trace.c.entityNum<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af<sp/>&amp;&amp;<sp/>af-&gt;IsType(<sp/>idAFEntity_Base::Type<sp/>)<sp/>&amp;&amp;<sp/>af-&gt;IsActiveAF()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReturnString(<sp/>af-&gt;GetAnimator()-&gt;GetJointName(<sp/>CLIPMODEL_ID_TO_JOINT_HANDLE(<sp/>trace.c.id<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnString(<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1583"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1584"><highlight class="comment">idThread::Event_GetTraceBody</highlight></codeline>
<codeline lineno="1585"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1586"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_GetTraceBody(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>trace.fraction<sp/>&lt;<sp/>1.0f<sp/>&amp;&amp;<sp/>trace.c.id<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_a_f_entity___base" kindref="compound">idAFEntity_Base</ref><sp/>*af<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_a_f_entity___base" kindref="compound">idAFEntity_Base</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>gameLocal.entities[<sp/>trace.c.entityNum<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>af<sp/>&amp;&amp;<sp/>af-&gt;IsType(<sp/>idAFEntity_Base::Type<sp/>)<sp/>&amp;&amp;<sp/>af-&gt;IsActiveAF()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bodyId<sp/>=<sp/>af-&gt;BodyForClipModelId(<sp/>trace.c.id<sp/>);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_a_f_body" kindref="compound">idAFBody</ref><sp/>*body<sp/>=<sp/>af-&gt;GetAFPhysics()-&gt;GetBody(<sp/>bodyId<sp/>);</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>body<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReturnString(<sp/>body-&gt;GetName()<sp/>);</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>ReturnString(<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1603"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1604"><highlight class="comment">idThread::Event_FadeIn</highlight></codeline>
<codeline lineno="1605"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1606"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_FadeIn(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;color,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/><sp/><sp/><sp/><sp/><sp/>fadeColor;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/><sp/><sp/><sp/>*player;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/>player<sp/>=<sp/>gameLocal.GetLocalPlayer();</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>player<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fadeColor.Set(<sp/>color[<sp/>0<sp/>],<sp/>color[<sp/>1<sp/>],<sp/>color[<sp/>2<sp/>],<sp/>0.0f<sp/>);</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>player-&gt;playerView.Fade(fadeColor,<sp/>SEC2MS(<sp/>time<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1619"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1620"><highlight class="comment">idThread::Event_FadeOut</highlight></codeline>
<codeline lineno="1621"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1622"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_FadeOut(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;color,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/><sp/><sp/><sp/><sp/><sp/>fadeColor;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/><sp/><sp/><sp/>*player;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/>player<sp/>=<sp/>gameLocal.GetLocalPlayer();</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>player<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fadeColor.Set(<sp/>color[<sp/>0<sp/>],<sp/>color[<sp/>1<sp/>],<sp/>color[<sp/>2<sp/>],<sp/>1.0f<sp/>);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>player-&gt;playerView.Fade(fadeColor,<sp/>SEC2MS(<sp/>time<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1635"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1636"><highlight class="comment">idThread::Event_FadeTo</highlight></codeline>
<codeline lineno="1637"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1638"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_FadeTo(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;color,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>alpha,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/><sp/><sp/><sp/><sp/><sp/>fadeColor;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/><sp/><sp/><sp/>*player;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/>player<sp/>=<sp/>gameLocal.GetLocalPlayer();</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>player<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fadeColor.Set(<sp/>color[<sp/>0<sp/>],<sp/>color[<sp/>1<sp/>],<sp/>color[<sp/>2<sp/>],<sp/>alpha<sp/>);</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>player-&gt;playerView.Fade(fadeColor,<sp/>SEC2MS(<sp/>time<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1651"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1652"><highlight class="comment">idThread::Event_SetShaderParm</highlight></codeline>
<codeline lineno="1653"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1654"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_SetShaderParm(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parmnum,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>parmnum<sp/>&lt;<sp/>0<sp/>)<sp/>||<sp/>(<sp/>parmnum<sp/>&gt;=<sp/>MAX_GLOBAL_SHADER_PARMS<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;shader<sp/>parm<sp/>index<sp/>(%d)<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">,<sp/>parmnum<sp/>);</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.globalShaderParms[<sp/>parmnum<sp/>]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1664"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1665"><highlight class="comment">idThread::Event_StartMusic</highlight></codeline>
<codeline lineno="1666"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1667"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_StartMusic(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/>gameSoundWorld-&gt;PlayShaderDirectly(<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1673"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1674"><highlight class="comment">idThread::Event_Warning</highlight></codeline>
<codeline lineno="1675"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1676"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_Warning(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/>Warning(<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="1679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1682"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1683"><highlight class="comment">idThread::Event_Error</highlight></codeline>
<codeline lineno="1684"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1685"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_Error(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1691"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1692"><highlight class="comment">idThread::Event_StrLen</highlight></codeline>
<codeline lineno="1693"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1694"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_StrLen(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>strlen(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnInt(<sp/>len<sp/>);</highlight></codeline>
<codeline lineno="1700"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1703"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1704"><highlight class="comment">idThread::Event_StrLeft</highlight></codeline>
<codeline lineno="1705"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1706"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_StrLeft(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>num<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::ReturnString(<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>strlen(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>len<sp/>&lt;<sp/>num<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::ReturnString(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>result(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>0,<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnString(<sp/>result<sp/>);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1726"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1727"><highlight class="comment">idThread::Event_StrRight<sp/></highlight></codeline>
<codeline lineno="1728"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1729"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_StrRight(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>num<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::ReturnString(<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>strlen(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>len<sp/>&lt;<sp/>num<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::ReturnString(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnString(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>+<sp/>len<sp/>-<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="1745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1748"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1749"><highlight class="comment">idThread::Event_StrSkip</highlight></codeline>
<codeline lineno="1750"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1751"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_StrSkip(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>num<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::ReturnString(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>strlen(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>len<sp/>&lt;<sp/>num<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::ReturnString(<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnString(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>+<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="1767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1770"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1771"><highlight class="comment">idThread::Event_StrMid</highlight></codeline>
<codeline lineno="1772"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1773"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_StrMid(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>num<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::ReturnString(<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>start<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>strlen(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>start<sp/>&gt;<sp/>len<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>start<sp/>+<sp/>num<sp/>&gt;<sp/>len<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>len<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>result(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>start,<sp/>start<sp/>+<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnString(<sp/>result<sp/>);</highlight></codeline>
<codeline lineno="1796"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1799"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1800"><highlight class="comment">idThread::Event_StrToFloat(<sp/>const<sp/>char<sp/>*string<sp/>)</highlight></codeline>
<codeline lineno="1801"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1802"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_StrToFloat(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>atof(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnFloat(<sp/>result<sp/>);</highlight></codeline>
<codeline lineno="1808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1811"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1812"><highlight class="comment">idThread::Event_RadiusDamage</highlight></codeline>
<codeline lineno="1813"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1814"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_RadiusDamage(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;origin,<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*inflictor,<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*attacker,<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ignore,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*damageDefName,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dmgPower<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.RadiusDamage(<sp/>origin,<sp/>inflictor,<sp/>attacker,<sp/>ignore,<sp/>ignore,<sp/>damageDefName,<sp/>dmgPower<sp/>);</highlight></codeline>
<codeline lineno="1817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1820"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1821"><highlight class="comment">idThread::Event_IsClient</highlight></codeline>
<codeline lineno="1822"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1823"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_IsClient(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{<sp/></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnFloat(<sp/>gameLocal.isClient<sp/>);</highlight></codeline>
<codeline lineno="1826"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1829"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1830"><highlight class="comment">idThread::Event_IsMultiplayer</highlight></codeline>
<codeline lineno="1831"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1832"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_IsMultiplayer(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{<sp/></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnFloat(<sp/>gameLocal.isMultiplayer<sp/>);</highlight></codeline>
<codeline lineno="1835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1838"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1839"><highlight class="comment">idThread::Event_GetFrameTime</highlight></codeline>
<codeline lineno="1840"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1841"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_GetFrameTime(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{<sp/></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnFloat(<sp/>MS2SEC(<sp/>gameLocal.msec<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1847"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1848"><highlight class="comment">idThread::Event_GetTicsPerSecond</highlight></codeline>
<codeline lineno="1849"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1850"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_GetTicsPerSecond(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{<sp/></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/>idThread::ReturnFloat(<sp/>USERCMD_HZ<sp/>);</highlight></codeline>
<codeline lineno="1853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1856"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1857"><highlight class="comment">idThread::Event_CacheSoundShader</highlight></codeline>
<codeline lineno="1858"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1859"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_CacheSoundShader(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*soundName<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/>declManager-&gt;FindSound(<sp/>soundName<sp/>);</highlight></codeline>
<codeline lineno="1862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1865"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1866"><highlight class="comment">idThread::Event_DebugLine</highlight></codeline>
<codeline lineno="1867"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1868"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_DebugLine(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;color,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lifetime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugLine(<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>color.x,<sp/>color.y,<sp/>color.z,<sp/>0.0f<sp/>),<sp/>start,<sp/>end,<sp/>SEC2MS(<sp/>lifetime<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1874"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1875"><highlight class="comment">idThread::Event_DebugArrow</highlight></codeline>
<codeline lineno="1876"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1877"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_DebugArrow(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;color,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lifetime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugArrow(<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>color.x,<sp/>color.y,<sp/>color.z,<sp/>0.0f<sp/>),<sp/>start,<sp/>end,<sp/>size,<sp/>SEC2MS(<sp/>lifetime<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1883"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1884"><highlight class="comment">idThread::Event_DebugCircle</highlight></codeline>
<codeline lineno="1885"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1886"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_DebugCircle(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;color,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;origin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>radius,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numSteps,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lifetime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugCircle(<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>color.x,<sp/>color.y,<sp/>color.z,<sp/>0.0f<sp/>),<sp/>origin,<sp/>dir,<sp/>radius,<sp/>numSteps,<sp/>SEC2MS(<sp/>lifetime<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1892"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1893"><highlight class="comment">idThread::Event_DebugBounds</highlight></codeline>
<codeline lineno="1894"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1895"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_DebugBounds(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;color,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;mins,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;maxs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lifetime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugBounds(<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>color.x,<sp/>color.y,<sp/>color.z,<sp/>0.0f<sp/>),<sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref>(<sp/>mins,<sp/>maxs<sp/>),<sp/>vec3_origin,<sp/>SEC2MS(<sp/>lifetime<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1901"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1902"><highlight class="comment">idThread::Event_DrawText</highlight></codeline>
<codeline lineno="1903"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1904"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_DrawText(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;origin,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;color,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>align,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lifetime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DrawText(<sp/>text,<sp/>origin,<sp/>scale,<sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref>(<sp/>color.x,<sp/>color.y,<sp/>color.z,<sp/>0.0f<sp/>),<sp/>gameLocal.GetLocalPlayer()-&gt;viewAngles.ToMat3(),<sp/>align,<sp/>SEC2MS(<sp/>lifetime<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1910"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1911"><highlight class="comment">idThread::Event_InfluenceActive</highlight></codeline>
<codeline lineno="1912"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1913"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idThread::Event_InfluenceActive(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*player;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/>player<sp/>=<sp/>gameLocal.GetLocalPlayer();</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>player<sp/>&amp;&amp;<sp/>player-&gt;GetInfluenceLevel()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::ReturnInt(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idThread::ReturnInt(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1923"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/d3xp/script/Script_Thread.cpp"/>
  </compounddef>
</doxygen>
