<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="dmap_8h" kind="file">
    <compoundname>dmap.h</compoundname>
    <includes refid="tr__local_8h" local="yes">../../../renderer/tr_local.h</includes>
    <includedby refid="dmap_8cpp" local="yes">E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.cpp</includedby>
    <includedby refid="facebsp_8cpp" local="yes">E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/facebsp.cpp</includedby>
    <includedby refid="gldraw_8cpp" local="yes">E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/gldraw.cpp</includedby>
    <includedby refid="glfile_8cpp" local="yes">E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/glfile.cpp</includedby>
    <includedby refid="leakfile_8cpp" local="yes">E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/leakfile.cpp</includedby>
    <includedby refid="map_8cpp" local="yes">E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/map.cpp</includedby>
    <includedby refid="optimize_8cpp" local="yes">E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/optimize.cpp</includedby>
    <includedby refid="optimize__gcc_8cpp" local="yes">E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/optimize_gcc.cpp</includedby>
    <includedby refid="output_8cpp" local="yes">E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/output.cpp</includedby>
    <includedby refid="portals_8cpp" local="yes">E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/portals.cpp</includedby>
    <includedby refid="shadowopt3_8cpp" local="yes">E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/shadowopt3.cpp</includedby>
    <includedby refid="tritjunction_8cpp" local="yes">E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritjunction.cpp</includedby>
    <includedby refid="tritools_8cpp" local="yes">E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritools.cpp</includedby>
    <includedby refid="ubrush_8cpp" local="yes">E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/ubrush.cpp</includedby>
    <includedby refid="usurface_8cpp" local="yes">E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/usurface.cpp</includedby>
    <innerclass refid="structprimitive__s" prot="public">primitive_s</innerclass>
    <innerclass refid="structu_area__t" prot="public">uArea_t</innerclass>
    <innerclass refid="structu_entity__t" prot="public">uEntity_t</innerclass>
    <innerclass refid="structmap_tri__s" prot="public">mapTri_s</innerclass>
    <innerclass refid="structmesh__t" prot="public">mesh_t</innerclass>
    <innerclass refid="structparse_mesh__s" prot="public">parseMesh_s</innerclass>
    <innerclass refid="structbspface__s" prot="public">bspface_s</innerclass>
    <innerclass refid="structtexture_vectors__t" prot="public">textureVectors_t</innerclass>
    <innerclass refid="structside__s" prot="public">side_s</innerclass>
    <innerclass refid="structbspbrush__s" prot="public">bspbrush_s</innerclass>
    <innerclass refid="structdraw_surf_ref__s" prot="public">drawSurfRef_s</innerclass>
    <innerclass refid="structnode__s" prot="public">node_s</innerclass>
    <innerclass refid="structu_portal__s" prot="public">uPortal_s</innerclass>
    <innerclass refid="structtree__s" prot="public">tree_s</innerclass>
    <innerclass refid="structmap_light__t" prot="public">mapLight_t</innerclass>
    <innerclass refid="structoptimize_group__s" prot="public">optimizeGroup_s</innerclass>
    <innerclass refid="structdmap_globals__t" prot="public">dmapGlobals_t</innerclass>
    <innerclass refid="structinter_area_portal__t" prot="public">interAreaPortal_t</innerclass>
    <innerclass refid="structopt_vertex__s" prot="public">optVertex_s</innerclass>
    <innerclass refid="structopt_edge__s" prot="public">optEdge_s</innerclass>
    <innerclass refid="structopt_tri__s" prot="public">optTri_s</innerclass>
    <innerclass refid="structopt_island__t" prot="public">optIsland_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="dmap_8h_1a8fb28fd46186ac74d519f124a7eda798" prot="public" static="no">
        <name>MAX_PATCH_SIZE</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="79" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dmap_8h_1a9fd1d946af94c1d0b1d4c78fd26d3052" prot="public" static="no">
        <name>PLANENUM_LEAF</name>
        <initializer>-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="81" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dmap_8h_1abd4ae30fcfdcbbff51bbf3f4e6daeee7" prot="public" static="no">
        <name>MAX_QPATH</name>
        <initializer>256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="178" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dmap_8h_1ab264154bc740ff93b17d2a9370c4b155" prot="public" static="no">
        <name>MAX_GROUP_LIGHTS</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="186" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dmap_8h_1ab794271af6f78a83a86ed88b83806344" prot="public" static="no">
        <name>CLIP_EPSILON</name>
        <initializer>0.1f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="281" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dmap_8h_1adf346c4038e2bb8a3372a03a49477600" prot="public" static="no">
        <name>PSIDE_FRONT</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="284" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dmap_8h_1abad6f5dddcf6df895d465be14bda2b26" prot="public" static="no">
        <name>PSIDE_BACK</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="285" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dmap_8h_1a4908921a9300cd192a22115239b0e5aa" prot="public" static="no">
        <name>PSIDE_BOTH</name>
        <initializer>(PSIDE_FRONT|PSIDE_BACK)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="286" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dmap_8h_1af7a0e6b942365d843c6dc09d93355c6c" prot="public" static="no">
        <name>PSIDE_FACING</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="287" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dmap_8h_1a139c6459829687bf433c34472ab6cf53" prot="public" static="no">
        <name>MAX_INTER_AREA_PORTALS</name>
        <initializer>1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="337" column="9" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" bodystart="337" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="dmap_8h_1ac5d3917b2d119d4b60bbfeefd89cc563" prot="public" static="no">
        <name>shadowOptLevel_t</name>
        <enumvalue id="dmap_8h_1ac5d3917b2d119d4b60bbfeefd89cc563ad071a30aefed56a823d5f0f880635e61" prot="public">
          <name>SO_NONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dmap_8h_1ac5d3917b2d119d4b60bbfeefd89cc563a474a1d7b16ac9d6619ee22bd34f2295a" prot="public">
          <name>SO_MERGE_SURFACES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dmap_8h_1ac5d3917b2d119d4b60bbfeefd89cc563a67494bbbe084ff97946afd0eeb766fb2" prot="public">
          <name>SO_CULL_OCCLUDED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dmap_8h_1ac5d3917b2d119d4b60bbfeefd89cc563a197430865f1cb127544e69ecb27dea26" prot="public">
          <name>SO_CLIP_OCCLUDERS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dmap_8h_1ac5d3917b2d119d4b60bbfeefd89cc563a6faa09f82da5f8ac19e282886e72cdd9" prot="public">
          <name>SO_CLIP_SILS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dmap_8h_1ac5d3917b2d119d4b60bbfeefd89cc563aea2efdababd22dcabdc257579009a139" prot="public">
          <name>SO_SIL_OPTIMIZE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="224" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" bodystart="224" bodyend="231"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="dmap_8h_1afeefa4666360b1c79d62bfa23d57f1f2" prot="public" static="no">
        <type>struct <ref refid="structprimitive__s" kindref="compound">primitive_s</ref></type>
        <definition>typedef struct primitive_s  primitive_t</definition>
        <argsstring></argsstring>
        <name>primitive_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="38" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="dmap_8h_1a1df348e774f6dddab95abaf262cf5a43" prot="public" static="no">
        <type>struct <ref refid="structmap_tri__s" kindref="compound">mapTri_s</ref></type>
        <definition>typedef struct mapTri_s  mapTri_t</definition>
        <argsstring></argsstring>
        <name>mapTri_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="dmap_8h_1aaf45565a4c1942029aaae5cd1406a7fb" prot="public" static="no">
        <type>struct <ref refid="structparse_mesh__s" kindref="compound">parseMesh_s</ref></type>
        <definition>typedef struct parseMesh_s  parseMesh_t</definition>
        <argsstring></argsstring>
        <name>parseMesh_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="dmap_8h_1ab0640e6a129fc43a934e02bcba4acf3f" prot="public" static="no">
        <type>struct <ref refid="structbspface__s" kindref="compound">bspface_s</ref></type>
        <definition>typedef struct bspface_s  bspface_t</definition>
        <argsstring></argsstring>
        <name>bspface_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="dmap_8h_1a390516423de16e2bf7118c0c3c6c44d7" prot="public" static="no">
        <type>struct <ref refid="structside__s" kindref="compound">side_s</ref></type>
        <definition>typedef struct side_s  side_t</definition>
        <argsstring></argsstring>
        <name>side_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="dmap_8h_1a76270cb3849dcf8f2a2e5dba37df82d8" prot="public" static="no">
        <type>struct <ref refid="structbspbrush__s" kindref="compound">bspbrush_s</ref></type>
        <definition>typedef struct bspbrush_s  uBrush_t</definition>
        <argsstring></argsstring>
        <name>uBrush_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="dmap_8h_1ad9b556f7898a5c7f0fcb1b5bc1225eae" prot="public" static="no">
        <type>struct <ref refid="structdraw_surf_ref__s" kindref="compound">drawSurfRef_s</ref></type>
        <definition>typedef struct drawSurfRef_s  drawSurfRef_t</definition>
        <argsstring></argsstring>
        <name>drawSurfRef_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="135" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="dmap_8h_1ade8921e42609f610cd71a72af43ade2c" prot="public" static="no">
        <type>struct <ref refid="structnode__s" kindref="compound">node_s</ref></type>
        <definition>typedef struct node_s  node_t</definition>
        <argsstring></argsstring>
        <name>node_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="dmap_8h_1a882617f27202978e33ca40614fa9a32e" prot="public" static="no">
        <type>struct <ref refid="structu_portal__s" kindref="compound">uPortal_s</ref></type>
        <definition>typedef struct uPortal_s  uPortal_t</definition>
        <argsstring></argsstring>
        <name>uPortal_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="dmap_8h_1a91b890049007dd1aa9b4e9b6d37dfdec" prot="public" static="no">
        <type>struct <ref refid="structtree__s" kindref="compound">tree_s</ref></type>
        <definition>typedef struct tree_s  tree_t</definition>
        <argsstring></argsstring>
        <name>tree_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="176" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="dmap_8h_1a6eb3c8fe6420249ee645496c86ef6d7e" prot="public" static="no">
        <type>struct <ref refid="structoptimize_group__s" kindref="compound">optimizeGroup_s</ref></type>
        <definition>typedef struct optimizeGroup_s  optimizeGroup_t</definition>
        <argsstring></argsstring>
        <name>optimizeGroup_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="210" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="dmap_8h_1a1a4b84694ec386b8dc1776aa3172bdd4" prot="public" static="no">
        <type>struct <ref refid="structopt_vertex__s" kindref="compound">optVertex_s</ref></type>
        <definition>typedef struct optVertex_s  optVertex_t</definition>
        <argsstring></argsstring>
        <name>optVertex_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="419" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="dmap_8h_1a6746d3d07efcabdc051261725941b13d" prot="public" static="no">
        <type>struct <ref refid="structopt_edge__s" kindref="compound">optEdge_s</ref></type>
        <definition>typedef struct optEdge_s  optEdge_t</definition>
        <argsstring></argsstring>
        <name>optEdge_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="429" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="dmap_8h_1a8ad669eeeb055bdc891a545749429eb1" prot="public" static="no">
        <type>struct <ref refid="structopt_tri__s" kindref="compound">optTri_s</ref></type>
        <definition>typedef struct optTri_s  optTri_t</definition>
        <argsstring></argsstring>
        <name>optTri_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="436" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="dmap_8h_1adf128f224189a75d9a6e6ad6ec02f488" prot="public" static="no" mutable="no">
        <type><ref refid="structdmap_globals__t" kindref="compound">dmapGlobals_t</ref></type>
        <definition>dmapGlobals_t dmapGlobals</definition>
        <argsstring></argsstring>
        <name>dmapGlobals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="271" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dmap_8h_1ae8c369cc013b2e9318da84147578e04c" prot="public" static="no" mutable="no">
        <type><ref refid="structinter_area_portal__t" kindref="compound">interAreaPortal_t</ref></type>
        <definition>interAreaPortal_t interAreaPortals[1024]</definition>
        <argsstring>[1024]</argsstring>
        <name>interAreaPortals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="344" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/portals.cpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dmap_8h_1af801b0ba00004d25b545d18d946eb9c5" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int numInterAreaPortals</definition>
        <argsstring></argsstring>
        <name>numInterAreaPortals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="345" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/portals.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dmap_8h_1a0e156dad2cf17c5487a922b50cec4ea7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int FindFloatPlane</definition>
        <argsstring>(const idPlane &amp;plane, bool *fixedDegeneracies=NULL)</argsstring>
        <name>FindFloatPlane</name>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>plane</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>fixedDegeneracies</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="273" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/map.cpp" bodystart="75" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1ac14c8bb5d487f478fa876a411e246429" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CountBrushList</definition>
        <argsstring>(uBrush_t *brushes)</argsstring>
        <name>CountBrushList</name>
        <param>
          <type><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref> *</type>
          <declname>brushes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="289" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/ubrush.cpp" bodystart="51" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a4d057f550b13e1f5a666d9b267842584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref> *</type>
        <definition>uBrush_t* AllocBrush</definition>
        <argsstring>(int numsides)</argsstring>
        <name>AllocBrush</name>
        <param>
          <type>int</type>
          <declname>numsides</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="290" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/ubrush.cpp" bodystart="77" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a12881bf2502dd8f003a5ca002291218d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FreeBrush</definition>
        <argsstring>(uBrush_t *brushes)</argsstring>
        <name>FreeBrush</name>
        <param>
          <type><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref> *</type>
          <declname>brushes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="291" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/ubrush.cpp" bodystart="95" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1abf919cf572a4e29de4ae0398fce9664a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FreeBrushList</definition>
        <argsstring>(uBrush_t *brushes)</argsstring>
        <name>FreeBrushList</name>
        <param>
          <type><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref> *</type>
          <declname>brushes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="292" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/ubrush.cpp" bodystart="117" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a081b1efddacaf602c2f47977e2491946" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref> *</type>
        <definition>uBrush_t* CopyBrush</definition>
        <argsstring>(uBrush_t *brush)</argsstring>
        <name>CopyBrush</name>
        <param>
          <type><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref> *</type>
          <declname>brush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="293" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/ubrush.cpp" bodystart="136" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1af5148ef4441daeed036e9b9d7c052e14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DrawBrushList</definition>
        <argsstring>(uBrush_t *brush)</argsstring>
        <name>DrawBrushList</name>
        <param>
          <type><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref> *</type>
          <declname>brush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="294" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/ubrush.cpp" bodystart="162" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a6ef668f93b402118d38a5846c0b3ff42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PrintBrush</definition>
        <argsstring>(uBrush_t *brush)</argsstring>
        <name>PrintBrush</name>
        <param>
          <type><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref> *</type>
          <declname>brush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="295" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/ubrush.cpp" bodystart="187" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a79a0c94277842e4a520614155e79d161" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BoundBrush</definition>
        <argsstring>(uBrush_t *brush)</argsstring>
        <name>BoundBrush</name>
        <param>
          <type><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref> *</type>
          <declname>brush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="296" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/ubrush.cpp" bodystart="206" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a724e3a657a0aa05addc24e539268e6f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CreateBrushWindings</definition>
        <argsstring>(uBrush_t *brush)</argsstring>
        <name>CreateBrushWindings</name>
        <param>
          <type><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref> *</type>
          <declname>brush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="297" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/ubrush.cpp" bodystart="237" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1ac4d8b331ab335c98802fc4cace42a41b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref> *</type>
        <definition>uBrush_t* BrushFromBounds</definition>
        <argsstring>(const idBounds &amp;bounds)</argsstring>
        <name>BrushFromBounds</name>
        <param>
          <type>const <ref refid="classid_bounds" kindref="compound">idBounds</ref> &amp;</type>
          <declname>bounds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="298" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/ubrush.cpp" bodystart="273" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a54184a6764dc8305e34b1a726d991e6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float BrushVolume</definition>
        <argsstring>(uBrush_t *brush)</argsstring>
        <name>BrushVolume</name>
        <param>
          <type><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref> *</type>
          <declname>brush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="299" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/ubrush.cpp" bodystart="302" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a8d13192f32c6b954a508d2cb04cbfcce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WriteBspBrushMap</definition>
        <argsstring>(const char *name, uBrush_t *list)</argsstring>
        <name>WriteBspBrushMap</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="300" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/ubrush.cpp" bodystart="351" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1ae6ef2a3f5923171f4094a95d736f86e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FilterBrushesIntoTree</definition>
        <argsstring>(uEntity_t *e)</argsstring>
        <name>FilterBrushesIntoTree</name>
        <param>
          <type><ref refid="structu_entity__t" kindref="compound">uEntity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="302" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/ubrush.cpp" bodystart="439" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1af8b4513bf2078f51348a95caab6eeea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SplitBrush</definition>
        <argsstring>(uBrush_t *brush, int planenum, uBrush_t **front, uBrush_t **back)</argsstring>
        <name>SplitBrush</name>
        <param>
          <type><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref> *</type>
          <declname>brush</declname>
        </param>
        <param>
          <type>int</type>
          <declname>planenum</declname>
        </param>
        <param>
          <type><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref> **</type>
          <declname>front</declname>
        </param>
        <param>
          <type><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref> **</type>
          <declname>back</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="304" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/ubrush.cpp" bodystart="543" bodyend="709"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1aab78dc6cbcc2292fcf68a745bcb166bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnode__s" kindref="compound">node_t</ref> *</type>
        <definition>node_t* AllocNode</definition>
        <argsstring>(void)</argsstring>
        <name>AllocNode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="305" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/ubrush.cpp" bodystart="487" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a42084d75fb49953013c698735371cf06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LoadDMapFile</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>LoadDMapFile</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="312" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/map.cpp" bodystart="513" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a18648b7a27541ca83521058ea8bd1688" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FreeOptimizeGroupList</definition>
        <argsstring>(optimizeGroup_t *groups)</argsstring>
        <name>FreeOptimizeGroupList</name>
        <param>
          <type><ref refid="structoptimize_group__s" kindref="compound">optimizeGroup_t</ref> *</type>
          <declname>groups</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="313" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/map.cpp" bodystart="584" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a950a960fec8c5e872f161e1af6243dfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FreeDMapFile</definition>
        <argsstring>(void)</argsstring>
        <name>FreeDMapFile</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="314" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/map.cpp" bodystart="599" bodyend="648"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a25dd0725e7ed66597b56c4390ed018fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Draw_ClearWindow</definition>
        <argsstring>(void)</argsstring>
        <name>Draw_ClearWindow</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="320" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/gldraw.cpp" bodystart="42" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a81e2f91d69f4233bb36678ebee319f7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DrawWinding</definition>
        <argsstring>(const idWinding *w)</argsstring>
        <name>DrawWinding</name>
        <param>
          <type>const <ref refid="classid_winding" kindref="compound">idWinding</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="321" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/gldraw.cpp" bodystart="127" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a630d0b444d907f6b01eb9edd7ce3a031" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DrawAuxWinding</definition>
        <argsstring>(const idWinding *w)</argsstring>
        <name>DrawAuxWinding</name>
        <param>
          <type>const <ref refid="classid_winding" kindref="compound">idWinding</ref> *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="322" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/gldraw.cpp" bodystart="149" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a2b79499f409feffb379dadda58c96b19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DrawLine</definition>
        <argsstring>(idVec3 v1, idVec3 v2, int color)</argsstring>
        <name>DrawLine</name>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref></type>
          <declname>v2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="324" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/gldraw.cpp" bodystart="171" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1acb9e18cc8d51a5ae4cc580c06f8f7c0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GLS_BeginScene</definition>
        <argsstring>(void)</argsstring>
        <name>GLS_BeginScene</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="326" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/gldraw.cpp" bodystart="203" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a2ec452d556fb445850f6ba33528b3575" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GLS_Winding</definition>
        <argsstring>(const idWinding *w, int code)</argsstring>
        <name>GLS_Winding</name>
        <param>
          <type>const <ref refid="classid_winding" kindref="compound">idWinding</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="327" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/gldraw.cpp" bodystart="240" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1ab1d20fde294d2c2bee249f3a7a2c1afc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GLS_Triangle</definition>
        <argsstring>(const mapTri_t *tri, int code)</argsstring>
        <name>GLS_Triangle</name>
        <param>
          <type>const <ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
          <declname>tri</declname>
        </param>
        <param>
          <type>int</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="328" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/gldraw.cpp" bodystart="257" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a46a9a796bb15533811ac67920f71a052" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GLS_EndScene</definition>
        <argsstring>(void)</argsstring>
        <name>GLS_EndScene</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="329" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/gldraw.cpp" bodystart="267" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1afc51025415334a2be498d7547b0ca692" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool FloodEntities</definition>
        <argsstring>(tree_t *tree)</argsstring>
        <name>FloodEntities</name>
        <param>
          <type><ref refid="structtree__s" kindref="compound">tree_t</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="347" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/portals.cpp" bodystart="580" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1ac198fed106e43a1521d768f1ad2af419" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FillOutside</definition>
        <argsstring>(uEntity_t *e)</argsstring>
        <name>FillOutside</name>
        <param>
          <type><ref refid="structu_entity__t" kindref="compound">uEntity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="348" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/portals.cpp" bodystart="990" bodyend="999"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1aedbcaeeccbdb0543a1320ade553d6942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FloodAreas</definition>
        <argsstring>(uEntity_t *e)</argsstring>
        <name>FloodAreas</name>
        <param>
          <type><ref refid="structu_entity__t" kindref="compound">uEntity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="349" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/portals.cpp" bodystart="924" bodyend="945"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a5080e6060d725572c7b550d82a8fbd0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MakeTreePortals</definition>
        <argsstring>(tree_t *tree)</argsstring>
        <name>MakeTreePortals</name>
        <param>
          <type><ref refid="structtree__s" kindref="compound">tree_t</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="350" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/portals.cpp" bodystart="498" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1af6e6b4ea9e913f8af95809eeed03811a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FreePortal</definition>
        <argsstring>(uPortal_t *p)</argsstring>
        <name>FreePortal</name>
        <param>
          <type><ref refid="structu_portal__s" kindref="compound">uPortal_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="351" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/portals.cpp" bodystart="62" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a4bcfe900b332e233e189b935649f931b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OutputWinding</definition>
        <argsstring>(idWinding *w, idFile *glview)</argsstring>
        <name>OutputWinding</name>
        <param>
          <type><ref refid="classid_winding" kindref="compound">idWinding</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="classid_file" kindref="compound">idFile</ref> *</type>
          <declname>glview</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="357" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/glfile.cpp" bodystart="57" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a601d9d6c8efeb438b23cd31d20f0a5ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WriteGLView</definition>
        <argsstring>(tree_t *tree, char *source)</argsstring>
        <name>WriteGLView</name>
        <param>
          <type><ref refid="structtree__s" kindref="compound">tree_t</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="358" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/glfile.cpp" bodystart="142" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1ad1788a9820ec24d4f7615bfcc226299c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LeakFile</definition>
        <argsstring>(tree_t *tree)</argsstring>
        <name>LeakFile</name>
        <param>
          <type><ref refid="structtree__s" kindref="compound">tree_t</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="364" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/leakfile.cpp" bodystart="53" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1ab7758159b9c13a1681c28834bc27676d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structtree__s" kindref="compound">tree_t</ref> *</type>
        <definition>tree_t* AllocTree</definition>
        <argsstring>(void)</argsstring>
        <name>AllocTree</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="370" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/ubrush.cpp" bodystart="471" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a0a56f2d539431cda473974eaba2b3598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FreeTree</definition>
        <argsstring>(tree_t *tree)</argsstring>
        <name>FreeTree</name>
        <param>
          <type><ref refid="structtree__s" kindref="compound">tree_t</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="372" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/facebsp.cpp" bodystart="116" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a2a22305dc4a0da2e23d4ef37c703fe75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FreeTree_r</definition>
        <argsstring>(node_t *node)</argsstring>
        <name>FreeTree_r</name>
        <param>
          <type><ref refid="structnode__s" kindref="compound">node_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="374" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/facebsp.cpp" bodystart="93" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a0b01f2b882fbf80c086998bf84992f6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FreeTreePortals_r</definition>
        <argsstring>(node_t *node)</argsstring>
        <name>FreeTreePortals_r</name>
        <param>
          <type><ref refid="structnode__s" kindref="compound">node_t</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="375" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/facebsp.cpp" bodystart="64" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a5ad7f2065e5761397ef2d8a3839cf37f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbspface__s" kindref="compound">bspface_t</ref> *</type>
        <definition>bspface_t* MakeStructuralBspFaceList</definition>
        <argsstring>(primitive_t *list)</argsstring>
        <name>MakeStructuralBspFaceList</name>
        <param>
          <type><ref refid="structprimitive__s" kindref="compound">primitive_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="378" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/facebsp.cpp" bodystart="420" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a92a085ae02fcf331e02b53656931364c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structbspface__s" kindref="compound">bspface_t</ref> *</type>
        <definition>bspface_t* MakeVisibleBspFaceList</definition>
        <argsstring>(primitive_t *list)</argsstring>
        <name>MakeVisibleBspFaceList</name>
        <param>
          <type><ref refid="structprimitive__s" kindref="compound">primitive_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="379" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/facebsp.cpp" bodystart="464" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a63bab4d47cbe08147d5eceaae01d18d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structtree__s" kindref="compound">tree_t</ref> *</type>
        <definition>tree_t* FaceBSP</definition>
        <argsstring>(bspface_t *list)</argsstring>
        <name>FaceBSP</name>
        <param>
          <type><ref refid="structbspface__s" kindref="compound">bspface_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="380" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/facebsp.cpp" bodystart="375" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a513db1747d72319566401cce068393e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
        <definition>mapTri_t* CullTrisInOpaqueLeafs</definition>
        <argsstring>(mapTri_t *triList, tree_t *tree)</argsstring>
        <name>CullTrisInOpaqueLeafs</name>
        <param>
          <type><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
          <declname>triList</declname>
        </param>
        <param>
          <type><ref refid="structtree__s" kindref="compound">tree_t</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="386" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a83a906d9257bc304ba74ec1eece170d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ClipSidesByTree</definition>
        <argsstring>(uEntity_t *e)</argsstring>
        <name>ClipSidesByTree</name>
        <param>
          <type><ref refid="structu_entity__t" kindref="compound">uEntity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="387" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/usurface.cpp" bodystart="324" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1ab063a38726c088abe761dad9b9b524a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SplitTrisToSurfaces</definition>
        <argsstring>(mapTri_t *triList, tree_t *tree)</argsstring>
        <name>SplitTrisToSurfaces</name>
        <param>
          <type><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
          <declname>triList</declname>
        </param>
        <param>
          <type><ref refid="structtree__s" kindref="compound">tree_t</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="388" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1ad45e7f30c8713e40c2a5b2f8b6a32f47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PutPrimitivesInAreas</definition>
        <argsstring>(uEntity_t *e)</argsstring>
        <name>PutPrimitivesInAreas</name>
        <param>
          <type><ref refid="structu_entity__t" kindref="compound">uEntity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="389" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/usurface.cpp" bodystart="589" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a4fdbcf0da9e08ee311f879b4b741b09e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Prelight</definition>
        <argsstring>(uEntity_t *e)</argsstring>
        <name>Prelight</name>
        <param>
          <type><ref refid="structu_entity__t" kindref="compound">uEntity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="390" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/usurface.cpp" bodystart="996" bodyend="1043"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1ab8ecb1f47344ac8c898cfb035b1cadd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structhash_vert__s" kindref="compound">hashVert_s</ref> *</type>
        <definition>struct hashVert_s* GetHashVert</definition>
        <argsstring>(idVec3 &amp;v)</argsstring>
        <name>GetHashVert</name>
        <param>
          <type><ref refid="classid_vec3" kindref="compound">idVec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="396" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritjunction.cpp" bodystart="109" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a9ee9451286cab768d6e671079c61ca6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HashTriangles</definition>
        <argsstring>(optimizeGroup_t *groupList)</argsstring>
        <name>HashTriangles</name>
        <param>
          <type><ref refid="structoptimize_group__s" kindref="compound">optimizeGroup_t</ref> *</type>
          <declname>groupList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="397" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritjunction.cpp" bodystart="216" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a52bf6285f48f11e97e3f6070779f3675" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FreeTJunctionHash</definition>
        <argsstring>(void)</argsstring>
        <name>FreeTJunctionHash</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="398" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritjunction.cpp" bodystart="273" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a7b77036362ac8a8b4de0c86925ed13d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CountGroupListTris</definition>
        <argsstring>(const optimizeGroup_t *groupList)</argsstring>
        <name>CountGroupListTris</name>
        <param>
          <type>const <ref refid="structoptimize_group__s" kindref="compound">optimizeGroup_t</ref> *</type>
          <declname>groupList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="399" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritjunction.cpp" bodystart="450" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1ae4f7271ba2a87779eb8c112d37e0f170" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FixEntityTjunctions</definition>
        <argsstring>(uEntity_t *e)</argsstring>
        <name>FixEntityTjunctions</name>
        <param>
          <type><ref refid="structu_entity__t" kindref="compound">uEntity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="400" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritjunction.cpp" bodystart="517" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1ab1cb578b94bb0f9a7681b7c7cdf0ce4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FixAreaGroupsTjunctions</definition>
        <argsstring>(optimizeGroup_t *groupList)</argsstring>
        <name>FixAreaGroupsTjunctions</name>
        <param>
          <type><ref refid="structoptimize_group__s" kindref="compound">optimizeGroup_t</ref> *</type>
          <declname>groupList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="401" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritjunction.cpp" bodystart="466" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a503e354d1f614fe4a5f369bbb0f03850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FixGlobalTjunctions</definition>
        <argsstring>(uEntity_t *e)</argsstring>
        <name>FixGlobalTjunctions</name>
        <param>
          <type><ref refid="structu_entity__t" kindref="compound">uEntity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="402" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritjunction.cpp" bodystart="531" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a21d306306feda9ea66c3ebbd560ab3da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OptimizeEntity</definition>
        <argsstring>(uEntity_t *e)</argsstring>
        <name>OptimizeEntity</name>
        <param>
          <type><ref refid="structu_entity__t" kindref="compound">uEntity_t</ref> *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="446" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/optimize.cpp" bodystart="1983" bodyend="1990"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a071c12f231995fe326a17027a9ddb1e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OptimizeGroupList</definition>
        <argsstring>(optimizeGroup_t *groupList)</argsstring>
        <name>OptimizeGroupList</name>
        <param>
          <type><ref refid="structoptimize_group__s" kindref="compound">optimizeGroup_t</ref> *</type>
          <declname>groupList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="447" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/optimize.cpp" bodystart="1947" bodyend="1975"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1ab3dac41097303bbcd395dfa8d1eac873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
        <definition>mapTri_t* AllocTri</definition>
        <argsstring>(void)</argsstring>
        <name>AllocTri</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="453" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritools.cpp" bodystart="45" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a7323c7a909875e730dbf9ccf679c77ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FreeTri</definition>
        <argsstring>(mapTri_t *tri)</argsstring>
        <name>FreeTri</name>
        <param>
          <type><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
          <declname>tri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="454" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritools.cpp" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a8b510d4a3af30613aab11631195c5eb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CountTriList</definition>
        <argsstring>(const mapTri_t *list)</argsstring>
        <name>CountTriList</name>
        <param>
          <type>const <ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="455" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritools.cpp" bodystart="125" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1ad039d7b7aff81e8aea58aaf91b733d62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
        <definition>mapTri_t* MergeTriLists</definition>
        <argsstring>(mapTri_t *a, mapTri_t *b)</argsstring>
        <name>MergeTriLists</name>
        <param>
          <type><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="456" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritools.cpp" bodystart="70" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a2c40e12833005f9247ffb7472b646048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
        <definition>mapTri_t* CopyTriList</definition>
        <argsstring>(const mapTri_t *a)</argsstring>
        <name>CopyTriList</name>
        <param>
          <type>const <ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="457" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritools.cpp" bodystart="103" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1ae47ab0ee5257bfa5295348eb8cfe37d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FreeTriList</definition>
        <argsstring>(mapTri_t *a)</argsstring>
        <name>FreeTriList</name>
        <param>
          <type><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="458" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritools.cpp" bodystart="89" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a8ea525dad98c9837ab1be46c66ee8951" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
        <definition>mapTri_t* CopyMapTri</definition>
        <argsstring>(const mapTri_t *tri)</argsstring>
        <name>CopyMapTri</name>
        <param>
          <type>const <ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
          <declname>tri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="459" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritools.cpp" bodystart="143" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1abee5144d1d8e17de31f7812cecd7539f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float MapTriArea</definition>
        <argsstring>(const mapTri_t *tri)</argsstring>
        <name>MapTriArea</name>
        <param>
          <type>const <ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
          <declname>tri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="460" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritools.cpp" bodystart="157" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a9c2d504ad614068cc859998b2e16e993" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
        <definition>mapTri_t* RemoveBadTris</definition>
        <argsstring>(const mapTri_t *tri)</argsstring>
        <name>RemoveBadTris</name>
        <param>
          <type>const <ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
          <declname>tri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="461" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritools.cpp" bodystart="168" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1aa16c931eb73b923ac6d883226fc2b41f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BoundTriList</definition>
        <argsstring>(const mapTri_t *list, idBounds &amp;b)</argsstring>
        <name>BoundTriList</name>
        <param>
          <type>const <ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="classid_bounds" kindref="compound">idBounds</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="462" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritools.cpp" bodystart="191" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a4096a836247099521445e6b949216493" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DrawTri</definition>
        <argsstring>(const mapTri_t *tri)</argsstring>
        <name>DrawTri</name>
        <param>
          <type>const <ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
          <declname>tri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="463" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritools.cpp" bodystart="205" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1ade54e93c198f0da7bd0444357bf4147c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FlipTriList</definition>
        <argsstring>(mapTri_t *tris)</argsstring>
        <name>FlipTriList</name>
        <param>
          <type><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
          <declname>tris</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="464" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritools.cpp" bodystart="223" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a13132a6b18df4df62ab057553ee88529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TriVertsFromOriginal</definition>
        <argsstring>(mapTri_t *tri, const mapTri_t *original)</argsstring>
        <name>TriVertsFromOriginal</name>
        <param>
          <type><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
          <declname>tri</declname>
        </param>
        <param>
          <type>const <ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
          <declname>original</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="465" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritools.cpp" bodystart="269" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a85c6fbadfd14ad48ae4c386ae6c51f14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PlaneForTri</definition>
        <argsstring>(const mapTri_t *tri, idPlane &amp;plane)</argsstring>
        <name>PlaneForTri</name>
        <param>
          <type>const <ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
          <declname>tri</declname>
        </param>
        <param>
          <type><ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>plane</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="466" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritools.cpp" bodystart="385" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a6fc477291ddea43958f202bbd57782a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classid_winding" kindref="compound">idWinding</ref> *</type>
        <definition>idWinding* WindingForTri</definition>
        <argsstring>(const mapTri_t *tri)</argsstring>
        <name>WindingForTri</name>
        <param>
          <type>const <ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
          <declname>tri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="467" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritools.cpp" bodystart="250" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1aae65c17cccd635f05d92786428948e9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
        <definition>mapTri_t* WindingToTriList</definition>
        <argsstring>(const idWinding *w, const mapTri_t *originalTri)</argsstring>
        <name>WindingToTriList</name>
        <param>
          <type>const <ref refid="classid_winding" kindref="compound">idWinding</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const <ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
          <declname>originalTri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="468" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritools.cpp" bodystart="310" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a3ed4089d172342585c9bfabb11297e7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ClipTriList</definition>
        <argsstring>(const mapTri_t *list, const idPlane &amp;plane, float epsilon, mapTri_t **front, mapTri_t **back)</argsstring>
        <name>ClipTriList</name>
        <param>
          <type>const <ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>const <ref refid="classid_plane" kindref="compound">idPlane</ref> &amp;</type>
          <declname>plane</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> **</type>
          <declname>front</declname>
        </param>
        <param>
          <type><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> **</type>
          <declname>back</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="469" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/tritools.cpp" bodystart="356" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a83b30bfe98b199d985166109d3e60647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref> *</type>
        <definition>srfTriangles_t* ShareMapTriVerts</definition>
        <argsstring>(const mapTri_t *tris)</argsstring>
        <name>ShareMapTriVerts</name>
        <param>
          <type>const <ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
          <declname>tris</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="475" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/output.cpp" bodystart="191" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a5b8f51b7deb279ecec9061d78c7b7268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WriteOutputFile</definition>
        <argsstring>(void)</argsstring>
        <name>WriteOutputFile</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="476" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/output.cpp" bodystart="636" bodyend="682"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a929300a437661f601e09fbc6a2413a95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref> *</type>
        <definition>srfTriangles_t* CreateLightShadow</definition>
        <argsstring>(optimizeGroup_t *shadowerGroups, const mapLight_t *light)</argsstring>
        <name>CreateLightShadow</name>
        <param>
          <type><ref refid="structoptimize_group__s" kindref="compound">optimizeGroup_t</ref> *</type>
          <declname>shadowerGroups</declname>
        </param>
        <param>
          <type>const <ref refid="structmap_light__t" kindref="compound">mapLight_t</ref> *</type>
          <declname>light</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="482" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/shadowopt3.cpp" bodystart="1220" bodyend="1276"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a06e1c858f737cea1b87429ac172a1ef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FreeBeamTree</definition>
        <argsstring>(struct beamTree_s *beamTree)</argsstring>
        <name>FreeBeamTree</name>
        <param>
          <type>struct beamTree_s *</type>
          <declname>beamTree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="483" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dmap_8h_1a28668533d17139b3b577cdead437a75c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CarveTriByBeamTree</definition>
        <argsstring>(const struct beamTree_s *beamTree, const mapTri_t *tri, mapTri_t **lit, mapTri_t **unLit)</argsstring>
        <name>CarveTriByBeamTree</name>
        <param>
          <type>const struct beamTree_s *</type>
          <declname>beamTree</declname>
        </param>
        <param>
          <type>const <ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> *</type>
          <declname>tri</declname>
        </param>
        <param>
          <type><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> **</type>
          <declname>lit</declname>
        </param>
        <param>
          <type><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref> **</type>
          <declname>unLit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h" line="485" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../../renderer/tr_local.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="structprimitive__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structprimitive__s" kindref="compound">primitive_s</ref><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structprimitive__s" kindref="compound">primitive_s</ref><sp/>*next;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>one<sp/>of<sp/>these<sp/>will<sp/>be<sp/>non-NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbspbrush__s" kindref="compound">bspbrush_s</ref><sp/>*<sp/>brush;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmap_tri__s" kindref="compound">mapTri_s</ref><sp/>*<sp/><sp/><sp/>tris;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}<sp/><ref refid="structprimitive__s" kindref="compound">primitive_t</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="structu_area__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structoptimize_group__s" kindref="compound">optimizeGroup_s</ref><sp/><sp/>*groups;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>might<sp/>want<sp/>to<sp/>add<sp/>other<sp/>fields<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">}<sp/><ref refid="structu_area__t" kindref="compound">uArea_t</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="structu_entity__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_map_entity" kindref="compound">idMapEntity</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapEntity;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>points<sp/>into<sp/>mapFile_t<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>origin;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structprimitive__s" kindref="compound">primitive_t</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>primitives;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtree__s" kindref="compound">tree_s</ref><sp/>*<sp/><sp/><sp/><sp/><sp/>tree;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numAreas;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structu_area__t" kindref="compound">uArea_t</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>areas;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}<sp/><ref refid="structu_entity__t" kindref="compound">uEntity_t</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>chains<sp/>of<sp/>mapTri_t<sp/>are<sp/>the<sp/>general<sp/>unit<sp/>of<sp/>processing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="structmap_tri__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmap_tri__s" kindref="compound">mapTri_s</ref><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmap_tri__s" kindref="compound">mapTri_s</ref><sp/>*<sp/><sp/><sp/>next;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_material" kindref="compound">idMaterial</ref><sp/>*<sp/><sp/>material;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mergeGroup;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>want<sp/>to<sp/>avoid<sp/>merging<sp/>triangles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>different<sp/>fixed<sp/>groups,<sp/>like<sp/>guiSurfs<sp/>and<sp/>mirrors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planeNum;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>set<sp/>universally,<sp/>just<sp/>in<sp/>some<sp/>areas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[3];</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhash_vert__s" kindref="compound">hashVert_s</ref><sp/>*hashVert[3];</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structopt_vertex__s" kindref="compound">optVertex_s</ref><sp/>*optVert[3];</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}<sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="structmesh__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,<sp/>height;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verts;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}<sp/><ref refid="structmesh__t" kindref="compound">mesh_t</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_PATCH_SIZE<sp/><sp/>32</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PLANENUM_LEAF<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="structparse_mesh__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structparse_mesh__s" kindref="compound">parseMesh_s</ref><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structparse_mesh__s" kindref="compound">parseMesh_s</ref><sp/>*next;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmesh__t" kindref="compound">mesh_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_material" kindref="compound">idMaterial</ref><sp/>*<sp/><sp/>material;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}<sp/><ref refid="structparse_mesh__s" kindref="compound">parseMesh_t</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="structbspface__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbspface__s" kindref="compound">bspface_s</ref><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbspface__s" kindref="compound">bspface_s</ref><sp/>*<sp/><sp/>next;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planenum;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portal;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>portals<sp/>will<sp/>be<sp/>selected<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>any<sp/>non-portals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checked;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>by<sp/>SelectSplitPlaneNum()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_winding" kindref="compound">idWinding</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}<sp/><ref refid="structbspface__s" kindref="compound">bspface_t</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="structtexture_vectors__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec4" kindref="compound">idVec4</ref><sp/><sp/><sp/><sp/><sp/><sp/>v[2];<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>offset<sp/>value<sp/>will<sp/>always<sp/>be<sp/>in<sp/>the<sp/>0.0<sp/>to<sp/>1.0<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">}<sp/><ref refid="structtexture_vectors__t" kindref="compound">textureVectors_t</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="structside__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structside__s" kindref="compound">side_s</ref><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planenum;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_material" kindref="compound">idMaterial</ref><sp/>*<sp/><sp/>material;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtexture_vectors__t" kindref="compound">textureVectors_t</ref><sp/><sp/><sp/><sp/>texVec;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_winding" kindref="compound">idWinding</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>winding;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>clipped<sp/>to<sp/>the<sp/>other<sp/>sides<sp/>of<sp/>the<sp/>brush</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_winding" kindref="compound">idWinding</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visibleHull;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>clipped<sp/>to<sp/>the<sp/>solid<sp/>parts<sp/>of<sp/>the<sp/>world</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">}<sp/><ref refid="structside__s" kindref="compound">side_t</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="structbspbrush__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbspbrush__s" kindref="compound">bspbrush_s</ref><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbspbrush__s" kindref="compound">bspbrush_s</ref><sp/>*<sp/>next;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbspbrush__s" kindref="compound">bspbrush_s</ref><sp/>*<sp/>original;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>chopped<sp/>up<sp/>brushes<sp/>will<sp/>reference<sp/>the<sp/>originals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entitynum;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>editor<sp/>numbering<sp/>for<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brushnum;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>editor<sp/>numbering<sp/>for<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_material" kindref="compound">idMaterial</ref><sp/>*<sp/><sp/>contentShader;<sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>face&apos;s<sp/>shader<sp/>will<sp/>determine<sp/>the<sp/>volume<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contents;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opaque;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputNumber;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>when<sp/>the<sp/>brush<sp/>is<sp/>written<sp/>to<sp/>the<sp/>file<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bounds;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numsides;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structside__s" kindref="compound">side_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sides[6];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>variably<sp/>sized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">}<sp/><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="structdraw_surf_ref__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdraw_surf_ref__s" kindref="compound">drawSurfRef_s</ref><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdraw_surf_ref__s" kindref="compound">drawSurfRef_s</ref><sp/>*<sp/><sp/>nextRef;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputNumber;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}<sp/><ref refid="structdraw_surf_ref__s" kindref="compound">drawSurfRef_t</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="structnode__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnode__s" kindref="compound">node_s</ref><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>both<sp/>leafs<sp/>and<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planenum;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-1<sp/>=<sp/>leaf<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnode__s" kindref="compound">node_s</ref><sp/>*<sp/><sp/><sp/><sp/><sp/>parent;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bounds;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>valid<sp/>after<sp/>portalization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nodes<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structside__s" kindref="compound">side_t</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>side;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>side<sp/>that<sp/>created<sp/>the<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnode__s" kindref="compound">node_s</ref><sp/>*<sp/><sp/><sp/><sp/><sp/>children[2];</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumber;<sp/></highlight><highlight class="comment">//<sp/>set<sp/>after<sp/>pruning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>leafs<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opaque;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>view<sp/>can<sp/>never<sp/>be<sp/>inside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brushlist;<sp/><sp/></highlight><highlight class="comment">//<sp/>fragments<sp/>of<sp/>all<sp/>brushes<sp/>in<sp/>this<sp/>leaf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>needed<sp/>for<sp/>FindSideForPortal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>area;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determined<sp/>by<sp/>flood<sp/>filling<sp/>up<sp/>to<sp/>areaportals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>occupied;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>or<sp/>greater<sp/>can<sp/>reach<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structu_entity__t" kindref="compound">uEntity_t</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>occupant;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>leak<sp/>file<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structu_portal__s" kindref="compound">uPortal_s</ref><sp/>*<sp/><sp/>portals;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>on<sp/>nodes<sp/>during<sp/>construction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal">}<sp/><ref refid="structnode__s" kindref="compound">node_t</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="structu_portal__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structu_portal__s" kindref="compound">uPortal_s</ref><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/><sp/><sp/><sp/><sp/>plane;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnode__s" kindref="compound">node_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>*onnode;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NULL<sp/>=<sp/>outside<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnode__s" kindref="compound">node_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>*nodes[2];<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[0]<sp/>=<sp/>front<sp/>side<sp/>of<sp/>plane</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structu_portal__s" kindref="compound">uPortal_s</ref><sp/><sp/><sp/><sp/>*next[2];</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_winding" kindref="compound">idWinding</ref><sp/><sp/><sp/>*winding;</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}<sp/><ref refid="structu_portal__s" kindref="compound">uPortal_t</ref>;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>tree_t<sp/>is<sp/>created<sp/>by<sp/>FaceBSP()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="structtree__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtree__s" kindref="compound">tree_s</ref><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnode__s" kindref="compound">node_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>*headnode;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnode__s" kindref="compound">node_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>outside_node;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/><sp/><sp/><sp/>bounds;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}<sp/><ref refid="structtree__s" kindref="compound">tree_t</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_QPATH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>256<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>max<sp/>length<sp/>of<sp/>a<sp/>game<sp/>pathname</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="structmap_light__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_render_light_local" kindref="compound">idRenderLightLocal</ref><sp/><sp/>def;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name[MAX_QPATH];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>naming<sp/>the<sp/>shadow<sp/>volume<sp/>surface<sp/>and<sp/>interactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref><sp/><sp/>*shadowTris;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}<sp/><ref refid="structmap_light__t" kindref="compound">mapLight_t</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_GROUP_LIGHTS<sp/><sp/><sp/><sp/>16</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="structoptimize_group__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structoptimize_group__s" kindref="compound">optimizeGroup_s</ref><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structoptimize_group__s" kindref="compound">optimizeGroup_s</ref><sp/><sp/>*nextGroup;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bounds;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>in<sp/>CarveGroupsByLight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>of<sp/>these<sp/>must<sp/>match<sp/>to<sp/>add<sp/>a<sp/>triangle<sp/>to<sp/>the<sp/>triList</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smoothed;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>curves<sp/>will<sp/>never<sp/>merge<sp/>with<sp/>brushes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planeNum;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>areaNum;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_material" kindref="compound">idMaterial</ref><sp/>*<sp/><sp/>material;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numGroupLights;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmap_light__t" kindref="compound">mapLight_t</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>groupLights[MAX_GROUP_LIGHTS];<sp/><sp/></highlight><highlight class="comment">//<sp/>lights<sp/>effecting<sp/>this<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mergeGroup;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>differs<sp/>(guiSurfs,<sp/>mirrors,<sp/>etc),<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>groups<sp/>will<sp/>not<sp/>be<sp/>combined<sp/>into<sp/>model<sp/>surfaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>optimization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtexture_vectors__t" kindref="compound">textureVectors_t</ref><sp/><sp/><sp/><sp/>texVec;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surfaceEmited;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>triList;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regeneratedTris;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>each<sp/>island<sp/>optimization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis[2];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>orthogonal<sp/>to<sp/>the<sp/>plane,<sp/>so<sp/>optimization<sp/>can<sp/>be<sp/>2D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal">}<sp/><ref refid="structoptimize_group__s" kindref="compound">optimizeGroup_t</ref>;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>all<sp/>primitives<sp/>from<sp/>the<sp/>map<sp/>are<sp/>added<sp/>to<sp/>optimzeGroups,<sp/>creating<sp/>new<sp/>ones<sp/>as<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>each<sp/>optimizeGroup<sp/>is<sp/>then<sp/>split<sp/>into<sp/>the<sp/>map<sp/>areas,<sp/>creating<sp/>groups<sp/>in<sp/>each<sp/>area</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//<sp/>each<sp/>optimizeGroup<sp/>is<sp/>then<sp/>divided<sp/>by<sp/>each<sp/>light,<sp/>creating<sp/>more<sp/>groups</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>final<sp/>list<sp/>of<sp/>groups<sp/>is<sp/>then<sp/>tjunction<sp/>fixed<sp/>against<sp/>all<sp/>groups,<sp/>then<sp/>optimized<sp/>internally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>multiple<sp/>optimizeGroups<sp/>will<sp/>be<sp/>merged<sp/>together<sp/>into<sp/>.proc<sp/>surfaces,<sp/>but<sp/>no<sp/>further<sp/>optimization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>done<sp/>on<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>dmap.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>SO_NONE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>SO_MERGE_SURFACES,<sp/><sp/></highlight><highlight class="comment">//<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>SO_CULL_OCCLUDED,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>SO_CLIP_OCCLUDERS,<sp/><sp/></highlight><highlight class="comment">//<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>SO_CLIP_SILS,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>SO_SIL_OPTIMIZE<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">}<sp/>shadowOptLevel_t;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="structdmap_globals__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mapFileBase<sp/>will<sp/>contain<sp/>the<sp/>qpath<sp/>without<sp/>any<sp/>extension:<sp/>&quot;maps/test_box&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapFileBase[1024];</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_map_file" kindref="compound">idMapFile</ref><sp/><sp/><sp/>*dmapFile;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_plane_set" kindref="compound">idPlaneSet</ref><sp/><sp/>mapPlanes;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_entities;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structu_entity__t" kindref="compound">uEntity_t</ref><sp/><sp/><sp/>*uEntities;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entityNum;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_list" kindref="compound">idList&lt;mapLight_t*&gt;</ref><sp/>mapLights;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>verbose;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>glview;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>noOptimize;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>verboseentities;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>noCurves;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>fullCarve;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>noModelBrushes;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>noTJunc;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>nomerge;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>noFlood;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>noClipSides;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>cut<sp/>sides<sp/>by<sp/>solid<sp/>leafs,<sp/>use<sp/>the<sp/>entire<sp/>thing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>noLightCarve;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>extra<sp/>triangle<sp/>subdivision<sp/>by<sp/>light<sp/>frustums</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>shadowOptLevel_t<sp/><sp/><sp/><sp/>shadowOptLevel;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>noShadow;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>create<sp/>optimized<sp/>shadow<sp/>volumes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/><sp/><sp/><sp/>drawBounds;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>drawflag;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>totalShadowTriangles;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>totalShadowVerts;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}<sp/><ref refid="structdmap_globals__t" kindref="compound">dmapGlobals_t</ref>;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structdmap_globals__t" kindref="compound">dmapGlobals_t</ref><sp/>dmapGlobals;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FindFloatPlane(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>&amp;plane,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*fixedDegeneracies<sp/>=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>brush.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CLIP_EPSILON</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CLIP_EPSILON<sp/><sp/><sp/><sp/>0.1f</highlight></codeline>
<codeline lineno="282"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="283"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PSIDE_FRONT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="285"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PSIDE_BACK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight></codeline>
<codeline lineno="286"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PSIDE_BOTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PSIDE_FRONT|PSIDE_BACK)</highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PSIDE_FACING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4</highlight></codeline>
<codeline lineno="288"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CountBrushList<sp/>(<ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref><sp/>*brushes);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref><sp/>*AllocBrush<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numsides);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FreeBrush<sp/>(<ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref><sp/>*brushes);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FreeBrushList<sp/>(<ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref><sp/>*brushes);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref><sp/>*CopyBrush<sp/>(<ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref><sp/>*brush);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrawBrushList<sp/>(<ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref><sp/>*brush);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintBrush<sp/>(<ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref><sp/>*brush);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BoundBrush<sp/>(<ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref><sp/>*brush);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CreateBrushWindings<sp/>(<ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref><sp/>*brush);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref><sp/><sp/><sp/><sp/>*BrushFromBounds(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>&amp;bounds<sp/>);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>BrushVolume<sp/>(<ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref><sp/>*brush);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WriteBspBrushMap(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref><sp/>*list<sp/>);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FilterBrushesIntoTree(<sp/><ref refid="structu_entity__t" kindref="compound">uEntity_t</ref><sp/>*e<sp/>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplitBrush(<sp/><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref><sp/>*brush,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planenum,<sp/><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref><sp/>**front,<sp/><ref refid="structbspbrush__s" kindref="compound">uBrush_t</ref><sp/>**back);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><ref refid="structnode__s" kindref="compound">node_t</ref><sp/>*AllocNode(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">//<sp/>map.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LoadDMapFile(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename<sp/>);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FreeOptimizeGroupList(<sp/><ref refid="structoptimize_group__s" kindref="compound">optimizeGroup_t</ref><sp/>*groups<sp/>);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FreeDMapFile(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>draw.cpp<sp/>--<sp/>draw<sp/>debug<sp/>views<sp/>either<sp/>directly,<sp/>or<sp/>through<sp/>glserv.exe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Draw_ClearWindow(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrawWinding(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_winding" kindref="compound">idWinding</ref><sp/>*w<sp/>);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrawAuxWinding(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_winding" kindref="compound">idWinding</ref><sp/>*w<sp/>);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrawLine(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>v1,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>v2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>color<sp/>);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GLS_BeginScene(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GLS_Winding(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_winding" kindref="compound">idWinding</ref><sp/>*w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code<sp/>);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GLS_Triangle(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*tri,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code<sp/>);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GLS_EndScene(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>portals.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_INTER_AREA_PORTALS<sp/><sp/>1024</highlight></codeline>
<codeline lineno="338"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="structinter_area_portal__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>area0,<sp/>area1;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structside__s" kindref="compound">side_t</ref><sp/><sp/>*side;</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}<sp/><ref refid="structinter_area_portal__t" kindref="compound">interAreaPortal_t</ref>;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><sp/><ref refid="structinter_area_portal__t" kindref="compound">interAreaPortal_t</ref><sp/>interAreaPortals[MAX_INTER_AREA_PORTALS];</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numInterAreaPortals;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FloodEntities(<sp/><ref refid="structtree__s" kindref="compound">tree_t</ref><sp/>*tree<sp/>);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FillOutside(<sp/><ref refid="structu_entity__t" kindref="compound">uEntity_t</ref><sp/>*e<sp/>);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FloodAreas(<sp/><ref refid="structu_entity__t" kindref="compound">uEntity_t</ref><sp/>*e<sp/>);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MakeTreePortals(<sp/><ref refid="structtree__s" kindref="compound">tree_t</ref><sp/>*tree<sp/>);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FreePortal(<sp/><ref refid="structu_portal__s" kindref="compound">uPortal_t</ref><sp/>*p<sp/>);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>glfile.cpp<sp/>--<sp/>write<sp/>a<sp/>debug<sp/>file<sp/>to<sp/>be<sp/>viewd<sp/>with<sp/>glview.exe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OutputWinding(<sp/><ref refid="classid_winding" kindref="compound">idWinding</ref><sp/>*w,<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*glview<sp/>);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WriteGLView(<sp/><ref refid="structtree__s" kindref="compound">tree_t</ref><sp/>*tree,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*source<sp/>);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>leakfile.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LeakFile(<sp/><ref refid="structtree__s" kindref="compound">tree_t</ref><sp/>*tree<sp/>);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">//<sp/>facebsp.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><ref refid="structtree__s" kindref="compound">tree_t</ref><sp/>*AllocTree(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FreeTree(<sp/><ref refid="structtree__s" kindref="compound">tree_t</ref><sp/>*tree<sp/>);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FreeTree_r(<sp/><ref refid="structnode__s" kindref="compound">node_t</ref><sp/>*node<sp/>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FreeTreePortals_r(<sp/><ref refid="structnode__s" kindref="compound">node_t</ref><sp/>*node<sp/>);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><ref refid="structbspface__s" kindref="compound">bspface_t</ref><sp/><sp/><sp/>*MakeStructuralBspFaceList(<sp/><ref refid="structprimitive__s" kindref="compound">primitive_t</ref><sp/>*list<sp/>);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><ref refid="structbspface__s" kindref="compound">bspface_t</ref><sp/><sp/><sp/>*MakeVisibleBspFaceList(<sp/><ref refid="structprimitive__s" kindref="compound">primitive_t</ref><sp/>*list<sp/>);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><ref refid="structtree__s" kindref="compound">tree_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>*FaceBSP(<sp/><ref refid="structbspface__s" kindref="compound">bspface_t</ref><sp/>*list<sp/>);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">//<sp/>surface.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*CullTrisInOpaqueLeafs(<sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*triList,<sp/><ref refid="structtree__s" kindref="compound">tree_t</ref><sp/>*tree<sp/>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>ClipSidesByTree(<sp/><ref refid="structu_entity__t" kindref="compound">uEntity_t</ref><sp/>*e<sp/>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>SplitTrisToSurfaces(<sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*triList,<sp/><ref refid="structtree__s" kindref="compound">tree_t</ref><sp/>*tree<sp/>);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>PutPrimitivesInAreas(<sp/><ref refid="structu_entity__t" kindref="compound">uEntity_t</ref><sp/>*e<sp/>);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>Prelight(<sp/><ref refid="structu_entity__t" kindref="compound">uEntity_t</ref><sp/>*e<sp/>);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tritjunction.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhash_vert__s" kindref="compound">hashVert_s</ref><sp/><sp/><sp/>*GetHashVert(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;v<sp/>);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>HashTriangles(<sp/><ref refid="structoptimize_group__s" kindref="compound">optimizeGroup_t</ref><sp/>*groupList<sp/>);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>FreeTJunctionHash(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>CountGroupListTris(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structoptimize_group__s" kindref="compound">optimizeGroup_t</ref><sp/>*groupList<sp/>);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>FixEntityTjunctions(<sp/><ref refid="structu_entity__t" kindref="compound">uEntity_t</ref><sp/>*e<sp/>);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>FixAreaGroupsTjunctions(<sp/><ref refid="structoptimize_group__s" kindref="compound">optimizeGroup_t</ref><sp/>*groupList<sp/>);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>FixGlobalTjunctions(<sp/><ref refid="structu_entity__t" kindref="compound">uEntity_t</ref><sp/>*e<sp/>);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">//<sp/>optimize.cpp<sp/>--<sp/>trianlge<sp/>mesh<sp/>reoptimization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>shadow<sp/>volume<sp/>optimizer<sp/>call<sp/>internal<sp/>optimizer<sp/>routines,<sp/>normal<sp/>triangles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>just<sp/>be<sp/>done<sp/>by<sp/>OptimizeEntity()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412" refid="structopt_vertex__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structopt_vertex__s" kindref="compound">optVertex_s</ref><sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref><sp/><sp/>v;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>pv;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>projected<sp/>against<sp/>planar<sp/>axis,<sp/>third<sp/>value<sp/>is<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structopt_edge__s" kindref="compound">optEdge_s</ref><sp/>*edges;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structopt_vertex__s" kindref="compound">optVertex_s</ref><sp/><sp/>*islandLink;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>addedToIsland;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>emited;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>regenerating<sp/>triangles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">}<sp/><ref refid="structopt_vertex__s" kindref="compound">optVertex_t</ref>;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421" refid="structopt_edge__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structopt_edge__s" kindref="compound">optEdge_s</ref><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structopt_vertex__s" kindref="compound">optVertex_t</ref><sp/>*v1,<sp/>*v2;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structopt_edge__s" kindref="compound">optEdge_s</ref><sp/><sp/><sp/><sp/>*islandLink;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>addedToIsland;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>created;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>one<sp/>of<sp/>the<sp/>original<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>combined;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>combined<sp/>from<sp/>two<sp/>or<sp/>more<sp/>colinear<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structopt_tri__s" kindref="compound">optTri_s</ref><sp/>*frontTri,<sp/>*backTri;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structopt_edge__s" kindref="compound">optEdge_s</ref><sp/>*v1link,<sp/>*v2link;</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}<sp/><ref refid="structopt_edge__s" kindref="compound">optEdge_t</ref>;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431" refid="structopt_tri__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structopt_tri__s" kindref="compound">optTri_s</ref><sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structopt_tri__s" kindref="compound">optTri_s</ref><sp/>*next;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/>midpoint;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structopt_vertex__s" kindref="compound">optVertex_t</ref><sp/>*v[3];</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>filled;</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}<sp/><ref refid="structopt_tri__s" kindref="compound">optTri_t</ref>;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438" refid="structopt_island__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structoptimize_group__s" kindref="compound">optimizeGroup_t</ref><sp/>*group;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structopt_vertex__s" kindref="compound">optVertex_t</ref><sp/>*verts;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structopt_edge__s" kindref="compound">optEdge_t</ref><sp/><sp/><sp/>*edges;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structopt_tri__s" kindref="compound">optTri_t</ref><sp/><sp/><sp/><sp/>*tris;</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}<sp/><ref refid="structopt_island__t" kindref="compound">optIsland_t</ref>;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>OptimizeEntity(<sp/><ref refid="structu_entity__t" kindref="compound">uEntity_t</ref><sp/>*e<sp/>);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>OptimizeGroupList(<sp/><ref refid="structoptimize_group__s" kindref="compound">optimizeGroup_t</ref><sp/>*groupList<sp/>);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tritools.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/><sp/><sp/><sp/>*AllocTri(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FreeTri(<sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*tri<sp/>);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CountTriList(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*list<sp/>);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/><sp/><sp/><sp/>*MergeTriLists(<sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*a,<sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*b<sp/>);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/><sp/><sp/><sp/>*CopyTriList(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*a<sp/>);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FreeTriList(<sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*a<sp/>);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/><sp/><sp/><sp/>*CopyMapTri(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*tri<sp/>);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MapTriArea(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*tri<sp/>);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/><sp/><sp/><sp/>*RemoveBadTris(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*tri<sp/>);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BoundTriList(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*list,<sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>&amp;b<sp/>);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DrawTri(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*tri<sp/>);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlipTriList(<sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*tris<sp/>);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TriVertsFromOriginal(<sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*tri,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*original<sp/>);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PlaneForTri(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*tri,<sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>&amp;plane<sp/>);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><ref refid="classid_winding" kindref="compound">idWinding</ref><sp/><sp/><sp/>*WindingForTri(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*tri<sp/>);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/><sp/><sp/><sp/>*WindingToTriList(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_winding" kindref="compound">idWinding</ref><sp/>*w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*originalTri<sp/>);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ClipTriList(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*list,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_plane" kindref="compound">idPlane</ref><sp/>&amp;plane,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>epsilon,<sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>**front,<sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>**back<sp/>);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="comment">//<sp/>output.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref><sp/><sp/>*ShareMapTriVerts(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*tris<sp/>);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WriteOutputFile(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">//<sp/>shadowopt.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><ref refid="structsrf_triangles__s" kindref="compound">srfTriangles_t</ref><sp/>*CreateLightShadow(<sp/><ref refid="structoptimize_group__s" kindref="compound">optimizeGroup_t</ref><sp/>*shadowerGroups,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmap_light__t" kindref="compound">mapLight_t</ref><sp/>*light<sp/>);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FreeBeamTree(<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>beamTree_s<sp/>*beamTree<sp/>);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CarveTriByBeamTree(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>beamTree_s<sp/>*beamTree,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>*tri,<sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>**lit,<sp/><ref refid="structmap_tri__s" kindref="compound">mapTri_t</ref><sp/>**unLit<sp/>);</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/tools/compilers/dmap/dmap.h"/>
  </compounddef>
</doxygen>
