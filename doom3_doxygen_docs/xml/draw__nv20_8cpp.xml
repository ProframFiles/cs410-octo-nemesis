<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="draw__nv20_8cpp" kind="file">
    <compoundname>draw_nv20.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../idlib/precompiled.h</includes>
    <includes refid="tr__local_8h" local="yes">tr_local.h</includes>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="draw__nv20_8cpp_1aeee73b22874bc8be8efb07975cab9804" prot="public" static="no">
        <name>fragmentProgram_t</name>
        <enumvalue id="draw__nv20_8cpp_1aeee73b22874bc8be8efb07975cab9804a4be4b83a8972f64bdc828d046ec34a5f" prot="public">
          <name>FPROG_BUMP_AND_LIGHT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="draw__nv20_8cpp_1aeee73b22874bc8be8efb07975cab9804a0d34c64fea4837d57595f34554690b46" prot="public">
          <name>FPROG_DIFFUSE_COLOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="draw__nv20_8cpp_1aeee73b22874bc8be8efb07975cab9804a89731c15ee6d32c2d01b82ea6ff9db6b" prot="public">
          <name>FPROG_SPECULAR_COLOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="draw__nv20_8cpp_1aeee73b22874bc8be8efb07975cab9804ad2eab76c835033a337df4dc8c81720b7" prot="public">
          <name>FPROG_DIFFUSE_AND_SPECULAR_COLOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="draw__nv20_8cpp_1aeee73b22874bc8be8efb07975cab9804a3a35f9babf0ec6b18673f5f4ddfaa076" prot="public">
          <name>FPROG_NUM_FRAGMENT_PROGRAMS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" line="34" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" bodystart="34" bodyend="41"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="draw__nv20_8cpp_1a12bae7e910741c81fd7600ec1dd80194" prot="public" static="no" mutable="no">
        <type>GLuint</type>
        <definition>GLuint fragmentDisplayListBase</definition>
        <argsstring></argsstring>
        <name>fragmentDisplayListBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" line="43" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="draw__nv20_8cpp_1af4473ad7614c55846bef6e4765642a7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RB_NV20_DependentSpecularPass</definition>
        <argsstring>(const drawInteraction_t *din)</argsstring>
        <name>RB_NV20_DependentSpecularPass</name>
        <param>
          <type>const <ref refid="structdraw_interaction__t" kindref="compound">drawInteraction_t</ref> *</type>
          <declname>din</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="draw__nv20_8cpp_1a5812a7dc99860eb5b7b00f3b4290c967" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RB_NV20_DependentAmbientPass</definition>
        <argsstring>(void)</argsstring>
        <name>RB_NV20_DependentAmbientPass</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="draw__nv20_8cpp_1a8304c6586adf22db70e5231a89530494" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GL_SelectTextureNoClient</definition>
        <argsstring>(int unit)</argsstring>
        <name>GL_SelectTextureNoClient</name>
        <param>
          <type>int</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" line="61" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" bodystart="61" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="draw__nv20_8cpp_1a9aef2fa67293aa4f9a0fd0252e91032e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void RB_NV20_BumpAndLightFragment</definition>
        <argsstring>(void)</argsstring>
        <name>RB_NV20_BumpAndLightFragment</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" line="72" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" bodystart="72" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="draw__nv20_8cpp_1a69c07ff55e70adac3ed9d80d2e4af615" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void RB_NV20_DI_BumpAndLightPass</definition>
        <argsstring>(const drawInteraction_t *din, bool monoLightShader)</argsstring>
        <name>RB_NV20_DI_BumpAndLightPass</name>
        <param>
          <type>const <ref refid="structdraw_interaction__t" kindref="compound">drawInteraction_t</ref> *</type>
          <declname>din</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>monoLightShader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" line="146" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" bodystart="146" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="draw__nv20_8cpp_1a012dfc875740f825d6a5028f110cbcc2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void RB_NV20_DiffuseColorFragment</definition>
        <argsstring>(void)</argsstring>
        <name>RB_NV20_DiffuseColorFragment</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" line="213" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" bodystart="213" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="draw__nv20_8cpp_1a1447452aa676ba8df29a298d8a1de1a3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void RB_NV20_DI_DiffuseColorPass</definition>
        <argsstring>(const drawInteraction_t *din)</argsstring>
        <name>RB_NV20_DI_DiffuseColorPass</name>
        <param>
          <type>const <ref refid="structdraw_interaction__t" kindref="compound">drawInteraction_t</ref> *</type>
          <declname>din</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" line="261" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" bodystart="261" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="draw__nv20_8cpp_1af2800d43b86dd55f1fdf6faf08b10815" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void RB_NV20_SpecularColorFragment</definition>
        <argsstring>(void)</argsstring>
        <name>RB_NV20_SpecularColorFragment</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" line="323" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" bodystart="323" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="draw__nv20_8cpp_1a291b1d80641c107668bd809105a400e0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void RB_NV20_DI_SpecularColorPass</definition>
        <argsstring>(const drawInteraction_t *din)</argsstring>
        <name>RB_NV20_DI_SpecularColorPass</name>
        <param>
          <type>const <ref refid="structdraw_interaction__t" kindref="compound">drawInteraction_t</ref> *</type>
          <declname>din</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" line="414" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" bodystart="414" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="draw__nv20_8cpp_1a28f4a2e9ca5243284e823da8c81c8587" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void RB_NV20_DiffuseAndSpecularColorFragment</definition>
        <argsstring>(void)</argsstring>
        <name>RB_NV20_DiffuseAndSpecularColorFragment</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" line="477" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" bodystart="477" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="draw__nv20_8cpp_1a3decf68396d19d096d0e8d36cc116071" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void RB_NV20_DI_DiffuseAndSpecularColorPass</definition>
        <argsstring>(const drawInteraction_t *din)</argsstring>
        <name>RB_NV20_DI_DiffuseAndSpecularColorPass</name>
        <param>
          <type>const <ref refid="structdraw_interaction__t" kindref="compound">drawInteraction_t</ref> *</type>
          <declname>din</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" line="557" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" bodystart="557" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="draw__nv20_8cpp_1a06ad2b027b3e18410909eca631522f6b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void RB_NV20_DrawInteraction</definition>
        <argsstring>(const drawInteraction_t *din)</argsstring>
        <name>RB_NV20_DrawInteraction</name>
        <param>
          <type>const <ref refid="structdraw_interaction__t" kindref="compound">drawInteraction_t</ref> *</type>
          <declname>din</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" line="604" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" bodystart="604" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="draw__nv20_8cpp_1aeac1ea8d4547f75a4c9ac82064e6315f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void RB_NV20_CreateDrawInteractions</definition>
        <argsstring>(const drawSurf_t *surf)</argsstring>
        <name>RB_NV20_CreateDrawInteractions</name>
        <param>
          <type>const <ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref> *</type>
          <declname>surf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" line="669" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" bodystart="669" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="draw__nv20_8cpp_1aa072ee73b07e3a6684099a0ca57343de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RB_NV20_DrawInteractions</definition>
        <argsstring>(void)</argsstring>
        <name>RB_NV20_DrawInteractions</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" line="763" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" bodystart="763" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="draw__nv20_8cpp_1a53b0e420e882dc3f28d33374623e4442" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void R_NV20_Init</definition>
        <argsstring>(void)</argsstring>
        <name>R_NV20_Init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" line="844" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp" bodystart="844" bodyend="884"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tr_local.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>FPROG_BUMP_AND_LIGHT,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>FPROG_DIFFUSE_COLOR,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>FPROG_SPECULAR_COLOR,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>FPROG_DIFFUSE_AND_SPECULAR_COLOR,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>FPROG_NUM_FRAGMENT_PROGRAMS</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}<sp/>fragmentProgram_t;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">GLuint<sp/><sp/>fragmentDisplayListBase;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPROG_NUM_FRAGMENT_PROGRAMS<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RB_NV20_DependentSpecularPass(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdraw_interaction__t" kindref="compound">drawInteraction_t</ref><sp/>*din<sp/>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RB_NV20_DependentAmbientPass(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="49"><highlight class="comment">=========================================================================================</highlight></codeline>
<codeline lineno="50"><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">GENERAL<sp/>INTERACTION<sp/>RENDERING</highlight></codeline>
<codeline lineno="52"><highlight class="comment"></highlight></codeline>
<codeline lineno="53"><highlight class="comment">=========================================================================================</highlight></codeline>
<codeline lineno="54"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="57"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="58"><highlight class="comment">GL_SelectTextureNoClient</highlight></codeline>
<codeline lineno="59"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="60"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GL_SelectTextureNoClient(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unit<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>backEnd.glState.currenttmu<sp/>=<sp/>unit;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>qglActiveTextureARB(<sp/>GL_TEXTURE0_ARB<sp/>+<sp/>unit<sp/>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>RB_LogComment(<sp/></highlight><highlight class="stringliteral">&quot;glActiveTextureARB(<sp/>%i<sp/>)\n&quot;</highlight><highlight class="normal">,<sp/>unit<sp/>);</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="68"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="69"><highlight class="comment">RB_NV20_BumpAndLightFragment</highlight></codeline>
<codeline lineno="70"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="71"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RB_NV20_BumpAndLightFragment(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_useCombinerDisplayLists.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglCallList(<sp/>fragmentDisplayListBase<sp/>+<sp/>FPROG_BUMP_AND_LIGHT<sp/>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>program<sp/>the<sp/>nvidia<sp/>register<sp/>combiners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerParameteriNV(<sp/>GL_NUM_GENERAL_COMBINERS_NV,<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>0<sp/>rgb<sp/>performs<sp/>the<sp/>dot<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SPARE0<sp/>=<sp/>TEXTURE0<sp/>dot<sp/>TEXTURE1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER0_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_A_NV,<sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_TEXTURE1_ARB,<sp/>GL_EXPAND_NORMAL_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER0_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_B_NV,<sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_TEXTURE0_ARB,<sp/>GL_EXPAND_NORMAL_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerOutputNV(<sp/>GL_COMBINER0_NV,<sp/>GL_RGB,<sp/></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SPARE0_NV,<sp/>GL_DISCARD_NV,<sp/>GL_DISCARD_NV,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_NONE,<sp/>GL_NONE,<sp/>GL_TRUE,<sp/>GL_FALSE,<sp/>GL_FALSE<sp/>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>1<sp/>rgb<sp/>multiplies<sp/>texture<sp/>2<sp/>and<sp/>3<sp/>together</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SPARE1<sp/>=<sp/>TEXTURE2<sp/>*<sp/>TEXTURE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER1_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_A_NV,<sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_TEXTURE2_ARB,<sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER1_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_B_NV,<sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_TEXTURE3_ARB,<sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerOutputNV(<sp/>GL_COMBINER1_NV,<sp/>GL_RGB,<sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SPARE1_NV,<sp/>GL_DISCARD_NV,<sp/>GL_DISCARD_NV,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_NONE,<sp/>GL_NONE,<sp/>GL_FALSE,<sp/>GL_FALSE,<sp/>GL_FALSE<sp/>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>1<sp/>alpha<sp/>does<sp/>nohing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>2<sp/>color<sp/>multiplies<sp/>spare0<sp/>*<sp/>spare<sp/>1<sp/>just<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SPARE0<sp/>=<sp/>SPARE0<sp/>*<sp/>SPARE1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER2_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_A_NV,<sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SPARE0_NV,<sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER2_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_B_NV,<sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SPARE1_NV,<sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerOutputNV(<sp/>GL_COMBINER2_NV,<sp/>GL_RGB,<sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SPARE0_NV,<sp/>GL_DISCARD_NV,<sp/>GL_DISCARD_NV,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_NONE,<sp/>GL_NONE,<sp/>GL_FALSE,<sp/>GL_FALSE,<sp/>GL_FALSE<sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>2<sp/>alpha<sp/>multiples<sp/>spare0<sp/>*<sp/>spare<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SPARE0<sp/>=<sp/>SPARE0<sp/>*<sp/>SPARE1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER2_NV,<sp/>GL_ALPHA,<sp/>GL_VARIABLE_A_NV,<sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SPARE0_NV,<sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_BLUE<sp/>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER2_NV,<sp/>GL_ALPHA,<sp/>GL_VARIABLE_B_NV,<sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SPARE1_NV,<sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_BLUE<sp/>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerOutputNV(<sp/>GL_COMBINER2_NV,<sp/>GL_ALPHA,<sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SPARE0_NV,<sp/>GL_DISCARD_NV,<sp/>GL_DISCARD_NV,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_NONE,<sp/>GL_NONE,<sp/>GL_FALSE,<sp/>GL_FALSE,<sp/>GL_FALSE<sp/>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>final<sp/>combiner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_D_NV,<sp/>GL_SPARE0_NV,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_A_NV,<sp/>GL_ZERO,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_B_NV,<sp/>GL_ZERO,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_C_NV,<sp/>GL_ZERO,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_G_NV,<sp/>GL_SPARE0_NV,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_ALPHA<sp/>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="138"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="139"><highlight class="comment">RB_NV20_DI_BumpAndLightPass</highlight></codeline>
<codeline lineno="140"><highlight class="comment"></highlight></codeline>
<codeline lineno="141"><highlight class="comment">We<sp/>are<sp/>going<sp/>to<sp/>write<sp/>alpha<sp/>as<sp/>light<sp/>falloff<sp/>*<sp/>(<sp/>bump<sp/>dot<sp/>light<sp/>)<sp/>*<sp/>lightProjection</highlight></codeline>
<codeline lineno="142"><highlight class="comment">If<sp/>the<sp/>light<sp/>isn&apos;t<sp/>a<sp/>monoLightShader,<sp/>the<sp/>lightProjection<sp/>will<sp/>be<sp/>skipped,<sp/>because</highlight></codeline>
<codeline lineno="143"><highlight class="comment">it<sp/>will<sp/>have<sp/>to<sp/>be<sp/>done<sp/>on<sp/>an<sp/>itterated<sp/>basis</highlight></codeline>
<codeline lineno="144"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="145"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RB_NV20_DI_BumpAndLightPass(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdraw_interaction__t" kindref="compound">drawInteraction_t</ref><sp/>*din,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>monoLightShader<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>RB_LogComment(<sp/></highlight><highlight class="stringliteral">&quot;----------<sp/>RB_NV_BumpAndLightPass<sp/>----------\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>GL_State(<sp/>GLS_COLORMASK<sp/>|<sp/>GLS_DEPTHMASK<sp/>|<sp/>backEnd.depthFunc<sp/>);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>texture<sp/>0<sp/>is<sp/>the<sp/>normalization<sp/>cube<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GL_TEXTURE0_ARB<sp/>will<sp/>be<sp/>the<sp/>normalized<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>towards<sp/>the<sp/>light<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS_X</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTexture(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>qglEnableClientState(<sp/>GL_TEXTURE_COORD_ARRAY<sp/>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTextureNoClient(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>din-&gt;ambientLight<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>globalImages-&gt;ambientNormalMap-&gt;Bind();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>globalImages-&gt;normalCubeMapImage-&gt;Bind();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>texture<sp/>1<sp/>will<sp/>be<sp/>the<sp/>per-surface<sp/>bump<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS_X</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTexture(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>qglEnableClientState(<sp/>GL_TEXTURE_COORD_ARRAY<sp/>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTextureNoClient(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>din-&gt;bumpImage-&gt;Bind();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>texture<sp/>2<sp/>will<sp/>be<sp/>the<sp/>light<sp/>falloff<sp/>texture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS_X</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTexture(<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>qglEnableClientState(<sp/>GL_TEXTURE_COORD_ARRAY<sp/>);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="180"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTextureNoClient(<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>din-&gt;lightFalloffImage-&gt;Bind();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>texture<sp/>3<sp/>will<sp/>be<sp/>the<sp/>light<sp/>projection<sp/>texture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS_X</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTexture(<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>qglEnableClientState(<sp/>GL_TEXTURE_COORD_ARRAY<sp/>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTextureNoClient(<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>monoLightShader<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>din-&gt;lightImage-&gt;Bind();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>projected<sp/>texture<sp/>is<sp/>multi-colored,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>need<sp/>to<sp/>do<sp/>it<sp/>in<sp/>subsequent<sp/>passes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>globalImages-&gt;whiteImage-&gt;Bind();</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bind<sp/>our<sp/>&quot;fragment<sp/>program&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>RB_NV20_BumpAndLightFragment();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>qglBindProgramARB(<sp/>GL_VERTEX_PROGRAM_ARB,<sp/>VPROG_NV20_BUMP_AND_LIGHT<sp/>);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>RB_DrawElementsWithCounters(<sp/>din-&gt;surf-&gt;geo<sp/>);</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="209"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="210"><highlight class="comment">RB_NV20_DiffuseColorFragment</highlight></codeline>
<codeline lineno="211"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="212"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RB_NV20_DiffuseColorFragment(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_useCombinerDisplayLists.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglCallList(<sp/>fragmentDisplayListBase<sp/>+<sp/>FPROG_DIFFUSE_COLOR<sp/>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>program<sp/>the<sp/>nvidia<sp/>register<sp/>combiners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerParameteriNV(<sp/>GL_NUM_GENERAL_COMBINERS_NV,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>0<sp/>is<sp/>free,<sp/>so<sp/>we<sp/>always<sp/>do<sp/>the<sp/>multiply<sp/>of<sp/>the<sp/>vertex<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>the<sp/>vertex<sp/>color<sp/>is<sp/>inverted,<sp/>qglCombinerInputNV(GL_VARIABLE_B_NV)<sp/>will<sp/>be<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER0_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_A_NV,<sp/></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_TEXTURE0_ARB,<sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER0_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_B_NV,<sp/></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_PRIMARY_COLOR_NV,<sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerOutputNV(<sp/>GL_COMBINER0_NV,<sp/>GL_RGB,<sp/></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_TEXTURE0_ARB,<sp/>GL_DISCARD_NV,<sp/>GL_DISCARD_NV,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_NONE,<sp/>GL_NONE,<sp/>GL_FALSE,<sp/>GL_FALSE,<sp/>GL_FALSE<sp/>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerOutputNV(<sp/>GL_COMBINER0_NV,<sp/>GL_ALPHA,<sp/></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_DISCARD_NV,<sp/>GL_DISCARD_NV,<sp/>GL_DISCARD_NV,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_NONE,<sp/>GL_NONE,<sp/>GL_FALSE,<sp/>GL_FALSE,<sp/>GL_FALSE<sp/>);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>GL_CONSTANT_COLOR0_NV<sp/>*<sp/>TEXTURE0<sp/>*<sp/>TEXTURE1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_A_NV,<sp/>GL_CONSTANT_COLOR0_NV,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_B_NV,<sp/>GL_E_TIMES_F_NV,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_C_NV,<sp/>GL_ZERO,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_D_NV,<sp/>GL_ZERO,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_E_NV,<sp/>GL_TEXTURE0_ARB,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_F_NV,<sp/>GL_TEXTURE1_ARB,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_G_NV,<sp/>GL_ZERO,</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_ALPHA<sp/>);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="256"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="257"><highlight class="comment">RB_NV20_DI_DiffuseColorPass</highlight></codeline>
<codeline lineno="258"><highlight class="comment"></highlight></codeline>
<codeline lineno="259"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="260"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RB_NV20_DI_DiffuseColorPass(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdraw_interaction__t" kindref="compound">drawInteraction_t</ref><sp/>*din<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>RB_LogComment(<sp/></highlight><highlight class="stringliteral">&quot;----------<sp/>RB_NV20_DiffuseColorPass<sp/>----------\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>GL_State(<sp/>GLS_SRCBLEND_DST_ALPHA<sp/>|<sp/>GLS_DSTBLEND_ONE<sp/>|<sp/>GLS_DEPTHMASK<sp/>|<sp/>GLS_ALPHAMASK<sp/></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>backEnd.depthFunc<sp/>);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>texture<sp/>0<sp/>will<sp/>be<sp/>the<sp/>per-surface<sp/>diffuse<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS_X</highlight></codeline>
<codeline lineno="269"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTexture(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>qglEnableClientState(<sp/>GL_TEXTURE_COORD_ARRAY<sp/>);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTextureNoClient(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="274"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>din-&gt;diffuseImage-&gt;Bind();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>texture<sp/>1<sp/>will<sp/>be<sp/>the<sp/>light<sp/>projected<sp/>texture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS_X</highlight></codeline>
<codeline lineno="278"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTexture(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>qglEnableClientState(<sp/>GL_TEXTURE_COORD_ARRAY<sp/>);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTextureNoClient(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="283"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>din-&gt;lightImage-&gt;Bind();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>texture<sp/>2<sp/>is<sp/>disabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS_X</highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTexture(<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>qglDisableClientState(<sp/>GL_TEXTURE_COORD_ARRAY<sp/>);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="290"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTextureNoClient(<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="292"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>globalImages-&gt;BindNull();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>texture<sp/>3<sp/>is<sp/>disabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS_X</highlight></codeline>
<codeline lineno="296"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTexture(<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>qglDisableClientState(<sp/>GL_TEXTURE_COORD_ARRAY<sp/>);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="299"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTextureNoClient(<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="301"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>globalImages-&gt;BindNull();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bind<sp/>our<sp/>&quot;fragment<sp/>program&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>RB_NV20_DiffuseColorFragment();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>override<sp/>one<sp/>parameter<sp/>for<sp/>inverted<sp/>vertex<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>din-&gt;vertexColor<sp/>==<sp/>SVC_INVERSE_MODULATE<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER0_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_B_NV,<sp/></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_PRIMARY_COLOR_NV,<sp/>GL_UNSIGNED_INVERT_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>qglBindProgramARB(<sp/>GL_VERTEX_PROGRAM_ARB,<sp/>VPROG_NV20_DIFFUSE_COLOR<sp/>);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>RB_DrawElementsWithCounters(<sp/>din-&gt;surf-&gt;geo<sp/>);</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="319"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="320"><highlight class="comment">RB_NV20_SpecularColorFragment</highlight></codeline>
<codeline lineno="321"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="322"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RB_NV20_SpecularColorFragment(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_useCombinerDisplayLists.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglCallList(<sp/>fragmentDisplayListBase<sp/>+<sp/>FPROG_SPECULAR_COLOR<sp/>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>program<sp/>the<sp/>nvidia<sp/>register<sp/>combiners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerParameteriNV(<sp/>GL_NUM_GENERAL_COMBINERS_NV,<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>want<sp/>GL_CONSTANT_COLOR1_NV<sp/>*<sp/>PRIMARY_COLOR<sp/>*<sp/>TEXTURE2<sp/>*<sp/>TEXTURE3<sp/>*<sp/>specular(<sp/>TEXTURE0<sp/>*<sp/>TEXTURE1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>0<sp/>rgb<sp/>performs<sp/>the<sp/>dot<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GL_SPARE0_NV<sp/>=<sp/>(<sp/>TEXTURE0<sp/>dot<sp/>TEXTURE1<sp/>-<sp/>0.5<sp/>)<sp/>*<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TEXTURE2<sp/>=<sp/>TEXTURE2<sp/>*<sp/>PRIMARY_COLOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>scale<sp/>and<sp/>bias<sp/>steepen<sp/>the<sp/>specular<sp/>curve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER0_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_A_NV,<sp/></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_TEXTURE1_ARB,<sp/>GL_EXPAND_NORMAL_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER0_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_B_NV,<sp/></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_TEXTURE0_ARB,<sp/>GL_EXPAND_NORMAL_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerOutputNV(<sp/>GL_COMBINER0_NV,<sp/>GL_RGB,<sp/></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SPARE0_NV,<sp/>GL_DISCARD_NV,<sp/>GL_DISCARD_NV,</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SCALE_BY_TWO_NV,<sp/>GL_BIAS_BY_NEGATIVE_ONE_HALF_NV,<sp/>GL_TRUE,<sp/>GL_FALSE,<sp/>GL_FALSE<sp/>);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>0<sp/>alpha<sp/>does<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>1<sp/>color<sp/>takes<sp/>bump<sp/>*<sp/>bump</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GL_SPARE0_NV<sp/>=<sp/>(<sp/>GL_SPARE0_NV<sp/>*<sp/>GL_SPARE0_NV<sp/>-<sp/>0.5<sp/>)<sp/>*<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>scale<sp/>and<sp/>bias<sp/>steepen<sp/>the<sp/>specular<sp/>curve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER1_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_A_NV,<sp/></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SPARE0_NV,<sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER1_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_B_NV,<sp/></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SPARE0_NV,<sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerOutputNV(<sp/>GL_COMBINER1_NV,<sp/>GL_RGB,<sp/></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SPARE0_NV,<sp/>GL_DISCARD_NV,<sp/>GL_DISCARD_NV,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SCALE_BY_TWO_NV,<sp/>GL_BIAS_BY_NEGATIVE_ONE_HALF_NV,<sp/>GL_FALSE,<sp/>GL_FALSE,<sp/>GL_FALSE<sp/>);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>1<sp/>alpha<sp/>does<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>2<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GL_SPARE0_NV<sp/>=<sp/>GL_SPARE0_NV<sp/>*<sp/>TEXTURE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SECONDARY_COLOR<sp/>=<sp/>CONSTANT_COLOR<sp/>*<sp/>TEXTURE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER2_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_A_NV,<sp/></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SPARE0_NV,<sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER2_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_B_NV,<sp/></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_TEXTURE3_ARB,<sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER2_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_C_NV,<sp/></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_CONSTANT_COLOR1_NV,<sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER2_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_D_NV,<sp/></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_TEXTURE2_ARB,<sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerOutputNV(<sp/>GL_COMBINER2_NV,<sp/>GL_RGB,<sp/></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SPARE0_NV,<sp/>GL_SECONDARY_COLOR_NV,<sp/>GL_DISCARD_NV,</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_NONE,<sp/>GL_NONE,<sp/>GL_FALSE,<sp/>GL_FALSE,<sp/>GL_FALSE<sp/>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>2<sp/>alpha<sp/>does<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>3<sp/>scales<sp/>the<sp/>texture<sp/>by<sp/>the<sp/>vertex<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER3_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_A_NV,<sp/></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SECONDARY_COLOR_NV,<sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER3_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_B_NV,<sp/></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_PRIMARY_COLOR_NV,<sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerOutputNV(<sp/>GL_COMBINER3_NV,<sp/>GL_RGB,<sp/></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SECONDARY_COLOR_NV,<sp/>GL_DISCARD_NV,<sp/>GL_DISCARD_NV,</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_NONE,<sp/>GL_NONE,<sp/>GL_FALSE,<sp/>GL_FALSE,<sp/>GL_FALSE<sp/>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>3<sp/>alpha<sp/>does<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>final<sp/>combiner<sp/>=<sp/>GL_SPARE0_NV<sp/>*<sp/>SECONDARY_COLOR<sp/>+<sp/>PRIMARY_COLOR<sp/>*<sp/>SECONDARY_COLOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_A_NV,<sp/>GL_SPARE0_NV,</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_B_NV,<sp/>GL_SECONDARY_COLOR_NV,</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_C_NV,<sp/>GL_ZERO,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_D_NV,<sp/>GL_E_TIMES_F_NV,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_E_NV,<sp/>GL_SPARE0_NV,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_F_NV,<sp/>GL_SECONDARY_COLOR_NV,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_G_NV,<sp/>GL_ZERO,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_ALPHA<sp/>);</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="409"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="410"><highlight class="comment">RB_NV20_DI_SpecularColorPass</highlight></codeline>
<codeline lineno="411"><highlight class="comment"></highlight></codeline>
<codeline lineno="412"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="413"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RB_NV20_DI_SpecularColorPass(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdraw_interaction__t" kindref="compound">drawInteraction_t</ref><sp/>*din<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>RB_LogComment(<sp/></highlight><highlight class="stringliteral">&quot;----------<sp/>RB_NV20_SpecularColorPass<sp/>----------\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>GL_State(<sp/>GLS_SRCBLEND_DST_ALPHA<sp/>|<sp/>GLS_DSTBLEND_ONE<sp/>|<sp/>GLS_DEPTHMASK<sp/>|<sp/>GLS_ALPHAMASK</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>backEnd.depthFunc<sp/>);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>texture<sp/>0<sp/>is<sp/>the<sp/>normalization<sp/>cube<sp/>map<sp/>for<sp/>the<sp/>half<sp/>angle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS_X</highlight></codeline>
<codeline lineno="422"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTexture(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>qglEnableClientState(<sp/>GL_TEXTURE_COORD_ARRAY<sp/>);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="425"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTextureNoClient(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="427"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>globalImages-&gt;normalCubeMapImage-&gt;Bind();</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>texture<sp/>1<sp/>will<sp/>be<sp/>the<sp/>per-surface<sp/>bump<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS_X</highlight></codeline>
<codeline lineno="431"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTexture(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>qglEnableClientState(<sp/>GL_TEXTURE_COORD_ARRAY<sp/>);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="434"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTextureNoClient(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="436"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>din-&gt;bumpImage-&gt;Bind();</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>texture<sp/>2<sp/>will<sp/>be<sp/>the<sp/>per-surface<sp/>specular<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS_X</highlight></codeline>
<codeline lineno="440"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTexture(<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>qglEnableClientState(<sp/>GL_TEXTURE_COORD_ARRAY<sp/>);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="443"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTextureNoClient(<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="445"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>din-&gt;specularImage-&gt;Bind();</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>texture<sp/>3<sp/>will<sp/>be<sp/>the<sp/>light<sp/>projected<sp/>texture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS_X</highlight></codeline>
<codeline lineno="449"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTexture(<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>qglEnableClientState(<sp/>GL_TEXTURE_COORD_ARRAY<sp/>);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="452"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTextureNoClient(<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="454"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>din-&gt;lightImage-&gt;Bind();</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bind<sp/>our<sp/>&quot;fragment<sp/>program&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>RB_NV20_SpecularColorFragment();</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>override<sp/>one<sp/>parameter<sp/>for<sp/>inverted<sp/>vertex<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>din-&gt;vertexColor<sp/>==<sp/>SVC_INVERSE_MODULATE<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER3_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_B_NV,<sp/></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_PRIMARY_COLOR_NV,<sp/>GL_UNSIGNED_INVERT_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>qglBindProgramARB(<sp/>GL_VERTEX_PROGRAM_ARB,<sp/>VPROG_NV20_SPECULAR_COLOR<sp/>);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>RB_DrawElementsWithCounters(<sp/>din-&gt;surf-&gt;geo<sp/>);</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="473"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="474"><highlight class="comment">RB_NV20_DiffuseAndSpecularColorFragment</highlight></codeline>
<codeline lineno="475"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="476"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RB_NV20_DiffuseAndSpecularColorFragment(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_useCombinerDisplayLists.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglCallList(<sp/>fragmentDisplayListBase<sp/>+<sp/>FPROG_DIFFUSE_AND_SPECULAR_COLOR<sp/>);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>program<sp/>the<sp/>nvidia<sp/>register<sp/>combiners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerParameteriNV(<sp/>GL_NUM_GENERAL_COMBINERS_NV,<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GL_CONSTANT_COLOR0_NV<sp/>will<sp/>be<sp/>the<sp/>diffuse<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GL_CONSTANT_COLOR1_NV<sp/>will<sp/>be<sp/>the<sp/>specular<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>0<sp/>rgb<sp/>performs<sp/>the<sp/>dot<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GL_SECONDARY_COLOR_NV<sp/>=<sp/>(<sp/>TEXTURE0<sp/>dot<sp/>TEXTURE1<sp/>-<sp/>0.5<sp/>)<sp/>*<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>scale<sp/>and<sp/>bias<sp/>steepen<sp/>the<sp/>specular<sp/>curve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER0_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_A_NV,<sp/></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_TEXTURE1_ARB,<sp/>GL_EXPAND_NORMAL_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER0_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_B_NV,<sp/></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_TEXTURE0_ARB,<sp/>GL_EXPAND_NORMAL_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerOutputNV(<sp/>GL_COMBINER0_NV,<sp/>GL_RGB,<sp/></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SECONDARY_COLOR_NV,<sp/>GL_DISCARD_NV,<sp/>GL_DISCARD_NV,</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SCALE_BY_TWO_NV,<sp/>GL_BIAS_BY_NEGATIVE_ONE_HALF_NV,<sp/>GL_TRUE,<sp/>GL_FALSE,<sp/>GL_FALSE<sp/>);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>0<sp/>alpha<sp/>does<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>1<sp/>color<sp/>takes<sp/>bump<sp/>*<sp/>bump</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PRIMARY_COLOR<sp/>=<sp/>(<sp/>GL_SECONDARY_COLOR_NV<sp/>*<sp/>GL_SECONDARY_COLOR_NV<sp/>-<sp/>0.5<sp/>)<sp/>*<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>scale<sp/>and<sp/>bias<sp/>steepen<sp/>the<sp/>specular<sp/>curve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER1_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_A_NV,<sp/></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SECONDARY_COLOR_NV,<sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER1_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_B_NV,<sp/></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SECONDARY_COLOR_NV,<sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerOutputNV(<sp/>GL_COMBINER1_NV,<sp/>GL_RGB,<sp/></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SECONDARY_COLOR_NV,<sp/>GL_DISCARD_NV,<sp/>GL_DISCARD_NV,</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SCALE_BY_TWO_NV,<sp/>GL_BIAS_BY_NEGATIVE_ONE_HALF_NV,<sp/>GL_FALSE,<sp/>GL_FALSE,<sp/>GL_FALSE<sp/>);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>1<sp/>alpha<sp/>does<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>2<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PRIMARY_COLOR<sp/>=<sp/>(<sp/>PRIMARY_COLOR<sp/>*<sp/>TEXTURE3<sp/>)<sp/>*<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SPARE0<sp/>=<sp/>1.0<sp/>*<sp/>1.0<sp/>(needed<sp/>for<sp/>final<sp/>combiner)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER2_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_A_NV,<sp/></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SECONDARY_COLOR_NV,<sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER2_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_B_NV,<sp/></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_TEXTURE3_ARB,<sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER2_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_C_NV,<sp/></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_ZERO,<sp/>GL_UNSIGNED_INVERT_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerInputNV(<sp/>GL_COMBINER2_NV,<sp/>GL_RGB,<sp/>GL_VARIABLE_D_NV,<sp/></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_ZERO,<sp/>GL_UNSIGNED_INVERT_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerOutputNV(<sp/>GL_COMBINER2_NV,<sp/>GL_RGB,<sp/></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SECONDARY_COLOR_NV,<sp/>GL_SPARE0_NV,<sp/>GL_DISCARD_NV,</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SCALE_BY_TWO_NV,<sp/>GL_NONE,<sp/>GL_FALSE,<sp/>GL_FALSE,<sp/>GL_FALSE<sp/>);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>2<sp/>alpha<sp/>does<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>final<sp/>combiner<sp/>=<sp/>TEXTURE2_ARB<sp/>*<sp/>CONSTANT_COLOR0_NV<sp/>+<sp/>PRIMARY_COLOR_NV<sp/>*<sp/>CONSTANT_COLOR1_NV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>alpha<sp/>=<sp/>GL_ZERO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_A_NV,<sp/>GL_CONSTANT_COLOR1_NV,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_B_NV,<sp/>GL_SECONDARY_COLOR_NV,</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_C_NV,<sp/>GL_ZERO,</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_D_NV,<sp/>GL_E_TIMES_F_NV,</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_E_NV,<sp/>GL_TEXTURE2_ARB,</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_F_NV,<sp/>GL_CONSTANT_COLOR0_NV,</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_RGB<sp/>);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>qglFinalCombinerInputNV(<sp/>GL_VARIABLE_G_NV,<sp/>GL_ZERO,</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_IDENTITY_NV,<sp/>GL_ALPHA<sp/>);</highlight></codeline>
<codeline lineno="548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="552"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="553"><highlight class="comment">RB_NV20_DI_DiffuseAndSpecularColorPass</highlight></codeline>
<codeline lineno="554"><highlight class="comment"></highlight></codeline>
<codeline lineno="555"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="556"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RB_NV20_DI_DiffuseAndSpecularColorPass(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdraw_interaction__t" kindref="compound">drawInteraction_t</ref><sp/>*din<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>RB_LogComment(<sp/></highlight><highlight class="stringliteral">&quot;----------<sp/>RB_NV20_DI_DiffuseAndSpecularColorPass<sp/>----------\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>GL_State(<sp/>GLS_SRCBLEND_DST_ALPHA<sp/>|<sp/>GLS_DSTBLEND_ONE<sp/>|<sp/>GLS_DEPTHMASK<sp/>|<sp/>backEnd.depthFunc<sp/>);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>texture<sp/>0<sp/>is<sp/>the<sp/>normalization<sp/>cube<sp/>map<sp/>for<sp/>the<sp/>half<sp/>angle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="comment">//<sp/>still<sp/>bound<sp/>from<sp/>RB_NV_BumpAndLightPass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>GL_SelectTextureNoClient(<sp/>0<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>GL_Bind(<sp/>tr.normalCubeMapImage<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>texture<sp/>1<sp/>is<sp/>the<sp/>per-surface<sp/>bump<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="comment">//<sp/>still<sp/>bound<sp/>from<sp/>RB_NV_BumpAndLightPass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>GL_SelectTextureNoClient(<sp/>1<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>GL_Bind(<sp/>din-&gt;bumpImage<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>texture<sp/>2<sp/>is<sp/>the<sp/>per-surface<sp/>diffuse<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS_X</highlight></codeline>
<codeline lineno="574"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTexture(<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>qglEnableClientState(<sp/>GL_TEXTURE_COORD_ARRAY<sp/>);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="577"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTextureNoClient(<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="579"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>din-&gt;diffuseImage-&gt;Bind();</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>texture<sp/>3<sp/>is<sp/>the<sp/>per-surface<sp/>specular<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS_X</highlight></codeline>
<codeline lineno="583"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTexture(<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>qglEnableClientState(<sp/>GL_TEXTURE_COORD_ARRAY<sp/>);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="586"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTextureNoClient(<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="588"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>din-&gt;specularImage-&gt;Bind();</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bind<sp/>our<sp/>&quot;fragment<sp/>program&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>RB_NV20_DiffuseAndSpecularColorFragment();</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draw<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>qglBindProgramARB(<sp/>GL_VERTEX_PROGRAM_ARB,<sp/>VPROG_NV20_DIFFUSE_AND_SPECULAR_COLOR<sp/>);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>RB_DrawElementsWithCounters(<sp/>din-&gt;surf-&gt;geo<sp/>);</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="600"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="601"><highlight class="comment">RB_NV20_DrawInteraction</highlight></codeline>
<codeline lineno="602"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="603"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RB_NV20_DrawInteraction(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdraw_interaction__t" kindref="compound">drawInteraction_t</ref><sp/>*din<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/>*surf<sp/>=<sp/>din-&gt;surf;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>all<sp/>the<sp/>vertex<sp/>program<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>qglProgramEnvParameter4fvARB(<sp/>GL_VERTEX_PROGRAM_ARB,<sp/>PP_LIGHT_ORIGIN,<sp/>din-&gt;localLightOrigin.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>qglProgramEnvParameter4fvARB(<sp/>GL_VERTEX_PROGRAM_ARB,<sp/>PP_VIEW_ORIGIN,<sp/>din-&gt;localViewOrigin.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>qglProgramEnvParameter4fvARB(<sp/>GL_VERTEX_PROGRAM_ARB,<sp/>PP_LIGHT_PROJECT_S,<sp/>din-&gt;lightProjection[0].ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>qglProgramEnvParameter4fvARB(<sp/>GL_VERTEX_PROGRAM_ARB,<sp/>PP_LIGHT_PROJECT_T,<sp/>din-&gt;lightProjection[1].ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>qglProgramEnvParameter4fvARB(<sp/>GL_VERTEX_PROGRAM_ARB,<sp/>PP_LIGHT_PROJECT_Q,<sp/>din-&gt;lightProjection[2].ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>qglProgramEnvParameter4fvARB(<sp/>GL_VERTEX_PROGRAM_ARB,<sp/>PP_LIGHT_FALLOFF_S,<sp/>din-&gt;lightProjection[3].ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>qglProgramEnvParameter4fvARB(<sp/>GL_VERTEX_PROGRAM_ARB,<sp/>PP_BUMP_MATRIX_S,<sp/>din-&gt;bumpMatrix[0].ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>qglProgramEnvParameter4fvARB(<sp/>GL_VERTEX_PROGRAM_ARB,<sp/>PP_BUMP_MATRIX_T,<sp/>din-&gt;bumpMatrix[1].ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>qglProgramEnvParameter4fvARB(<sp/>GL_VERTEX_PROGRAM_ARB,<sp/>PP_DIFFUSE_MATRIX_S,<sp/>din-&gt;diffuseMatrix[0].ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>qglProgramEnvParameter4fvARB(<sp/>GL_VERTEX_PROGRAM_ARB,<sp/>PP_DIFFUSE_MATRIX_T,<sp/>din-&gt;diffuseMatrix[1].ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>qglProgramEnvParameter4fvARB(<sp/>GL_VERTEX_PROGRAM_ARB,<sp/>PP_SPECULAR_MATRIX_S,<sp/>din-&gt;specularMatrix[0].ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>qglProgramEnvParameter4fvARB(<sp/>GL_VERTEX_PROGRAM_ARB,<sp/>PP_SPECULAR_MATRIX_T,<sp/>din-&gt;specularMatrix[1].ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>constant<sp/>colors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerParameterfvNV(<sp/>GL_CONSTANT_COLOR0_NV,<sp/>din-&gt;diffuseColor.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>qglCombinerParameterfvNV(<sp/>GL_CONSTANT_COLOR1_NV,<sp/>din-&gt;specularColor.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vertex<sp/>color<sp/>passes<sp/>should<sp/>be<sp/>pretty<sp/>rare<sp/>(cross-faded<sp/>bump<sp/>map<sp/>surfaces),<sp/>so<sp/>always</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>them<sp/>down<sp/>as<sp/>three-passes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>din-&gt;vertexColor<sp/>!=<sp/>SVC_IGNORE<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglEnableClientState(<sp/>GL_COLOR_ARRAY<sp/>);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RB_NV20_DI_BumpAndLightPass(<sp/>din,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RB_NV20_DI_DiffuseColorPass(<sp/>din<sp/>);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RB_NV20_DI_SpecularColorPass(<sp/>din<sp/>);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglDisableClientState(<sp/>GL_COLOR_ARRAY<sp/>);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>qglColor3f(<sp/>1,<sp/>1,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>an<sp/>ideal<sp/>card,<sp/>we<sp/>would<sp/>now<sp/>just<sp/>bind<sp/>the<sp/>textures<sp/>and<sp/>call<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>single<sp/>pass<sp/>vertex<sp/>/<sp/>fragment<sp/>program,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>NV20,<sp/>we<sp/>need<sp/>to<sp/>decide<sp/>which<sp/>single<sp/>/<sp/>dual<sp/>/<sp/>tripple<sp/>pass<sp/>set<sp/>of<sp/>programs<sp/>to<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ambient<sp/>light<sp/>could<sp/>be<sp/>done<sp/>as<sp/>a<sp/>single<sp/>pass<sp/>if<sp/>we<sp/>want<sp/>to<sp/>optimize<sp/>for<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>monochrome<sp/>light<sp/>is<sp/>two<sp/>passes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>internalFormat<sp/>=<sp/>din-&gt;lightImage-&gt;internalFormat;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>r_useNV20MonoLights.GetInteger()<sp/>==<sp/>2<sp/>)<sp/>||<sp/></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>din-&gt;lightImage-&gt;isMonochrome<sp/>&amp;&amp;<sp/>r_useNV20MonoLights.GetInteger()<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>a<sp/>two-pass<sp/>rendering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RB_NV20_DI_BumpAndLightPass(<sp/>din,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RB_NV20_DI_DiffuseAndSpecularColorPass(<sp/>din<sp/>);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>general<sp/>case<sp/>is<sp/>three<sp/>passes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(<sp/>bump<sp/>dot<sp/>lightDir<sp/>)<sp/>*<sp/>lightFalloff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>diffuse<sp/>*<sp/>lightProject</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>specular<sp/>*<sp/>(<sp/>bump<sp/>dot<sp/>halfAngle<sp/>extended<sp/>)<sp/>*<sp/>lightProject</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RB_NV20_DI_BumpAndLightPass(<sp/>din,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RB_NV20_DI_DiffuseColorPass(<sp/>din<sp/>);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RB_NV20_DI_SpecularColorPass(<sp/>din<sp/>);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="664"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="665"><highlight class="comment">RB_NV20_CreateDrawInteractions</highlight></codeline>
<codeline lineno="666"><highlight class="comment"></highlight></codeline>
<codeline lineno="667"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="668"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RB_NV20_CreateDrawInteractions(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdraw_surf__s" kindref="compound">drawSurf_t</ref><sp/>*surf<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!surf<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>qglEnable(<sp/>GL_VERTEX_PROGRAM_ARB<sp/>);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>qglEnable(<sp/>GL_REGISTER_COMBINERS_NV<sp/>);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS_X</highlight></codeline>
<codeline lineno="678"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTexture(0);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>qglDisableClientState(<sp/>GL_TEXTURE_COORD_ARRAY<sp/>);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="681"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>qglDisableClientState(<sp/>GL_TEXTURE_COORD_ARRAY<sp/>);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>qglEnableVertexAttribArrayARB(<sp/>8<sp/>);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>qglEnableVertexAttribArrayARB(<sp/>9<sp/>);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>qglEnableVertexAttribArrayARB(<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>qglEnableVertexAttribArrayARB(<sp/>11<sp/>);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="688"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>surf<sp/>;<sp/>surf=surf-&gt;nextOnLight<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>vertex<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref><sp/><sp/>*ac<sp/>=<sp/>(<ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref><sp/>*)vertexCache.Position(<sp/>surf-&gt;geo-&gt;ambientCache<sp/>);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglColorPointer(<sp/>4,<sp/>GL_UNSIGNED_BYTE,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref><sp/>),<sp/>ac-&gt;color<sp/>);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS_X</highlight></codeline>
<codeline lineno="694"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SelectTexture(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglTexCoordPointer(<sp/>2,<sp/>GL_FLOAT,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref><sp/>),<sp/>ac-&gt;st.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SelectTexture(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglTexCoordPointer(<sp/>3,<sp/>GL_FLOAT,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref><sp/>),<sp/>ac-&gt;tangents[0].ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SelectTexture(<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglTexCoordPointer(<sp/>3,<sp/>GL_FLOAT,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref><sp/>),<sp/>ac-&gt;tangents[1].ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SelectTexture(<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglTexCoordPointer(<sp/>3,<sp/>GL_FLOAT,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref><sp/>),<sp/>ac-&gt;normal.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_SelectTexture(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="704"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglVertexAttribPointerARB(<sp/>11,<sp/>3,<sp/>GL_FLOAT,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref><sp/>),<sp/>ac-&gt;normal.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglVertexAttribPointerARB(<sp/>10,<sp/>3,<sp/>GL_FLOAT,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref><sp/>),<sp/>ac-&gt;tangents[1].ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglVertexAttribPointerARB(<sp/>9,<sp/>3,<sp/>GL_FLOAT,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref><sp/>),<sp/>ac-&gt;tangents[0].ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglVertexAttribPointerARB(<sp/>8,<sp/>2,<sp/>GL_FLOAT,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref><sp/>),<sp/>ac-&gt;st.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="709"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglVertexPointer(<sp/>3,<sp/>GL_FLOAT,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="classid_draw_vert" kindref="compound">idDrawVert</ref><sp/>),<sp/>ac-&gt;xyz.ToFloatPtr()<sp/>);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RB_CreateSingleDrawInteractions(<sp/>surf,<sp/>RB_NV20_DrawInteraction<sp/>);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MACOS_X</highlight></codeline>
<codeline lineno="715"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>qglDisableVertexAttribArrayARB(<sp/>8<sp/>);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>qglDisableVertexAttribArrayARB(<sp/>9<sp/>);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>qglDisableVertexAttribArrayARB(<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>qglDisableVertexAttribArrayARB(<sp/>11<sp/>);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="720"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disable<sp/>features</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MACOS_X</highlight></codeline>
<codeline lineno="723"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTexture(<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>globalImages-&gt;BindNull();</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>qglDisableClientState(<sp/>GL_TEXTURE_COORD_ARRAY<sp/>);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTexture(<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>globalImages-&gt;BindNull();</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>qglDisableClientState(<sp/>GL_TEXTURE_COORD_ARRAY<sp/>);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTexture(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>globalImages-&gt;BindNull();</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>qglDisableClientState(<sp/>GL_TEXTURE_COORD_ARRAY<sp/>);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="735"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTextureNoClient(<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>globalImages-&gt;BindNull();</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTextureNoClient(<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>globalImages-&gt;BindNull();</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTextureNoClient(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>globalImages-&gt;BindNull();</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="744"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>backEnd.glState.currenttmu<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>GL_SelectTexture(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>qglEnableClientState(<sp/>GL_TEXTURE_COORD_ARRAY<sp/>);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>qglDisable(<sp/>GL_VERTEX_PROGRAM_ARB<sp/>);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>qglDisable(<sp/>GL_REGISTER_COMBINERS_NV<sp/>);</highlight></codeline>
<codeline lineno="752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="comment">//======================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="759"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="760"><highlight class="comment">RB_NV20_DrawInteractions</highlight></codeline>
<codeline lineno="761"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="762"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RB_NV20_DrawInteractions(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structview_light__s" kindref="compound">viewLight_t</ref><sp/><sp/><sp/><sp/><sp/>*vLight;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>light,<sp/>perform<sp/>adding<sp/>and<sp/>shadowing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>vLight<sp/>=<sp/>backEnd.viewDef-&gt;viewLights<sp/>;<sp/>vLight<sp/>;<sp/>vLight<sp/>=<sp/>vLight-&gt;next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>fogging<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vLight-&gt;lightShader-&gt;IsFogLight()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vLight-&gt;lightShader-&gt;IsBlendLight()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!vLight-&gt;localInteractions<sp/>&amp;&amp;<sp/>!vLight-&gt;globalInteractions</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!vLight-&gt;translucentInteractions<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backEnd.vLight<sp/>=<sp/>vLight;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RB_LogComment(<sp/></highlight><highlight class="stringliteral">&quot;----------<sp/>RB_RenderViewLight<sp/>0x%p<sp/>----------\n&quot;</highlight><highlight class="normal">,<sp/>vLight<sp/>);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>stencil<sp/>buffer<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vLight-&gt;globalShadows<sp/>||<sp/>vLight-&gt;localShadows<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backEnd.currentScissor<sp/>=<sp/>vLight-&gt;scissorRect;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_useScissor.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglScissor(<sp/>backEnd.viewDef-&gt;viewport.x1<sp/>+<sp/>backEnd.currentScissor.x1,<sp/></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backEnd.viewDef-&gt;viewport.y1<sp/>+<sp/>backEnd.currentScissor.y1,</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backEnd.currentScissor.x2<sp/>+<sp/>1<sp/>-<sp/>backEnd.currentScissor.x1,</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backEnd.currentScissor.y2<sp/>+<sp/>1<sp/>-<sp/>backEnd.currentScissor.y1<sp/>);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglClear(<sp/>GL_STENCIL_BUFFER_BIT<sp/>);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>shadows,<sp/>so<sp/>no<sp/>need<sp/>to<sp/>read<sp/>or<sp/>write<sp/>the<sp/>stencil<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>might<sp/>in<sp/>theory<sp/>want<sp/>to<sp/>use<sp/>GL_ALWAYS<sp/>instead<sp/>of<sp/>disabling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>completely,<sp/>to<sp/>satisfy<sp/>the<sp/>invarience<sp/>rules</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglStencilFunc(<sp/>GL_ALWAYS,<sp/>128,<sp/>255<sp/>);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backEnd.depthFunc<sp/>=<sp/>GLS_DEPTHFUNC_EQUAL;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_useShadowVertexProgram.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglEnable(<sp/>GL_VERTEX_PROGRAM_ARB<sp/>);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglBindProgramARB(<sp/>GL_VERTEX_PROGRAM_ARB,<sp/>VPROG_STENCIL_SHADOW<sp/>);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RB_StencilShadowPass(<sp/>vLight-&gt;globalShadows<sp/>);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RB_NV20_CreateDrawInteractions(<sp/>vLight-&gt;localInteractions<sp/>);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglEnable(<sp/>GL_VERTEX_PROGRAM_ARB<sp/>);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglBindProgramARB(<sp/>GL_VERTEX_PROGRAM_ARB,<sp/>VPROG_STENCIL_SHADOW<sp/>);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RB_StencilShadowPass(<sp/>vLight-&gt;localShadows<sp/>);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RB_NV20_CreateDrawInteractions(<sp/>vLight-&gt;globalInteractions<sp/>);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglDisable(<sp/>GL_VERTEX_PROGRAM_ARB<sp/>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>weren&apos;t<sp/>any<sp/>globalInteractions,<sp/>it<sp/>would<sp/>have<sp/>stayed<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RB_StencilShadowPass(<sp/>vLight-&gt;globalShadows<sp/>);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RB_NV20_CreateDrawInteractions(<sp/>vLight-&gt;localInteractions<sp/>);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RB_StencilShadowPass(<sp/>vLight-&gt;localShadows<sp/>);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RB_NV20_CreateDrawInteractions(<sp/>vLight-&gt;globalInteractions<sp/>);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>translucent<sp/>surfaces<sp/>never<sp/>get<sp/>stencil<sp/>shadowed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r_skipTranslucent.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qglStencilFunc(<sp/>GL_ALWAYS,<sp/>128,<sp/>255<sp/>);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backEnd.depthFunc<sp/>=<sp/>GLS_DEPTHFUNC_LESS;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RB_NV20_CreateDrawInteractions(<sp/>vLight-&gt;translucentInteractions<sp/>);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backEnd.depthFunc<sp/>=<sp/>GLS_DEPTHFUNC_EQUAL;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="comment">//=======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="839"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="840"><highlight class="comment">R_NV20_Init</highlight></codeline>
<codeline lineno="841"><highlight class="comment"></highlight></codeline>
<codeline lineno="842"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="843"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>R_NV20_Init(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>glConfig.allowNV20Path<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;----------<sp/>R_NV20_Init<sp/>----------\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!glConfig.registerCombinersAvailable<sp/>||<sp/>!glConfig.ARBVertexProgramAvailable<sp/>||<sp/>glConfig.maxTextureUnits<sp/>&lt;<sp/>4<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>available.\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>GL_CheckErrors();</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>our<sp/>&quot;fragment<sp/>program&quot;<sp/>display<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>fragmentDisplayListBase<sp/>=<sp/>qglGenLists(<sp/>FPROG_NUM_FRAGMENT_PROGRAMS<sp/>);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>force<sp/>them<sp/>to<sp/>issue<sp/>commands<sp/>to<sp/>build<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>r_useCombinerDisplayLists.GetBool();</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>r_useCombinerDisplayLists.SetBool(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>qglNewList(<sp/>fragmentDisplayListBase<sp/>+<sp/>FPROG_BUMP_AND_LIGHT,<sp/>GL_COMPILE<sp/>);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>RB_NV20_BumpAndLightFragment();</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>qglEndList();</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>qglNewList(<sp/>fragmentDisplayListBase<sp/>+<sp/>FPROG_DIFFUSE_COLOR,<sp/>GL_COMPILE<sp/>);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>RB_NV20_DiffuseColorFragment();</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>qglEndList();</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>qglNewList(<sp/>fragmentDisplayListBase<sp/>+<sp/>FPROG_SPECULAR_COLOR,<sp/>GL_COMPILE<sp/>);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>RB_NV20_SpecularColorFragment();</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>qglEndList();</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>qglNewList(<sp/>fragmentDisplayListBase<sp/>+<sp/>FPROG_DIFFUSE_AND_SPECULAR_COLOR,<sp/>GL_COMPILE<sp/>);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>RB_NV20_DiffuseAndSpecularColorFragment();</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>qglEndList();</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>r_useCombinerDisplayLists.SetBool(<sp/>temp<sp/>);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;---------------------------------\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>glConfig.allowNV20Path<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/renderer/draw_nv20.cpp"/>
  </compounddef>
</doxygen>
