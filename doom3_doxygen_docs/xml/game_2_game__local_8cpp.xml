<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="game_2_game__local_8cpp" kind="file">
    <compoundname>Game_local.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../idlib/precompiled.h</includes>
    <includes refid="game_2_game__local_8h" local="yes">Game_local.h</includes>
      <sectiondef kind="var">
      <memberdef kind="variable" id="game_2_game__local_8cpp_1aeaaf428d74e01d1be0e7836492d8aef8" prot="public" static="no" mutable="no">
        <type><ref refid="classid_sys" kindref="compound">idSys</ref> *</type>
        <definition>idSys* sys</definition>
        <argsstring></argsstring>
        <name>sys</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" line="36" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2_game__local_8cpp_1acb5b6765462b52cde201b147f6062c12" prot="public" static="no" mutable="no">
        <type><ref refid="classid_common" kindref="compound">idCommon</ref> *</type>
        <definition>idCommon* common</definition>
        <argsstring></argsstring>
        <name>common</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" line="37" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2_game__local_8cpp_1a35a8fd6cca3a65cada5b64812ae1f9ce" prot="public" static="no" mutable="no">
        <type><ref refid="classid_cmd_system" kindref="compound">idCmdSystem</ref> *</type>
        <definition>idCmdSystem* cmdSystem</definition>
        <argsstring></argsstring>
        <name>cmdSystem</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" line="38" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2_game__local_8cpp_1a2f3c0904ad1724c4ee7a41b1914da809" prot="public" static="no" mutable="no">
        <type><ref refid="classid_c_var_system" kindref="compound">idCVarSystem</ref> *</type>
        <definition>idCVarSystem* cvarSystem</definition>
        <argsstring></argsstring>
        <name>cvarSystem</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" line="39" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2_game__local_8cpp_1af9f7be7ccefb21274f8ab7b3458c6518" prot="public" static="no" mutable="no">
        <type><ref refid="classid_file_system" kindref="compound">idFileSystem</ref> *</type>
        <definition>idFileSystem* fileSystem</definition>
        <argsstring></argsstring>
        <name>fileSystem</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" line="40" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2_game__local_8cpp_1a5f2aa1e2ad8bd696ba8529f5084fa38c" prot="public" static="no" mutable="no">
        <type><ref refid="classid_network_system" kindref="compound">idNetworkSystem</ref> *</type>
        <definition>idNetworkSystem* networkSystem</definition>
        <argsstring></argsstring>
        <name>networkSystem</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" line="41" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2_game__local_8cpp_1ad134c8e8792109f23d82b9d7227f779e" prot="public" static="no" mutable="no">
        <type><ref refid="classid_render_system" kindref="compound">idRenderSystem</ref> *</type>
        <definition>idRenderSystem* renderSystem</definition>
        <argsstring></argsstring>
        <name>renderSystem</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" line="42" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2_game__local_8cpp_1a855f18ae78605bcf88eaea537c532d87" prot="public" static="no" mutable="no">
        <type><ref refid="classid_sound_system" kindref="compound">idSoundSystem</ref> *</type>
        <definition>idSoundSystem* soundSystem</definition>
        <argsstring></argsstring>
        <name>soundSystem</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" line="43" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2_game__local_8cpp_1ad5c1642df786e4c6d6eb556d082bf6ca" prot="public" static="no" mutable="no">
        <type><ref refid="classid_render_model_manager" kindref="compound">idRenderModelManager</ref> *</type>
        <definition>idRenderModelManager* renderModelManager</definition>
        <argsstring></argsstring>
        <name>renderModelManager</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" line="44" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2_game__local_8cpp_1a9d66a63fbc19e8061ed09cf242a8ab82" prot="public" static="no" mutable="no">
        <type><ref refid="classid_user_interface_manager" kindref="compound">idUserInterfaceManager</ref> *</type>
        <definition>idUserInterfaceManager* uiManager</definition>
        <argsstring></argsstring>
        <name>uiManager</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" line="45" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2_game__local_8cpp_1a4434ccf19164b40f4f191bb5611fb59f" prot="public" static="no" mutable="no">
        <type><ref refid="classid_decl_manager" kindref="compound">idDeclManager</ref> *</type>
        <definition>idDeclManager* declManager</definition>
        <argsstring></argsstring>
        <name>declManager</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" line="46" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2_game__local_8cpp_1a1c67123bea81656498bbaf22b5796fe6" prot="public" static="no" mutable="no">
        <type><ref refid="classid_a_a_s_file_manager" kindref="compound">idAASFileManager</ref> *</type>
        <definition>idAASFileManager* AASFileManager</definition>
        <argsstring></argsstring>
        <name>AASFileManager</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" line="47" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2_game__local_8cpp_1accdf67ebee578bf03d92d50189de3e40" prot="public" static="no" mutable="no">
        <type><ref refid="classid_collision_model_manager" kindref="compound">idCollisionModelManager</ref> *</type>
        <definition>idCollisionModelManager* collisionModelManager</definition>
        <argsstring></argsstring>
        <name>collisionModelManager</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" line="48" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2_game__local_8cpp_1aa91045d68b7a36d747ba4e73b91c9c6d" prot="public" static="no" mutable="no">
        <type><ref refid="classid_c_var" kindref="compound">idCVar</ref></type>
        <definition>idCVar com_forceGenericSIMD(&quot;com_forceGenericSIMD&quot;,&quot;0&quot;, CVAR_BOOL|CVAR_SYSTEM,&quot;force generic platform independent SIMD&quot;)</definition>
        <argsstring>(&quot;com_forceGenericSIMD&quot;,&quot;0&quot;, CVAR_BOOL|CVAR_SYSTEM,&quot;force generic platform independent SIMD&quot;)</argsstring>
        <name>com_forceGenericSIMD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" line="51" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2_game__local_8cpp_1aa87a772acf3a3d706c7c88f1584b2df7" prot="public" static="no" mutable="no">
        <type><ref refid="classid_render_world" kindref="compound">idRenderWorld</ref> *</type>
        <definition>idRenderWorld* gameRenderWorld</definition>
        <argsstring></argsstring>
        <name>gameRenderWorld</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" line="55" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2_game__local_8cpp_1ae04d99084e570b87f8ed2868d89493e4" prot="public" static="no" mutable="no">
        <type><ref refid="classid_sound_world" kindref="compound">idSoundWorld</ref> *</type>
        <definition>idSoundWorld* gameSoundWorld</definition>
        <argsstring></argsstring>
        <name>gameSoundWorld</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" line="56" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2_game__local_8cpp_1a88941d28d7d3243237b00bc2ffe9fe1d" prot="public" static="yes" mutable="no">
        <type><ref refid="structgame_export__t" kindref="compound">gameExport_t</ref></type>
        <definition>gameExport_t gameExport</definition>
        <argsstring></argsstring>
        <name>gameExport</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" line="58" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2_game__local_8cpp_1a47ac02b9a25d2f9fda5f9f297e4a6d6d" prot="public" static="no" mutable="no">
        <type><ref refid="classid_anim_manager" kindref="compound">idAnimManager</ref></type>
        <definition>idAnimManager animationLib</definition>
        <argsstring></argsstring>
        <name>animationLib</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" line="61" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2_game__local_8cpp_1a3a07c3c92b73b2bd7c1500cddf70b87e" prot="public" static="no" mutable="no">
        <type><ref refid="classid_game_local" kindref="compound">idGameLocal</ref></type>
        <definition>idGameLocal gameLocal</definition>
        <argsstring></argsstring>
        <name>gameLocal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" line="64" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2_game__local_8cpp_1a34a3cae06f089fd707ad066d0abec86a" prot="public" static="no" mutable="no">
        <type><ref refid="classid_game" kindref="compound">idGame</ref> *</type>
        <definition>idGame* game</definition>
        <argsstring></argsstring>
        <name>game</name>
        <initializer>= &amp;gameLocal</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" line="65" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="game_2_game__local_8cpp_1a0357ca2db3cb9cc31428c9e821a16c52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgame_export__t" kindref="compound">gameExport_t</ref> *</type>
        <definition>gameExport_t* GetGameAPI</definition>
        <argsstring>(gameImport_t *import)</argsstring>
        <name>GetGameAPI</name>
        <param>
          <type><ref refid="structgame_import__t" kindref="compound">gameImport_t</ref> *</type>
          <declname>import</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" line="83" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" bodystart="83" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="game_2_game__local_8cpp_1a57b216b26bb98f639b9664ea82c335f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TestGameAPI</definition>
        <argsstring>(void)</argsstring>
        <name>TestGameAPI</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" line="128" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" bodystart="128" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="game_2_game__local_8cpp_1a16ffd93e95971d13ebe82c52bc4af98f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gameError</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>gameError</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" line="715" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp" bodystart="715" bodyend="724"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Game_local.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GAME_DLL</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="classid_sys" kindref="compound">idSys</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="classid_common" kindref="compound">idCommon</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="classid_cmd_system" kindref="compound">idCmdSystem</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmdSystem<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><ref refid="classid_c_var_system" kindref="compound">idCVarSystem</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvarSystem<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><ref refid="classid_file_system" kindref="compound">idFileSystem</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileSystem<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><ref refid="classid_network_system" kindref="compound">idNetworkSystem</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>networkSystem<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><ref refid="classid_render_system" kindref="compound">idRenderSystem</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderSystem<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><ref refid="classid_sound_system" kindref="compound">idSoundSystem</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soundSystem<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><ref refid="classid_render_model_manager" kindref="compound">idRenderModelManager</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>renderModelManager<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><ref refid="classid_user_interface_manager" kindref="compound">idUserInterfaceManager</ref><sp/>*<sp/><sp/><sp/><sp/>uiManager<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><ref refid="classid_decl_manager" kindref="compound">idDeclManager</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declManager<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><ref refid="classid_a_a_s_file_manager" kindref="compound">idAASFileManager</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AASFileManager<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><ref refid="classid_collision_model_manager" kindref="compound">idCollisionModelManager</ref><sp/>*<sp/><sp/><sp/>collisionModelManager<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idCVar::staticVars<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="classid_c_var" kindref="compound">idCVar</ref><sp/>com_forceGenericSIMD(<sp/></highlight><highlight class="stringliteral">&quot;com_forceGenericSIMD&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>CVAR_BOOL|CVAR_SYSTEM,<sp/></highlight><highlight class="stringliteral">&quot;force<sp/>generic<sp/>platform<sp/>independent<sp/>SIMD&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><ref refid="classid_render_world" kindref="compound">idRenderWorld</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld<sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>drawing<sp/>is<sp/>done<sp/>to<sp/>this<sp/>world</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><ref refid="classid_sound_world" kindref="compound">idSoundWorld</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameSoundWorld<sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>audio<sp/>goes<sp/>to<sp/>this<sp/>world</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structgame_export__t" kindref="compound">gameExport_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameExport;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>global<sp/>animation<sp/>lib</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><ref refid="classid_anim_manager" kindref="compound">idAnimManager</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>animationLib;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>engine<sp/>will<sp/>only<sp/>reference<sp/>the<sp/>&quot;game&quot;<sp/>variable,<sp/>while<sp/>all<sp/>local<sp/>aspects<sp/>stay<sp/>hidden</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="classid_game_local" kindref="compound">idGameLocal</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><ref refid="classid_game" kindref="compound">idGame</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>game<sp/>=<sp/>&amp;gameLocal;<sp/><sp/></highlight><highlight class="comment">//<sp/>statically<sp/>pointed<sp/>at<sp/>an<sp/>idGameLocal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*idGameLocal::sufaceTypeNames[<sp/>MAX_SURFACE_TYPES<sp/>]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;none&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;metal&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;stone&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;flesh&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;wood&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cardboard&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;liquid&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;glass&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;plastic&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ricochet&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;surftype10&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;surftype11&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;surftype12&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;surftype13&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;surftype14&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;surftype15&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">};</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="73"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="74"><highlight class="comment">GetGameAPI</highlight></codeline>
<codeline lineno="75"><highlight class="comment">============</highlight></codeline>
<codeline lineno="76"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__MWERKS__</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>export<sp/>on</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>__GNUC__<sp/>&gt;=<sp/>4</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>visibility<sp/>push(default)</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/><ref refid="structgame_export__t" kindref="compound">gameExport_t</ref><sp/>*GetGameAPI(<sp/><ref refid="structgame_import__t" kindref="compound">gameImport_t</ref><sp/>*</highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__MWERKS__</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>export<sp/>off</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>import-&gt;version<sp/>==<sp/>GAME_API_VERSION<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>interface<sp/>pointers<sp/>used<sp/>by<sp/>the<sp/>game</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal">-&gt;sys;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal">-&gt;common;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmdSystem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal">-&gt;cmdSystem;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvarSystem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal">-&gt;cvarSystem;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileSystem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal">-&gt;fileSystem;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>networkSystem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal">-&gt;networkSystem;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderSystem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal">-&gt;renderSystem;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soundSystem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal">-&gt;soundSystem;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderModelManager<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal">-&gt;renderModelManager;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uiManager<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal">-&gt;uiManager;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declManager<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal">-&gt;declManager;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AASFileManager<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal">-&gt;AASFileManager;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collisionModelManager<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal">-&gt;collisionModelManager;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>interface<sp/>pointers<sp/>used<sp/>by<sp/>idLib</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>idLib::sys<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sys;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>idLib::common<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>common;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>idLib::cvarSystem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>cvarSystem;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>idLib::fileSystem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>fileSystem;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>export<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>gameExport.version<sp/>=<sp/>GAME_API_VERSION;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>gameExport.game<sp/>=<sp/>game;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>gameExport.gameEdit<sp/>=<sp/>gameEdit;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;gameExport;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__GNUC__<sp/>&gt;=<sp/>4</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>visibility<sp/>pop</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="124"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="125"><highlight class="comment">TestGameAPI</highlight></codeline>
<codeline lineno="126"><highlight class="comment">============</highlight></codeline>
<codeline lineno="127"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestGameAPI(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgame_import__t" kindref="compound">gameImport_t</ref><sp/>testImport;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgame_export__t" kindref="compound">gameExport_t</ref><sp/>testExport;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>testImport.sys<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>::sys;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>testImport.common<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>::common;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>testImport.cmdSystem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>::cmdSystem;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>testImport.cvarSystem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>::cvarSystem;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>testImport.fileSystem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>::fileSystem;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>testImport.networkSystem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>::networkSystem;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>testImport.renderSystem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>::renderSystem;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>testImport.soundSystem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>::soundSystem;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>testImport.renderModelManager<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>::renderModelManager;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>testImport.uiManager<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>::uiManager;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>testImport.declManager<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>::declManager;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>testImport.AASFileManager<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>::AASFileManager;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>testImport.collisionModelManager<sp/><sp/><sp/><sp/>=<sp/>::collisionModelManager;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>testExport<sp/>=<sp/>*GetGameAPI(<sp/>&amp;testImport<sp/>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="150"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="151"><highlight class="comment">idGameLocal::idGameLocal</highlight></codeline>
<codeline lineno="152"><highlight class="comment">============</highlight></codeline>
<codeline lineno="153"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">idGameLocal::idGameLocal()<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>Clear();</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="159"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="160"><highlight class="comment">idGameLocal::Clear</highlight></codeline>
<codeline lineno="161"><highlight class="comment">============</highlight></codeline>
<codeline lineno="162"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::Clear(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>serverInfo.Clear();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>numClients<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>userInfo[i].Clear();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>persistentPlayerInfo[i].Clear();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>usercmds,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>usercmds<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>entities,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>entities<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>spawnIds,<sp/>-1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>spawnIds<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>firstFreeIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>num_entities<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnedEntities.Clear();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>activeEntities.Clear();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>numEntitiesToDeactivate<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>sortPushers<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>sortTeamMasters<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>persistentLevelInfo.Clear();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>globalShaderParms,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>globalShaderParms<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>random.SetSeed(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>world<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>frameCommandThread<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>testmodel<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>testFx<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>clip.Shutdown();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>pvs.Shutdown();</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>sessionCommand.Clear();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>locationEntities<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>smokeParticles<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>editEntities<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>entityHash.Clear(<sp/>1024,<sp/>MAX_GENTITIES<sp/>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>inCinematic<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>cinematicSkipTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>cinematicStopTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>cinematicMaxSkipTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>framenum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>previousTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>time<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>vacuumAreaNum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>mapFileName.Clear();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>mapFile<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnCount<sp/>=<sp/>INITIAL_SPAWN_COUNT;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>mapSpawnCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>camera<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>aasList.Clear();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>aasNames.Clear();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>lastAIAlertEntity<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>lastAIAlertTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnArgs.Clear();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>gravity.Set(<sp/>0,<sp/>0,<sp/>-1<sp/>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>playerPVS.h<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)-1;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>playerConnectedAreas.h<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)-1;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>gamestate<sp/>=<sp/>GAMESTATE_UNINITIALIZED;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>skipCinematic<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>influenceActive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>localClientNum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>isMultiplayer<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>isServer<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>isClient<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>realClientTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>isNewFrame<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>clientSmoothing<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>entityDefBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>nextGibTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>globalMaterial<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>newInfo.Clear();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>lastGUIEnt<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>lastGUI<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>clientEntityStates,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>clientEntityStates<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>clientPVS,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>clientPVS<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>clientSnapshots,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>clientSnapshots<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>eventQueue.Init();</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>savedEventQueue.Init();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>lagometer,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>lagometer<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="247"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="248"><highlight class="comment">idGameLocal::Init</highlight></codeline>
<codeline lineno="249"><highlight class="comment"></highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/>initialize<sp/>the<sp/>game<sp/>object,<sp/>only<sp/>happens<sp/>once<sp/>at<sp/>startup,<sp/>not<sp/>each<sp/>level<sp/>load</highlight></codeline>
<codeline lineno="251"><highlight class="comment">============</highlight></codeline>
<codeline lineno="252"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::Init(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>*dict;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_a_s" kindref="compound">idAAS</ref><sp/>*aas;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GAME_DLL</highlight></codeline>
<codeline lineno="258"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>TestGameAPI();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="262"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>idLib</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>idLib::Init();</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>register<sp/>static<sp/>cvars<sp/>declared<sp/>in<sp/>the<sp/>game</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>idCVar::RegisterStaticVars();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>processor<sp/>specific<sp/>SIMD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>idSIMD::InitProcessor(<sp/></highlight><highlight class="stringliteral">&quot;game&quot;</highlight><highlight class="normal">,<sp/>com_forceGenericSIMD.GetBool()<sp/>);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="273"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;---------<sp/>Initializing<sp/>Game<sp/>----------\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;gamename:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>GAME_VERSION<sp/>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;gamedate:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>__DATE__<sp/>);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>register<sp/>game<sp/>specific<sp/>decl<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>declManager-&gt;RegisterDeclType(<sp/></highlight><highlight class="stringliteral">&quot;model&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DECL_MODELDEF,<sp/><sp/><sp/><sp/><sp/><sp/>idDeclAllocator&lt;idDeclModelDef&gt;<sp/>);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>declManager-&gt;RegisterDeclType(<sp/></highlight><highlight class="stringliteral">&quot;export&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DECL_MODELEXPORT,<sp/><sp/><sp/>idDeclAllocator&lt;idDecl&gt;<sp/>);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>register<sp/>game<sp/>specific<sp/>decl<sp/>folders</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>declManager-&gt;RegisterDeclFolder(<sp/></highlight><highlight class="stringliteral">&quot;def&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.def&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DECL_ENTITYDEF<sp/>);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>declManager-&gt;RegisterDeclFolder(<sp/></highlight><highlight class="stringliteral">&quot;fx&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.fx&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DECL_FX<sp/>);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>declManager-&gt;RegisterDeclFolder(<sp/></highlight><highlight class="stringliteral">&quot;particles&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.prt&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DECL_PARTICLE<sp/>);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>declManager-&gt;RegisterDeclFolder(<sp/></highlight><highlight class="stringliteral">&quot;af&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.af&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DECL_AF<sp/>);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>declManager-&gt;RegisterDeclFolder(<sp/></highlight><highlight class="stringliteral">&quot;newpdas&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.pda&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DECL_PDA<sp/>);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;AddCommand(<sp/></highlight><highlight class="stringliteral">&quot;listModelDefs&quot;</highlight><highlight class="normal">,<sp/>idListDecls_f&lt;DECL_MODELDEF&gt;,<sp/>CMD_FL_SYSTEM|CMD_FL_GAME,<sp/></highlight><highlight class="stringliteral">&quot;lists<sp/>model<sp/>defs&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdSystem-&gt;AddCommand(<sp/></highlight><highlight class="stringliteral">&quot;printModelDefs&quot;</highlight><highlight class="normal">,<sp/>idPrintDecls_f&lt;DECL_MODELDEF&gt;,<sp/>CMD_FL_SYSTEM|CMD_FL_GAME,<sp/></highlight><highlight class="stringliteral">&quot;prints<sp/>a<sp/>model<sp/>def&quot;</highlight><highlight class="normal">,<sp/>idCmdSystem::ArgCompletion_Decl&lt;DECL_MODELDEF&gt;<sp/>);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>Clear();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>idEvent::Init();</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>idClass::Init();</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>InitConsoleCommands();</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>default<sp/>scripts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>program.Startup(<sp/>SCRIPT_DEFAULT<sp/>);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>smokeParticles<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_smoke_particles" kindref="compound">idSmokeParticles</ref>;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>the<sp/>aas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>dict<sp/>=<sp/>FindEntityDefDict(<sp/></highlight><highlight class="stringliteral">&quot;aas_types&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!dict<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>find<sp/>entityDef<sp/>for<sp/>&apos;aas_types&apos;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>space<sp/>for<sp/>the<sp/>aas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_key_value" kindref="compound">idKeyValue</ref><sp/>*kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>kv<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aas<sp/>=<sp/>idAAS::Alloc();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aasList.Append(<sp/>aas<sp/>);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aasNames.Append(<sp/>kv-&gt;GetValue()<sp/>);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">,<sp/>kv<sp/>);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>gamestate<sp/>=<sp/>GAMESTATE_NOMAP;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;...%d<sp/>aas<sp/>types\n&quot;</highlight><highlight class="normal">,<sp/>aasList.Num()<sp/>);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;game<sp/>initialized.\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;--------------------------------------\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="327"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="328"><highlight class="comment">idGameLocal::Shutdown</highlight></codeline>
<codeline lineno="329"><highlight class="comment"></highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/>shut<sp/>down<sp/>the<sp/>entire<sp/>game</highlight></codeline>
<codeline lineno="331"><highlight class="comment">============</highlight></codeline>
<codeline lineno="332"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::Shutdown(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!common<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;------------<sp/>Game<sp/>Shutdown<sp/>-----------\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>mpGame.Shutdown();</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>MapShutdown();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>aasList.DeleteContents(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>aasNames.Clear();</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>idAI::FreeObstacleAvoidanceNodes();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shutdown<sp/>the<sp/>model<sp/>exporter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>idModelExport::Shutdown();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>idEvent::Shutdown();</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>locationEntities;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>locationEntities<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>smokeParticles;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>smokeParticles<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>idClass::Shutdown();</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>list<sp/>with<sp/>forces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>idForce::ClearForceList();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>the<sp/>program<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>program.FreeData();</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>the<sp/>.map<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mapFile;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>mapFile<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>the<sp/>collision<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>collisionModelManager-&gt;FreeMap();</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>ShutdownConsoleCommands();</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>memory<sp/>allocated<sp/>by<sp/>class<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>Clear();</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shut<sp/>down<sp/>the<sp/>animation<sp/>manager</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>animationLib.Shutdown();</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;--------------------------------------\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GAME_DLL</highlight></codeline>
<codeline lineno="387"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>auto-completion<sp/>function<sp/>pointers<sp/>pointing<sp/>into<sp/>this<sp/>DLL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>cvarSystem-&gt;RemoveFlaggedAutoCompletion(<sp/>CVAR_GAME<sp/>);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enable<sp/>leak<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>Mem_EnableLeakTest(<sp/></highlight><highlight class="stringliteral">&quot;game&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shutdown<sp/>idLib</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>idLib::ShutDown();</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="398"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="401"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="402"><highlight class="comment">idGameLocal::SaveGame</highlight></codeline>
<codeline lineno="403"><highlight class="comment"></highlight></codeline>
<codeline lineno="404"><highlight class="comment">save<sp/>the<sp/>current<sp/>player<sp/>state,<sp/>level<sp/>name,<sp/>and<sp/>level<sp/>state</highlight></codeline>
<codeline lineno="405"><highlight class="comment">the<sp/>session<sp/>may<sp/>have<sp/>written<sp/>some<sp/>data<sp/>to<sp/>the<sp/>file<sp/>already</highlight></codeline>
<codeline lineno="406"><highlight class="comment">============</highlight></codeline>
<codeline lineno="407"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::SaveGame(<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*link;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_save_game" kindref="compound">idSaveGame</ref><sp/>savegame(<sp/>f<sp/>);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_flushSave.GetBool(<sp/>)<sp/>==<sp/>true<sp/>)<sp/>{<sp/></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>force<sp/>flushing<sp/>with<sp/>each<sp/>write...<sp/>for<sp/>tracking<sp/>down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>game<sp/>bugs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;ForceFlush();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteBuildNumber(<sp/>BUILD_NUMBER<sp/>);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>through<sp/>all<sp/>entities<sp/>and<sp/>threads<sp/>and<sp/>add<sp/>them<sp/>to<sp/>the<sp/>object<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_GENTITIES;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>entities[i];</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent-&gt;GetTeamMaster()<sp/>&amp;&amp;<sp/>ent-&gt;GetTeamMaster()<sp/>!=<sp/>ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>link<sp/>=<sp/>ent;<sp/>link<sp/>!=<sp/>NULL;<sp/>link<sp/>=<sp/>link-&gt;GetNextTeamEntity()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.AddObject(<sp/>link<sp/>);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_list" kindref="compound">idList&lt;idThread *&gt;</ref><sp/>threads;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>threads<sp/>=<sp/>idThread::GetThreads();</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>threads.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.AddObject(<sp/>threads[i]<sp/>);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>out<sp/>complete<sp/>object<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteObjectList();</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>program.Save(<sp/>&amp;savegame<sp/>);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>g_skill.GetInteger()<sp/>);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteDict(<sp/>&amp;serverInfo<sp/>);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>numClients<sp/>);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numClients;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.WriteDict(<sp/>&amp;userInfo[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.WriteUsercmd(<sp/>usercmds[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.WriteDict(<sp/>&amp;persistentPlayerInfo[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_GENTITIES;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.WriteObject(<sp/>entities[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>spawnIds[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>firstFreeIndex<sp/>);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>num_entities<sp/>);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enityHash<sp/>is<sp/>restored<sp/>by<sp/>idEntity::Restore<sp/>setting<sp/>the<sp/>entity<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteObject(<sp/>world<sp/>);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>spawnedEntities.Num()<sp/>);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>ent<sp/>=<sp/>spawnedEntities.Next();<sp/>ent<sp/>!=<sp/>NULL;<sp/>ent<sp/>=<sp/>ent-&gt;spawnNode.Next()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.WriteObject(<sp/>ent<sp/>);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>activeEntities.Num()<sp/>);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>ent<sp/>=<sp/>activeEntities.Next();<sp/>ent<sp/>!=<sp/>NULL;<sp/>ent<sp/>=<sp/>ent-&gt;activeNode.Next()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.WriteObject(<sp/>ent<sp/>);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>numEntitiesToDeactivate<sp/>);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteBool(<sp/>sortPushers<sp/>);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteBool(<sp/>sortTeamMasters<sp/>);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteDict(<sp/>&amp;persistentLevelInfo<sp/>);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_GLOBAL_SHADER_PARMS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.WriteFloat(<sp/>globalShaderParms[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>random.GetSeed()<sp/>);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteObject(<sp/>frameCommandThread<sp/>);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pvs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>testmodel<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>testFx<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteString(<sp/>sessionCommand<sp/>);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>save<sp/>smoke<sp/>particles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>cinematicSkipTime<sp/>);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>cinematicStopTime<sp/>);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>cinematicMaxSkipTime<sp/>);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteBool(<sp/>inCinematic<sp/>);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteBool(<sp/>skipCinematic<sp/>);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteBool(<sp/>isMultiplayer<sp/>);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>gameType<sp/>);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>framenum<sp/>);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>previousTime<sp/>);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>vacuumAreaNum<sp/>);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>entityDefBits<sp/>);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteBool(<sp/>isServer<sp/>);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteBool(<sp/>isClient<sp/>);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>localClientNum<sp/>);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>snapshotEntities<sp/>is<sp/>used<sp/>for<sp/>multiplayer<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>realClientTime<sp/>);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteBool(<sp/>isNewFrame<sp/>);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteFloat(<sp/>clientSmoothing<sp/>);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteBool(<sp/>mapCycleLoaded<sp/>);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>spawnCount<sp/>);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!locationEntities<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>gameRenderWorld-&gt;NumAreas()<sp/>);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gameRenderWorld-&gt;NumAreas();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.WriteObject(<sp/>locationEntities[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteObject(<sp/>camera<sp/>);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteMaterial(<sp/>globalMaterial<sp/>);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>lastAIAlertEntity.Save(<sp/>&amp;savegame<sp/>);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>lastAIAlertTime<sp/>);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteDict(<sp/>&amp;spawnArgs<sp/>);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>playerPVS.i<sp/>);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>playerPVS.h<sp/>);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>playerConnectedAreas.i<sp/>);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>playerConnectedAreas.h<sp/>);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteVec3(<sp/>gravity<sp/>);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gamestate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteBool(<sp/>influenceActive<sp/>);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.WriteInt(<sp/>nextGibTime<sp/>);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>spawnSpots</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialSpots</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>currentInitialSpot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>newInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>makingBuild</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shakeSounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>out<sp/>pending<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>idEvent::Save(<sp/>&amp;savegame<sp/>);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.Close();</highlight></codeline>
<codeline lineno="576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="579"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="580"><highlight class="comment">idGameLocal::GetPersistentPlayerInfo</highlight></codeline>
<codeline lineno="581"><highlight class="comment">============</highlight></codeline>
<codeline lineno="582"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>&amp;idGameLocal::GetPersistentPlayerInfo(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/><sp/><sp/><sp/>*ent;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>persistentPlayerInfo[<sp/>clientNum<sp/>].Clear();</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>entities[<sp/>clientNum<sp/>];</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>&amp;&amp;<sp/>ent-&gt;IsType(<sp/>idPlayer::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ent)-&gt;SavePersistantInfo();</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>persistentPlayerInfo[<sp/>clientNum<sp/>];</highlight></codeline>
<codeline lineno="593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="596"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="597"><highlight class="comment">idGameLocal::SetPersistentPlayerInfo</highlight></codeline>
<codeline lineno="598"><highlight class="comment">============</highlight></codeline>
<codeline lineno="599"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::SetPersistentPlayerInfo(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>&amp;playerInfo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>persistentPlayerInfo[<sp/>clientNum<sp/>]<sp/>=<sp/>playerInfo;</highlight></codeline>
<codeline lineno="602"><highlight class="normal">}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="605"><highlight class="comment">============</highlight></codeline>
<codeline lineno="606"><highlight class="comment">idGameLocal::Printf</highlight></codeline>
<codeline lineno="607"><highlight class="comment">============</highlight></codeline>
<codeline lineno="608"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::Printf(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/><sp/><sp/><sp/><sp/>argptr;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text[MAX_STRING_CHARS];</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(<sp/>argptr,<sp/>fmt<sp/>);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>idStr::vsnPrintf(<sp/>text,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>text<sp/>),<sp/>fmt,<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="621"><highlight class="comment">============</highlight></codeline>
<codeline lineno="622"><highlight class="comment">idGameLocal::DPrintf</highlight></codeline>
<codeline lineno="623"><highlight class="comment">============</highlight></codeline>
<codeline lineno="624"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::DPrintf(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/><sp/><sp/><sp/><sp/>argptr;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text[MAX_STRING_CHARS];</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!developer.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(<sp/>argptr,<sp/>fmt<sp/>);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>idStr::vsnPrintf(<sp/>text,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>text<sp/>),<sp/>fmt,<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="641"><highlight class="comment">============</highlight></codeline>
<codeline lineno="642"><highlight class="comment">idGameLocal::Warning</highlight></codeline>
<codeline lineno="643"><highlight class="comment">============</highlight></codeline>
<codeline lineno="644"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::Warning(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/><sp/><sp/><sp/><sp/>argptr;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text[MAX_STRING_CHARS];</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/>*<sp/><sp/>thread;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(<sp/>argptr,<sp/>fmt<sp/>);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>idStr::vsnPrintf(<sp/>text,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>text<sp/>),<sp/>fmt,<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>thread<sp/>=<sp/>idThread::CurrentThread();</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>thread<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="663"><highlight class="comment">============</highlight></codeline>
<codeline lineno="664"><highlight class="comment">idGameLocal::DWarning</highlight></codeline>
<codeline lineno="665"><highlight class="comment">============</highlight></codeline>
<codeline lineno="666"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::DWarning(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/><sp/><sp/><sp/><sp/>argptr;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text[MAX_STRING_CHARS];</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/>*<sp/><sp/>thread;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!developer.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(<sp/>argptr,<sp/>fmt<sp/>);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>idStr::vsnPrintf(<sp/>text,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>text<sp/>),<sp/>fmt,<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>thread<sp/>=<sp/>idThread::CurrentThread();</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>thread<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;DWarning(<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="689"><highlight class="comment">============</highlight></codeline>
<codeline lineno="690"><highlight class="comment">idGameLocal::Error</highlight></codeline>
<codeline lineno="691"><highlight class="comment">============</highlight></codeline>
<codeline lineno="692"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::Error(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/><sp/><sp/><sp/><sp/>argptr;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text[MAX_STRING_CHARS];</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/>*<sp/><sp/>thread;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(<sp/>argptr,<sp/>fmt<sp/>);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>idStr::vsnPrintf(<sp/>text,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>text<sp/>),<sp/>fmt,<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>thread<sp/>=<sp/>idThread::CurrentThread();</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>thread<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;Error(<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Error(<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="711"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="712"><highlight class="comment">gameError</highlight></codeline>
<codeline lineno="713"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="714"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gameError(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/><sp/><sp/><sp/><sp/>argptr;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text[MAX_STRING_CHARS];</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(<sp/>argptr,<sp/>fmt<sp/>);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>idStr::vsnPrintf(<sp/>text,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>text<sp/>),<sp/>fmt,<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(<sp/>argptr<sp/>);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.Error(<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="727"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="728"><highlight class="comment">idGameLocal::SetLocalClient</highlight></codeline>
<codeline lineno="729"><highlight class="comment">============</highlight></codeline>
<codeline lineno="730"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::SetLocalClient(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>localClientNum<sp/>=<sp/>clientNum;</highlight></codeline>
<codeline lineno="733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="736"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="737"><highlight class="comment">idGameLocal::SetUserInfo</highlight></codeline>
<codeline lineno="738"><highlight class="comment">============</highlight></codeline>
<codeline lineno="739"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref>*<sp/>idGameLocal::SetUserInfo(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>&amp;userInfo,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isClient,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>canModify<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>modifiedInfo<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;isClient<sp/>=<sp/>isClient;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clientNum<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>clientNum<sp/>&lt;<sp/>MAX_CLIENTS<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idGameLocal::userInfo[<sp/>clientNum<sp/>]<sp/>=<sp/>userInfo;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>server<sp/>sanity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>canModify<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>let<sp/>numeric<sp/>nicknames,<sp/>it<sp/>can<sp/>be<sp/>exploited<sp/>to<sp/>go<sp/>around<sp/>kick<sp/>and<sp/>ban<sp/>commands<sp/>from<sp/>the<sp/>server</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idStr::IsNumeric(<sp/>this-&gt;userInfo[<sp/>clientNum<sp/>].GetString(<sp/></highlight><highlight class="stringliteral">&quot;ui_name&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idGameLocal::userInfo[<sp/>clientNum<sp/>].Set(<sp/></highlight><highlight class="stringliteral">&quot;ui_name&quot;</highlight><highlight class="normal">,<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;%s_&quot;</highlight><highlight class="normal">,<sp/>idGameLocal::userInfo[<sp/>clientNum<sp/>].GetString(<sp/></highlight><highlight class="stringliteral">&quot;ui_name&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modifiedInfo<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>allow<sp/>dupe<sp/>nicknames</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numClients;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>==<sp/>clientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>entities[<sp/>i<sp/>]<sp/>&amp;&amp;<sp/>entities[<sp/>i<sp/>]-&gt;IsType(<sp/>idPlayer::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idStr::Icmp(<sp/>idGameLocal::userInfo[<sp/>clientNum<sp/>].GetString(<sp/></highlight><highlight class="stringliteral">&quot;ui_name&quot;</highlight><highlight class="normal"><sp/>),<sp/>idGameLocal::userInfo[<sp/>i<sp/>].GetString(<sp/></highlight><highlight class="stringliteral">&quot;ui_name&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idGameLocal::userInfo[<sp/>clientNum<sp/>].Set(<sp/></highlight><highlight class="stringliteral">&quot;ui_name&quot;</highlight><highlight class="normal">,<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;%s_&quot;</highlight><highlight class="normal">,<sp/>idGameLocal::userInfo[<sp/>clientNum<sp/>].GetString(<sp/></highlight><highlight class="stringliteral">&quot;ui_name&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modifiedInfo<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>rescan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>entities[<sp/>clientNum<sp/>]<sp/>&amp;&amp;<sp/>entities[<sp/>clientNum<sp/>]-&gt;IsType(<sp/>idPlayer::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modifiedInfo<sp/>|=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>entities[<sp/>clientNum<sp/>]<sp/>)-&gt;UserInfoChanged(<sp/>canModify<sp/>);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!isClient<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>mark<sp/>this<sp/>client<sp/>in<sp/>game</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpGame.EnterGame(<sp/>clientNum<sp/>);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>modifiedInfo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>canModify<sp/>);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newInfo<sp/>=<sp/>idGameLocal::userInfo[<sp/>clientNum<sp/>];</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;newInfo;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="793"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="794"><highlight class="comment">idGameLocal::GetUserInfo</highlight></codeline>
<codeline lineno="795"><highlight class="comment">============</highlight></codeline>
<codeline lineno="796"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref>*<sp/>idGameLocal::GetUserInfo(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>entities[<sp/>clientNum<sp/>]<sp/>&amp;&amp;<sp/>entities[<sp/>clientNum<sp/>]-&gt;IsType(<sp/>idPlayer::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;userInfo[<sp/>clientNum<sp/>];</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="805"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="806"><highlight class="comment">idGameLocal::SetServerInfo</highlight></codeline>
<codeline lineno="807"><highlight class="comment">============</highlight></codeline>
<codeline lineno="808"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::SetServerInfo(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>&amp;_serverInfo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>outMsg;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_GAME_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>serverInfo<sp/>=<sp/>_serverInfo;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateServerInfoFlags();</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!isClient<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Let<sp/>our<sp/>clients<sp/>know<sp/>the<sp/>server<sp/>info<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteByte(<sp/>GAME_RELIABLE_MESSAGE_SERVERINFO<sp/>);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteDeltaDict(<sp/>gameLocal.serverInfo,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>networkSystem-&gt;ServerSendReliableMessage(<sp/>-1,<sp/>outMsg<sp/>);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="827"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="828"><highlight class="comment">idGameLocal::LoadMap</highlight></codeline>
<codeline lineno="829"><highlight class="comment"></highlight></codeline>
<codeline lineno="830"><highlight class="comment">Initializes<sp/>all<sp/>map<sp/>variables<sp/>common<sp/>to<sp/>both<sp/>save<sp/>games<sp/>and<sp/>spawned<sp/>games.</highlight></codeline>
<codeline lineno="831"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="832"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::LoadMap(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mapName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>randseed<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sameMap<sp/>=<sp/>(mapFile<sp/>&amp;&amp;<sp/>idStr::Icmp(mapFileName,<sp/>mapName)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>sound<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>gameSoundWorld-&gt;ClearAllSoundEmitters();</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>InitAsyncNetwork();</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!sameMap<sp/>||<sp/>(<sp/>mapFile<sp/>&amp;&amp;<sp/>mapFile-&gt;NeedsReload()<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>the<sp/>.map<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mapFile<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mapFile;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapFile<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_map_file" kindref="compound">idMapFile</ref>;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!mapFile-&gt;Parse(<sp/><ref refid="classid_str" kindref="compound">idStr</ref>(<sp/>mapName<sp/>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.map&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mapFile;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapFile<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>load<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>mapName<sp/>);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>mapFileName<sp/>=<sp/>mapFile-&gt;GetName();</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>the<sp/>collision<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>collisionModelManager-&gt;LoadMap(<sp/>mapFile<sp/>);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>numClients<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>all<sp/>entities<sp/>for<sp/>this<sp/>game</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>entities,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>entities<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>usercmds,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>usercmds<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>spawnIds,<sp/>-1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>spawnIds<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnCount<sp/>=<sp/>INITIAL_SPAWN_COUNT;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnedEntities.Clear();</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>activeEntities.Clear();</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>numEntitiesToDeactivate<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>sortTeamMasters<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>sortPushers<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>lastGUIEnt<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>lastGUI<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>globalMaterial<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>globalShaderParms,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>globalShaderParms<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>leave<sp/>room<sp/>for<sp/>the<sp/>max<sp/>number<sp/>of<sp/>clients,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>even<sp/>if<sp/>they<sp/>aren&apos;t<sp/>all<sp/>used,<sp/>so<sp/>numbers<sp/>inside<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>range<sp/>are<sp/>NEVER<sp/>anything<sp/>but<sp/>clients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>num_entities<sp/><sp/><sp/><sp/>=<sp/>MAX_CLIENTS;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>firstFreeIndex<sp/><sp/>=<sp/>MAX_CLIENTS;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>the<sp/>random<sp/>number<sp/>generator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>random.SetSeed(<sp/>isMultiplayer<sp/>?<sp/>randseed<sp/>:<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>camera<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>world<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>testmodel<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>testFx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>lastAIAlertEntity<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>lastAIAlertTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>previousTime<sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>time<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>framenum<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>sessionCommand<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>nextGibTime<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>vacuumAreaNum<sp/>=<sp/>-1;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>an<sp/>info_vacuum<sp/>is<sp/>spawned,<sp/>it<sp/>will<sp/>set<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!editEntities<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>editEntities<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_edit_entities" kindref="compound">idEditEntities</ref>;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>gravity.Set(<sp/>0,<sp/>0,<sp/>-g_gravity.GetFloat()<sp/>);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnArgs.Clear();</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>skipCinematic<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>inCinematic<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>cinematicSkipTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>cinematicStopTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>cinematicMaxSkipTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>clip.Init();</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>pvs.Init();</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>playerPVS.i<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>playerConnectedAreas.i<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>navigation<sp/>system<sp/>for<sp/>all<sp/>the<sp/>different<sp/>monster<sp/>sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>aasNames.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aasList[<sp/>i<sp/>]-&gt;Init(<sp/><ref refid="classid_str" kindref="compound">idStr</ref>(<sp/>mapFileName<sp/>).SetFileExtension(<sp/>aasNames[<sp/>i<sp/>]<sp/>).c_str(),<sp/>mapFile-&gt;GetGeometryCRC()<sp/>);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>smoke<sp/>particle<sp/>free<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>smokeParticles-&gt;Init();</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cache<sp/>miscellanious<sp/>media<sp/>references</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>FindEntityDef(<sp/></highlight><highlight class="stringliteral">&quot;preCacheExtras&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!sameMap<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapFile-&gt;RemovePrimitiveData();</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal">}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="940"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="941"><highlight class="comment">idGameLocal::LocalMapRestart</highlight></codeline>
<codeline lineno="942"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="943"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::LocalMapRestart(<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>latchSpawnCount;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;-----------<sp/>Game<sp/>Map<sp/>Restart<sp/>------------\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>gamestate<sp/>=<sp/>GAMESTATE_SHUTDOWN;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>entities[<sp/>i<sp/>]<sp/>&amp;&amp;<sp/>entities[<sp/>i<sp/>]-&gt;IsType(<sp/>idPlayer::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>entities[<sp/>i<sp/>]<sp/>)-&gt;PrepareForRestart();</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>eventQueue.Shutdown();</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>savedEventQueue.Shutdown();</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>MapClear(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>smoke<sp/>particle<sp/>free<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>smokeParticles-&gt;Init();</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>sound<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameSoundWorld<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameSoundWorld-&gt;ClearAllSoundEmitters();</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>spawnCount<sp/>is<sp/>reset<sp/>to<sp/>zero<sp/>temporarily<sp/>to<sp/>spawn<sp/>the<sp/>map<sp/>entities<sp/>with<sp/>the<sp/>same<sp/>spawnId</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>don&apos;t<sp/>do<sp/>that,<sp/>network<sp/>clients<sp/>are<sp/>confused<sp/>and<sp/>don&apos;t<sp/>show<sp/>any<sp/>map<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>latchSpawnCount<sp/>=<sp/>spawnCount;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnCount<sp/>=<sp/>INITIAL_SPAWN_COUNT;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>gamestate<sp/>=<sp/>GAMESTATE_STARTUP;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>program.Restart();</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>InitScriptForMap();</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>MapPopulate();</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>once<sp/>the<sp/>map<sp/>is<sp/>populated,<sp/>set<sp/>the<sp/>spawnCount<sp/>back<sp/>to<sp/>where<sp/>it<sp/>was<sp/>so<sp/>we<sp/>don&apos;t<sp/>risk<sp/>any<sp/>collision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(note<sp/>that<sp/>if<sp/>there<sp/>are<sp/>no<sp/>players<sp/>in<sp/>the<sp/>game,<sp/>we<sp/>could<sp/>just<sp/>leave<sp/>it<sp/>at<sp/>it&apos;s<sp/>current<sp/>value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnCount<sp/>=<sp/>latchSpawnCount;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>the<sp/>client<sp/>entities<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>entities[<sp/>i<sp/>]<sp/>&amp;&amp;<sp/>entities[<sp/>i<sp/>]-&gt;IsType(<sp/>idPlayer::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>entities[<sp/>i<sp/>]<sp/>)-&gt;Restart();</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>gamestate<sp/>=<sp/>GAMESTATE_ACTIVE;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;--------------------------------------\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="997"><highlight class="normal">}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1000"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1001"><highlight class="comment">idGameLocal::MapRestart</highlight></codeline>
<codeline lineno="1002"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1003"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::MapRestart(<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/><sp/><sp/><sp/>outMsg;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgBuf[MAX_GAME_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/><sp/><sp/><sp/><sp/><sp/>newInfo;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_key_value" kindref="compound">idKeyValue</ref><sp/>*keyval,<sp/>*keyval2;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>isClient<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalMapRestart();</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newInfo<sp/>=<sp/>*cvarSystem-&gt;MoveCVarsToDict(<sp/>CVAR_SERVERINFO<sp/>);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>newInfo.GetNumKeyVals();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyval<sp/>=<sp/>newInfo.GetKeyVal(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyval2<sp/>=<sp/>serverInfo.FindKey(<sp/>keyval-&gt;GetKey()<sp/>);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!keyval2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>select<sp/>set<sp/>of<sp/>si_<sp/>changes<sp/>will<sp/>cause<sp/>a<sp/>full<sp/>restart<sp/>of<sp/>the<sp/>server</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>keyval-&gt;GetValue().Cmp(<sp/>keyval2-&gt;GetValue()<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>!keyval-&gt;GetKey().Cmp(<sp/></highlight><highlight class="stringliteral">&quot;si_pure&quot;</highlight><highlight class="normal"><sp/>)<sp/>||<sp/>!keyval-&gt;GetKey().Cmp(<sp/></highlight><highlight class="stringliteral">&quot;si_map&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmdSystem-&gt;BufferCommandText(<sp/>CMD_EXEC_NOW,<sp/></highlight><highlight class="stringliteral">&quot;rescanSI&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>!=<sp/>newInfo.GetNumKeyVals()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmdSystem-&gt;BufferCommandText(<sp/>CMD_EXEC_APPEND,<sp/></highlight><highlight class="stringliteral">&quot;nextMap&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteByte(<sp/>GAME_RELIABLE_MESSAGE_RESTART<sp/>);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteBits(<sp/>1,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteDeltaDict(<sp/>serverInfo,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>networkSystem-&gt;ServerSendReliableMessage(<sp/>-1,<sp/>outMsg<sp/>);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalMapRestart();</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpGame.MapRestart();</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1044"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1045"><highlight class="comment">idGameLocal::MapRestart_f</highlight></codeline>
<codeline lineno="1046"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1047"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::MapRestart_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!gameLocal.isMultiplayer<sp/>||<sp/>gameLocal.isClient<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;server<sp/>is<sp/>not<sp/>running<sp/>-<sp/>use<sp/>spawnServer\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmdSystem-&gt;BufferCommandText(<sp/>CMD_EXEC_APPEND,<sp/></highlight><highlight class="stringliteral">&quot;spawnServer\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.MapRestart(<sp/>);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1059"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1060"><highlight class="comment">idGameLocal::NextMap</highlight></codeline>
<codeline lineno="1061"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1062"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idGameLocal::NextMap(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfunction__t" kindref="compound">function_t</ref><sp/><sp/><sp/><sp/>*func;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*thread;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newInfo;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_key_value" kindref="compound">idKeyValue</ref><sp/><sp/><sp/><sp/>*keyval,<sp/>*keyval2;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!g_mapCycle.GetString()[0]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Printf(<sp/>common-&gt;GetLanguageDict()-&gt;GetString(<sp/></highlight><highlight class="stringliteral">&quot;#str_04294&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fileSystem-&gt;ReadFile(<sp/>g_mapCycle.GetString(),<sp/>NULL,<sp/>NULL<sp/>)<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fileSystem-&gt;ReadFile(<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;%s.scriptcfg&quot;</highlight><highlight class="normal">,<sp/>g_mapCycle.GetString()<sp/>),<sp/>NULL,<sp/>NULL<sp/>)<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;map<sp/>cycle<sp/>script<sp/>&apos;%s&apos;:<sp/>not<sp/>found\n&quot;</highlight><highlight class="normal">,<sp/>g_mapCycle.GetString()<sp/>);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_mapCycle.SetString(<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;%s.scriptcfg&quot;</highlight><highlight class="normal">,<sp/>g_mapCycle.GetString()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;map<sp/>cycle<sp/>script:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>g_mapCycle.GetString()<sp/>);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>func<sp/>=<sp/>program.FindFunction(<sp/></highlight><highlight class="stringliteral">&quot;mapcycle::cycle&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!func<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>program.CompileFile(<sp/>g_mapCycle.GetString()<sp/>);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func<sp/>=<sp/>program.FindFunction(<sp/></highlight><highlight class="stringliteral">&quot;mapcycle::cycle&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!func<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>find<sp/>mapcycle::cycle\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>thread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>(<sp/>func<sp/>);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>thread-&gt;Start();</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>thread;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>newInfo<sp/>=<sp/>*cvarSystem-&gt;MoveCVarsToDict(<sp/>CVAR_SERVERINFO<sp/>);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>newInfo.GetNumKeyVals();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyval<sp/>=<sp/>newInfo.GetKeyVal(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyval2<sp/>=<sp/>serverInfo.FindKey(<sp/>keyval-&gt;GetKey()<sp/>);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!keyval2<sp/>||<sp/>keyval-&gt;GetValue().Cmp(<sp/>keyval2-&gt;GetValue()<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>!=<sp/>newInfo.GetNumKeyVals()<sp/>);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1109"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1110"><highlight class="comment">idGameLocal::NextMap_f</highlight></codeline>
<codeline lineno="1111"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1112"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::NextMap_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!gameLocal.isMultiplayer<sp/>||<sp/>gameLocal.isClient<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;server<sp/>is<sp/>not<sp/>running\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.NextMap(<sp/>);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>next<sp/>map<sp/>was<sp/>either<sp/>voted<sp/>for<sp/>or<sp/>triggered<sp/>by<sp/>a<sp/>server<sp/>command<sp/>-<sp/>always<sp/>restart</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.MapRestart(<sp/>);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1125"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1126"><highlight class="comment">idGameLocal::MapPopulate</highlight></codeline>
<codeline lineno="1127"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1128"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::MapPopulate(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>isMultiplayer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvarSystem-&gt;SetCVarBool(<sp/></highlight><highlight class="stringliteral">&quot;r_skipSpecular&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>the<sp/>key/value<sp/>pairs<sp/>and<sp/>spawn<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/>SpawnMapEntities();</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mark<sp/>location<sp/>entities<sp/>in<sp/>all<sp/>connected<sp/>areas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/>SpreadLocations();</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prepare<sp/>the<sp/>list<sp/>of<sp/>randomized<sp/>initial<sp/>spawn<sp/>spots</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>RandomizeInitialSpawns();</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>spawnCount<sp/>-<sp/>1<sp/>is<sp/>the<sp/>number<sp/>of<sp/>entities<sp/>spawned<sp/>into<sp/>the<sp/>map,<sp/>their<sp/>indexes<sp/>started<sp/>at<sp/>MAX_CLIENTS<sp/>(included)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mapSpawnCount<sp/>is<sp/>used<sp/>as<sp/>the<sp/>max<sp/>index<sp/>of<sp/>map<sp/>entities,<sp/>it&apos;s<sp/>the<sp/>first<sp/>index<sp/>of<sp/>non-map<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>mapSpawnCount<sp/>=<sp/>MAX_CLIENTS<sp/>+<sp/>spawnCount<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>execute<sp/>pending<sp/>events<sp/>before<sp/>the<sp/>very<sp/>first<sp/>game<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>makes<sp/>sure<sp/>the<sp/>map<sp/>script<sp/>main()<sp/>function<sp/>is<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>the<sp/>physics<sp/>are<sp/>run<sp/>so<sp/>entities<sp/>can<sp/>bind<sp/>correctly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;====<sp/>Processing<sp/>events<sp/>====\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>idEvent::ServiceEvents();</highlight></codeline>
<codeline lineno="1152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1155"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1156"><highlight class="comment">idGameLocal::InitFromNewMap</highlight></codeline>
<codeline lineno="1157"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1158"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::InitFromNewMap(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mapName,<sp/><ref refid="classid_render_world" kindref="compound">idRenderWorld</ref><sp/>*renderWorld,<sp/><ref refid="classid_sound_world" kindref="compound">idSoundWorld</ref><sp/>*soundWorld,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isServer,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isClient,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>randseed<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;isServer<sp/>=<sp/>isServer;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;isClient<sp/>=<sp/>isClient;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;isMultiplayer<sp/>=<sp/>isServer<sp/>||<sp/>isClient;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mapFileName.Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MapShutdown();</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;-----------<sp/>Game<sp/>Map<sp/>Init<sp/>------------\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>gamestate<sp/>=<sp/>GAMESTATE_STARTUP;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld<sp/>=<sp/>renderWorld;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>gameSoundWorld<sp/>=<sp/>soundWorld;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>LoadMap(<sp/>mapName,<sp/>randseed<sp/>);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>InitScriptForMap();</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>MapPopulate();</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>mpGame.Reset();</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>mpGame.Precache();</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>up<sp/>any<sp/>unused<sp/>animations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>animationLib.FlushUnusedAnims();</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>gamestate<sp/>=<sp/>GAMESTATE_ACTIVE;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;--------------------------------------\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1195"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="1196"><highlight class="comment">idGameLocal::InitFromSaveGame</highlight></codeline>
<codeline lineno="1197"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="1198"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idGameLocal::InitFromSaveGame(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mapName,<sp/><ref refid="classid_render_world" kindref="compound">idRenderWorld</ref><sp/>*renderWorld,<sp/><ref refid="classid_sound_world" kindref="compound">idSoundWorld</ref><sp/>*soundWorld,<sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*saveGameFile<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>si;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mapFileName.Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MapShutdown();</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;-------<sp/>Game<sp/>Map<sp/>Init<sp/>SaveGame<sp/>-------\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>gamestate<sp/>=<sp/>GAMESTATE_STARTUP;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld<sp/>=<sp/>renderWorld;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/>gameSoundWorld<sp/>=<sp/>soundWorld;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_restore_game" kindref="compound">idRestoreGame</ref><sp/>savegame(<sp/>saveGameFile<sp/>);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadBuildNumber();</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>list<sp/>of<sp/>all<sp/>objects<sp/>in<sp/>the<sp/>game</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.CreateObjects();</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>the<sp/>idProgram,<sp/>also<sp/>checking<sp/>to<sp/>make<sp/>sure<sp/>scripting<sp/>hasn&apos;t<sp/>changed<sp/>since<sp/>the<sp/>savegame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>program.Restore(<sp/>&amp;savegame<sp/>)<sp/>==<sp/>false<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Abort<sp/>the<sp/>load<sp/>process,<sp/>and<sp/>let<sp/>the<sp/>session<sp/>know<sp/>so<sp/>that<sp/>it<sp/>can<sp/>restart<sp/>the<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>player<sp/>persistent<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.DeleteObjects();</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>program.Restart();</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>the<sp/>map<sp/>needed<sp/>for<sp/>this<sp/>savegame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>LoadMap(<sp/>mapName,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>g_skill.SetInteger(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>precache<sp/>the<sp/>player</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>FindEntityDef(<sp/></highlight><highlight class="stringliteral">&quot;player_doommarine&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>precache<sp/>any<sp/>media<sp/>specified<sp/>in<sp/>the<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mapFile-&gt;GetNumEntities();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_map_entity" kindref="compound">idMapEntity</ref><sp/>*mapEnt<sp/>=<sp/>mapFile-&gt;GetEntity(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!InhibitEntitySpawn(<sp/>mapEnt-&gt;epairs<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CacheDictionaryMedia(<sp/>&amp;mapEnt-&gt;epairs<sp/>);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*classname<sp/>=<sp/>mapEnt-&gt;epairs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;classname&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>classname<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FindEntityDef(<sp/>classname,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadDict(<sp/>&amp;si<sp/>);</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>SetServerInfo(<sp/>si<sp/>);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>numClients<sp/>);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numClients;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.ReadDict(<sp/>&amp;userInfo[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.ReadUsercmd(<sp/>usercmds[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.ReadDict(<sp/>&amp;persistentPlayerInfo[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_GENTITIES;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.ReadObject(<sp/>reinterpret_cast&lt;idClass<sp/>*&amp;&gt;(<sp/>entities[<sp/>i<sp/>]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>spawnIds[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>the<sp/>entityNumber</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>entities[<sp/>i<sp/>]<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entities[<sp/>i<sp/>]-&gt;entityNumber<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>firstFreeIndex<sp/>);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>num_entities<sp/>);</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enityHash<sp/>is<sp/>restored<sp/>by<sp/>idEntity::Restore<sp/>setting<sp/>the<sp/>entity<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadObject(<sp/>reinterpret_cast&lt;idClass<sp/>*&amp;&gt;(<sp/>world<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.ReadObject(<sp/>reinterpret_cast&lt;idClass<sp/>*&amp;&gt;(<sp/>ent<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>ent<sp/>);</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;spawnNode.AddToEnd(<sp/>spawnedEntities<sp/>);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.ReadObject(<sp/>reinterpret_cast&lt;idClass<sp/>*&amp;&gt;(<sp/>ent<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>ent<sp/>);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;activeNode.AddToEnd(<sp/>activeEntities<sp/>);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>numEntitiesToDeactivate<sp/>);</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadBool(<sp/>sortPushers<sp/>);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadBool(<sp/>sortTeamMasters<sp/>);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadDict(<sp/>&amp;persistentLevelInfo<sp/>);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_GLOBAL_SHADER_PARMS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.ReadFloat(<sp/>globalShaderParms[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/>random.SetSeed(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadObject(<sp/>reinterpret_cast&lt;idClass<sp/>*&amp;&gt;(<sp/>frameCommandThread<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pvs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>testmodel<sp/>=<sp/>&quot;&lt;NULL&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>testFx<sp/>=<sp/>&quot;&lt;NULL&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadString(<sp/>sessionCommand<sp/>);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>save<sp/>smoke<sp/>particles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>cinematicSkipTime<sp/>);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>cinematicStopTime<sp/>);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>cinematicMaxSkipTime<sp/>);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadBool(<sp/>inCinematic<sp/>);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadBool(<sp/>skipCinematic<sp/>);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadBool(<sp/>isMultiplayer<sp/>);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;)gameType<sp/>);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>framenum<sp/>);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>previousTime<sp/>);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>vacuumAreaNum<sp/>);</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>entityDefBits<sp/>);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadBool(<sp/>isServer<sp/>);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadBool(<sp/>isClient<sp/>);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>localClientNum<sp/>);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>snapshotEntities<sp/>is<sp/>used<sp/>for<sp/>multiplayer<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>realClientTime<sp/>);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadBool(<sp/>isNewFrame<sp/>);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadFloat(<sp/>clientSmoothing<sp/>);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadBool(<sp/>mapCycleLoaded<sp/>);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>spawnCount<sp/>);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>num<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>num<sp/>!=<sp/>gameRenderWorld-&gt;NumAreas()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.Error(<sp/></highlight><highlight class="stringliteral">&quot;idGameLocal::InitFromSaveGame:<sp/>number<sp/>of<sp/>areas<sp/>in<sp/>map<sp/>differs<sp/>from<sp/>save<sp/>game.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>locationEntities<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_location_entity" kindref="compound">idLocationEntity</ref><sp/>*[<sp/>num<sp/>];</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>savegame.ReadObject(<sp/>reinterpret_cast&lt;idClass<sp/>*&amp;&gt;(<sp/>locationEntities[<sp/>i<sp/>]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadObject(<sp/>reinterpret_cast&lt;idClass<sp/>*&amp;&gt;(<sp/>camera<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadMaterial(<sp/>globalMaterial<sp/>);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>lastAIAlertEntity.Restore(<sp/>&amp;savegame<sp/>);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>lastAIAlertTime<sp/>);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadDict(<sp/>&amp;spawnArgs<sp/>);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>playerPVS.i<sp/>);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;)playerPVS.h<sp/>);</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>playerConnectedAreas.i<sp/>);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;)playerConnectedAreas.h<sp/>);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadVec3(<sp/>gravity<sp/>);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gamestate<sp/>is<sp/>restored<sp/>after<sp/>restoring<sp/>everything<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadBool(<sp/>influenceActive<sp/>);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.ReadInt(<sp/>nextGibTime<sp/>);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>spawnSpots</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialSpots</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>currentInitialSpot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>newInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>makingBuild</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shakeSounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>out<sp/>pending<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/>idEvent::Restore(<sp/>&amp;savegame<sp/>);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>savegame.RestoreObjects();</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>mpGame.Reset();</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/>mpGame.Precache();</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>up<sp/>any<sp/>unused<sp/>animations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>animationLib.FlushUnusedAnims();</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/>gamestate<sp/>=<sp/>GAMESTATE_ACTIVE;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;--------------------------------------\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1416"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="1417"><highlight class="comment">idGameLocal::MapClear</highlight></codeline>
<codeline lineno="1418"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="1419"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::MapClear(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clearClients<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>(<sp/>clearClients<sp/>?<sp/>0<sp/>:<sp/>MAX_CLIENTS<sp/>);<sp/>i<sp/>&lt;<sp/>MAX_GENTITIES;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>entities[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>~idEntity<sp/>is<sp/>in<sp/>charge<sp/>of<sp/>setting<sp/>the<sp/>pointer<sp/>to<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>also<sp/>clear<sp/>pending<sp/>events<sp/>for<sp/>this<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>!entities[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spawnIds[<sp/>i<sp/>]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/>entityHash.Clear(<sp/>1024,<sp/>MAX_GENTITIES<sp/>);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!clearClients<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>back<sp/>the<sp/>hashes<sp/>of<sp/>the<sp/>clients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_CLIENTS;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!entities[<sp/>i<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entityHash.Add(<sp/>entityHash.GenerateKey(<sp/>entities[<sp/>i<sp/>]-&gt;name.c_str(),<sp/>true<sp/>),<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>frameCommandThread;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>frameCommandThread<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>editEntities<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>editEntities;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>editEntities<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>locationEntities;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/>locationEntities<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1456"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="1457"><highlight class="comment">idGameLocal::MapShutdown</highlight></codeline>
<codeline lineno="1458"><highlight class="comment">============</highlight></codeline>
<codeline lineno="1459"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::MapShutdown(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;---------<sp/>Game<sp/>Map<sp/>Shutdown<sp/>----------\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>gamestate<sp/>=<sp/>GAMESTATE_SHUTDOWN;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameRenderWorld<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>any<sp/>debug<sp/>lines,<sp/>text,<sp/>and<sp/>polygons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugClearLines(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugClearPolygons(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>out<sp/>camera<sp/>if<sp/>we&apos;re<sp/>in<sp/>a<sp/>cinematic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>inCinematic<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>camera<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inCinematic<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>MapClear(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>the<sp/>script<sp/>to<sp/>the<sp/>state<sp/>it<sp/>was<sp/>before<sp/>the<sp/>map<sp/>was<sp/>started</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>program.Restart();</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>smokeParticles<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smokeParticles-&gt;Shutdown();</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>pvs.Shutdown();</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>clip.Shutdown();</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>idClipModel::ClearTraceModelCache();</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>ShutdownAsyncNetwork();</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/>mapFileName.Clear();</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/>gameSoundWorld<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/>gamestate<sp/>=<sp/>GAMESTATE_NOMAP;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;--------------------------------------\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1504"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1505"><highlight class="comment">idGameLocal::DumpOggSounds</highlight></codeline>
<codeline lineno="1506"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1507"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::DumpOggSounds(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k,<sp/>size,<sp/>totalSize;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_file" kindref="compound">idFile</ref><sp/>*file;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_list" kindref="compound">idStrList</ref><sp/>oggSounds,<sp/>weaponSounds;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_sound_shader" kindref="compound">idSoundShader</ref><sp/>*soundShader;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsound_shader_parms__t" kindref="compound">soundShaderParms_t</ref><sp/>*parms;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>soundName;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>declManager-&gt;GetNumDecls(<sp/>DECL_SOUND<sp/>);<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soundShader<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classid_sound_shader" kindref="compound">idSoundShader</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(declManager-&gt;DeclByIndex(<sp/>DECL_SOUND,<sp/>i,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>));</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parms<sp/>=<sp/>soundShader-&gt;GetParms();</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>soundShader-&gt;EverReferenced()<sp/>&amp;&amp;<sp/>soundShader-&gt;GetState()<sp/>!=<sp/>DS_DEFAULTED<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classid_sound_shader" kindref="compound">idSoundShader</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(soundShader)-&gt;EnsureNotPurged();</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>soundShader-&gt;GetNumSounds();<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soundName<sp/>=<sp/>soundShader-&gt;GetSound(<sp/>j<sp/>);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soundName.BackSlashesToSlashes();</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>OGG<sp/>sounds<sp/>that<sp/>cause<sp/>a<sp/>shake<sp/>because<sp/>that<sp/>would</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cause<sp/>continuous<sp/>seeking<sp/>on<sp/>the<sp/>OGG<sp/>file<sp/>which<sp/>is<sp/>expensive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>parms-&gt;shakes<sp/>!=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shakeSounds.AddUnique(<sp/>soundName<sp/>);</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>not<sp/>voice<sp/>over<sp/>or<sp/>combat<sp/>chatter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/>soundName.Find(<sp/></highlight><highlight class="stringliteral">&quot;/vo/&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>-1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soundName.Find(<sp/></highlight><highlight class="stringliteral">&quot;/combat_chatter/&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>-1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soundName.Find(<sp/></highlight><highlight class="stringliteral">&quot;/bfgcarnage/&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>-1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soundName.Find(<sp/></highlight><highlight class="stringliteral">&quot;/enpro/&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>-<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soundName.Find(<sp/></highlight><highlight class="stringliteral">&quot;/soulcube/energize_01.wav&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>OGG<sp/>weapon<sp/>sounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/>soundName.Find(<sp/></highlight><highlight class="stringliteral">&quot;weapon&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)<sp/>!=<sp/>-1<sp/>||</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soundName.Find(<sp/></highlight><highlight class="stringliteral">&quot;gun&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)<sp/>!=<sp/>-1<sp/>||</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soundName.Find(<sp/></highlight><highlight class="stringliteral">&quot;bullet&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)<sp/>!=<sp/>-1<sp/>||</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soundName.Find(<sp/></highlight><highlight class="stringliteral">&quot;bfg&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)<sp/>!=<sp/>-1<sp/>||</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soundName.Find(<sp/></highlight><highlight class="stringliteral">&quot;plasma&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)<sp/>!=<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weaponSounds.AddUnique(<sp/>soundName<sp/>);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>shakeSounds.Num();<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>shakeSounds[k].IcmpPath(<sp/>soundName<sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>k<sp/>&lt;<sp/>shakeSounds.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oggSounds.AddUnique(<sp/>soundName<sp/>);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/>file<sp/>=<sp/>fileSystem-&gt;OpenFileWrite(<sp/></highlight><highlight class="stringliteral">&quot;makeogg.bat&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;fs_savepath&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>file<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>open<sp/>makeogg.bat&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>list<sp/>all<sp/>the<sp/>shake<sp/>sounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/>totalSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>shakeSounds.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>fileSystem-&gt;ReadFile(<sp/>shakeSounds[i],<sp/>NULL,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalSize<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shakeSounds[i].Replace(<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\\&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;echo<sp/>\&quot;%s\&quot;<sp/>(%d<sp/>kB)\n&quot;</highlight><highlight class="normal">,<sp/>shakeSounds[i].c_str(),<sp/>size<sp/>&gt;&gt;<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>file-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;echo<sp/>%d<sp/>kB<sp/>in<sp/>shake<sp/>sounds\n\n\n&quot;</highlight><highlight class="normal">,<sp/>totalSize<sp/>&gt;&gt;<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>list<sp/>all<sp/>the<sp/>weapon<sp/>sounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>totalSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>weaponSounds.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>fileSystem-&gt;ReadFile(<sp/>weaponSounds[i],<sp/>NULL,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalSize<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weaponSounds[i].Replace(<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\\&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;echo<sp/>\&quot;%s\&quot;<sp/>(%d<sp/>kB)\n&quot;</highlight><highlight class="normal">,<sp/>weaponSounds[i].c_str(),<sp/>size<sp/>&gt;&gt;<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/>file-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;echo<sp/>%d<sp/>kB<sp/>in<sp/>weapon<sp/>sounds\n\n\n&quot;</highlight><highlight class="normal">,<sp/>totalSize<sp/>&gt;&gt;<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>list<sp/>commands<sp/>to<sp/>convert<sp/>all<sp/>other<sp/>sounds<sp/>to<sp/>ogg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/>totalSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>oggSounds.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>fileSystem-&gt;ReadFile(<sp/>oggSounds[i],<sp/>NULL,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalSize<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oggSounds[i].Replace(<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\\&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;w:\\doom\\ogg\\oggenc<sp/>-q<sp/>0<sp/>\&quot;c:\\doom\\base\\%s\&quot;\n&quot;</highlight><highlight class="normal">,<sp/>oggSounds[i].c_str()<sp/>);</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;del<sp/>\&quot;c:\\doom\\base\\%s\&quot;\n&quot;</highlight><highlight class="normal">,<sp/>oggSounds[i].c_str()<sp/>);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/>file-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;\n\necho<sp/>%d<sp/>kB<sp/>in<sp/>OGG<sp/>sounds\n\n\n&quot;</highlight><highlight class="normal">,<sp/>totalSize<sp/>&gt;&gt;<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/>fileSystem-&gt;CloseFile(<sp/>file<sp/>);</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>shakeSounds.Clear();</highlight></codeline>
<codeline lineno="1606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1609"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1610"><highlight class="comment">idGameLocal::GetShakeSounds</highlight></codeline>
<codeline lineno="1611"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1612"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::GetShakeSounds(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>*dict<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_sound_shader" kindref="compound">idSoundShader</ref><sp/>*soundShader;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*soundShaderName;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>soundName;</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>soundShaderName<sp/>=<sp/>dict-&gt;GetString(<sp/></highlight><highlight class="stringliteral">&quot;s_shader&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>soundShaderName<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>dict-&gt;GetFloat(<sp/></highlight><highlight class="stringliteral">&quot;s_shakes&quot;</highlight><highlight class="normal"><sp/>)<sp/>!=<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soundShader<sp/>=<sp/>declManager-&gt;FindSound(<sp/>soundShaderName<sp/>);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>soundShader-&gt;GetNumSounds();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soundName<sp/>=<sp/>soundShader-&gt;GetSound(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soundName.BackSlashesToSlashes();</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shakeSounds.AddUnique(<sp/>soundName<sp/>);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1632"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1633"><highlight class="comment">idGameLocal::CacheDictionaryMedia</highlight></codeline>
<codeline lineno="1634"><highlight class="comment"></highlight></codeline>
<codeline lineno="1635"><highlight class="comment">This<sp/>is<sp/>called<sp/>after<sp/>parsing<sp/>an<sp/>EntityDef<sp/>and<sp/>for<sp/>each<sp/>entity<sp/>spawnArgs<sp/>before</highlight></codeline>
<codeline lineno="1636"><highlight class="comment">merging<sp/>the<sp/>entitydef.<sp/><sp/>It<sp/>could<sp/>be<sp/>done<sp/>post-merge,<sp/>but<sp/>that<sp/>would</highlight></codeline>
<codeline lineno="1637"><highlight class="comment">avoid<sp/>the<sp/>fast<sp/>pre-cache<sp/>check<sp/>associated<sp/>with<sp/>each<sp/>entityDef</highlight></codeline>
<codeline lineno="1638"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="1639"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::CacheDictionaryMedia(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>*dict<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_key_value" kindref="compound">idKeyValue</ref><sp/>*kv;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dict<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cvarSystem-&gt;GetCVarBool(<sp/></highlight><highlight class="stringliteral">&quot;com_makingBuild&quot;</highlight><highlight class="normal">)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DumpOggSounds();</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cvarSystem-&gt;GetCVarBool(<sp/></highlight><highlight class="stringliteral">&quot;com_makingBuild&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetShakeSounds(<sp/>dict<sp/>);</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;model&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>kv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>kv-&gt;GetValue().Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declManager-&gt;MediaPrint(<sp/></highlight><highlight class="stringliteral">&quot;Precaching<sp/>model<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>kv-&gt;GetValue().c_str()<sp/>);</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>precache<sp/>model/animations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>declManager-&gt;FindType(<sp/>DECL_MODELDEF,<sp/>kv-&gt;GetValue(),<sp/>false<sp/>)<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>precache<sp/>the<sp/>render<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderModelManager-&gt;FindModel(<sp/>kv-&gt;GetValue()<sp/>);</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>precache<sp/>.cm<sp/>files<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collisionModelManager-&gt;LoadModel(<sp/>kv-&gt;GetValue(),<sp/>true<sp/>);</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;model&quot;</highlight><highlight class="normal">,<sp/>kv<sp/>);</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;FindKey(<sp/></highlight><highlight class="stringliteral">&quot;s_shader&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>kv<sp/>&amp;&amp;<sp/>kv-&gt;GetValue().Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declManager-&gt;FindType(<sp/>DECL_SOUND,<sp/>kv-&gt;GetValue()<sp/>);</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;snd&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>kv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>kv-&gt;GetValue().Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declManager-&gt;FindType(<sp/>DECL_SOUND,<sp/>kv-&gt;GetValue()<sp/>);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;snd&quot;</highlight><highlight class="normal">,<sp/>kv<sp/>);</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;gui&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>kv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>kv-&gt;GetValue().Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idStr::Icmp(<sp/>kv-&gt;GetKey(),<sp/></highlight><highlight class="stringliteral">&quot;gui_noninteractive&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>!idStr::Icmpn(<sp/>kv-&gt;GetKey(),<sp/></highlight><highlight class="stringliteral">&quot;gui_parm&quot;</highlight><highlight class="normal">,<sp/>8<sp/>)<sp/></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>!idStr::Icmp(<sp/>kv-&gt;GetKey(),<sp/></highlight><highlight class="stringliteral">&quot;gui_inventory&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unfortunate<sp/>flag<sp/>names,<sp/>they<sp/>aren&apos;t<sp/>actually<sp/>a<sp/>gui</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declManager-&gt;MediaPrint(<sp/></highlight><highlight class="stringliteral">&quot;Precaching<sp/>gui<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>kv-&gt;GetValue().c_str()<sp/>);</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_user_interface" kindref="compound">idUserInterface</ref><sp/>*gui<sp/>=<sp/>uiManager-&gt;Alloc();</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gui<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gui-&gt;InitFromFile(<sp/>kv-&gt;GetValue()<sp/>);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uiManager-&gt;DeAlloc(<sp/>gui<sp/>);</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;gui&quot;</highlight><highlight class="normal">,<sp/>kv<sp/>);</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;FindKey(<sp/></highlight><highlight class="stringliteral">&quot;texture&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>kv<sp/>&amp;&amp;<sp/>kv-&gt;GetValue().Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declManager-&gt;FindType(<sp/>DECL_MATERIAL,<sp/>kv-&gt;GetValue()<sp/>);</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;mtr&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>kv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>kv-&gt;GetValue().Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declManager-&gt;FindType(<sp/>DECL_MATERIAL,<sp/>kv-&gt;GetValue()<sp/>);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;mtr&quot;</highlight><highlight class="normal">,<sp/>kv<sp/>);</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handles<sp/>hud<sp/>icons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;inv_icon&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>kv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>kv-&gt;GetValue().Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declManager-&gt;FindType(<sp/>DECL_MATERIAL,<sp/>kv-&gt;GetValue()<sp/>);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;inv_icon&quot;</highlight><highlight class="normal">,<sp/>kv<sp/>);</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handles<sp/>teleport<sp/>fx..<sp/>this<sp/>is<sp/>not<sp/>ideal<sp/>but<sp/>the<sp/>actual<sp/>decision<sp/>on<sp/>which<sp/>fx<sp/>to<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>handled<sp/>by<sp/>script<sp/>code<sp/>based<sp/>on<sp/>the<sp/>teleport<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;teleport&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>kv<sp/>&amp;&amp;<sp/>kv-&gt;GetValue().Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>teleportType<sp/>=<sp/>atoi(<sp/>kv-&gt;GetValue()<sp/>);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>(<sp/>teleportType<sp/>)<sp/>?<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;fx/teleporter%i.fx&quot;</highlight><highlight class="normal">,<sp/>teleportType<sp/>)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;fx/teleporter.fx&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declManager-&gt;FindType(<sp/>DECL_FX,<sp/>p<sp/>);</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;fx&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>kv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>kv-&gt;GetValue().Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declManager-&gt;MediaPrint(<sp/></highlight><highlight class="stringliteral">&quot;Precaching<sp/>fx<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>kv-&gt;GetValue().c_str()<sp/>);</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declManager-&gt;FindType(<sp/>DECL_FX,<sp/>kv-&gt;GetValue()<sp/>);</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;fx&quot;</highlight><highlight class="normal">,<sp/>kv<sp/>);</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;smoke&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>kv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>kv-&gt;GetValue().Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>prtName<sp/>=<sp/>kv-&gt;GetValue();</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dash<sp/>=<sp/>prtName.Find(</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dash<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prtName<sp/>=<sp/>prtName.Left(<sp/>dash<sp/>);</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declManager-&gt;FindType(<sp/>DECL_PARTICLE,<sp/>prtName<sp/>);</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;smoke&quot;</highlight><highlight class="normal">,<sp/>kv<sp/>);</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;skin&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>kv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>kv-&gt;GetValue().Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declManager-&gt;MediaPrint(<sp/></highlight><highlight class="stringliteral">&quot;Precaching<sp/>skin<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>kv-&gt;GetValue().c_str()<sp/>);</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declManager-&gt;FindType(<sp/>DECL_SKIN,<sp/>kv-&gt;GetValue()<sp/>);</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;skin&quot;</highlight><highlight class="normal">,<sp/>kv<sp/>);</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;def&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>kv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>kv-&gt;GetValue().Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FindEntityDef(<sp/>kv-&gt;GetValue().c_str(),<sp/>false<sp/>);</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;def&quot;</highlight><highlight class="normal">,<sp/>kv<sp/>);</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;pda_name&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>kv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>kv-&gt;GetValue().Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declManager-&gt;FindType(<sp/>DECL_PDA,<sp/>kv-&gt;GetValue().c_str(),<sp/>false<sp/>);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;pda_name&quot;</highlight><highlight class="normal">,<sp/>kv<sp/>);</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;video&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>kv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>kv-&gt;GetValue().Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declManager-&gt;FindType(<sp/>DECL_VIDEO,<sp/>kv-&gt;GetValue().c_str(),<sp/>false<sp/>);</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;video&quot;</highlight><highlight class="normal">,<sp/>kv<sp/>);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;audio&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>kv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>kv-&gt;GetValue().Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declManager-&gt;FindType(<sp/>DECL_AUDIO,<sp/>kv-&gt;GetValue().c_str(),<sp/>false<sp/>);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kv<sp/>=<sp/>dict-&gt;MatchPrefix(<sp/></highlight><highlight class="stringliteral">&quot;audio&quot;</highlight><highlight class="normal">,<sp/>kv<sp/>);</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1798"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="1799"><highlight class="comment">idGameLocal::InitScriptForMap</highlight></codeline>
<codeline lineno="1800"><highlight class="comment">============</highlight></codeline>
<codeline lineno="1801"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::InitScriptForMap(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>thread<sp/>to<sp/>run<sp/>frame<sp/>commands<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/>frameCommandThread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>();</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/>frameCommandThread-&gt;ManualDelete();</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/>frameCommandThread-&gt;SetThreadName(<sp/></highlight><highlight class="stringliteral">&quot;frameCommands&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>the<sp/>main<sp/>game<sp/>script<sp/>function<sp/>(not<sp/>the<sp/>level<sp/>specific<sp/>main)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfunction__t" kindref="compound">function_t</ref><sp/>*func<sp/>=<sp/>program.FindFunction(<sp/>SCRIPT_DEFAULTFUNC<sp/>);</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>func<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/>*thread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>(<sp/>func<sp/>);</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>thread-&gt;Start()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>thread<sp/>has<sp/>finished<sp/>executing,<sp/>so<sp/>delete<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>thread;</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1820"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="1821"><highlight class="comment">idGameLocal::SpawnPlayer</highlight></codeline>
<codeline lineno="1822"><highlight class="comment">============</highlight></codeline>
<codeline lineno="1823"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::SpawnPlayer(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/><sp/><sp/><sp/>*ent;</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/><sp/><sp/><sp/><sp/><sp/>args;</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>they<sp/>can<sp/>connect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;SpawnPlayer:<sp/>%i\n&quot;</highlight><highlight class="normal">,<sp/>clientNum<sp/>);</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/>args.SetInt(<sp/></highlight><highlight class="stringliteral">&quot;spawn_entnum&quot;</highlight><highlight class="normal">,<sp/>clientNum<sp/>);</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/>args.Set(<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;player%d&quot;</highlight><highlight class="normal">,<sp/>clientNum<sp/>+<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/>args.Set(<sp/></highlight><highlight class="stringliteral">&quot;classname&quot;</highlight><highlight class="normal">,<sp/>isMultiplayer<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;player_doommarine_mp&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;player_doommarine&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!SpawnEntityDef(<sp/>args,<sp/>&amp;ent<sp/>)<sp/>||<sp/>!entities[<sp/>clientNum<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>spawn<sp/>player<sp/>as<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>args.GetString(<sp/></highlight><highlight class="stringliteral">&quot;classname&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>it&apos;s<sp/>a<sp/>compatible<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ent-&gt;IsType(<sp/>idPlayer::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;&apos;%s&apos;<sp/>spawned<sp/>the<sp/>player<sp/>as<sp/>a<sp/>&apos;%s&apos;.<sp/><sp/>Player<sp/>spawnclass<sp/>must<sp/>be<sp/>a<sp/>subclass<sp/>of<sp/>idPlayer.&quot;</highlight><highlight class="normal">,<sp/>args.GetString(<sp/></highlight><highlight class="stringliteral">&quot;classname&quot;</highlight><highlight class="normal"><sp/>),<sp/>ent-&gt;GetClassname()<sp/>);</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clientNum<sp/>&gt;=<sp/>numClients<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numClients<sp/>=<sp/>clientNum<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/>mpGame.SpawnPlayer(<sp/>clientNum<sp/>);</highlight></codeline>
<codeline lineno="1848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1851"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1852"><highlight class="comment">idGameLocal::GetClientByNum</highlight></codeline>
<codeline lineno="1853"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1854"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*idGameLocal::GetClientByNum(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>current<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>current<sp/>&lt;<sp/>0<sp/>||<sp/>current<sp/>&gt;=<sp/>numClients<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>entities[current]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>entities[<sp/>current<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1866"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1867"><highlight class="comment">idGameLocal::GetClientByName</highlight></codeline>
<codeline lineno="1868"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1869"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*idGameLocal::GetClientByName(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>numClients<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>entities[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>&amp;&amp;<sp/>ent-&gt;IsType(<sp/>idPlayer::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idStr::IcmpNoColor(<sp/>name,<sp/>userInfo[<sp/>i<sp/>].GetString(<sp/></highlight><highlight class="stringliteral">&quot;ui_name&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>ent<sp/>);</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1882"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1885"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1886"><highlight class="comment">idGameLocal::GetClientByCmdArgs</highlight></codeline>
<codeline lineno="1887"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1888"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*idGameLocal::GetClientByCmdArgs(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*player;</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>client<sp/>=<sp/>args.Argv(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!client.Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>don&apos;t<sp/>allow<sp/>numeric<sp/>ui_name<sp/>so<sp/>this<sp/>can&apos;t<sp/>go<sp/>wrong</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client.IsNumeric()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>player<sp/>=<sp/>GetClientByNum(<sp/>atoi(<sp/>client.c_str()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>player<sp/>=<sp/>GetClientByName(<sp/>client.c_str()<sp/>);</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!player<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;Player<sp/>&apos;%s&apos;<sp/>not<sp/>found\n&quot;</highlight><highlight class="normal">,<sp/>client.c_str()<sp/>);</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>player;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1908"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1909"><highlight class="comment">idGameLocal::GetNextClientNum</highlight></codeline>
<codeline lineno="1910"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1911"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idGameLocal::GetNextClientNum(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_current<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>current;</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numClients;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>(<sp/>_current<sp/>+<sp/>i<sp/>+<sp/>1<sp/>)<sp/>%<sp/>numClients;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>entities[<sp/>current<sp/>]<sp/>&amp;&amp;<sp/>entities[<sp/>current<sp/>]-&gt;IsType(<sp/>idPlayer::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current;</highlight></codeline>
<codeline lineno="1924"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1927"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1928"><highlight class="comment">idGameLocal::GetLocalPlayer</highlight></codeline>
<codeline lineno="1929"><highlight class="comment"></highlight></codeline>
<codeline lineno="1930"><highlight class="comment">Nothing<sp/>in<sp/>the<sp/>game<sp/>tic<sp/>should<sp/>EVER<sp/>make<sp/>a<sp/>decision<sp/>based<sp/>on<sp/>what<sp/>the</highlight></codeline>
<codeline lineno="1931"><highlight class="comment">local<sp/>client<sp/>number<sp/>is,<sp/>it<sp/>shouldn&apos;t<sp/>even<sp/>be<sp/>aware<sp/>that<sp/>there<sp/>is<sp/>a</highlight></codeline>
<codeline lineno="1932"><highlight class="comment">draw<sp/>phase<sp/>even<sp/>happening.<sp/><sp/>This<sp/>just<sp/>returns<sp/>client<sp/>0,<sp/>which<sp/>will</highlight></codeline>
<codeline lineno="1933"><highlight class="comment">be<sp/>correct<sp/>for<sp/>single<sp/>player.</highlight></codeline>
<codeline lineno="1934"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1935"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*idGameLocal::GetLocalPlayer()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>localClientNum<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!entities[<sp/>localClientNum<sp/>]<sp/>||<sp/>!entities[<sp/>localClientNum<sp/>]-&gt;IsType(<sp/>idPlayer::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>fully<sp/>in<sp/>game<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>entities[<sp/>localClientNum<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1949"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1950"><highlight class="comment">idGameLocal::SetupClientPVS</highlight></codeline>
<codeline lineno="1951"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1952"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><ref refid="structpvs_handle__s" kindref="compound">pvsHandle_t</ref><sp/>idGameLocal::GetClientPVS(<sp/><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*player,<sp/>pvsType_t<sp/>type<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>player-&gt;GetPrivateCameraView()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pvs.SetupCurrentPVS(<sp/>player-&gt;GetPrivateCameraView()-&gt;GetPVSAreas(),<sp/>player-&gt;GetPrivateCameraView()-&gt;GetNumPVSAreas()<sp/>);</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>camera<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pvs.SetupCurrentPVS(<sp/>camera-&gt;GetPVSAreas(),<sp/>camera-&gt;GetNumPVSAreas()<sp/>);</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pvs.SetupCurrentPVS(<sp/>player-&gt;GetPVSAreas(),<sp/>player-&gt;GetNumPVSAreas()<sp/>);</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1964"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1965"><highlight class="comment">idGameLocal::SetupPlayerPVS</highlight></codeline>
<codeline lineno="1966"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1967"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::SetupPlayerPVS(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*<sp/><sp/>ent;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*<sp/><sp/>player;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpvs_handle__s" kindref="compound">pvsHandle_t</ref><sp/>otherPVS,<sp/>newPVS;</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/>playerPVS.i<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numClients;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>entities[i];</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ent<sp/>||<sp/>!ent-&gt;IsType(<sp/>idPlayer::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>player<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ent);</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>playerPVS.i<sp/>==<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>playerPVS<sp/>=<sp/>GetClientPVS(<sp/>player,<sp/>PVS_NORMAL<sp/>);</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherPVS<sp/>=<sp/>GetClientPVS(<sp/>player,<sp/>PVS_NORMAL<sp/>);</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPVS<sp/>=<sp/>pvs.MergeCurrentPVS(<sp/>playerPVS,<sp/>otherPVS<sp/>);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pvs.FreeCurrentPVS(<sp/>playerPVS<sp/>);</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pvs.FreeCurrentPVS(<sp/>otherPVS<sp/>);</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>playerPVS<sp/>=<sp/>newPVS;</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>playerConnectedAreas.i<sp/>==<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>playerConnectedAreas<sp/>=<sp/>GetClientPVS(<sp/>player,<sp/>PVS_CONNECTED_AREAS<sp/>);</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherPVS<sp/>=<sp/>GetClientPVS(<sp/>player,<sp/>PVS_CONNECTED_AREAS<sp/>);</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPVS<sp/>=<sp/>pvs.MergeCurrentPVS(<sp/>playerConnectedAreas,<sp/>otherPVS<sp/>);</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pvs.FreeCurrentPVS(<sp/>playerConnectedAreas<sp/>);</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pvs.FreeCurrentPVS(<sp/>otherPVS<sp/>);</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>playerConnectedAreas<sp/>=<sp/>newPVS;</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2003"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2006"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2007"><highlight class="comment">idGameLocal::FreePlayerPVS</highlight></codeline>
<codeline lineno="2008"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2009"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2010"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::FreePlayerPVS(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>playerPVS.i<sp/>!=<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pvs.FreeCurrentPVS(<sp/>playerPVS<sp/>);</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>playerPVS.i<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>playerConnectedAreas.i<sp/>!=<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pvs.FreeCurrentPVS(<sp/>playerConnectedAreas<sp/>);</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>playerConnectedAreas.i<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2019"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2022"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2023"><highlight class="comment">idGameLocal::InPlayerPVS</highlight></codeline>
<codeline lineno="2024"><highlight class="comment"></highlight></codeline>
<codeline lineno="2025"><highlight class="comment"><sp/><sp/>should<sp/>only<sp/>be<sp/>called<sp/>during<sp/>entity<sp/>thinking<sp/>and<sp/>event<sp/>handling</highlight></codeline>
<codeline lineno="2026"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2027"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idGameLocal::InPlayerPVS(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>playerPVS.i<sp/>==<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pvs.InCurrentPVS(<sp/>playerPVS,<sp/>ent-&gt;GetPVSAreas(),<sp/>ent-&gt;GetNumPVSAreas()<sp/>);</highlight></codeline>
<codeline lineno="2033"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2036"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2037"><highlight class="comment">idGameLocal::InPlayerConnectedArea</highlight></codeline>
<codeline lineno="2038"><highlight class="comment"></highlight></codeline>
<codeline lineno="2039"><highlight class="comment"><sp/><sp/>should<sp/>only<sp/>be<sp/>called<sp/>during<sp/>entity<sp/>thinking<sp/>and<sp/>event<sp/>handling</highlight></codeline>
<codeline lineno="2040"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2041"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idGameLocal::InPlayerConnectedArea(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>playerConnectedAreas.i<sp/>==<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pvs.InCurrentPVS(<sp/>playerConnectedAreas,<sp/>ent-&gt;GetPVSAreas(),<sp/>ent-&gt;GetNumPVSAreas()<sp/>);</highlight></codeline>
<codeline lineno="2047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2050"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2051"><highlight class="comment">idGameLocal::UpdateGravity</highlight></codeline>
<codeline lineno="2052"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2053"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::UpdateGravity(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_gravity.IsModified()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_gravity.GetFloat()<sp/>==<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_gravity.SetFloat(<sp/>1.0f<sp/>);</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gravity.Set(<sp/>0,<sp/>0,<sp/>-g_gravity.GetFloat()<sp/>);</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>all<sp/>physics<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>ent<sp/>=<sp/>spawnedEntities.Next();<sp/>ent<sp/>!=<sp/>NULL;<sp/>ent<sp/>=<sp/>ent-&gt;spawnNode.Next()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent-&gt;IsType(<sp/>idAFEntity_Generic::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_physics" kindref="compound">idPhysics</ref><sp/>*phys<sp/>=<sp/>ent-&gt;GetPhysics();</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>phys<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phys-&gt;SetGravity(<sp/>gravity<sp/>);</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_gravity.ClearModified();</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2077"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2078"><highlight class="comment">idGameLocal::GetGravity</highlight></codeline>
<codeline lineno="2079"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2080"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;idGameLocal::GetGravity(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gravity;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2086"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2087"><highlight class="comment">idGameLocal::SortActiveEntityList</highlight></codeline>
<codeline lineno="2088"><highlight class="comment"></highlight></codeline>
<codeline lineno="2089"><highlight class="comment"><sp/><sp/>Sorts<sp/>the<sp/>active<sp/>entity<sp/>list<sp/>such<sp/>that<sp/>pushing<sp/>entities<sp/>come<sp/>first,</highlight></codeline>
<codeline lineno="2090"><highlight class="comment"><sp/><sp/>actors<sp/>come<sp/>next<sp/>and<sp/>physics<sp/>team<sp/>slaves<sp/>appear<sp/>after<sp/>their<sp/>master.</highlight></codeline>
<codeline lineno="2091"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2092"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::SortActiveEntityList(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent,<sp/>*next_ent,<sp/>*master,<sp/>*part;</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"></highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>active<sp/>entity<sp/>list<sp/>needs<sp/>to<sp/>be<sp/>reordered<sp/>to<sp/>place<sp/>physics<sp/>team<sp/>masters<sp/>at<sp/>the<sp/>front</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sortTeamMasters<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>=<sp/>activeEntities.Next();<sp/>ent<sp/>!=<sp/>NULL;<sp/>ent<sp/>=<sp/>next_ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_ent<sp/>=<sp/>ent-&gt;activeNode.Next();</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>master<sp/>=<sp/>ent-&gt;GetTeamMaster();</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>&amp;&amp;<sp/>master<sp/>==<sp/>ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;activeNode.Remove();</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;activeNode.AddToFront(<sp/>activeEntities<sp/>);</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>active<sp/>entity<sp/>list<sp/>needs<sp/>to<sp/>be<sp/>reordered<sp/>to<sp/>place<sp/>pushers<sp/>at<sp/>the<sp/>front</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sortPushers<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>=<sp/>activeEntities.Next();<sp/>ent<sp/>!=<sp/>NULL;<sp/>ent<sp/>=<sp/>next_ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_ent<sp/>=<sp/>ent-&gt;activeNode.Next();</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>master<sp/>=<sp/>ent-&gt;GetTeamMaster();</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!master<sp/>||<sp/>master<sp/>==<sp/>ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>there<sp/>is<sp/>an<sp/>actor<sp/>on<sp/>the<sp/>team</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>part<sp/>=<sp/>ent;<sp/>part<sp/>!=<sp/>NULL;<sp/>part<sp/>=<sp/>part-&gt;GetNextTeamEntity()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>part-&gt;GetPhysics()-&gt;IsType(<sp/>idPhysics_Actor::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>is<sp/>an<sp/>actor<sp/>on<sp/>the<sp/>team</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>part<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;activeNode.Remove();</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;activeNode.AddToFront(<sp/>activeEntities<sp/>);</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>=<sp/>activeEntities.Next();<sp/>ent<sp/>!=<sp/>NULL;<sp/>ent<sp/>=<sp/>next_ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_ent<sp/>=<sp/>ent-&gt;activeNode.Next();</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>master<sp/>=<sp/>ent-&gt;GetTeamMaster();</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!master<sp/>||<sp/>master<sp/>==<sp/>ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>there<sp/>is<sp/>an<sp/>entity<sp/>on<sp/>the<sp/>team<sp/>using<sp/>parametric<sp/>physics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>part<sp/>=<sp/>ent;<sp/>part<sp/>!=<sp/>NULL;<sp/>part<sp/>=<sp/>part-&gt;GetNextTeamEntity()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>part-&gt;GetPhysics()-&gt;IsType(<sp/>idPhysics_Parametric::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>is<sp/>an<sp/>entity<sp/>on<sp/>the<sp/>team<sp/>using<sp/>parametric<sp/>physics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>part<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;activeNode.Remove();</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;activeNode.AddToFront(<sp/>activeEntities<sp/>);</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/>sortTeamMasters<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/>sortPushers<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2153"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2154"><highlight class="comment">idGameLocal::RunFrame</highlight></codeline>
<codeline lineno="2155"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2156"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><ref refid="structgame_return__t" kindref="compound">gameReturn_t</ref><sp/>idGameLocal::RunFrame(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classusercmd__t" kindref="compound">usercmd_t</ref><sp/>*clientCmds<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*<sp/><sp/>ent;</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num;</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ms;</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_timer" kindref="compound">idTimer</ref><sp/><sp/><sp/><sp/><sp/>timer_think,<sp/>timer_events,<sp/>timer_singlethink;</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgame_return__t" kindref="compound">gameReturn_t</ref><sp/>ret;</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/><sp/><sp/><sp/>*player;</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrender_view__s" kindref="compound">renderView_t</ref><sp/>*view;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG</highlight></codeline>
<codeline lineno="2167"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>isMultiplayer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>!isClient<sp/>);</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2171"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/>player<sp/>=<sp/>GetLocalPlayer();</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!isMultiplayer<sp/>&amp;&amp;<sp/>g_stopTime.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>any<sp/>debug<sp/>lines<sp/>from<sp/>a<sp/>previous<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugClearLines(<sp/>time<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>user<sp/>commands<sp/>for<sp/>this<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>usercmds,<sp/>clientCmds,<sp/>numClients<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>usercmds[<sp/>0<sp/>]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>player<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>player-&gt;Think();</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>game<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>framenum++;</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previousTime<sp/>=<sp/>time;</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>+=<sp/>msec;</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>realClientTime<sp/>=<sp/>time;</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GAME_DLL</highlight></codeline>
<codeline lineno="2192"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allow<sp/>changing<sp/>SIMD<sp/>usage<sp/>on<sp/>the<sp/>fly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>com_forceGenericSIMD.IsModified()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idSIMD::InitProcessor(<sp/></highlight><highlight class="stringliteral">&quot;game&quot;</highlight><highlight class="normal">,<sp/>com_forceGenericSIMD.GetBool()<sp/>);</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2197"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>the<sp/>random<sp/>number<sp/>counter<sp/>is<sp/>used<sp/>each<sp/>frame<sp/>so<sp/>random<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>influenced<sp/>by<sp/>the<sp/>player&apos;s<sp/>actions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>random.RandomInt();</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>player<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>renderview<sp/>so<sp/>that<sp/>any<sp/>gui<sp/>videos<sp/>play<sp/>from<sp/>the<sp/>right<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view<sp/>=<sp/>player-&gt;GetRenderView();</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>view<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;SetRenderView(<sp/>view<sp/>);</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>any<sp/>debug<sp/>lines<sp/>from<sp/>a<sp/>previous<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugClearLines(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"></highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>any<sp/>debug<sp/>polygons<sp/>from<sp/>a<sp/>previous<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugClearPolygons(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"></highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>user<sp/>commands<sp/>for<sp/>this<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>usercmds,<sp/>clientCmds,<sp/>numClients<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>usercmds[<sp/>0<sp/>]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>old<sp/>smoke<sp/>particles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smokeParticles-&gt;FreeSmokes();</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>events<sp/>on<sp/>the<sp/>server</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ServerProcessEntityNetworkEventQueue();</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>our<sp/>gravity<sp/>vector<sp/>if<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpdateGravity();</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>merged<sp/>pvs<sp/>for<sp/>all<sp/>players</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetupPlayerPVS();</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>the<sp/>active<sp/>entity<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SortActiveEntityList();</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_think.Clear();</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_think.Start();</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"></highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let<sp/>entities<sp/>think</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_timeentities.GetFloat()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>ent<sp/>=<sp/>activeEntities.Next();<sp/>ent<sp/>!=<sp/>NULL;<sp/>ent<sp/>=<sp/>ent-&gt;activeNode.Next()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_cinematic.GetBool()<sp/>&amp;&amp;<sp/>inCinematic<sp/>&amp;&amp;<sp/>!ent-&gt;cinematic<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;GetPhysics()-&gt;UpdateTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_singlethink.Clear();</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_singlethink.Start();</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;Think();</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_singlethink.Stop();</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ms<sp/>=<sp/>timer_singlethink.Milliseconds();</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ms<sp/>&gt;=<sp/>g_timeentities.GetFloat()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;%d:<sp/>entity<sp/>&apos;%s&apos;:<sp/>%.1f<sp/>ms\n&quot;</highlight><highlight class="normal">,<sp/>time,<sp/>ent-&gt;name.c_str(),<sp/>ms<sp/>);</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>inCinematic<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>ent<sp/>=<sp/>activeEntities.Next();<sp/>ent<sp/>!=<sp/>NULL;<sp/>ent<sp/>=<sp/>ent-&gt;activeNode.Next()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_cinematic.GetBool()<sp/>&amp;&amp;<sp/>!ent-&gt;cinematic<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;GetPhysics()-&gt;UpdateTime(<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;Think();</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>ent<sp/>=<sp/>activeEntities.Next();<sp/>ent<sp/>!=<sp/>NULL;<sp/>ent<sp/>=<sp/>ent-&gt;activeNode.Next()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;Think();</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>any<sp/>entities<sp/>that<sp/>have<sp/>stopped<sp/>thinking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numEntitiesToDeactivate<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*next_ent;</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>ent<sp/>=<sp/>activeEntities.Next();<sp/>ent<sp/>!=<sp/>NULL;<sp/>ent<sp/>=<sp/>next_ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_ent<sp/>=<sp/>ent-&gt;activeNode.Next();</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ent-&gt;thinkFlags<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;activeNode.Remove();</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c++;</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//assert(<sp/>numEntitiesToDeactivate<sp/>==<sp/>c<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numEntitiesToDeactivate<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_think.Stop();</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_events.Clear();</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_events.Start();</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>service<sp/>any<sp/>pending<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idEvent::ServiceEvents();</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"></highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_events.Stop();</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"></highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>the<sp/>player<sp/>pvs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FreePlayerPVS();</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>multiplayer<sp/>related<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>isMultiplayer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpGame.Run();</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>display<sp/>how<sp/>long<sp/>it<sp/>took<sp/>to<sp/>calculate<sp/>the<sp/>current<sp/>game<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_frametime.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;game<sp/>%d:<sp/>all:%.1f<sp/>th:%.1f<sp/>ev:%.1f<sp/>%d<sp/>ents<sp/>\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time,<sp/>timer_think.Milliseconds()<sp/>+<sp/>timer_events.Milliseconds(),</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_think.Milliseconds(),<sp/>timer_events.Milliseconds(),<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>the<sp/>return<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.consistencyHash<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.sessionCommand[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"></highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!isMultiplayer<sp/>&amp;&amp;<sp/>player<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.health<sp/>=<sp/>player-&gt;health;</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.heartRate<sp/>=<sp/>player-&gt;heartRate;</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.stamina<sp/>=<sp/>idMath::FtoiFast(<sp/>player-&gt;stamina<sp/>);</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>combat<sp/>is<sp/>a<sp/>0-100<sp/>value<sp/>based<sp/>on<sp/>lastHitTime<sp/>and<sp/>lastDmgTime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>each<sp/>make<sp/>up<sp/>50%<sp/>of<sp/>the<sp/>time<sp/>spread<sp/>over<sp/>10<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.combat<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>player-&gt;lastDmgTime<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>time<sp/>&lt;<sp/>player-&gt;lastDmgTime<sp/>+<sp/>10000<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.combat<sp/>+=<sp/>50.0f<sp/>*<sp/>(float)<sp/>(<sp/>time<sp/>-<sp/>player-&gt;lastDmgTime<sp/>)<sp/>/<sp/>10000;</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>player-&gt;lastHitTime<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>time<sp/>&lt;<sp/>player-&gt;lastHitTime<sp/>+<sp/>10000<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.combat<sp/>+=<sp/>50.0f<sp/>*<sp/>(float)<sp/>(<sp/>time<sp/>-<sp/>player-&gt;lastHitTime<sp/>)<sp/>/<sp/>10000;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"></highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>a<sp/>target_sessionCommand<sp/>has<sp/>forced<sp/>a<sp/>changelevel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sessionCommand.Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strncpy(<sp/>ret.sessionCommand,<sp/>sessionCommand,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>ret.sessionCommand<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>we<sp/>don&apos;t<sp/>loop<sp/>forever<sp/>when<sp/>skipping<sp/>a<sp/>cinematic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>skipCinematic<sp/>&amp;&amp;<sp/>(<sp/>time<sp/>&gt;<sp/>cinematicMaxSkipTime<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Warning(<sp/></highlight><highlight class="stringliteral">&quot;Exceeded<sp/>maximum<sp/>cinematic<sp/>skip<sp/>length.<sp/><sp/>Cinematic<sp/>may<sp/>be<sp/>looping<sp/>infinitely.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skipCinematic<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>(<sp/>inCinematic<sp/>||<sp/>(<sp/>time<sp/>&lt;<sp/>cinematicStopTime<sp/>)<sp/>)<sp/>&amp;&amp;<sp/>skipCinematic<sp/>);</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"></highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.syncNextGameFrame<sp/>=<sp/>skipCinematic;</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>skipCinematic<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soundSystem-&gt;SetMute(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skipCinematic<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>show<sp/>any<sp/>debug<sp/>info<sp/>for<sp/>this<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/>RunDebugInfo();</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/>D_DrawDebugLines();</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="2358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"></highlight></codeline>
<codeline lineno="2361"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2362"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="2363"><highlight class="comment"></highlight></codeline>
<codeline lineno="2364"><highlight class="comment"><sp/><sp/>Game<sp/>view<sp/>drawing</highlight></codeline>
<codeline lineno="2365"><highlight class="comment"></highlight></codeline>
<codeline lineno="2366"><highlight class="comment">======================================================================</highlight></codeline>
<codeline lineno="2367"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2370"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2371"><highlight class="comment">idGameLocal::CalcFov</highlight></codeline>
<codeline lineno="2372"><highlight class="comment"></highlight></codeline>
<codeline lineno="2373"><highlight class="comment">Calculates<sp/>the<sp/>horizontal<sp/>and<sp/>vertical<sp/>field<sp/>of<sp/>view<sp/>based<sp/>on<sp/>a<sp/>horizontal<sp/>field<sp/>of<sp/>view<sp/>and<sp/>custom<sp/>aspect<sp/>ratio</highlight></codeline>
<codeline lineno="2374"><highlight class="comment">====================</highlight></codeline>
<codeline lineno="2375"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2376"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::CalcFov(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>base_fov,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;fov_x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;fov_y<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>x;</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>y;</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>ratio_x;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>ratio_y;</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!sys-&gt;FPU_StackIsEmpty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Printf(<sp/>sys-&gt;FPU_GetState()<sp/>);</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;idGameLocal::CalcFov:<sp/>FPU<sp/>stack<sp/>not<sp/>empty&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"></highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first,<sp/>calculate<sp/>the<sp/>vertical<sp/>fov<sp/>based<sp/>on<sp/>a<sp/>640x480<sp/>view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>640.0f<sp/>/<sp/>tan(<sp/>base_fov<sp/>/<sp/>360.0f<sp/>*<sp/>idMath::PI<sp/>);</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>atan2(<sp/>480.0f,<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/>fov_y<sp/>=<sp/>y<sp/>*<sp/>360.0f<sp/>/<sp/>idMath::PI;</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"></highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>somehow,<sp/>this<sp/>is<sp/>happening<sp/>occasionally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>fov_y<sp/>&gt;<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fov_y<sp/>&lt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Printf(<sp/>sys-&gt;FPU_GetState()<sp/>);</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;idGameLocal::CalcFov:<sp/>bad<sp/>result&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"></highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>r_aspectRatio.GetInteger()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0<sp/>:</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4:3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fov_x<sp/>=<sp/>base_fov;</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1<sp/>:</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>16:9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ratio_x<sp/>=<sp/>16.0f;</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ratio_y<sp/>=<sp/>9.0f;</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2<sp/>:</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>16:10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ratio_x<sp/>=<sp/>16.0f;</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ratio_y<sp/>=<sp/>10.0f;</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>ratio_y<sp/>/<sp/>tan(<sp/>fov_y<sp/>/<sp/>360.0f<sp/>*<sp/>idMath::PI<sp/>);</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/>fov_x<sp/>=<sp/>atan2(<sp/>ratio_x,<sp/>y<sp/>)<sp/>*<sp/>360.0f<sp/>/<sp/>idMath::PI;</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fov_x<sp/>&lt;<sp/>base_fov<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fov_x<sp/>=<sp/>base_fov;</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>ratio_x<sp/>/<sp/>tan(<sp/>fov_x<sp/>/<sp/>360.0f<sp/>*<sp/>idMath::PI<sp/>);</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fov_y<sp/>=<sp/>atan2(<sp/>ratio_y,<sp/>x<sp/>)<sp/>*<sp/>360.0f<sp/>/<sp/>idMath::PI;</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>somehow,<sp/>this<sp/>is<sp/>happening<sp/>occasionally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>(<sp/>fov_x<sp/>&gt;<sp/>0<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>fov_y<sp/>&gt;<sp/>0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>fov_y<sp/>&lt;=<sp/>0<sp/>)<sp/>||<sp/>(<sp/>fov_x<sp/>&lt;=<sp/>0<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Printf(<sp/>sys-&gt;FPU_GetState()<sp/>);</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;idGameLocal::CalcFov:<sp/>bad<sp/>result&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2438"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2439"><highlight class="comment">idGameLocal::Draw</highlight></codeline>
<codeline lineno="2440"><highlight class="comment"></highlight></codeline>
<codeline lineno="2441"><highlight class="comment">makes<sp/>rendering<sp/>and<sp/>sound<sp/>system<sp/>calls</highlight></codeline>
<codeline lineno="2442"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2443"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idGameLocal::Draw(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>isMultiplayer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mpGame.Draw(<sp/>clientNum<sp/>);</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*player<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(entities[<sp/>clientNum<sp/>]);</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!player<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>render<sp/>the<sp/>scene</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/>player-&gt;playerView.RenderPlayerView(<sp/>player-&gt;hud<sp/>);</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2462"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2463"><highlight class="comment">idGameLocal::HandleESC</highlight></codeline>
<codeline lineno="2464"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2465"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="normal">escReply_t<sp/>idGameLocal::HandleESC(<sp/><ref refid="classid_user_interface" kindref="compound">idUserInterface</ref><sp/>**gui<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>isMultiplayer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*gui<sp/>=<sp/>StartMenu();</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>may<sp/>set<sp/>the<sp/>gui<sp/>back<sp/>to<sp/>NULL<sp/>to<sp/>hide<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESC_GUI;</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*player<sp/>=<sp/>GetLocalPlayer();</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>player<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>player-&gt;HandleESC()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESC_IGNORE;</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESC_MAIN;</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESC_MAIN;</highlight></codeline>
<codeline lineno="2481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2484"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2485"><highlight class="comment">idGameLocal::StartMenu</highlight></codeline>
<codeline lineno="2486"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2487"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><ref refid="classid_user_interface" kindref="compound">idUserInterface</ref>*<sp/>idGameLocal::StartMenu(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!isMultiplayer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mpGame.StartMenu();</highlight></codeline>
<codeline lineno="2493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2496"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2497"><highlight class="comment">idGameLocal::HandleGuiCommands</highlight></codeline>
<codeline lineno="2498"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2499"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>idGameLocal::HandleGuiCommands(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*menuCommand<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!isMultiplayer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mpGame.HandleGuiCommands(<sp/>menuCommand<sp/>);</highlight></codeline>
<codeline lineno="2505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"></highlight></codeline>
<codeline lineno="2507"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2508"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2509"><highlight class="comment">idGameLocal::HandleMainMenuCommands</highlight></codeline>
<codeline lineno="2510"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2511"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::HandleMainMenuCommands(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*menuCommand,<sp/><ref refid="classid_user_interface" kindref="compound">idUserInterface</ref><sp/>*gui<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2515"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2516"><highlight class="comment">idGameLocal::GetLevelMap</highlight></codeline>
<codeline lineno="2517"><highlight class="comment"></highlight></codeline>
<codeline lineno="2518"><highlight class="comment"><sp/><sp/>should<sp/>only<sp/>be<sp/>used<sp/>for<sp/>in-game<sp/>level<sp/>editing</highlight></codeline>
<codeline lineno="2519"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2520"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><ref refid="classid_map_file" kindref="compound">idMapFile</ref><sp/>*idGameLocal::GetLevelMap(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mapFile<sp/>&amp;&amp;<sp/>mapFile-&gt;HasPrimitiveData())<sp/>{</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mapFile;</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!mapFileName.Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"></highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mapFile<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mapFile;</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/>mapFile<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_map_file" kindref="compound">idMapFile</ref>;</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!mapFile-&gt;Parse(<sp/>mapFileName<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mapFile;</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapFile<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mapFile;</highlight></codeline>
<codeline lineno="2540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2543"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2544"><highlight class="comment">idGameLocal::GetMapName</highlight></codeline>
<codeline lineno="2545"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2546"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2547"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*idGameLocal::GetMapName(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mapFileName.c_str();</highlight></codeline>
<codeline lineno="2549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"></highlight></codeline>
<codeline lineno="2551"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2552"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2553"><highlight class="comment">idGameLocal::CallFrameCommand</highlight></codeline>
<codeline lineno="2554"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2555"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2556"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::CallFrameCommand(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfunction__t" kindref="compound">function_t</ref><sp/>*frameCommand<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/>frameCommandThread-&gt;CallFunction(<sp/>ent,<sp/>frameCommand,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/>frameCommandThread-&gt;Execute();</highlight></codeline>
<codeline lineno="2559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2562"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2563"><highlight class="comment">idGameLocal::CallObjectFrameCommand</highlight></codeline>
<codeline lineno="2564"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2565"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::CallObjectFrameCommand(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*frameCommand<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfunction__t" kindref="compound">function_t</ref><sp/>*func;</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/>func<sp/>=<sp/>ent-&gt;scriptObject.GetFunction(<sp/>frameCommand<sp/>);</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!func<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ent-&gt;IsType(<sp/>idTestModel::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>function<sp/>&apos;%s&apos;<sp/>called<sp/>for<sp/>frame<sp/>command<sp/>on<sp/>entity<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>frameCommand,<sp/>ent-&gt;name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frameCommandThread-&gt;CallFunction(<sp/>ent,<sp/>func,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frameCommandThread-&gt;Execute();</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2581"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2582"><highlight class="comment">idGameLocal::ShowTargets</highlight></codeline>
<codeline lineno="2583"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2584"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2585"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::ShowTargets(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/><sp/><sp/><sp/><sp/><sp/>axis<sp/>=<sp/>GetLocalPlayer()-&gt;viewAngles.ToMat3();</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/>up<sp/>=<sp/>axis[<sp/>2<sp/>]<sp/>*<sp/>5.0f;</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;viewPos<sp/>=<sp/>GetLocalPlayer()-&gt;GetPhysics()-&gt;GetOrigin();</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/><sp/><sp/><sp/>viewTextBounds(<sp/>viewPos<sp/>);</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/><sp/><sp/><sp/>viewBounds(<sp/>viewPos<sp/>);</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/><sp/><sp/><sp/>box(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>-4.0f,<sp/>-4.0f,<sp/>-4.0f<sp/>),<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>4.0f,<sp/>4.0f,<sp/>4.0f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/><sp/><sp/><sp/>*ent;</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/><sp/><sp/><sp/>*target;</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/><sp/><sp/><sp/>totalBounds;</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/>viewTextBounds.ExpandSelf(<sp/>128.0f<sp/>);</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/>viewBounds.ExpandSelf(<sp/>512.0f<sp/>);</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>ent<sp/>=<sp/>spawnedEntities.Next();<sp/>ent<sp/>!=<sp/>NULL;<sp/>ent<sp/>=<sp/>ent-&gt;spawnNode.Next()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalBounds<sp/>=<sp/>ent-&gt;GetPhysics()-&gt;GetAbsBounds();</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ent-&gt;targets.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target<sp/>=<sp/>ent-&gt;targets[<sp/>i<sp/>].GetEntity();</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>target<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalBounds.AddBounds(<sp/>target-&gt;GetPhysics()-&gt;GetAbsBounds()<sp/>);</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"></highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!viewBounds.IntersectsBounds(<sp/>totalBounds<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"></highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dist;</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>dir<sp/>=<sp/>totalBounds.GetCenter()<sp/>-<sp/>viewPos;</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir.NormalizeFast();</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalBounds.RayIntersection(<sp/>viewPos,<sp/>dir,<sp/>dist<sp/>);</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>frac<sp/>=<sp/>(<sp/>512.0f<sp/>-<sp/>dist<sp/>)<sp/>/<sp/>512.0f;</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>frac<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"></highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugBounds(<sp/>(<sp/>ent-&gt;IsHidden()<sp/>?<sp/>colorLtGrey<sp/>:<sp/>colorOrange<sp/>)<sp/>*<sp/>frac,<sp/>ent-&gt;GetPhysics()-&gt;GetAbsBounds()<sp/>);</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>viewTextBounds.IntersectsBounds(<sp/>ent-&gt;GetPhysics()-&gt;GetAbsBounds()<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>center<sp/>=<sp/>ent-&gt;GetPhysics()-&gt;GetAbsBounds().GetCenter();</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DrawText(<sp/>ent-&gt;name.c_str(),<sp/>center<sp/>-<sp/>up,<sp/>0.1f,<sp/>colorWhite<sp/>*<sp/>frac,<sp/>axis,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DrawText(<sp/>ent-&gt;GetEntityDefName(),<sp/>center,<sp/>0.1f,<sp/>colorWhite<sp/>*<sp/>frac,<sp/>axis,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DrawText(<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;#%d&quot;</highlight><highlight class="normal">,<sp/>ent-&gt;entityNumber<sp/>),<sp/>center<sp/>+<sp/>up,<sp/>0.1f,<sp/>colorWhite<sp/>*<sp/>frac,<sp/>axis,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"></highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ent-&gt;targets.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target<sp/>=<sp/>ent-&gt;targets[<sp/>i<sp/>].GetEntity();</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>target<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugArrow(<sp/>colorYellow<sp/>*<sp/>frac,<sp/>ent-&gt;GetPhysics()-&gt;GetAbsBounds().GetCenter(),<sp/>target-&gt;GetPhysics()-&gt;GetOrigin(),<sp/>10,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugBounds(<sp/>colorGreen<sp/>*<sp/>frac,<sp/>box,<sp/>target-&gt;GetPhysics()-&gt;GetOrigin()<sp/>);</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2640"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2641"><highlight class="comment">idGameLocal::RunDebugInfo</highlight></codeline>
<codeline lineno="2642"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2643"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2644"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::RunDebugInfo(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*player;</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"></highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/>player<sp/>=<sp/>GetLocalPlayer();</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!player<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;origin<sp/>=<sp/>player-&gt;GetPhysics()-&gt;GetOrigin();</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_showEntityInfo.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/><sp/><sp/><sp/><sp/><sp/>axis<sp/>=<sp/>player-&gt;viewAngles.ToMat3();</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/>up<sp/>=<sp/>axis[<sp/>2<sp/>]<sp/>*<sp/>5.0f;</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/><sp/><sp/><sp/>viewTextBounds(<sp/>origin<sp/>);</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/><sp/><sp/><sp/>viewBounds(<sp/>origin<sp/>);</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"></highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>viewTextBounds.ExpandSelf(<sp/>128.0f<sp/>);</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>viewBounds.ExpandSelf(<sp/>512.0f<sp/>);</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>ent<sp/>=<sp/>spawnedEntities.Next();<sp/>ent<sp/>!=<sp/>NULL;<sp/>ent<sp/>=<sp/>ent-&gt;spawnNode.Next()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>draw<sp/>the<sp/>worldspawn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>==<sp/>world<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"></highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>if<sp/>the<sp/>entity<sp/>is<sp/>very<sp/>far<sp/>away</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!viewBounds.IntersectsBounds(<sp/>ent-&gt;GetPhysics()-&gt;GetAbsBounds()<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"></highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>&amp;entBounds<sp/>=<sp/>ent-&gt;GetPhysics()-&gt;GetAbsBounds();</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>contents<sp/>=<sp/>ent-&gt;GetPhysics()-&gt;GetContents();</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>contents<sp/>&amp;<sp/>CONTENTS_BODY<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugBounds(<sp/>colorCyan,<sp/>entBounds<sp/>);</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>contents<sp/>&amp;<sp/>CONTENTS_TRIGGER<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugBounds(<sp/>colorOrange,<sp/>entBounds<sp/>);</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>contents<sp/>&amp;<sp/>CONTENTS_SOLID<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugBounds(<sp/>colorGreen,<sp/>entBounds<sp/>);</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!entBounds.GetVolume()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugBounds(<sp/>colorMdGrey,<sp/>entBounds.Expand(<sp/>8.0f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugBounds(<sp/>colorMdGrey,<sp/>entBounds<sp/>);</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>viewTextBounds.IntersectsBounds(<sp/>entBounds<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DrawText(<sp/>ent-&gt;name.c_str(),<sp/>entBounds.GetCenter(),<sp/>0.1f,<sp/>colorWhite,<sp/>axis,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DrawText(<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;#%d&quot;</highlight><highlight class="normal">,<sp/>ent-&gt;entityNumber<sp/>),<sp/>entBounds.GetCenter()<sp/>+<sp/>up,<sp/>0.1f,<sp/>colorWhite,<sp/>axis,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"></highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>debug<sp/>tool<sp/>to<sp/>draw<sp/>bounding<sp/>boxes<sp/>around<sp/>active<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_showActiveEntities.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>ent<sp/>=<sp/>activeEntities.Next();<sp/>ent<sp/>!=<sp/>NULL;<sp/>ent<sp/>=<sp/>ent-&gt;activeNode.Next()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/><sp/><sp/><sp/>b<sp/>=<sp/>ent-&gt;GetPhysics()-&gt;GetBounds();</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b.GetVolume()<sp/>&lt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[0][0]<sp/>=<sp/>b[0][1]<sp/>=<sp/>b[0][2]<sp/>=<sp/>-8;</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[1][0]<sp/>=<sp/>b[1][1]<sp/>=<sp/>b[1][2]<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent-&gt;fl.isDormant<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugBounds(<sp/>colorYellow,<sp/>b,<sp/>ent-&gt;GetPhysics()-&gt;GetOrigin()<sp/>);</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;DebugBounds(<sp/>colorGreen,<sp/>b,<sp/>ent-&gt;GetPhysics()-&gt;GetOrigin()<sp/>);</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"></highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_showTargets.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShowTargets();</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_showTriggers.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idTrigger::DrawDebugInfo();</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"></highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ai_showCombatNodes.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idCombatNode::DrawDebugInfo();</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"></highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ai_showPaths.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idPathCorner::DrawDebugInfo();</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"></highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_editEntityMode.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>editEntities-&gt;DisplayEntities();</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"></highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_showCollisionWorld.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collisionModelManager-&gt;DrawModel(<sp/>0,<sp/>vec3_origin,<sp/>mat3_identity,<sp/>origin,<sp/>128.0f<sp/>);</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"></highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_showCollisionModels.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip.DrawClipModels(<sp/>player-&gt;GetEyePosition(),<sp/>g_maxShowDistance.GetFloat(),<sp/>pm_thirdPerson.GetBool()<sp/>?<sp/>NULL<sp/>:<sp/>player<sp/>);</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_showCollisionTraces.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip.PrintStatistics();</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"></highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_showPVS.GetInteger()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pvs.DrawPVS(<sp/>origin,<sp/>(<sp/>g_showPVS.GetInteger()<sp/>==<sp/>2<sp/>)<sp/>?<sp/>PVS_ALL_PORTALS_OPEN<sp/>:<sp/>PVS_NORMAL<sp/>);</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"></highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>aas_test.GetInteger()<sp/>&gt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_a_a_s" kindref="compound">idAAS</ref><sp/>*aas<sp/>=<sp/>GetAAS(<sp/>aas_test.GetInteger()<sp/>);</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>aas<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aas-&gt;Test(<sp/>origin<sp/>);</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ai_testPredictPath.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>velocity;</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpredicted_path__s" kindref="compound">predictedPath_t</ref><sp/>path;</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"></highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocity.x<sp/>=<sp/>cos(<sp/>DEG2RAD(<sp/>player-&gt;viewAngles.yaw<sp/>)<sp/>)<sp/>*<sp/>100.0f;</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocity.y<sp/>=<sp/>sin(<sp/>DEG2RAD(<sp/>player-&gt;viewAngles.yaw<sp/>)<sp/>)<sp/>*<sp/>100.0f;</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocity.z<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAI::PredictPath(<sp/>player,<sp/>aas,<sp/>origin,<sp/>velocity,<sp/>1000,<sp/>100,<sp/>SE_ENTER_OBSTACLE<sp/>|<sp/>SE_BLOCKED<sp/>|<sp/>SE_ENTER_LEDGE_AREA,<sp/>path<sp/>);</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"></highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ai_showObstacleAvoidance.GetInteger()<sp/>==<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_a_a_s" kindref="compound">idAAS</ref><sp/>*aas<sp/>=<sp/>GetAAS(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>aas<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>seekPos;</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structobstacle_path__s" kindref="compound">obstaclePath_t</ref><sp/>path;</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"></highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seekPos<sp/>=<sp/>player-&gt;GetPhysics()-&gt;GetOrigin()<sp/>+<sp/>player-&gt;viewAxis[0]<sp/>*<sp/>200.0f;</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idAI::FindPathAroundObstacles(<sp/>player-&gt;GetPhysics(),<sp/>aas,<sp/>NULL,<sp/>player-&gt;GetPhysics()-&gt;GetOrigin(),<sp/>seekPos,<sp/>path<sp/>);</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"></highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>collision<sp/>map<sp/>debug<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/>collisionModelManager-&gt;DebugOutput(<sp/>player-&gt;GetEyePosition()<sp/>);</highlight></codeline>
<codeline lineno="2777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"></highlight></codeline>
<codeline lineno="2779"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2780"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2781"><highlight class="comment">idGameLocal::NumAAS</highlight></codeline>
<codeline lineno="2782"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2783"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idGameLocal::NumAAS(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aasList.Num();</highlight></codeline>
<codeline lineno="2786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"></highlight></codeline>
<codeline lineno="2788"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2789"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2790"><highlight class="comment">idGameLocal::GetAAS</highlight></codeline>
<codeline lineno="2791"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2792"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><ref refid="classid_a_a_s" kindref="compound">idAAS</ref><sp/>*idGameLocal::GetAAS(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>num<sp/>&gt;=<sp/>0<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>num<sp/>&lt;<sp/>aasList.Num()<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>aasList[<sp/>num<sp/>]<sp/>&amp;&amp;<sp/>aasList[<sp/>num<sp/>]-&gt;GetSettings()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aasList[<sp/>num<sp/>];</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2800"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"></highlight></codeline>
<codeline lineno="2802"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2803"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2804"><highlight class="comment">idGameLocal::GetAAS</highlight></codeline>
<codeline lineno="2805"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2806"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><ref refid="classid_a_a_s" kindref="compound">idAAS</ref><sp/>*idGameLocal::GetAAS(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"></highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>aasNames.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>aasNames[<sp/>i<sp/>]<sp/>==<sp/>name<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!aasList[<sp/>i<sp/>]-&gt;GetSettings()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aasList[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2823"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2824"><highlight class="comment">idGameLocal::SetAASAreaState</highlight></codeline>
<codeline lineno="2825"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2826"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2827"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::SetAASAreaState(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>&amp;bounds,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>areaContents,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>closed<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"></highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>aasList.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aasList[<sp/>i<sp/>]-&gt;SetAreaState(<sp/>bounds,<sp/>areaContents,<sp/>closed<sp/>);</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2833"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"></highlight></codeline>
<codeline lineno="2835"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2836"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2837"><highlight class="comment">idGameLocal::AddAASObstacle</highlight></codeline>
<codeline lineno="2838"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2839"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2840"><highlight class="normal">aasHandle_t<sp/>idGameLocal::AddAASObstacle(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>&amp;bounds<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/>aasHandle_t<sp/>obstacle;</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/>aasHandle_t<sp/>check;</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"></highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!aasList.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"></highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/>obstacle<sp/>=<sp/>aasList[<sp/>0<sp/>]-&gt;AddObstacle(<sp/>bounds<sp/>);</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>aasList.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check<sp/>=<sp/>aasList[<sp/>i<sp/>]-&gt;AddObstacle(<sp/>bounds<sp/>);</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>check<sp/>==<sp/>obstacle<sp/>);</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"></highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obstacle;</highlight></codeline>
<codeline lineno="2856"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"></highlight></codeline>
<codeline lineno="2858"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2859"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2860"><highlight class="comment">idGameLocal::RemoveAASObstacle</highlight></codeline>
<codeline lineno="2861"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2862"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2863"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::RemoveAASObstacle(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>aasHandle_t<sp/>handle<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"></highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>aasList.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aasList[<sp/>i<sp/>]-&gt;RemoveObstacle(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2869"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"></highlight></codeline>
<codeline lineno="2871"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2872"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2873"><highlight class="comment">idGameLocal::RemoveAllAASObstacles</highlight></codeline>
<codeline lineno="2874"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2875"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2876"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::RemoveAllAASObstacles(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"></highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>aasList.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aasList[<sp/>i<sp/>]-&gt;RemoveAllObstacles();</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2882"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"></highlight></codeline>
<codeline lineno="2884"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2885"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2886"><highlight class="comment">idGameLocal::CheatsOk</highlight></codeline>
<codeline lineno="2887"><highlight class="comment">==================</highlight></codeline>
<codeline lineno="2888"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2889"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idGameLocal::CheatsOk(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>requirePlayer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*player;</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"></highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>isMultiplayer<sp/>&amp;&amp;<sp/>!cvarSystem-&gt;GetCVarBool(<sp/></highlight><highlight class="stringliteral">&quot;net_allowCheats&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>allowed<sp/>in<sp/>multiplayer.\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"></highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>developer.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"></highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/>player<sp/>=<sp/>GetLocalPlayer();</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!requirePlayer<sp/>||<sp/>(<sp/>player<sp/>&amp;&amp;<sp/>(<sp/>player-&gt;health<sp/>&gt;<sp/>0<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"></highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;You<sp/>must<sp/>be<sp/>alive<sp/>to<sp/>use<sp/>this<sp/>command.\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"></highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2909"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"></highlight></codeline>
<codeline lineno="2911"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2912"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="2913"><highlight class="comment">idGameLocal::RegisterEntity</highlight></codeline>
<codeline lineno="2914"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="2915"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2916"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::RegisterEntity(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>spawn_entnum;</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"></highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>spawnCount<sp/>&gt;=<sp/>(<sp/>1<sp/>&lt;&lt;<sp/>(<sp/>32<sp/>-<sp/>GENTITYNUM_BITS<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;idGameLocal::RegisterEntity:<sp/>spawn<sp/>count<sp/>overflow&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"></highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!spawnArgs.GetInt(<sp/></highlight><highlight class="stringliteral">&quot;spawn_entnum&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>spawn_entnum<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>entities[firstFreeIndex]<sp/>&amp;&amp;<sp/>firstFreeIndex<sp/>&lt;<sp/>ENTITYNUM_MAX_NORMAL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstFreeIndex++;</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>firstFreeIndex<sp/>&gt;=<sp/>ENTITYNUM_MAX_NORMAL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>free<sp/>entities&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spawn_entnum<sp/>=<sp/>firstFreeIndex++;</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"></highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/>entities[<sp/>spawn_entnum<sp/>]<sp/>=<sp/>ent;</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnIds[<sp/>spawn_entnum<sp/>]<sp/>=<sp/>spawnCount++;</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/>ent-&gt;entityNumber<sp/>=<sp/>spawn_entnum;</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/>ent-&gt;spawnNode.AddToEnd(<sp/>spawnedEntities<sp/>);</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/>ent-&gt;spawnArgs.TransferKeyValues(<sp/>spawnArgs<sp/>);</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"></highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>spawn_entnum<sp/>&gt;=<sp/>num_entities<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_entities++;</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2942"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"></highlight></codeline>
<codeline lineno="2944"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2945"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="2946"><highlight class="comment">idGameLocal::UnregisterEntity</highlight></codeline>
<codeline lineno="2947"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="2948"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2949"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::UnregisterEntity(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>ent<sp/>);</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"></highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>editEntities<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>editEntities-&gt;RemoveSelectedEntity(<sp/>ent<sp/>);</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"></highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>ent-&gt;entityNumber<sp/>!=<sp/>ENTITYNUM_NONE<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>entities[<sp/>ent-&gt;entityNumber<sp/>]<sp/>==<sp/>ent<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;spawnNode.Remove();</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entities[<sp/>ent-&gt;entityNumber<sp/>]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spawnIds[<sp/>ent-&gt;entityNumber<sp/>]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent-&gt;entityNumber<sp/>&gt;=<sp/>MAX_CLIENTS<sp/>&amp;&amp;<sp/>ent-&gt;entityNumber<sp/>&lt;<sp/>firstFreeIndex<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstFreeIndex<sp/>=<sp/>ent-&gt;entityNumber;</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;entityNumber<sp/>=<sp/>ENTITYNUM_NONE;</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2965"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"></highlight></codeline>
<codeline lineno="2967"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2968"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2969"><highlight class="comment">idGameLocal::SpawnEntityType</highlight></codeline>
<codeline lineno="2970"><highlight class="comment">================</highlight></codeline>
<codeline lineno="2971"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*idGameLocal::SpawnEntityType(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/>&amp;classdef,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>*args,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bIsClientReadSnapshot<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_class" kindref="compound">idClass</ref><sp/>*obj;</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"></highlight></codeline>
<codeline lineno="2975"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_DEBUG</highlight></codeline>
<codeline lineno="2976"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>isClient<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>bIsClientReadSnapshot<sp/>);</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2980"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!classdef.IsType(<sp/>idEntity::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;Attempted<sp/>to<sp/>spawn<sp/>non-entity<sp/>class<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>classdef.classname<sp/>);</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"></highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spawnArgs<sp/>=<sp/>*args;</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spawnArgs.Clear();</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj<sp/>=<sp/>classdef.CreateInstance();</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj-&gt;CallSpawn();</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(<sp/><ref refid="classid_alloc_error" kindref="compound">idAllocError</ref><sp/>&amp;<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnArgs.Clear();</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"></highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj);</highlight></codeline>
<codeline lineno="3001"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"></highlight></codeline>
<codeline lineno="3003"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3004"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="3005"><highlight class="comment">idGameLocal::SpawnEntityDef</highlight></codeline>
<codeline lineno="3006"><highlight class="comment"></highlight></codeline>
<codeline lineno="3007"><highlight class="comment">Finds<sp/>the<sp/>spawn<sp/>function<sp/>for<sp/>the<sp/>entity<sp/>and<sp/>calls<sp/>it,</highlight></codeline>
<codeline lineno="3008"><highlight class="comment">returning<sp/>false<sp/>if<sp/>not<sp/>found</highlight></codeline>
<codeline lineno="3009"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="3010"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3011"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idGameLocal::SpawnEntityDef(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>&amp;args,<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>**ent,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setDefaults<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*classname;</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*spawn;</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/><sp/>*cls;</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_class" kindref="compound">idClass</ref><sp/><sp/><sp/><sp/><sp/>*obj;</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error;</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*name;</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"></highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ent<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"></highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnArgs<sp/>=<sp/>args;</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"></highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>&amp;name<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>error,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>on<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"></highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;classname&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>&amp;classname<sp/>);</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"></highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_decl_entity_def" kindref="compound">idDeclEntityDef</ref><sp/>*def<sp/>=<sp/>FindEntityDef(<sp/>classname,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"></highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!def<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Warning(<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>classname<sp/>&apos;%s&apos;%s.&quot;</highlight><highlight class="normal">,<sp/>classname,<sp/>error.c_str()<sp/>);</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"></highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnArgs.SetDefaults(<sp/>&amp;def-&gt;dict<sp/>);</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"></highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>we<sp/>should<sp/>spawn<sp/>a<sp/>class<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;spawnclass&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>&amp;spawn<sp/>);</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>spawn<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"></highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cls<sp/>=<sp/>idClass::GetClass(<sp/>spawn<sp/>);</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!cls<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Warning(<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>spawn<sp/>&apos;%s&apos;.<sp/><sp/>Class<sp/>&apos;%s&apos;<sp/>not<sp/>found%s.&quot;</highlight><highlight class="normal">,<sp/>classname,<sp/>spawn,<sp/>error.c_str()<sp/>);</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"></highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj<sp/>=<sp/>cls-&gt;CreateInstance();</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!obj<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Warning(<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>spawn<sp/>&apos;%s&apos;.<sp/>Instance<sp/>could<sp/>not<sp/>be<sp/>created%s.&quot;</highlight><highlight class="normal">,<sp/>classname,<sp/>error.c_str()<sp/>);</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"></highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj-&gt;CallSpawn();</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"></highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>&amp;&amp;<sp/>obj-&gt;IsType(<sp/>idEntity::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ent<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj);</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"></highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"></highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>we<sp/>should<sp/>call<sp/>a<sp/>script<sp/>function<sp/>to<sp/>spawn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;spawnfunc&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>&amp;spawn<sp/>);</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>spawn<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfunction__t" kindref="compound">function_t</ref><sp/>*func<sp/>=<sp/>program.FindFunction(<sp/>spawn<sp/>);</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!func<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Warning(<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>spawn<sp/>&apos;%s&apos;.<sp/><sp/>Script<sp/>function<sp/>&apos;%s&apos;<sp/>not<sp/>found%s.&quot;</highlight><highlight class="normal">,<sp/>classname,<sp/>spawn,<sp/>error.c_str()<sp/>);</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_thread" kindref="compound">idThread</ref><sp/>*thread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_thread" kindref="compound">idThread</ref>(<sp/>func<sp/>);</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;DelayedStart(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"></highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/>Warning(<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>doesn&apos;t<sp/>include<sp/>a<sp/>spawnfunc<sp/>or<sp/>spawnclass%s.&quot;</highlight><highlight class="normal">,<sp/>classname,<sp/>error.c_str()<sp/>);</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"></highlight></codeline>
<codeline lineno="3082"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3083"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3084"><highlight class="comment">idGameLocal::FindEntityDef</highlight></codeline>
<codeline lineno="3085"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3086"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3087"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_decl_entity_def" kindref="compound">idDeclEntityDef</ref><sp/>*idGameLocal::FindEntityDef(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>makeDefault<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_decl" kindref="compound">idDecl</ref><sp/>*decl<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>isMultiplayer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decl<sp/>=<sp/>declManager-&gt;FindType(<sp/>DECL_ENTITYDEF,<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;%s_mp&quot;</highlight><highlight class="normal">,<sp/>name<sp/>),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!decl<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decl<sp/>=<sp/>declManager-&gt;FindType(<sp/>DECL_ENTITYDEF,<sp/>name,<sp/>makeDefault<sp/>);</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classid_decl_entity_def" kindref="compound">idDeclEntityDef</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>decl<sp/>);</highlight></codeline>
<codeline lineno="3096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"></highlight></codeline>
<codeline lineno="3098"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3099"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3100"><highlight class="comment">idGameLocal::FindEntityDefDict</highlight></codeline>
<codeline lineno="3101"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3102"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3103"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>*idGameLocal::FindEntityDefDict(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>makeDefault<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_decl_entity_def" kindref="compound">idDeclEntityDef</ref><sp/>*decl<sp/>=<sp/>FindEntityDef(<sp/>name,<sp/>makeDefault<sp/>);</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>decl<sp/>?<sp/>&amp;decl-&gt;dict<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="3106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"></highlight></codeline>
<codeline lineno="3108"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3109"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3110"><highlight class="comment">idGameLocal::InhibitEntitySpawn</highlight></codeline>
<codeline lineno="3111"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3112"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3113"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idGameLocal::InhibitEntitySpawn(<sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>&amp;spawnArgs<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"></highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>isMultiplayer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spawnArgs.GetBool(<sp/></highlight><highlight class="stringliteral">&quot;not_multiplayer&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>result<sp/>);</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_skill.GetInteger()<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spawnArgs.GetBool(<sp/></highlight><highlight class="stringliteral">&quot;not_easy&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>result<sp/>);</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_skill.GetInteger()<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spawnArgs.GetBool(<sp/></highlight><highlight class="stringliteral">&quot;not_medium&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>result<sp/>);</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spawnArgs.GetBool(<sp/></highlight><highlight class="stringliteral">&quot;not_hard&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>result<sp/>);</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"></highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ID_DEMO_BUILD</highlight></codeline>
<codeline lineno="3129"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_skill.GetInteger()<sp/>==<sp/>3<sp/>)<sp/>{<sp/></highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;classname&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idStr::Icmp(<sp/>name,<sp/></highlight><highlight class="stringliteral">&quot;item_medkit&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>||<sp/>idStr::Icmp(<sp/>name,<sp/></highlight><highlight class="stringliteral">&quot;item_medkit_small&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3136"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.isMultiplayer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;classname&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idStr::Icmp(<sp/>name,<sp/></highlight><highlight class="stringliteral">&quot;weapon_bfg&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>||<sp/>idStr::Icmp(<sp/>name,<sp/></highlight><highlight class="stringliteral">&quot;weapon_soulcube&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"></highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"></highlight></codeline>
<codeline lineno="3147"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3148"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3149"><highlight class="comment">idGameLocal::SetSkill</highlight></codeline>
<codeline lineno="3150"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3151"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3152"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::SetSkill(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skill_level;</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"></highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>value<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skill_level<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>value<sp/>&gt;<sp/>3<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skill_level<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skill_level<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"></highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/>g_skill.SetInteger(<sp/>skill_level<sp/>);</highlight></codeline>
<codeline lineno="3164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"></highlight></codeline>
<codeline lineno="3166"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3167"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="3168"><highlight class="comment">idGameLocal::GameState</highlight></codeline>
<codeline lineno="3169"><highlight class="comment"></highlight></codeline>
<codeline lineno="3170"><highlight class="comment">Used<sp/>to<sp/>allow<sp/>entities<sp/>to<sp/>know<sp/>if<sp/>they&apos;re<sp/>being<sp/>spawned<sp/>during<sp/>the<sp/>initial<sp/>spawn.</highlight></codeline>
<codeline lineno="3171"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="3172"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3173"><highlight class="normal">gameState_t<sp/>idGameLocal::GameState(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gamestate;</highlight></codeline>
<codeline lineno="3175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"></highlight></codeline>
<codeline lineno="3177"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3178"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="3179"><highlight class="comment">idGameLocal::SpawnMapEntities</highlight></codeline>
<codeline lineno="3180"><highlight class="comment"></highlight></codeline>
<codeline lineno="3181"><highlight class="comment">Parses<sp/>textual<sp/>entity<sp/>definitions<sp/>out<sp/>of<sp/>an<sp/>entstring<sp/>and<sp/>spawns<sp/>gentities.</highlight></codeline>
<codeline lineno="3182"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="3183"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3184"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::SpawnMapEntities(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num;</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inhibit;</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_map_entity" kindref="compound">idMapEntity</ref><sp/>*mapEnt;</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numEntities;</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/><sp/><sp/><sp/><sp/><sp/>args;</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"></highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;Spawning<sp/>entities\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"></highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mapFile<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Printf(</highlight><highlight class="stringliteral">&quot;No<sp/>mapfile<sp/>present\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"></highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/>SetSkill(<sp/>g_skill.GetInteger()<sp/>);</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"></highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/>numEntities<sp/>=<sp/>mapFile-&gt;GetNumEntities();</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>numEntities<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;...no<sp/>entities&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"></highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>worldspawn<sp/>is<sp/>a<sp/>special<sp/>that<sp/>performs<sp/>any<sp/>global<sp/>setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>needed<sp/>by<sp/>a<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/>mapEnt<sp/>=<sp/>mapFile-&gt;GetEntity(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/>args<sp/>=<sp/>mapEnt-&gt;epairs;</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/>args.SetInt(<sp/></highlight><highlight class="stringliteral">&quot;spawn_entnum&quot;</highlight><highlight class="normal">,<sp/>ENTITYNUM_WORLD<sp/>);</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!SpawnEntityDef(<sp/>args<sp/>)<sp/>||<sp/>!entities[<sp/>ENTITYNUM_WORLD<sp/>]<sp/>||<sp/>!entities[<sp/>ENTITYNUM_WORLD<sp/>]-&gt;IsType(<sp/>idWorldspawn::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;Problem<sp/>spawning<sp/>world<sp/>entity&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"></highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/>inhibit<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"></highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>1<sp/>;<sp/>i<sp/>&lt;<sp/>numEntities<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapEnt<sp/>=<sp/>mapFile-&gt;GetEntity(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>=<sp/>mapEnt-&gt;epairs;</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"></highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!InhibitEntitySpawn(<sp/>args<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>precache<sp/>any<sp/>media<sp/>specified<sp/>in<sp/>the<sp/>map<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CacheDictionaryMedia(<sp/>&amp;args<sp/>);</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"></highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SpawnEntityDef(<sp/>args<sp/>);</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num++;</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inhibit++;</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"></highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;...%i<sp/>entities<sp/>spawned,<sp/>%i<sp/>inhibited\n\n&quot;</highlight><highlight class="normal">,<sp/>num,<sp/>inhibit<sp/>);</highlight></codeline>
<codeline lineno="3234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"></highlight></codeline>
<codeline lineno="3236"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3237"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3238"><highlight class="comment">idGameLocal::AddEntityToHash</highlight></codeline>
<codeline lineno="3239"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3240"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3241"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::AddEntityToHash(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>FindEntity(<sp/>name<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;Multiple<sp/>entities<sp/>named<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/>entityHash.Add(<sp/>entityHash.GenerateKey(<sp/>name,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>),<sp/>ent-&gt;entityNumber<sp/>);</highlight></codeline>
<codeline lineno="3246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"></highlight></codeline>
<codeline lineno="3248"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3249"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3250"><highlight class="comment">idGameLocal::RemoveEntityFromHash</highlight></codeline>
<codeline lineno="3251"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3252"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3253"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idGameLocal::RemoveEntityFromHash(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash,<sp/>i;</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"></highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>entityHash.GenerateKey(<sp/>name,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>entityHash.First(<sp/>hash<sp/>);<sp/>i<sp/>!=<sp/>-1;<sp/>i<sp/>=<sp/>entityHash.Next(<sp/>i<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>entities[i]<sp/>&amp;&amp;<sp/>entities[i]<sp/>==<sp/>ent<sp/>&amp;&amp;<sp/>entities[i]-&gt;name.Icmp(<sp/>name<sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entityHash.Remove(<sp/>hash,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"></highlight></codeline>
<codeline lineno="3266"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3267"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3268"><highlight class="comment">idGameLocal::GetTargets</highlight></codeline>
<codeline lineno="3269"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3270"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3271"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idGameLocal::GetTargets(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>&amp;args,<sp/><ref refid="classid_list" kindref="compound">idList</ref>&lt;<sp/><ref refid="classid_entity_ptr" kindref="compound">idEntityPtr&lt;idEntity&gt;</ref><sp/>&gt;<sp/>&amp;list,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ref<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>num,<sp/>refLength;</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_key_value" kindref="compound">idKeyValue</ref><sp/>*arg;</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"></highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/>list.Clear();</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"></highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/>refLength<sp/>=<sp/>strlen(<sp/>ref<sp/>);</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>args.GetNumKeyVals();</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"></highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg<sp/>=<sp/>args.GetKeyVal(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>arg-&gt;GetKey().Icmpn(<sp/>ref,<sp/>refLength<sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"></highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>FindEntity(<sp/>arg-&gt;GetValue()<sp/>);</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_entity_ptr" kindref="compound">idEntityPtr&lt;idEntity&gt;</ref><sp/>&amp;entityPtr<sp/>=<sp/>list.Alloc();</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entityPtr<sp/>=<sp/>ent;</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"></highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list.Num();</highlight></codeline>
<codeline lineno="3294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"></highlight></codeline>
<codeline lineno="3296"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3297"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="3298"><highlight class="comment">idGameLocal::GetTraceEntity</highlight></codeline>
<codeline lineno="3299"><highlight class="comment"></highlight></codeline>
<codeline lineno="3300"><highlight class="comment">returns<sp/>the<sp/>master<sp/>entity<sp/>of<sp/>a<sp/>trace.<sp/><sp/>for<sp/>example,<sp/>if<sp/>the<sp/>trace<sp/>entity<sp/>is<sp/>the<sp/>player&apos;s<sp/>head,<sp/>it<sp/>will<sp/>return<sp/>the<sp/>player.</highlight></codeline>
<codeline lineno="3301"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="3302"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*idGameLocal::GetTraceEntity(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtrace__s" kindref="compound">trace_t</ref><sp/>&amp;trace<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*master;</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"></highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!entities[<sp/>trace.c.entityNum<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/>master<sp/>=<sp/>entities[<sp/>trace.c.entityNum<sp/>]-&gt;GetBindMaster();</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>master<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>master;</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entities[<sp/>trace.c.entityNum<sp/>];</highlight></codeline>
<codeline lineno="3314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"></highlight></codeline>
<codeline lineno="3316"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3317"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="3318"><highlight class="comment">idGameLocal::ArgCompletion_EntityName</highlight></codeline>
<codeline lineno="3319"><highlight class="comment"></highlight></codeline>
<codeline lineno="3320"><highlight class="comment">Argument<sp/>completion<sp/>for<sp/>entity<sp/>names</highlight></codeline>
<codeline lineno="3321"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="3322"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3323"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::ArgCompletion_EntityName(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(*callback)(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"></highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gameLocal.num_entities;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.entities[<sp/>i<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callback(<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>args.Argv(<sp/>0<sp/>),<sp/>gameLocal.entities[<sp/>i<sp/>]-&gt;name.c_str()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"></highlight></codeline>
<codeline lineno="3333"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3334"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="3335"><highlight class="comment">idGameLocal::FindEntity</highlight></codeline>
<codeline lineno="3336"><highlight class="comment"></highlight></codeline>
<codeline lineno="3337"><highlight class="comment">Returns<sp/>the<sp/>entity<sp/>whose<sp/>name<sp/>matches<sp/>the<sp/>specified<sp/>string.</highlight></codeline>
<codeline lineno="3338"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="3339"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*idGameLocal::FindEntity(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash,<sp/>i;</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"></highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>entityHash.GenerateKey(<sp/>name,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>entityHash.First(<sp/>hash<sp/>);<sp/>i<sp/>!=<sp/>-1;<sp/>i<sp/>=<sp/>entityHash.Next(<sp/>i<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>entities[i]<sp/>&amp;&amp;<sp/>entities[i]-&gt;name.Icmp(<sp/>name<sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entities[i];</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"></highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"></highlight></codeline>
<codeline lineno="3353"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3354"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="3355"><highlight class="comment">idGameLocal::FindEntityUsingDef</highlight></codeline>
<codeline lineno="3356"><highlight class="comment"></highlight></codeline>
<codeline lineno="3357"><highlight class="comment">Searches<sp/>all<sp/>active<sp/>entities<sp/>for<sp/>the<sp/>next<sp/>one<sp/>using<sp/>the<sp/>specified<sp/>entityDef.</highlight></codeline>
<codeline lineno="3358"><highlight class="comment"></highlight></codeline>
<codeline lineno="3359"><highlight class="comment">Searches<sp/>beginning<sp/>at<sp/>the<sp/>entity<sp/>after<sp/>from,<sp/>or<sp/>the<sp/>beginning<sp/>if<sp/>NULL</highlight></codeline>
<codeline lineno="3360"><highlight class="comment">NULL<sp/>will<sp/>be<sp/>returned<sp/>if<sp/>the<sp/>end<sp/>of<sp/>the<sp/>list<sp/>is<sp/>reached.</highlight></codeline>
<codeline lineno="3361"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="3362"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*idGameLocal::FindEntityUsingDef(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*match<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/><sp/><sp/><sp/>*ent;</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"></highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!from<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>spawnedEntities.Next();</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>from-&gt;spawnNode.Next();</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"></highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>ent<sp/>!=<sp/>NULL;<sp/>ent<sp/>=<sp/>ent-&gt;spawnNode.Next()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>ent<sp/>);</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idStr::Icmp(<sp/>ent-&gt;GetEntityDefName(),<sp/>match<sp/>)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ent;</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"></highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"></highlight></codeline>
<codeline lineno="3382"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3383"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="3384"><highlight class="comment">idGameLocal::FindTraceEntity</highlight></codeline>
<codeline lineno="3385"><highlight class="comment"></highlight></codeline>
<codeline lineno="3386"><highlight class="comment">Searches<sp/>all<sp/>active<sp/>entities<sp/>for<sp/>the<sp/>closest<sp/>(<sp/>to<sp/>start<sp/>)<sp/>match<sp/>that<sp/>intersects</highlight></codeline>
<codeline lineno="3387"><highlight class="comment">the<sp/>line<sp/>start,end</highlight></codeline>
<codeline lineno="3388"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="3389"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*idGameLocal::FindTraceEntity(<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>start,<sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/>&amp;c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*skip<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*bestEnt;</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale;</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bestScale;</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>b;</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"></highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/>bestEnt<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/>bestScale<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>ent<sp/>=<sp/>spawnedEntities.Next();<sp/>ent<sp/>!=<sp/>NULL;<sp/>ent<sp/>=<sp/>ent-&gt;spawnNode.Next()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent-&gt;IsType(<sp/>c<sp/>)<sp/>&amp;&amp;<sp/>ent<sp/>!=<sp/>skip<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>ent-&gt;GetPhysics()-&gt;GetAbsBounds().Expand(<sp/>16<sp/>);</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b.RayIntersection(<sp/>start,<sp/>end-start,<sp/>scale<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>scale<sp/>&gt;=<sp/>0.0f<sp/>&amp;&amp;<sp/>scale<sp/>&lt;<sp/>bestScale<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestEnt<sp/>=<sp/>ent;</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestScale<sp/>=<sp/>scale;</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"></highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bestEnt;</highlight></codeline>
<codeline lineno="3412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"></highlight></codeline>
<codeline lineno="3414"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3415"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3416"><highlight class="comment">idGameLocal::EntitiesWithinRadius</highlight></codeline>
<codeline lineno="3417"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3418"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3419"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idGameLocal::EntitiesWithinRadius(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>org,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>radius,<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>**entityList,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxCount<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>bo(<sp/>org<sp/>);</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>entCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"></highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/>bo.ExpandSelf(<sp/>radius<sp/>);</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>ent<sp/>=<sp/>spawnedEntities.Next();<sp/>ent<sp/>!=<sp/>NULL;<sp/>ent<sp/>=<sp/>ent-&gt;spawnNode.Next()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent-&gt;GetPhysics()-&gt;GetAbsBounds().IntersectsBounds(<sp/>bo<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entityList[entCount++]<sp/>=<sp/>ent;</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"></highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entCount;</highlight></codeline>
<codeline lineno="3432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"></highlight></codeline>
<codeline lineno="3434"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3435"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="3436"><highlight class="comment">idGameLocal::KillBox</highlight></codeline>
<codeline lineno="3437"><highlight class="comment"></highlight></codeline>
<codeline lineno="3438"><highlight class="comment">Kills<sp/>all<sp/>entities<sp/>that<sp/>would<sp/>touch<sp/>the<sp/>proposed<sp/>new<sp/>positioning<sp/>of<sp/>ent.<sp/>The<sp/>ent<sp/>itself<sp/>will<sp/>not<sp/>being<sp/>killed.</highlight></codeline>
<codeline lineno="3439"><highlight class="comment">Checks<sp/>if<sp/>player<sp/>entities<sp/>are<sp/>in<sp/>the<sp/>teleporter,<sp/>and<sp/>marks<sp/>them<sp/>to<sp/>die<sp/>at<sp/>teleport<sp/>exit<sp/>instead<sp/>of<sp/>immediately.</highlight></codeline>
<codeline lineno="3440"><highlight class="comment">If<sp/>catch_teleport,<sp/>this<sp/>only<sp/>marks<sp/>teleport<sp/>players<sp/>for<sp/>death<sp/>on<sp/>exit</highlight></codeline>
<codeline lineno="3441"><highlight class="comment">=================</highlight></codeline>
<codeline lineno="3442"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3443"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::KillBox(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>catch_teleport<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num;</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*<sp/><sp/>hit;</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref><sp/>*cm;</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref><sp/>*clipModels[<sp/>MAX_GENTITIES<sp/>];</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_physics" kindref="compound">idPhysics</ref><sp/><sp/><sp/>*phys;</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"></highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/>phys<sp/>=<sp/>ent-&gt;GetPhysics();</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!phys-&gt;GetNumClipModels()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"></highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>clip.ClipModelsTouchingBounds(<sp/>phys-&gt;GetAbsBounds(),<sp/>phys-&gt;GetClipMask(),<sp/>clipModels,<sp/>MAX_GENTITIES<sp/>);</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cm<sp/>=<sp/>clipModels[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"></highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>check<sp/>render<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cm-&gt;IsRenderModel()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"></highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hit<sp/>=<sp/>cm-&gt;GetEntity();</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>hit<sp/>==<sp/>ent<sp/>)<sp/>||<sp/>!hit-&gt;fl.takedamage<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"></highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!phys-&gt;ClipContents(<sp/>cm<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"></highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nail<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>hit-&gt;IsType(<sp/>idPlayer::Type<sp/>)<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>hit<sp/>)-&gt;IsInTeleport()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>hit<sp/>)-&gt;TeleportDeath(<sp/>ent-&gt;entityNumber<sp/>);</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!catch_teleport<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hit-&gt;Damage(<sp/>ent,<sp/>ent,<sp/>vec3_origin,<sp/></highlight><highlight class="stringliteral">&quot;damage_telefrag&quot;</highlight><highlight class="normal">,<sp/>1.0f,<sp/>INVALID_JOINT<sp/>);</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"></highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!gameLocal.isMultiplayer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let<sp/>the<sp/>mapper<sp/>know<sp/>about<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Warning(<sp/></highlight><highlight class="stringliteral">&quot;&apos;%s&apos;<sp/>telefragged<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>ent-&gt;name.c_str(),<sp/>hit-&gt;name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"></highlight></codeline>
<codeline lineno="3488"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3489"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3490"><highlight class="comment">idGameLocal::RequirementMet</highlight></codeline>
<codeline lineno="3491"><highlight class="comment">================</highlight></codeline>
<codeline lineno="3492"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3493"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idGameLocal::RequirementMet(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*activator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_str" kindref="compound">idStr</ref><sp/>&amp;requires,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>removeItem<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>requires.Length()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>activator-&gt;IsType(<sp/>idPlayer::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*player<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(activator);</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>*item<sp/>=<sp/>player-&gt;FindInventoryItem(<sp/>requires<sp/>);</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>item<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>removeItem<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>player-&gt;RemoveInventoryItem(<sp/>item<sp/>);</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"></highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"></highlight></codeline>
<codeline lineno="3512"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3513"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3514"><highlight class="comment">idGameLocal::AlertAI</highlight></codeline>
<codeline lineno="3515"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3516"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3517"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::AlertAI(<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>&amp;&amp;<sp/>ent-&gt;IsType(<sp/>idActor::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>alert<sp/>them<sp/>for<sp/>the<sp/>next<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastAIAlertTime<sp/>=<sp/>time<sp/>+<sp/>msec;</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastAIAlertEntity<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_actor" kindref="compound">idActor</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>ent<sp/>);</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"></highlight></codeline>
<codeline lineno="3525"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3526"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3527"><highlight class="comment">idGameLocal::GetAlertEntity</highlight></codeline>
<codeline lineno="3528"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3529"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><ref refid="classid_actor" kindref="compound">idActor</ref><sp/>*idGameLocal::GetAlertEntity(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lastAIAlertTime<sp/>&gt;=<sp/>time<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lastAIAlertEntity.GetEntity();</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"></highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"></highlight></codeline>
<codeline lineno="3538"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3539"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3540"><highlight class="comment">idGameLocal::RadiusDamage</highlight></codeline>
<codeline lineno="3541"><highlight class="comment">============</highlight></codeline>
<codeline lineno="3542"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3543"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::RadiusDamage(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;origin,<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*inflictor,<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*attacker,<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ignoreDamage,<sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ignorePush,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*damageDefName,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dmgPower<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist,<sp/>damageScale,<sp/>attackerDamageScale,<sp/>attackerPushScale;</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*<sp/><sp/>ent;</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*<sp/><sp/>entityList[<sp/>MAX_GENTITIES<sp/>];</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numListedEntities;</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/><sp/><sp/><sp/>bounds;</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/>v,<sp/>damagePoint,<sp/>dir;</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>e,<sp/>damage,<sp/>radius,<sp/>push;</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"></highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/>*damageDef<sp/>=<sp/>FindEntityDefDict(<sp/>damageDefName,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!damageDef<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Warning(<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>damageDef<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>damageDefName<sp/>);</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"></highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/>damageDef-&gt;GetInt(<sp/></highlight><highlight class="stringliteral">&quot;damage&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;20&quot;</highlight><highlight class="normal">,<sp/>damage<sp/>);</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/>damageDef-&gt;GetInt(<sp/></highlight><highlight class="stringliteral">&quot;radius&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;50&quot;</highlight><highlight class="normal">,<sp/>radius<sp/>);</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/>damageDef-&gt;GetInt(<sp/></highlight><highlight class="stringliteral">&quot;push&quot;</highlight><highlight class="normal">,<sp/>va(<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>damage<sp/>*<sp/>100<sp/>),<sp/>push<sp/>);</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/>damageDef-&gt;GetFloat(<sp/></highlight><highlight class="stringliteral">&quot;attackerDamageScale&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0.5&quot;</highlight><highlight class="normal">,<sp/>attackerDamageScale<sp/>);</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/>damageDef-&gt;GetFloat(<sp/></highlight><highlight class="stringliteral">&quot;attackerPushScale&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>attackerPushScale<sp/>);</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"></highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>radius<sp/>&lt;<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radius<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"></highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds<sp/>=<sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref>(<sp/>origin<sp/>).Expand(<sp/>radius<sp/>);</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"></highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>all<sp/>entities<sp/>touching<sp/>the<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/>numListedEntities<sp/>=<sp/>clip.EntitiesTouchingBounds(<sp/>bounds,<sp/>-1,<sp/>entityList,<sp/>MAX_GENTITIES<sp/>);</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"></highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>inflictor<sp/>&amp;&amp;<sp/>inflictor-&gt;IsType(<sp/>idAFAttachment::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inflictor<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_a_f_attachment" kindref="compound">idAFAttachment</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(inflictor)-&gt;GetBody();</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>attacker<sp/>&amp;&amp;<sp/>attacker-&gt;IsType(<sp/>idAFAttachment::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attacker<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_a_f_attachment" kindref="compound">idAFAttachment</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(attacker)-&gt;GetBody();</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ignoreDamage<sp/>&amp;&amp;<sp/>ignoreDamage-&gt;IsType(<sp/>idAFAttachment::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ignoreDamage<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_a_f_attachment" kindref="compound">idAFAttachment</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ignoreDamage)-&gt;GetBody();</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"></highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>damage<sp/>to<sp/>the<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>e<sp/>=<sp/>0;<sp/>e<sp/>&lt;<sp/>numListedEntities;<sp/>e++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>entityList[<sp/>e<sp/>];</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>ent<sp/>);</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"></highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ent-&gt;fl.takedamage<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"></highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>==<sp/>inflictor<sp/>||<sp/>(<sp/>ent-&gt;IsType(<sp/>idAFAttachment::Type<sp/>)<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_a_f_attachment" kindref="compound">idAFAttachment</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ent)-&gt;GetBody()<sp/>==<sp/>inflictor<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"></highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>==<sp/>ignoreDamage<sp/>||<sp/>(<sp/>ent-&gt;IsType(<sp/>idAFAttachment::Type<sp/>)<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_a_f_attachment" kindref="compound">idAFAttachment</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ent)-&gt;GetBody()<sp/>==<sp/>ignoreDamage<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"></highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>damage<sp/>a<sp/>dead<sp/>player</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>isMultiplayer<sp/>&amp;&amp;<sp/>ent-&gt;entityNumber<sp/>&lt;<sp/>MAX_CLIENTS<sp/>&amp;&amp;<sp/>ent-&gt;IsType(<sp/>idPlayer::Type<sp/>)<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>ent<sp/>)-&gt;health<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"></highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>distance<sp/>from<sp/>the<sp/>edge<sp/>of<sp/>the<sp/>bounding<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>origin[<sp/>i<sp/>]<sp/>&lt;<sp/>ent-&gt;GetPhysics()-&gt;GetAbsBounds()[0][<sp/>i<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[<sp/>i<sp/>]<sp/>=<sp/>ent-&gt;GetPhysics()-&gt;GetAbsBounds()[0][<sp/>i<sp/>]<sp/>-<sp/>origin[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>origin[<sp/>i<sp/>]<sp/>&gt;<sp/>ent-&gt;GetPhysics()-&gt;GetAbsBounds()[1][<sp/>i<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[<sp/>i<sp/>]<sp/>=<sp/>origin[<sp/>i<sp/>]<sp/>-<sp/>ent-&gt;GetPhysics()-&gt;GetAbsBounds()[1][<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[<sp/>i<sp/>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"></highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>v.Length();</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dist<sp/>&gt;=<sp/>radius<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"></highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent-&gt;CanDamage(<sp/>origin,<sp/>damagePoint<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>push<sp/>the<sp/>center<sp/>of<sp/>mass<sp/>higher<sp/>than<sp/>the<sp/>origin<sp/>so<sp/>players</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>knocked<sp/>into<sp/>the<sp/>air<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>ent-&gt;GetPhysics()-&gt;GetOrigin()<sp/>-<sp/>origin;</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir[<sp/>2<sp/>]<sp/>+=<sp/>24;</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"></highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>damage<sp/>scale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>damageScale<sp/>=<sp/>dmgPower<sp/>*<sp/>(<sp/>1.0f<sp/>-<sp/>dist<sp/>/<sp/>radius<sp/>);</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>==<sp/>attacker<sp/>||<sp/>(<sp/>ent-&gt;IsType(<sp/>idAFAttachment::Type<sp/>)<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_a_f_attachment" kindref="compound">idAFAttachment</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ent)-&gt;GetBody()<sp/>==<sp/>attacker<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>damageScale<sp/>*=<sp/>attackerDamageScale;</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"></highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;Damage(<sp/>inflictor,<sp/>attacker,<sp/>dir,<sp/>damageDefName,<sp/>damageScale,<sp/>INVALID_JOINT<sp/>);</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"></highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>push<sp/>physics<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>push<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RadiusPush(<sp/>origin,<sp/>radius,<sp/>push<sp/>*<sp/>dmgPower,<sp/>attacker,<sp/>ignorePush,<sp/>attackerPushScale,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"></highlight></codeline>
<codeline lineno="3643"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3644"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="3645"><highlight class="comment">idGameLocal::RadiusPush</highlight></codeline>
<codeline lineno="3646"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="3647"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3648"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::RadiusPush(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;origin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>radius,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>push,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*inflictor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ignore,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>inflictorScale,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>quake<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>numListedClipModels;</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref><sp/>*clipModel;</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref><sp/>*clipModelList[<sp/>MAX_GENTITIES<sp/>];</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>dir;</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref><sp/>bounds;</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmodel_trace__s" kindref="compound">modelTrace_t</ref><sp/>result;</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale;</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"></highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/>dir.Set(<sp/>0.0f,<sp/>0.0f,<sp/>1.0f<sp/>);</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"></highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds<sp/>=<sp/><ref refid="classid_bounds" kindref="compound">idBounds</ref>(<sp/>origin<sp/>).Expand(<sp/>radius<sp/>);</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"></highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>all<sp/>clip<sp/>models<sp/>touching<sp/>the<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/>numListedClipModels<sp/>=<sp/>clip.ClipModelsTouchingBounds(<sp/>bounds,<sp/>-1,<sp/>clipModelList,<sp/>MAX_GENTITIES<sp/>);</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"></highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>inflictor<sp/>&amp;&amp;<sp/>inflictor-&gt;IsType(<sp/>idAFAttachment::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inflictor<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classid_a_f_attachment" kindref="compound">idAFAttachment</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(inflictor)-&gt;GetBody();</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ignore<sp/>&amp;&amp;<sp/>ignore-&gt;IsType(<sp/>idAFAttachment::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ignore<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classid_a_f_attachment" kindref="compound">idAFAttachment</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ignore)-&gt;GetBody();</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"></highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>impact<sp/>to<sp/>all<sp/>the<sp/>clip<sp/>models<sp/>through<sp/>their<sp/>associated<sp/>physics<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numListedClipModels;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"></highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clipModel<sp/>=<sp/>clipModelList[i];</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"></highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>never<sp/>push<sp/>render<sp/>models</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clipModel-&gt;IsRenderModel()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"></highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>clipModel-&gt;GetEntity();</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"></highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>never<sp/>push<sp/>projectiles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent-&gt;IsType(<sp/>idProjectile::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"></highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>players<sp/>use<sp/>&quot;knockback&quot;<sp/>in<sp/>idPlayer::Damage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent-&gt;IsType(<sp/>idPlayer::Type<sp/>)<sp/>&amp;&amp;<sp/>!quake<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"></highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>push<sp/>the<sp/>ignore<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>==<sp/>ignore<sp/>||<sp/>(<sp/>ent-&gt;IsType(<sp/>idAFAttachment::Type<sp/>)<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_a_f_attachment" kindref="compound">idAFAttachment</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ent)-&gt;GetBody()<sp/>==<sp/>ignore<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"></highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameRenderWorld-&gt;FastWorldTrace(<sp/>result,<sp/>origin,<sp/>clipModel-&gt;GetOrigin()<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"></highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scale<sp/>the<sp/>push<sp/>for<sp/>the<sp/>inflictor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>==<sp/>inflictor<sp/>||<sp/>(<sp/>ent-&gt;IsType(<sp/>idAFAttachment::Type<sp/>)<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_a_f_attachment" kindref="compound">idAFAttachment</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ent)-&gt;GetBody()<sp/>==<sp/>inflictor<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>inflictorScale;</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"></highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>quake<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clipModel-&gt;GetEntity()-&gt;ApplyImpulse(<sp/>world,<sp/>clipModel-&gt;GetId(),<sp/>clipModel-&gt;GetOrigin(),<sp/>scale<sp/>*<sp/>push<sp/>*<sp/>dir<sp/>);</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RadiusPushClipModel(<sp/>origin,<sp/>scale<sp/>*<sp/>push,<sp/>clipModel<sp/>);</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"></highlight></codeline>
<codeline lineno="3718"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3719"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="3720"><highlight class="comment">idGameLocal::RadiusPushClipModel</highlight></codeline>
<codeline lineno="3721"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="3722"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3723"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::RadiusPushClipModel(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;origin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>push,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref><sp/>*clipModel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dot,<sp/>dist,<sp/>area;</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_trace_model" kindref="compound">idTraceModel</ref><sp/>*trm;</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtrace_model_poly__t" kindref="compound">traceModelPoly_t</ref><sp/>*<ref refid="structpoly" kindref="compound">poly</ref>;</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_fixed_winding" kindref="compound">idFixedWinding</ref><sp/>w;</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>v,<sp/>localOrigin,<sp/>center,<sp/>impulse;</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"></highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/>trm<sp/>=<sp/>clipModel-&gt;GetTraceModel();</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!trm<sp/>||<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulse<sp/>=<sp/>clipModel-&gt;GetAbsBounds().GetCenter()<sp/>-<sp/>origin;</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulse.Normalize();</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulse.z<sp/>+=<sp/>1.0f;</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clipModel-&gt;GetEntity()-&gt;ApplyImpulse(<sp/>world,<sp/>clipModel-&gt;GetId(),<sp/>clipModel-&gt;GetOrigin(),<sp/>push<sp/>*<sp/>impulse<sp/>);</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"></highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/>localOrigin<sp/>=<sp/>(<sp/>origin<sp/>-<sp/>clipModel-&gt;GetOrigin()<sp/>)<sp/>*<sp/>clipModel-&gt;GetAxis().Transpose();</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>trm-&gt;numPolys;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poly<sp/>=<sp/>&amp;trm-&gt;polys[i];</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"></highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>center.Zero();</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>poly-&gt;numEdges;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>trm-&gt;verts[<sp/>trm-&gt;edges[<sp/>abs(poly-&gt;edges[j])<sp/>].v[<sp/>INTSIGNBITSET(<sp/>poly-&gt;edges[j]<sp/>)<sp/>]<sp/>];</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>center<sp/>+=<sp/>v;</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>-=<sp/>localOrigin;</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.NormalizeFast();<sp/><sp/></highlight><highlight class="comment">//<sp/>project<sp/>point<sp/>on<sp/>a<sp/>unit<sp/>sphere</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w.AddPoint(<sp/>v<sp/>);</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>center<sp/>/=<sp/>poly-&gt;numEdges;</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>center<sp/>-<sp/>localOrigin;</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>v.NormalizeFast();</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dot<sp/>=<sp/>v<sp/>*<sp/>poly-&gt;normal;</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dot<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>area<sp/>=<sp/>w.GetArea();</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>impulse<sp/>in<sp/>polygon<sp/>normal<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulse<sp/>=<sp/>poly-&gt;normal<sp/>*<sp/>clipModel-&gt;GetAxis();</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>push<sp/>up<sp/>for<sp/>nicer<sp/>effect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulse.z<sp/>-=<sp/>1.0f;</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scale<sp/>impulse<sp/>based<sp/>on<sp/>visible<sp/>surface<sp/>area<sp/>and<sp/>polygon<sp/>angle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulse<sp/>*=<sp/>push<sp/>*<sp/>(<sp/>dot<sp/>*<sp/>area<sp/>*<sp/>(<sp/>1.0f<sp/>/<sp/>(<sp/>4.0f<sp/>*<sp/>idMath::PI<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scale<sp/>away<sp/>distance<sp/>for<sp/>nicer<sp/>effect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impulse<sp/>*=<sp/>(<sp/>dist<sp/>*<sp/>2.0f<sp/>);</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>impulse<sp/>is<sp/>applied<sp/>to<sp/>the<sp/>center<sp/>of<sp/>the<sp/>polygon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>center<sp/>=<sp/>clipModel-&gt;GetOrigin()<sp/>+<sp/>center<sp/>*<sp/>clipModel-&gt;GetAxis();</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"></highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clipModel-&gt;GetEntity()-&gt;ApplyImpulse(<sp/>world,<sp/>clipModel-&gt;GetId(),<sp/>center,<sp/>impulse<sp/>);</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"></highlight></codeline>
<codeline lineno="3775"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3776"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="3777"><highlight class="comment">idGameLocal::ProjectDecal</highlight></codeline>
<codeline lineno="3778"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="3779"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3780"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::ProjectDecal(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;origin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;dir,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>depth,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>parallel,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*material,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s,<sp/>c;</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_mat3" kindref="compound">idMat3</ref><sp/>axis,<sp/>axistemp;</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_fixed_winding" kindref="compound">idFixedWinding</ref><sp/>winding;</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>windingOrigin,<sp/>projectionOrigin;</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"></highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>decalWinding[4]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/><sp/>1.0f,<sp/><sp/>1.0f,<sp/>0.0f<sp/>),</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>-1.0f,<sp/><sp/>1.0f,<sp/>0.0f<sp/>),</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>-1.0f,<sp/>-1.0f,<sp/>0.0f<sp/>),</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/><sp/>1.0f,<sp/>-1.0f,<sp/>0.0f<sp/>)</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"></highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!g_decals.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"></highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>randomly<sp/>rotate<sp/>the<sp/>decal<sp/>winding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/><sp/><sp/>idMath::SinCos16(<sp/>(<sp/>angle<sp/>)<sp/>?<sp/>angle<sp/>:<sp/>random.RandomFloat()<sp/>*<sp/>idMath::TWO_PI,<sp/>s,<sp/>c<sp/>);</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"></highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>winding<sp/>orientation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[2]<sp/>=<sp/>dir;</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[2].Normalize();</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[2].NormalVectors(<sp/>axistemp[0],<sp/>axistemp[1]<sp/>);</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[0]<sp/>=<sp/>axistemp[<sp/>0<sp/>]<sp/>*<sp/>c<sp/>+<sp/>axistemp[<sp/>1<sp/>]<sp/>*<sp/>-s;</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/>axis[1]<sp/>=<sp/>axistemp[<sp/>0<sp/>]<sp/>*<sp/>-s<sp/>+<sp/>axistemp[<sp/>1<sp/>]<sp/>*<sp/>-c;</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"></highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/>windingOrigin<sp/>=<sp/>origin<sp/>+<sp/>depth<sp/>*<sp/>axis[2];</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>parallel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>projectionOrigin<sp/>=<sp/>origin<sp/>-<sp/>depth<sp/>*<sp/>axis[2];</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>projectionOrigin<sp/>=<sp/>origin;</highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"></highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>*=<sp/>0.5f;</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"></highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/>winding.Clear();</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/>winding<sp/>+=<sp/><ref refid="classid_vec5" kindref="compound">idVec5</ref>(<sp/>windingOrigin<sp/>+<sp/>(<sp/>axis<sp/>*<sp/>decalWinding[0]<sp/>)<sp/>*<sp/>size,<sp/><ref refid="classid_vec2" kindref="compound">idVec2</ref>(<sp/>1,<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/>winding<sp/>+=<sp/><ref refid="classid_vec5" kindref="compound">idVec5</ref>(<sp/>windingOrigin<sp/>+<sp/>(<sp/>axis<sp/>*<sp/>decalWinding[1]<sp/>)<sp/>*<sp/>size,<sp/><ref refid="classid_vec2" kindref="compound">idVec2</ref>(<sp/>0,<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/><sp/><sp/>winding<sp/>+=<sp/><ref refid="classid_vec5" kindref="compound">idVec5</ref>(<sp/>windingOrigin<sp/>+<sp/>(<sp/>axis<sp/>*<sp/>decalWinding[2]<sp/>)<sp/>*<sp/>size,<sp/><ref refid="classid_vec2" kindref="compound">idVec2</ref>(<sp/>0,<sp/>0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/><sp/>winding<sp/>+=<sp/><ref refid="classid_vec5" kindref="compound">idVec5</ref>(<sp/>windingOrigin<sp/>+<sp/>(<sp/>axis<sp/>*<sp/>decalWinding[3]<sp/>)<sp/>*<sp/>size,<sp/><ref refid="classid_vec2" kindref="compound">idVec2</ref>(<sp/>1,<sp/>0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;ProjectDecalOntoWorld(<sp/>winding,<sp/>projectionOrigin,<sp/>parallel,<sp/>depth<sp/>*<sp/>0.5f,<sp/>declManager-&gt;FindMaterial(<sp/>material<sp/>),<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="3822"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"></highlight></codeline>
<codeline lineno="3824"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3825"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="3826"><highlight class="comment">idGameLocal::BloodSplat</highlight></codeline>
<codeline lineno="3827"><highlight class="comment">==============</highlight></codeline>
<codeline lineno="3828"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3829"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::BloodSplat(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;origin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;dir,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*material<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>halfSize<sp/>=<sp/>size<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>verts[]<sp/>=<sp/>{<sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>0.0f,<sp/>+halfSize,<sp/>+halfSize<sp/>),</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>0.0f,<sp/>+halfSize,<sp/>-halfSize<sp/>),</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>0.0f,<sp/>-halfSize,<sp/>-halfSize<sp/>),</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref>(<sp/>0.0f,<sp/>-halfSize,<sp/>+halfSize<sp/>)<sp/>};</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_trace_model" kindref="compound">idTraceModel</ref><sp/>trm;</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_clip_model" kindref="compound">idClipModel</ref><sp/>mdl;</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtrace__s" kindref="compound">trace_t</ref><sp/>results;</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"></highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>get<sp/>from<sp/>damage<sp/>def</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!g_bloodEffects.GetBool()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"></highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>halfSize<sp/>+<sp/>random.RandomFloat()<sp/>*<sp/>halfSize;</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/>trm.SetupPolygon(<sp/>verts,<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/>mdl.LoadModel(<sp/>trm<sp/>);</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/>clip.Translation(<sp/>results,<sp/>origin,<sp/>origin<sp/>+<sp/>dir<sp/>*<sp/>64.0f,<sp/>&amp;mdl,<sp/>mat3_identity,<sp/>CONTENTS_SOLID,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/>ProjectDecal(<sp/>results.endpos,<sp/>dir,<sp/>2.0f<sp/>*<sp/>size,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>size,<sp/>material<sp/>);</highlight></codeline>
<codeline lineno="3849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"></highlight></codeline>
<codeline lineno="3851"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3852"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="3853"><highlight class="comment">idGameLocal::SetCamera</highlight></codeline>
<codeline lineno="3854"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="3855"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3856"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::SetCamera(<sp/><ref refid="classid_camera" kindref="compound">idCamera</ref><sp/>*cam<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_a_i" kindref="compound">idAI</ref><sp/>*ai;</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"></highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>should<sp/>fix<sp/>going<sp/>into<sp/>a<sp/>cinematic<sp/>when<sp/>dead..<sp/>rare<sp/>but<sp/>happens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*client<sp/>=<sp/>GetLocalPlayer();</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>client-&gt;health<sp/>&lt;=<sp/>0<sp/>||<sp/>client-&gt;AI_DEAD<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"></highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/><sp/>camera<sp/>=<sp/>cam;</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>camera<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inCinematic<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"></highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>skipCinematic<sp/>&amp;&amp;<sp/>camera-&gt;spawnArgs.GetBool(<sp/></highlight><highlight class="stringliteral">&quot;disconnect&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>camera-&gt;spawnArgs.SetBool(<sp/></highlight><highlight class="stringliteral">&quot;disconnect&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvarSystem-&gt;SetCVarFloat(<sp/></highlight><highlight class="stringliteral">&quot;r_znear&quot;</highlight><highlight class="normal">,<sp/>3.0f<sp/>);</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmdSystem-&gt;BufferCommandText(<sp/>CMD_EXEC_APPEND,<sp/></highlight><highlight class="stringliteral">&quot;disconnect\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skipCinematic<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"></highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>time<sp/>&gt;<sp/>cinematicStopTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cinematicSkipTime<sp/>=<sp/>time<sp/>+<sp/>CINEMATIC_SKIP_DELAY;</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"></highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>r_znear<sp/>so<sp/>that<sp/>transitioning<sp/>into/out<sp/>of<sp/>the<sp/>player&apos;s<sp/>head<sp/>doesn&apos;t<sp/>clip<sp/>through<sp/>the<sp/>view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvarSystem-&gt;SetCVarFloat(<sp/></highlight><highlight class="stringliteral">&quot;r_znear&quot;</highlight><highlight class="normal">,<sp/>1.0f<sp/>);</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hide<sp/>all<sp/>the<sp/>player<sp/>models</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numClients;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>entities[<sp/>i<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="classid_player" kindref="compound">idPlayer</ref>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>entities[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client-&gt;EnterCinematic();</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"></highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!cam-&gt;spawnArgs.GetBool(<sp/></highlight><highlight class="stringliteral">&quot;ignore_enemies&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kill<sp/>any<sp/>active<sp/>monsters<sp/>that<sp/>are<sp/>enemies<sp/>of<sp/>the<sp/>player</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>ent<sp/>=<sp/>spawnedEntities.Next();<sp/>ent<sp/>!=<sp/>NULL;<sp/>ent<sp/>=<sp/>ent-&gt;spawnNode.Next()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent-&gt;cinematic<sp/>||<sp/>ent-&gt;fl.isDormant<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>kill<sp/>entities<sp/>that<sp/>aren&apos;t<sp/>needed<sp/>for<sp/>cinematics<sp/>and<sp/>aren&apos;t<sp/>dormant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent-&gt;IsType(<sp/>idAI::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ai<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_a_i" kindref="compound">idAI</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>ent<sp/>);</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ai-&gt;GetEnemy()<sp/>||<sp/>!ai-&gt;IsActive()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>enemy,<sp/>or<sp/>inactive,<sp/>so<sp/>probably<sp/>safe<sp/>to<sp/>ignore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent-&gt;IsType(<sp/>idProjectile::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>all<sp/>projectiles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ent-&gt;spawnArgs.GetBool(<sp/></highlight><highlight class="stringliteral">&quot;cinematic_remove&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>anything<sp/>marked<sp/>to<sp/>be<sp/>removed<sp/>during<sp/>cinematics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>everything<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"></highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DPrintf(<sp/></highlight><highlight class="stringliteral">&quot;removing<sp/>&apos;%s&apos;<sp/>for<sp/>cinematic\n&quot;</highlight><highlight class="normal">,<sp/>ent-&gt;GetName()<sp/>);</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;PostEventMS(<sp/>&amp;EV_Remove,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"></highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inCinematic<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cinematicStopTime<sp/>=<sp/>time<sp/>+<sp/>msec;</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"></highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>r_znear</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvarSystem-&gt;SetCVarFloat(<sp/></highlight><highlight class="stringliteral">&quot;r_znear&quot;</highlight><highlight class="normal">,<sp/>3.0f<sp/>);</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"></highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>show<sp/>all<sp/>the<sp/>player<sp/>models</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numClients;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>entities[<sp/>i<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*client<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="classid_player" kindref="compound">idPlayer</ref>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>entities[<sp/>i<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client-&gt;ExitCinematic();</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"></highlight></codeline>
<codeline lineno="3940"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3941"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="3942"><highlight class="comment">idGameLocal::GetCamera</highlight></codeline>
<codeline lineno="3943"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="3944"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><ref refid="classid_camera" kindref="compound">idCamera</ref><sp/>*idGameLocal::GetCamera(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>camera;</highlight></codeline>
<codeline lineno="3947"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"></highlight></codeline>
<codeline lineno="3949"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3950"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="3951"><highlight class="comment">idGameLocal::SkipCinematic</highlight></codeline>
<codeline lineno="3952"><highlight class="comment">=============</highlight></codeline>
<codeline lineno="3953"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3954"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idGameLocal::SkipCinematic(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>camera<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>camera-&gt;spawnArgs.GetBool(<sp/></highlight><highlight class="stringliteral">&quot;disconnect&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>camera-&gt;spawnArgs.SetBool(<sp/></highlight><highlight class="stringliteral">&quot;disconnect&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cvarSystem-&gt;SetCVarFloat(<sp/></highlight><highlight class="stringliteral">&quot;r_znear&quot;</highlight><highlight class="normal">,<sp/>3.0f<sp/>);</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmdSystem-&gt;BufferCommandText(<sp/>CMD_EXEC_APPEND,<sp/></highlight><highlight class="stringliteral">&quot;disconnect\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skipCinematic<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"></highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>camera-&gt;spawnArgs.GetBool(<sp/></highlight><highlight class="stringliteral">&quot;instantSkip&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>camera-&gt;Stop();</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"></highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/>soundSystem-&gt;SetMute(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!skipCinematic<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skipCinematic<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cinematicMaxSkipTime<sp/>=<sp/>gameLocal.time<sp/>+<sp/>SEC2MS(<sp/>g_cinematicMaxSkipTime.GetFloat()<sp/>);</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"></highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3977"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"></highlight></codeline>
<codeline lineno="3979"><highlight class="normal"></highlight></codeline>
<codeline lineno="3980"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3981"><highlight class="comment">======================</highlight></codeline>
<codeline lineno="3982"><highlight class="comment">idGameLocal::SpreadLocations</highlight></codeline>
<codeline lineno="3983"><highlight class="comment"></highlight></codeline>
<codeline lineno="3984"><highlight class="comment">Now<sp/>that<sp/>everything<sp/>has<sp/>been<sp/>spawned,<sp/>associate<sp/>areas<sp/>with<sp/>location<sp/>entities</highlight></codeline>
<codeline lineno="3985"><highlight class="comment">======================</highlight></codeline>
<codeline lineno="3986"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3987"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::SpreadLocations()<sp/>{</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"></highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>the<sp/>area<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numAreas<sp/>=<sp/>gameRenderWorld-&gt;NumAreas();</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/>locationEntities<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classid_location_entity" kindref="compound">idLocationEntity</ref><sp/>*[<sp/>numAreas<sp/>];</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>locationEntities,<sp/>0,<sp/>numAreas<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>*locationEntities<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"></highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>location<sp/>entity,<sp/>make<sp/>pointers<sp/>from<sp/>every<sp/>area<sp/>it<sp/>touches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>ent<sp/>=<sp/>spawnedEntities.Next();<sp/>ent<sp/>!=<sp/>NULL;<sp/>ent<sp/>=<sp/>ent-&gt;spawnNode.Next()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!ent-&gt;IsType(<sp/>idLocationEntity::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/>point<sp/>=<sp/>ent-&gt;spawnArgs.GetVector(<sp/></highlight><highlight class="stringliteral">&quot;origin&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>areaNum<sp/>=<sp/>gameRenderWorld-&gt;PointInArea(<sp/>point<sp/>);</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>areaNum<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Printf(<sp/></highlight><highlight class="stringliteral">&quot;SpreadLocations:<sp/>location<sp/>&apos;%s&apos;<sp/>is<sp/>not<sp/>in<sp/>a<sp/>valid<sp/>area\n&quot;</highlight><highlight class="normal">,<sp/>ent-&gt;spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>areaNum<sp/>&gt;=<sp/>numAreas<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;idGameLocal::SpreadLocations:<sp/>areaNum<sp/>&gt;=<sp/>gameRenderWorld-&gt;NumAreas()&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>locationEntities[areaNum]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Warning(<sp/></highlight><highlight class="stringliteral">&quot;location<sp/>entity<sp/>&apos;%s&apos;<sp/>overlaps<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>ent-&gt;spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal"><sp/>),</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>locationEntities[areaNum]-&gt;spawnArgs.GetString(<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>locationEntities[areaNum]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_location_entity" kindref="compound">idLocationEntity</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ent);</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"></highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>spread<sp/>to<sp/>all<sp/>other<sp/>connected<sp/>areas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>numAreas<sp/>;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>==<sp/>areaNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameRenderWorld-&gt;AreasAreConnected(<sp/>areaNum,<sp/>i,<sp/>PS_BLOCK_LOCATION<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>locationEntities[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_location_entity" kindref="compound">idLocationEntity</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ent);</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4026"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"></highlight></codeline>
<codeline lineno="4028"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4029"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="4030"><highlight class="comment">idGameLocal::LocationForPoint</highlight></codeline>
<codeline lineno="4031"><highlight class="comment"></highlight></codeline>
<codeline lineno="4032"><highlight class="comment">The<sp/>player<sp/>checks<sp/>the<sp/>location<sp/>each<sp/>frame<sp/>to<sp/>update<sp/>the<sp/>HUD<sp/>text<sp/>display</highlight></codeline>
<codeline lineno="4033"><highlight class="comment">May<sp/>return<sp/>NULL</highlight></codeline>
<codeline lineno="4034"><highlight class="comment">===================</highlight></codeline>
<codeline lineno="4035"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><ref refid="classid_location_entity" kindref="compound">idLocationEntity</ref><sp/>*idGameLocal::LocationForPoint(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/>&amp;point<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!locationEntities<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>SpreadLocations()<sp/>has<sp/>been<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"></highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>areaNum<sp/>=<sp/>gameRenderWorld-&gt;PointInArea(<sp/>point<sp/>);</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>areaNum<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>areaNum<sp/>&gt;=<sp/>gameRenderWorld-&gt;NumAreas()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;idGameLocal::LocationForPoint:<sp/>areaNum<sp/>&gt;=<sp/>gameRenderWorld-&gt;NumAreas()&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"></highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>locationEntities[<sp/>areaNum<sp/>];</highlight></codeline>
<codeline lineno="4051"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"></highlight></codeline>
<codeline lineno="4053"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4054"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4055"><highlight class="comment">idGameLocal::SetPortalState</highlight></codeline>
<codeline lineno="4056"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4057"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4058"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::SetPortalState(<sp/>qhandle_t<sp/>portal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blockingBits<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_bit_msg" kindref="compound">idBitMsg</ref><sp/>outMsg;</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/>msgBuf[<sp/>MAX_GAME_MESSAGE_SIZE<sp/>];</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"></highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!gameLocal.isClient<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.Init(<sp/>msgBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>msgBuf<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteByte(<sp/>GAME_RELIABLE_MESSAGE_PORTAL<sp/>);</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteLong(<sp/>portal<sp/>);</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outMsg.WriteBits(<sp/>blockingBits,<sp/>NUM_RENDER_PORTAL_BITS<sp/>);</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>networkSystem-&gt;ServerSendReliableMessage(<sp/>-1,<sp/>outMsg<sp/>);</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/>gameRenderWorld-&gt;SetPortalState(<sp/>portal,<sp/>blockingBits<sp/>);</highlight></codeline>
<codeline lineno="4070"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"></highlight></codeline>
<codeline lineno="4072"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4073"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4074"><highlight class="comment">idGameLocal::sortSpawnPoints</highlight></codeline>
<codeline lineno="4075"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4076"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4077"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idGameLocal::sortSpawnPoints(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structspawn_spot__t" kindref="compound">spawnSpot_t</ref><sp/>*spot1<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="structspawn_spot__t" kindref="compound">spawnSpot_t</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>ptr1<sp/>);</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structspawn_spot__t" kindref="compound">spawnSpot_t</ref><sp/>*spot2<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="structspawn_spot__t" kindref="compound">spawnSpot_t</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>ptr2<sp/>);</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>diff;</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"></highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>spot1-&gt;dist<sp/>-<sp/>spot2-&gt;dist;</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>diff<sp/>&lt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>diff<sp/>&gt;<sp/>0.0f<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4090"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"></highlight></codeline>
<codeline lineno="4092"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4093"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="4094"><highlight class="comment">idGameLocal::RandomizeInitialSpawns</highlight></codeline>
<codeline lineno="4095"><highlight class="comment">randomize<sp/>the<sp/>order<sp/>of<sp/>the<sp/>initial<sp/>spawns</highlight></codeline>
<codeline lineno="4096"><highlight class="comment">prepare<sp/>for<sp/>a<sp/>sequence<sp/>of<sp/>initial<sp/>player<sp/>spawns</highlight></codeline>
<codeline lineno="4097"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4098"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4099"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::RandomizeInitialSpawns(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspawn_spot__t" kindref="compound">spawnSpot_t</ref><sp/>spot;</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"></highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!isMultiplayer<sp/>||<sp/>isClient<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnSpots.Clear();</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/><sp/><sp/>initialSpots.Clear();</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/><sp/><sp/>spot.dist<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/>spot.ent<sp/>=<sp/>FindEntityUsingDef(<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;info_player_deathmatch&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>spot.ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spawnSpots.Append(<sp/>spot<sp/>);</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>spot.ent-&gt;spawnArgs.GetBool(<sp/></highlight><highlight class="stringliteral">&quot;initial&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialSpots.Append(<sp/>spot.ent<sp/>);</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spot.ent<sp/>=<sp/>FindEntityUsingDef(<sp/>spot.ent,<sp/></highlight><highlight class="stringliteral">&quot;info_player_deathmatch&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!spawnSpots.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>info_player_deathmatch<sp/>in<sp/>map&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/>common-&gt;Printf(<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>spawns<sp/>(%d<sp/>initials)\n&quot;</highlight><highlight class="normal">,<sp/>spawnSpots.Num(),<sp/>initialSpots.Num()<sp/>);</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>are<sp/>no<sp/>initial<sp/>spots<sp/>in<sp/>the<sp/>map,<sp/>consider<sp/>they<sp/>can<sp/>all<sp/>be<sp/>used<sp/>as<sp/>initial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!initialSpots.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>info_player_deathmatch<sp/>entities<sp/>marked<sp/>initial<sp/>in<sp/>map&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>spawnSpots.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialSpots.Append(<sp/>spawnSpots[<sp/>i<sp/>].ent<sp/>);</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>initialSpots.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>random.RandomInt(<sp/>initialSpots.Num()<sp/>);</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>initialSpots[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialSpots[<sp/>i<sp/>]<sp/>=<sp/>initialSpots[<sp/>j<sp/>];</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialSpots[<sp/>j<sp/>]<sp/>=<sp/>ent;</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>the<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/>currentInitialSpot<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"></highlight></codeline>
<codeline lineno="4140"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4141"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="4142"><highlight class="comment">idGameLocal::SelectInitialSpawnPoint</highlight></codeline>
<codeline lineno="4143"><highlight class="comment">spectators<sp/>are<sp/>spawned<sp/>randomly<sp/>anywhere</highlight></codeline>
<codeline lineno="4144"><highlight class="comment">in-game<sp/>clients<sp/>are<sp/>spawned<sp/>based<sp/>on<sp/>distance<sp/>to<sp/>active<sp/>players<sp/>(randomized<sp/>on<sp/>the<sp/>first<sp/>half)</highlight></codeline>
<codeline lineno="4145"><highlight class="comment">upon<sp/>map<sp/>restart,<sp/>initial<sp/>spawns<sp/>are<sp/>used<sp/>(randomized<sp/>ordered<sp/>list<sp/>of<sp/>spawns<sp/>flagged<sp/>&quot;initial&quot;)</highlight></codeline>
<codeline lineno="4146"><highlight class="comment"><sp/><sp/>if<sp/>there<sp/>are<sp/>more<sp/>players<sp/>than<sp/>initial<sp/>spots,<sp/>overflow<sp/>to<sp/>regular<sp/>spawning</highlight></codeline>
<codeline lineno="4147"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4148"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*idGameLocal::SelectInitialSpawnPoint(<sp/><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*player<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>j,<sp/>which;</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspawn_spot__t" kindref="compound">spawnSpot_t</ref><sp/><sp/><sp/><sp/><sp/>spot;</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_vec3" kindref="compound">idVec3</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos;</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist;</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alone;</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"></highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!isMultiplayer<sp/>||<sp/>!spawnSpots.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spot.ent<sp/>=<sp/>FindEntityUsingDef(<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;info_player_start&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!spot.ent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error(<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>info_player_start<sp/>on<sp/>map.\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spot.ent;</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>player-&gt;spectating<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>plain<sp/>random<sp/>spot,<sp/>don&apos;t<sp/>bother</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spawnSpots[<sp/>random.RandomInt(<sp/>spawnSpots.Num()<sp/>)<sp/>].ent;</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>player-&gt;useInitialSpawns<sp/>&amp;&amp;<sp/>currentInitialSpot<sp/>&lt;<sp/>initialSpots.Num()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>initialSpots[<sp/>currentInitialSpot++<sp/>];</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>we<sp/>are<sp/>alone<sp/>in<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alone<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>MAX_CLIENTS;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>entities[<sp/>j<sp/>]<sp/>&amp;&amp;<sp/>entities[<sp/>j<sp/>]<sp/>!=<sp/>player<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alone<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>alone<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>do<sp/>distance-based</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spawnSpots[<sp/>random.RandomInt(<sp/>spawnSpots.Num()<sp/>)<sp/>].ent;</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"></highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>distance<sp/>to<sp/>the<sp/>closest<sp/>active<sp/>player<sp/>for<sp/>each<sp/>spawn<sp/>spot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>spawnSpots.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>spawnSpots[<sp/>i<sp/>].ent-&gt;GetPhysics()-&gt;GetOrigin();</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spawnSpots[<sp/>i<sp/>].dist<sp/>=<sp/>0x7fffffff;</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>MAX_CLIENTS;<sp/>j++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!entities[<sp/>j<sp/>]<sp/>||<sp/>!entities[<sp/>j<sp/>]-&gt;IsType(<sp/>idPlayer::Type<sp/>)</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>entities[<sp/>j<sp/>]<sp/>==<sp/>player</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>static_cast&lt;<sp/>idPlayer<sp/>*<sp/>&gt;(<sp/>entities[<sp/>j<sp/>]<sp/>)-&gt;spectating<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>(<sp/>pos<sp/>-<sp/>entities[<sp/>j<sp/>]-&gt;GetPhysics()-&gt;GetOrigin()<sp/>).LengthSqr();</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dist<sp/>&lt;<sp/>spawnSpots[<sp/>i<sp/>].dist<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spawnSpots[<sp/>i<sp/>].dist<sp/>=<sp/>dist;</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"></highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qsort(<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)spawnSpots.Ptr(),<sp/>spawnSpots.Num(),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structspawn_spot__t" kindref="compound">spawnSpot_t</ref><sp/>),<sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>)sortSpawnPoints<sp/>);</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"></highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>choose<sp/>a<sp/>random<sp/>one<sp/>in<sp/>the<sp/>top<sp/>half</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>which<sp/>=<sp/>random.RandomInt(<sp/>spawnSpots.Num()<sp/>/<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spot<sp/>=<sp/>spawnSpots[<sp/>which<sp/>];</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spot.ent;</highlight></codeline>
<codeline lineno="4208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"></highlight></codeline>
<codeline lineno="4210"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4211"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4212"><highlight class="comment">idGameLocal::UpdateServerInfoFlags</highlight></codeline>
<codeline lineno="4213"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4214"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4215"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::UpdateServerInfoFlags()<sp/>{</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><sp/><sp/>gameType<sp/>=<sp/>GAME_SP;</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>idStr::Icmp(<sp/>serverInfo.GetString(<sp/></highlight><highlight class="stringliteral">&quot;si_gameType&quot;</highlight><highlight class="normal"><sp/>),<sp/></highlight><highlight class="stringliteral">&quot;deathmatch&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameType<sp/>=<sp/>GAME_DM;</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>idStr::Icmp(<sp/>serverInfo.GetString(<sp/></highlight><highlight class="stringliteral">&quot;si_gameType&quot;</highlight><highlight class="normal"><sp/>),<sp/></highlight><highlight class="stringliteral">&quot;Tourney&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameType<sp/>=<sp/>GAME_TOURNEY;</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>idStr::Icmp(<sp/>serverInfo.GetString(<sp/></highlight><highlight class="stringliteral">&quot;si_gameType&quot;</highlight><highlight class="normal"><sp/>),<sp/></highlight><highlight class="stringliteral">&quot;Team<sp/>DM&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameType<sp/>=<sp/>GAME_TDM;</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>idStr::Icmp(<sp/>serverInfo.GetString(<sp/></highlight><highlight class="stringliteral">&quot;si_gameType&quot;</highlight><highlight class="normal"><sp/>),<sp/></highlight><highlight class="stringliteral">&quot;Last<sp/>Man&quot;</highlight><highlight class="normal"><sp/>)<sp/>==<sp/>0<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameType<sp/>=<sp/>GAME_LASTMAN;</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameType<sp/>==<sp/>GAME_LASTMAN<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!serverInfo.GetInt(<sp/></highlight><highlight class="stringliteral">&quot;si_warmup&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;Last<sp/>Man<sp/>Standing<sp/>-<sp/>forcing<sp/>warmup<sp/>on&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>serverInfo.SetInt(<sp/></highlight><highlight class="stringliteral">&quot;si_warmup&quot;</highlight><highlight class="normal">,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>serverInfo.GetInt(<sp/></highlight><highlight class="stringliteral">&quot;si_fraglimit&quot;</highlight><highlight class="normal"><sp/>)<sp/>&lt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common-&gt;Warning(<sp/></highlight><highlight class="stringliteral">&quot;Last<sp/>Man<sp/>Standing<sp/>-<sp/>setting<sp/>fraglimit<sp/>1&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>serverInfo.SetInt(<sp/></highlight><highlight class="stringliteral">&quot;si_fraglimit&quot;</highlight><highlight class="normal">,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"></highlight></codeline>
<codeline lineno="4238"><highlight class="normal"></highlight></codeline>
<codeline lineno="4239"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4240"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4241"><highlight class="comment">idGameLocal::SetGlobalMaterial</highlight></codeline>
<codeline lineno="4242"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4243"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4244"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::SetGlobalMaterial(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_material" kindref="compound">idMaterial</ref><sp/>*mat<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/><sp/><sp/>globalMaterial<sp/>=<sp/>mat;</highlight></codeline>
<codeline lineno="4246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"></highlight></codeline>
<codeline lineno="4248"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4249"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4250"><highlight class="comment">idGameLocal::GetGlobalMaterial</highlight></codeline>
<codeline lineno="4251"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4252"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4253"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_material" kindref="compound">idMaterial</ref><sp/>*idGameLocal::GetGlobalMaterial()<sp/>{</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>globalMaterial;</highlight></codeline>
<codeline lineno="4255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"></highlight></codeline>
<codeline lineno="4257"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4258"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4259"><highlight class="comment">idGameLocal::GetSpawnId</highlight></codeline>
<codeline lineno="4260"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4261"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4262"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idGameLocal::GetSpawnId(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref>*<sp/>ent<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.spawnIds[<sp/>ent-&gt;entityNumber<sp/>]<sp/>&lt;&lt;<sp/>GENTITYNUM_BITS<sp/>)<sp/>|<sp/>ent-&gt;entityNumber;</highlight></codeline>
<codeline lineno="4264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"></highlight></codeline>
<codeline lineno="4266"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4267"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4268"><highlight class="comment">idGameLocal::ThrottleUserInfo</highlight></codeline>
<codeline lineno="4269"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4270"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4271"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::ThrottleUserInfo(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/>mpGame.ThrottleUserInfo();</highlight></codeline>
<codeline lineno="4273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"></highlight></codeline>
<codeline lineno="4275"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4276"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="4277"><highlight class="comment">idGameLocal::SelectTimeGroup</highlight></codeline>
<codeline lineno="4278"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4279"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4280"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::SelectTimeGroup(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeGroup<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"></highlight></codeline>
<codeline lineno="4282"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4283"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="4284"><highlight class="comment">idGameLocal::GetTimeGroupTime</highlight></codeline>
<codeline lineno="4285"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4286"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4287"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idGameLocal::GetTimeGroupTime(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeGroup<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gameLocal.time;</highlight></codeline>
<codeline lineno="4289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"></highlight></codeline>
<codeline lineno="4291"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4292"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="4293"><highlight class="comment">idGameLocal::GetBestGameType</highlight></codeline>
<codeline lineno="4294"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4295"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4296"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::GetBestGameType(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>map,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>gametype,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[<sp/>MAX_STRING_CHARS<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/>strncpy(<sp/>buf,<sp/>gametype,<sp/>MAX_STRING_CHARS<sp/>);</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[<sp/>MAX_STRING_CHARS<sp/>-<sp/>1<sp/>]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"></highlight></codeline>
<codeline lineno="4301"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4302"><highlight class="comment">===========</highlight></codeline>
<codeline lineno="4303"><highlight class="comment">idGameLocal::NeedRestart</highlight></codeline>
<codeline lineno="4304"><highlight class="comment">============</highlight></codeline>
<codeline lineno="4305"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4306"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idGameLocal::NeedRestart()<sp/>{</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"></highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_dict" kindref="compound">idDict</ref><sp/><sp/><sp/><sp/><sp/><sp/>newInfo;</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_key_value" kindref="compound">idKeyValue</ref><sp/>*keyval,<sp/>*keyval2;</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"></highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/><sp/><sp/>newInfo<sp/>=<sp/>*cvarSystem-&gt;MoveCVarsToDict(<sp/>CVAR_SERVERINFO<sp/>);</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"></highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>newInfo.GetNumKeyVals();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyval<sp/>=<sp/>newInfo.GetKeyVal(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyval2<sp/>=<sp/>serverInfo.FindKey(<sp/>keyval-&gt;GetKey()<sp/>);</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!keyval2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>select<sp/>set<sp/>of<sp/>si_<sp/>changes<sp/>will<sp/>cause<sp/>a<sp/>full<sp/>restart<sp/>of<sp/>the<sp/>server</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>keyval-&gt;GetValue().Cmp(<sp/>keyval2-&gt;GetValue()<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>!keyval-&gt;GetKey().Cmp(<sp/></highlight><highlight class="stringliteral">&quot;si_pure&quot;</highlight><highlight class="normal"><sp/>)<sp/>||<sp/>!keyval-&gt;GetKey().Cmp(<sp/></highlight><highlight class="stringliteral">&quot;si_map&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"></highlight></codeline>
<codeline lineno="4327"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4328"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4329"><highlight class="comment">idGameLocal::GetClientStats</highlight></codeline>
<codeline lineno="4330"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4331"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4332"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::GetClientStats(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/><sp/><sp/>mpGame.PlayerStats(<sp/>clientNum,<sp/>data,<sp/>len<sp/>);</highlight></codeline>
<codeline lineno="4334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"></highlight></codeline>
<codeline lineno="4336"><highlight class="normal"></highlight></codeline>
<codeline lineno="4337"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4338"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4339"><highlight class="comment">idGameLocal::SwitchTeam</highlight></codeline>
<codeline lineno="4340"><highlight class="comment">================</highlight></codeline>
<codeline lineno="4341"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4342"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::SwitchTeam(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clientNum,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>team<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"></highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*<sp/><sp/><sp/>player;</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/><sp/><sp/>player<sp/>=<sp/>clientNum<sp/>&gt;=<sp/>0<sp/>?<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>gameLocal.entities[<sp/>clientNum<sp/>]<sp/>)<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"></highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!player<sp/>)</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"></highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldTeam<sp/>=<sp/>player-&gt;team;</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"></highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Put<sp/>in<sp/>spectator<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>team<sp/>==<sp/>-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="classid_player" kindref="compound">idPlayer</ref><sp/>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>entities[<sp/>clientNum<sp/>]<sp/>)-&gt;Spectate(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Switch<sp/>to<sp/>a<sp/>team</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpGame.SwitchToTeam<sp/>(<sp/>clientNum,<sp/>oldTeam,<sp/>team<sp/>);</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"></highlight></codeline>
<codeline lineno="4362"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4363"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="4364"><highlight class="comment">idGameLocal::GetMapLoadingGUI</highlight></codeline>
<codeline lineno="4365"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="4366"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4367"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idGameLocal::GetMapLoadingGUI(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>gui[<sp/>MAX_STRING_CHARS<sp/>]<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/game/Game_local.cpp"/>
  </compounddef>
</doxygen>
