<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="game_2gamesys_2_class_8cpp" kind="file">
    <compoundname>Class.cpp</compoundname>
    <includes refid="precompiled_8h" local="yes">../../idlib/precompiled.h</includes>
    <includes refid="game_2_game__local_8h" local="yes">../Game_local.h</includes>
    <includes refid="game_2gamesys_2_type_info_8h" local="yes">TypeInfo.h</includes>
    <includes refid="game_2gamesys_2_callbacks_8cpp" local="yes">Callbacks.cpp</includes>
      <sectiondef kind="var">
      <memberdef kind="variable" id="game_2gamesys_2_class_8cpp_1aa7458e7604edc104273298f449b7e4db" prot="public" static="yes" mutable="no">
        <type><ref refid="classid_type_info" kindref="compound">idTypeInfo</ref> *</type>
        <definition>idTypeInfo* typelist</definition>
        <argsstring></argsstring>
        <name>typelist</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/gamesys/Class.cpp" line="50" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/gamesys/Class.cpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2gamesys_2_class_8cpp_1a4de9d62e0c97e7c64f712844904c9402" prot="public" static="yes" mutable="no">
        <type><ref refid="classid_hierarchy" kindref="compound">idHierarchy</ref>&lt; <ref refid="classid_type_info" kindref="compound">idTypeInfo</ref> &gt;</type>
        <definition>idHierarchy&lt;idTypeInfo&gt; classHierarchy</definition>
        <argsstring></argsstring>
        <name>classHierarchy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/gamesys/Class.cpp" line="51" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/gamesys/Class.cpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2gamesys_2_class_8cpp_1a7e484c0f432eac565d5f2f7220d6dd2a" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int eventCallbackMemory</definition>
        <argsstring></argsstring>
        <name>eventCallbackMemory</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/gamesys/Class.cpp" line="52" column="1" bodyfile="E:/sources/3rd_party/DOOM/neo/game/gamesys/Class.cpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2gamesys_2_class_8cpp_1abd3c8412bb0f81bd53288e2564a7682f" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_Remove(&quot;&lt;immediateremove&gt;&quot;, NULL)</definition>
        <argsstring>(&quot;&lt;immediateremove&gt;&quot;, NULL)</argsstring>
        <name>EV_Remove</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/gamesys/Class.cpp" line="229" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="game_2gamesys_2_class_8cpp_1afafe4f5815ffdc93b3efc81a8437c3c3" prot="public" static="no" mutable="no">
        <type>const <ref refid="classid_event_def" kindref="compound">idEventDef</ref></type>
        <definition>const idEventDef EV_SafeRemove(&quot;remove&quot;, NULL)</definition>
        <argsstring>(&quot;remove&quot;, NULL)</argsstring>
        <name>EV_SafeRemove</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="E:/sources/3rd_party/DOOM/neo/game/gamesys/Class.cpp" line="230" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Copyright<sp/>(C)<sp/>1999-2011<sp/>id<sp/>Software<sp/>LLC,<sp/>a<sp/>ZeniMax<sp/>Media<sp/>company.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Doom<sp/>3<sp/>GPL<sp/>Source<sp/>Code<sp/>(?Doom<sp/>3<sp/>Source<sp/>Code?).<sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment">along<sp/>with<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">In<sp/>addition,<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code<sp/>is<sp/>also<sp/>subject<sp/>to<sp/>certain<sp/>additional<sp/>terms.<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>these<sp/>additional<sp/>terms<sp/>immediately<sp/>following<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>which<sp/>accompanied<sp/>the<sp/>Doom<sp/>3<sp/>Source<sp/>Code.<sp/><sp/>If<sp/>not,<sp/>please<sp/>request<sp/>a<sp/>copy<sp/>in<sp/>writing<sp/>from<sp/>id<sp/>Software<sp/>at<sp/>the<sp/>address<sp/>below.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">If<sp/>you<sp/>have<sp/>questions<sp/>concerning<sp/>this<sp/>license<sp/>or<sp/>the<sp/>applicable<sp/>additional<sp/>terms,<sp/>you<sp/>may<sp/>contact<sp/>in<sp/>writing<sp/>id<sp/>Software<sp/>LLC,<sp/>c/o<sp/>ZeniMax<sp/>Media<sp/>Inc.,<sp/>Suite<sp/>120,<sp/>Rockville,<sp/>Maryland<sp/>20850<sp/>USA.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">===========================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"></highlight></codeline>
<codeline lineno="30"><highlight class="comment">Base<sp/>class<sp/>for<sp/>all<sp/>C++<sp/>objects.<sp/><sp/>Provides<sp/>fast<sp/>run-time<sp/>type<sp/>checking<sp/>and<sp/>run-time</highlight></codeline>
<codeline lineno="31"><highlight class="comment">instancing<sp/>of<sp/>objects.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"></highlight></codeline>
<codeline lineno="33"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../idlib/precompiled.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>hdrstop</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../Game_local.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TypeInfo.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">/***********************************************************************</highlight></codeline>
<codeline lineno="44"><highlight class="comment"></highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/>idTypeInfo</highlight></codeline>
<codeline lineno="46"><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment">***********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>the<sp/>head<sp/>of<sp/>a<sp/>singly<sp/>linked<sp/>list<sp/>of<sp/>all<sp/>the<sp/>idTypes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*typelist<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classid_hierarchy" kindref="compound">idHierarchy&lt;idTypeInfo&gt;</ref><sp/><sp/>classHierarchy;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eventCallbackMemory<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="55"><highlight class="comment">================</highlight></codeline>
<codeline lineno="56"><highlight class="comment">idTypeInfo::idClassType()</highlight></codeline>
<codeline lineno="57"><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment">Constructor<sp/>for<sp/>class.<sp/><sp/>Should<sp/>only<sp/>be<sp/>called<sp/>from<sp/>CLASS_DECLARATION<sp/>macro.</highlight></codeline>
<codeline lineno="59"><highlight class="comment">Handles<sp/>linking<sp/>class<sp/>definition<sp/>into<sp/>class<sp/>hierarchy.<sp/><sp/>This<sp/>should<sp/>only<sp/>happen</highlight></codeline>
<codeline lineno="60"><highlight class="comment">at<sp/>startup<sp/>as<sp/>idTypeInfos<sp/>are<sp/>statically<sp/>defined.<sp/><sp/>Since<sp/>static<sp/>variables<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="61"><highlight class="comment">initialized<sp/>in<sp/>any<sp/>order,<sp/>the<sp/>constructor<sp/>must<sp/>handle<sp/>the<sp/>case<sp/>that<sp/>subclasses</highlight></codeline>
<codeline lineno="62"><highlight class="comment">are<sp/>initialized<sp/>before<sp/>superclasses.</highlight></codeline>
<codeline lineno="63"><highlight class="comment">================</highlight></codeline>
<codeline lineno="64"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">idTypeInfo::idTypeInfo(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*classname,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*superclass,<sp/><ref refid="structid_event_func" kindref="compound">idEventFunc&lt;idClass&gt;</ref><sp/>*eventCallbacks,<sp/><ref refid="classid_class" kindref="compound">idClass</ref><sp/>*(<sp/>*CreateInstance<sp/>)(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>),<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classid_class" kindref="compound">idClass</ref>::*Spawn<sp/>)(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classid_class" kindref="compound">idClass</ref>::*Save<sp/>)(<sp/><ref refid="classid_save_game" kindref="compound">idSaveGame</ref><sp/>*savefile<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classid_class" kindref="compound">idClass</ref>::*Restore<sp/>)(<sp/><ref refid="classid_restore_game" kindref="compound">idRestoreGame</ref><sp/>*savefile<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/>*type;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/>**insert;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;classname<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>classname;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;superclass<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>superclass;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;eventCallbacks<sp/><sp/><sp/><sp/>=<sp/>eventCallbacks;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;eventMap<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;Spawn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Spawn;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;Save<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Save;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;Restore<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Restore;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;CreateInstance<sp/><sp/><sp/><sp/>=<sp/>CreateInstance;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;super<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>idClass::GetClass(<sp/>superclass<sp/>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;freeEventMap<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>typeNum<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>lastChild<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>any<sp/>subclasses<sp/>were<sp/>initialized<sp/>before<sp/>their<sp/>superclass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>type<sp/>=<sp/>typelist;<sp/>type<sp/>!=<sp/>NULL;<sp/>type<sp/>=<sp/>type-&gt;next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>type-&gt;super<sp/>==<sp/>NULL<sp/>)<sp/>&amp;&amp;<sp/>!idStr::Cmp(<sp/>type-&gt;superclass,<sp/>this-&gt;classname<sp/>)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idStr::Cmp(<sp/>type-&gt;classname,<sp/></highlight><highlight class="stringliteral">&quot;idClass&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type-&gt;super<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>sorted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>insert<sp/>=<sp/>&amp;typelist;<sp/>*insert;<sp/>insert<sp/>=<sp/>&amp;(*insert)-&gt;next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>idStr::Cmp(<sp/>classname,<sp/>(*insert)-&gt;classname<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idStr::Cmp(<sp/>classname,<sp/>(*insert)-&gt;classname<sp/>)<sp/>&lt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>*insert;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*insert<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!*insert<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*insert<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="108"><highlight class="comment">================</highlight></codeline>
<codeline lineno="109"><highlight class="comment">idTypeInfo::~idTypeInfo</highlight></codeline>
<codeline lineno="110"><highlight class="comment">================</highlight></codeline>
<codeline lineno="111"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">idTypeInfo::~idTypeInfo()<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>Shutdown();</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="117"><highlight class="comment">================</highlight></codeline>
<codeline lineno="118"><highlight class="comment">idTypeInfo::Init</highlight></codeline>
<codeline lineno="119"><highlight class="comment"></highlight></codeline>
<codeline lineno="120"><highlight class="comment">Initializes<sp/>the<sp/>event<sp/>callback<sp/>table<sp/>for<sp/>the<sp/>class.<sp/><sp/>Creates<sp/>a<sp/></highlight></codeline>
<codeline lineno="121"><highlight class="comment">table<sp/>for<sp/>fast<sp/>lookups<sp/>of<sp/>event<sp/>functions.<sp/><sp/>Should<sp/>only<sp/>be<sp/>called<sp/>once.</highlight></codeline>
<codeline lineno="122"><highlight class="comment">================</highlight></codeline>
<codeline lineno="123"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idTypeInfo::Init(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*c;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structid_event_func" kindref="compound">idEventFunc&lt;idClass&gt;</ref><sp/><sp/><sp/><sp/>*def;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ev;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*set;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>eventMap<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we&apos;ve<sp/>already<sp/>been<sp/>initialized<sp/>by<sp/>a<sp/>subclass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>our<sp/>superclass<sp/>is<sp/>initialized<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>super<sp/>&amp;&amp;<sp/>!super-&gt;eventMap<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>super-&gt;Init();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>to<sp/>our<sp/>node<sp/>hierarchy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>super<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node.ParentTo(<sp/>super-&gt;node<sp/>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node.ParentTo(<sp/>classHierarchy<sp/>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>node.SetOwner(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>track<sp/>of<sp/>the<sp/>number<sp/>of<sp/>children<sp/>below<sp/>each<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>c<sp/>=<sp/>super;<sp/>c<sp/>!=<sp/>NULL;<sp/>c<sp/>=<sp/>c-&gt;super<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;lastChild++;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we&apos;re<sp/>not<sp/>adding<sp/>any<sp/>new<sp/>event<sp/>callbacks,<sp/>we<sp/>can<sp/>just<sp/>use<sp/>our<sp/>superclass&apos;s<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>!eventCallbacks<sp/>||<sp/>!eventCallbacks-&gt;event<sp/>)<sp/>&amp;&amp;<sp/>super<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eventMap<sp/>=<sp/>super-&gt;eventMap;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>a<sp/>flag<sp/>so<sp/>we<sp/>know<sp/>to<sp/>delete<sp/>the<sp/>eventMap<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>freeEventMap<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>our<sp/>new<sp/>table.<sp/><sp/>It<sp/>has<sp/>to<sp/>have<sp/>as<sp/>many<sp/>entries<sp/>as<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>events.<sp/><sp/>NOTE:<sp/>could<sp/>save<sp/>some<sp/>space<sp/>by<sp/>keeping<sp/>track<sp/>of<sp/>the<sp/>maximum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>event<sp/>that<sp/>the<sp/>class<sp/>responds<sp/>to<sp/>and<sp/>doing<sp/>range<sp/>checking.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>idEventDef::NumEventCommands();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>eventMap<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>eventCallback_t[<sp/>num<sp/>];</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>eventMap,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>eventCallback_t<sp/>)<sp/>*<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>eventCallbackMemory<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>eventCallback_t<sp/>)<sp/>*<sp/>num;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>temporary<sp/>memory<sp/>for<sp/>flags<sp/>so<sp/>that<sp/>the<sp/>subclass&apos;s<sp/>event<sp/>callbacks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>override<sp/>the<sp/>superclass&apos;s<sp/>event<sp/>callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>set<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">[<sp/>num<sp/>];</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<sp/>set,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>)<sp/>*<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>through<sp/>the<sp/>inheritence<sp/>order<sp/>and<sp/>copies<sp/>the<sp/>event<sp/>callback<sp/>function<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>list<sp/>indexed<sp/>by<sp/>the<sp/>event<sp/>number.<sp/><sp/>This<sp/>allows<sp/>fast<sp/>lookups<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>event<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>c<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>c<sp/>!=<sp/>NULL;<sp/>c<sp/>=<sp/>c-&gt;super<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def<sp/>=<sp/>c-&gt;eventCallbacks;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!def<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>through<sp/>each<sp/>entry<sp/>until<sp/>we<sp/>hit<sp/>the<sp/>NULL<sp/>terminator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>def[<sp/>i<sp/>].event<sp/>!=<sp/>NULL;<sp/>i++<sp/>)<sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ev<sp/>=<sp/>def[<sp/>i<sp/>].event-&gt;GetEventNum();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>set[<sp/>ev<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set[<sp/>ev<sp/>]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eventMap[<sp/>ev<sp/>]<sp/>=<sp/>def[<sp/>i<sp/>].function;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>set;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="202"><highlight class="comment">================</highlight></codeline>
<codeline lineno="203"><highlight class="comment">idTypeInfo::Shutdown</highlight></codeline>
<codeline lineno="204"><highlight class="comment"></highlight></codeline>
<codeline lineno="205"><highlight class="comment">Should<sp/>only<sp/>be<sp/>called<sp/>when<sp/>DLL<sp/>or<sp/>EXE<sp/>is<sp/>being<sp/>shutdown.</highlight></codeline>
<codeline lineno="206"><highlight class="comment">Although<sp/>it<sp/>cleans<sp/>up<sp/>any<sp/>allocated<sp/>memory,<sp/>it<sp/>doesn&apos;t<sp/>bother<sp/>to<sp/>remove<sp/>itself<sp/></highlight></codeline>
<codeline lineno="207"><highlight class="comment">from<sp/>the<sp/>class<sp/>list<sp/>since<sp/>the<sp/>program<sp/>is<sp/>shutting<sp/>down.</highlight></codeline>
<codeline lineno="208"><highlight class="comment">================</highlight></codeline>
<codeline lineno="209"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idTypeInfo::Shutdown()<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>up<sp/>the<sp/>memory<sp/>used<sp/>for<sp/>event<sp/>lookups</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>eventMap<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>freeEventMap<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>eventMap;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eventMap<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>typeNum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>lastChild<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">/***********************************************************************</highlight></codeline>
<codeline lineno="224"><highlight class="comment"></highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/>idClass</highlight></codeline>
<codeline lineno="226"><highlight class="comment"></highlight></codeline>
<codeline lineno="227"><highlight class="comment">***********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_Remove(<sp/></highlight><highlight class="stringliteral">&quot;&lt;immediateremove&gt;&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>EV_SafeRemove(<sp/></highlight><highlight class="stringliteral">&quot;remove&quot;</highlight><highlight class="normal">,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal">ABSTRACT_DECLARATION(<sp/>NULL,<sp/><ref refid="classid_class" kindref="compound">idClass</ref><sp/>)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_Remove,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_class" kindref="compound">idClass</ref>::Event_Remove<sp/>)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>EVENT(<sp/>EV_SafeRemove,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classid_class" kindref="compound">idClass</ref>::Event_SafeRemove<sp/>)</highlight></codeline>
<codeline lineno="235"><highlight class="normal">END_CLASS</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>alphabetical<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><ref refid="classid_list" kindref="compound">idList</ref>&lt;<ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/>*&gt;<sp/><sp/><sp/><sp/><ref refid="classid_class" kindref="compound">idClass</ref>::types;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>typenum<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><ref refid="classid_list" kindref="compound">idList</ref>&lt;<ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/>*&gt;<sp/><sp/><sp/><sp/><ref refid="classid_class" kindref="compound">idClass</ref>::typenums;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_class" kindref="compound">idClass</ref>::initialized<sp/><sp/><sp/><sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classid_class" kindref="compound">idClass</ref>::typeNumBits<sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classid_class" kindref="compound">idClass</ref>::memused<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classid_class" kindref="compound">idClass</ref>::numobjects<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="248"><highlight class="comment">================</highlight></codeline>
<codeline lineno="249"><highlight class="comment">idClass::CallSpawn</highlight></codeline>
<codeline lineno="250"><highlight class="comment">================</highlight></codeline>
<codeline lineno="251"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classid_class" kindref="compound">idClass</ref>::CallSpawn(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/>*type;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>GetType();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>CallSpawnFunc(<sp/>type<sp/>);</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="260"><highlight class="comment">================</highlight></codeline>
<codeline lineno="261"><highlight class="comment">idClass::CallSpawnFunc</highlight></codeline>
<codeline lineno="262"><highlight class="comment">================</highlight></codeline>
<codeline lineno="263"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal">classSpawnFunc_t<sp/>idClass::CallSpawnFunc(<sp/><ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/>*cls<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>classSpawnFunc_t<sp/>func;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cls-&gt;super<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func<sp/>=<sp/>CallSpawnFunc(<sp/>cls-&gt;super<sp/>);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>func<sp/>==<sp/>cls-&gt;Spawn<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>call<sp/>the<sp/>same<sp/>function<sp/>twice<sp/>in<sp/>a<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>can<sp/>happen<sp/>when<sp/>subclasses<sp/>don&apos;t<sp/>have<sp/>their<sp/>own<sp/>spawn<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>func;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>this-&gt;*cls-&gt;Spawn<sp/>)();</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cls-&gt;Spawn;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="282"><highlight class="comment">================</highlight></codeline>
<codeline lineno="283"><highlight class="comment">idClass::FindUninitializedMemory</highlight></codeline>
<codeline lineno="284"><highlight class="comment">================</highlight></codeline>
<codeline lineno="285"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idClass::FindUninitializedMemory(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ID_DEBUG_UNINITIALIZED_MEMORY</highlight></codeline>
<codeline lineno="288"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(<sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*<sp/>)</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>*ptr;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>(<sp/>size<sp/>&amp;<sp/>3<sp/>)<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>&gt;&gt;=<sp/>2;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ptr[i]<sp/>==<sp/>0xcdcdcdcd<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*varName<sp/>=<sp/>GetTypeVariableName(<sp/>GetClassname(),<sp/>i<sp/>&lt;&lt;<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;type<sp/>&apos;%s&apos;<sp/>has<sp/>uninitialized<sp/>variable<sp/>%s<sp/>(offset<sp/>%d)&quot;</highlight><highlight class="normal">,<sp/>GetClassname(),<sp/>varName,<sp/>i<sp/>&lt;&lt;<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="299"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="302"><highlight class="comment">================</highlight></codeline>
<codeline lineno="303"><highlight class="comment">idClass::Spawn</highlight></codeline>
<codeline lineno="304"><highlight class="comment">================</highlight></codeline>
<codeline lineno="305"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idClass::Spawn(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="310"><highlight class="comment">================</highlight></codeline>
<codeline lineno="311"><highlight class="comment">idClass::~idClass</highlight></codeline>
<codeline lineno="312"><highlight class="comment"></highlight></codeline>
<codeline lineno="313"><highlight class="comment">Destructor<sp/>for<sp/>object.<sp/><sp/>Cancels<sp/>any<sp/>events<sp/>that<sp/>depend<sp/>on<sp/>this<sp/>object.</highlight></codeline>
<codeline lineno="314"><highlight class="comment">================</highlight></codeline>
<codeline lineno="315"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal">idClass::~idClass()<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>idEvent::CancelEvents(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="321"><highlight class="comment">================</highlight></codeline>
<codeline lineno="322"><highlight class="comment">idClass::DisplayInfo_f</highlight></codeline>
<codeline lineno="323"><highlight class="comment">================</highlight></codeline>
<codeline lineno="324"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idClass::DisplayInfo_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;Class<sp/>memory<sp/>status:<sp/>%i<sp/>bytes<sp/>allocated<sp/>in<sp/>%i<sp/>objects\n&quot;</highlight><highlight class="normal">,<sp/>memused,<sp/>numobjects<sp/>);</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="330"><highlight class="comment">================</highlight></codeline>
<codeline lineno="331"><highlight class="comment">idClass::ListClasses_f</highlight></codeline>
<codeline lineno="332"><highlight class="comment">================</highlight></codeline>
<codeline lineno="333"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idClass::ListClasses_f(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_cmd_args" kindref="compound">idCmdArgs</ref><sp/>&amp;args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/>*type;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;%-24s<sp/>%-24s<sp/>%-6s<sp/>%-6s\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Classname&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Superclass&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Type&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Subclasses&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;----------------------------------------------------------------------\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>types.Num();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/>types[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;%-24s<sp/>%-24s<sp/>%6d<sp/>%6d\n&quot;</highlight><highlight class="normal">,<sp/>type-&gt;classname,<sp/>type-&gt;superclass,<sp/>type-&gt;typeNum,<sp/>type-&gt;lastChild<sp/>-<sp/>type-&gt;typeNum<sp/>);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;...%d<sp/>classes&quot;</highlight><highlight class="normal">,<sp/>types.Num()<sp/>);</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="350"><highlight class="comment">================</highlight></codeline>
<codeline lineno="351"><highlight class="comment">idClass::CreateInstance</highlight></codeline>
<codeline lineno="352"><highlight class="comment">================</highlight></codeline>
<codeline lineno="353"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><ref refid="classid_class" kindref="compound">idClass</ref><sp/>*idClass::CreateInstance(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/><sp/><sp/><sp/>*type;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_class" kindref="compound">idClass</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*obj;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>idClass::GetClass(<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!type<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>obj<sp/>=<sp/>type-&gt;CreateInstance();</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj;</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="368"><highlight class="comment">================</highlight></codeline>
<codeline lineno="369"><highlight class="comment">idClass::Init</highlight></codeline>
<codeline lineno="370"><highlight class="comment"></highlight></codeline>
<codeline lineno="371"><highlight class="comment">Should<sp/>be<sp/>called<sp/>after<sp/>all<sp/>idTypeInfos<sp/>are<sp/>initialized,<sp/>so<sp/>must<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="372"><highlight class="comment">manually<sp/>upon<sp/>game<sp/>code<sp/>initialization.<sp/><sp/>Tells<sp/>all<sp/>the<sp/>idTypeInfos<sp/>to<sp/>initialize</highlight></codeline>
<codeline lineno="373"><highlight class="comment">their<sp/>event<sp/>callback<sp/>table<sp/>for<sp/>the<sp/>associated<sp/>class.<sp/><sp/>This<sp/>should<sp/>only<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="374"><highlight class="comment">once<sp/>during<sp/>the<sp/>execution<sp/>of<sp/>the<sp/>program<sp/>or<sp/>DLL.</highlight></codeline>
<codeline lineno="375"><highlight class="comment">================</highlight></codeline>
<codeline lineno="376"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idClass::Init(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/><sp/>*c;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;Initializing<sp/>class<sp/>hierarchy\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>initialized<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;...already<sp/>initialized\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>the<sp/>event<sp/>callback<sp/>tables<sp/>for<sp/>all<sp/>the<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>c<sp/>=<sp/>typelist;<sp/>c<sp/>!=<sp/>NULL;<sp/>c<sp/>=<sp/>c-&gt;next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;Init();</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>the<sp/>types<sp/>according<sp/>to<sp/>the<sp/>class<sp/>hierarchy<sp/>so<sp/>we<sp/>can<sp/>quickly<sp/>determine<sp/>if<sp/>a<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>subclass<sp/>of<sp/>another</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>c<sp/>=<sp/>classHierarchy.GetNext();<sp/>c<sp/>!=<sp/>NULL;<sp/>c<sp/>=<sp/>c-&gt;node.GetNext(),<sp/>num++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;typeNum<sp/>=<sp/>num;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;lastChild<sp/>+=<sp/>num;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>bits<sp/>needed<sp/>to<sp/>send<sp/>types<sp/>over<sp/>network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>typeNumBits<sp/>=<sp/>idMath::BitsForInteger(<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>list<sp/>of<sp/>the<sp/>types<sp/>so<sp/>we<sp/>can<sp/>do<sp/>quick<sp/>lookups</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>list<sp/>in<sp/>alphabetical<sp/>order,<sp/>one<sp/>in<sp/>typenum<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>types.SetGranularity(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>types.SetNum(<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>typenums.SetGranularity(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>typenums.SetNum(<sp/>num<sp/>);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>c<sp/>=<sp/>typelist;<sp/>c<sp/>!=<sp/>NULL;<sp/>c<sp/>=<sp/>c-&gt;next,<sp/>num++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>types[<sp/>num<sp/>]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typenums[<sp/>c-&gt;typeNum<sp/>]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>initialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;...%i<sp/>classes,<sp/>%i<sp/>bytes<sp/>for<sp/>event<sp/>callbacks\n&quot;</highlight><highlight class="normal">,<sp/>types.Num(),<sp/>eventCallbackMemory<sp/>);</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="422"><highlight class="comment">================</highlight></codeline>
<codeline lineno="423"><highlight class="comment">idClass::Shutdown</highlight></codeline>
<codeline lineno="424"><highlight class="comment">================</highlight></codeline>
<codeline lineno="425"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idClass::Shutdown(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/><sp/>*c;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>c<sp/>=<sp/>typelist;<sp/>c<sp/>!=<sp/>NULL;<sp/>c<sp/>=<sp/>c-&gt;next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;Shutdown();</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>types.Clear();</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>typenums.Clear();</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>initialized<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="439"><highlight class="comment">================</highlight></codeline>
<codeline lineno="440"><highlight class="comment">idClass::new</highlight></codeline>
<codeline lineno="441"><highlight class="comment">================</highlight></codeline>
<codeline lineno="442"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ID_DEBUG_MEMORY</highlight></codeline>
<codeline lineno="444"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>new</highlight></codeline>
<codeline lineno="445"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="446"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>idClass::operator<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>int<sp/>);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)Mem_Alloc(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>memused<sp/>+=<sp/>s;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>numobjects++;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ID_DEBUG_UNINITIALIZED_MEMORY</highlight></codeline>
<codeline lineno="457"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*)p;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>(<sp/>size<sp/>&amp;<sp/>3<sp/>)<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>&gt;&gt;=<sp/>3;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[i]<sp/>=<sp/>0xcdcdcdcd;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="465"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>idClass::operator<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s,<sp/>int,<sp/>int,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>int<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>int<sp/>);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)Mem_Alloc(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>memused<sp/>+=<sp/>s;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>numobjects++;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ID_DEBUG_UNINITIALIZED_MEMORY</highlight></codeline>
<codeline lineno="479"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*)p;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>(<sp/>size<sp/>&amp;<sp/>3<sp/>)<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>&gt;&gt;=<sp/>3;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[i]<sp/>=<sp/>0xcdcdcdcd;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="487"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ID_DEBUG_MEMORY</highlight></codeline>
<codeline lineno="492"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>new<sp/>ID_DEBUG_NEW</highlight></codeline>
<codeline lineno="493"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="494"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="496"><highlight class="comment">================</highlight></codeline>
<codeline lineno="497"><highlight class="comment">idClass::delete</highlight></codeline>
<codeline lineno="498"><highlight class="comment">================</highlight></codeline>
<codeline lineno="499"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idClass::operator<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ptr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(<sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>)ptr<sp/>)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memused<sp/>-=<sp/>*p;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numobjects--;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>p<sp/>);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idClass::operator<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/>int,<sp/>int,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>int<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ptr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(<sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>)ptr<sp/>)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memused<sp/>-=<sp/>*p;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numobjects--;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem_Free(<sp/>p<sp/>);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="523"><highlight class="comment">================</highlight></codeline>
<codeline lineno="524"><highlight class="comment">idClass::GetClass</highlight></codeline>
<codeline lineno="525"><highlight class="comment"></highlight></codeline>
<codeline lineno="526"><highlight class="comment">Returns<sp/>the<sp/>idTypeInfo<sp/>for<sp/>the<sp/>name<sp/>of<sp/>the<sp/>class<sp/>passed<sp/>in.<sp/><sp/>This<sp/>is<sp/>a<sp/>static<sp/>function</highlight></codeline>
<codeline lineno="527"><highlight class="comment">so<sp/>it<sp/>must<sp/>be<sp/>called<sp/>as<sp/>idClass::GetClass(<sp/>classname<sp/>)</highlight></codeline>
<codeline lineno="528"><highlight class="comment">================</highlight></codeline>
<codeline lineno="529"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/>*idClass::GetClass(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/><sp/>*c;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!initialized<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>idClass::Init<sp/>hasn&apos;t<sp/>been<sp/>called<sp/>yet,<sp/>so<sp/>do<sp/>a<sp/>slow<sp/>lookup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>c<sp/>=<sp/>typelist;<sp/>c<sp/>!=<sp/>NULL;<sp/>c<sp/>=<sp/>c-&gt;next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idStr::Cmp(<sp/>c-&gt;classname,<sp/>name<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>a<sp/>binary<sp/>search<sp/>through<sp/>the<sp/>list<sp/>of<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>types.Num()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>min<sp/>&lt;=<sp/>max<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid<sp/>=<sp/>(<sp/>min<sp/>+<sp/>max<sp/>)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>types[<sp/>mid<sp/>];</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order<sp/>=<sp/>idStr::Cmp(<sp/>c-&gt;classname,<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!order<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>order<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>mid<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min<sp/>=<sp/>mid<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="566"><highlight class="comment">================</highlight></codeline>
<codeline lineno="567"><highlight class="comment">idClass::GetType</highlight></codeline>
<codeline lineno="568"><highlight class="comment">================</highlight></codeline>
<codeline lineno="569"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/>*idClass::GetType(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>typeNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/>*c;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!initialized<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>c<sp/>=<sp/>typelist;<sp/>c<sp/>!=<sp/>NULL;<sp/>c<sp/>=<sp/>c-&gt;next<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>c-&gt;typeNum<sp/>==<sp/>typeNum<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>typeNum<sp/>&gt;=<sp/>0<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>typeNum<sp/>&lt;<sp/>types.Num()<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>typenums[<sp/>typeNum<sp/>];</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="587"><highlight class="comment">================</highlight></codeline>
<codeline lineno="588"><highlight class="comment">idClass::GetClassname</highlight></codeline>
<codeline lineno="589"><highlight class="comment"></highlight></codeline>
<codeline lineno="590"><highlight class="comment">Returns<sp/>the<sp/>text<sp/>classname<sp/>of<sp/>the<sp/>object.</highlight></codeline>
<codeline lineno="591"><highlight class="comment">================</highlight></codeline>
<codeline lineno="592"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*idClass::GetClassname(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/>*type;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>GetType();</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type-&gt;classname;</highlight></codeline>
<codeline lineno="598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="601"><highlight class="comment">================</highlight></codeline>
<codeline lineno="602"><highlight class="comment">idClass::GetSuperclass</highlight></codeline>
<codeline lineno="603"><highlight class="comment"></highlight></codeline>
<codeline lineno="604"><highlight class="comment">Returns<sp/>the<sp/>text<sp/>classname<sp/>of<sp/>the<sp/>superclass.</highlight></codeline>
<codeline lineno="605"><highlight class="comment">================</highlight></codeline>
<codeline lineno="606"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*idClass::GetSuperclass(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/>*cls;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>cls<sp/>=<sp/>GetType();</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cls-&gt;superclass;</highlight></codeline>
<codeline lineno="612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="615"><highlight class="comment">================</highlight></codeline>
<codeline lineno="616"><highlight class="comment">idClass::CancelEvents</highlight></codeline>
<codeline lineno="617"><highlight class="comment">================</highlight></codeline>
<codeline lineno="618"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idClass::CancelEvents(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>idEvent::CancelEvents(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>ev<sp/>);</highlight></codeline>
<codeline lineno="621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="624"><highlight class="comment">================</highlight></codeline>
<codeline lineno="625"><highlight class="comment">idClass::PostEventArgs</highlight></codeline>
<codeline lineno="626"><highlight class="comment">================</highlight></codeline>
<codeline lineno="627"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::PostEventArgs(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numargs,<sp/>...<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/><sp/>*c;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_event" kindref="compound">idEvent</ref><sp/><sp/><sp/><sp/><sp/>*event;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/><sp/><sp/><sp/><sp/>args;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>ev<sp/>);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!idEvent::initialized<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>GetType();</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!c-&gt;eventMap[<sp/>ev-&gt;GetEventNum()<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>don&apos;t<sp/>respond<sp/>to<sp/>this<sp/>event,<sp/>so<sp/>ignore<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>service<sp/>events<sp/>on<sp/>the<sp/>client<sp/>to<sp/>avoid<sp/>any<sp/>bad<sp/>code<sp/>filling<sp/>up<sp/>the<sp/>event<sp/>pool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>don&apos;t<sp/>want<sp/>them<sp/>processed<sp/>usually,<sp/>unless<sp/>when<sp/>the<sp/>map<sp/>is<sp/>(re)loading.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>allow<sp/>threads<sp/>to<sp/>run<sp/>fine,<sp/>though.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gameLocal.isClient<sp/>&amp;&amp;<sp/>(<sp/>gameLocal.GameState()<sp/>!=<sp/>GAMESTATE_STARTUP<sp/>)<sp/>&amp;&amp;<sp/>!IsType(<sp/>idThread::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(<sp/>args,<sp/>numargs<sp/>);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>idEvent::Alloc(<sp/>ev,<sp/>numargs,<sp/>args<sp/>);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(<sp/>args<sp/>);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;Schedule(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>c,<sp/>time<sp/>);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="662"><highlight class="comment">================</highlight></codeline>
<codeline lineno="663"><highlight class="comment">idClass::PostEventMS</highlight></codeline>
<codeline lineno="664"><highlight class="comment">================</highlight></codeline>
<codeline lineno="665"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::PostEventMS(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PostEventArgs(<sp/>ev,<sp/>time,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="671"><highlight class="comment">================</highlight></codeline>
<codeline lineno="672"><highlight class="comment">idClass::PostEventMS</highlight></codeline>
<codeline lineno="673"><highlight class="comment">================</highlight></codeline>
<codeline lineno="674"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::PostEventMS(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PostEventArgs(<sp/>ev,<sp/>time,<sp/>1,<sp/>&amp;arg1<sp/>);</highlight></codeline>
<codeline lineno="677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="680"><highlight class="comment">================</highlight></codeline>
<codeline lineno="681"><highlight class="comment">idClass::PostEventMS</highlight></codeline>
<codeline lineno="682"><highlight class="comment">================</highlight></codeline>
<codeline lineno="683"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::PostEventMS(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PostEventArgs(<sp/>ev,<sp/>time,<sp/>2,<sp/>&amp;arg1,<sp/>&amp;arg2<sp/>);</highlight></codeline>
<codeline lineno="686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="689"><highlight class="comment">================</highlight></codeline>
<codeline lineno="690"><highlight class="comment">idClass::PostEventMS</highlight></codeline>
<codeline lineno="691"><highlight class="comment">================</highlight></codeline>
<codeline lineno="692"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::PostEventMS(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg2,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg3<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PostEventArgs(<sp/>ev,<sp/>time,<sp/>3,<sp/>&amp;arg1,<sp/>&amp;arg2,<sp/>&amp;arg3<sp/>);</highlight></codeline>
<codeline lineno="695"><highlight class="normal">}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="698"><highlight class="comment">================</highlight></codeline>
<codeline lineno="699"><highlight class="comment">idClass::PostEventMS</highlight></codeline>
<codeline lineno="700"><highlight class="comment">================</highlight></codeline>
<codeline lineno="701"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::PostEventMS(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg2,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg3,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg4<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PostEventArgs(<sp/>ev,<sp/>time,<sp/>4,<sp/>&amp;arg1,<sp/>&amp;arg2,<sp/>&amp;arg3,<sp/>&amp;arg4<sp/>);</highlight></codeline>
<codeline lineno="704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="707"><highlight class="comment">================</highlight></codeline>
<codeline lineno="708"><highlight class="comment">idClass::PostEventMS</highlight></codeline>
<codeline lineno="709"><highlight class="comment">================</highlight></codeline>
<codeline lineno="710"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::PostEventMS(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg2,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg3,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg4,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg5<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PostEventArgs(<sp/>ev,<sp/>time,<sp/>5,<sp/>&amp;arg1,<sp/>&amp;arg2,<sp/>&amp;arg3,<sp/>&amp;arg4,<sp/>&amp;arg5<sp/>);</highlight></codeline>
<codeline lineno="713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="716"><highlight class="comment">================</highlight></codeline>
<codeline lineno="717"><highlight class="comment">idClass::PostEventMS</highlight></codeline>
<codeline lineno="718"><highlight class="comment">================</highlight></codeline>
<codeline lineno="719"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::PostEventMS(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg2,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg3,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg4,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg5,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg6<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PostEventArgs(<sp/>ev,<sp/>time,<sp/>6,<sp/>&amp;arg1,<sp/>&amp;arg2,<sp/>&amp;arg3,<sp/>&amp;arg4,<sp/>&amp;arg5,<sp/>&amp;arg6<sp/>);</highlight></codeline>
<codeline lineno="722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="725"><highlight class="comment">================</highlight></codeline>
<codeline lineno="726"><highlight class="comment">idClass::PostEventMS</highlight></codeline>
<codeline lineno="727"><highlight class="comment">================</highlight></codeline>
<codeline lineno="728"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::PostEventMS(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg2,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg3,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg4,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg5,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg6,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg7<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PostEventArgs(<sp/>ev,<sp/>time,<sp/>7,<sp/>&amp;arg1,<sp/>&amp;arg2,<sp/>&amp;arg3,<sp/>&amp;arg4,<sp/>&amp;arg5,<sp/>&amp;arg6,<sp/>&amp;arg7<sp/>);</highlight></codeline>
<codeline lineno="731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="734"><highlight class="comment">================</highlight></codeline>
<codeline lineno="735"><highlight class="comment">idClass::PostEventMS</highlight></codeline>
<codeline lineno="736"><highlight class="comment">================</highlight></codeline>
<codeline lineno="737"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::PostEventMS(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg2,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg3,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg4,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg5,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg6,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg7,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg8<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PostEventArgs(<sp/>ev,<sp/>time,<sp/>8,<sp/>&amp;arg1,<sp/>&amp;arg2,<sp/>&amp;arg3,<sp/>&amp;arg4,<sp/>&amp;arg5,<sp/>&amp;arg6,<sp/>&amp;arg7,<sp/>&amp;arg8<sp/>);</highlight></codeline>
<codeline lineno="740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="743"><highlight class="comment">================</highlight></codeline>
<codeline lineno="744"><highlight class="comment">idClass::PostEventSec</highlight></codeline>
<codeline lineno="745"><highlight class="comment">================</highlight></codeline>
<codeline lineno="746"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::PostEventSec(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PostEventArgs(<sp/>ev,<sp/>SEC2MS(<sp/>time<sp/>),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="752"><highlight class="comment">================</highlight></codeline>
<codeline lineno="753"><highlight class="comment">idClass::PostEventSec</highlight></codeline>
<codeline lineno="754"><highlight class="comment">================</highlight></codeline>
<codeline lineno="755"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::PostEventSec(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PostEventArgs(<sp/>ev,<sp/>SEC2MS(<sp/>time<sp/>),<sp/>1,<sp/>&amp;arg1<sp/>);</highlight></codeline>
<codeline lineno="758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="761"><highlight class="comment">================</highlight></codeline>
<codeline lineno="762"><highlight class="comment">idClass::PostEventSec</highlight></codeline>
<codeline lineno="763"><highlight class="comment">================</highlight></codeline>
<codeline lineno="764"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::PostEventSec(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PostEventArgs(<sp/>ev,<sp/>SEC2MS(<sp/>time<sp/>),<sp/>2,<sp/>&amp;arg1,<sp/>&amp;arg2<sp/>);</highlight></codeline>
<codeline lineno="767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="770"><highlight class="comment">================</highlight></codeline>
<codeline lineno="771"><highlight class="comment">idClass::PostEventSec</highlight></codeline>
<codeline lineno="772"><highlight class="comment">================</highlight></codeline>
<codeline lineno="773"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::PostEventSec(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg2,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg3<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PostEventArgs(<sp/>ev,<sp/>SEC2MS(<sp/>time<sp/>),<sp/>3,<sp/>&amp;arg1,<sp/>&amp;arg2,<sp/>&amp;arg3<sp/>);</highlight></codeline>
<codeline lineno="776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="779"><highlight class="comment">================</highlight></codeline>
<codeline lineno="780"><highlight class="comment">idClass::PostEventSec</highlight></codeline>
<codeline lineno="781"><highlight class="comment">================</highlight></codeline>
<codeline lineno="782"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::PostEventSec(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg2,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg3,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg4<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PostEventArgs(<sp/>ev,<sp/>SEC2MS(<sp/>time<sp/>),<sp/>4,<sp/>&amp;arg1,<sp/>&amp;arg2,<sp/>&amp;arg3,<sp/>&amp;arg4<sp/>);</highlight></codeline>
<codeline lineno="785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="788"><highlight class="comment">================</highlight></codeline>
<codeline lineno="789"><highlight class="comment">idClass::PostEventSec</highlight></codeline>
<codeline lineno="790"><highlight class="comment">================</highlight></codeline>
<codeline lineno="791"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::PostEventSec(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg2,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg3,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg4,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg5<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PostEventArgs(<sp/>ev,<sp/>SEC2MS(<sp/>time<sp/>),<sp/>5,<sp/>&amp;arg1,<sp/>&amp;arg2,<sp/>&amp;arg3,<sp/>&amp;arg4,<sp/>&amp;arg5<sp/>);</highlight></codeline>
<codeline lineno="794"><highlight class="normal">}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="797"><highlight class="comment">================</highlight></codeline>
<codeline lineno="798"><highlight class="comment">idClass::PostEventSec</highlight></codeline>
<codeline lineno="799"><highlight class="comment">================</highlight></codeline>
<codeline lineno="800"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::PostEventSec(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg2,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg3,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg4,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg5,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg6<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PostEventArgs(<sp/>ev,<sp/>SEC2MS(<sp/>time<sp/>),<sp/>6,<sp/>&amp;arg1,<sp/>&amp;arg2,<sp/>&amp;arg3,<sp/>&amp;arg4,<sp/>&amp;arg5,<sp/>&amp;arg6<sp/>);</highlight></codeline>
<codeline lineno="803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="806"><highlight class="comment">================</highlight></codeline>
<codeline lineno="807"><highlight class="comment">idClass::PostEventSec</highlight></codeline>
<codeline lineno="808"><highlight class="comment">================</highlight></codeline>
<codeline lineno="809"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::PostEventSec(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg2,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg3,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg4,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg5,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg6,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg7<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PostEventArgs(<sp/>ev,<sp/>SEC2MS(<sp/>time<sp/>),<sp/>7,<sp/>&amp;arg1,<sp/>&amp;arg2,<sp/>&amp;arg3,<sp/>&amp;arg4,<sp/>&amp;arg5,<sp/>&amp;arg6,<sp/>&amp;arg7<sp/>);</highlight></codeline>
<codeline lineno="812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="815"><highlight class="comment">================</highlight></codeline>
<codeline lineno="816"><highlight class="comment">idClass::PostEventSec</highlight></codeline>
<codeline lineno="817"><highlight class="comment">================</highlight></codeline>
<codeline lineno="818"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::PostEventSec(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg2,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg3,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg4,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg5,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg6,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg7,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg8<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PostEventArgs(<sp/>ev,<sp/>SEC2MS(<sp/>time<sp/>),<sp/>8,<sp/>&amp;arg1,<sp/>&amp;arg2,<sp/>&amp;arg3,<sp/>&amp;arg4,<sp/>&amp;arg5,<sp/>&amp;arg6,<sp/>&amp;arg7,<sp/>&amp;arg8<sp/>);</highlight></codeline>
<codeline lineno="821"><highlight class="normal">}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="824"><highlight class="comment">================</highlight></codeline>
<codeline lineno="825"><highlight class="comment">idClass::ProcessEventArgs</highlight></codeline>
<codeline lineno="826"><highlight class="comment">================</highlight></codeline>
<codeline lineno="827"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::ProcessEventArgs(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numargs,<sp/>...<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/><sp/>*c;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[<sp/>D_EVENT_MAXARGS<sp/>];</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/><sp/><sp/><sp/><sp/>args;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>ev<sp/>);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>idEvent::initialized<sp/>);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>GetType();</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>ev-&gt;GetEventNum();</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!c-&gt;eventMap[<sp/>num<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>don&apos;t<sp/>respond<sp/>to<sp/>this<sp/>event,<sp/>so<sp/>ignore<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(<sp/>args,<sp/>numargs<sp/>);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>idEvent::CopyArgs(<sp/>ev,<sp/>numargs,<sp/>args,<sp/>data<sp/>);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(<sp/>args<sp/>);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessEventArgPtr(<sp/>ev,<sp/>data<sp/>);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="851"><highlight class="normal">}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="854"><highlight class="comment">================</highlight></codeline>
<codeline lineno="855"><highlight class="comment">idClass::ProcessEvent</highlight></codeline>
<codeline lineno="856"><highlight class="comment">================</highlight></codeline>
<codeline lineno="857"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::ProcessEvent(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ProcessEventArgs(<sp/>ev,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="863"><highlight class="comment">================</highlight></codeline>
<codeline lineno="864"><highlight class="comment">idClass::ProcessEvent</highlight></codeline>
<codeline lineno="865"><highlight class="comment">================</highlight></codeline>
<codeline lineno="866"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::ProcessEvent(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ProcessEventArgs(<sp/>ev,<sp/>1,<sp/>&amp;arg1<sp/>);</highlight></codeline>
<codeline lineno="869"><highlight class="normal">}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="872"><highlight class="comment">================</highlight></codeline>
<codeline lineno="873"><highlight class="comment">idClass::ProcessEvent</highlight></codeline>
<codeline lineno="874"><highlight class="comment">================</highlight></codeline>
<codeline lineno="875"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::ProcessEvent(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ProcessEventArgs(<sp/>ev,<sp/>2,<sp/>&amp;arg1,<sp/>&amp;arg2<sp/>);</highlight></codeline>
<codeline lineno="878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="881"><highlight class="comment">================</highlight></codeline>
<codeline lineno="882"><highlight class="comment">idClass::ProcessEvent</highlight></codeline>
<codeline lineno="883"><highlight class="comment">================</highlight></codeline>
<codeline lineno="884"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::ProcessEvent(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg2,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg3<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ProcessEventArgs(<sp/>ev,<sp/>3,<sp/>&amp;arg1,<sp/>&amp;arg2,<sp/>&amp;arg3<sp/>);</highlight></codeline>
<codeline lineno="887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="890"><highlight class="comment">================</highlight></codeline>
<codeline lineno="891"><highlight class="comment">idClass::ProcessEvent</highlight></codeline>
<codeline lineno="892"><highlight class="comment">================</highlight></codeline>
<codeline lineno="893"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::ProcessEvent(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg2,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg3,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg4<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ProcessEventArgs(<sp/>ev,<sp/>4,<sp/>&amp;arg1,<sp/>&amp;arg2,<sp/>&amp;arg3,<sp/>&amp;arg4<sp/>);</highlight></codeline>
<codeline lineno="896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="899"><highlight class="comment">================</highlight></codeline>
<codeline lineno="900"><highlight class="comment">idClass::ProcessEvent</highlight></codeline>
<codeline lineno="901"><highlight class="comment">================</highlight></codeline>
<codeline lineno="902"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::ProcessEvent(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg2,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg3,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg4,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg5<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ProcessEventArgs(<sp/>ev,<sp/>5,<sp/>&amp;arg1,<sp/>&amp;arg2,<sp/>&amp;arg3,<sp/>&amp;arg4,<sp/>&amp;arg5<sp/>);</highlight></codeline>
<codeline lineno="905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="908"><highlight class="comment">================</highlight></codeline>
<codeline lineno="909"><highlight class="comment">idClass::ProcessEvent</highlight></codeline>
<codeline lineno="910"><highlight class="comment">================</highlight></codeline>
<codeline lineno="911"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::ProcessEvent(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg2,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg3,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg4,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg5,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg6<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ProcessEventArgs(<sp/>ev,<sp/>6,<sp/>&amp;arg1,<sp/>&amp;arg2,<sp/>&amp;arg3,<sp/>&amp;arg4,<sp/>&amp;arg5,<sp/>&amp;arg6<sp/>);</highlight></codeline>
<codeline lineno="914"><highlight class="normal">}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="917"><highlight class="comment">================</highlight></codeline>
<codeline lineno="918"><highlight class="comment">idClass::ProcessEvent</highlight></codeline>
<codeline lineno="919"><highlight class="comment">================</highlight></codeline>
<codeline lineno="920"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::ProcessEvent(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg2,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg3,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg4,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg5,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg6,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg7<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ProcessEventArgs(<sp/>ev,<sp/>7,<sp/>&amp;arg1,<sp/>&amp;arg2,<sp/>&amp;arg3,<sp/>&amp;arg4,<sp/>&amp;arg5,<sp/>&amp;arg6,<sp/>&amp;arg7<sp/>);</highlight></codeline>
<codeline lineno="923"><highlight class="normal">}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="926"><highlight class="comment">================</highlight></codeline>
<codeline lineno="927"><highlight class="comment">idClass::ProcessEvent</highlight></codeline>
<codeline lineno="928"><highlight class="comment">================</highlight></codeline>
<codeline lineno="929"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::ProcessEvent(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg1,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg2,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg3,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg4,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg5,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg6,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg7,<sp/><ref refid="classid_event_arg" kindref="compound">idEventArg</ref><sp/>arg8<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ProcessEventArgs(<sp/>ev,<sp/>8,<sp/>&amp;arg1,<sp/>&amp;arg2,<sp/>&amp;arg3,<sp/>&amp;arg4,<sp/>&amp;arg5,<sp/>&amp;arg6,<sp/>&amp;arg7,<sp/>&amp;arg8<sp/>);</highlight></codeline>
<codeline lineno="932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="935"><highlight class="comment">================</highlight></codeline>
<codeline lineno="936"><highlight class="comment">idClass::ProcessEventArgPtr</highlight></codeline>
<codeline lineno="937"><highlight class="comment">================</highlight></codeline>
<codeline lineno="938"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>idClass::ProcessEventArgPtr(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_event_def" kindref="compound">idEventDef</ref><sp/>*ev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*data<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classid_type_info" kindref="compound">idTypeInfo</ref><sp/><sp/>*c;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>eventCallback_t<sp/>callback;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>ev<sp/>);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>idEvent::initialized<sp/>);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>g_debugTriggers.GetBool()<sp/>&amp;&amp;<sp/>(<sp/>ev<sp/>==<sp/>&amp;EV_Activate<sp/>)<sp/>&amp;&amp;<sp/>IsType(<sp/>idEntity::Type<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>*ent<sp/>=<sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="classid_entity" kindref="compound">idEntity</ref><sp/>**</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>data<sp/>);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Printf(<sp/></highlight><highlight class="stringliteral">&quot;%d:<sp/>&apos;%s&apos;<sp/>activated<sp/>by<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>gameLocal.framenum,<sp/>static_cast&lt;idEntity<sp/>*&gt;(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)-&gt;GetName(),<sp/>ent<sp/>?<sp/>ent-&gt;GetName()<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>GetType();</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>ev-&gt;GetEventNum();</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!c-&gt;eventMap[<sp/>num<sp/>]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>don&apos;t<sp/>respond<sp/>to<sp/>this<sp/>event,<sp/>so<sp/>ignore<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>callback<sp/>=<sp/>c-&gt;eventMap[<sp/>num<sp/>];</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!CPU_EASYARGS</highlight></codeline>
<codeline lineno="962"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="964"><highlight class="comment">on<sp/>ppc<sp/>architecture,<sp/>floats<sp/>are<sp/>passed<sp/>in<sp/>a<sp/>seperate<sp/>set<sp/>of<sp/>registers</highlight></codeline>
<codeline lineno="965"><highlight class="comment">the<sp/>function<sp/>prototypes<sp/>must<sp/>have<sp/>matching<sp/>float<sp/>declaration</highlight></codeline>
<codeline lineno="966"><highlight class="comment"></highlight></codeline>
<codeline lineno="967"><highlight class="comment">http://developer.apple.com/documentation/DeveloperTools/Conceptual/MachORuntime/2rt_powerpc_abi/chapter_9_section_5.html</highlight></codeline>
<codeline lineno="968"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>ev-&gt;GetFormatspecIndex()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1<sp/>&lt;&lt;<sp/>D_EVENT_MAXARGS<sp/>:</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>this-&gt;*callback<sp/>)();</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generated<sp/>file<sp/>-<sp/>see<sp/>CREATE_EVENT_CODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Callbacks.cpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>formatspec<sp/>on<sp/>event<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>ev-&gt;GetName()<sp/>);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="984"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>D_EVENT_MAXARGS<sp/>==<sp/>8<sp/>);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>ev-&gt;GetNumArgs()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0<sp/>:</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>this-&gt;*callback<sp/>)();</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1<sp/>:</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<sp/><ref refid="classid_class" kindref="compound">idClass</ref>::*eventCallback_1_t<sp/>)(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int<sp/>);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>this-&gt;*(<sp/>eventCallback_1_t<sp/>)callback<sp/>)(<sp/>data[<sp/>0<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2<sp/>:</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<sp/><ref refid="classid_class" kindref="compound">idClass</ref>::*eventCallback_2_t<sp/>)(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int<sp/>);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>this-&gt;*(<sp/>eventCallback_2_t<sp/>)callback<sp/>)(<sp/>data[<sp/>0<sp/>],<sp/>data[<sp/>1<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3<sp/>:</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<sp/><ref refid="classid_class" kindref="compound">idClass</ref>::*eventCallback_3_t<sp/>)(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int<sp/>);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>this-&gt;*(<sp/>eventCallback_3_t<sp/>)callback<sp/>)(<sp/>data[<sp/>0<sp/>],<sp/>data[<sp/>1<sp/>],<sp/>data[<sp/>2<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4<sp/>:</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<sp/><ref refid="classid_class" kindref="compound">idClass</ref>::*eventCallback_4_t<sp/>)(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int<sp/>);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>this-&gt;*(<sp/>eventCallback_4_t<sp/>)callback<sp/>)(<sp/>data[<sp/>0<sp/>],<sp/>data[<sp/>1<sp/>],<sp/>data[<sp/>2<sp/>],<sp/>data[<sp/>3<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5<sp/>:</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<sp/><ref refid="classid_class" kindref="compound">idClass</ref>::*eventCallback_5_t<sp/>)(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int<sp/>);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>this-&gt;*(<sp/>eventCallback_5_t<sp/>)callback<sp/>)(<sp/>data[<sp/>0<sp/>],<sp/>data[<sp/>1<sp/>],<sp/>data[<sp/>2<sp/>],<sp/>data[<sp/>3<sp/>],<sp/>data[<sp/>4<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6<sp/>:</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<sp/><ref refid="classid_class" kindref="compound">idClass</ref>::*eventCallback_6_t<sp/>)(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int<sp/>);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>this-&gt;*(<sp/>eventCallback_6_t<sp/>)callback<sp/>)(<sp/>data[<sp/>0<sp/>],<sp/>data[<sp/>1<sp/>],<sp/>data[<sp/>2<sp/>],<sp/>data[<sp/>3<sp/>],<sp/>data[<sp/>4<sp/>],<sp/>data[<sp/>5<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7<sp/>:</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<sp/><ref refid="classid_class" kindref="compound">idClass</ref>::*eventCallback_7_t<sp/>)(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int<sp/>);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>this-&gt;*(<sp/>eventCallback_7_t<sp/>)callback<sp/>)(<sp/>data[<sp/>0<sp/>],<sp/>data[<sp/>1<sp/>],<sp/>data[<sp/>2<sp/>],<sp/>data[<sp/>3<sp/>],<sp/>data[<sp/>4<sp/>],<sp/>data[<sp/>5<sp/>],<sp/>data[<sp/>6<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8<sp/>:</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<sp/><ref refid="classid_class" kindref="compound">idClass</ref>::*eventCallback_8_t<sp/>)(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int<sp/>);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>this-&gt;*(<sp/>eventCallback_8_t<sp/>)callback<sp/>)(<sp/>data[<sp/>0<sp/>],<sp/>data[<sp/>1<sp/>],<sp/>data[<sp/>2<sp/>],<sp/>data[<sp/>3<sp/>],<sp/>data[<sp/>4<sp/>],<sp/>data[<sp/>5<sp/>],<sp/>data[<sp/>6<sp/>],<sp/>data[<sp/>7<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gameLocal.Warning(<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>formatspec<sp/>on<sp/>event<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>ev-&gt;GetName()<sp/>);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1038"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1043"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1044"><highlight class="comment">idClass::Event_Remove</highlight></codeline>
<codeline lineno="1045"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1046"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idClass::Event_Remove(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1052"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1053"><highlight class="comment">idClass::Event_SafeRemove</highlight></codeline>
<codeline lineno="1054"><highlight class="comment">================</highlight></codeline>
<codeline lineno="1055"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idClass::Event_SafeRemove(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Forces<sp/>the<sp/>remove<sp/>to<sp/>be<sp/>done<sp/>at<sp/>a<sp/>safe<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>PostEventMS(<sp/>&amp;EV_Remove,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="E:/sources/3rd_party/DOOM/neo/game/gamesys/Class.cpp"/>
  </compounddef>
</doxygen>
